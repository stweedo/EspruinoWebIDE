

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module != 'undefined' ? Module : {};

// See https://caniuse.com/mdn-javascript_builtins_object_assign

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = Object.assign({}, Module);

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = (status, toThrow) => {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

// Attempt to auto-detect the environment
var ENVIRONMENT_IS_WEB = typeof window == 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts == 'function';
// N.b. Electron.js environment is simultaneously a NODE-environment, but
// also a web environment.
var ENVIRONMENT_IS_NODE = typeof process == 'object' && typeof process.versions == 'object' && typeof process.versions.node == 'string';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -sENVIRONMENT=web or -sENVIRONMENT=node)');
}

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

// Normally we don't log exceptions but instead let them bubble out the top
// level where the embedding environment (e.g. the browser) can handle
// them.
// However under v8 and node we sometimes exit the process direcly in which case
// its up to use us to log the exception before exiting.
// If we fix https://github.com/emscripten-core/emscripten/issues/15080
// this may no longer be needed under node.
function logExceptionOnExit(e) {
  if (e instanceof ExitStatus) return;
  let toLog = e;
  if (e && typeof e == 'object' && e.stack) {
    toLog = [e, e.stack];
  }
  err('exiting due to exception: ' + toLog);
}

var fs;
var nodePath;
var requireNodeFS;

if (ENVIRONMENT_IS_NODE) {
  if (!(typeof process == 'object' && typeof require == 'function')) throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');
  if (ENVIRONMENT_IS_WORKER) {
    scriptDirectory = require('path').dirname(scriptDirectory) + '/';
  } else {
    scriptDirectory = __dirname + '/';
  }

// include: node_shell_read.js


requireNodeFS = () => {
  // Use nodePath as the indicator for these not being initialized,
  // since in some environments a global fs may have already been
  // created.
  if (!nodePath) {
    fs = require('fs');
    nodePath = require('path');
  }
};

read_ = function shell_read(filename, binary) {
  var ret = tryParseAsDataURI(filename);
  if (ret) {
    return binary ? ret : ret.toString();
  }
  requireNodeFS();
  filename = nodePath['normalize'](filename);
  return fs.readFileSync(filename, binary ? undefined : 'utf8');
};

readBinary = (filename) => {
  var ret = read_(filename, true);
  if (!ret.buffer) {
    ret = new Uint8Array(ret);
  }
  assert(ret.buffer);
  return ret;
};

readAsync = (filename, onload, onerror) => {
  var ret = tryParseAsDataURI(filename);
  if (ret) {
    onload(ret);
  }
  requireNodeFS();
  filename = nodePath['normalize'](filename);
  fs.readFile(filename, function(err, data) {
    if (err) onerror(err);
    else onload(data.buffer);
  });
};

// end include: node_shell_read.js
  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);

  if (typeof module != 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  // Without this older versions of node (< v15) will log unhandled rejections
  // but return 0, which is not normally the desired behaviour.  This is
  // not be needed with node v15 and about because it is now the default
  // behaviour:
  // See https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode
  process['on']('unhandledRejection', function(reason) { throw reason; });

  quit_ = (status, toThrow) => {
    if (keepRuntimeAlive()) {
      process['exitCode'] = status;
      throw toThrow;
    }
    logExceptionOnExit(toThrow);
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };

} else
if (ENVIRONMENT_IS_SHELL) {

  if ((typeof process == 'object' && typeof require === 'function') || typeof window == 'object' || typeof importScripts == 'function') throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      const data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    let data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer == 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data == 'object');
    return data;
  };

  readAsync = function readAsync(f, onload, onerror) {
    setTimeout(() => onload(readBinary(f)), 0);
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit == 'function') {
    quit_ = (status, toThrow) => {
      logExceptionOnExit(toThrow);
      quit(status);
    };
  }

  if (typeof print != 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console == 'undefined') console = /** @type{!Console} */({});
    console.log = /** @type{!function(this:Console, ...*): undefined} */ (print);
    console.warn = console.error = /** @type{!function(this:Console, ...*): undefined} */ (typeof printErr != 'undefined' ? printErr : print);
  }

} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (typeof document != 'undefined' && document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  // If scriptDirectory contains a query (starting with ?) or a fragment (starting with #),
  // they are removed because they could contain a slash.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, "").lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }

  if (!(typeof window == 'object' || typeof importScripts == 'function')) throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {
// include: web_or_worker_shell_read.js


  read_ = (url) => {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  }

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = (url) => {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = (url, onload, onerror) => {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = () => {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  }

// end include: web_or_worker_shell_read.js
  }

  setWindowTitle = (title) => document.title = title;
} else
{
  throw new Error('environment detection error');
}

var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
Object.assign(Module, moduleOverrides);
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;
checkIncomingModuleAPI();

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.

if (Module['arguments']) arguments_ = Module['arguments'];legacyModuleProp('arguments', 'arguments_');

if (Module['thisProgram']) thisProgram = Module['thisProgram'];legacyModuleProp('thisProgram', 'thisProgram');

if (Module['quit']) quit_ = Module['quit'];legacyModuleProp('quit', 'quit_');

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] == 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] == 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] == 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] == 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] == 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] == 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] == 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] == 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
assert(typeof Module['TOTAL_MEMORY'] == 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');
legacyModuleProp('read', 'read_');
legacyModuleProp('readAsync', 'readAsync');
legacyModuleProp('readBinary', 'readBinary');
legacyModuleProp('setWindowTitle', 'setWindowTitle');
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';
function alignMemory() { abort('`alignMemory` is now a library function and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line'); }

assert(!ENVIRONMENT_IS_SHELL, "shell environment detected but not enabled at build time.  Add 'shell' to `-sENVIRONMENT` to enable.");




var STACK_ALIGN = 16;
var POINTER_SIZE = 4;

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': case 'u8': return 1;
    case 'i16': case 'u16': return 2;
    case 'i32': case 'u32': return 4;
    case 'i64': case 'u64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length - 1] === '*') {
        return POINTER_SIZE;
      } else if (type[0] === 'i') {
        const bits = Number(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

// include: runtime_functions.js


// This gives correct answers for everything less than 2^{14} = 16384
// I hope nobody is contemplating functions with 16384 arguments...
function uleb128Encode(n) {
  assert(n < 16384);
  if (n < 128) {
    return [n];
  }
  return [(n % 128) | 128, n >> 7];
}

// Converts a signature like 'vii' into a description of the wasm types, like
// { parameters: ['i32', 'i32'], results: [] }.
function sigToWasmTypes(sig) {
  var typeNames = {
    'i': 'i32',
    'j': 'i64',
    'f': 'f32',
    'd': 'f64',
    'p': 'i32',
  };
  var type = {
    parameters: [],
    results: sig[0] == 'v' ? [] : [typeNames[sig[0]]]
  };
  for (var i = 1; i < sig.length; ++i) {
    assert(sig[i] in typeNames, 'invalid signature char: ' + sig[i]);
    type.parameters.push(typeNames[sig[i]]);
  }
  return type;
}

// Wraps a JS function as a wasm function with a given signature.
function convertJsFunctionToWasm(func, sig) {
  return func;
}

var freeTableIndexes = [];

// Weak map of functions in the table to their indexes, created on first use.
var functionsInTableMap;

function getEmptyTableSlot() {
  // Reuse a free index if there is one, otherwise grow.
  if (freeTableIndexes.length) {
    return freeTableIndexes.pop();
  }
  // Grow the table
  try {
    wasmTable.grow(1);
  } catch (err) {
    if (!(err instanceof RangeError)) {
      throw err;
    }
    throw 'Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.';
  }
  return wasmTable.length - 1;
}

function updateTableMap(offset, count) {
  for (var i = offset; i < offset + count; i++) {
    var item = getWasmTableEntry(i);
    // Ignore null values.
    if (item) {
      functionsInTableMap.set(item, i);
    }
  }
}

/**
 * Add a function to the table.
 * 'sig' parameter is required if the function being added is a JS function.
 * @param {string=} sig
 */
function addFunction(func, sig) {
  assert(typeof func != 'undefined');

  // Check if the function is already in the table, to ensure each function
  // gets a unique index. First, create the map if this is the first use.
  if (!functionsInTableMap) {
    functionsInTableMap = new WeakMap();
    updateTableMap(0, wasmTable.length);
  }
  if (functionsInTableMap.has(func)) {
    return functionsInTableMap.get(func);
  }

  // It's not in the table, add it now.

  var ret = getEmptyTableSlot();

  // Set the new value.
  try {
    // Attempting to call this with JS function will cause of table.set() to fail
    setWasmTableEntry(ret, func);
  } catch (err) {
    if (!(err instanceof TypeError)) {
      throw err;
    }
    assert(typeof sig != 'undefined', 'Missing signature argument to addFunction: ' + func);
    var wrapped = convertJsFunctionToWasm(func, sig);
    setWasmTableEntry(ret, wrapped);
  }

  functionsInTableMap.set(func, ret);

  return ret;
}

function removeFunction(index) {
  functionsInTableMap.delete(getWasmTableEntry(index));
  freeTableIndexes.push(index);
}

// end include: runtime_functions.js
// include: runtime_debug.js


function legacyModuleProp(prop, newName) {
  if (!Object.getOwnPropertyDescriptor(Module, prop)) {
    Object.defineProperty(Module, prop, {
      configurable: true,
      get: function() {
        abort('Module.' + prop + ' has been replaced with plain ' + newName + ' (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)');
      }
    });
  }
}

function ignoredModuleProp(prop) {
  if (Object.getOwnPropertyDescriptor(Module, prop)) {
    abort('`Module.' + prop + '` was supplied but `' + prop + '` not included in INCOMING_MODULE_JS_API');
  }
}

function unexportedMessage(sym, isFSSybol) {
  var msg = "'" + sym + "' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)";
  if (isFSSybol) {
    msg += '. Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you';
  }
  return msg;
}

function unexportedRuntimeSymbol(sym, isFSSybol) {
  if (!Object.getOwnPropertyDescriptor(Module, sym)) {
    Object.defineProperty(Module, sym, {
      configurable: true,
      get: function() {
        abort(unexportedMessage(sym, isFSSybol));
      }
    });
  }
}

function unexportedRuntimeFunction(sym, isFSSybol) {
  if (!Object.getOwnPropertyDescriptor(Module, sym)) {
    Module[sym] = () => abort(unexportedMessage(sym, isFSSybol));
  }
}

// end include: runtime_debug.js
var tempRet0 = 0;
var setTempRet0 = (value) => { tempRet0 = value; };
var getTempRet0 = () => tempRet0;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

var wasmBinary;
if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];legacyModuleProp('wasmBinary', 'wasmBinary');
var noExitRuntime = Module['noExitRuntime'] || true;legacyModuleProp('noExitRuntime', 'noExitRuntime');

// include: wasm2js.js


// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.

// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
/** @suppress{duplicate, const} */
var
WebAssembly = {
  // Note that we do not use closure quoting (this['buffer'], etc.) on these
  // functions, as they are just meant for internal use. In other words, this is
  // not a fully general polyfill.
  /** @constructor */
  Memory: function(opts) {
    this.buffer = new ArrayBuffer(opts['initial'] * 65536);
  },

  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
  },

  /** @constructor */
  Instance: function(module, info) {
    // TODO: use the module and info somehow - right now the wasm2js output is embedded in
    // the main JS
    // This will be replaced by the actual wasm2js code.
    this.exports = (
// EMSCRIPTEN_START_ASM
function instantiate(asmLibraryArg) {
function Table(ret) {
  // grow method not included; table is not growable
  ret.set = function(i, func) {
    this[i] = func;
  };
  ret.get = function(i) {
    return this[i];
  };
  return ret;
}

  var bufferView;
  var base64ReverseLookup = new Uint8Array(123/*'z'+1*/);
  for (var i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
  }
function initActiveSegments(imports) {
  base64DecodeToExistingUint8Array(bufferView, 1024, "kG4B");
  base64DecodeToExistingUint8Array(bufferView, 1040, "MAAAAC5ib290MA==");
  base64DecodeToExistingUint8Array(bufferView, 1072, "CmV2YWwocmVxdWlyZSjRB1N0b3JhZ2UpLnJlYWQo0Q1ib290dXBkYXRlLmpzKSk72QIAAC5ib290Y2Rl");
  base64DecodeToExistingUint8Array(bufferView, 1152, "CqxzPXJlcXVpcmUo0QdTdG9yYWdlKS5yZWFkSlNPTijRDHNldHRpbmcuanNvbiwxKaB7fTsKoyhnbG9iYWwuX19GSUxFX1+eIXMuY2xvY2tIYXNXaWRnZXRzKXtsb2FkKCk7sNElQ2xvY2sgaGFzIG5vIHdpZGdldHMsIGNhbid0IGZhc3QgbG9hZDt9CqxfY2xrQXBwPXJlcXVpcmUo0QdTdG9yYWdlKS5yZWFkKHMuY2xvY2spOwqjKCFfY2xrQXBwKXtfY2xrQXBwPXJlcXVpcmUo0QdTdG9yYWdlKS5saXN0KC9cLmluZm8kLykubWFwKGZpbGWie65hcHA9cmVxdWlyZSjRB1N0b3JhZ2UpLnJlYWRKU09OKGZpbGUsMSk7oyhhcHCeYXBwLnR5cGWK0QVjbG9jayl7q2FwcDt9fSkuZmlsdGVyKHiieCkuc29ydCgoYSxiKaJhLnNvcnRvcmRlci1iLnNvcnRvcmRlcilbMF07oyhfY2xrQXBwKXtzLmNsb2NrPV9jbGtBcHAuc3JjO19jbGtBcHA9cmVxdWlyZSjRB1N0b3JhZ2UpLnJlYWQoX2Nsa0FwcC5zcmMpO3MuY2xvY2tIYXNXaWRnZXRzPV9jbGtBcHAuaW5jbHVkZXMo0RJCYW5nbGUubG9hZFdpZGdldHMpO3JlcXVpcmUo0QdTdG9yYWdlKS53cml0ZUpTT04o0QxzZXR0aW5nLmpzb24scyk7fX0KvnM7CqMoIV9jbGtBcHApX2Nsa0FwcD1gRS5zaG93TWVzc2FnZSgiTm8gQ2xvY2sgRm91bmQiKTtzZXRXYXRjaCgoKT0+e0JhbmdsZS5zaG93TGF1bmNoZXIoKTt9LCBnbG9iYWwuQlROMnx8QlROLCB7cmVwZWF0OmZhbHNlLGVkZ2U6ImZhbGxpbmcifSk7YDsKZXZhbChfY2xrQXBwKTsKvl9jbGtBcHA7////5RkAAGJvb3R1cGRhdGUuanM=");
  base64DecodeToExistingUint8Array(bufferView, 1916, "");
  base64DecodeToExistingUint8Array(bufferView, 8580, "eyJpZCI6ImJvb3QiLCJuYW1lIjoiQm9vdGxvYWRlciIsInR5cGUiOiJib290bG9hZGVyIiwic29ydG9yZGVyIjotMTAsInZlcnNpb24iOiIwLjYyIiwidGFncyI6InRvb2wsc3lzdGVtIiwiZmlsZXMiOiJib290LmluZm8sLmJvb3QwLC5ib290Y2RlLGJvb3R1cGRhdGUuanMiff///3cHAABsYXVuY2guYXBwLmpz");
  base64DecodeToExistingUint8Array(bufferView, 8772, "e61zPXJlcXVpcmUo0QdTdG9yYWdlKTutc2NhbGV2YWw9MTutdmVjdG9ydmFsPTIwO61mb250PWcuZ2V0Rm9udHMoKS5pbmNsdWRlcyjRBTEyeDIwKT/RBTEyeDIwOtEFNng4OjI7rXNldHRpbmdzPU9iamVjdC5hc3NpZ24oe3Nob3dDbG9ja3M6tCxmdWxsc2NyZWVuOrV9LHMucmVhZEpTT04o0QtsYXVuY2guanNvbiy0KaB7fSk7oyjRCnZlY3RvcnNpemW5c2V0dGluZ3MpdmVjdG9ydmFsPXBhcnNlSW50KHNldHRpbmdzLnZlY3RvcnNpemUpO6Mo0QRmb250uXNldHRpbmdzKXujKHNldHRpbmdzLmZvbnSK0QZWZWN0b3Ipe3NjYWxldmFsPXZlY3RvcnZhbC8yMDtmb250PdEGVmVjdG9yKyh2ZWN0b3J2YWwpLnRvU3RyaW5nKCk7faR7Zm9udD1zZXR0aW5ncy5mb250O3NjYWxldmFsPShmb250LnNwbGl0KNEBeClbMV0pLzIwO319rWxhdW5jaENhY2hlPXMucmVhZEpTT04o0RFsYXVuY2guY2FjaGUuanNvbiy0KaB7fTutbGF1bmNoSGFzaD1yZXF1aXJlKNEHU3RvcmFnZSkuaGFzaCgvXC5pbmZvLyk7oyhsYXVuY2hDYWNoZS5oYXNojGxhdW5jaEhhc2gpe2xhdW5jaENhY2hlPXtoYXNoOmxhdW5jaEhhc2gsYXBwczpzLmxpc3QoL1wuaW5mbyQvKS5tYXAoYXBwonusYT1zLnJlYWRKU09OKGFwcCwxKTurYZ57bmFtZTphLm5hbWUsdHlwZTphLnR5cGUsaWNvbjphLmljb24sc29ydG9yZGVyOmEuc29ydG9yZGVyLHNyYzphLnNyY307fSkuZmlsdGVyKGFwcKJhcHCeKGFwcC50eXBlitEDYXBwoChhcHAudHlwZYrRBWNsb2NrnnNldHRpbmdzLnNob3dDbG9ja3MpoCFhcHAudHlwZSkpLnNvcnQoKGEsYimie6xuPSgwfGEuc29ydG9yZGVyKS0oMHxiLnNvcnRvcmRlcik7oyhuKatuO6MoYS5uYW1lPGIubmFtZSmrLTE7oyhhLm5hbWU+Yi5uYW1lKasxO6swO30pfTtzLndyaXRlSlNPTijREWxhdW5jaC5jYWNoZS5qc29uLGxhdW5jaENhY2hlKTt9rWFwcHM9bGF1bmNoQ2FjaGUuYXBwczujKCFzZXR0aW5ncy5mdWxsc2NyZWVuKUJhbmdsZS5sb2FkV2lkZ2V0cygpO65kcmF3TWVudT0oKaJ7RS5zaG93U2Nyb2xsZXIoe2g6NjQqc2NhbGV2YWwsYzphcHBzLmxlbmd0aCxkcmF3OihpLHIponusYXBwPWFwcHNbaV07oyghYXBwKas7Zy5jbGVhclJlY3QoKHIueCksKHIueSksKHIueCtyLnctMSksKHIueStyLmgtMSkpO2cuc2V0Rm9udChmb250KS5zZXRGb250QWxpZ24oLTEsMCkuZHJhd1N0cmluZyhhcHAubmFtZSw2NCpzY2FsZXZhbCxyLnkrKDMyKnNjYWxldmFsKSk7oyhhcHAuaWNvbil7oyghYXBwLmltZylhcHAuaW1nPXMucmVhZChhcHAuaWNvbik7sXtnLmRyYXdJbWFnZShhcHAuaW1nLDgqc2NhbGV2YWwsci55Kyg4KnNjYWxldmFsKSx7c2NhbGU6c2NhbGV2YWx9KTt9Y2F0Y2goZSl7fX19LHNlbGVjdDpponusYXBwPWFwcHNbaV07oyghYXBwKas7oyghYXBwLnNyY6ByZXF1aXJlKNEHU3RvcmFnZSkucmVhZChhcHAuc3JjKYu3KXtFLnNob3dTY3JvbGxlcigpO0Uuc2hvd01lc3NhZ2Uo0RRBcHAgU291cmNlCk5vdCBmb3VuZCk7c2V0VGltZW91dChkcmF3TWVudSwyMDAwKTt9pHtsb2FkKGFwcC5zcmMpO319LGJhY2s6QmFuZ2xlLnNob3dDbG9jayxyZW1vdmU6KCmie6MobG9ja1RpbWVvdXQpY2xlYXJUaW1lb3V0KGxvY2tUaW1lb3V0KTtCYW5nbGUucmVtb3ZlTGlzdGVuZXIo0QRsb2NrLGxvY2tIYW5kbGVyKTt9fSk7Zy5mbGlwKCk7QmFuZ2xlLnNldExvY2tlZCi1KTutbG9ja1RpbWVvdXQ7rWxvY2tIYW5kbGVyPaoobG9ja2VkKXujKGxvY2tUaW1lb3V0KWNsZWFyVGltZW91dChsb2NrVGltZW91dCk7bG9ja1RpbWVvdXQ9tzujKGxvY2tlZClsb2NrVGltZW91dD1zZXRUaW1lb3V0KEJhbmdsZS5zaG93Q2xvY2ssMTAwMDApO31CYW5nbGUub24o0QRsb2NrLGxvY2tIYW5kbGVyKTt9O2RyYXdNZW51KCk7oyghc2V0dGluZ3MuZnVsbHNjcmVlbilCYW5nbGUuZHJhd1dpZGdldHMoKTt9//ECAABsYXVuY2guc2V0dGluZ3MuanM=");
  base64DecodeToExistingUint8Array(bufferView, 10716, "KKooYmFjayl7rXNldHRpbmdzPU9iamVjdC5hc3NpZ24oe3Nob3dDbG9ja3M6tCxmdWxsc2NyZWVuOrV9LHJlcXVpcmUo0QdTdG9yYWdlKS5yZWFkSlNPTijRC2xhdW5jaC5qc29uLLQpoHt9KTutZm9udHM9Zy5nZXRGb250cygpO6pzYXZlKGtleSx2YWx1ZSl7c2V0dGluZ3Nba2V5XT12YWx1ZTtyZXF1aXJlKNEHU3RvcmFnZSkud3JpdGUo0QtsYXVuY2guanNvbixzZXR0aW5ncyk7fa5hcHBNZW51PXsiIjp70QV0aXRsZTrRCExhdW5jaGVyfSzRBjwgQmFjazpiYWNrLNEERm9udDp7dmFsdWU6Zm9udHMuaW5jbHVkZXMoc2V0dGluZ3MuZm9udCk/Zm9udHMuaW5kZXhPZihzZXR0aW5ncy5mb250KTpmb250cy5pbmRleE9mKNEFMTJ4MjApLG1pbjowLG1heDpmb250cy5sZW5ndGgtMSxzdGVwOjEsd3JhcDq0LG9uY2hhbmdlOihtKaJ7c2F2ZSjRBGZvbnQsZm9udHNbbV0pfSxmb3JtYXQ6dqJmb250c1t2XX0s0RBWZWN0b3IgRm9udCBTaXplOnt2YWx1ZTpzZXR0aW5ncy52ZWN0b3JzaXploDEwLG1pbjoxMCxtYXg6MjAsc3RlcDoxLHdyYXA6tCxvbmNoYW5nZToobSmie3NhdmUo0Qp2ZWN0b3JzaXplLG0pfX0s0QtTaG93IENsb2Nrczp7dmFsdWU6c2V0dGluZ3Muc2hvd0Nsb2Nrc4q0LG9uY2hhbmdlOihtKaJ7c2F2ZSjRCnNob3dDbG9ja3MsbSl9fSzRCkZ1bGxzY3JlZW46e3ZhbHVlOnNldHRpbmdzLmZ1bGxzY3JlZW6KtCxvbmNoYW5nZToobSmie3NhdmUo0QpmdWxsc2NyZWVuLG0pfX19O0Uuc2hvd01lbnUoYXBwTWVudSk7fSk7////5AAAAGxhdW5jaC5pbmZv");
  base64DecodeToExistingUint8Array(bufferView, 11504, "eyJpZCI6ImxhdW5jaCIsIm5hbWUiOiJMYXVuY2hlciIsInR5cGUiOiJsYXVuY2giLCJzcmMiOiJsYXVuY2guYXBwLmpzIiwic29ydG9yZGVyIjotMTAsInZlcnNpb24iOiIwLjIxIiwidGFncyI6InRvb2wsc3lzdGVtLGxhdW5jaGVyIiwiZmlsZXMiOiJsYXVuY2guaW5mbyxsYXVuY2guYXBwLmpzLGxhdW5jaC5zZXR0aW5ncy5qcyIsImRhdGEiOiJsYXVuY2guanNvbixsYXVuY2guY2FjaGUuanNvbiJ9hQsAAG1jbG9jay5hcHAuanM=");
  base64DecodeToExistingUint8Array(bufferView, 11764, "rGlzMTJIb3VyPShyZXF1aXJlKNEHU3RvcmFnZSkucmVhZEpTT04o0QxzZXR0aW5nLmpzb24sMSmge30pW9EGMTJob3VyXTsKrGxvY2FsZT1yZXF1aXJlKNEGbG9jYWxlKTsKrENIQVJXPTM0OwqsQ0hBUlA9MjsKrFk9NTA7CqxidWY9R3JhcGhpY3MuY3JlYXRlQXJyYXlCdWZmZXIoQ0hBUlcrQ0hBUlAqMixDSEFSVyoyK0NIQVJQKjIsMSx7bXNiOrR9KTsKrGJ1ZmltZz17d2lkdGg6YnVmLmdldFdpZHRoKCksaGVpZ2h0OmJ1Zi5nZXRIZWlnaHQoKSxidWZmZXI6YnVmLmJ1ZmZlcn07CqxsYXN0VGltZT3RBS0tLS0tOwqsYW5pbUludGVydmFsOwqsdGltZUludGVydmFsOwquRElHSVRTPXvRASA6bqJbXSzRATA6bqJbW24sMCwxLDBdLFsxLDAsMSwxXSxbMSwxLDEsMl0sW24sMiwxLDJdLFtuLDEsbiwyXSxbbiwwLG4sMV1dLNEBMTpuoltbMS1uLDAsMSwwXSxbMSwwLDEsMV0sWzEtbiwxLDEsMV0sWzEtbiwxLDEtbiwyXSxbMS1uLDIsMSwyXV0s0QEyOm6iW1swLDAsMSwwXSxbMSwwLDEsMV0sWzAsMSwxLDFdLFswLDErbiwwLDJdLFsxLDItbiwxLDJdLFswLDIsMSwyXV0s0QEzOm6iW1swLDAsMS1uLDBdLFswLDAsMCxuXSxbMSwwLDEsMV0sWzAsMSwxLDFdLFsxLDEsMSwyXSxbbiwyLDEsMl1dLNEBNDpuoltbMCwwLDAsMV0sWzEsMCwxLW4sMF0sWzEsMCwxLDEtbl0sWzAsMSwxLDFdLFsxLDEsMSwyXSxbMS1uLDIsMSwyXV0s0QQ1dG8wOm6iW1swLDAsMCwxXSxbMCwwLDEsMF0sW24sMSwxLDFdLFsxLDEsMSwyXSxbMCwyLDEsMl0sWzAsMiwwLDJdLFsxLDEtbiwxLDFdLFswLDEsMCwxK25dXSzRBDV0bzY6bqJbWzAsMCwwLDFdLFswLDAsMSwwXSxbMCwxLDEsMV0sWzEsMSwxLDJdLFswLDIsMSwyXSxbMCwyLW4sMCwyXV0s0QE2Om6iW1swLDAsMCwxLW5dLFswLDAsMSwwXSxbbiwxLDEsMV0sWzEsMS1uLDEsMV0sWzEsMSwxLDJdLFtuLDIsMSwyXSxbMCwxLW4sMCwyLTIqbl1dLNEBNzpuoltbMCwwLDAsbl0sWzAsMCwxLDBdLFsxLDAsMSwxXSxbMS1uLDEsMSwxXSxbMSwxLDEsMl0sWzEtbiwyLDEsMl0sWzEtbiwxLDEtbiwyXV0s0QE4Om6iW1swLDAsMCwxXSxbMCwwLDEsMF0sWzEsMCwxLDFdLFswLDEsMSwxXSxbMSwxLDEsMl0sWzAsMiwxLDJdLFswLDEsMCwyLW5dXSzRATk6bqJbWzAsMCwwLDFdLFswLDAsMSwwXSxbMSwwLDEsMV0sWzAsMSwxLW4sMV0sWzAsMSwwLDErbl0sWzEsMSwxLDJdLFswLDIsMSwyXV0s0QE6Om6iW1swLjQsMC40LDAuNiwwLjRdLFswLjYsMC40LDAuNiwwLjZdLFswLjYsMC42LDAuNCwwLjZdLFswLjQsMC40LDAuNCwwLjZdLFswLjQsMS40LDAuNiwxLjRdLFswLjYsMS40LDAuNiwxLjZdLFswLjYsMS42LDAuNCwxLjZdLFswLjQsMS40LDAuNCwxLjZdXX07CqpkcmF3RGlnaXRzKGxhc3RUZXh0LHRoaXNUZXh0LG4pe9EDcmFtrnA9Q0hBUlA7rnM9Q0hBUlc7rHg9MDtnLnJlc2V0KCk7pyisaT0wO2k8bGFzdFRleHQubGVuZ3RoO2mYKXusbGFzdENoPWxhc3RUZXh0W2ldO6x0aGlzQ2g9dGhpc1RleHRbaV07oyh0aGlzQ2iK0QE6KXiXNDujKGxhc3RDaIx0aGlzQ2gpe6xjaCxjaG49bjujKCh0aGlzQ2gtMYpsYXN0Q2igKHRoaXNDaIownmxhc3RDaIo1KaAodGhpc0NoijCebGFzdENoijkpKSljaD1sYXN0Q2g7pHtjaD10aGlzQ2g7Y2huPTA7fWJ1Zi5jbGVhcigpO6MoY2iK0QE1KWNoPShsYXN0Q2iKNZ50aGlzQ2iKMCk/0QQ1dG8wOtEENXRvNjusbD1ESUdJVFNbY2hdKGNobik7bC5mb3JFYWNoKGOie6MoY1swXYxjWzJdKWJ1Zi5maWxsUmVjdChwK2NbMF0qcyxjWzFdKnMscCtjWzJdKnMsMipwK2NbM10qcyk7pKMoY1sxXYxjWzNdKWJ1Zi5maWxsUmVjdChjWzBdKnMscCtjWzFdKnMsMipwK2NbMl0qcyxwK2NbM10qcyk7fSk7Zy5kcmF3SW1hZ2UoYnVmaW1nLHgsWSk7faModGhpc0NoitEBOil4lzQ7eJZzK3ArNzt9fQqqZHJhd0V2ZXJ5dGhpbmdFbHNlKCl7rHg9KENIQVJXK0NIQVJQKzYpKjU7rHk9WSsyKkNIQVJXK0NIQVJQO6xkPbhEYXRlKCk7Zy5yZXNldCgpO2cuc2V0Rm9udCjRAzZ4OCk7Zy5zZXRGb250QWxpZ24oLTEsLTEpO2cuZHJhd1N0cmluZygo0QEwK2QuZ2V0U2Vjb25kcygpKS5zdWJzdHIoLTIpLHgseS04LLQpO6MoaXMxMkhvdXIpZy5kcmF3U3RyaW5nKChkLmdldEhvdXJzKCk8MTIpP9ECQU060QJQTSx4LFkrNCy0KTtnLnNldEZvbnRBbGlnbigwLC0xKTusZGF0ZT1sb2NhbGUuZGF0ZShkLLUpO2cuZHJhd1N0cmluZyhkYXRlLGcuZ2V0V2lkdGgoKS8yLHkrOCy0KTt9CqpzaG93VGltZSgpe6MoYW5pbUludGVydmFsKas7rGQ9uERhdGUoKTusaG91cnM9ZC5nZXRIb3VycygpO6MoaXMxMkhvdXIpaG91cnM9KChob3VycysxMSklMTIpKzE7rHQ9KNEBICtob3Vycykuc3Vic3RyKC0yKSvRATorKNEBMCtkLmdldE1pbnV0ZXMoKSkuc3Vic3RyKC0yKTusbD1sYXN0VGltZTujKHSKbKBsitEFLS0tLS0pe2RyYXdEaWdpdHMobCx0LDApO2RyYXdFdmVyeXRoaW5nRWxzZSgpO2xhc3RUaW1lPXQ7qzt9rG49MDthbmltSW50ZXJ2YWw9c2V0SW50ZXJ2YWwoqigpe26WMS8xMDujKG6RMSl7bj0xO2NsZWFySW50ZXJ2YWwoYW5pbUludGVydmFsKTthbmltSW50ZXJ2YWw9tzt9ZHJhd0RpZ2l0cyhsLHQsbik7fSwyMCk7bGFzdFRpbWU9dDt9CkJhbmdsZS5vbijRCGxjZFBvd2VyLKoob24pe6MoYW5pbUludGVydmFsKXtjbGVhckludGVydmFsKGFuaW1JbnRlcnZhbCk7YW5pbUludGVydmFsPbc7faModGltZUludGVydmFsKXtjbGVhckludGVydmFsKHRpbWVJbnRlcnZhbCk7dGltZUludGVydmFsPbc7faMob24pe3Nob3dUaW1lKCk7dGltZUludGVydmFsPXNldEludGVydmFsKHNob3dUaW1lLDEwMDApO32ke2xhc3RUaW1lPdEFLS0tLS07fX0pOwpCYW5nbGUuc2V0VUko0QVjbG9jayk7CmcuY2xlYXIoKTsKQmFuZ2xlLmxvYWRXaWRnZXRzKCk7CkJhbmdsZS5kcmF3V2lkZ2V0cygpOwp0aW1lSW50ZXJ2YWw9c2V0SW50ZXJ2YWwoc2hvd1RpbWUsMTAwMCk7CnNob3dUaW1lKCk7////gwQAAG1jbG9jay5pbWc=");
  base64DecodeToExistingUint8Array(bufferView, 14748, "MDAE");
  base64DecodeToExistingUint8Array(bufferView, 14855, "CIiIiIiIiIA=");
  base64DecodeToExistingUint8Array(bufferView, 14878, "CIiIiIiIiIiIgA==");
  base64DecodeToExistingUint8Array(bufferView, 14901, "CIiIiIiIiIiIiIiA");
  base64DecodeToExistingUint8Array(bufferView, 14925, "iIiIiIiIiIiIiIiI");
  base64DecodeToExistingUint8Array(bufferView, 14948, "iIiIiIgz//8ziIiIiIg=");
  base64DecodeToExistingUint8Array(bufferView, 14971, "CIiIiIP///////84iIiIgAAAAAAAAAAAiIiIg///////////OIiIiAAAAAAAAAAAiIiIP/////AP////84iIiAAAAAAAAAAIiIiP//////AP//////iIiIAAAAAAAACIiIj///////AP//////+IiIgAAAAAAACIiIP///////AP//////84iIgAAAAAAAiIiD////////AP///////ziIiAAAAAAAiIiP////////AP////////iIiAAAAAAIiIg/////////AP////////OIiIAAAAAIiIj/////////AP////////+IiIAAAAAIiIj/////////AP////////+IiIAAAAAIiIP/////////AP////////84iIAAAAAIiIP////////yAC////////84iIAAAAAIiI////////8gAAL////////4iIAAAAAIiI////////8AiAD////////4iIAAAAAIiI////////8AiAD////////4iIAAAAAIiI////////8gAAA////////4iIAAAAAIiIP////////yAAAD//////84iIAAAAAIiIP//////////zAAP/////84iIAAAAAIiIj///////////MAA/////+IiIAAAAAIiIj///////////8wAD////+IiIAAAAAIiIg////////////zAv////OIiIAAAAAAiIiP////////////P/////iIiAAAAAAAiIiD/////////////////ziIiAAAAAAACIiIP///////////////84iIgAAAAAAACIiIj///////////////+IiIgAAAAAAAAIiIiP//////////////iIiIAAAAAAAAAAiIiIP///////////84iIiAAAAAAAAAAAiIiIg///////////OIiIiAAAAAAAAAAACIiIiIP///////84iIiIgA==");
  base64DecodeToExistingUint8Array(bufferView, 15692, "iIiIiIgz//8ziIiIiIg=");
  base64DecodeToExistingUint8Array(bufferView, 15717, "iIiIiIiIiIiIiIiI");
  base64DecodeToExistingUint8Array(bufferView, 15741, "CIiIiIiIiIiIiIiA");
  base64DecodeToExistingUint8Array(bufferView, 15766, "CIiIiIiIiIiIgA==");
  base64DecodeToExistingUint8Array(bufferView, 15791, "CIiIiIiIiIA=");
  base64DecodeToExistingUint8Array(bufferView, 15903, "/74AAABtY2xvY2suaW5mbw==");
  base64DecodeToExistingUint8Array(bufferView, 15936, "eyJpZCI6Im1jbG9jayIsIm5hbWUiOiJNb3JwaGluZyBDbG9jayIsInR5cGUiOiJjbG9jayIsInNyYyI6Im1jbG9jay5hcHAuanMiLCJpY29uIjoibWNsb2NrLmltZyIsInNvcnRvcmRlciI6LTksInZlcnNpb24iOiIwLjA4IiwidGFncyI6ImNsb2NrIiwiZmlsZXMiOiJtY2xvY2suaW5mbyxtY2xvY2suYXBwLmpzLG1jbG9jay5pbWciff//zR0AAGFib3V0LmFwcC5qcw==");
  base64DecodeToExistingUint8Array(bufferView, 16160, "");
  base64DecodeToExistingUint8Array(bufferView, 23824, "MDCI/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+VVVVVVVVVVVV/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/lVVVVVVVVVVVVVV/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+VVVVVVVVVVVVVVVVVVVVVf7+/v7+/v7+/v4QEP7+/v7+/v7+/v7+/v7+/v7+/v5VVVVVVVVVVVVVVVVVVVVVVVX+/v7+/v7+/hAQEBD+/v7+/v7+/v7+/v7+/v7+/lVVVVVVVVVVVVVVVVVVVVVVVVVV/v7+/v7+/hAQEBD+/v7+/v7+/v7+/v7+/v7+VVVVVVVVVVVVVVVVVVVVVVVVVVVVVf7+/v7+/v4QEP7+/v7+/v7+/v7+/v7+/v5VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVX+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v5VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVX+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/lVVVVVVVVVVVVVVVVVVVXmjeVVVVVVVVVVV/v7+EBAQEBD+/v7+/v7+/v7+/v7+/lVVVVVVVVVVVVVVVVV5o87OznlVVVVVVVVV/v7+EBAQEBD+/v7+/v7+/v7+/v7+VVVVVVVVVVVVVVVVVXnIzs7Ozsd5VVVVVVVVVf7+EBAQEBD+/v7+/v7+/v7+/v7+VVVVVVVVVVVVVVV5o87Ozs7Ozs6jVVVVVVVVVf7+/v4QEBD+/v7+/v7+/v7+/v7+VVVVVVVVVVVVeaPOzs7Ozs7Ozs7Oo1VVVVVVVf7+/v4QEBD+/v7+/v7+/v7+/v7+VVVVVVVVVVWjyM7Ozs7Ozs7Ozs7OzlVVVVVVVf7+/v4QEBD+/v7+/v7+/v7+/v5VVVVVVVVVecfOzs7Ozs7Ozs7Ozs7OzlVVVVVVVVX+/v4QEBD+/v7+/v7+/v7+/v5VVVVVVVVVzs7Ozs7Ozs7Ozs7Ozs7OzlVVVVVVVVX+/v4QEBD+/v7+/v7+/v7+/v5VVVVVVVVVzs7OeXnOzs7Ozs55ec7OzlVVVVVVVVX+/v4QEBD+/v7+/v7+/v7+/v5VVVVVVVVVzs7OeXnOzs7Ozs55ec7OzlVVVVVVVVX+/v4QEBD+/v7+/v7+/v7+/v5VVVVVVVVVzs7Ozs7Ozs7Ozs7Ozs7OzlVVVVVVVVX+/v4QEBD+/v7+/v7+/v7+/v5VVVVVVVVVzs7Ozs7Ozs7Ozs7Ozs7OzlVVVVVVVVX+/v7+/v7+/v7+/v7+/v7+/v5VVVVVVVVVzs7Ozs7Ozs7Ozs7Ozs7OzlVVVVVVVVX+/v7+/v7+/v7+/v7+/v7+/v5VVVVVVVVVzc7Ozs7Ozs7Ozs7Ozs7OzlVVVVVVVVX+/v7+/v7+/v7+/v7+/v7+/v5VVVVVVVVVec7Ozs7Ozs7Ozs7Ozs7OeVVVVVVVVVX+/v7+/v7+/v7+/v7+/v7+/v5VVVVVVVVVT53Ozs7Ozs7Ozs7Ozs55T1VVVVVVVf7+/v7+/v7+/v7+/v7+/v7+/v7+VVVVVVVVT095x87Ozs7Ozs7Ox3lPT1VVVVX+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v5VVVVVT09PxsbHx83Nx8fGxk9PT1VVVf7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+VVVVT09PxsbGxsbGxsbGxk9PT1VV/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v5VVjMPx8bGxsbGxsbGxw8zVlX+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v5lZQ8PgMbGxsbGxsbGgA8PZWX+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+ZWVlZToPOc3GxsbGxsbNOQ86ZWVlZf7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v5lZWVlZToPD87Nx8bGx83ODw86ZWVlZWX+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/mVlZWVlZWUPD4HOzs7Ozs5dDw9lZWVlZWVl/v7+/v7+/v7+/v7+/v7+/v7+/v7+ZWVlZWVlZWU6Dw+kzs7OzqQPDzplZWVlZWVlZf7+/v7+/v7+/v7+/v7+/v7+/v7+ZWVlZWVlZWVlEA8PXc7OXQ8PEGVlZWVlZWVlZf7+/v7+/v7+/v7+/v7+/v7+/v5lZWVlZWVlZWVlQQ8PDw8PDw8QQWVlZWVlZWVlZWX+/v7+/v7+/v7+/v7+/v7+/v5lZWVlZWVlZWVlZWU6Dw8PDzplZWVlZWVlZWVlZWX+/v7+/v7+/v7+/v7+/v7+/mVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVl/v7+/v7+/v7+/v7+/v7+/mVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVl/v7+/v7+/v7+/v7+/v7+/mVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVl/v7+/v7+/v7+/v7+/v7+/mVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVl/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/qYAAABhYm91dC5pbmZv");
  base64DecodeToExistingUint8Array(bufferView, 26164, "eyJpZCI6ImFib3V0IiwibmFtZSI6IkFib3V0Iiwic3JjIjoiYWJvdXQuYXBwLmpzIiwiaWNvbiI6ImFib3V0LmltZyIsInNvcnRvcmRlciI6LTQsInZlcnNpb24iOiIwLjE1IiwidGFncyI6InRvb2wsc3lzdGVtIiwiZmlsZXMiOiJhYm91dC5pbmZvLGFib3V0LmFwcC5qcyxhYm91dC5pbWciff//MAMAAHdpZGJhdC53aWQuanM=");
  base64DecodeToExistingUint8Array(bufferView, 26364, "e0JhbmdsZS5vbijRCGNoYXJnaW5nLKooY2hhcmdpbmcpe6MoY2hhcmdpbmcpQmFuZ2xlLmJ1enooKTtXSURHRVRTW9EDYmF0XS5kcmF3KCk7Zy5mbGlwKCk7fSk7rWJhdHRlcnlJbnRlcnZhbD1CYW5nbGUuaXNMQ0RPbigpP3NldEludGVydmFsKCgpoldJREdFVFNb0QNiYXRdLmRyYXcoKSw2MDAwMCk6tztCYW5nbGUub24o0QhsY2RQb3dlciyqKG9uKXujKG9uKXtXSURHRVRTW9EDYmF0XS5kcmF3KCk7oyghYmF0dGVyeUludGVydmFsKWJhdHRlcnlJbnRlcnZhbD1zZXRJbnRlcnZhbCgoKaJXSURHRVRTW9EDYmF0XS5kcmF3KCksNjAwMDApO32ke6MoYmF0dGVyeUludGVydmFsKXtjbGVhckludGVydmFsKGJhdHRlcnlJbnRlcnZhbCk7YmF0dGVyeUludGVydmFsPbc7fX19KTtXSURHRVRTW9EDYmF0XT17YXJlYTrRAnRyLHdpZHRoOjQwLGRyYXc6qigpe6x4Pa8ueCx5Pa8ueTtnLnJlc2V0KCkuc2V0Q29sb3IoZy50aGVtZS5mZykuZmlsbFJlY3QoeCx5KzIseCszNSx5KzIxKS5jbGVhclJlY3QoeCsyLHkrNCx4KzMzLHkrMTkpLmZpbGxSZWN0KHgrMzYseSsxMCx4KzM5LHkrMTQpO6xiYXR0ZXJ5PUUuZ2V0QmF0dGVyeSgpO6MoYmF0dGVyeTwyMClnLnNldENvbG9yKNEEI2YwMCk7pKMoYmF0dGVyeTw0MClnLnNldENvbG9yKGcudGhlbWUuZGFyaz/RBCNmZjA60QQjZjgwKTukZy5zZXRDb2xvcijRBCMwZjApO2cuZmlsbFJlY3QoeCs0LHkrNix4KzQrYmF0dGVyeSoyNy8xMDAseSsxNyk7oyhCYW5nbGUuaXNDaGFyZ2luZygpKWcucmVzZXQoKS5kcmF3SW1hZ2Uo0R0UCoEAAcAADwAA/AAH8Ph/w/4fD+AAPwAA8AADgCx4KzgseSs3KTt9fTt9igAAAHdpZGJhdC5pbmZv");
  base64DecodeToExistingUint8Array(bufferView, 27212, "eyJpZCI6IndpZGJhdCIsIm5hbWUiOiJCYXR0ZXJ5IExldmVsIFdpZGdldCIsInR5cGUiOiJ3aWRnZXQiLCJ2ZXJzaW9uIjoiMC4xMiIsInRhZ3MiOiJ3aWRnZXQsYmF0dGVyeSIsImZpbGVzIjoid2lkYmF0LmluZm8sd2lkYmF0LndpZC5qcyJ9///AAQAAd2lkYnQud2lkLmpz");
  base64DecodeToExistingUint8Array(bufferView, 27384, "V0lER0VUU1vRCWJsdWV0b290aF09e2FyZWE60QJ0cix3aWR0aDoxNSxkcmF3OqooKXtnLnJlc2V0KCk7oyhOUkYuZ2V0U2VjdXJpdHlTdGF0dXMoKS5jb25uZWN0ZWQpe6MoZy5nZXRCZ0NvbG9yKCmLMzEpe2cuc2V0Q29sb3Io0QQjMGZmKTt9pHtnLnNldENvbG9yKChnLmdldEJQUCgpPjgpP9EEIzA3ZjooZy50aGVtZS5kYXJrP9EEIzBmZjrRBCMwMGYpKTt9faR7Zy5zZXRDb2xvcihnLnRoZW1lLmRhcms/0QQjNjY2OtEEIzk5OSk7fWcuZHJhd0ltYWdlKNEfCxQBBgDgFgJgR4jZMawfAcA4D4NYybEYIwTAsBwDACwyK68ueCwyK68ueSk7fSxjaGFuZ2VkOqooKXtXSURHRVRTW9EJYmx1ZXRvb3RoXS5kcmF3KCk7fX07TlJGLm9uKNEHY29ubmVjdCxXSURHRVRTW9EJYmx1ZXRvb3RoXS5jaGFuZ2VkKTtOUkYub24o0QpkaXNjb25uZWN0LFdJREdFVFNb0QlibHVldG9vdGhdLmNoYW5nZWQpO4UAAAB3aWRidC5pbmZv");
  base64DecodeToExistingUint8Array(bufferView, 27864, "eyJpZCI6IndpZGJ0IiwibmFtZSI6IkJsdWV0b290aCBXaWRnZXQiLCJ0eXBlIjoid2lkZ2V0IiwidmVyc2lvbiI6IjAuMDkiLCJ0YWdzIjoid2lkZ2V0LGJsdWV0b290aCIsImZpbGVzIjoid2lkYnQuaW5mbyx3aWRidC53aWQuanMiff///6kAAAB3ZWxjb21lLmJvb3QuanM=");
  base64DecodeToExistingUint8Array(bufferView, 28032, "KKooKXutcz1yZXF1aXJlKNEHU3RvcmFnZSkucmVhZEpTT04o0Qx3ZWxjb21lLmpzb24sMSmge307oyghcy53ZWxjb21lZCl7c2V0VGltZW91dCgoKaJ7cmVxdWlyZSjRB1N0b3JhZ2UpLndyaXRlKNEMd2VsY29tZS5qc29uLHt3ZWxjb21lZDq0fSlsb2FkKNEOd2VsY29tZS5hcHAuanMpfSl9fSkoKf///yMaAAB3ZWxjb21lLmFwcC5qcw==");
  base64DecodeToExistingUint8Array(bufferView, 28236, "CqphbmltYXRlKHNlcSxwZXJpb2Qpe6xpPXNldEludGVydmFsKKooKXujKHNlcS5sZW5ndGgpe6xmPXNlcS5zaGlmdCgpO6MoZilmKCk7faRjbGVhckludGVydmFsKGkpO30scGVyaW9kKTt9CqpmYWRlKGNvbCxjYWxsYmFjayl7rG49MDuqZigpe9EDcmFtZy5zZXRDb2xvcihjb2wpO6corGk9bjtpPDI0MDtpljEwKWcuZHJhd0xpbmUoaSwwLDAsaSkuZHJhd0xpbmUoaSwyNDAsMjQwLGkpO2cuZmxpcCgpO26YO6MobjwxMClzZXRUaW1lb3V0KGYsMCk7pGNhbGxiYWNrKCk7fWYoKTt9CqxTQ0VORV9DT1VOVD0xMTsKqmdldFNjZW5lKG4pe6MoboowKauqKCl7Zy5jbGVhcigxKTtnLnNldEZvbnQo0QM0eDYsMik7rG49MDusbD1CYW5nbGUuZ2V0TG9nbygpO6xpPXNldEludGVydmFsKKooKXtuljAuMDQ7Zy5zZXRDb2xvcihuLG4sbik7Zy5kcmF3SW1hZ2UobCwoMjQwLTIyMikvMiwoMjQwLTEwMCkvMik7oyhukTEpe2NsZWFySW50ZXJ2YWwoaSk7c2V0VGltZW91dCgoKaJnLmRyYXdTdHJpbmco0QRPcGVuLDM0LDE0NCksNTAwKTtzZXRUaW1lb3V0KCgpomcuZHJhd1N0cmluZyjRCEhhY2thYmxlLDM0LDE1NiksMTAwMCk7c2V0VGltZW91dCgoKaJnLmRyYXdTdHJpbmco0QtTbWFydCBXYXRjaCwzNCwxNjgpLDE1MDApO319LDUwKTt9O6MobooxKauqKCl7rGltZz1yZXF1aXJlKNEKaGVhdHNocmluaykuZGVjb21wcmVzcyjSCQSm1HEf6pgB++XvSaPmAALR6S93wWQAB3PcckBgAfj54ldaQklgAXSEra980logAHm3tLd83n9XrAAPq85OD1K6ZfLZbdAAHd5e6XYl2c7rdcACk8RVi8AlAgAImhFAPMEuglDdbn80jCvgYmiEwUABE6Ali9UlCI8YAFk03dux29jIRLCdYlIgALdE0zdXUmNkARLidUlJgAHjEw0mtuQTnpYPnEtV0Hk1sWh80luAAEmHbqpEQ+sVeuVsABaMWB9YmBEtpNCEwvLko0kg2GwksOtisPnEsLqktrmcZNHugur1slAkwpMBdYltudHdEslKhEwe/ikLmuR5zpJoisEsbDavZdbV6lyiph4mI5cljOISw4fZEEHDuUXnpiDmcZzoVJxk4YlA9fZOYMUh9VMQExJziEsTDkoHr6uwkwfrdfqkx/mExDMEsKrksPVksQmFOV8mJZdMDYYlikwhzA81zY7pMC4ZEg9fWKAMmD88mbJgNyBdbDEwfUCkLnddywcAmJVhyDYclhkwTRikLm9YmSEs0mAuUNMB4UmEX8VB9UmQbomIZdyibImA6sliEwStioPnc0mPuVHMEwNyh4YmHOgElvcYmI3WpkEImBbIlik0XUuKAABcAmI1ImDOUYmC38mRktHL1MmB4cmHOcVy5JkbDkwcmiaNy6EsGp1wmJJqJMKExXUJjHLksKp1cgBbLr6smEJqVMI3YmB1gfhYcmIalMXuQNzjdbZEwlNRktDMEsVziavr4YmHaNMWZcljJoTC7JzlJqDjEtlNCYbZYUmHE1olhkwsllJoQmg4dNH38lr7olt1OpE0RNFE0XUktXgEtwAA1gjlOgrUEtgmFZglnAAGrk2gln3UloAAF0Bk1LRkt7L1IlpE1i/kozjbolmZe7EpQmspwvSVPMEsrMEpgmtVe98ZKiXsRhZckjbvMXUktAAOrk1SuBgHjAAQQhXRyiZcjvAAWsJw8mBhYFMggARMg3YliZa6EyR1J1gKA54mC56pEsXLOF9OL1urhMLjkwXj1O65cmWk41yiAALSEoHSAcO9kwSpEykAA1Kr1yuVskBgAOrBEPEaTSYgDh4JNA5695cl1gAerE0V0B4gABAYKs4jSgcQAZVdNEkwa+AYLBEztMBkwfBAYK+EzWsEwREiEwYDB1kma1KpVPA1zAkQMmDX1y8gANrh30mEA0MmdIscmCuXoACEUUDClkN6COfu+EwZy/AAGskAUmCOX9NCkEEjiOX8AA3xNCEcNy/gANwkEwO+kz4hhp4MACEv6p31KDJwQmfuIQADXwl/ucRy/gAiskshy/poxy/gAO+Eweskn8ABuX9zpkz8AC31y/udIi/ucty/gAesuX9NGkkG+CeMKTtnLnJlc2V0KCk7Zy5zZXRCZ0NvbG9yKNEHIzY2MzNmZik7rHk9MjQwLHNwZWVkPTU7qmJhbGxvb24oY2FsbGJhY2spe3mXc3BlZWQ7rHg9KDI0MC03NykvMjtnLmRyYXdJbWFnZShpbWcseCx5KTtnLmNsZWFyUmVjdCh4LHkrODEseCs3Nyx5KzgxK3NwZWVkKTujKHk+NjApc2V0VGltZW91dChiYWxsb29uLDAsY2FsbGJhY2spO6RjYWxsYmFjaygpO31mYWRlKNEHIzY2MzNmZiyqKCl7YmFsbG9vbiiqKCl7Zy5zZXRDb2xvcigtMSk7Zy5zZXRGb250KNEDNng4LDMpO2cuc2V0Rm9udEFsaWduKDAsMCk7Zy5kcmF3U3RyaW5nKNEIV2VsY29tZS4sMTIwLDE2MCk7fSk7fSk7c2V0VGltZW91dCiqKCl7rG49MDusaT1zZXRJbnRlcnZhbCiqKCl7bpY1O2cuc2Nyb2xsKDAsLTUpO6Mobj4xNzApY2xlYXJJbnRlcnZhbChpKTt9LDIwKTt9LDM1MDApO307oyhuijIpq6ooKXtnLnJlc2V0KCk7Zy5zZXRCZ0NvbG9yKNEHI2ZmYTgwMCk7Zy5jbGVhcigpO2cuc2V0Rm9udCjRAzZ4OCwyKTtnLnNldEZvbnRBbGlnbigwLDApO6x4PTgwLHk9MzUsaD0zNTthbmltYXRlKFsoKaJnLmRyYXdTdHJpbmco0QRZb3VyLHgseZZoKSwoKaJnLmRyYXdTdHJpbmco0QlCYW5nbGUuanMseCx5lmgpLCgpomcuZHJhd1N0cmluZyjRA2hhcyx4LHmWaCksKCmiZy5kcmF3U3RyaW5nKNEJMyBidXR0b25zLHgseZZoKSwoKaJ7Zy5zZXRGb250KNEGVmVjdG9yLDM2KTtnLmRyYXdTdHJpbmco0QExLDIwMCw0MCk7fSwoKaJnLmRyYXdTdHJpbmco0QEyLDIwMCwxMjApLCgpomcuZHJhd1N0cmluZyjRATMsMjAwLDIwMCldLDIwMCk7fTujKG6KMymrqigpe2cucmVzZXQoKTtnLnNldEJnQ29sb3Io0QcjMDBhOGZmKTtnLmNsZWFyKCk7Zy5zZXRGb250QWxpZ24oMCwwKTtnLnNldEZvbnQo0QZWZWN0b3IsNDgpO2cuZHJhd1N0cmluZyjRATEsMjAwLDQwKTtnLnNldEZvbnRBbGlnbigtMSwtMSk7Zy5zZXRGb250KNEDNng4LDIpO2cuZHJhd1N0cmluZyjRMU1vdmUgdXAKaW4gbWVudXMKClR1cm4gQmFuZ2xlLmpzIG9uCmlmIGl0IHdhcyBvZmYsMjAsNDApO307oyhuijQpq6ooKXtnLnJlc2V0KCk7Zy5zZXRCZ0NvbG9yKNEHIzAwYThmZik7Zy5jbGVhcigpO2cuc2V0Rm9udEFsaWduKDAsMCk7Zy5zZXRGb250KNEGVmVjdG9yLDQ4KTtnLmRyYXdTdHJpbmco0QEyLDIwMCwxMjApO2cuc2V0Rm9udEFsaWduKC0xLC0xKTtnLnNldEZvbnQo0QM2eDgsMik7Zy5kcmF3U3RyaW5nKNEyU2VsZWN0IG1lbnUKaXRlbQoKTGF1bmNoIGFwcAp3aGVuIHdhdGNoCmlzIHNob3dpbmcsMjAsNzApO307oyhuijUpq6ooKXtnLnJlc2V0KCk7Zy5zZXRCZ0NvbG9yKNEHIzAwYThmZik7Zy5jbGVhcigpO2cuc2V0Rm9udEFsaWduKDAsMCk7Zy5zZXRGb250KNEGVmVjdG9yLDQ4KTtnLmRyYXdTdHJpbmco0QEzLDIwMCwyMDApO2cuc2V0Rm9udEFsaWduKC0xLC0xKTtnLnNldEZvbnQo0QM2eDgsMik7Zy5kcmF3U3RyaW5nKNE/TW92ZSBkb3duCmluIG1lbnVzCgpMb25nIHByZXNzCnRvIGV4aXQgYXBwCmFuZCBnbyBiYWNrCnRvIGNsb2NrLDIwLDEwMCk7fTujKG6KNimrqigpe2cucmVzZXQoKTtnLnNldEJnQ29sb3Io0QcjZmYzMzAwKTtnLmNsZWFyKCk7Zy5zZXRGb250QWxpZ24oMCwwKTtnLnNldEZvbnQo0QZWZWN0b3IsNDgpO2cuZHJhd1N0cmluZyjRATEsMjAwLDQwKTtnLmRyYXdTdHJpbmco0QEyLDIwMCwxMjApO2cuc2V0Rm9udEFsaWduKC0xLC0xKTtnLnNldEZvbnQo0QM2eDgsMik7Zy5kcmF3U3RyaW5nKNFkSWYgQmFuZ2xlLmpzCmV2ZXIgc3RvcHMsCmhvbGQgYnV0dG9ucwoxIGFuZCAyIGZvcgphcm91bmQgc2l4CnNlY29uZHMuCgoKCkJhbmdsZS5qcyB3aWxsCnRoZW4gcmVib290LiwyMCwyMCk7fTujKG6KNymrqigpe2cucmVzZXQoKTtnLnNldEJnQ29sb3Io0QcjMDBhOGZmKTtnLmNsZWFyKCk7Zy5zZXRGb250KNEDNng4LDIpO2cuc2V0Rm9udEFsaWduKDAsMCk7rHg9MTIwLHk9MTAsaD0yMTthbmltYXRlKFsoKaJ7Zy5kcmF3U3RyaW5nKNEPQmFuZ2xlLmpzIGhhcyBhLHgseZZoKTtnLmRyYXdTdHJpbmco0RJzaW1wbGUgdG91Y2hzY3JlZW4seCx5lmgpO30sMCwwLCgpontnLmRyYXdTdHJpbmco0RJJdCdsbCBkZXRlY3QgdG91Y2gseCx5lmgqMik7Zy5kcmF3U3RyaW5nKNERb24gbGVmdCBhbmQgcmlnaHQseCx5lmgpO30sMCwwLCgpontnLmRyYXdTdHJpbmco0RFIb3Jpem9udGFsIHN3aXBlcyx4LHmWaCoyKTtnLmRyYXdTdHJpbmco0RF3b3JrIHRvby4gVHJ5IG5vdyx4LHmWaCk7Zy5kcmF3U3RyaW5nKNEPdG8gY2hhbmdlIHBhZ2UuLHgseZZoKTt9XSwzMDApO307oyhuijgpq6ooKXtnLnJlc2V0KCk7Zy5zZXRCZ0NvbG9yKNEHIzMzOTkwMCk7Zy5jbGVhcigpO2cuc2V0Rm9udCjRAzZ4OCwyKTtnLnNldEZvbnRBbGlnbigwLDApO6x4PTEyMCx5PTEwLGg9MjE7YW5pbWF0ZShbKCmie2cuZHJhd1N0cmluZyjRCUJhbmdsZS5qcyx4LHmWaCk7Zy5kcmF3U3RyaW5nKNEKY29tZXMgd2l0aCx4LHmWaCk7Zy5kcmF3U3RyaW5nKNEMYSBmZXcgc2ltcGxlLHgseZZoKTtnLmRyYXdTdHJpbmco0Q5hcHBzIGluc3RhbGxlZCx4LHmWaCk7fSwwLDAsKCmie2cuZHJhd1N0cmluZyjRElRvIGFkZCBtb3JlLCB2aXNpdCx4LHmWaCoyKTtnLmRyYXdTdHJpbmco0RFiYW5nbGVqcy5jb20vYXBwcyx4LHmWaCk7Zy5kcmF3U3RyaW5nKNEQd2l0aCBhIEJsdWV0b290aCx4LHmWaCk7Zy5kcmF3U3RyaW5nKNEOY2FwYWJsZSBkZXZpY2UseCx5lmgpO30sXSw0MDApO307oyhuijkpq6ooKXtnLnJlc2V0KCk7Zy5zZXRCZ0NvbG9yKNEHIzk5MDA2Nik7Zy5jbGVhcigpO2cuc2V0Rm9udCjRAzZ4OCwyKTtnLnNldEZvbnRBbGlnbigwLDApO6x4PTEyMCx5PTEwLGg9MjE7Zy5kcmF3U3RyaW5nKNERWW91IGNhbiBhbHNvIG1ha2UseCx5lmgpO2cuZHJhd1N0cmluZyjRDnlvdXIgb3duIGFwcHMhLHgseZZoKTt5PTE2MDtnLmRyYXdTdHJpbmco0QlDaGVjayBvdXQseCx5lmgpO2cuZHJhd1N0cmluZyjRDGJhbmdsZWpzLmNvbSx4LHmWaCk7rHJ4PTAscnk9MDtFLmRlZnJhZygpO6xoPUdyYXBoaWNzLmNyZWF0ZUFycmF5QnVmZmVyKDk2LDk2LDEse21zYjq0fSk7qmRyYXcoKXtyeJYwLjE7cnmWMC4xMTuscmN4PU1hdGguY29zKHJ4KSxyc3g9TWF0aC5zaW4ocngpLHJjeT1NYXRoLmNvcyhyeSkscnN5PU1hdGguc2luKHJ5KTuqcCh4LHkseil7rHQ7dD14KnJjeSt6KnJzeTt6PXoqcmN5LXgqcnN5O3g9dDt0PXkqcmN4K3oqcnN4O3o9eipyY3gteSpyc3g7eT10O3qWNDurWzk2KigwLjUreC96KSw5NiooMC41K3kveildO32sYTtoLmNsZWFyKCk7YT1wKC0xLC0xLC0xKTtoLm1vdmVUbyhhWzBdLGFbMV0pO2E9cCgxLC0xLC0xKTtoLmxpbmVUbyhhWzBdLGFbMV0pO2E9cCgxLDEsLTEpO2gubGluZVRvKGFbMF0sYVsxXSk7YT1wKC0xLDEsLTEpO2gubGluZVRvKGFbMF0sYVsxXSk7YT1wKC0xLC0xLC0xKTtoLmxpbmVUbyhhWzBdLGFbMV0pO2E9cCgtMSwtMSwxKTtoLm1vdmVUbyhhWzBdLGFbMV0pO2E9cCgxLC0xLDEpO2gubGluZVRvKGFbMF0sYVsxXSk7YT1wKDEsMSwxKTtoLmxpbmVUbyhhWzBdLGFbMV0pO2E9cCgtMSwxLDEpO2gubGluZVRvKGFbMF0sYVsxXSk7YT1wKC0xLC0xLDEpO2gubGluZVRvKGFbMF0sYVsxXSk7YT1wKC0xLC0xLC0xKTtoLm1vdmVUbyhhWzBdLGFbMV0pO2E9cCgtMSwtMSwxKTtoLmxpbmVUbyhhWzBdLGFbMV0pO2E9cCgxLC0xLC0xKTtoLm1vdmVUbyhhWzBdLGFbMV0pO2E9cCgxLC0xLDEpO2gubGluZVRvKGFbMF0sYVsxXSk7YT1wKDEsMSwtMSk7aC5tb3ZlVG8oYVswXSxhWzFdKTthPXAoMSwxLDEpO2gubGluZVRvKGFbMF0sYVsxXSk7YT1wKC0xLDEsLTEpO2gubW92ZVRvKGFbMF0sYVsxXSk7YT1wKC0xLDEsMSk7aC5saW5lVG8oYVswXSxhWzFdKTtnLmRyYXdJbWFnZSh7d2lkdGg6OTYsaGVpZ2h0Ojk2LGJ1ZmZlcjpoLmJ1ZmZlcn0sKDI0MC05NikvMiw2OCk7fXNldEludGVydmFsKGRyYXcsNTApO307oyhuijEwKauqKCl7Zy5yZXNldCgpO2cuc2V0QmdDb2xvcijRByM2NjAwOTkpO2cuY2xlYXIoKTtnLnNldEZvbnRBbGlnbigwLDApO2cuc2V0Rm9udCjRBlZlY3RvciwzNik7Zy5kcmF3U3RyaW5nKNEBMiwyMDAsMTIwKTtnLnNldEZvbnQo0QM2eDgsMik7rHg9OTAseT0zMCxoPTIxO2FuaW1hdGUoWygpomcuZHJhd1N0cmluZyjRClRoYXQncyBpdCEseCx5lmgpLCgpontnLmRyYXdTdHJpbmco0QVQcmVzcyx4LHmWaCozKTtnLmRyYXdTdHJpbmco0QhCdXR0b24gMix4LHmWaCk7Zy5kcmF3U3RyaW5nKNEIdG8gc3RhcnQseCx5lmgpO2cuZHJhd1N0cmluZyjRCUJhbmdsZS5qcyx4LHmWaCk7fV0sNDAwKTt9faxzY2VuZU51bWJlcj0wO6ptb3ZlKGRpcil7oyhkaXI+MJ5zY2VuZU51bWJlcisxilNDRU5FX0NPVU5UKas7c2NlbmVOdW1iZXI9KHNjZW5lTnVtYmVyK2RpciklU0NFTkVfQ09VTlQ7oyhzY2VuZU51bWJlcjwwKXNjZW5lTnVtYmVyPTA7Y2xlYXJJbnRlcnZhbCgpO2dldFNjZW5lKHNjZW5lTnVtYmVyKSgpO6Moc2NlbmVOdW1iZXI+MSl7rGw9U0NFTkVfQ09VTlQ7pyisaT0wO2k8bC0yO2mYKXuseD0xMjArKGktKGwtMikvMikqMTI7oyhpPHNjZW5lTnVtYmVyLTEpe2cuc2V0Q29sb3IoLTEpO2cuZmlsbENpcmNsZSh4LDIzMCw0KTt9pHtnLnNldENvbG9yKDApO2cuZmlsbENpcmNsZSh4LDIzMCw0KTtnLnNldENvbG9yKC0xKTtnLmRyYXdDaXJjbGUoeCwyMzAsNCk7fX19oyhzY2VuZU51bWJlcjxTQ0VORV9DT1VOVC0xKXNldFRpbWVvdXQoqigpe21vdmUoMSk7fSw1MDAwKTt9QmFuZ2xlLm9uKNEFc3dpcGUsZGlyom1vdmUoLWRpcikpO3NldFdhdGNoKCgpom1vdmUoMSksQlROMyx7cmVwZWF0OrR9KTtzZXRXYXRjaCgoKaJ7oyhzY2VuZU51bWJlcopTQ0VORV9DT1VOVC0xKXtsb2FkKCk7fX0sQlROMix7cmVwZWF0OrQsZWRnZTrRB2ZhbGxpbmd9KTtzZXRXYXRjaCgoKaJtb3ZlKC0xKSxCVE4xLHtyZXBlYXQ6tH0pO0JhbmdsZS5zZXRMQ0RUaW1lb3V0KDApO0JhbmdsZS5zZXRMQ0RQb3dlcigxKTttb3ZlKDApO//UAQAAd2VsY29tZS5zZXR0aW5ncy5qcw==");
  base64DecodeToExistingUint8Array(bufferView, 34960, "KKooYmFjayl7rXNldHRpbmdzPXJlcXVpcmUo0QdTdG9yYWdlKS5yZWFkSlNPTijRDHdlbGNvbWUuanNvbiwxKaByZXF1aXJlKNEHU3RvcmFnZSkucmVhZEpTT04o0QxzZXR0aW5nLmpzb24sMSmge31FLnNob3dNZW51KHsnJzp70QV0aXRsZTrRC1dlbGNvbWUgQXBwfSzRDVJ1biBuZXh0IGJvb3Q6e3ZhbHVlOiFzZXR0aW5ncy53ZWxjb21lZCxvbmNoYW5nZTp2onJlcXVpcmUo0QdTdG9yYWdlKS53cml0ZSjRDHdlbGNvbWUuanNvbix7d2VsY29tZWQ6IXZ9KSx9LNEHUnVuIE5vdzooKaJsb2FkKNEOd2VsY29tZS5hcHAuanMpLNETVHVybiBvZmYgJiBydW4gbmV4dDooKaJ7cmVxdWlyZSjRB1N0b3JhZ2UpLndyaXRlKNEMd2VsY29tZS5qc29uLHt3ZWxjb21lZDq1fSk7QmFuZ2xlLnNldExvY2tlZCi0KTujKEJhbmdsZS5zb2Z0T2ZmKCkpQmFuZ2xlLnNvZnRPZmYoKTukQmFuZ2xlLm9mZigpO30s0QY8IEJhY2s6YmFjayx9KX0pBAkAAHdlbGNvbWUuaW1n");
  base64DecodeToExistingUint8Array(bufferView, 35460, "MDCI/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/szMzMzMzP7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7MzMzMzMzMzMzM/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+zMzMzc7W1tbWzs3MzMaWlrq6uv7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7MzMzO1tfWzs3MzMzMzMzAlpa6urq6uv7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7MzNXX1s3MzMzMzMzMzMzMupa6urq6urr+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/szMztfWzczMzMzMzMzMzMzMxpaWurq6urq6/v7+/v7+/v7+/v7+/v7+/v7+YVtbf8zN1tbNzMzMzMzMzMzMzMzMzLqWurq6urq6uv7+/v7+/v7+/v7+/v7+/mFhYVtbqczO187MzMzMzMzMzMzMzMzMzMCWurq6urq6uv7+/v7+/v7+/v7+/v7+YWGGq6yHzMzV1szMzMzMzMzMzMzMzMzMzMaWlrq6urq6uv7+/v7+/v7+/v7+/v5hYYfWq1tbzMzWzszMzMzMzMzMzMzMzMzMzMyWlrq6urq6urr+/v7+/v7+/v7+/mFhh9erYVtbzMzWzczMzMzMzMzMzMzMzMzMzMyWlrq6urq6urr+/v7+/v7+/v7+/mGG16xhYVtbzMzVzMzMzMzMzMzMzMzMzMzMzMaWlrq6urq6urr+/v7+/v7+/v7+YWGs14ZhYVtbqMzOzMzMzMzMzMzMzMzMzMzMzMCWurq6urq6urr+/v7+/v7+/v7+YYXWrGFhYVtbf8zMzczMzMzMzMzMzMzMzMzMzMCWurq6urq6urr+/v7+/v7+/v7+YYbXh2FhYVtbW8zMzMzMzMzMzMzMzMzMzMzMzJaWurq6urq6uv7+/v7+/v7+/v7+YYbXhmFhYVtbW6jMzMzMzMzMzMzMzMzMzMzMxpaWurq6urq6uv7+/v7+/v7+/v7+YYbXhmFhYWFbW3/MzMzMzMzMzMzMzMzMzMzMupa6urq6urq6uv7+/v7+/v7+/v7+YWGyhmFhYWFbW1vMzMzMzMzMzMzMzMzMzMzGlpa6urq6urq6/v7+/v7+/v7+/v7+/mGGq2FhYWFhW1t/zMzMzMzMzMzMzMzMzMy6lrq6urq6urr+/v7+/v7+/v7+/v7+/mFhq2FhYWFhW1tbqMzMzMzMzMzMzMzMzMCWlrq6urq6uv7+/v7+/v7+/v7+/v7+/v5hhoZhYWFhYVtbW8zMzMzMzMzMzMzMxpaWurq6urq6/v7+/v7+/v7+/v7+/v7+/v7+YWFhYWFhYWFbW1vMzMzMzMzMzMzGlpa6urq6urr+/v7+/v7+/v7+/v7+/v7+/v7+YWFhYWFhYWFbW1tbqMzMzMzMzMaWlpa6urq6/v7+/v7+/v7+/v7+/v7+/v7+/v7+/mFhYWFhYWFhW1tbW3/MzMzM/v66urq6uv7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+YWFhYWFhYVtbW/7GxsbG/paWlv7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/lthYWFhYWFb/v7GxsbG/paWlv7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+YWFhW1tbW/7+pKT+/p6Xlv7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/ltbW/7+iIj+/oiI/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/ltbXP7+iIj+/oiI/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v6BiP7+iIj+iIj+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v6IiP7+iIj+iIj+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+iIj+iIj+iIj+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+iIj+iIiIiP7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/oiIiIiIiP7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/oiIiIiIiP7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/oiIiIiI/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v6IiIiI/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v6IiIiI/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v6IiIiI/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+iIj+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/uEAAAB3ZWxjb21lLmluZm8=");
  base64DecodeToExistingUint8Array(bufferView, 37800, "eyJpZCI6IndlbGNvbWUiLCJuYW1lIjoiV2VsY29tZSIsInNyYyI6IndlbGNvbWUuYXBwLmpzIiwiaWNvbiI6IndlbGNvbWUuaW1nIiwidmVyc2lvbiI6IjAuMTQiLCJ0YWdzIjoic3RhcnQsd2VsY29tZSIsImZpbGVzIjoid2VsY29tZS5pbmZvLHdlbGNvbWUuYm9vdC5qcyx3ZWxjb21lLmFwcC5qcyx3ZWxjb21lLnNldHRpbmdzLmpzLHdlbGNvbWUuaW1nIiwiZGF0YSI6IndlbGNvbWUuanNvbiJ9////dlIAAHNldHRpbmcuYXBwLmpz");
  base64DecodeToExistingUint8Array(bufferView, 38060, "");
  base64DecodeToExistingUint8Array(bufferView, 59204, "MDDCAP//8WPMQm9T");
  base64DecodeToExistingUint8Array(bufferView, 59268, "AVVVQAAAAAAAAAAAAVVVQAAAAAAAAAAAAVVVUAAAAAAAAAAAAVVVUAAAAAAAAAAABVVVUAAAAAAAAAAABVVVUAAAAAAAABAABVVVUAAFAAAAAFUAVVVVVQBVAAAAAVVRVVVVVUVVQAAAAVVVVfqvVVVVUAAABVVVXqqqtVVVUAAAFVVV6qqqq1VVVAAAFVVXqqqqqtVVVAAAVVVeqqqqqrVVVQAAVVVaqqqqqqVVVQAAVVV6qqqqqq1VVQAAFVVqqqAKqqlVVAAAAVXqqgAAqqtVQAAAAFXqqgAAqqtVAAAAABWqqAAAKqpVAAAAABWqqAAAKqpVAAAAABWqqAAAKqpVAAAAABWqqAAAKqpVAAAAAFXqqgAAqqtVAAAAAVXqqgAAqqtVQAAAFVVqqqAKqqlVVAAAVVV6qqqqqq1VVQAAVVVaqqqqqqVVVQAAVVVeqqqqqrVVVQAAFVVXqqqqqtVVVAAAFVVV6qqqq1VVVAAABVVVXqqqtVVVUAAABVVVVfqvVVVVQAAAAVVRVVVVVUVVQAAAAFUAVVVVVQBVAAAAAFAABVVVUAAEAAAAAAAABVVVUAAAAAAAAAAABVVVUAAAAAAAAAAABVVVQAAAAAAAAAAABVVVQAAAAAAAAAAAAVVVQAAAAAAAAAAAAVVVQA==");
  base64DecodeToExistingUint8Array(bufferView, 59792, "TwEAAHNldHRpbmcuanNvbg==");
  base64DecodeToExistingUint8Array(bufferView, 59824, "eyJibGUiOnRydWUsImJsZXJlcGwiOnRydWUsImxvZyI6ZmFsc2UsInRpbWVvdXQiOjEwLCJ2aWJyYXRlIjp0cnVlLCJiZWVwIjoidmliIiwidGltZXpvbmUiOjAsIkhJRCI6ZmFsc2UsImNsb2NrIjpudWxsLCIxMmhvdXIiOmZhbHNlLCJicmlnaHRuZXNzIjoxLCJvcHRpb25zIjp7Indha2VPbkJUTjEiOnRydWUsIndha2VPbkJUTjIiOnRydWUsIndha2VPbkJUTjMiOnRydWUsIndha2VPbkZhY2VVcCI6ZmFsc2UsIndha2VPblRvdWNoIjpmYWxzZSwid2FrZU9uVHdpc3QiOmZhbHNlLCJ0d2lzdFRocmVzaG9sZCI6ODE5LjIsInR3aXN0TWF4WSI6LTgwMCwidHdpc3RUaW1lb3V0IjoxMDAwfX3/ywAAAHNldHRpbmcuaW5mbw==");
  base64DecodeToExistingUint8Array(bufferView, 60192, "eyJpZCI6InNldHRpbmciLCJuYW1lIjoiU2V0dGluZ3MiLCJzcmMiOiJzZXR0aW5nLmFwcC5qcyIsImljb24iOiJzZXR0aW5nLmltZyIsInNvcnRvcmRlciI6LTUsInZlcnNpb24iOiIwLjcyIiwidGFncyI6InRvb2wsc3lzdGVtIiwiZmlsZXMiOiJzZXR0aW5nLmluZm8sc2V0dGluZy5hcHAuanMsc2V0dGluZy5pbWciLCJkYXRhIjoic2V0dGluZy5qc29uIn3/gAIAAHNjaGVkLmJvb3QuanM=");
  base64DecodeToExistingUint8Array(bufferView, 60428, "KKooKXujKEJhbmdsZS5TQ0hFRCl7Y2xlYXJUaW1lb3V0KEJhbmdsZS5TQ0hFRCk7vkJhbmdsZS5TQ0hFRDt9rGFsYXJtcz1yZXF1aXJlKNEHU3RvcmFnZSkucmVhZEpTT04o0QpzY2hlZC5qc29uLDEpoFtdO6x0aW1lPbhEYXRlKCk7rGN1cnJlbnRUaW1lPSh0aW1lLmdldEhvdXJzKCkqMzYwMDAwMCkrKHRpbWUuZ2V0TWludXRlcygpKjYwMDAwKSsodGltZS5nZXRTZWNvbmRzKCkqMTAwMCk7rGQ9dGltZS5nZXREYXRlKCk7rGFjdGl2ZT1hbGFybXMuZmlsdGVyKGGiYS5vbp4oYS5sYXN0jGQpnihhLnQrNjAwMDA+Y3VycmVudFRpbWUpnihhLmRvd5J0aW1lLmdldERheSgpJjEpnighYS5kYXRloGEuZGF0ZYp0aW1lLnRvTG9jYWxJU09TdHJpbmcoKS5zdWJzdHIoMCwxMCkpKTujKGFjdGl2ZS5sZW5ndGgpe2FjdGl2ZT1hY3RpdmUuc29ydCgoYSxiKaJhLnQtYi50KTusdD1hY3RpdmVbMF0udC1jdXJyZW50VGltZTujKHQ8MTAwMCl0PTEwMDA7QmFuZ2xlLlNDSEVEPXNldFRpbWVvdXQoYWN0aXZlWzBdLmpzoNEQbG9hZCgic2NoZWQuanMiKSx0KTt9pHtCYW5nbGUuU0NIRUQ9c2V0VGltZW91dCjRLmV2YWwocmVxdWlyZSgiU3RvcmFnZSIpLnJlYWQoInNjaGVkLmJvb3QuanMiKSksODY0MDAwMDAtY3VycmVudFRpbWUpO319KSgpO6EUAABzY2hlZC5qcw==");
  base64DecodeToExistingUint8Array(bufferView, 61100, "TW9kdWxlcy5hZGRDYWNoZWQo0Qp0aW1lX3V0aWxzLKooKXuuT05FX1NFQ09ORD0xMDAwO65PTkVfTUlOVVRFPTYwKk9ORV9TRUNPTkQ7rk9ORV9IT1VSPTYwKk9ORV9NSU5VVEU7rk9ORV9EQVk9MjQqT05FX0hPVVI7ZXhwb3J0cy5lbmNvZGVUaW1lPSh0aW1lKaJ7dGltZT1zYWZlVGltZSh0aW1lKTurdGltZS5kKk9ORV9EQVkrdGltZS5oKk9ORV9IT1VSK3RpbWUubSpPTkVfTUlOVVRFK3RpbWUucypPTkVfU0VDT05EO32qc2FmZVRpbWUodGltZSl7q3tkOnRpbWUuZKAwLGg6dGltZS5ooDAsbTp0aW1lLm2gMCxzOnRpbWUuc6AwfTt9ZXhwb3J0cy5kZWNvZGVUaW1lPShtaWxsaXMponujKL9taWxsaXON0QZudW1iZXIpsNEcT25seSBhIG51bWJlciBjYW4gYmUgZGVjb2RlZDusZD1NYXRoLmZsb29yKG1pbGxpcy9PTkVfREFZKTttaWxsaXOXZCpPTkVfREFZO6xoPU1hdGguZmxvb3IobWlsbGlzL09ORV9IT1VSKTttaWxsaXOXaCpPTkVfSE9VUjusbT1NYXRoLmZsb29yKG1pbGxpcy9PTkVfTUlOVVRFKTttaWxsaXOXbSpPTkVfTUlOVVRFO6xzPU1hdGguZmxvb3IobWlsbGlzL09ORV9TRUNPTkQpO6t7ZDpkLGg6aCxtOm0sczpzfTt9ZXhwb3J0cy5mb3JtYXRUaW1lPSh2YWx1ZSmie6x0aW1lPXNhZmVUaW1lKL92YWx1ZYvRBm9iamVjdD92YWx1ZTpleHBvcnRzLmRlY29kZVRpbWUodmFsdWUpKTujKHRpbWUuZIwwKbDRF2RheXMgbm90IHN1cHBvcnRlZCBoZXJlO6ModGltZS5oPDCgdGltZS5oPjIzKbDRI0ludmFsaWQgdmFsdWU6IG11c3QgYmUgMCA8PSBoIDw9IDIzO6ModGltZS5tPDCgdGltZS5tPjU5KbDRI0ludmFsaWQgdmFsdWU6IG11c3QgYmUgMCA8PSBtIDw9IDU5O6t0aW1lLmgr0QE6KyjRATArdGltZS5tKS5zdWJzdHIoLTIpO31leHBvcnRzLmZvcm1hdER1cmF0aW9uPSh2YWx1ZSxjb21wYWN0KaJ7Y29tcGFjdD1jb21wYWN0oLU7rGR1cmF0aW9uPSIiO6x0aW1lPXNhZmVUaW1lKL92YWx1ZYvRBm9iamVjdD92YWx1ZTpleHBvcnRzLmRlY29kZVRpbWUodmFsdWUpKTujKHRpbWUuZD4wKWR1cmF0aW9ulnRpbWUuZCvRAmQgO6ModGltZS5oPjApZHVyYXRpb26WdGltZS5oK9ECaCA7oyh0aW1lLm0+MClkdXJhdGlvbpZ0aW1lLm0r0QJtIDujKHRpbWUucz4wKWR1cmF0aW9ulnRpbWUucyvRAXNkdXJhdGlvbj1kdXJhdGlvbi50cmltKCmrY29tcGFjdD9kdXJhdGlvbi5yZXBsYWNlKNEBICwiIik6ZHVyYXRpb247fWV4cG9ydHMuZ2V0Q3VycmVudFRpbWVNaWxsaXM9KCmie6x0aW1lPbhEYXRlKCk7qyh0aW1lLmdldEhvdXJzKCkqMzYwMCt0aW1lLmdldE1pbnV0ZXMoKSo2MCt0aW1lLmdldFNlY29uZHMoKSkqMTAwMDt9fSk7Ck1vZHVsZXMuYWRkQ2FjaGVkKNEEYnV6eiyqKCl7ZXhwb3J0cy5wYXR0ZXJuPXBhdHRlcm6iuFByb21pc2UocmVzb2x2ZaJ7qmRvQnV6eigpe6MocGF0dGVybooiIimrcmVzb2x2ZSgpO6xjPXBhdHRlcm5bMF07cGF0dGVybj1wYXR0ZXJuLnN1YnN0cigxKTuuQlVaWl9XRUFLPTAuMjUsQlVaWl9TVFJPTkc9MTuuU0hPUlRfTVM9MTAwLE1FRElVTV9NUz0yMDAsTE9OR19NUz01MDA7oyhjitEBLilCYW5nbGUuYnV6eihTSE9SVF9NUyxCVVpaX1dFQUspLnRoZW4oKCmic2V0VGltZW91dChkb0J1enosMTAwKSk7pKMoY4rRASwpQmFuZ2xlLmJ1enooTUVESVVNX01TLEJVWlpfV0VBSykudGhlbigoKaJzZXRUaW1lb3V0KGRvQnV6eiwxMDApKTukoyhjitEBLSlCYW5nbGUuYnV6eihMT05HX01TLEJVWlpfV0VBSykudGhlbigoKaJzZXRUaW1lb3V0KGRvQnV6eiwxMDApKTukoyhjitEBOilCYW5nbGUuYnV6eihTSE9SVF9NUyxCVVpaX1NUUk9ORykudGhlbigoKaJzZXRUaW1lb3V0KGRvQnV6eiwxMDApKTukoyhjitEBOylCYW5nbGUuYnV6eihNRURJVU1fTVMsQlVaWl9TVFJPTkcpLnRoZW4oKCmic2V0VGltZW91dChkb0J1enosMTAwKSk7pKMoY4rRAT0pQmFuZ2xlLmJ1enooTE9OR19NUyxCVVpaX1NUUk9ORykudGhlbigoKaJzZXRUaW1lb3V0KGRvQnV6eiwxMDApKTukc2V0VGltZW91dChkb0J1enosMTAwKTt9ZG9CdXp6KCk7fSk7fSk7CqMoQmFuZ2xlLlNDSEVEKXtjbGVhckludGVydmFsKEJhbmdsZS5TQ0hFRCk7vkJhbmdsZS5TQ0hFRDt9CqpzaG93QWxhcm0oYWxhcm0pe65hbGFybUluZGV4PWFsYXJtcy5pbmRleE9mKGFsYXJtKTuuc2V0dGluZ3M9cmVxdWlyZSjRBXNjaGVkKS5nZXRTZXR0aW5ncygpO61tZXNzYWdlPSIiO21lc3NhZ2WWYWxhcm0udGltZXI/cmVxdWlyZSjRCnRpbWVfdXRpbHMpLmZvcm1hdER1cmF0aW9uKGFsYXJtLnRpbWVyKTpyZXF1aXJlKNEKdGltZV91dGlscykuZm9ybWF0VGltZShhbGFybS50KTujKGFsYXJtLm1zZyl7bWVzc2FnZZbRAQorYWxhcm0ubXNnO32ke21lc3NhZ2U9KGFsYXJtLnRpbWVyP9KZAQAkLMIA//9970XBhyEAAAAVVVQAAAAAAAAVVVQAAAAAAAAVVVQAAAAAAAAVVVQAAAAAAAAVVVQAAAAAAAAVVVQAAAAAAAAD/8AAAAAAAAAD/8AAAAAAAAAKqqADwAAAAAKqqqqD/AAAACqqqqqr/wAAAqqqqqqqv8AACqqqpVqqr8AAKqqqpVWqqwAAqqqqpVVaqgACqqqqpVVWqoACqmqqpVVVqoAKqVqqpVVVaqAKpVqqpVVVWqAqpVeqpVVVWqgqlVX6pVVVVqgqlVX+pVVVVqiqVVV/5VVVVaqqVVVf/lVVVaqqVVVf/5VVVaqqVVVX69VVVaqqVVVX69VVVaqqVVVW/5VVVaqqVVVVvlVVVaqqVVVVVVVVVaoqlVVVVVVVVqgqlVVVVVVVVqgqpVVVVVVVWqgKpVVVVVVVWqAKqVVVVVVVaqACqlVVVVVVqoACqpVVVVVWqoAAqqVVVVVaqgAAKqpVVVWqqAAACqqlVVqqoAAAAqqqqqqqgAAAACqqqqqoAAAAAAKqqqqAAAAAAAAKqqAAAAA60vwBAC0swgF97///RcEpMlVVVVVVf9VVVVVVVVX/9VVf9VVf/1VVV///1Vf9VX///VVX///VWqqlV///1Vf//9aqqqqpf//9V///2qqqqqqn///V///6qqqqqqr///X//+qqoAAKqqv//3//6qoAAAAKqr//3//qqAAAAAAqq//3/+qoAADwAAKqv/3/+qgAADwAACqv/3/aqAAADwAAAqp/19qoAAADwAAAKqfV1qgAAADwAAACqXVWqgAAADwAAACqlVWqAAAADwAAAAqlVWqAAAADwAAAAqlVWqAAAADwAAAAqlVaoAAAADwAAAAKpVaoAAAADwAAAAKpVaoAAAADwAAAAKpVaoAAAAOsAAAAKpVaoAAAAOsAAAAKpVaoAAAAL/AAAAKpVaoAAAAgPwAAAKpVaoAAACAD8AAAKpVWqAAAIAA/AAAqlVWqAAAgAAPwAAqlVWqAACAAADwAAqlVWqgAIAAAAAACqlVVqgAgAAAAAACqVVVqoAAAAAAAAKqVVVaqAAAAAAAAqpVVVWqgAAAAAACqlVVVWqoAAAAAAKqlVVVVqqAAAAAAqqVVVVVaqoAAAAKqpVVVVVeqqoAAKqqtVVVVV/6qqqqqqr/VVVVX/2qqqqqqn/1VVVf/VaqqqqpV/9VVVf9VVWqqlVVf9VVVf1VVVVVVVVX9VSkr0QEgK21lc3NhZ2V9QmFuZ2xlLmxvYWRXaWRnZXRzKCk7QmFuZ2xlLmRyYXdXaWRnZXRzKCk7rWJ1enpDb3VudD1zZXR0aW5ncy5idXp6Q291bnQ7RS5zaG93UHJvbXB0KG1lc3NhZ2Use3RpdGxlOmFsYXJtLnRpbWVyP9EGVElNRVIhOtEGQUxBUk0hLGJ1dHRvbnM6e9EGU25vb3plOrQs0QRTdG9wOrV9fSkudGhlbiiqKHNsZWVwKXtidXp6Q291bnQ9MDujKHNsZWVwKXujKGFsYXJtLm90i7cpe2FsYXJtLm90PWFsYXJtLnQ7fa10aW1lPbhEYXRlKCk7rWN1cnJlbnRUaW1lPSh0aW1lLmdldEhvdXJzKCkqMzYwMDAwMCkrKHRpbWUuZ2V0TWludXRlcygpKjYwMDAwKSsodGltZS5nZXRTZWNvbmRzKCkqMTAwMCk7YWxhcm0udD1jdXJyZW50VGltZStzZXR0aW5ncy5kZWZhdWx0U25vb3plTWlsbGlzO2FsYXJtLnScODY0MDAwMDA7QmFuZ2xlLmVtaXQo0QthbGFybVNub296ZSxhbGFybSk7faR7rWRlbD1hbGFybS5kZWyLtz9zZXR0aW5ncy5kZWZhdWx0RGVsZXRlRXhwaXJlZFRpbWVyczphbGFybS5kZWw7oyhkZWwpe2FsYXJtcy5zcGxpY2UoYWxhcm1JbmRleCwxKTt9pHujKGFsYXJtLmRhdGWeYWxhcm0ucnApe3NldE5leHRSZXBlYXREYXRlKGFsYXJtKTt9pKMoIWFsYXJtLnRpbWVyKXthbGFybS5sYXN0PbhEYXRlKCkuZ2V0RGF0ZSgpO32jKGFsYXJtLm90jbcpe2FsYXJtLnQ9YWxhcm0ub3Q7vmFsYXJtLm90O32jKCFhbGFybS5ycCl7YWxhcm0ub249tTt9fUJhbmdsZS5lbWl0KNEMYWxhcm1EaXNtaXNzLGFsYXJtKTt9cmVxdWlyZSjRBXNjaGVkKS5zZXRBbGFybXMoYWxhcm1zKTtsb2FkKCk7fSk7qmJ1enooKXujKHNldHRpbmdzLnVubG9ja0F0QnV6eil7QmFuZ2xlLnNldExvY2tlZCi1KTt9rnBhdHRlcm49YWxhcm0udmlicmF0ZaAoYWxhcm0udGltZXI/c2V0dGluZ3MuZGVmYXVsdFRpbWVyUGF0dGVybjpzZXR0aW5ncy5kZWZhdWx0QWxhcm1QYXR0ZXJuKTtyZXF1aXJlKNEEYnV6eikucGF0dGVybihwYXR0ZXJuKS50aGVuKCgponujKGJ1enpDb3VudIq2oGJ1enpDb3VudJkpe3NldFRpbWVvdXQoYnV6eixzZXR0aW5ncy5idXp6SW50ZXJ2YWxNaWxsaXMpO32koyhhbGFybS5hcyl7YnV6ekNvdW50PXNldHRpbmdzLmJ1enpDb3VudDtzZXRUaW1lb3V0KGJ1enosc2V0dGluZ3MuZGVmYXVsdFNub296ZU1pbGxpcyk7fX0pO32qc2V0TmV4dFJlcGVhdERhdGUoYWxhcm0pe61kYXRlPbhEYXRlKGFsYXJtLmRhdGUpO61ycD1hbGFybS5ycDujKHJwi7Qpe2RhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSsxKTt9pLsocnAuaW50ZXJ2YWwpe7zRA2RheTpkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkrcnAubnVtKTuoO7zRBHdlZWs6ZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpKyhycC5udW0qNykpO6g7vNEFbW9udGg6oyghYWxhcm0ub2QpYWxhcm0ub2Q9ZGF0ZS5nZXREYXRlKCk7ZGF0ZT24RGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksZGF0ZS5nZXRNb250aCgpK3JwLm51bSxhbGFybS5vZCk7oyhkYXRlLmdldERhdGUoKYxhbGFybS5vZClkYXRlLnNldERhdGUoMCk7qDu80QR5ZWFyOqMoIWFsYXJtLm9kKWFsYXJtLm9kPWRhdGUuZ2V0RGF0ZSgpO2RhdGU9uERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpK3JwLm51bSxkYXRlLmdldE1vbnRoKCksYWxhcm0ub2QpO6MoZGF0ZS5nZXREYXRlKCmMYWxhcm0ub2QpZGF0ZS5zZXREYXRlKDApO6g7vTpjb25zb2xlLmxvZyhgc2NoZWQ6IHVua25vd24gcmVwZWF0ICcke0pTT04uc3RyaW5naWZ5KHJwKX0nYCk7qDt9YWxhcm0uZGF0ZT1kYXRlLnRvTG9jYWxJU09TdHJpbmcoKS5zbGljZSgwLDEwKTt9oygocmVxdWlyZSjRB1N0b3JhZ2UpLnJlYWRKU09OKNEMc2V0dGluZy5qc29uLDEpoHt9KS5xdWlldD4xKas7YnV6eigpO32tYWxhcm1zPXJlcXVpcmUo0QVzY2hlZCkuZ2V0QWxhcm1zKCk7rWFjdGl2ZT1yZXF1aXJlKNEFc2NoZWQpLmdldEFjdGl2ZUFsYXJtcyhhbGFybXMpO6MoYWN0aXZlLmxlbmd0aCl7c2hvd0FsYXJtKGFjdGl2ZVswXSk7faR7c2V0VGltZW91dChsb2FkLDEwMCk7ff///4QEAABzY2hlZC5pbWc=");
  base64DecodeToExistingUint8Array(bufferView, 66416, "MDCEBmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmERFmZmZmZmZmZmZmZmZmZmYRERFmZmZmERFmZmZmERERZmZmZmZmZhERERERZmZmERFmZmYREREREWZmZmZmYREREREWZmbMzMzMZmZhERERERZmZmZmERERERFmzMzMzMzMzMxmERERERFmZmZhERERERbMzMzMzMzMzMzMYREREREWZmZhERERERzMzMzMzMzMzMzMwREREREWZmYRERERFMzMzEQz//8zRMzMzEERERERZmYRERERTMzMQ////////zTMzMQRERERZmYREREUzMzD//////////88zMxBERERZmYRERFMzMQ/////8A/////zTMzEERERZmYRERHMzE//////8A//////9MzMERERZmYREWzMxP//////8A///////0zMxhERZmZhFszMw///////8A///////zzMzGEWZmZhZszMP///////8A////////PMzGYWZmZmbMzE////////8A////////9MzMZmZmZmbMzD////////8A////////88zMZmZmZmbMxP////////8A/////////0zMZmZmZmbMxP////////8A/////////0zMZmZmZmzMw/////////8A/////////zzMxmZmZmzMw/////////8A/////////zzMxmZmZmzMz/////////MAP/////////zMxmZmZmzMz/////////BVD/////////zMxmZmZmzMz/////////BVA/////////zMxmZmZmzMz////////zQAAD////////zMxmZmZmzMw///////80PzAAP//////zzMxmZmZmzMw///////ND//MAA//////zzMxmZmZmbMxP/////zQ///8wAD/////0zMZmZmZmbMxP////80P////zAAP////0zMZmZmZmbMzD////ND//////MC////88zMZmZmZmbMzE///zQ///////8/////9MzMZmZmZmZszMP/80P/////////////PMzGZmZmZmZszMw//z/////////////zzMzGZmZmZmZmzMxP///////////////0zMxmZmZmZmZmbMzE//////////////9MzMZmZmZmZmZmbMzMQ////////////zTMzMZmZmZmZmZmZszMzD//////////88zMzGZmZmZmZmZmZmzMzMQ////////zTMzMxmZmZmZmZmZmZmFMzMzEQz//8zRMzMzEFmZmZmZmZmZmZhERzMzMzMzMzMzMzMwREWZmZmZmZmZmYRERbMzMzMzMzMzMzMYRERZmZmZmZmZmEREWZmzMzMzMzMzMxmZhERFmZmZmZmZmERFmZmZmbMzMzMZmZmZmERFmZmZmZmZmERZmZmZmZmZmZmZmZmZmYRFmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZqgIAABzY2hlZA==");
  base64DecodeToExistingUint8Array(bufferView, 67604, "CmV4cG9ydHMuZ2V0QWxhcm1zPaooKXurcmVxdWlyZSjRB1N0b3JhZ2UpLnJlYWRKU09OKNEKc2NoZWQuanNvbiwxKaBbXTt9OwpleHBvcnRzLnNldEFsYXJtcz2qKGFsYXJtcyl7YWxhcm1zLmZvckVhY2goZaJlLnScODY0MDAwMDApO6tyZXF1aXJlKNEHU3RvcmFnZSkud3JpdGVKU09OKNEKc2NoZWQuanNvbixhbGFybXMpO307CmV4cG9ydHMuZ2V0QWxhcm09qihpZCl7q2V4cG9ydHMuZ2V0QWxhcm1zKCkuZmluZChhomEuaWSKaWQpO307CmV4cG9ydHMuZ2V0QWN0aXZlQWxhcm1zPaooYWxhcm1zLHRpbWUpe6MoIXRpbWUpdGltZT24RGF0ZSgpO6xjdXJyZW50VGltZT0odGltZS5nZXRIb3VycygpKjM2MDAwMDApKyh0aW1lLmdldE1pbnV0ZXMoKSo2MDAwMCkrKHRpbWUuZ2V0U2Vjb25kcygpKjEwMDApKzEwMDAwO6thbGFybXMuZmlsdGVyKGGiYS5vbp4oYS5sYXN0jHRpbWUuZ2V0RGF0ZSgpKZ4oYS50PGN1cnJlbnRUaW1lKZ4oYS5kb3eSdGltZS5nZXREYXkoKSYxKZ4oIWEuZGF0ZaBhLmRhdGWKdGltZS50b0xvY2FsSVNPU3RyaW5nKCkuc3Vic3RyKDAsMTApKSkuc29ydCgoYSxiKaJhLnQtYi50KTt9CmV4cG9ydHMuc2V0QWxhcm09qihpZCxhbGFybSl7rGFsYXJtcz1leHBvcnRzLmdldEFsYXJtcygpLmZpbHRlcihhomEuaWSMaWQpO6MoYWxhcm2Ntyl7YWxhcm0uaWQ9aWQ7oyhhbGFybS5kb3eLtylhbGFybS5kb3c9MGIxMTExMTExO6MoYWxhcm0ub26NtSlhbGFybS5vbj20O6MoYWxhcm0udGltZXIpe6x0aW1lPbhEYXRlKCk7rGN1cnJlbnRUaW1lPSh0aW1lLmdldEhvdXJzKCkqMzYwMDAwMCkrKHRpbWUuZ2V0TWludXRlcygpKjYwMDAwKSsodGltZS5nZXRTZWNvbmRzKCkqMTAwMCk7YWxhcm0udD0oY3VycmVudFRpbWUrYWxhcm0udGltZXIpJTg2NDAwMDAwO31hbGFybXMucHVzaChhbGFybSk7fWV4cG9ydHMuc2V0QWxhcm1zKGFsYXJtcyk7fTsKZXhwb3J0cy5nZXRUaW1lVG9BbGFybT2qKGFsYXJtLHRpbWUpe6MoIWFsYXJtKau3O6MoIXRpbWUpdGltZT24RGF0ZSgpO6xjdXJyZW50VGltZT0odGltZS5nZXRIb3VycygpKjM2MDAwMDApKyh0aW1lLmdldE1pbnV0ZXMoKSo2MDAwMCkrKHRpbWUuZ2V0U2Vjb25kcygpKjEwMDApO6xhY3RpdmU9YWxhcm0ub26eKGFsYXJtLmRvd5IoKHRpbWUuZ2V0RGF5KCkrKGFsYXJtLnQ8Y3VycmVudFRpbWUpKSU3KSkmMZ4oIWFsYXJtLmRhdGWgYWxhcm0uZGF0ZYp0aW1lLnRvTG9jYWxJU09TdHJpbmcoKS5zdWJzdHIoMCwxMCkpO6MoIWFjdGl2ZSmrtzusdD1hbGFybS50LWN1cnJlbnRUaW1lO6MoYWxhcm0ubGFzdIp0aW1lLmdldERhdGUoKaB0PC02MDAwMCl0ljg2NDAwMDAwO6t0O307CmV4cG9ydHMucmVsb2FkPaooKXtldmFsKHJlcXVpcmUo0QdTdG9yYWdlKS5yZWFkKNENc2NoZWQuYm9vdC5qcykpO0JhbmdsZS5lbWl0KNELYWxhcm1SZWxvYWQpO307CmV4cG9ydHMubmV3RGVmYXVsdEFsYXJtPaooKXuuc2V0dGluZ3M9ZXhwb3J0cy5nZXRTZXR0aW5ncygpO6xhbGFybT17dDoxMiozNjAwMDAwLGRlbDq1LG9uOrQscnA6tSxhczpzZXR0aW5ncy5kZWZhdWx0QXV0b1Nub296ZSxkb3c6MGIxMTExMTExLGxhc3Q6MCx2aWJyYXRlOnNldHRpbmdzLmRlZmF1bHRBbGFybVBhdHRlcm4sfTu+c2V0dGluZ3M7q2FsYXJtO30KZXhwb3J0cy5uZXdEZWZhdWx0VGltZXI9qigpe65zZXR0aW5ncz1leHBvcnRzLmdldFNldHRpbmdzKCk7rHRpbWVyPXt0aW1lcjo1KjYwKjEwMDAsZGVsOnNldHRpbmdzLmRlZmF1bHREZWxldGVFeHBpcmVkVGltZXJzLG9uOrQscnA6tSxhczq1LGRvdzowYjExMTExMTEsbGFzdDowLHZpYnJhdGU6c2V0dGluZ3MuZGVmYXVsdFRpbWVyUGF0dGVybn2+c2V0dGluZ3M7q3RpbWVyO307CmV4cG9ydHMuZ2V0U2V0dGluZ3M9qigpe6tPYmplY3QuYXNzaWduKHt1bmxvY2tBdEJ1eno6tSxkZWZhdWx0U25vb3plTWlsbGlzOjYwMDAwMCxkZWZhdWx0QXV0b1Nub296ZTq1LGRlZmF1bHREZWxldGVFeHBpcmVkVGltZXJzOrQsYnV6ekNvdW50OjEwLGJ1enpJbnRlcnZhbE1pbGxpczozMDAwLGRlZmF1bHRBbGFybVBhdHRlcm460QI6OixkZWZhdWx0VGltZXJQYXR0ZXJuOtECOjp9LHJlcXVpcmUo0QdTdG9yYWdlKS5yZWFkSlNPTijRE3NjaGVkLnNldHRpbmdzLmpzb24stCmge30pO30KZXhwb3J0cy5zZXRTZXR0aW5ncz2qKHNldHRpbmdzKXtyZXF1aXJlKNEHU3RvcmFnZSkud3JpdGVKU09OKNETc2NoZWQuc2V0dGluZ3MuanNvbixzZXR0aW5ncyk7fTuMCQAAc2NoZWQuc2V0dGluZ3MuanM=");
  base64DecodeToExistingUint8Array(bufferView, 69852, "TW9kdWxlcy5hZGRDYWNoZWQo0QRidXp6LKooKXtleHBvcnRzLnBhdHRlcm49cGF0dGVybqK4UHJvbWlzZShyZXNvbHZlonuqZG9CdXp6KCl7oyhwYXR0ZXJuiiIiKatyZXNvbHZlKCk7rGM9cGF0dGVyblswXTtwYXR0ZXJuPXBhdHRlcm4uc3Vic3RyKDEpO65CVVpaX1dFQUs9MC4yNSxCVVpaX1NUUk9ORz0xO65TSE9SVF9NUz0xMDAsTUVESVVNX01TPTIwMCxMT05HX01TPTUwMDujKGOK0QEuKUJhbmdsZS5idXp6KFNIT1JUX01TLEJVWlpfV0VBSykudGhlbigoKaJzZXRUaW1lb3V0KGRvQnV6eiwxMDApKTukoyhjitEBLClCYW5nbGUuYnV6eihNRURJVU1fTVMsQlVaWl9XRUFLKS50aGVuKCgponNldFRpbWVvdXQoZG9CdXp6LDEwMCkpO6SjKGOK0QEtKUJhbmdsZS5idXp6KExPTkdfTVMsQlVaWl9XRUFLKS50aGVuKCgponNldFRpbWVvdXQoZG9CdXp6LDEwMCkpO6SjKGOK0QE6KUJhbmdsZS5idXp6KFNIT1JUX01TLEJVWlpfU1RST05HKS50aGVuKCgponNldFRpbWVvdXQoZG9CdXp6LDEwMCkpO6SjKGOK0QE7KUJhbmdsZS5idXp6KE1FRElVTV9NUyxCVVpaX1NUUk9ORykudGhlbigoKaJzZXRUaW1lb3V0KGRvQnV6eiwxMDApKTukoyhjitEBPSlCYW5nbGUuYnV6eihMT05HX01TLEJVWlpfU1RST05HKS50aGVuKCgponNldFRpbWVvdXQoZG9CdXp6LDEwMCkpO6RzZXRUaW1lb3V0KGRvQnV6eiwxMDApO31kb0J1enooKTt9KTt9KTsKTW9kdWxlcy5hZGRDYWNoZWQo0QlidXp6X21lbnUsqigpe2V4cG9ydHMucGF0dGVybj2qKHZhbHVlLGNhbGxiYWNrKXuscGF0dGVybnM9WyIiLNEBLizRATos0QIuLizRAjo6LNEBLCzRATss0QIsLCzRAjs7LNEBLSzRAT0s0QItLSzRAj09LNEDLi4uLNEDOjo6LNEDLS0tLNEDOzs7LNEDPT09XTure3ZhbHVlOk1hdGgubWF4KDAscGF0dGVybnMuaW5kZXhPZih2YWx1ZSkpLG1pbjowLG1heDpwYXR0ZXJucy5sZW5ndGgtMSxmb3JtYXQ6dqJwYXR0ZXJuc1t2XaDRA09mZixvbmNoYW5nZTp2ontyZXF1aXJlKNEEYnV6eikucGF0dGVybihwYXR0ZXJuc1t2XSk7Y2FsbGJhY2socGF0dGVybnNbdl0pO319O319KTsoqihiYWNrKXutc2V0dGluZ3M9cmVxdWlyZSjRBXNjaGVkKS5nZXRTZXR0aW5ncygpO0Uuc2hvd01lbnUoeyIiOnvRBXRpdGxlOtEJU2NoZWR1bGVyfSzRBjwgQmFjazooKaJiYWNrKCks0Q5VbmxvY2sgYXQgQnV6ejp7dmFsdWU6c2V0dGluZ3MudW5sb2NrQXRCdXp6LG9uY2hhbmdlOnaie3NldHRpbmdzLnVubG9ja0F0QnV6ej12O3JlcXVpcmUo0QVzY2hlZCkuc2V0U2V0dGluZ3Moc2V0dGluZ3MpO319LNEVRGVsZXRlIEV4cGlyZWQgVGltZXJzOnt2YWx1ZTpzZXR0aW5ncy5kZWZhdWx0RGVsZXRlRXhwaXJlZFRpbWVycyxvbmNoYW5nZTp2ontzZXR0aW5ncy5kZWZhdWx0RGVsZXRlRXhwaXJlZFRpbWVycz12O3JlcXVpcmUo0QVzY2hlZCkuc2V0U2V0dGluZ3Moc2V0dGluZ3MpO319LNETRGVmYXVsdCBBdXRvIFNub296ZTp7dmFsdWU6c2V0dGluZ3MuZGVmYXVsdEF1dG9Tbm9vemUsb25jaGFuZ2U6dqJ7c2V0dGluZ3MuZGVmYXVsdEF1dG9Tbm9vemU9djtyZXF1aXJlKNEFc2NoZWQpLnNldFNldHRpbmdzKHNldHRpbmdzKTt9fSzRDkRlZmF1bHQgU25vb3plOnt2YWx1ZTpzZXR0aW5ncy5kZWZhdWx0U25vb3plTWlsbGlzLzYwMDAwLG1pbjo1LG1heDozMCxzdGVwOjUsZm9ybWF0OnaidivRAW0sb25jaGFuZ2U6dqJ7c2V0dGluZ3MuZGVmYXVsdFNub296ZU1pbGxpcz12KjYwMDAwO3JlcXVpcmUo0QVzY2hlZCkuc2V0U2V0dGluZ3Moc2V0dGluZ3MpO319LNEKQnV6eiBDb3VudDp7dmFsdWU6c2V0dGluZ3MuYnV6ekNvdW50irY/NDpzZXR0aW5ncy5idXp6Q291bnQsbWluOjQsbWF4OjE1LHN0ZXA6MSxmb3JtYXQ6dqJ2izQ/0QdGb3JldmVyOnYsb25jaGFuZ2U6dqJ7c2V0dGluZ3MuYnV6ekNvdW50PXaLND+2OnY7cmVxdWlyZSjRBXNjaGVkKS5zZXRTZXR0aW5ncyhzZXR0aW5ncyk7fX0s0Q1CdXp6IEludGVydmFsOnt2YWx1ZTpzZXR0aW5ncy5idXp6SW50ZXJ2YWxNaWxsaXMvMTAwMCxtaW46MSxtYXg6NSxzdGVwOjEsZm9ybWF0OnaidivRAXMsb25jaGFuZ2U6dqJ7c2V0dGluZ3MuYnV6ekludGVydmFsTWlsbGlzPXYqMTAwMDtyZXF1aXJlKNEFc2NoZWQpLnNldFNldHRpbmdzKHNldHRpbmdzKTt9fSzRFURlZmF1bHQgQWxhcm0gUGF0dGVybjpyZXF1aXJlKNEJYnV6el9tZW51KS5wYXR0ZXJuKHNldHRpbmdzLmRlZmF1bHRBbGFybVBhdHRlcm4sdqJ7c2V0dGluZ3MuZGVmYXVsdEFsYXJtUGF0dGVybj12O3JlcXVpcmUo0QVzY2hlZCkuc2V0U2V0dGluZ3Moc2V0dGluZ3MpO30pLNEVRGVmYXVsdCBUaW1lciBQYXR0ZXJuOnJlcXVpcmUo0QlidXp6X21lbnUpLnBhdHRlcm4oc2V0dGluZ3MuZGVmYXVsdFRpbWVyUGF0dGVybix2ontzZXR0aW5ncy5kZWZhdWx0VGltZXJQYXR0ZXJuPXY7cmVxdWlyZSjRBXNjaGVkKS5zZXRTZXR0aW5ncyhzZXR0aW5ncyk7fSl9KTt9KTsXDgAAc2NoZWQuY2xraW5mby5qcw==");
  base64DecodeToExistingUint8Array(bufferView, 72328, "TW9kdWxlcy5hZGRDYWNoZWQo0Qp0aW1lX3V0aWxzLKooKXuuT05FX1NFQ09ORD0xMDAwO65PTkVfTUlOVVRFPTYwKk9ORV9TRUNPTkQ7rk9ORV9IT1VSPTYwKk9ORV9NSU5VVEU7rk9ORV9EQVk9MjQqT05FX0hPVVI7ZXhwb3J0cy5lbmNvZGVUaW1lPSh0aW1lKaJ7dGltZT1zYWZlVGltZSh0aW1lKTurdGltZS5kKk9ORV9EQVkrdGltZS5oKk9ORV9IT1VSK3RpbWUubSpPTkVfTUlOVVRFK3RpbWUucypPTkVfU0VDT05EO32qc2FmZVRpbWUodGltZSl7q3tkOnRpbWUuZKAwLGg6dGltZS5ooDAsbTp0aW1lLm2gMCxzOnRpbWUuc6AwfTt9ZXhwb3J0cy5kZWNvZGVUaW1lPShtaWxsaXMponujKL9taWxsaXON0QZudW1iZXIpsNEcT25seSBhIG51bWJlciBjYW4gYmUgZGVjb2RlZDusZD1NYXRoLmZsb29yKG1pbGxpcy9PTkVfREFZKTttaWxsaXOXZCpPTkVfREFZO6xoPU1hdGguZmxvb3IobWlsbGlzL09ORV9IT1VSKTttaWxsaXOXaCpPTkVfSE9VUjusbT1NYXRoLmZsb29yKG1pbGxpcy9PTkVfTUlOVVRFKTttaWxsaXOXbSpPTkVfTUlOVVRFO6xzPU1hdGguZmxvb3IobWlsbGlzL09ORV9TRUNPTkQpO6t7ZDpkLGg6aCxtOm0sczpzfTt9ZXhwb3J0cy5mb3JtYXRUaW1lPSh2YWx1ZSmie6x0aW1lPXNhZmVUaW1lKL92YWx1ZYvRBm9iamVjdD92YWx1ZTpleHBvcnRzLmRlY29kZVRpbWUodmFsdWUpKTujKHRpbWUuZIwwKbDRF2RheXMgbm90IHN1cHBvcnRlZCBoZXJlO6ModGltZS5oPDCgdGltZS5oPjIzKbDRI0ludmFsaWQgdmFsdWU6IG11c3QgYmUgMCA8PSBoIDw9IDIzO6ModGltZS5tPDCgdGltZS5tPjU5KbDRI0ludmFsaWQgdmFsdWU6IG11c3QgYmUgMCA8PSBtIDw9IDU5O6t0aW1lLmgr0QE6KyjRATArdGltZS5tKS5zdWJzdHIoLTIpO31leHBvcnRzLmZvcm1hdER1cmF0aW9uPSh2YWx1ZSxjb21wYWN0KaJ7Y29tcGFjdD1jb21wYWN0oLU7rGR1cmF0aW9uPSIiO6x0aW1lPXNhZmVUaW1lKL92YWx1ZYvRBm9iamVjdD92YWx1ZTpleHBvcnRzLmRlY29kZVRpbWUodmFsdWUpKTujKHRpbWUuZD4wKWR1cmF0aW9ulnRpbWUuZCvRAmQgO6ModGltZS5oPjApZHVyYXRpb26WdGltZS5oK9ECaCA7oyh0aW1lLm0+MClkdXJhdGlvbpZ0aW1lLm0r0QJtIDujKHRpbWUucz4wKWR1cmF0aW9ulnRpbWUucyvRAXNkdXJhdGlvbj1kdXJhdGlvbi50cmltKCmrY29tcGFjdD9kdXJhdGlvbi5yZXBsYWNlKNEBICwiIik6ZHVyYXRpb247fWV4cG9ydHMuZ2V0Q3VycmVudFRpbWVNaWxsaXM9KCmie6x0aW1lPbhEYXRlKCk7qyh0aW1lLmdldEhvdXJzKCkqMzYwMCt0aW1lLmdldE1pbnV0ZXMoKSo2MCt0aW1lLmdldFNlY29uZHMoKSkqMTAwMDt9fSk7KKooKXuuYWxhcm09cmVxdWlyZSjRBXNjaGVkKTuuaWNvbkFsYXJtT2490UwYGIEAAAAAAAAABgBgDgBwHH44Of+cA//AB//gD+fwD+fwH+f4H+f4H+f4H+f4H+H4H/j4D/7wD//wB//gA//AAf+AAH4AAAAAAAAAO65pY29uQWxhcm1PZmY90UwYGIEAAAAAAAAABgBgDgBwHH44Of+cA//AB//gD+fwD+fwH+f4H+f4H+cAH+YAH+B4H/n+D/m2D/MDB/OHA/OHAfMDAHm2AAH+AAB4O65pY29uVGltZXJPbj3RTBgYgQ==");
  base64DecodeToExistingUint8Array(bufferView, 73890, "B//gB//gAYGAAYGAAYGAAP8AAP8AAH4AADwAADwAAH4AAOcAAMMAAYGAAYGAAYGAB//gB//g");
  base64DecodeToExistingUint8Array(bufferView, 73953, "O65pY29uVGltZXJPZmY90UwYGIE=");
  base64DecodeToExistingUint8Array(bufferView, 73983, "B//gB//gAYGAAYGAAYGAAP8AAP8AAH4AADwAADwAAH4AAOR4AMH+AYG2AYMDAYOHB/OHB/MDAAG2AAH+AAB4O6pnZXRBbGFybVZhbHVlKGEpe61taW49TWF0aC5yb3VuZChhbGFybS5nZXRUaW1lVG9BbGFybShhKS8oNjAqMTAwMCkpO6MoIW1pbimrMDurZ2V0QWxhcm1NYXgoYSktbWluO32qZ2V0QWxhcm1NYXgoYSl7oyhhLnRpbWVyKatNYXRoLnJvdW5kKGEudGltZXIvKDYwKjEwMDApKTurMTQ0MDt9qmdldEFsYXJtSWNvbihhKXujKGEub24pe6MoYS50aW1lcimraWNvblRpbWVyT247q2ljb25BbGFybU9uO32ke6MoYS50aW1lcimraWNvblRpbWVyT2ZmO6tpY29uQWxhcm1PZmY7fX2qZ2V0QWxhcm1UZXh0KGEpe6MoYS50aW1lcil7oyghYS5vbimr0QNvZmY7rXRpbWU9TWF0aC5yb3VuZChhbGFybS5nZXRUaW1lVG9BbGFybShhKS8oNjAqMTAwMCkpO6ModGltZT42MCl0aW1lPU1hdGgucm91bmQodGltZS82MCkr0QFoO6R0aW1lltEBbTurdGltZTt9q3JlcXVpcmUo0Qp0aW1lX3V0aWxzKS5mb3JtYXRUaW1lKGEudCk7fapnZXRBbGFybU9yZGVyKGEpe612YWw9YWxhcm0uZ2V0VGltZVRvQWxhcm0oYSk7oyi/dmFsitEJdW5kZWZpbmVkKas4NjQwMCoxMDAwO6t2YWw7fapnZXRSZWZyZXNoSW50ZXJ2YWxzKGEpe65taW51dGU9NjAqMTAwMDuuaGFsZmhvdXI9MzAqbWludXRlO65ob3VyPTIqaGFsZmhvdXI7rW1zZWNzPWFsYXJtLmdldFRpbWVUb0FsYXJtKGEpO6Mov21zZWNzitEJdW5kZWZpbmVkoG1zZWNzijApq1tdO6MobXNlY3M+aG91cil7rXJlbWFpbj0obXNlY3MrbWludXRlKSVoYWxmaG91cjujKHJlbWFpbjwyNyptaW51dGWecmVtYWlujDApq1toYWxmaG91cixyZW1haW5dO6tbaGFsZmhvdXIsbXNlY3MtaG91cl07faR7oyghYS50aW1lcimrW107q1ttaW51dGUsbXNlY3NdO319ql9kb0ludGVydmFsKGludGVydmFsKXurc2V0VGltZW91dCgoKaJ7ry5lbWl0KNEGcmVkcmF3KTuvLmludGVydmFsPXNldEludGVydmFsKCgponuvLmVtaXQo0QZyZWRyYXcpO30saW50ZXJ2YWwpO30saW50ZXJ2YWwpO32qX2RvU3dpdGNoVGltZW91dChhLHN3aXRjaFRpbWVvdXQpe6tzZXRUaW1lb3V0KCgponuvLmVtaXQo0QZyZWRyYXcpO2NsZWFySW50ZXJ2YWwory5pbnRlcnZhbCk7ry5pbnRlcnZhbD23O6x0bXA9Z2V0UmVmcmVzaEludGVydmFscyhhKTusaW50ZXJ2YWw9dG1wWzBdO6xzd2l0Y2hUaW1lb3V0PXRtcFsxXTujKCFpbnRlcnZhbCmrO68uaW50ZXJ2YWw9X2RvSW50ZXJ2YWwuY2FsbCivLGludGVydmFsKTuvLnN3aXRjaFRpbWVvdXQ9X2RvU3dpdGNoVGltZW91dC5jYWxsKK8sYSxzd2l0Y2hUaW1lb3V0KTt9LHN3aXRjaFRpbWVvdXQpO32saW1nPWljb25BbGFybU9uO6xhbGFybUl0ZW1zPXtuYW1lOtEGQWxhcm1zLGltZzppbWcsZHluYW1pYzq0LGl0ZW1zOmFsYXJtLmdldEFsYXJtcygpLmZpbHRlcihhoiFhLmFwcGlkKS5zb3J0KChhLGIpomdldEFsYXJtT3JkZXIoYSktZ2V0QWxhcm1PcmRlcihiKSkubWFwKChhLGkpoih7bmFtZTq2LGhhc1JhbmdlOrQsZ2V0Oigpoih7dGV4dDpnZXRBbGFybVRleHQoYSksaW1nOmdldEFsYXJtSWNvbihhKSx2OmdldEFsYXJtVmFsdWUoYSksbWluOjAsbWF4OmdldEFsYXJtTWF4KGEpfSksc2hvdzqqKCl7rHRtcD1nZXRSZWZyZXNoSW50ZXJ2YWxzKGEpO6xpbnRlcnZhbD10bXBbMF07rHN3aXRjaFRpbWVvdXQ9dG1wWzFdO6MoIWludGVydmFsKas7ry5pbnRlcnZhbD1fZG9JbnRlcnZhbC5jYWxsKK8saW50ZXJ2YWwpO68uc3dpdGNoVGltZW91dD1fZG9Td2l0Y2hUaW1lb3V0LmNhbGworyxhLHN3aXRjaFRpbWVvdXQpO30saGlkZTqqKCl7oyivLmludGVydmFsKWNsZWFySW50ZXJ2YWwory5pbnRlcnZhbCk7oyivLnN3aXRjaFRpbWVvdXQpY2xlYXJUaW1lb3V0KK8uc3dpdGNoVGltZW91dCk7ry5pbnRlcnZhbD23O68uc3dpdGNoVGltZW91dD23O30scnVuOqooKXt9fSkpLH07q2FsYXJtSXRlbXM7fSn/AgEAAHNjaGVkLmluZm8=");
  base64DecodeToExistingUint8Array(bufferView, 75968, "eyJpZCI6InNjaGVkIiwibmFtZSI6IlNjaGVkdWxlciIsInR5cGUiOiJzY2hlZHVsZXIiLCJpY29uIjoic2NoZWQuaW1nIiwidmVyc2lvbiI6IjAuMjYiLCJ0YWdzIjoidG9vbCxzeXN0ZW0sYWxhcm0sY2xraW5mbyIsImZpbGVzIjoic2NoZWQuaW5mbyxzY2hlZC5ib290LmpzLHNjaGVkLmpzLHNjaGVkLmltZyxzY2hlZCxzY2hlZC5zZXR0aW5ncy5qcyxzY2hlZC5jbGtpbmZvLmpzIiwiZGF0YSI6InNjaGVkLmpzb24sc2NoZWQuc2V0dGluZ3MuanNvbiJ9//+iAQAAd2lkYWxhcm0ud2lkLmpz");
  base64DecodeToExistingUint8Array(bufferView, 76260, "V0lER0VUU1vRBWFsYXJtXT17YXJlYTrRAnRsLHdpZHRoOjAsZHJhdzqqKCl7oyivLndpZHRoKWcucmVzZXQoKS5kcmF3SW1hZ2Uo0UsYGAEAAAAAAAAAGAAOGHAMPDAY/xgZ/5gx/4wz/8wz/8wD/8AD/8AD/8AD/8AD/8AD/8AH/+AP//AP//AAAAAAPAAAGAAAAAAAAAAsry54LK8ueSk7fSxyZWxvYWQ6qigpe1dJREdFVFNb0QVhbGFybV0ud2lkdGg9KHJlcXVpcmUo0QdTdG9yYWdlKS5yZWFkSlNPTijRCnNjaGVkLmpzb24sMSmgW10pLnNvbWUoYWxhcm2iYWxhcm0ub26eKGFsYXJtLmhpZGRlbo20KSk/MjQ6MDt9fTtXSURHRVRTW9EFYWxhcm1dLnJlbG9hZCgpO0JhbmdsZS5vbijRC2FsYXJtUmVsb2FkLCgponujKFdJREdFVFNb0QVhbGFybV0pe1dJREdFVFNb0QVhbGFybV0ucmVsb2FkKCk7QmFuZ2xlLmRyYXdXaWRnZXRzKCk7fX0pO///jAAAAHdpZGFsYXJtLmluZm8=");
  base64DecodeToExistingUint8Array(bufferView, 76712, "eyJpZCI6IndpZGFsYXJtIiwibmFtZSI6IkFsYXJtcyBXaWRnZXQiLCJ0eXBlIjoid2lkZ2V0IiwidmVyc2lvbiI6IjAuMDIiLCJ0YWdzIjoidG9vbCxhbGFybSx3aWRnZXQiLCJmaWxlcyI6IndpZGFsYXJtLmluZm8sd2lkYWxhcm0ud2lkLmpzIn2GPAAAYWxhcm0uYXBwLmpz");
  base64DecodeToExistingUint8Array(bufferView, 76884, "TW9kdWxlcy5hZGRDYWNoZWQo0Qp0aW1lX3V0aWxzLKooKXuuT05FX1NFQ09ORD0xMDAwO65PTkVfTUlOVVRFPTYwKk9ORV9TRUNPTkQ7rk9ORV9IT1VSPTYwKk9ORV9NSU5VVEU7rk9ORV9EQVk9MjQqT05FX0hPVVI7ZXhwb3J0cy5lbmNvZGVUaW1lPSh0aW1lKaJ7dGltZT1zYWZlVGltZSh0aW1lKTurdGltZS5kKk9ORV9EQVkrdGltZS5oKk9ORV9IT1VSK3RpbWUubSpPTkVfTUlOVVRFK3RpbWUucypPTkVfU0VDT05EO32qc2FmZVRpbWUodGltZSl7q3tkOnRpbWUuZKAwLGg6dGltZS5ooDAsbTp0aW1lLm2gMCxzOnRpbWUuc6AwfTt9ZXhwb3J0cy5kZWNvZGVUaW1lPShtaWxsaXMponujKL9taWxsaXON0QZudW1iZXIpsNEcT25seSBhIG51bWJlciBjYW4gYmUgZGVjb2RlZDusZD1NYXRoLmZsb29yKG1pbGxpcy9PTkVfREFZKTttaWxsaXOXZCpPTkVfREFZO6xoPU1hdGguZmxvb3IobWlsbGlzL09ORV9IT1VSKTttaWxsaXOXaCpPTkVfSE9VUjusbT1NYXRoLmZsb29yKG1pbGxpcy9PTkVfTUlOVVRFKTttaWxsaXOXbSpPTkVfTUlOVVRFO6xzPU1hdGguZmxvb3IobWlsbGlzL09ORV9TRUNPTkQpO6t7ZDpkLGg6aCxtOm0sczpzfTt9ZXhwb3J0cy5mb3JtYXRUaW1lPSh2YWx1ZSmie6x0aW1lPXNhZmVUaW1lKL92YWx1ZYvRBm9iamVjdD92YWx1ZTpleHBvcnRzLmRlY29kZVRpbWUodmFsdWUpKTujKHRpbWUuZIwwKbDRF2RheXMgbm90IHN1cHBvcnRlZCBoZXJlO6ModGltZS5oPDCgdGltZS5oPjIzKbDRI0ludmFsaWQgdmFsdWU6IG11c3QgYmUgMCA8PSBoIDw9IDIzO6ModGltZS5tPDCgdGltZS5tPjU5KbDRI0ludmFsaWQgdmFsdWU6IG11c3QgYmUgMCA8PSBtIDw9IDU5O6t0aW1lLmgr0QE6KyjRATArdGltZS5tKS5zdWJzdHIoLTIpO31leHBvcnRzLmZvcm1hdER1cmF0aW9uPSh2YWx1ZSxjb21wYWN0KaJ7Y29tcGFjdD1jb21wYWN0oLU7rGR1cmF0aW9uPSIiO6x0aW1lPXNhZmVUaW1lKL92YWx1ZYvRBm9iamVjdD92YWx1ZTpleHBvcnRzLmRlY29kZVRpbWUodmFsdWUpKTujKHRpbWUuZD4wKWR1cmF0aW9ulnRpbWUuZCvRAmQgO6ModGltZS5oPjApZHVyYXRpb26WdGltZS5oK9ECaCA7oyh0aW1lLm0+MClkdXJhdGlvbpZ0aW1lLm0r0QJtIDujKHRpbWUucz4wKWR1cmF0aW9ulnRpbWUucyvRAXNkdXJhdGlvbj1kdXJhdGlvbi50cmltKCmrY29tcGFjdD9kdXJhdGlvbi5yZXBsYWNlKNEBICwiIik6ZHVyYXRpb247fWV4cG9ydHMuZ2V0Q3VycmVudFRpbWVNaWxsaXM9KCmie6x0aW1lPbhEYXRlKCk7qyh0aW1lLmdldEhvdXJzKCkqMzYwMCt0aW1lLmdldE1pbnV0ZXMoKSo2MCt0aW1lLmdldFNlY29uZHMoKSkqMTAwMDt9fSk7Ck1vZHVsZXMuYWRkQ2FjaGVkKNEKZGF0ZV91dGlscyyqKCl7ZXhwb3J0cy5kb3c9KGksYWJicmV2aWF0ZWQponusZG93PXJlcXVpcmUo0QZsb2NhbGUpLmRvdyh7Z2V0RGF5OigpoihpfDApJTd9LGFiYnJldmlhdGVkKS5zbGljZSgwLChhYmJyZXZpYXRlZIoyKT8xOjEwMCk7q2FiYnJldmlhdGVkijI/ZG93LnRvVXBwZXJDYXNlKCk6ZG93O31leHBvcnRzLmRvd3M9KGZpcnN0RGF5T2ZXZWVrLGFiYnJldmlhdGVkKaJ7rGRvd3M9W107pyisaT0wO2k8NztpmCl7ZG93cy5wdXNoKGV4cG9ydHMuZG93KGkrKGZpcnN0RGF5T2ZXZWVroDApLGFiYnJldmlhdGVkKSl9q2FiYnJldmlhdGVkijI/ZG93cy5tYXAoZG93omRvdy50b1VwcGVyQ2FzZSgpKTpkb3dzO307ZXhwb3J0cy5tb250aD0oaSxhYmJyZXZpYXRlZCmie6xtb250aD1yZXF1aXJlKNEGbG9jYWxlKS5tb250aCh7Z2V0TW9udGg6KCmiKDExKyhpfDApKSUxMn0sYWJicmV2aWF0ZWQpLnNsaWNlKDAsKGFiYnJldmlhdGVkijIpPzE6MTAwKTurYWJicmV2aWF0ZWSKMj9tb250aC50b1VwcGVyQ2FzZSgpOm1vbnRoO31leHBvcnRzLm1vbnRocz0oYWJicmV2aWF0ZWQponusbW9udGhzPVtdO6xsb2NhbGU9cmVxdWlyZSjRBmxvY2FsZSk7pyisaT0wO2k8MTI7aZgpbW9udGhzLnB1c2gobG9jYWxlLm1vbnRoKHtnZXRNb250aDooKaJpfSxhYmJyZXZpYXRlZCkuc2xpY2UoMCwoYWJicmV2aWF0ZWSKMik/MToxMDApKTurYWJicmV2aWF0ZWSKMj9tb250aHMubWFwKG1vbnRoom1vbnRoLnRvVXBwZXJDYXNlKCkpOm1vbnRoczt9O30pOwpNb2R1bGVzLmFkZENhY2hlZCjRBGJ1enosqigpe2V4cG9ydHMucGF0dGVybj1wYXR0ZXJuorhQcm9taXNlKHJlc29sdmWie6pkb0J1enooKXujKHBhdHRlcm6KIiIpq3Jlc29sdmUoKTusYz1wYXR0ZXJuWzBdO3BhdHRlcm49cGF0dGVybi5zdWJzdHIoMSk7rkJVWlpfV0VBSz0wLjI1LEJVWlpfU1RST05HPTE7rlNIT1JUX01TPTEwMCxNRURJVU1fTVM9MjAwLExPTkdfTVM9NTAwO6MoY4rRAS4pQmFuZ2xlLmJ1enooU0hPUlRfTVMsQlVaWl9XRUFLKS50aGVuKCgponNldFRpbWVvdXQoZG9CdXp6LDEwMCkpO6SjKGOK0QEsKUJhbmdsZS5idXp6KE1FRElVTV9NUyxCVVpaX1dFQUspLnRoZW4oKCmic2V0VGltZW91dChkb0J1enosMTAwKSk7pKMoY4rRAS0pQmFuZ2xlLmJ1enooTE9OR19NUyxCVVpaX1dFQUspLnRoZW4oKCmic2V0VGltZW91dChkb0J1enosMTAwKSk7pKMoY4rRATopQmFuZ2xlLmJ1enooU0hPUlRfTVMsQlVaWl9TVFJPTkcpLnRoZW4oKCmic2V0VGltZW91dChkb0J1enosMTAwKSk7pKMoY4rRATspQmFuZ2xlLmJ1enooTUVESVVNX01TLEJVWlpfU1RST05HKS50aGVuKCgponNldFRpbWVvdXQoZG9CdXp6LDEwMCkpO6SjKGOK0QE9KUJhbmdsZS5idXp6KExPTkdfTVMsQlVaWl9TVFJPTkcpLnRoZW4oKCmic2V0VGltZW91dChkb0J1enosMTAwKSk7pHNldFRpbWVvdXQoZG9CdXp6LDEwMCk7fWRvQnV6eigpO30pO30pOwpNb2R1bGVzLmFkZENhY2hlZCjRCWJ1enpfbWVudSyqKCl7ZXhwb3J0cy5wYXR0ZXJuPaoodmFsdWUsY2FsbGJhY2spe6xwYXR0ZXJucz1bIiIs0QEuLNEBOizRAi4uLNECOjos0QEsLNEBOyzRAiwsLNECOzss0QEtLNEBPSzRAi0tLNECPT0s0QMuLi4s0QM6Ojos0QMtLS0s0QM7Ozss0QM9PT1dO6t7dmFsdWU6TWF0aC5tYXgoMCxwYXR0ZXJucy5pbmRleE9mKHZhbHVlKSksbWluOjAsbWF4OnBhdHRlcm5zLmxlbmd0aC0xLGZvcm1hdDp2onBhdHRlcm5zW3ZdoNEDT2ZmLG9uY2hhbmdlOnaie3JlcXVpcmUo0QRidXp6KS5wYXR0ZXJuKHBhdHRlcm5zW3ZdKTtjYWxsYmFjayhwYXR0ZXJuc1t2XSk7fX07fX0pOwpCYW5nbGUubG9hZFdpZGdldHMoKTsKQmFuZ2xlLmRyYXdXaWRnZXRzKCk7Cq5zZXR0aW5ncz1PYmplY3QuYXNzaWduKHtzaG93Q29uZmlybTq0LHNob3dBdXRvU25vb3plOrQsc2hvd0hpZGRlbjq0fSxyZXF1aXJlKNEHU3RvcmFnZSkucmVhZEpTT04o0QphbGFybS5qc29uLDEpoHt9KTsKrmZpcnN0RGF5T2ZXZWVrPShyZXF1aXJlKNEHU3RvcmFnZSkucmVhZEpTT04o0QxzZXR0aW5nLmpzb24stCmge30pLmZpcnN0RGF5T2ZXZWVroDA7Cq5XT1JLREFZUz02MjsKrldFRUtFTkQ9Zmlyc3REYXlPZldlZWs/MTkyOjY1OwquRVZFUllfREFZPWZpcnN0RGF5T2ZXZWVrPzI1NDoxMjc7Cq5JTlRFUlZBTFM9W9EDZGF5LNEEd2VlayzRBW1vbnRoLNEEeWVhcl07Cq5JTlRFUlZBTF9MQUJFTFM9W9EDRGF5LNEEV2VlayzRBU1vbnRoLNEEWWVhcl07Cq5pY29uQWxhcm1Pbj3RAQAr0UwYGIEAAAAAAAAABgBgDgBwHH44Of+cA//AB//gD+fwD+fwH+f4H+f4H+f4H+f4H+H4H/j4D/7wD//wB//gA//AAf+AAH4AAAAAAAAAO65pY29uQWxhcm1PZmY90QEAKyhnLnRoZW1lLmRhcms/0VAYGMEA/////wAAAAAAAAYAYA4AcBx+ODn/nAP/wAf/4A/n8A/n8B/n+B/n+B/nAB/mAB/geB/5/g/5tg/zAwfzhwPzhwHzAwB5tgAB/gAAeDrRUBgYwQD//wAAAAAAAAAABgBgDgBwHH44Of+cA//AB//gD+fwD+fwH+f4H+f4H+cAH+YAH+B4H/n+D/m2D/MDB/OHA/OHAfMDAHm2AAH+AAB4KTuuaWNvblRpbWVyT2490QEAKyhnLnRoZW1lLmRhcms/0VAYGMEA/////w==");
  base64DecodeToExistingUint8Array(bufferView, 80794, "B//gB//gAYGAAYGAAYGAAP8AAP8AAH4AADwAADwAAH4AAOcAAMMAAYGAAYGAAYGAB//gB//g");
  base64DecodeToExistingUint8Array(bufferView, 80857, "OtFQGBjBAP//");
  base64DecodeToExistingUint8Array(bufferView, 80877, "B//gB//gAYGAAYGAAYGAAP8AAP8AAH4AADwAADwAAH4AAOcAAMMAAYGAAYGAAYGAB//gB//g");
  base64DecodeToExistingUint8Array(bufferView, 80940, "KTuuaWNvblRpbWVyT2ZmPdEBACsoZy50aGVtZS5kYXJrP9FQGBjBAP////8=");
  base64DecodeToExistingUint8Array(bufferView, 80993, "B//gB//gAYGAAYGAAYGAAP8AAP8AAH4AADwAADwAAH4AAOR4AMH+AYG2AYMDAYOHB/OHB/MDAAG2AAH+AAB4OtFQGBjBAP//");
  base64DecodeToExistingUint8Array(bufferView, 81076, "");
  base64DecodeToExistingUint8Array(bufferView, 92412, "MDCEBmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmERFmZmZmZmZmZmZmZmZmZmYRERFmZmZmERFmZmZmERERZmZmZmZmZhERERERZmZmERFmZmYREREREWZmZmZmYREREREWZmbMzMzMZmZhERERERZmZmZmERERERFmzMzMzMzMzMxmERERERFmZmZhERERERbMzMzMzMzMzMzMYREREREWZmZhERERERzMzMzMzMzMzMzMwREREREWZmYRERERFMzMzEQz//8zRMzMzEERERERZmYRERERTMzMQ////////zTMzMQRERERZmYREREUzMzD//////////88zMxBERERZmYRERFMzMQ/////8A/////zTMzEERERZmYRERHMzE//////8A//////9MzMERERZmYREWzMxP//////8A///////0zMxhERZmZhFszMw///////8A///////zzMzGEWZmZhZszMP///////8A////////PMzGYWZmZmbMzE////////8A////////9MzMZmZmZmbMzD////////8A////////88zMZmZmZmbMxP////////8A/////////0zMZmZmZmbMxP////////8A/////////0zMZmZmZmzMw/////////8A/////////zzMxmZmZmzMw/////////8A/////////zzMxmZmZmzMz/////////MAP/////////zMxmZmZmzMz/////////BVD/////////zMxmZmZmzMz/////////BVA/////////zMxmZmZmzMz////////zQAAD////////zMxmZmZmzMw///////80PzAAP//////zzMxmZmZmzMw///////ND//MAA//////zzMxmZmZmbMxP/////zQ///8wAD/////0zMZmZmZmbMxP////80P////zAAP////0zMZmZmZmbMzD////ND//////MC////88zMZmZmZmbMzE///zQ///////8/////9MzMZmZmZmZszMP/80P/////////////PMzGZmZmZmZszMw//z/////////////zzMzGZmZmZmZmzMxP///////////////0zMxmZmZmZmZmbMzE//////////////9MzMZmZmZmZmZmbMzMQ////////////zTMzMZmZmZmZmZmZszMzD//////////88zMzGZmZmZmZmZmZmzMzMQ////////zTMzMxmZmZmZmZmZmZmFMzMzEQz//8zRMzMzEFmZmZmZmZmZmZhERzMzMzMzMzMzMzMwREWZmZmZmZmZmYRERbMzMzMzMzMzMzMYRERZmZmZmZmZmEREWZmzMzMzMzMzMxmZhERFmZmZmZmZmERFmZmZmbMzMzMZmZmZmERFmZmZmZmZmERZmZmZmZmZmZmZmZmZmYRFmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZhgEAABhbGFybS5zZXR0aW5ncy5qcw==");
  base64DecodeToExistingUint8Array(bufferView, 93600, "KKooYmFjayl7rXNldHRpbmdzPU9iamVjdC5hc3NpZ24oe3Nob3dDb25maXJtOrQsc2hvd0F1dG9Tbm9vemU6tCxzaG93SGlkZGVuOrR9LHJlcXVpcmUo0QdTdG9yYWdlKS5yZWFkSlNPTijRCmFsYXJtLmpzb24sMSmge30pO65zYXZlPSgponJlcXVpcmUo0QdTdG9yYWdlKS53cml0ZSjRCmFsYXJtLmpzb24sc2V0dGluZ3MpO65EQVRFX0ZPUk1BVFM9W9EHZGVmYXVsdCzRBG1tZGRdO65EQVRFX0ZPUk1BVFNfTEFCRUxTPVvRB0RlZmF1bHQs0QRNTUREXTuuYXBwTWVudT17Jyc6e3RpdGxlOtEFYWxhcm19LNEGPCBCYWNrOmJhY2ss0RBNZW51IERhdGUgRm9ybWF0Ont2YWx1ZTpEQVRFX0ZPUk1BVFMuaW5kZXhPZihzZXR0aW5ncy5tZW51RGF0ZUZvcm1hdKDRB2RlZmF1bHQpLGZvcm1hdDp2okRBVEVfRk9STUFUU19MQUJFTFNbdl0sbWluOjAsbWF4OkRBVEVfRk9STUFUUy5sZW5ndGgtMSxvbmNoYW5nZTp2onujKHY+MCl7c2V0dGluZ3MubWVudURhdGVGb3JtYXQ9REFURV9GT1JNQVRTW3ZdO32ke75zZXR0aW5ncy5tZW51RGF0ZUZvcm1hdDt9c2F2ZSgpO319LNEVU2hvdyBNZW51IEF1dG8gU25vb3plOnt2YWx1ZTohIXNldHRpbmdzLnNob3dBdXRvU25vb3plLG9uY2hhbmdlOnaie3NldHRpbmdzLnNob3dBdXRvU25vb3plPXY7c2F2ZSgpO319LNERU2hvdyBNZW51IENvbmZpcm06e3ZhbHVlOiEhc2V0dGluZ3Muc2hvd0NvbmZpcm0sb25jaGFuZ2U6dqJ7c2V0dGluZ3Muc2hvd0NvbmZpcm09djtzYXZlKCk7fX0s0RBTaG93IE1lbnUgSGlkZGVuOnt2YWx1ZTohIXNldHRpbmdzLnNob3dIaWRkZW4sb25jaGFuZ2U6dqJ7c2V0dGluZ3Muc2hvd0hpZGRlbj12O3NhdmUoKTt9fSzRD1Nob3cgTWVudSBHcm91cDp7dmFsdWU6ISFzZXR0aW5ncy5zaG93R3JvdXAsb25jaGFuZ2U6dqJ7c2V0dGluZ3Muc2hvd0dyb3VwPXY7c2F2ZSgpO319LNESU2hvdyBUZXh0IE92ZXJmbG93Ont2YWx1ZTohIXNldHRpbmdzLnNob3dPdmVyZmxvdyxvbmNoYW5nZTp2ontzZXR0aW5ncy5zaG93T3ZlcmZsb3c9djtzYXZlKCk7fX0sfTtFLnNob3dNZW51KGFwcE1lbnUpO30pO8YAAABhbGFybS5pbmZv");
  base64DecodeToExistingUint8Array(bufferView, 94680, "eyJpZCI6ImFsYXJtIiwibmFtZSI6IkFsYXJtcyIsInNyYyI6ImFsYXJtLmFwcC5qcyIsImljb24iOiJhbGFybS5pbWciLCJ2ZXJzaW9uIjoiMC40OCIsInRhZ3MiOiJ0b29sLGFsYXJtIiwiZmlsZXMiOiJhbGFybS5pbmZvLGFsYXJtLmFwcC5qcyxhbGFybS5pbWcsYWxhcm0uc2V0dGluZ3MuanMiLCJkYXRhIjoiYWxhcm0uc2V0dGluZ3MuanNvbiJ9//8=");
  base64DecodeToExistingUint8Array(bufferView, 94889, "AQEBAQE=");
  base64DecodeToExistingUint8Array(bufferView, 94912, "");
  base64DecodeToExistingUint8Array(bufferView, 129600, "PT0APT09ACE9ACE9PQA8PQA8PAA8PD0APj0APj4APj4+AD4+PQA+Pj49ACs9AC09ACsrAC0tACo9AC89ACU9ACY9ACYmAHw9AHx8AF49AD0+AGlmAGVsc2UAZG8Ad2hpbGUAZm9yAGJyZWFrAGNvbnRpbnVlAGZ1bmN0aW9uAHJldHVybgB2YXIAbGV0AGNvbnN0AHRoaXMAdGhyb3cAdHJ5AGNhdGNoAGZpbmFsbHkAdHJ1ZQBmYWxzZQBudWxsAHVuZGVmaW5lZABuZXcAaW4AaW5zdGFuY2VvZgBzd2l0Y2gAY2FzZQBkZWZhdWx0AGRlbGV0ZQB0eXBlb2YAdm9pZABkZWJ1Z2dlcgBjbGFzcwBleHRlbmRzAHN1cGVyAHN0YXRpYwBvZg==");
  base64DecodeToExistingUint8Array(bufferView, 129908, "Pz8AADAAAAAAZGVlcFNsZWVwAHVuc2FmZUZsYXNoAHVuc3luY0ZpbGVzAHByZXRva2VuaXNlAGppdERlYnVn");
  base64DecodeToExistingUint8Array(bufferView, 129986, "B4AxAAAABwABgDIAAAAPAAGAMwAAABcACIA0AAAAHABYgDUAAAAiAHiANgAAACYAA4A3AAAAKwAAgDgAAAAxAACAOQAAADUAA4A6AAAAPAAYgDsAAABCANiBPAAAAGFuYWxvZwBnZXRJbmZvAGdldE1vZGUAbW9kZQBwdWxzZQBwd20AcmVhZAByZXNldABzZXQAdG9nZ2xlAHdyaXRlAHdyaXRlQXRUaW1lAAAAAAARACAAAAAGACEALgAAABIAAQAvAAAAIgAFcD0AAAAmAAVwPgAAACsABXA/AAAAMAAFcEAAAAA1AAVwQQAAADoABXBCAAAAPwABABwAAABGAAEAHwAAAFAACwBDAAAAWAAJCQoAAABhABEACwAAAGYAAQAdAAAAaAAJAAwAAABuAAkJRAAAAHsACQlFAAAAiAARADAAAACRAAEAGQAAAJoABHBGAAAAnwABABcAAACjAAFwRwAAAKgAB3BIAAAAsQAJCUkAAAC8AAkJSgAAAMcACQlLAAAA0QAJAA8AAADfAAEAIgAAAOQAAXBMAAAA6AABcEwAAADtAAFwTQAAAPIABHBOAAAA9gABcE8AAAAAAQFwUAAAAAoBAQAnAAAADwEBACYAAAAXAQEAHgAAABsBB3BRAAAAHwERACMAAAAmAQkAJAAAAC0BKQASAAAANQEJABsAAAA5AQkAEwAAAEEBCQAQAAAAUAFJABEAAABXAQEAFgAAAFsBAXBSAAAAYAEBABQAAABnAQFwUwAAAG8BAQAVAAAAewERACUAAACCAQkADQAAAI4BAQAaAAAAoQEBcFQAAACqAQkADgAAALQBAXBVAAAAuAEJCVYAAADEAQkJVwAAANABCQlYAAAA3AEJCVkAAADnAQkJWgAAAPkBBXBbAAAAAQJhABgAAAAKAi8AXAAAABUC6ANdAAAAIQIBcF4AAAArAgkAXwAAADACCQBgAAAANQLIAWEAAABEAhAAYgAAAFICEABjAAAAXwIQAGQAAABqAgEAIQAAAHICCQBlAAAAhQLoAmYAAACSAgwAZwAAAJ4CSABoAAAAqwIAAGkAAACwAhgAagAAALUCCABrAAAAugIJAGwAAADNAgkACQAAANICAQApAAAA1QIpAG0AAADgAgEAbgAAAOoCBwBvAAAA8gIBcHAAAAD5AgFwcAAAAAQDCwBxAAAADQMLAHIAAAATAwgAcwAAABgDDwB0AAAAIwNJAHUAAAAsAyEBdgAAADMDIQF3AAAAOgMhAXgAAABAA2gGeQAAAEgDYAB6AAAATwNgAHsAAABWA2AAfAAAAFwDEAB9AAAAYgMBACoAAABqAwkAfgAAAHIDGAB/AAAAeAMIAIAAAACJA8kFgQAAAJUDCACCAAAApwM4AIMAAACvA8kFhAAAALoDSQOFAAAAwwNIAoYAAADMAwgAhw==");
  base64DecodeToExistingUint8Array(bufferView, 131072, "QXJyYXkAQXJyYXlCdWZmZXIAQXJyYXlCdWZmZXJWaWV3AEJUTgBCVE4xAEJUTjIAQlROMwBCVE40AEJUTjUAQmFuZ2xlAEJsdWV0b290aABCb29sZWFuAERhdGFWaWV3AERhdGUARQBFcnJvcgBGbG9hdDMyQXJyYXkARmxvYXQ2NEFycmF5AEZ1bmN0aW9uAEdyYXBoaWNzAEhJR0gASTJDAEkyQzEASW5maW5pdHkASW50MTZBcnJheQBJbnQzMkFycmF5AEludDhBcnJheQBJbnRlcm5hbEVycm9yAEpTT04ATEVEAExFRDEATEVEMgBMT1cATG9vcGJhY2tBAExvb3BiYWNrQgBNYXRoAE1vZHVsZXMATlJGAE5hTgBOdW1iZXIAT2JqZWN0AE9uZVdpcmUAUGluAFByb21pc2UAUmVmZXJlbmNlRXJyb3IAUmVnRXhwAFNQSQBTUEkxAFNlcmlhbABTZXJpYWwxAFN0b3JhZ2VGaWxlAFN0cmluZwBTeW50YXhFcnJvcgBURk1pY3JvSW50ZXJwcmV0ZXIAVGVybWluYWwAVHlwZUVycm9yAFVTQgBVaW50MTZBcnJheQBVaW50MjRBcnJheQBVaW50MzJBcnJheQBVaW50OEFycmF5AFVpbnQ4Q2xhbXBlZEFycmF5AFZJQlJBVEUAV2F2ZWZvcm0AYW5hbG9nUmVhZABhbmFsb2dXcml0ZQBhcmd1bWVudHMAYXRvYgBidG9hAGNoYW5nZUludGVydmFsAGNsZWFySW50ZXJ2YWwAY2xlYXJUaW1lb3V0AGNsZWFyV2F0Y2gAY29uc29sZQBkZWNvZGVVUklDb21wb25lbnQAZGlnaXRhbFB1bHNlAGRpZ2l0YWxSZWFkAGRpZ2l0YWxXcml0ZQBkdW1wAGVjaG8AZWRpdABlbmNvZGVVUklDb21wb25lbnQAZXZhbABmcwBnZXRQaW5Nb2RlAGdldFNlcmlhbABnZXRUaW1lAGdsb2JhbABnbG9iYWxUaGlzAGlzRmluaXRlAGlzTmFOAGxvYWQAcGFyc2VGbG9hdABwYXJzZUludABwZWVrMTYAcGVlazMyAHBlZWs4AHBpbk1vZGUAcG9rZTE2AHBva2UzMgBwb2tlOABwcmludABwcm9jZXNzAHJlcXVpcmUAcmVzZXQAc2V0QnVzeUluZGljYXRvcgBzZXRJbnRlcnZhbABzZXRTbGVlcEluZGljYXRvcgBzZXRUaW1lAHNldFRpbWVvdXQAc2V0V2F0Y2gAc2hpZnRPdXQAdHJhY2U=");
  base64DecodeToExistingUint8Array(bufferView, 132066, "IQGIAAAACAABcIkAAAAQACEBigAAABUA4QGLAAAAGgAhAYwAAAAkACABjQAAAC4AAQCOAAAAMgAAAI8AAAA+ABgAkAAAAEsAAQCRAAAAVAABAJIAAABfAAEAkwAAAGkACQCUAAAAeQABAJUAAACEAAEAlgAAAIwAAQCXAAAAlwAEAJgAAACkACEBmQAAAKoAIAGaAAAArwADAJsAAAC9AAMAnAAAAMgAAwCdAAAA1AADAJ4AAADcAAMAnwAAAOQAAwCgAAAA7AADAKEAAAD1AGAAogAAAPsACACjAAAAAAEAAKQAAAAMAQAApQAAABABCQCmAAAAGAEAAKcAAAAlARgAqAAAADIBWwCpAAAAQgFbAKoAAABOAVsAqwAAAFoBOACsAAAAawEIAK0AAAB2ASAArgAAAIMBGACvAAAAjwE4ALAAAACdARgAsQAAAKcBCACyAAAAsgE4ALMAAADCASAAtAAAAM8BSAC1AAAA1QEAALYAAADfAQAAtwAAAOwBAAC4AAAA/QEAALkAAAAFAiABug==");
  base64DecodeToExistingUint8Array(bufferView, 132480, "YWNjZWxSZABhcHBSZWN0AGJlZXAAYnV6egBjb21wYXNzUmQAY29tcGFzc1dyAGRiZwBkcmF3V2lkZ2V0cwBmYWN0b3J5UmVzZXQAZ2V0QWNjZWwAZ2V0Q29tcGFzcwBnZXRHUFNGaXgAZ2V0SGVhbHRoU3RhdHVzAGdldExDRE1vZGUAZ2V0TG9nbwBnZXRPcHRpb25zAGdldFN0ZXBDb3VudABocm1SZABpb1dyAGlzQmFja2xpZ2h0T24AaXNDaGFyZ2luZwBpc0NvbXBhc3NPbgBpc0dQU09uAGlzSFJNT24AaXNMQ0RPbgBpc0xvY2tlZABsY2RXcgBsb2FkAGxvYWRXaWRnZXRzAG9mZgBwcm9qZWN0AHJlc2V0Q29tcGFzcwBzZXRCYWNrbGlnaHQAc2V0Q29tcGFzc1Bvd2VyAHNldEdQU1Bvd2VyAHNldEhSTVBvd2VyAHNldExDREJyaWdodG5lc3MAc2V0TENETW9kZQBzZXRMQ0RPZmZzZXQAc2V0TENEUG93ZXIAc2V0TENEVGltZW91dABzZXRMb2NrZWQAc2V0T3B0aW9ucwBzZXRQb2xsSW50ZXJ2YWwAc2V0U3RlcENvdW50AHNldFVJAHNob3dDbG9jawBzaG93TGF1bmNoZXIAc2hvd1JlY292ZXJ5TWVudQBzb2Z0T2ZmAHRvdWNoV3IAAAAAAAAJALsAAAAGAEgGvAAAAAoA+U+9AAAAEwAJAL4AAAAaAIgAvwAAAB4A/w/AAAAAIwAIAMEAAAAtAE8IwgAAADYASQLDAAAAQQAAAMQAAABIAAAAxQAAAFoAAQDGAAAAYgAAAMcAAABtAAAAyAAAAHsAeADJAAAAigAJAMoAAACTAMwAywAAAKAABwDMAAAArgAEAM0AAAC5AAEAzgAAAMQAAQDPAAAA0gABANAAAADbAAEA0QAAAOkACQHSAAAA8wAHANMAAAACAQQA1AAAAAkBCwDVAAAAEAEAANYAAAAdAQAA1wAAACkBSQbYAAAANgFIQtkAAABBASEB2gAAAEwBSQDbAAAAVgFhAtwAAABhAUgC3QAAAGYBAADeAAAAbQEkAN8AAAB5AcgA4AAAAIUBDADhAAAAjgFIAOIAAACZARAA4wAAAKABCADkAAAAqQEIAOUAAAC1ATgA5gAAAMEBSQDnAAAAywEJAOgAAADUAUgA6QAAAOABSQDqAAAA6wEJAOsAAAD4ASAA7AAAAP4BAADtAAAAEwIPAO4AAAAXAgkA7wAAACUCEQDwAAAAMgIJAPEAAAA3AhEA8gAAAEACEQDzAAAATQLPAfQAAABDUkMzMgBGRlQASFNCdG9SR0IAYXNVVEY4AGFzbQBjbGlwAGNvbXBpbGVkQwBjb252b2x2ZQBkZWNvZGVVVEY4AGRlZnJhZwBkdW1wRnJhZ21lbnRhdGlvbgBkdW1wU3RyAGR1bXBUaW1lcnMAZHVtcFZhcmlhYmxlcwBlbmFibGVXYXRjaGRvZwBmcm9tVVRGOABnZXRBZGRyZXNzT2YAZ2V0QW5hbG9nVlJlZgBnZXRCYXR0ZXJ5AGdldENvbnNvbGUAZ2V0RXJyb3JGbGFncwBnZXRGbGFncwBnZXRQb3dlclVzYWdlAGdldFNpemVPZgBnZXRUZW1wZXJhdHVyZQBod1JhbmQAaXNVVEY4AGtpY2tXYXRjaGRvZwBsb2NrQ29uc29sZQBsb29rdXBOb0Nhc2UAbWFwSW5QbGFjZQBtZW1vcnlBcmVhAG1lbW9yeU1hcABuYXRpdmVDYWxsAHBpcGUAcmVib290AHJldmVyc2VCeXRlAHNldEJvb3RDb2RlAHNldENsb2NrAHNldENvbnNvbGUAc2V0RFNUAHNldEZsYWdzAHNldFBhc3N3b3JkAHNldFRpbWVab25lAHNob3dBbGVydABzaG93TWVudQBzaG93TWVzc2FnZQBzaG93UHJvbXB0AHNob3dTY3JvbGxlcgBzcmFuZABzdG9wRXZlbnRQcm9wYWdhdGlvbgBzdW0AdG9BcnJheUJ1ZmZlcgB0b0ZsYXRTdHJpbmcAdG9KUwB0b1N0cmluZwB0b1VpbnQ4QXJyYXkAdmFyaWFuY2U=");
  base64DecodeToExistingUint8Array(bufferView, 134082, "AQD1AAAACwABAPYAAAAdAEgA9wAAACwASAD4AAAAZ2V0QWRkcmVzcwBnZXRTZWN1cml0eVN0YXR1cwBzZXRBZHZlcnRpc2luZwBzZXRTZXJ2aWNlcw==");
  base64DecodeToExistingUint8Array(bufferView, 134176, "+QAAAHNldENvbnNvbGUAAAAAEYD6AAAABwBJgPsAAAANAAmD/AAAABIASYD9AAAAGQAJgP4AAAAeAAmA/wAAACgASIAAAQAAMAALgQEBAAA5AAmBAgEAAEEACYADAQAARgAB8AQBAABNAEmABQEAAFEAAYAGAQAAVQAUgAcBAABaAEmACAEAAGEAAYAJAQAAaQABgAoBAABvAGGACwEAAHUASYAMAQAAegAJgA0BAAB/AGGEDgEAAIYACYABAAAAjwAUgA8B");
  base64DecodeToExistingUint8Array(bufferView, 134384, "Y29uY2F0AGV2ZXJ5AGZpbGwAZmlsdGVyAGZpbmQAZmluZEluZGV4AGZvckVhY2gAaW5jbHVkZXMAaW5kZXhPZgBqb2luAGxlbmd0aABtYXAAcG9wAHB1c2gAcmVkdWNlAHJldmVyc2UAc2hpZnQAc2xpY2UAc29tZQBzb3J0AHNwbGljZQB0b1N0cmluZwB1bnNoaWZ0AAAAAAsAEAEAAGlzQXJyYXkAAAAAAAAABPARAQAAYnl0ZUxlbmd0aAAAAAAB8BIBAAAHAATwEwEAABIABPAUAQAAHQAJg/wAAAAiAEmA/QAAACkACYD+AAAALgAJgP8AAAA4AEiAAAEAAEAAC4EBAQAASQAJgQIBAABRAAmAAwEAAFYASYAVAQAAWgBJgAgBAABhAAGACQEAAGkACIEWAQAAbQBhgAsBAABzAAmAFwEAAHgAYYAYAQAAYnVmZmVyAGJ5dGVMZW5ndGgAYnl0ZU9mZnNldABmaWxsAGZpbHRlcgBmaW5kAGZpbmRJbmRleABmb3JFYWNoAGluY2x1ZGVzAGluZGV4T2YAam9pbgBtYXAAcmVkdWNlAHJldmVyc2UAc2V0AHNsaWNlAHNvcnQAc3ViYXJyYXk=");
  base64DecodeToExistingUint8Array(bufferView, 134866, "4YAZAQAACwDhgBoBAAAWAOGAGwEAAB8A4YAcAQAAKADhgB0BAAAwAOGAHgEAADoA4YAfAQAARADhgCABAABNAGCGIQEAAFgAYIYiAQAAYwBghiMBAABsAGCGJAEAAHUAYIYlAQAAfQBghiYBAACHAGCGJwEAAJEAYIYoAQAAZ2V0RmxvYXQzMgBnZXRGbG9hdDY0AGdldEludDE2AGdldEludDMyAGdldEludDgAZ2V0VWludDE2AGdldFVpbnQzMgBnZXRVaW50OABzZXRGbG9hdDMyAHNldEZsb2F0NjQAc2V0SW50MTYAc2V0SW50MzIAc2V0SW50OABzZXRVaW50MTYAc2V0VWludDMyAHNldFVpbnQ4");
  base64DecodeToExistingUint8Array(bufferView, 135154, "BwApAQAABAAPACoBAABub3cAcGFyc2U=");
  base64DecodeToExistingUint8Array(bufferView, 135186, "BIArAQAACAAEgCwBAAAPAASALQEAABsABIAuAQAAJAAEgC8BAAAtAASAMAEAAD0ABIAxAQAASAAEgDIBAABRAASAMwEAAFwAB4A0AQAAZAAEgDUBAAB2ACeANgEAAH4AZ4I3AQAAigBnkjgBAACTACeAOQEAAKMAZ4I6AQAArgBngDsBAAC3AGeAPAEAAMIAP4A9AQAAygABgD4BAADWAAGAPgEAAN0AAYA/AQAA7gABgEABAAD3AAGAQQEAAAMBB4A0AQ==");
  base64DecodeToExistingUint8Array(bufferView, 135392, "Z2V0RGF0ZQBnZXREYXkAZ2V0RnVsbFllYXIAZ2V0SG91cnMAZ2V0SXNEU1QAZ2V0TWlsbGlzZWNvbmRzAGdldE1pbnV0ZXMAZ2V0TW9udGgAZ2V0U2Vjb25kcwBnZXRUaW1lAGdldFRpbWV6b25lT2Zmc2V0AHNldERhdGUAc2V0RnVsbFllYXIAc2V0SG91cnMAc2V0TWlsbGlzZWNvbmRzAHNldE1pbnV0ZXMAc2V0TW9udGgAc2V0U2Vjb25kcwBzZXRUaW1lAHRvSVNPU3RyaW5nAHRvSlNPTgB0b0xvY2FsSVNPU3RyaW5nAHRvU3RyaW5nAHRvVVRDU3RyaW5nAHZhbHVlT2YAAAAAAYBCAQAAdG9TdHJpbmcAAAAAAAABgEIBAAB0b1N0cmluZwAAAAAAAAGAQgEAAHRvU3RyaW5nAAAAAAAAAYBCAQAAdG9TdHJpbmcAAAAAAAABgEIBAAB0b1N0cmluZwAAAAAAABAAfQAAAAYAEAB9AAAADAAQAH0AAAARABAAfQAAABUAEAB9");
  base64DecodeToExistingUint8Array(bufferView, 135808, "ZGVidWcAZXJyb3IAaW5mbwBsb2cAd2Fybg==");
  base64DecodeToExistingUint8Array(bufferView, 135842, "CQBDAQAABgBJAkQBAABwYXJzZQBzdHJpbmdpZnk=");
  base64DecodeToExistingUint8Array(bufferView, 135890, "B3BFAQAACgAHcEYBAAAUAAdwRwEAACYAB3BIAQAAKgAHcEkB");
  base64DecodeToExistingUint8Array(bufferView, 135936, "TUFYX1ZBTFVFAE1JTl9WQUxVRQBORUdBVElWRV9JTkZJTklUWQBOYU4AUE9TSVRJVkVfSU5GSU5JVFkAAAAAAAAAIYBKAQAAdG9GaXhlZA==");
  base64DecodeToExistingUint8Array(bufferView, 136034, "SIBLAQAADAABgEwBAAASAIiATQEAABcAC4BOAQAAJgAB8AQBAAAtAEiASwEAADAASIBPAQAAQAAIgFABAABTAEiAUQEAAGIACYABAAAAawABgFIB");
  base64DecodeToExistingUint8Array(bufferView, 136128, "YWRkTGlzdGVuZXIAY2xvbmUAZW1pdABoYXNPd25Qcm9wZXJ0eQBsZW5ndGgAb24AcHJlcGVuZExpc3RlbmVyAHJlbW92ZUFsbExpc3RlbmVycwByZW1vdmVMaXN0ZW5lcgB0b1N0cmluZwB2YWx1ZU9m");
  base64DecodeToExistingUint8Array(bufferView, 136258, "EQBTAQAABwBJAFQBAAAOAEkAVQEAAB8ASQJWAQAALgAJAFcBAAA2AAkAWAEAAEIASQBZAQAAWwAJAFoBAAB1AAkAWwEAAIkACQBcAQAAmAAJAF0BAACdAEkAXgEAAKwACQBfAQ==");
  base64DecodeToExistingUint8Array(bufferView, 136368, "YXNzaWduAGNyZWF0ZQBkZWZpbmVQcm9wZXJ0aWVzAGRlZmluZVByb3BlcnR5AGVudHJpZXMAZnJvbUVudHJpZXMAZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yAGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMAZ2V0T3duUHJvcGVydHlOYW1lcwBnZXRQcm90b3R5cGVPZgBrZXlzAHNldFByb3RvdHlwZU9mAHZhbHVlcw==");
  base64DecodeToExistingUint8Array(bufferView, 136562, "SYBgAQAABgCJgGEBAAALAImAYAEAABAACIBiAQAAYXBwbHkAYmluZABjYWxsAHJlcGxhY2VXaXRoAAAAAAAAAAmAYwEAAAUAC4BkAQAAZXhlYwB0ZXN0");
  base64DecodeToExistingUint8Array(bufferView, 136658, "IYBlAQAABwAhgGYBAAASABGAZwEAABkAS4BoAQAAIgBLgGkBAAArAEyAagEAADMATIBrAQAAPwAB8AQBAABGAAmAbAEAAEwAYYBtAQAAUwBhgG4BAABcAAGAbwEAAGoAIYBwAQAAcQBJgHEBAAB5AEmAcgEAAIQAYYBzAQAAigAJgHQBAACQAAuBdQEAAJsAYYB2AQAAogBhgHcBAACsAAGAeAEAALgAAYB5AQAAxAABgHoB");
  base64DecodeToExistingUint8Array(bufferView, 136848, "Y2hhckF0AGNoYXJDb2RlQXQAY29uY2F0AGVuZHNXaXRoAGluY2x1ZGVzAGluZGV4T2YAbGFzdEluZGV4T2YAbGVuZ3RoAG1hdGNoAHBhZEVuZABwYWRTdGFydAByZW1vdmVBY2NlbnRzAHJlcGVhdAByZXBsYWNlAHJlcGxhY2VBbGwAc2xpY2UAc3BsaXQAc3RhcnRzV2l0aABzdWJzdHIAc3Vic3RyaW5nAHRvTG93ZXJDYXNlAHRvVXBwZXJDYXNlAHRyaW0AAAAAAAARAHsBAABmcm9tQ2hhckNvZGU=");
  base64DecodeToExistingUint8Array(bufferView, 137090, "SAB8AQAACgABAH0BAAAUAAAAfgEAACQACAB/AQAAYWRkQ2FjaGVkAGdldENhY2hlZAByZW1vdmVBbGxDYWNoZWQAcmVtb3ZlQ2FjaGVk");
  base64DecodeToExistingUint8Array(bufferView, 137186, "B3CAAQAAAgAHcIEBAAAHAAdwggEAAAsAB3CDAQAAEgAHcIQBAAAYAAdwhQEAABsAB3CGAQAAIwAHcIcBAAApAD8AiAEAAC0APwCJAQAAMgA/AIoBAAA3AD8AiwEAADwA/wGMAQAAQgA/AI0BAABHAP8PjgEAAEwAPwCPAQAAUAA/AJABAABUAD8AkQEAAFoAPwCSAQAAXgAXAJMBAABiABcAlAEAAGYA/wGVAQAAagAHAJYBAABxADkAlwEAAHcAPACYAQAAfAA/AJkBAACAAD8AmgEAAIUAPwCbAQAAiQD/AZwB");
  base64DecodeToExistingUint8Array(bufferView, 137424, "RQBMTjEwAExOMgBMT0cxMEUATE9HMkUAUEkAU1FSVDFfMgBTUVJUMgBhYnMAYWNvcwBhc2luAGF0YW4AYXRhbjIAY2VpbABjbGlwAGNvcwBleHAAZmxvb3IAbG9nAG1heABtaW4AcG93AHJhbmRvbQByb3VuZABzaWduAHNpbgBzcXJ0AHRhbgB3cmFwAAAAAAAIAJ0BAAAKAAEAngEAABIAIQCfAQAAGgAhAaABAAAfAAgBoQE=");
  base64DecodeToExistingUint8Array(bufferView, 137616, "ZXJhc2VQYWdlAGdldEZyZWUAZ2V0UGFnZQByZWFkAHdyaXRlAAAAAAAASALdAAAAcGlwZQ==");
  base64DecodeToExistingUint8Array(bufferView, 137682, "AXCiAQAABAAJAKMBAAALAAFwpAE=");
  base64DecodeToExistingUint8Array(bufferView, 137712, "ZW52AG1lbW9yeQB2ZXJzaW9u");
  base64DecodeToExistingUint8Array(bufferView, 137746, "CYClAQAABQADgKYBAAALACGApwEAABIACICoAQAAGQAAgKkBAAAeAMiAqgEAAHJlYWQAcmVzZXQAc2VhcmNoAHNlbGVjdABza2lwAHdyaXRl");
  base64DecodeToExistingUint8Array(bufferView, 137842, "CQCrAQAABAAJAKwBAAALAAkArQE=");
  base64DecodeToExistingUint8Array(bufferView, 137872, "YWxsAHJlamVjdAByZXNvbHZl");
  base64DecodeToExistingUint8Array(bufferView, 137906, "CYCuAQAABgBJgK8BAABjYXRjaAB0aGVuAAAAACkAsAEAAGZpbmQ=");
  base64DecodeToExistingUint8Array(bufferView, 137954, "BICxAQAACgAAgLIBAAAQABCAswEAABcASIDdAAAAHAAIgLQBAAAiAAiAtQEAACoAIYC2AQAALwAYgLcBAAA6AEiAuAEAAEAAAIC5AQAASAAQgLoB");
  base64DecodeToExistingUint8Array(bufferView, 138048, "YXZhaWxhYmxlAGZsdXNoAGluamVjdABwaXBlAHByaW50AHByaW50bG4AcmVhZABzZXRDb25zb2xlAHNldHVwAHVuc2V0dXAAd3JpdGUAAAAAABgAuwEAAAgACAC8AQAADgAAAL0BAAAXABwAvgEAAB8AGQC/AQAAKAAMAMABAAAtAEkAwQEAADIASQDCAQAANwAAAMMBAABAAAkJxAEAAEUACQDFAQAAVQDJAMYBAABeAEtIxwEAAGQASwDIAQAAY29tcGFjdABlcmFzZQBlcmFzZUFsbABnZXRGcmVlAGdldFN0YXRzAGhhc2gAbGlzdABvcGVuAG9wdGltaXNlAHJlYWQAcmVhZEFycmF5QnVmZmVyAHJlYWRKU09OAHdyaXRlAHdyaXRlSlNPTgAAAAAAAIDJAQAABgAEgMoBAAAQAEiA3QAAABUAIYDLAQAAGgABgMwBAAAjAAiAzQEAAGVyYXNlAGdldExlbmd0aABwaXBlAHJlYWQAcmVhZExpbmUAd3JpdGUAAAAAAAApAM4BAABmaW5k");
  base64DecodeToExistingUint8Array(bufferView, 138466, "SYHPAQAABQAI2dABAAAOAAjZ0QEAABcACIDSAQAAHQAQgNMB");
  base64DecodeToExistingUint8Array(bufferView, 138512, "c2VuZABzZW5kNGJpdABzZW5kOGJpdABzZXR1cAB3cml0ZQAAAAApANQBAABmaW5k");
  base64DecodeToExistingUint8Array(bufferView, 138578, "CYHVAQAACQAhidYBAAARAAiA1wEAABcAiIDYAQAAcmVhZEZyb20AcmVhZFJlZwBzZXR1cAB3cml0ZVRvAAAAAOiD2QEAAAsA6IPaAQAAFwAAgNsB");
  base64DecodeToExistingUint8Array(bufferView, 138672, "c3RhcnRJbnB1dABzdGFydE91dHB1dABzdG9wAAAAAAAAAAkA3AEAAAkACQDdAQAAY29tcHJlc3MAZGVjb21wcmVzcw==");
  base64DecodeToExistingUint8Array(bufferView, 138754, "AYDeAQAABgAJgN8BAAAOAAGA4AEAABQATILhAQAAHwAJgOIBAAAkABmA4wEAACoACcnkAQAANAAhieUBAAA/ACGJ5gEAAEwAIcnnAQAAWAAJmegBAABiAEmA6QEAAG0AIcnqAQAAdgD5/+sBAACBAMmA7AEAAIoAyYDtAQAAlQAJye4BAACeAAm57wEAAKkAAIDwAQAArgAhifEBAAC5ACHJ8gEAAMUACYDzAQAAzgAJgPQBAADZAAnJ9QEAAOIAIYP2AQAA7AAEgPcBAADzAASA+AEAAP4ABID5AQAABwEBgPoBAAAPAQSA+wEAAB0BAYD8AQAAJgEEgP0BAAAwARmA/gEAADwBJIH/AQAARQFJgAACAABYAQSAAQIAAGEBCYACAgAAbgEhgQMCAAB1ASGBBAIAAHwBSYAFAgAAjAEBgAYCAACSASGBBwIAAJkBSYIIAgAApAEhyQkCAACwAUmCCgIAALkBCYELAgAAwQEhiQwCAADOAQGADQIAANwBCcMOAgAA6gEJgQ8CAAD1ASGAEAIAAAMCIYMRAgAADALhgBICAAAYAgmAEwIAACECCYAUAgAALwIMgBUCAAA7AgHwFgIAAEECTIIXAgAASQJJgBgCAABbAgmBGQIAAGFzQk1QAGFzSW1hZ2UAYXNVUkwAYmxlbmRDb2xvcgBibGl0AGNsZWFyAGNsZWFyUmVjdABkcmF3Q2lyY2xlAGRyYXdDaXJjbGVBQQBkcmF3RWxsaXBzZQBkcmF3SW1hZ2UAZHJhd0ltYWdlcwBkcmF3TGluZQBkcmF3TGluZUFBAGRyYXdQb2x5AGRyYXdQb2x5QUEAZHJhd1JlY3QAZHJhd1N0cmluZwBkdW1wAGZpbGxDaXJjbGUAZmlsbEVsbGlwc2UAZmlsbFBvbHkAZmlsbFBvbHlBQQBmaWxsUmVjdABmbG9vZEZpbGwAZ2V0QlBQAGdldEJnQ29sb3IAZ2V0Q29sb3IAZ2V0Rm9udABnZXRGb250SGVpZ2h0AGdldEZvbnRzAGdldEhlaWdodABnZXRNb2RpZmllZABnZXRQaXhlbABnZXRWZWN0b3JGb250UG9seXMAZ2V0V2lkdGgAaW1hZ2VNZXRyaWNzAGxpbmVUbwBtb3ZlVG8AcXVhZHJhdGljQmV6aWVyAHJlc2V0AHNjcm9sbABzZXRCZ0NvbG9yAHNldENsaXBSZWN0AHNldENvbG9yAHNldEZvbnQAc2V0Rm9udEFsaWduAHNldEZvbnRCaXRtYXAAc2V0Rm9udEN1c3RvbQBzZXRGb250UEJGAHNldEZvbnRWZWN0b3IAc2V0UGl4ZWwAc2V0Um90YXRpb24Ac2V0VGhlbWUAc3RyaW5nTWV0cmljcwBzdHJpbmdXaWR0aAB0aGVtZQB0b0NvbG9yAHRyYW5zZm9ybVZlcnRpY2VzAHdyYXBTdHJpbmc=");
  base64DecodeToExistingUint8Array(bufferView, 139858, "IRkaAgAAEgAhGRsCAAAhAAkAHAIAAC0AAQAdAgAAY3JlYXRlQXJyYXlCdWZmZXIAY3JlYXRlQ2FsbGJhY2sAY3JlYXRlSW1hZ2UAZ2V0SW5zdGFuY2UAAAAAAABhAB4CAABjcmVhdGUAAAAAAAAAAAGAHwIAAAkAAYAgAgAAEwAAgCEC");
  base64DecodeToExistingUint8Array(bufferView, 140000, "Z2V0SW5wdXQAZ2V0T3V0cHV0AGludm9rZQAAAAAAAAC4+wEAuPsBAADA+wEAIPwBAAxw/AEAAAACAHHgAwIAgAUCADOQBwIAYAkCADrACwIA4AsCAAQcDAIAJAwCAAEwDAIA8AwCABeIDQIAkA0CAAGcDQIApA0CAAGwDQIAQA4CABLQDgIAUA8CABDwDwIAABACAAIQEAIA4BACABnsEQIA9BECAAEAEgIACBICAAEUEgIAHBICAAEoEgIAMBICAAE8EgIARBICAAFQEgIAgBICAAWgEgIAsBICAALQEgIAABMCAAVAEwIASBMCAAFgEwIAwBMCAAtAFAIAsBQCAA1wFQIAkBUCAASwFQIAwBUCAALQFQIAkBYCABdcFwIAZBcCAAGAFwIAoBcCAATgFwIA0BgCAB1gGQIAkBkCAAW4GQIAwBkCAAHQGQIA8BkCAAMQGgIAQBoCAAZwGgIAkBoCAAOwGgIAwBoCAALMGgIA1BoCAAHgGgIAQBsCAAuQGwIAABwCAA5wHAIAoBwCAAbMHAIA1BwCAAHgHAIAEB0CAAU0HQIAPB0CAAFQHQIAcB0CAASQHQIAsB0CAAPQHQIA4B0CAAIAHgIA4B8CADxQIgIAcCICAASsIgIAtCICAAHAIgIA4CICAANQaW4AQmFuZ2xlAEUATlJGAEJsdWV0b290aABBcnJheQBBcnJheUJ1ZmZlcgBBcnJheUJ1ZmZlclZpZXcAVWludDhBcnJheQBVaW50OENsYW1wZWRBcnJheQBJbnQ4QXJyYXkAVWludDE2QXJyYXkASW50MTZBcnJheQBVaW50MjRBcnJheQBVaW50MzJBcnJheQBJbnQzMkFycmF5AEZsb2F0MzJBcnJheQBGbG9hdDY0QXJyYXkARGF0YVZpZXcARGF0ZQBFcnJvcgBTeW50YXhFcnJvcgBUeXBlRXJyb3IASW50ZXJuYWxFcnJvcgBSZWZlcmVuY2VFcnJvcgBGdW5jdGlvbgBjb25zb2xlAEpTT04ATnVtYmVyAE9iamVjdABCb29sZWFuAFJlZ0V4cABTdHJpbmcATW9kdWxlcwBNYXRoAGZzAHByb2Nlc3MAT25lV2lyZQBQcm9taXNlAFNlcmlhbABTdG9yYWdlRmlsZQBTUEkASTJDAFdhdmVmb3JtAEdyYXBoaWNzAFRGTWljcm9JbnRlcnByZXRlcgAAZwAAalXqH0ItwEdCXwAEliQWcwNTBgOHBAAAABAAEAIgx0ESRCAAkj11UpVUFXP6HQAA3yVkWnY0qRqWJAAAAAAAAJIuABGSLiAAlixpW3pN4FtaLQAA/lclWbV7JVs+VwAAT1mKeYp5anlXfwAAlWVvW29br28VVwAAe1tUW1J7UX/WVQAA7U9tSLooFRnVHwAAFwgpZAEQAXDHcQAARBDeJGV/ZSneJgAAoEQzUK1tq1TpVQYIBgCyZXpbelt/ZQBAAATrXrVVZVSjMwEAAABte70qf0d6cwAMk3eSfNZwknCTcQBwAwAEAAYABgAEAAMAQAGSCUQppxVEfSoIBChHGgSogiQA/LokBCg3GwAAAgBEIAAAhBAAAAQJRQAACUIAAIn/AQAJQgiAEEUIQCAAEAAEAAAACEccAIjJIgCQSgMfkEocgKBMIIAg9z8AQAAAAAAAAE588x3RQBQiRnkvHEGGSCLxx4giTjiHHAAAAAAAAAAADgABIJEQAhCREPQJDwAIBIEQ9AmOEAIQACABIMABAAAuEu84cZIYJaIqDyOkuggjYMYYJQRG7zjgAQAAAAAAAP+76A4QwkgCnMNPAhDeSCIQxkgiH7roHAAAAAAAAAAAEcboPBLuHCMU1hojHMYZPRLGGCHxx+ggAAAAAAAAAADOux8jMUISI9E7EiMxBhIVMkYSFS064ggBAAAAAADgIDHGjxBRRYEQlSiCCFURhAguEogEKpKPBAAA4AKOAAQgggACIEIB4DxCARAiIgLwIgIAECMCAPA8DnwAACCAAyAgAAQg7jn/PDBGFCMwfhQjMEL0Iu89FCIAAOAAREAGAABAAgDMRaI9REhSI0RwUiNESFIjTkRTI4ADAAAAAAAQAAAAEM4/6zwxxgwRMUboENE/GBAOBugPAAY=");
  base64DecodeToExistingUint8Array(bufferView, 141608, "McYYPzFGFQVRVRIJUVX1EI+oGD4AAOAAg2AADIQQABKEEAA4mIwEEJiMCjiEEAkShBAADINgAAAADAAAABAACAAQAAgAOAA+ABAACICRDQiAkFQJAGEJCARkAgCEaAceXxEoKAQgRywEwIAoH+xIKARsJx4EAAAAgABAGOADgAhPAMAQlAAAABYBAAAUAgAA7wMAAAAAAABpAwAAMgEAGlsSACwAOAAAAHz3AQA4AAAAEAAAAAAAAIAAAAgfAAAAy0EFPguiCgTAEQsIICAKEMDDBT4AAAAAAAACABEAYgAREIciCgDKHQQQihQEkIccBBByIwAQAgCROOUYkUAQBYowUB0fSJAlBCSQHZ8YUAGEBBABgHjgAAAA9xkAgAgkBYAOJAqADRjUgw4ASoANAEWACAAAAAcAgDEBAEQIkh6EEJA6HwmQGsQx0AoEAKAKHwCACgAAAAsAEAYkADAJJAAQSSkMEKkIDDhWEgABoBaAAEAvAAMAIhICZhxSAQAAVBJCCIQBpRSLEuccKaEYI3LFGCMzOgAAVhEAGISA4z6EEBYhSikLOc45DiExRhohMcbrPgAAQABGAWYc/3/nHBBCQgicc0IIEEJCCBBCQgj/f+ccAAAAAApYZhSOReccROUYI6TXGCMkzRgjRMUYI45F5xwAAAAAVoHADM4BFyMxghkjMaoaIzGSGiMxqhwjzgHnHAAACABKEQAYMUbIADFGLx0xqkgDMZI4HzESHyPOEWgfAAAAAMRZpQAAAEAAzjnnPCGEEArvvfc+McYYKe+99xYAAAAAgBmlGAAAAADOOecYMMYYCdB77wkQQggJ7733HAQAAABGKWUZAAAGAIwx4R2EEBcjhJAYI4SQGCPOORcdAAAAAEZZBQAAAAACzjlHHDHGCCYxxvgrMcYIMs45RxwAAAAgzChFIAAAACAxxhgtMcYYMzHGGDMxxvgs770XIAAA4CAKAAAAAAAAABEAAAARAAAAEQAAAA8AAAABAAAADgAAAAQEBAQEBAQEBB4EFRUeDAwEBAQEBAYEBAoKBAQLDg0KBgwHGBAEBAYEBAYLBCsMGxgUDAoGDAwQDAYOCh8QBAQOCAQHEAQECQoIBAgGBAQEFgQUBBUJBAwLBAQJBAwLBAQJHAkQBw8EBAkEChsEGxIWBAQEBBQEEQQeBAQEBAQeFAYGBhIOEAQEBAQEBAQLBgYECwsMEhMEBAQHCAQEFRQLBAQHBAQEBAwHBAQUBAQEBAQSGwQEBwgEBBUmCwQEBAQHCAQEBAQEBAAAAAAAAACpq8XDJymRjycpXVsqLGBeKy3HxS8xy8mCjaecT1p0aR0e1NMqKzpVU0VEUF1rbHuWo7zHxrecnqytoZSGhXZbTjUuMMXDKCo4Ul5dQVBFXUQpRTZBKUJdXE40lZelv8vKrr2yyrGWsqOulq/KybuhLDdQa8vNbVJGVGB2j5y3xsi9sX99lq6snpGFb1Y7HR9Eap7G7+3EnGhCGhxFbaHH7OrFn2tDKiyUkjVOiXA7VoNoaHCKgkRGrqyqrMbf3cRobYeCISPS0CosO1ZURkRQTjWcnqyuoqS9yMa3TlCenFRWpKIqLK6xy8OprERbQVRWY3yfuKuxy8OpkG1hVFZjfJekopWHhWttYSwuyshThIqknIInL0lDaoJeYG+KpKKIeniEgmknL0nHxUdBTlBda21hVFZjiG6XpKKVh4WRnpyPaoRbTlBqeHpuVFakooiJlJKDaFtdd3VcXnh2SWN5l7F1TlZwaIKKpJxBW3mPqX1UVmN8h5SSeGxtYayuyMZFSVhmgajAv6KWiJSisbytknlufZimpZmMcWJga4SeucjN2uXh0sSpdVxQKy3Ny1OknoWJU8XDJyw7VmN8bn2Ypb7Jxauvo5aIhGptYVRGQ8XDKy49S1ZHRlFqhJ+ur6Szv8rHuKqPW0I2Jyw7SWSYsb3IxautoolvVEVDxcMnL0lDam6IhKuxy8MnL0lDam6IhMXDe3+zsZeVJylqby4wzMqJhMXDJytFRKytx8OpqkJBLjClvsnGt5yRrJ6trqOvlicpdy4weczKhZHFwycpq7HLwycplZQwMs7MZK+uXcXDJymWLjDMyl3FwysuPUtmmrO/ysiur6SLcVZHRlFqhJ+uyMe4qo9bQjYnLDtWcImUkXd6blRGQ8XDsbzm24aIzMpOUF1rbXyXpKKVh4V2WycxS0fJx0VBJymenCcpoS8xyccnKcjGLC7MyjEzzMosLsjGJynNyy8xxcMnKW0vMYjJx4YnL0mrscvDqUdBGh85NtLV7+oaHNnXGh/v6tDTNzQrdXdSe33Q2PLqJylSUGBiysheX26Jo7zHraGHeXiEnqytx8a3nIJpJynFw15fbomHeXiEnqytoaO8x8a3nIJpLC7KyF5fbomjnoSHeXiEnqyuvMfGt5yCaSssRkVRxsRPNltgenVgYsrj7u3e0MTT1MheX26JysiHeXiEaVtdxcMnKUNBXV/H4Ovq0NHFKStFQycpkWBik8rIn6vFw2Nkc47PzYx+fYluW13s6mBi8e9eX258h3l4hGleX258iHl4hHeFhpWjvMfGt6mdrK2hrqCfkIJpKCqfra7Ix7idW12erK2hYGLKyLu8x8a3nFtdoGFjyMZbXcjGYGLMymVnzMqVyMZbXcvJYWPFw2JkyOHs69HSxltdrsdbYnyssMrDqXl1HyA6OUVfeISSrcfV1vDv4MWrkJ6PdWp2XUMqGhzs6hobKkVfemx7laCUrcfg6+rQ0cWrkoZ4XUM1NFFcdYKEd2t5lKOYf3JwfYl7YCwvPldIR1JrhaCvsKXAy8i5q5BcQzdocH11goqXj0FDXVt1d9/dUVJhfHpsa3eRn6CUlq+6uaqPdVxERcfGKyw7SVRGRVGSq7HLw6mQTzZoboiCQk5cdZCcqp6tlJKEal5gboiUraKwpJZ9YlZIVEVQdn6Lg5CYpZ2PkezqGhx3dSstR0UrLz5MZ5u0wMu+s5pmSzw4Q1yQq7q+y8e4qo9bQjZGSFdycGJgbIaUloqMpbCun4RqUV5shKCsgmFvh6OvhWhwsa+IgisvPDhDXJCrur7Lx7iqj1tCNi88S2aas77LwLSbZ0w+REhkfoqysIiWlHp8YmCurCcvSUE3OaGfqbHLw1tjfXUpK1BOnLjs6oKEnpzExdPg7Ord3tLf0V9rh5+tiVxohJyqhi8xxsQpKl5fbGlcXTZCNYqLzMuKi7CzwLyviYuZpr7Azcq9pZiWKCo4RVFEUl9raVxeUVBDRDc1eHqUoJ+ruMbIvL7X4uDRtqmQhURGYF4DBSAfBQcfHgQGIiASHhwEDxwRIBUIEwIEHhwGCCIgBAYULjo5HSwhOSAFIRIdBR45OCoQLDNNSXBzjYqxtc/Jop+GiEcuxcPIydfk8O7h4tbj1QIEHx4EBh4dAwUhHxEdGwEDHRsFByEfAAIdHAIEHBsoLEZFra7IxKqrQ0ICBCAeEBwaAAIcGgQGIB4oLTxKZZmyvsnGrK6jinBVRkTGxAQGISBCTrCkSFaqnDAyxcMnKZGcJylDRlVwiqOuq5GUiG5gXcXDKis6VWJue5exvcjGrK6ilXlsYFNFRFDFw041KStGRSosREMqLEhGOERCKjVCN0Y7LjkoKkRCLC5IRh0fLUdTUjZFOlI5HjorNh43UlFDKV5fbmNkc46oo4mMfn2Jo7GzwczLvMfFqZyEh6Gfq56sraGHeXdpxsfV4u7s3+DU4dNcXsbEJylEQygqQkFdX8fFKStHRTdDQSk1RF+JfFQ4LDpdT5KUrqxgYsXDKy1FRCcp7OotL0lHAAAAAAABAgMEBQYHCAkKCwwNAg4PEBESExQVFgAXGBkaGxwdGB4YGR8gGSEhGRgaIiMYGSQZGCUAFSYnKCkqKywYLS4vMDEyMzQwNTY3ODk6Ozw9Pjw/PUAYGUFCN0NERUZHSElKS0xNTk9QUFFSUFNUVVZXUFhRWVpbXF1RWFleWFlQUF9QYGFZYmNWZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXp7R3x9Wn5/gIGCg4SFhocLiImKi4xkjY6PkJGSk5GUkpGTlZaXmC6ZLpoumy6cnS6eLp8woDKhMqIyozKkpTamNqeoqaiqq6wWO5utPJk8mjybPJydPK6vsDyYsTeisTeasTecnbE3R5mys7RPULVPULZPULdPULi5T1BPULq7UrxUtFS1VLZUuLm9vlm/wMHAWn5QwsO3WFlQtFC1ULZQt1C4uROXxFDFZLRktWS2ZLi5aWrGx1BpalzIAAAAAAACAgQCAwEBAQEDAgEBAQEEAQIDAQMEAQMDAgIBAgEDAQEBAQEBAQIBAQEBAQEBAQECAgMBAgEBAgEBAQEBAQEBAgIBAgECAgICAgEBAwIBAgICAQIBAQECAgEBAQEBAAM=");
  base64DecodeToExistingUint8Array(bufferView, 144960, "AgICAQMCAAICAAIBAAMBAQMAAAECAAEBAAACAwMDAgICAgIDAgECAgICAwICAgMCAgICAgIDAgIDAwMEAgEBAwMDAwQDAQICAgIDAgICAwMDAgICAgMDAgICAgMDAgQABAAABAEABAIgBAMhBAQiBAUjBAYABAcABAgABAkABAoAFAsABAwABA0ABA4ABA8AFBAABBEABBIABBMABBQABBUAFBYAFBcAFBgABBkABBoABBsABBwkBB0lBB4mBB8n71ogQtqgX/AAf9MuE/G4nwG18LGwn/N2A2F+g2vh43FwBu1/Bu/N1v8N23AG10BN20fN2sCN20vG4vQG10DGwv9N18/G4vgN2v+N23wN2v/N19/N2sLN2w2G/A2uj43G4A2tgQ2G/oofg2ABxkvG43QG7+8BpkHGIP+ytqAgQ2fhbHMUoXgAwVvU0JuNGwK1Ejf//OQAoMPVwVAN0l/GwoVBGAjmDG65uMj42GBASnCh/q1W/cy5uMg//6AJGl//+gEB/A/CAYRuggP/+AIFiCvCJ4MPPYUvJA5ubv/8A4sPIIQKCNQe/N0UPZY0B8EAgbnCNwcDQAxubgSaCAAk8awX9NwsvoBuhv5bGh4rCBYRuDgI7DNz0PMQSlGPQQ0BGQY7DNzwqBSQylCIYZunn6lGhY+DBgTdmhalKPYZuDgZKGNzbQCUpCjB/huEv42VNxcv+ilKgG/4BuDh/QNzVayAKDgf/UpQNB/xuDg5yDNy0B///Dok/LQylEPgPwNwULHgIADi1QAwkVQ4kBtJuG343BUAcLZ4KlKJgLtBAARKEEAP0hYIB/AGBRAcHCgOAnxuDv/5gwQE/6xDUo7XB+kPG4YMDv5XC3oQBLwRFCGwX/wfgNwQgBKASRBA4LJGUopFBwH+1WqFQIpCl/+o3/7YHB//+q3/RIKGB8tb/xuDgYuCgLFDS4KlKbAWfJYUCFIULEAIsBNwTFBgbICv5ABhaEBNwW/WQfwAYMfAYQADsAGFTYJ+Dgf9HQICBHwRuCSIQFBj63Cj5lBNwMPagcvLQIaBF4oAGgb8COoZMBv5/ChY7BGYQKBTggGBNwUBagh/Cl5uFh43Gn5uEAwNAh5gCDgI0BEQUDIgQMCagRuBn4sEOYJuHVgxuGgItBF4QABNwSWCFYJ0DAgJuCD4QACYIRuGAA5uGFoMfVoguBBwUCEQJEEvxuDG4iKBbpNQNxUA3orCAAV9IAIOCl8AIgkDNwf61QAC1LdK37ODNw4iBYwkDNw0B+gNDnzdHAATdIl0fNxc+gZOEnpuGl9ANw7UHNw8DfoRuYgRuQgJuHngGEg5uGvxuNj5uHIApnDNw0BMwjjB9IHEhfQTAgGBNwoFDNwsfSocUAYReFNwMHDQkP/BfDAAP8Iwv9Nw0PFocHNwQRCO4RqCh/8NwsAgyAE/9AF4kvwApEj5uH3wUD/xuCg6dD34DDD4ZuCCIJnDj/wNwgdCDYcDNw8DKYcvNwcvJIIDBGQQaCNwsAngGCgX/ZAkBLIMDA4f/Nw4tDhZuDJwJHBj5EDn53DNwV0gZ3Dn/gNwgcDC4U/Nw69CKQRuDAoP6/5pDA4IRBNwcD8pEDhbrBL4YhBAgN/AYMv/ZuHgYlBgP/vxuDg///52BGAaODNwUfVwn/4EPC4IABIQQmBAAP83puHhYNC6fgg4MCgw2FSIK4CbocEAwcvGAI2DJQZzBRwMLNw60BBoPgnwvEAAyABNwoMHLAX+yALDG4KABvpPBYgUfBoUbGwMDXYQAJMIRuEAAn/PYgAWNxgqGNwsvdQoAVhZuMg6mENwoLFACVUAge8CRkv/gKIgKlXhYXDh/AUxp9Jn6lXn4DCgQcNTQJGIj4KJABoyE34TNFgJBJWJIANh/0ZwTCOv/9Kg///9AG61//NA146CABcB/62GBAP/KJwjKAAJdHThI3G3//KJw3MGx66BG4sBGwOZGy4ABtWkCSEv//+AoUGUjLyXGIPpq2vAgPgG1sCeQQADX6AAeUwIAFUt0BGw38N10PG42AG92/GwvwG10HNww2ugE/N2sDN3vgN2v+N23QG10CGwv9N18vG4vAG10BGwv8N18fN2sAN20PN3n4N22AN35utoA3v342E+A2vgZuFG18Aj42E6ALEASmFuAEZlYgBNYXIAQXByAE1heQBKdW4ASnVsAEF1ZwBTZXAAT2N0AE5vdgBEZWMAU3VuAE1vbgBUdWUAV2VkAFRodQBGcmkAU2F0");
  base64DecodeToExistingUint8Array(bufferView, 146656, "WAIAAFkCAABaAgAAWwIAAFwCAABdAgAAXgIAAF8CAABgAgAAYQIAAGICAABjAgAAZAIAAGUCAABmAgAAZwIAAGgC");
  base64DecodeToExistingUint8Array(bufferView, 146738, "HwDgB/8HAPgf+OD///8=");
  base64DecodeToExistingUint8Array(bufferView, 146770, "KEJRjNe9JpuAYSADQAXfBBkAEzAT+ADYIPvg////AAAGAAwAEwAZAB8AgAGGAYwBkwGZAZ8BIAMmAywDMwM5Az8DwATGBMwE0wTZBN8EYAZmBmwGcwZ5Bn8G4AfmB+wH8wf5B/8HADAGMAwwEzAZMB8wgDGGMYwxkzGZMZ8xIDMmMywzMzM5Mz8zwDTGNMw00zTZNN80YDZmNmw2czZ5Nn824DfmN+w38zf5N/83AGAGYAxgE2AZYB9ggGGGYYxhk2GZYZ9hIGMmYyxjM2M5Yz9jwGTGZMxk02TZZN9kYGZmZmxmc2Z5Zn9m4GfmZ+xn82f5Z/9nAJgGmAyYE5gZmB+YgJmGmYyZk5mZmZ+ZIJsmmyybM5s5mz+bwJzGnMyc05zZnN+cYJ5mnmyec555nn+e4J/mn+yf85/5n/+fAMgGyAzIE8gZyB/IgMmGyYzJk8mZyZ/JIMsmyyzLM8s5yz/LwMzGzMzM08zZzN/MYM5mzmzOc855zn/O4M/mz+zP88/5z//PAPgG+Az4E/gZ+B/4gPmG+Yz5k/mZ+Z/5IPsm+yz7M/s5+z/7wPzG/Mz80/zZ/N/8YP5m/mz+c/55/n/+4P/m/+z/8//5////");
  base64DecodeToExistingUint8Array(bufferView, 147310, "//8AACsAgQCsAHkATgAMABIAFwAEACcAtwCQAMAA0gDXAAAABQAeACMAtAC5ANIA1wAAAAkABwAIAAwACwAOAA8=");
  base64DecodeToExistingUint8Array(bufferView, 147384, "fAIAAH0CAAB+AgAAfwIAAIACAACBAgAAza0BAP6tAQAMqgEA6q0BAOCtAQBArQEAcawBAIupAQBHqQEAva0BAJypAQD7qQEADq4BAN6pAQAdrgEAz6kBANKqAQDyrQEA+aoBAEOoAQBGsgEAq68BANqsAQB0qQEAV6oBAPenAQD8qwEAYawBAB+sAQAYqQEA5qoBAB2rAQDbqgEAlKwBANytAQAkqgEAbakBAJatAQCErQEArKwBAH2qAQBBrgEAM6gBAHysAQCeqgEAMq0BAECqAQCHqQEAPLEBAL+oAQDzpwEAi6wBALuqAQBIqAEAQqgBAI6qAQDgpwEAlqoBAP+oAQA6rAEAT7EBAGWpAQBAqwEANasBAOqoAQA6rQEAW6oBAB6oAQC2rAEA6qwBAAypAQBIqwEAK6sBACSsAQCKqgEATqgBAE2oAQDcrAEABKgBAF+qAQCJqAEAWa0BAOinAQB8qwEAPKkBAGqoAQCurQEAXqgBAHqrAQBnqgEALagBAF6nAQDMrAEA9awBABirAQBlrQEAAK0BAE2pAQA3qAEAH60BANWtAQAyqQEAFqgBAISsAQAiqwEARLEBAMKpAQB6rQEACKkBAMasAQBxqwEARKgBAA6tAQA+rAEAc6wBAEqsAQCorQEAC6wBAF6sAQDvrAEArbABAJawAQBvrQEAMrEBAGmnAQCCqgEA8KoB");
  base64DecodeToExistingUint8Array(bufferView, 147932, "iwIAAIwCAACNAgAAiQIAAI4CAACPAgAAkAIAAJECAACSAgAAkwIAAJQCAACVAg==");
  base64DecodeToExistingUint8Array(bufferView, 147988, "lgIAAJcCAACYAgAAmQI=");
  base64DecodeToExistingUint8Array(bufferView, 148012, "mgIAAJoCAACbAgAAnAIAAAAAAABPZmZsaW5lTWVtb3J5QWxsb2NhdGlvbgCA////fwAAAAAAAAD/AAAAAID///9/AACA////fwAAAACA////fwAAgP///38AAAAAAACA////fwAAAID///9/AAAAAAAAAAC1AgAAtgIAAJoCAACaAgAAmgIAAJoC");
  base64DecodeToExistingUint8Array(bufferView, 148160, "twIAALgCAAC5AgAAugIAALsCAAC8Ag==");
  base64DecodeToExistingUint8Array(bufferView, 148192, "xQIAAMYCAADHAg==");
  base64DecodeToExistingUint8Array(bufferView, 148212, "yAIAAMkCAACaAg==");
  base64DecodeToExistingUint8Array(bufferView, 148232, "ygIAAMsCAADMAgAAzQIAAM4CAADPAgAA0AIAANEC");
  base64DecodeToExistingUint8Array(bufferView, 148272, "ygIAAMsCAADMAgAA0gIAANMCAACaAgAAmgIAAJoC");
  base64DecodeToExistingUint8Array(bufferView, 148312, "mgIAAJoCAADMAgAA1AIAANUCAAAAAAAAT7thBWes3T8YLURU+yHpP5v2gdILc+8/GC1EVPsh+T/iZS8ifyt6PAdcFDMmpoE8vcvweogHcDwHXBQzJqaRPBgtRFT7Iek/GC1EVPsh6b/SITN/fNkCQNIhM3982QLA");
  base64DecodeToExistingUint8Array(bufferView, 148447, "gBgtRFT7IQlAGC1EVPshCcD+gitlRxVnQAAAAAAAADhDAAD6/kIudr86O568mvcMvb39/////98/PFRVVVVVxT+RKxfPVVWlPxfQpGcREYE/AAAAAAAAyELvOfr+Qi7mPyTEgv+9v84/tfQM1whrrD/MUEbSq7KDP4Q6Tpvg11U/");
  base64DecodeToExistingUint8Array(bufferView, 148590, "8D9uv4gaTzubPDUz+6k99u8/XdzYnBNgcbxhgHc+muzvP9FmhxB6XpC8hX9u6BXj7z8T9mc1UtKMPHSFFdOw2e8/+o75I4DOi7ze9t0pa9DvP2HI5mFO92A8yJt1GEXH7z+Z0zNb5KOQPIPzxso+vu8/bXuDXaaalzwPiflsWLXvP/zv/ZIatY4890dyK5Ks7z/RnC9wPb4+PKLR0zLso+8/C26QiTQDarwb0/6vZpvvPw69LypSVpW8UVsS0AGT7z9V6k6M74BQvMwxbMC9iu8/FvTVuSPJkbzgLamumoLvP69VXOnj04A8UY6lyJh67z9Ik6XqFRuAvHtRfTy4cu8/PTLeVfAfj7zqjYw4+WrvP79TEz+MiYs8dctv61tj7z8m6xF2nNmWvNRcBITgW+8/YC86PvfsmjyquWgxh1TvP504hsuC54+8Hdn8IlBN7z+Nw6ZEQW+KPNaMYog7Ru8/fQTksAV6gDyW3H2RST/vP5SoqOP9jpY8OGJ1bno47z99SHTyGF6HPD+msk/OMe8/8ucfmCtHgDzdfOJlRSvvP14IcT97uJa8gWP14d8k7z8xqwlt4feCPOHeH/WdHu8/+r9vGpshPbyQ2drQfxjvP7QKDHKCN4s8CwPkpoUS7z+Py86JkhRuPFYvPqmvDO8/tquwTXVNgzwVtzEK/gbvP0x0rOIBQoY8MdhM/HAB7z9K+NNdOd2PPP8WZLII/O4/BFuOO4Cjhrzxn5JfxfbuP2hQS8ztSpK8y6k6N6fx7j+OLVEb+AeZvGbYBW2u7O4/0jaUPujRcbz3n+U02+fuPxUbzrMZGZm85agTwy3j7j9tTCqnSJ+FPCI0Ekym3u4/imkoemASk7wcgKwERdruP1uJF0iPp1i8Ki73IQrW7j8bmklnmyx8vJeoUNn10e4/EazCYO1jQzwtiWFgCM7uP+9kBjsJZpY8VwAd7UHK7j95A6Ha4cxuPNA8wbWixu4/MBIPP47/kzze09fwKsPuP7CvervOkHY8Jyo21dq/7j934FTrvR2TPA3d/ZmyvO4/jqNxADSUj7ynLJ12srnuP0mjk9zM3oe8QmbPotq27j9fOA+9xt54vIJPnVYrtO4/9lx77EYShrwPkl3KpLHuP47X/RgFNZM82ie1Nkev7j8Fm4ovt5h7PP3Hl9QSre4/CVQc4uFjkDwpVEjdB6vuP+rGGVCFxzQ8t0ZZiiap7j81wGQr5jKUPEghrRVvp+4/n3aZYUrkjLwJ3Ha54aXuP6hN7zvFM4y8hVU6sH6k7j+u6SuJeFOEvCDDzDRGo+4/WFhWeN3Ok7wlIlWCOKLuP2QZfoCqEFc8c6lM1FWh7j8oIl6/77OTvM07f2aeoO4/grk0h60Sary/2gt1EqDuP+6pbbjvZ2O8LxplPLKf7j9RiOBUPdyAvISUUfl9n+4/zz5afmQfeLx0X+zodZ/uP7B9i8BK7oa8dIGlSJqf7j+K5lUeMhmGvMlnQlbrn+4/09QJXsuckDw/Xd5PaaDuPx2lTbncMnu8hwHrcxSh7j9rwGdU/eyUPDLBMAHtoe4/VWzWq+HrZTxiTs8286LuP0LPsy/FoYi8Eho+VCek7j80NzvxtmmTvBPOTJmJpe4/Hv8ZOoRegLytxyNGGqfuP25XcthQ1JS87ZJEm9mo7j8Aig5bZ62QPJlmitnHqu4/tOrwwS+3jTzboCpC5azuP//nxZxgtmW8jES1FjKv7j9EX/NZg/Z7PDZ3FZmuse4/gz0epx8Jk7zG/5ELW7TuPykebIu4qV285cXNsDe37j9ZuZB8+SNsvA9SyMtEuu4/qvn0IkNDkrxQTt6fgr3uP0uOZtdsyoW8ugfKcPHA7j8nzpEr/K9xPJDwo4KRxO4/u3MK4TXSbTwjI+MZY8juP2MiYiIExYe8ZeVde2bM7j/VMeLjhhyLPDMtSuyb0O4/Fbu809G7kbxdJT6yA9XuP9Ix7pwxzJA8WLMwE57Z7j+zWnNuhGmEPL/9eVVr3u4/tJ2Ol83fgrx689O/a+PuP4czy5J3Gow8rdNamZ/o7j/62dFKj3uQvGa2jSkH7u4/uq7cVtnDVbz7FU+4ovPuP0D2pj0OpJC8OlnljXL57j80k6049NZovEde+/J2/+4/NYpYa+LukbxKBqEwsAXvP83dXwrX/3Q80sFLkB4M7z+smJL6+72RvAke11vCEu8/swyvMK5uczycUoXdmxnvP5T9n1wy4448etD/X6sg7z+sWQnRj+CEPEvRVy7xJ+8/ZxpOOK/NYzy15waUbS/vP2gZkmwsa2c8aZDv3CA37z/StcyDGIqAvPrDXVULP+8/b/r/P12tj7x8iQdKLUfvP0mpdTiuDZC88okNCIdP7z+nBz2mhaN0PIek+9wYWO8/DyJAIJ6RgryYg8kW42DvP6ySwdVQWo48hTLbA+Zp7z9LawGsWTqEPGC0AfMhc+8/Hz60ByHVgrxfm3szl3zvP8kNRzu5Kom8KaH1FEaG7z/TiDpgBLZ0PPY/i+cukO8/cXKdUezFgzyDTMf7UZrvP/CR048S94+82pCkoq+k7z99dCPimK6NvPFnji1Ir+8/CCCqQbzDjjwnWmHuG7rvPzLrqcOUK4Q8l7prNyvF7z/uhdExqWSKPEBFblt20O8/7eM75Lo3jrwUvpyt/dvvP53NkU07iXc82JCegcHn7z+JzGBBwQVTPPFxjyvC8+8/AAAAAAAA8D90hRXTsNnvPw+J+WxYte8/UVsS0AGT7z97UX08uHLvP6q5aDGHVO8/OGJ1bno47z/h3h/1nR7vPxW3MQr+Bu8/y6k6N6fx7j8iNBJMpt7uPy2JYWAIzu4/Jyo21dq/7j+CT51WK7TuPylUSN0Hq+4/hVU6sH6k7j/NO39mnqDuP3Rf7Oh1n+4/hwHrcxSh7j8TzkyZiaXuP9ugKkLlrO4/5cXNsDe37j+Q8KOCkcTuP10lPrID1e4/rdNamZ/o7j9HXvvydv/uP5xShd2bGe8/aZDv3CA37z+HpPvcGFjvP1+bezOXfO8/2pCkoq+k7z9ARW5bdtDvPwAAAAAAAOhClCORS/hqrD/zxPpQzr/OP9ZSDP9CLuY/AAAAAAAAOEP+gitlRxVHQJQjkUv4arw+88T6UM6/Lj/WUgz/Qi6WPwAAAAAAAAAAAwAAAAQAAAAEAAAABgAAAIP5ogBETm4A/CkVANFXJwDdNPUAYtvAADyZlQBBkEMAY1H+ALveqwC3YcUAOm4kANJNQgBJBuAACeouAByS0QDrHf4AKbEcAOg+pwD1NYIARLsuAJzphAC0JnAAQX5fANaROQBTgzkAnPQ5AItfhAAo+b0A+B87AN7/lwAPmAUAES/vAApaiwBtH20Az342AAnLJwBGT7cAnmY/AC3qXwC6J3UA5evHAD178QD3OQcAklKKAPtr6gAfsV8ACF2NADADVgB7/EYA8KtrACC8zwA29JoA46kdAF5hkQAIG+YAhZllAKAUXwCNQGgAgNj/ACdzTQAGBjEAylYVAMmocwB74mAAa4zAABnERwDNZ8MACejcAFmDKgCLdsQAphyWAESv3QAZV9EApT4FAAUH/wAzfj8AwjLoAJhP3gC7fTIAJj3DAB5r7wCf+F4ANR86AH/yygDxhx0AfJAhAGokfADVbvoAMC13ABU7QwC1FMYAwxmdAK3EwgAsTUEADABdAIZ9RgDjcS0Am8aaADNiAAC00nwAtKeXADdV1QDXPvYAoxAYAE12/ABknSoAcNerAGN8+AB6sFcAFxXnAMBJVgA71tkAp4Q4ACQjywDWincAWlQjAAAfuQDxChsAGc7fAJ8x/wBmHmoAmVdhAKz7RwB+f9gAImW3ADLoiQDmv2AA78TNAGw2CQBdP9QAFt7XAFg73gDem5IA0iIoACiG6ADiWE0AxsoyAAjjFgDgfcsAF8BQAPMdpwAY4FsALhM0AIMSYgCDSAEA9Y5bAK2wfwAe6fIASEpDABBn0wCq3dgArl9CAGphzgAKKKQA05m0AAam8gBcd38Ao8KDAGE8iACKc3gAr4xaAG/XvQAtpmMA9L/LAI2B7wAmwWcAVcpFAMrZNgAoqNIAwmGNABLJdwAEJhQAEkabAMRZxADIxUQATbKRAAAX8wDUQ60AKUnlAP3VEAAAvvwAHpTMAHDO7gATPvUA7PGAALPnwwDH+CgAkwWUAMFxPgAuCbMAC0XzAIgSnACrIHsALrWfAEeSwgB7Mi8ADFVtAHKnkABr5x8AMcuWAHkWSgBBeeIA9N+JAOiUlwDi5oQAmTGXAIjtawBfXzYAu/0OAEiatABnpGwAcXJCAI1dMgCfFbgAvOUJAI0xJQD3dDkAMAUcAA0MAQBLCGgALO5YAEeqkAB05wIAvdYkAPd9pgBuSHIAnxbvAI6UpgC0kfYA0VNRAM8K8gAgmDMA9Ut+ALJjaADdPl8AQF0DAIWJfwBVUikAN2TAAG3YEAAySDIAW0x1AE5x1ABFVG4ACwnBACr1aQAUZtUAJwedAF0EUAC0O9sA6nbFAIf5FwBJa30AHSe6AJZpKQDGzKwArRRUAJDiagCI2YkALHJQAASkvgB3B5QA8zBwAAD8JwDqcagAZsJJAGTgPQCX3YMAoz+XAEOU/QANhowAMUHeAJI5nQDdcIwAF7fnAAjfOwAVNysAXICgAFqAkwAQEZIAD+jYAGyArwDb/0sAOJAPAFkYdgBipRUAYcu7AMeJuQAQQL0A0vIEAEl1JwDrtvYA2yK7AAoUqgCJJi8AZIN2AAk7MwAOlBoAUTqqAB2jwgCv7a4AXCYSAG3CTQAtepwAwFaXAAM/gwAJ8PYAK0CMAG0xmQA5tAcADCAVANjDWwD1ksQAxq1LAE7KpQCnN80A5qk2AKuSlADdQmgAGWPeAHaM7wBoi1IA/Ns3AK6hqwDfFTEAAK6hAAz72gBkTWYA7QW3ACllMABXVr8AR/86AGr5uQB1vvMAKJPfAKuAMABmjPYABMsVAPoiBgDZ5B0APbOkAFcbjwA2zQkATkLpABO+pAAzI7UA8KoaAE9lqADSwaUACz8PAFt4zQAj+XYAe4sEAIkXcgDGplMAb27iAO/rAACbSlgAxNq3AKpmugB2z88A0QIdALHxLQCMmcEAw613AIZI2gD3XaAAxoD0AKzwLwDd7JoAP1y8ANDebQCQxx8AKtu2AKMlOgAAr5oArVOTALZXBAApLbQAS4B+ANoHpwB2qg4Ae1mhABYSKgDcty0A+uX9AInb/gCJvv0A5HZsAAap/AA+gHAAhW4VAP2H/wAoPgcAYWczACoYhgBNveoAs+evAI9tbgCVZzkAMb9bAITXSAAw3xYAxy1DACVhNQDJcM4AMMu4AL9s/QCkAKIABWzkAFrdoAAhb0cAYhLSALlchABwYUkAa1bgAJlSAQBQVTcAHtW3ADPxxAATbl8AXTDkAIUuqQAdssMAoTI2AAi3pADqsdQAFvchAI9p5AAn/3cADAOAAI1ALQBPzaAAIKWZALOi0wAvXQoAtPlCABHaywB9vtAAm9vBAKsXvQDKooEACGpcAC5VFwAnAFUAfxTwAOEHhgAUC2QAlkGNAIe+3gDa/SoAayW2AHuJNAAF8/4Aub+eAGhqTwBKKqgAT8RaAC34vADXWpgA9MeVAA1NjQAgOqYApFdfABQ/sQCAOJUAzCABAHHdhgDJ3rYAv2D1AE1lEQABB2sAjLCsALLA0ABRVUgAHvsOAJVywwCjBjsAwEA1AAbcewDgRcwATin6ANbKyADo80EAfGTeAJtk2ADZvjEApJfDAHdY1ABp48UA8NoTALo6PABGGEYAVXVfANK99QBuksYArC5dAA5E7QAcPkIAYcSHACn96QDn1vMAInzKAG+RNQAI4MUA/9eNAG5q4gCw/cYAkwjBAHxddABrrbIAzW6dAD5yewDGEWoA98+pAClz3wC1yboAtwBRAOKyDQB0uiQA5X1gAHTYigANFSwAgRgMAH5mlAABKRYAn3p2AP39vgBWRe8A2X42AOzZEwCLurkAxJf8ADGoJwDxbsMAlMU2ANioVgC0qLUAz8wOABKJLQBvVzQALFaJAJnO4wDWILkAa16qAD4qnAARX8wA/QtKAOH0+wCOO20A4oYsAOnUhAD8tKkA7+7RAC41yQAvOWEAOCFEABvZyACB/AoA+0pqAC8c2ABTtIQATpmMAFQizAAqVdwAwMbWAAsZlgAacLgAaZVkACZaYAA/Uu4AfxEPAPS1EQD8y/UANLwtADS87gDoXcwA3V5gAGeOmwCSM+8AyRe4AGFYmwDhV7wAUYPGANg+EADdcUgALRzdAK8YoQAhLEYAWfPXANl6mACeVMAAT4b6AFYG/ADlea4AiSI2ADitIgBnk9wAVeiqAIImOADK55sAUQ2kAJkzsQCp1w4AaQVIAGWy8AB/iKcAiEyXAPnRNgAhkrMAe4JKAJjPIQBAn9wA3EdVAOF0OgBn60IA/p3fAF7UXwB7Z6QAuqx6AFX2ogAriCMAQbpVAFluCAAhKoYAOUeDAInj5gDlntQASftAAP9W6QAcD8oAxVmKAJT6KwDTwcUAD8XPANtargBHxYYAhUNiACGGOwAseZQAEGGHACpMewCALBoAQ78SAIgmkAB4PIkAqMTkAOXbewDEOsIAJvTqAPdnigANkr8AZaMrAD2TsQC9fAsApFHcACfdYwBp4d0AmpQZAKgplQBozigACe20AESfIABOmMoAcIJjAH58IwAPuTIAp/WOABRW5wAh8QgAtZ0qAG9+TQClGVEAtfmrAILf1gCW3WEAFjYCAMQ6nwCDoqEAcu1tADmNegCCuKkAazJcAEYnWwAANO0A0gB3APz0VQABWU0A4HGA");
  base64DecodeToExistingUint8Array(bufferView, 153747, "QPsh+T8AAAAALUR0PgAAAICYRvg8AAAAYFHMeDsAAACAgxvwOQAAAEAgJXo4AAAAgCKC4zYAAAAAHfNpNQ==");
  base64DecodeToExistingUint8Array(bufferView, 153809, "gAEAffsBAO++rd6+uv7KFf//AP//////////AQAgA9AHAAAEAAAACgAAACADAADg/P//6AMAAIs8AgC7PAIAHvMBAB0AAAAF");
  base64DecodeToExistingUint8Array(bufferView, 153892, "1gI=");
  base64DecodeToExistingUint8Array(bufferView, 153916, "1wIAANgCAADYPQU=");
  base64DecodeToExistingUint8Array(bufferView, 153940, "Ag==");
  base64DecodeToExistingUint8Array(bufferView, 153956, "//////////8=");
  base64DecodeToExistingUint8Array(bufferView, 154024, "GFkC");
}

  var scratchBuffer = new ArrayBuffer(16);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[2] = value;
  }
      
function asmFunc(env) {
 var memory = env.memory;
 var buffer = memory.buffer;
 var HEAP8 = new Int8Array(buffer);
 var HEAP16 = new Int16Array(buffer);
 var HEAP32 = new Int32Array(buffer);
 var HEAPU8 = new Uint8Array(buffer);
 var HEAPU16 = new Uint16Array(buffer);
 var HEAPU32 = new Uint32Array(buffer);
 var HEAPF32 = new Float32Array(buffer);
 var HEAPF64 = new Float64Array(buffer);
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var abort = env.abort;
 var nan = NaN;
 var infinity = Infinity;
 var emscripten_asm_const_int = env.emscripten_asm_const_int;
 var emscripten_asm_const_double = env.emscripten_asm_const_double;
 var abort = env.abort;
 var __wasi_fd_close = env.fd_close;
 var __wasi_fd_write = env.fd_write;
 var setTempRet0 = env.setTempRet0;
 var legalimport$__wasi_fd_seek = env.fd_seek;
 var __stack_pointer = 5586416;
 var __stack_end = 0;
 var __stack_base = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
function jswCallFunctionHack($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $5 = __stack_pointer - 560 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 552 >> 2] = $0;
 HEAP16[$5 + 550 >> 1] = $1;
 HEAP32[$5 + 544 >> 2] = $2;
 HEAP32[$5 + 540 >> 2] = $3;
 HEAP32[$5 + 536 >> 2] = $4;
 label$1: {
  label$2: {
   label$3: {
    label$4: {
     label$5: {
      label$6: {
       label$7: {
        label$8: {
         label$9: {
          label$10: {
           label$11: {
            label$12: {
             label$13: {
              label$14: {
               label$15: {
                label$16: {
                 label$17: {
                  label$18: {
                   label$19: {
                    label$20: {
                     label$21: {
                      label$22: {
                       label$23: {
                        label$24: {
                         label$25: {
                          label$26: {
                           label$27: {
                            label$28: {
                             label$29: {
                              label$30: {
                               label$31: {
                                label$32: {
                                 label$33: {
                                  label$34: {
                                   label$35: {
                                    label$36: {
                                     label$37: {
                                      label$38: {
                                       label$39: {
                                        label$40: {
                                         label$41: {
                                          label$42: {
                                           label$43: {
                                            label$44: {
                                             label$45: {
                                              label$46: {
                                               label$47: {
                                                label$48: {
                                                 label$49: {
                                                  label$50: {
                                                   label$51: {
                                                    label$52: {
                                                     label$53: {
                                                      label$54: {
                                                       label$55: {
                                                        label$56: {
                                                         label$57: {
                                                          label$58: {
                                                           label$59: {
                                                            label$60: {
                                                             label$61: {
                                                              label$62: {
                                                               label$63: {
                                                                label$64: {
                                                                 label$65: {
                                                                  label$66: {
                                                                   label$67: {
                                                                    label$68: {
                                                                     label$69: {
                                                                      label$70: {
                                                                       label$71: {
                                                                        label$72: {
                                                                         label$73: {
                                                                          label$74: {
                                                                           label$75: {
                                                                            label$76: {
                                                                             label$77: {
                                                                              label$78: {
                                                                               label$79: {
                                                                                label$80: {
                                                                                 label$81: {
                                                                                  label$82: {
                                                                                   label$83: {
                                                                                    label$84: {
                                                                                     label$85: {
                                                                                      label$86: {
                                                                                       label$87: {
                                                                                        label$88: {
                                                                                         label$89: {
                                                                                          label$90: {
                                                                                           label$91: {
                                                                                            label$92: {
                                                                                             label$93: {
                                                                                              label$94: {
                                                                                               label$95: {
                                                                                                label$96: {
                                                                                                 label$97: {
                                                                                                  label$98: {
                                                                                                   label$99: {
                                                                                                    label$100: {
                                                                                                     label$101: {
                                                                                                      label$102: {
                                                                                                       label$103: {
                                                                                                        label$104: {
                                                                                                         label$105: {
                                                                                                          label$106: {
                                                                                                           label$107: {
                                                                                                            label$108: {
                                                                                                             label$109: {
                                                                                                              label$110: {
                                                                                                               label$111: {
                                                                                                                label$112: {
                                                                                                                 label$113: {
                                                                                                                  label$114: {
                                                                                                                   label$115: {
                                                                                                                    label$116: {
                                                                                                                     label$117: {
                                                                                                                      label$118: {
                                                                                                                       label$119: {
                                                                                                                        label$120: {
                                                                                                                         label$121: {
                                                                                                                          label$122: {
                                                                                                                           $0 = HEAPU16[$5 + 550 >> 1];
                                                                                                                           if ($0) {
                                                                                                                            if (($0 | 0) == 1) {
                                                                                                                             break label$116;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 3) {
                                                                                                                             break label$114;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 4) {
                                                                                                                             break label$111;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 7) {
                                                                                                                             break label$83;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 8) {
                                                                                                                             break label$117;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 9) {
                                                                                                                             break label$110;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 11) {
                                                                                                                             break label$92;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 12) {
                                                                                                                             break label$50;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 15) {
                                                                                                                             break label$75;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 16) {
                                                                                                                             break label$74;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 17) {
                                                                                                                             break label$103;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 23) {
                                                                                                                             break label$59;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 24) {
                                                                                                                             break label$119;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 25) {
                                                                                                                             break label$23;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 28) {
                                                                                                                             break label$24;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 32) {
                                                                                                                             break label$115;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 33) {
                                                                                                                             break label$89;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 36) {
                                                                                                                             break label$49;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 41) {
                                                                                                                             break label$35;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 47) {
                                                                                                                             break label$39;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 56) {
                                                                                                                             break label$118;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 57) {
                                                                                                                             break label$61;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 60) {
                                                                                                                             break label$58;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 63) {
                                                                                                                             break label$63;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 72) {
                                                                                                                             break label$106;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 73) {
                                                                                                                             break label$105;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 75) {
                                                                                                                             break label$25;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 91) {
                                                                                                                             break label$112;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 96) {
                                                                                                                             break label$113;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 97) {
                                                                                                                             break label$19;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 120) {
                                                                                                                             break label$53;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 136) {
                                                                                                                             break label$43;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 200) {
                                                                                                                             break label$51;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 201) {
                                                                                                                             break label$27;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 204) {
                                                                                                                             break label$47;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 264) {
                                                                                                                             break label$42;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 265) {
                                                                                                                             break label$48;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 288) {
                                                                                                                             break label$109;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 289) {
                                                                                                                             break label$108;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 456) {
                                                                                                                             break label$40;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 463) {
                                                                                                                             break label$56;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 481) {
                                                                                                                             break label$107;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 511) {
                                                                                                                             break label$62;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 584) {
                                                                                                                             break label$52;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 585) {
                                                                                                                             break label$73;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 609) {
                                                                                                                             break label$57;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 744) {
                                                                                                                             break label$37;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 841) {
                                                                                                                             break label$34;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 1e3) {
                                                                                                                             break label$38;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 1481) {
                                                                                                                             break label$41;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 1608) {
                                                                                                                             break label$54;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 1609) {
                                                                                                                             break label$45;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 1640) {
                                                                                                                             break label$36;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 2127) {
                                                                                                                             break label$55;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 2313) {
                                                                                                                             break label$87;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 4095) {
                                                                                                                             break label$60;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 6433) {
                                                                                                                             break label$17;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 16968) {
                                                                                                                             break label$46;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 18507) {
                                                                                                                             break label$26;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 20473) {
                                                                                                                             break label$44;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 28673) {
                                                                                                                             break label$104;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 28676) {
                                                                                                                             break label$70;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 28677) {
                                                                                                                             break label$120;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 28679) {
                                                                                                                             break label$72;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 32768) {
                                                                                                                             break label$121;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 32769) {
                                                                                                                             break label$97;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 32771) {
                                                                                                                             break label$122;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 32772) {
                                                                                                                             break label$82;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 32775) {
                                                                                                                             break label$81;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 32776) {
                                                                                                                             break label$67;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 32777) {
                                                                                                                             break label$102;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 32779) {
                                                                                                                             break label$69;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 32780) {
                                                                                                                             break label$8;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 32784) {
                                                                                                                             break label$28;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 32785) {
                                                                                                                             break label$91;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 32788) {
                                                                                                                             break label$98;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 32792) {
                                                                                                                             break label$33;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 32793) {
                                                                                                                             break label$16;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 32801) {
                                                                                                                             break label$71;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 32807) {
                                                                                                                             break label$76;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 32831) {
                                                                                                                             break label$80;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 32840) {
                                                                                                                             break label$95;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 32841) {
                                                                                                                             break label$96;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 32843) {
                                                                                                                             break label$64;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 32844) {
                                                                                                                             break label$65;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 32856) {
                                                                                                                             break label$31;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 32865) {
                                                                                                                             break label$93;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 32871) {
                                                                                                                             break label$77;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 32888) {
                                                                                                                             break label$30;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 32904) {
                                                                                                                             break label$68;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 32905) {
                                                                                                                             break label$66;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 32968) {
                                                                                                                             break label$29;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 32969) {
                                                                                                                             break label$4;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 32993) {
                                                                                                                             break label$85;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 33032) {
                                                                                                                             break label$86;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 33033) {
                                                                                                                             break label$100;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 33035) {
                                                                                                                             break label$99;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 33057) {
                                                                                                                             break label$5;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 33060) {
                                                                                                                             break label$13;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 33097) {
                                                                                                                             break label$22;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 33240) {
                                                                                                                             break label$32;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 33353) {
                                                                                                                             break label$10;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 33356) {
                                                                                                                             break label$11;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 33383) {
                                                                                                                             break label$78;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 33545) {
                                                                                                                             break label$90;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 33569) {
                                                                                                                             break label$12;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 33768) {
                                                                                                                             break label$18;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 33889) {
                                                                                                                             break label$94;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 34400) {
                                                                                                                             break label$84;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 35105) {
                                                                                                                             break label$20;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 37479) {
                                                                                                                             break label$79;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 39177) {
                                                                                                                             break label$3;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 47369) {
                                                                                                                             break label$7;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 49929) {
                                                                                                                             break label$9;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 51465) {
                                                                                                                             break label$15;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 51489) {
                                                                                                                             break label$14;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 55560) {
                                                                                                                             break label$21;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 61441) {
                                                                                                                             break label$101;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 61444) {
                                                                                                                             break label$88;
                                                                                                                            }
                                                                                                                            if (($0 | 0) == 65529) {
                                                                                                                             break label$6;
                                                                                                                            }
                                                                                                                            break label$2;
                                                                                                                           }
                                                                                                                           HEAP32[$5 + 532 >> 2] = 0;
                                                                                                                           FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]]();
                                                                                                                           HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 532 >> 2];
                                                                                                                           break label$1;
                                                                                                                          }
                                                                                                                          HEAP32[$5 + 528 >> 2] = 0;
                                                                                                                          HEAP32[$5 + 528 >> 2] = jsvNewFromBool(FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]](HEAP32[$5 + 544 >> 2]) & 1);
                                                                                                                          HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 528 >> 2];
                                                                                                                          break label$1;
                                                                                                                         }
                                                                                                                         HEAP32[$5 + 524 >> 2] = 0;
                                                                                                                         FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]](HEAP32[$5 + 544 >> 2]);
                                                                                                                         HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 524 >> 2];
                                                                                                                         break label$1;
                                                                                                                        }
                                                                                                                        HEAP32[$5 + 520 >> 2] = 0;
                                                                                                                        HEAP32[$5 + 520 >> 2] = jsvNewFromPin(FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]]() & 255);
                                                                                                                        HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 520 >> 2];
                                                                                                                        break label$1;
                                                                                                                       }
                                                                                                                       HEAP32[$5 + 516 >> 2] = 0;
                                                                                                                       $0 = HEAP32[$5 + 552 >> 2];
                                                                                                                       if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                                                        $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                                                       } else {
                                                                                                                        $1 = 0;
                                                                                                                       }
                                                                                                                       FUNCTION_TABLE[$0 | 0](jsvGetBool($1) & 1);
                                                                                                                       HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 516 >> 2];
                                                                                                                       break label$1;
                                                                                                                      }
                                                                                                                      HEAP32[$5 + 512 >> 2] = 0;
                                                                                                                      $0 = HEAP32[$5 + 552 >> 2];
                                                                                                                      if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                                                       $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                                                      } else {
                                                                                                                       $1 = 0;
                                                                                                                      }
                                                                                                                      FUNCTION_TABLE[$0 | 0](jsvGetFloat($1));
                                                                                                                      HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 512 >> 2];
                                                                                                                      break label$1;
                                                                                                                     }
                                                                                                                     HEAP32[$5 + 508 >> 2] = 0;
                                                                                                                     $0 = HEAP32[$5 + 552 >> 2];
                                                                                                                     if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                                                      $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                                                     } else {
                                                                                                                      $1 = 0;
                                                                                                                     }
                                                                                                                     FUNCTION_TABLE[$0 | 0]($1);
                                                                                                                     HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 508 >> 2];
                                                                                                                     break label$1;
                                                                                                                    }
                                                                                                                    HEAP32[$5 + 504 >> 2] = 0;
                                                                                                                    HEAP32[$5 + 504 >> 2] = FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]]();
                                                                                                                    HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 504 >> 2];
                                                                                                                    break label$1;
                                                                                                                   }
                                                                                                                   HEAP32[$5 + 500 >> 2] = 0;
                                                                                                                   $0 = HEAP32[$5 + 552 >> 2];
                                                                                                                   if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                                                    $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                                                   } else {
                                                                                                                    $1 = 0;
                                                                                                                   }
                                                                                                                   FUNCTION_TABLE[$0 | 0](jsvGetInteger($1));
                                                                                                                   HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 500 >> 2];
                                                                                                                   break label$1;
                                                                                                                  }
                                                                                                                  HEAP32[$5 + 496 >> 2] = 0;
                                                                                                                  HEAP32[$5 + 496 >> 2] = jsvNewFromBool(FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]]() & 1);
                                                                                                                  HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 496 >> 2];
                                                                                                                  break label$1;
                                                                                                                 }
                                                                                                                 HEAP32[$5 + 492 >> 2] = 0;
                                                                                                                 $1 = HEAP32[$5 + 552 >> 2];
                                                                                                                 if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                                                  $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                                                 } else {
                                                                                                                  $0 = 0;
                                                                                                                 }
                                                                                                                 $0 = jsvGetInteger($0);
                                                                                                                 if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                                                                  $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                                                                 } else {
                                                                                                                  $2 = 0;
                                                                                                                 }
                                                                                                                 FUNCTION_TABLE[$1 | 0]($0, $2);
                                                                                                                 HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 492 >> 2];
                                                                                                                 break label$1;
                                                                                                                }
                                                                                                                HEAP32[$5 + 488 >> 2] = 0;
                                                                                                                $1 = HEAP32[$5 + 552 >> 2];
                                                                                                                if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                                                 $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                                                } else {
                                                                                                                 $0 = 0;
                                                                                                                }
                                                                                                                $0 = jsvGetBool($0) & 1;
                                                                                                                if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                                                                 $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                                                                } else {
                                                                                                                 $2 = 0;
                                                                                                                }
                                                                                                                HEAP32[$5 + 488 >> 2] = jsvNewFromBool(FUNCTION_TABLE[$1 | 0]($0, $2) & 1);
                                                                                                                HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 488 >> 2];
                                                                                                                break label$1;
                                                                                                               }
                                                                                                               HEAP32[$5 + 484 >> 2] = 0;
                                                                                                               HEAP32[$5 + 484 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]]() | 0);
                                                                                                               HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 484 >> 2];
                                                                                                               break label$1;
                                                                                                              }
                                                                                                              HEAP32[$5 + 480 >> 2] = 0;
                                                                                                              $0 = HEAP32[$5 + 552 >> 2];
                                                                                                              if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                                               $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                                              } else {
                                                                                                               $1 = 0;
                                                                                                              }
                                                                                                              HEAP32[$5 + 480 >> 2] = FUNCTION_TABLE[$0 | 0]($1);
                                                                                                              HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 480 >> 2];
                                                                                                              break label$1;
                                                                                                             }
                                                                                                             HEAP32[$5 + 476 >> 2] = 0;
                                                                                                             $1 = HEAP32[$5 + 552 >> 2];
                                                                                                             if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                                              $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                                             } else {
                                                                                                              $0 = 0;
                                                                                                             }
                                                                                                             $0 = jsvGetInteger($0);
                                                                                                             if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                                                              $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                                                             } else {
                                                                                                              $2 = 0;
                                                                                                             }
                                                                                                             FUNCTION_TABLE[$1 | 0]($0, jsvGetInteger($2));
                                                                                                             HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 476 >> 2];
                                                                                                             break label$1;
                                                                                                            }
                                                                                                            HEAP32[$5 + 472 >> 2] = 0;
                                                                                                            $1 = HEAP32[$5 + 552 >> 2];
                                                                                                            if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                                             $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                                            } else {
                                                                                                             $0 = 0;
                                                                                                            }
                                                                                                            $0 = jsvGetInteger($0);
                                                                                                            if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                                                             $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                                                            } else {
                                                                                                             $2 = 0;
                                                                                                            }
                                                                                                            HEAP32[$5 + 472 >> 2] = FUNCTION_TABLE[$1 | 0]($0, jsvGetInteger($2));
                                                                                                            HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 472 >> 2];
                                                                                                            break label$1;
                                                                                                           }
                                                                                                           HEAP32[$5 + 468 >> 2] = 0;
                                                                                                           $1 = HEAP32[$5 + 552 >> 2];
                                                                                                           if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                                            $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                                           } else {
                                                                                                            $0 = 0;
                                                                                                           }
                                                                                                           $0 = jsvGetInteger($0);
                                                                                                           if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                                                            $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                                                           } else {
                                                                                                            $2 = 0;
                                                                                                           }
                                                                                                           HEAP32[$5 + 468 >> 2] = FUNCTION_TABLE[$1 | 0]($0, jsvGetFloat($2));
                                                                                                           HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 468 >> 2];
                                                                                                           break label$1;
                                                                                                          }
                                                                                                          HEAP32[$5 + 464 >> 2] = 0;
                                                                                                          $1 = HEAP32[$5 + 552 >> 2];
                                                                                                          if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                                           $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                                          } else {
                                                                                                           $0 = 0;
                                                                                                          }
                                                                                                          if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                                                           $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                                                          } else {
                                                                                                           $2 = 0;
                                                                                                          }
                                                                                                          FUNCTION_TABLE[$1 | 0]($0, $2);
                                                                                                          HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 464 >> 2];
                                                                                                          break label$1;
                                                                                                         }
                                                                                                         HEAP32[$5 + 460 >> 2] = 0;
                                                                                                         $1 = HEAP32[$5 + 552 >> 2];
                                                                                                         if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                                          $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                                         } else {
                                                                                                          $0 = 0;
                                                                                                         }
                                                                                                         if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                                                          $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                                                         } else {
                                                                                                          $2 = 0;
                                                                                                         }
                                                                                                         HEAP32[$5 + 460 >> 2] = FUNCTION_TABLE[$1 | 0]($0, $2);
                                                                                                         HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 460 >> 2];
                                                                                                         break label$1;
                                                                                                        }
                                                                                                        HEAP32[$5 + 456 >> 2] = 0;
                                                                                                        HEAP32[$5 + 456 >> 2] = FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]]();
                                                                                                        HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 456 >> 2];
                                                                                                        break label$1;
                                                                                                       }
                                                                                                       HEAP32[$5 + 452 >> 2] = 0;
                                                                                                       label$162: {
                                                                                                        if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                                         $0 = jsvNewArray(HEAP32[$5 + 540 >> 2], HEAP32[$5 + 536 >> 2]);
                                                                                                         break label$162;
                                                                                                        }
                                                                                                        $0 = jsvNewEmptyArray();
                                                                                                       }
                                                                                                       HEAP32[$5 + 448 >> 2] = $0;
                                                                                                       HEAP32[$5 + 452 >> 2] = FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]](HEAP32[$5 + 448 >> 2]);
                                                                                                       jsvUnLock(HEAP32[$5 + 448 >> 2]);
                                                                                                       HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 452 >> 2];
                                                                                                       break label$1;
                                                                                                      }
                                                                                                      HEAP32[$5 + 444 >> 2] = 0;
                                                                                                      $1 = HEAP32[$5 + 552 >> 2];
                                                                                                      $0 = HEAP32[$5 + 544 >> 2];
                                                                                                      if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                                       $2 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                                      } else {
                                                                                                       $2 = 0;
                                                                                                      }
                                                                                                      HEAP32[$5 + 444 >> 2] = FUNCTION_TABLE[$1 | 0]($0, $2);
                                                                                                      HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 444 >> 2];
                                                                                                      break label$1;
                                                                                                     }
                                                                                                     HEAP32[$5 + 440 >> 2] = 0;
                                                                                                     HEAP32[$5 + 440 >> 2] = FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]](HEAP32[$5 + 544 >> 2]);
                                                                                                     HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 440 >> 2];
                                                                                                     break label$1;
                                                                                                    }
                                                                                                    HEAP32[$5 + 436 >> 2] = 0;
                                                                                                    $2 = HEAP32[$5 + 552 >> 2];
                                                                                                    $1 = HEAP32[$5 + 544 >> 2];
                                                                                                    if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                                     $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                                    } else {
                                                                                                     $0 = 0;
                                                                                                    }
                                                                                                    if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                                                     $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                                                    } else {
                                                                                                     $3 = 0;
                                                                                                    }
                                                                                                    HEAP32[$5 + 436 >> 2] = FUNCTION_TABLE[$2 | 0]($1, $0, jsvGetInteger($3));
                                                                                                    HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 436 >> 2];
                                                                                                    break label$1;
                                                                                                   }
                                                                                                   HEAP32[$5 + 432 >> 2] = 0;
                                                                                                   $2 = HEAP32[$5 + 552 >> 2];
                                                                                                   $1 = HEAP32[$5 + 544 >> 2];
                                                                                                   if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                                    $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                                   } else {
                                                                                                    $0 = 0;
                                                                                                   }
                                                                                                   if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                                                    $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                                                   } else {
                                                                                                    $3 = 0;
                                                                                                   }
                                                                                                   HEAP32[$5 + 432 >> 2] = jsvNewFromBool(FUNCTION_TABLE[$2 | 0]($1, $0, jsvGetInteger($3)) & 1);
                                                                                                   HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 432 >> 2];
                                                                                                   break label$1;
                                                                                                  }
                                                                                                  HEAP32[$5 + 428 >> 2] = 0;
                                                                                                  label$174: {
                                                                                                   if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                                    $0 = jsvNewArray(HEAP32[$5 + 540 >> 2], HEAP32[$5 + 536 >> 2]);
                                                                                                    break label$174;
                                                                                                   }
                                                                                                   $0 = jsvNewEmptyArray();
                                                                                                  }
                                                                                                  HEAP32[$5 + 424 >> 2] = $0;
                                                                                                  HEAP32[$5 + 428 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]](HEAP32[$5 + 544 >> 2], HEAP32[$5 + 424 >> 2]) | 0);
                                                                                                  jsvUnLock(HEAP32[$5 + 424 >> 2]);
                                                                                                  HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 428 >> 2];
                                                                                                  break label$1;
                                                                                                 }
                                                                                                 HEAP32[$5 + 420 >> 2] = 0;
                                                                                                 HEAP32[$5 + 420 >> 2] = FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]](HEAP32[$5 + 544 >> 2]);
                                                                                                 HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 420 >> 2];
                                                                                                 break label$1;
                                                                                                }
                                                                                                HEAP32[$5 + 416 >> 2] = 0;
                                                                                                $2 = HEAP32[$5 + 552 >> 2];
                                                                                                $1 = HEAP32[$5 + 544 >> 2];
                                                                                                if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                                 $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                                } else {
                                                                                                 $0 = 0;
                                                                                                }
                                                                                                if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                                                 $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                                                } else {
                                                                                                 $3 = 0;
                                                                                                }
                                                                                                HEAP32[$5 + 416 >> 2] = FUNCTION_TABLE[$2 | 0]($1, $0, $3);
                                                                                                HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 416 >> 2];
                                                                                                break label$1;
                                                                                               }
                                                                                               HEAP32[$5 + 412 >> 2] = 0;
                                                                                               $2 = HEAP32[$5 + 552 >> 2];
                                                                                               $1 = HEAP32[$5 + 544 >> 2];
                                                                                               if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                                $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                               } else {
                                                                                                $0 = 0;
                                                                                               }
                                                                                               if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                                                $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                                               } else {
                                                                                                $3 = 0;
                                                                                               }
                                                                                               FUNCTION_TABLE[$2 | 0]($1, $0, $3);
                                                                                               HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 412 >> 2];
                                                                                               break label$1;
                                                                                              }
                                                                                              HEAP32[$5 + 408 >> 2] = 0;
                                                                                              label$184: {
                                                                                               if (HEAP32[$5 + 536 >> 2] > 2) {
                                                                                                $0 = jsvNewArray(HEAP32[$5 + 540 >> 2] + 8 | 0, HEAP32[$5 + 536 >> 2] - 2 | 0);
                                                                                                break label$184;
                                                                                               }
                                                                                               $0 = jsvNewEmptyArray();
                                                                                              }
                                                                                              HEAP32[$5 + 404 >> 2] = $0;
                                                                                              $2 = HEAP32[$5 + 552 >> 2];
                                                                                              $1 = HEAP32[$5 + 544 >> 2];
                                                                                              if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                               $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                              } else {
                                                                                               $0 = 0;
                                                                                              }
                                                                                              $0 = jsvGetInteger($0);
                                                                                              if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                                               $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                                              } else {
                                                                                               $3 = 0;
                                                                                              }
                                                                                              HEAP32[$5 + 408 >> 2] = FUNCTION_TABLE[$2 | 0]($1, $0, $3, HEAP32[$5 + 404 >> 2]);
                                                                                              jsvUnLock(HEAP32[$5 + 404 >> 2]);
                                                                                              HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 408 >> 2];
                                                                                              break label$1;
                                                                                             }
                                                                                             HEAP32[$5 + 400 >> 2] = 0;
                                                                                             $2 = HEAP32[$5 + 552 >> 2];
                                                                                             $1 = HEAP32[$5 + 544 >> 2];
                                                                                             if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                              $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                             } else {
                                                                                              $0 = 0;
                                                                                             }
                                                                                             $0 = jsvGetInteger($0);
                                                                                             if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                                              $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                                             } else {
                                                                                              $3 = 0;
                                                                                             }
                                                                                             HEAP32[$5 + 400 >> 2] = FUNCTION_TABLE[$2 | 0]($1, $0, $3);
                                                                                             HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 400 >> 2];
                                                                                             break label$1;
                                                                                            }
                                                                                            HEAP32[$5 + 396 >> 2] = 0;
                                                                                            $0 = HEAP32[$5 + 552 >> 2];
                                                                                            if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                             $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                            } else {
                                                                                             $1 = 0;
                                                                                            }
                                                                                            HEAP32[$5 + 396 >> 2] = jsvNewFromBool(FUNCTION_TABLE[$0 | 0]($1) & 1);
                                                                                            HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 396 >> 2];
                                                                                            break label$1;
                                                                                           }
                                                                                           HEAP32[$5 + 392 >> 2] = 0;
                                                                                           label$196: {
                                                                                            if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                             $0 = jsvNewArray(HEAP32[$5 + 540 >> 2], HEAP32[$5 + 536 >> 2]);
                                                                                             break label$196;
                                                                                            }
                                                                                            $0 = jsvNewEmptyArray();
                                                                                           }
                                                                                           HEAP32[$5 + 388 >> 2] = $0;
                                                                                           HEAP32[$5 + 392 >> 2] = FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]](HEAP32[$5 + 544 >> 2], HEAP32[$5 + 388 >> 2]);
                                                                                           jsvUnLock(HEAP32[$5 + 388 >> 2]);
                                                                                           HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 392 >> 2];
                                                                                           break label$1;
                                                                                          }
                                                                                          HEAP32[$5 + 384 >> 2] = 0;
                                                                                          $3 = HEAP32[$5 + 552 >> 2];
                                                                                          $2 = HEAP32[$5 + 544 >> 2];
                                                                                          if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                           $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                          } else {
                                                                                           $0 = 0;
                                                                                          }
                                                                                          if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                                           $1 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                                          } else {
                                                                                           $1 = 0;
                                                                                          }
                                                                                          $1 = jsvGetInteger($1);
                                                                                          if (HEAP32[$5 + 536 >> 2] > 2) {
                                                                                           $4 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                                                                                          } else {
                                                                                           $4 = 0;
                                                                                          }
                                                                                          HEAP32[$5 + 384 >> 2] = FUNCTION_TABLE[$3 | 0]($2, $0, $1, $4);
                                                                                          HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 384 >> 2];
                                                                                          break label$1;
                                                                                         }
                                                                                         HEAP32[$5 + 380 >> 2] = 0;
                                                                                         $0 = HEAP32[$5 + 552 >> 2];
                                                                                         if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                          $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                         } else {
                                                                                          $1 = 0;
                                                                                         }
                                                                                         HEAP32[$5 + 380 >> 2] = FUNCTION_TABLE[$0 | 0](jsvGetInteger($1));
                                                                                         HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 380 >> 2];
                                                                                         break label$1;
                                                                                        }
                                                                                        HEAP32[$5 + 376 >> 2] = 0;
                                                                                        HEAP32[$5 + 376 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]](HEAP32[$5 + 544 >> 2]) | 0);
                                                                                        HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 376 >> 2];
                                                                                        break label$1;
                                                                                       }
                                                                                       HEAP32[$5 + 372 >> 2] = 0;
                                                                                       $2 = HEAP32[$5 + 552 >> 2];
                                                                                       if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                        $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                       } else {
                                                                                        $0 = 0;
                                                                                       }
                                                                                       if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                                        $1 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                                       } else {
                                                                                        $1 = 0;
                                                                                       }
                                                                                       $1 = jsvGetInteger($1);
                                                                                       if (HEAP32[$5 + 536 >> 2] > 2) {
                                                                                        $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                                                                                       } else {
                                                                                        $3 = 0;
                                                                                       }
                                                                                       HEAP32[$5 + 372 >> 2] = FUNCTION_TABLE[$2 | 0]($0, $1, jsvGetInteger($3));
                                                                                       HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 372 >> 2];
                                                                                       break label$1;
                                                                                      }
                                                                                      HEAP32[$5 + 368 >> 2] = 0;
                                                                                      $2 = HEAP32[$5 + 552 >> 2];
                                                                                      $1 = HEAP32[$5 + 544 >> 2];
                                                                                      if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                       $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                      } else {
                                                                                       $0 = 0;
                                                                                      }
                                                                                      if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                                       $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                                      } else {
                                                                                       $3 = 0;
                                                                                      }
                                                                                      FUNCTION_TABLE[$2 | 0]($1, $0, jsvGetInteger($3));
                                                                                      HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 368 >> 2];
                                                                                      break label$1;
                                                                                     }
                                                                                     HEAP32[$5 + 364 >> 2] = 0;
                                                                                     $2 = HEAP32[$5 + 552 >> 2];
                                                                                     $1 = HEAP32[$5 + 544 >> 2];
                                                                                     if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                      $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                     } else {
                                                                                      $0 = 0;
                                                                                     }
                                                                                     $0 = jsvGetInteger($0);
                                                                                     if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                                      $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                                     } else {
                                                                                      $3 = 0;
                                                                                     }
                                                                                     HEAP32[$5 + 364 >> 2] = FUNCTION_TABLE[$2 | 0]($1, $0, jsvGetBool($3) & 1);
                                                                                     HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 364 >> 2];
                                                                                     break label$1;
                                                                                    }
                                                                                    HEAP32[$5 + 360 >> 2] = 0;
                                                                                    $3 = HEAP32[$5 + 552 >> 2];
                                                                                    $2 = HEAP32[$5 + 544 >> 2];
                                                                                    if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                     $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                    } else {
                                                                                     $0 = 0;
                                                                                    }
                                                                                    $1 = jsvGetInteger($0);
                                                                                    if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                                     $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                                    } else {
                                                                                     $0 = 0;
                                                                                    }
                                                                                    if (HEAP32[$5 + 536 >> 2] > 2) {
                                                                                     $4 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                                                                                    } else {
                                                                                     $4 = 0;
                                                                                    }
                                                                                    FUNCTION_TABLE[$3 | 0]($2, $1, $0, jsvGetBool($4) & 1);
                                                                                    HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 360 >> 2];
                                                                                    break label$1;
                                                                                   }
                                                                                   HEAP32[$5 + 356 >> 2] = 0;
                                                                                   HEAP32[$5 + 356 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]]());
                                                                                   HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 356 >> 2];
                                                                                   break label$1;
                                                                                  }
                                                                                  HEAP32[$5 + 352 >> 2] = 0;
                                                                                  HEAP32[$5 + 352 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]](HEAP32[$5 + 544 >> 2]) | 0);
                                                                                  HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 352 >> 2];
                                                                                  break label$1;
                                                                                 }
                                                                                 HEAP32[$5 + 348 >> 2] = 0;
                                                                                 HEAP32[$5 + 348 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]](HEAP32[$5 + 544 >> 2]));
                                                                                 HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 348 >> 2];
                                                                                 break label$1;
                                                                                }
                                                                                HEAP32[$5 + 344 >> 2] = 0;
                                                                                $1 = HEAP32[$5 + 552 >> 2];
                                                                                $0 = HEAP32[$5 + 544 >> 2];
                                                                                if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                 $2 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                } else {
                                                                                 $2 = 0;
                                                                                }
                                                                                HEAP32[$5 + 344 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$1 | 0]($0, jsvGetFloat($2)));
                                                                                HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 344 >> 2];
                                                                                break label$1;
                                                                               }
                                                                               HEAP32[$5 + 340 >> 2] = 0;
                                                                               $4 = HEAP32[$5 + 552 >> 2];
                                                                               $3 = HEAP32[$5 + 544 >> 2];
                                                                               if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                               } else {
                                                                                $0 = 0;
                                                                               }
                                                                               $2 = jsvGetInteger($0);
                                                                               if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                                $1 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                               } else {
                                                                                $1 = 0;
                                                                               }
                                                                               if (HEAP32[$5 + 536 >> 2] > 2) {
                                                                                $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                                                                               } else {
                                                                                $0 = 0;
                                                                               }
                                                                               if (HEAP32[$5 + 536 >> 2] > 3) {
                                                                                $6 = HEAP32[HEAP32[$5 + 540 >> 2] + 12 >> 2];
                                                                               } else {
                                                                                $6 = 0;
                                                                               }
                                                                               HEAP32[$5 + 340 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$4 | 0]($3, $2, $1, $0, $6));
                                                                               HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 340 >> 2];
                                                                               break label$1;
                                                                              }
                                                                              HEAP32[$5 + 336 >> 2] = 0;
                                                                              $3 = HEAP32[$5 + 552 >> 2];
                                                                              $2 = HEAP32[$5 + 544 >> 2];
                                                                              if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                               $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                              } else {
                                                                               $0 = 0;
                                                                              }
                                                                              $1 = jsvGetInteger($0);
                                                                              if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                               $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                              } else {
                                                                               $0 = 0;
                                                                              }
                                                                              if (HEAP32[$5 + 536 >> 2] > 2) {
                                                                               $4 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                                                                              } else {
                                                                               $4 = 0;
                                                                              }
                                                                              HEAP32[$5 + 336 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$3 | 0]($2, $1, $0, $4));
                                                                              HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 336 >> 2];
                                                                              break label$1;
                                                                             }
                                                                             HEAP32[$5 + 332 >> 2] = 0;
                                                                             $2 = HEAP32[$5 + 552 >> 2];
                                                                             $1 = HEAP32[$5 + 544 >> 2];
                                                                             if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                              $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                             } else {
                                                                              $0 = 0;
                                                                             }
                                                                             $0 = jsvGetInteger($0);
                                                                             if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                              $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                             } else {
                                                                              $3 = 0;
                                                                             }
                                                                             HEAP32[$5 + 332 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$2 | 0]($1, $0, $3));
                                                                             HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 332 >> 2];
                                                                             break label$1;
                                                                            }
                                                                            HEAP32[$5 + 328 >> 2] = 0;
                                                                            $1 = HEAP32[$5 + 552 >> 2];
                                                                            $0 = HEAP32[$5 + 544 >> 2];
                                                                            if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                             $2 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                            } else {
                                                                             $2 = 0;
                                                                            }
                                                                            HEAP32[$5 + 328 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$1 | 0]($0, jsvGetInteger($2)));
                                                                            HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 328 >> 2];
                                                                            break label$1;
                                                                           }
                                                                           HEAP32[$5 + 324 >> 2] = 0;
                                                                           $0 = HEAP32[$5 + 552 >> 2];
                                                                           if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                            $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                           } else {
                                                                            $1 = 0;
                                                                           }
                                                                           HEAP32[$5 + 324 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$0 | 0]($1));
                                                                           HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 324 >> 2];
                                                                           break label$1;
                                                                          }
                                                                          HEAP32[$5 + 320 >> 2] = 0;
                                                                          label$250: {
                                                                           if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                            $0 = jsvNewArray(HEAP32[$5 + 540 >> 2], HEAP32[$5 + 536 >> 2]);
                                                                            break label$250;
                                                                           }
                                                                           $0 = jsvNewEmptyArray();
                                                                          }
                                                                          HEAP32[$5 + 316 >> 2] = $0;
                                                                          FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]](HEAP32[$5 + 316 >> 2]);
                                                                          jsvUnLock(HEAP32[$5 + 316 >> 2]);
                                                                          HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 320 >> 2];
                                                                          break label$1;
                                                                         }
                                                                         HEAP32[$5 + 312 >> 2] = 0;
                                                                         $2 = HEAP32[$5 + 552 >> 2];
                                                                         if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                          $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                         } else {
                                                                          $1 = 0;
                                                                         }
                                                                         if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                          $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                         } else {
                                                                          $0 = 0;
                                                                         }
                                                                         if (HEAP32[$5 + 536 >> 2] > 2) {
                                                                          $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                                                                         } else {
                                                                          $3 = 0;
                                                                         }
                                                                         HEAP32[$5 + 312 >> 2] = FUNCTION_TABLE[$2 | 0]($1, $0, $3);
                                                                         HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 312 >> 2];
                                                                         break label$1;
                                                                        }
                                                                        HEAP32[$5 + 308 >> 2] = 0;
                                                                        HEAP32[$5 + 308 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]]());
                                                                        HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 308 >> 2];
                                                                        break label$1;
                                                                       }
                                                                       HEAP32[$5 + 304 >> 2] = 0;
                                                                       $1 = HEAP32[$5 + 552 >> 2];
                                                                       $0 = HEAP32[$5 + 544 >> 2];
                                                                       if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                        $2 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                       } else {
                                                                        $2 = 0;
                                                                       }
                                                                       HEAP32[$5 + 304 >> 2] = FUNCTION_TABLE[$1 | 0]($0, jsvGetInteger($2));
                                                                       HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 304 >> 2];
                                                                       break label$1;
                                                                      }
                                                                      HEAP32[$5 + 300 >> 2] = 0;
                                                                      HEAP32[$5 + 300 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]]() | 0);
                                                                      HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 300 >> 2];
                                                                      break label$1;
                                                                     }
                                                                     HEAP32[$5 + 296 >> 2] = 0;
                                                                     $1 = HEAP32[$5 + 552 >> 2];
                                                                     $0 = HEAP32[$5 + 544 >> 2];
                                                                     if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                      $2 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                     } else {
                                                                      $2 = 0;
                                                                     }
                                                                     HEAP32[$5 + 296 >> 2] = jsvNewFromBool(FUNCTION_TABLE[$1 | 0]($0, $2) & 1);
                                                                     HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 296 >> 2];
                                                                     break label$1;
                                                                    }
                                                                    HEAP32[$5 + 292 >> 2] = 0;
                                                                    label$262: {
                                                                     if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                      $0 = jsvNewArray(HEAP32[$5 + 540 >> 2] + 4 | 0, HEAP32[$5 + 536 >> 2] - 1 | 0);
                                                                      break label$262;
                                                                     }
                                                                     $0 = jsvNewEmptyArray();
                                                                    }
                                                                    HEAP32[$5 + 288 >> 2] = $0;
                                                                    $1 = HEAP32[$5 + 552 >> 2];
                                                                    $0 = HEAP32[$5 + 544 >> 2];
                                                                    if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                     $2 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                    } else {
                                                                     $2 = 0;
                                                                    }
                                                                    FUNCTION_TABLE[$1 | 0]($0, $2, HEAP32[$5 + 288 >> 2]);
                                                                    jsvUnLock(HEAP32[$5 + 288 >> 2]);
                                                                    HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 292 >> 2];
                                                                    break label$1;
                                                                   }
                                                                   HEAP32[$5 + 284 >> 2] = 0;
                                                                   $1 = HEAP32[$5 + 552 >> 2];
                                                                   $0 = HEAP32[$5 + 544 >> 2];
                                                                   if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                    $2 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                   } else {
                                                                    $2 = 0;
                                                                   }
                                                                   FUNCTION_TABLE[$1 | 0]($0, $2);
                                                                   HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 284 >> 2];
                                                                   break label$1;
                                                                  }
                                                                  HEAP32[$5 + 280 >> 2] = 0;
                                                                  label$268: {
                                                                   if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                    $0 = jsvNewArray(HEAP32[$5 + 540 >> 2] + 4 | 0, HEAP32[$5 + 536 >> 2] - 1 | 0);
                                                                    break label$268;
                                                                   }
                                                                   $0 = jsvNewEmptyArray();
                                                                  }
                                                                  HEAP32[$5 + 276 >> 2] = $0;
                                                                  $1 = HEAP32[$5 + 552 >> 2];
                                                                  $0 = HEAP32[$5 + 544 >> 2];
                                                                  if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                   $2 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                  } else {
                                                                   $2 = 0;
                                                                  }
                                                                  HEAP32[$5 + 280 >> 2] = FUNCTION_TABLE[$1 | 0]($0, $2, HEAP32[$5 + 276 >> 2]);
                                                                  jsvUnLock(HEAP32[$5 + 276 >> 2]);
                                                                  HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 280 >> 2];
                                                                  break label$1;
                                                                 }
                                                                 HEAP32[$5 + 272 >> 2] = 0;
                                                                 $2 = HEAP32[$5 + 552 >> 2];
                                                                 $1 = HEAP32[$5 + 544 >> 2];
                                                                 if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                  $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                 } else {
                                                                  $0 = 0;
                                                                 }
                                                                 if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                  $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                 } else {
                                                                  $3 = 0;
                                                                 }
                                                                 HEAP32[$5 + 272 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[$2 | 0]($1, $0, $3) | 0);
                                                                 HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 272 >> 2];
                                                                 break label$1;
                                                                }
                                                                HEAP32[$5 + 268 >> 2] = 0;
                                                                $2 = HEAP32[$5 + 552 >> 2];
                                                                $1 = HEAP32[$5 + 544 >> 2];
                                                                if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                 $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                } else {
                                                                 $0 = 0;
                                                                }
                                                                if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                 $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                } else {
                                                                 $3 = 0;
                                                                }
                                                                HEAP32[$5 + 268 >> 2] = jsvNewFromBool(FUNCTION_TABLE[$2 | 0]($1, $0, $3) & 1);
                                                                HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 268 >> 2];
                                                                break label$1;
                                                               }
                                                               HEAP32[$5 + 264 >> 2] = 0;
                                                               $0 = HEAP32[$5 + 552 >> 2];
                                                               if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                               } else {
                                                                $1 = 0;
                                                               }
                                                               HEAP32[$5 + 264 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$0 | 0](jsvGetFloat($1)));
                                                               HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 264 >> 2];
                                                               break label$1;
                                                              }
                                                              HEAP32[$5 + 260 >> 2] = 0;
                                                              $0 = HEAP32[$5 + 552 >> 2];
                                                              if (HEAP32[$5 + 536 >> 2] > 0) {
                                                               $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                              } else {
                                                               $1 = 0;
                                                              }
                                                              $7 = jsvGetFloat($1);
                                                              if (HEAP32[$5 + 536 >> 2] > 1) {
                                                               $1 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                              } else {
                                                               $1 = 0;
                                                              }
                                                              HEAP32[$5 + 260 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$0 | 0]($7, jsvGetFloat($1)));
                                                              HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 260 >> 2];
                                                              break label$1;
                                                             }
                                                             HEAP32[$5 + 256 >> 2] = 0;
                                                             $0 = HEAP32[$5 + 552 >> 2];
                                                             if (HEAP32[$5 + 536 >> 2] > 0) {
                                                              $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                             } else {
                                                              $1 = 0;
                                                             }
                                                             HEAP32[$5 + 256 >> 2] = FUNCTION_TABLE[$0 | 0](jsvGetFloat($1));
                                                             HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 256 >> 2];
                                                             break label$1;
                                                            }
                                                            HEAP32[$5 + 252 >> 2] = 0;
                                                            $0 = HEAP32[$5 + 552 >> 2];
                                                            if (HEAP32[$5 + 536 >> 2] > 0) {
                                                             $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                            } else {
                                                             $1 = 0;
                                                            }
                                                            $8 = jsvGetFloat($1);
                                                            if (HEAP32[$5 + 536 >> 2] > 1) {
                                                             $1 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                            } else {
                                                             $1 = 0;
                                                            }
                                                            $7 = jsvGetFloat($1);
                                                            if (HEAP32[$5 + 536 >> 2] > 2) {
                                                             $1 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                                                            } else {
                                                             $1 = 0;
                                                            }
                                                            HEAP32[$5 + 252 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$0 | 0]($8, $7, jsvGetFloat($1)));
                                                            HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 252 >> 2];
                                                            break label$1;
                                                           }
                                                           HEAP32[$5 + 248 >> 2] = 0;
                                                           label$294: {
                                                            if (HEAP32[$5 + 536 >> 2] > 0) {
                                                             $0 = jsvNewArray(HEAP32[$5 + 540 >> 2], HEAP32[$5 + 536 >> 2]);
                                                             break label$294;
                                                            }
                                                            $0 = jsvNewEmptyArray();
                                                           }
                                                           HEAP32[$5 + 244 >> 2] = $0;
                                                           HEAP32[$5 + 248 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]](HEAP32[$5 + 244 >> 2]));
                                                           jsvUnLock(HEAP32[$5 + 244 >> 2]);
                                                           HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 248 >> 2];
                                                           break label$1;
                                                          }
                                                          HEAP32[$5 + 240 >> 2] = 0;
                                                          $0 = HEAP32[$5 + 552 >> 2];
                                                          if (HEAP32[$5 + 536 >> 2] > 0) {
                                                           $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                          } else {
                                                           $1 = 0;
                                                          }
                                                          HEAP32[$5 + 240 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[$0 | 0](jsvGetFloat($1)) | 0);
                                                          HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 240 >> 2];
                                                          break label$1;
                                                         }
                                                         HEAP32[$5 + 236 >> 2] = 0;
                                                         $2 = HEAP32[$5 + 552 >> 2];
                                                         if (HEAP32[$5 + 536 >> 2] > 0) {
                                                          $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                         } else {
                                                          $0 = 0;
                                                         }
                                                         $1 = jsvGetInteger($0);
                                                         if (HEAP32[$5 + 536 >> 2] > 1) {
                                                          $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                         } else {
                                                          $0 = 0;
                                                         }
                                                         if (HEAP32[$5 + 536 >> 2] > 2) {
                                                          $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                                                         } else {
                                                          $3 = 0;
                                                         }
                                                         HEAP32[$5 + 236 >> 2] = FUNCTION_TABLE[$2 | 0]($1, $0, $3);
                                                         HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 236 >> 2];
                                                         break label$1;
                                                        }
                                                        HEAP32[$5 + 232 >> 2] = 0;
                                                        $1 = HEAP32[$5 + 552 >> 2];
                                                        if (HEAP32[$5 + 536 >> 2] > 0) {
                                                         $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                        } else {
                                                         $0 = 0;
                                                        }
                                                        if (HEAP32[$5 + 536 >> 2] > 1) {
                                                         $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                        } else {
                                                         $2 = 0;
                                                        }
                                                        HEAP32[$5 + 232 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$1 | 0]($0, jsvGetFloat($2)));
                                                        HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 232 >> 2];
                                                        break label$1;
                                                       }
                                                       HEAP32[$5 + 228 >> 2] = 0;
                                                       $2 = HEAP32[$5 + 552 >> 2];
                                                       if (HEAP32[$5 + 536 >> 2] > 0) {
                                                        $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                       } else {
                                                        $1 = 0;
                                                       }
                                                       if (HEAP32[$5 + 536 >> 2] > 1) {
                                                        $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                       } else {
                                                        $0 = 0;
                                                       }
                                                       if (HEAP32[$5 + 536 >> 2] > 2) {
                                                        $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                                                       } else {
                                                        $3 = 0;
                                                       }
                                                       HEAP32[$5 + 228 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$2 | 0]($1, $0, jsvGetInteger($3)));
                                                       HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 228 >> 2];
                                                       break label$1;
                                                      }
                                                      HEAP32[$5 + 224 >> 2] = 0;
                                                      $2 = HEAP32[$5 + 552 >> 2];
                                                      if (HEAP32[$5 + 536 >> 2] > 0) {
                                                       $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                      } else {
                                                       $1 = 0;
                                                      }
                                                      if (HEAP32[$5 + 536 >> 2] > 1) {
                                                       $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                      } else {
                                                       $0 = 0;
                                                      }
                                                      if (HEAP32[$5 + 536 >> 2] > 2) {
                                                       $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                                                      } else {
                                                       $3 = 0;
                                                      }
                                                      FUNCTION_TABLE[$2 | 0]($1, $0, jsvGetBool($3) & 1);
                                                      HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 224 >> 2];
                                                      break label$1;
                                                     }
                                                     HEAP32[$5 + 220 >> 2] = 0;
                                                     $0 = HEAP32[$5 + 552 >> 2];
                                                     if (HEAP32[$5 + 536 >> 2] > 0) {
                                                      $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                     } else {
                                                      $1 = 0;
                                                     }
                                                     $7 = jsvGetFloat($1);
                                                     if (HEAP32[$5 + 536 >> 2] > 1) {
                                                      $1 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                     } else {
                                                      $1 = 0;
                                                     }
                                                     FUNCTION_TABLE[$0 | 0]($7, $1);
                                                     HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 220 >> 2];
                                                     break label$1;
                                                    }
                                                    HEAP32[$5 + 216 >> 2] = 0;
                                                    $2 = HEAP32[$5 + 552 >> 2];
                                                    if (HEAP32[$5 + 536 >> 2] > 0) {
                                                     $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                    } else {
                                                     $1 = 0;
                                                    }
                                                    if (HEAP32[$5 + 536 >> 2] > 1) {
                                                     $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                    } else {
                                                     $0 = 0;
                                                    }
                                                    if (HEAP32[$5 + 536 >> 2] > 2) {
                                                     $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                                                    } else {
                                                     $3 = 0;
                                                    }
                                                    FUNCTION_TABLE[$2 | 0]($1, $0, $3);
                                                    HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 216 >> 2];
                                                    break label$1;
                                                   }
                                                   HEAP32[$5 + 212 >> 2] = 0;
                                                   $1 = HEAP32[$5 + 552 >> 2];
                                                   if (HEAP32[$5 + 536 >> 2] > 0) {
                                                    $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                   } else {
                                                    $0 = 0;
                                                   }
                                                   if (HEAP32[$5 + 536 >> 2] > 1) {
                                                    $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                   } else {
                                                    $2 = 0;
                                                   }
                                                   FUNCTION_TABLE[$1 | 0]($0, jsvGetBool($2) & 1);
                                                   HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 212 >> 2];
                                                   break label$1;
                                                  }
                                                  HEAP32[$5 + 208 >> 2] = 0;
                                                  $0 = HEAP32[$5 + 552 >> 2];
                                                  if (HEAP32[$5 + 536 >> 2] > 0) {
                                                   $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                  } else {
                                                   $1 = 0;
                                                  }
                                                  HEAP32[$5 + 208 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[$0 | 0]($1) | 0);
                                                  HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 208 >> 2];
                                                  break label$1;
                                                 }
                                                 HEAP32[$5 + 204 >> 2] = 0;
                                                 $0 = HEAP32[$5 + 552 >> 2];
                                                 if (HEAP32[$5 + 536 >> 2] > 0) {
                                                  $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                 } else {
                                                  $1 = 0;
                                                 }
                                                 HEAP32[$5 + 204 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[$0 | 0](jsvGetInteger($1)) | 0);
                                                 HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 204 >> 2];
                                                 break label$1;
                                                }
                                                HEAP32[$5 + 200 >> 2] = 0;
                                                $1 = HEAP32[$5 + 552 >> 2];
                                                if (HEAP32[$5 + 536 >> 2] > 0) {
                                                 $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                } else {
                                                 $0 = 0;
                                                }
                                                if (HEAP32[$5 + 536 >> 2] > 1) {
                                                 $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                } else {
                                                 $2 = 0;
                                                }
                                                HEAP32[$5 + 200 >> 2] = FUNCTION_TABLE[$1 | 0]($0, jsvGetInteger($2));
                                                HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 200 >> 2];
                                                break label$1;
                                               }
                                               HEAP32[$5 + 196 >> 2] = 0;
                                               $1 = HEAP32[$5 + 552 >> 2];
                                               if (HEAP32[$5 + 536 >> 2] > 0) {
                                                $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                               } else {
                                                $0 = 0;
                                               }
                                               if (HEAP32[$5 + 536 >> 2] > 1) {
                                                $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                               } else {
                                                $2 = 0;
                                               }
                                               HEAP32[$5 + 196 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[$1 | 0]($0, jsvGetBool($2) & 1) | 0);
                                               HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 196 >> 2];
                                               break label$1;
                                              }
                                              HEAP32[$5 + 192 >> 2] = 0;
                                              $3 = HEAP32[$5 + 552 >> 2];
                                              if (HEAP32[$5 + 536 >> 2] > 0) {
                                               $2 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                              } else {
                                               $2 = 0;
                                              }
                                              if (HEAP32[$5 + 536 >> 2] > 1) {
                                               $1 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                              } else {
                                               $1 = 0;
                                              }
                                              if (HEAP32[$5 + 536 >> 2] > 2) {
                                               $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                                              } else {
                                               $0 = 0;
                                              }
                                              if (HEAP32[$5 + 536 >> 2] > 3) {
                                               $4 = HEAP32[HEAP32[$5 + 540 >> 2] + 12 >> 2];
                                              } else {
                                               $4 = 0;
                                              }
                                              FUNCTION_TABLE[$3 | 0]($2, $1, $0, jsvGetInteger($4));
                                              HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 192 >> 2];
                                              break label$1;
                                             }
                                             HEAP32[$5 + 188 >> 2] = 0;
                                             $2 = HEAP32[$5 + 552 >> 2];
                                             if (HEAP32[$5 + 536 >> 2] > 0) {
                                              $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                             } else {
                                              $1 = 0;
                                             }
                                             if (HEAP32[$5 + 536 >> 2] > 1) {
                                              $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                             } else {
                                              $0 = 0;
                                             }
                                             if (HEAP32[$5 + 536 >> 2] > 2) {
                                              $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                                             } else {
                                              $3 = 0;
                                             }
                                             HEAP32[$5 + 188 >> 2] = FUNCTION_TABLE[$2 | 0]($1, $0, jsvGetBool($3) & 1);
                                             HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 188 >> 2];
                                             break label$1;
                                            }
                                            HEAP32[$5 + 184 >> 2] = 0;
                                            $0 = HEAP32[$5 + 552 >> 2];
                                            if (HEAP32[$5 + 536 >> 2] > 0) {
                                             $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                            } else {
                                             $1 = 0;
                                            }
                                            $9 = jsvGetFloat($1);
                                            if (HEAP32[$5 + 536 >> 2] > 1) {
                                             $1 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                            } else {
                                             $1 = 0;
                                            }
                                            $8 = jsvGetFloat($1);
                                            if (HEAP32[$5 + 536 >> 2] > 2) {
                                             $1 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                                            } else {
                                             $1 = 0;
                                            }
                                            $7 = jsvGetFloat($1);
                                            if (HEAP32[$5 + 536 >> 2] > 3) {
                                             $1 = HEAP32[HEAP32[$5 + 540 >> 2] + 12 >> 2];
                                            } else {
                                             $1 = 0;
                                            }
                                            HEAP32[$5 + 184 >> 2] = FUNCTION_TABLE[$0 | 0]($9, $8, $7, jsvGetInteger($1));
                                            HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 184 >> 2];
                                            break label$1;
                                           }
                                           HEAP32[$5 + 180 >> 2] = 0;
                                           label$368: {
                                            if (HEAP32[$5 + 536 >> 2] > 1) {
                                             $0 = jsvNewArray(HEAP32[$5 + 540 >> 2] + 4 | 0, HEAP32[$5 + 536 >> 2] - 1 | 0);
                                             break label$368;
                                            }
                                            $0 = jsvNewEmptyArray();
                                           }
                                           HEAP32[$5 + 176 >> 2] = $0;
                                           $0 = HEAP32[$5 + 552 >> 2];
                                           if (HEAP32[$5 + 536 >> 2] > 0) {
                                            $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                           } else {
                                            $1 = 0;
                                           }
                                           FUNCTION_TABLE[$0 | 0]($1, HEAP32[$5 + 176 >> 2]);
                                           jsvUnLock(HEAP32[$5 + 176 >> 2]);
                                           HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 180 >> 2];
                                           break label$1;
                                          }
                                          HEAP32[$5 + 172 >> 2] = 0;
                                          $1 = HEAP32[$5 + 552 >> 2];
                                          if (HEAP32[$5 + 536 >> 2] > 0) {
                                           $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                          } else {
                                           $0 = 0;
                                          }
                                          if (HEAP32[$5 + 536 >> 2] > 1) {
                                           $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                          } else {
                                           $2 = 0;
                                          }
                                          FUNCTION_TABLE[$1 | 0]($0, jsvGetInteger($2));
                                          HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 172 >> 2];
                                          break label$1;
                                         }
                                         HEAP32[$5 + 168 >> 2] = 0;
                                         label$376: {
                                          if (HEAP32[$5 + 536 >> 2] > 2) {
                                           $0 = jsvNewArray(HEAP32[$5 + 540 >> 2] + 8 | 0, HEAP32[$5 + 536 >> 2] - 2 | 0);
                                           break label$376;
                                          }
                                          $0 = jsvNewEmptyArray();
                                         }
                                         HEAP32[$5 + 164 >> 2] = $0;
                                         $1 = HEAP32[$5 + 552 >> 2];
                                         if (HEAP32[$5 + 536 >> 2] > 0) {
                                          $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                         } else {
                                          $0 = 0;
                                         }
                                         if (HEAP32[$5 + 536 >> 2] > 1) {
                                          $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                         } else {
                                          $2 = 0;
                                         }
                                         HEAP32[$5 + 168 >> 2] = FUNCTION_TABLE[$1 | 0]($0, jsvGetFloat($2), HEAP32[$5 + 164 >> 2]);
                                         jsvUnLock(HEAP32[$5 + 164 >> 2]);
                                         HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 168 >> 2];
                                         break label$1;
                                        }
                                        HEAP32[$5 + 160 >> 2] = 0;
                                        $1 = HEAP32[$5 + 552 >> 2];
                                        if (HEAP32[$5 + 536 >> 2] > 0) {
                                         $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                        } else {
                                         $0 = 0;
                                        }
                                        if (HEAP32[$5 + 536 >> 2] > 1) {
                                         $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                        } else {
                                         $2 = 0;
                                        }
                                        FUNCTION_TABLE[$1 | 0]($0, jsvGetFloat($2));
                                        HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 160 >> 2];
                                        break label$1;
                                       }
                                       HEAP32[$5 + 156 >> 2] = 0;
                                       $0 = HEAP32[$5 + 552 >> 2];
                                       if (HEAP32[$5 + 536 >> 2] > 0) {
                                        $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                       } else {
                                        $1 = 0;
                                       }
                                       HEAP32[$5 + 156 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$0 | 0](jshGetPinFromVar($1) & 255));
                                       HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 156 >> 2];
                                       break label$1;
                                      }
                                      HEAP32[$5 + 152 >> 2] = 0;
                                      $1 = HEAP32[$5 + 552 >> 2];
                                      if (HEAP32[$5 + 536 >> 2] > 0) {
                                       $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                      } else {
                                       $0 = 0;
                                      }
                                      $0 = jshGetPinFromVar($0) & 255;
                                      if (HEAP32[$5 + 536 >> 2] > 1) {
                                       $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                      } else {
                                       $2 = 0;
                                      }
                                      $7 = jsvGetFloat($2);
                                      if (HEAP32[$5 + 536 >> 2] > 2) {
                                       $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                                      } else {
                                       $2 = 0;
                                      }
                                      FUNCTION_TABLE[$1 | 0]($0, $7, $2);
                                      HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 152 >> 2];
                                      break label$1;
                                     }
                                     HEAP32[$5 + 148 >> 2] = 0;
                                     $2 = HEAP32[$5 + 552 >> 2];
                                     if (HEAP32[$5 + 536 >> 2] > 0) {
                                      $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                     } else {
                                      $0 = 0;
                                     }
                                     $1 = jshGetPinFromVar($0) & 255;
                                     if (HEAP32[$5 + 536 >> 2] > 1) {
                                      $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                     } else {
                                      $0 = 0;
                                     }
                                     $0 = jsvGetBool($0) & 1;
                                     if (HEAP32[$5 + 536 >> 2] > 2) {
                                      $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                                     } else {
                                      $3 = 0;
                                     }
                                     FUNCTION_TABLE[$2 | 0]($1, $0, $3);
                                     HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 148 >> 2];
                                     break label$1;
                                    }
                                    HEAP32[$5 + 144 >> 2] = 0;
                                    $2 = HEAP32[$5 + 552 >> 2];
                                    if (HEAP32[$5 + 536 >> 2] > 0) {
                                     $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                    } else {
                                     $0 = 0;
                                    }
                                    $1 = jshGetPinFromVar($0) & 255;
                                    if (HEAP32[$5 + 536 >> 2] > 1) {
                                     $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                    } else {
                                     $0 = 0;
                                    }
                                    if (HEAP32[$5 + 536 >> 2] > 2) {
                                     $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                                    } else {
                                     $3 = 0;
                                    }
                                    FUNCTION_TABLE[$2 | 0]($1, $0, jsvGetBool($3) & 1);
                                    HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 144 >> 2];
                                    break label$1;
                                   }
                                   HEAP32[$5 + 140 >> 2] = 0;
                                   $0 = HEAP32[$5 + 552 >> 2];
                                   if (HEAP32[$5 + 536 >> 2] > 0) {
                                    $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                   } else {
                                    $1 = 0;
                                   }
                                   HEAP32[$5 + 140 >> 2] = FUNCTION_TABLE[$0 | 0](jshGetPinFromVar($1) & 255);
                                   HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 140 >> 2];
                                   break label$1;
                                  }
                                  HEAP32[$5 + 136 >> 2] = 0;
                                  $2 = HEAP32[$5 + 552 >> 2];
                                  if (HEAP32[$5 + 536 >> 2] > 0) {
                                   $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                  } else {
                                   $0 = 0;
                                  }
                                  if (HEAP32[$5 + 536 >> 2] > 1) {
                                   $1 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                  } else {
                                   $1 = 0;
                                  }
                                  $1 = jshGetPinFromVar($1) & 255;
                                  if (HEAP32[$5 + 536 >> 2] > 2) {
                                   $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                                  } else {
                                   $3 = 0;
                                  }
                                  HEAP32[$5 + 136 >> 2] = FUNCTION_TABLE[$2 | 0]($0, $1, $3);
                                  HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 136 >> 2];
                                  break label$1;
                                 }
                                 HEAP32[$5 + 132 >> 2] = 0;
                                 $1 = HEAP32[$5 + 552 >> 2];
                                 $0 = HEAP32[$5 + 544 >> 2];
                                 if (HEAP32[$5 + 536 >> 2] > 0) {
                                  $2 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                 } else {
                                  $2 = 0;
                                 }
                                 FUNCTION_TABLE[$1 | 0]($0, jsvGetBool($2) & 1);
                                 HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 132 >> 2];
                                 break label$1;
                                }
                                HEAP32[$5 + 128 >> 2] = 0;
                                $2 = HEAP32[$5 + 552 >> 2];
                                $1 = HEAP32[$5 + 544 >> 2];
                                if (HEAP32[$5 + 536 >> 2] > 0) {
                                 $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                } else {
                                 $0 = 0;
                                }
                                $0 = jsvGetBool($0) & 1;
                                if (HEAP32[$5 + 536 >> 2] > 1) {
                                 $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                } else {
                                 $3 = 0;
                                }
                                FUNCTION_TABLE[$2 | 0]($1, $0, jsvGetFloat($3));
                                HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 128 >> 2];
                                break label$1;
                               }
                               HEAP32[$5 + 124 >> 2] = 0;
                               $2 = HEAP32[$5 + 552 >> 2];
                               $1 = HEAP32[$5 + 544 >> 2];
                               if (HEAP32[$5 + 536 >> 2] > 0) {
                                $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                               } else {
                                $0 = 0;
                               }
                               $0 = jsvGetBool($0) & 1;
                               if (HEAP32[$5 + 536 >> 2] > 1) {
                                $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                               } else {
                                $3 = 0;
                               }
                               FUNCTION_TABLE[$2 | 0]($1, $0, $3);
                               HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 124 >> 2];
                               break label$1;
                              }
                              HEAP32[$5 + 120 >> 2] = 0;
                              $1 = HEAP32[$5 + 552 >> 2];
                              $0 = HEAP32[$5 + 544 >> 2];
                              if (HEAP32[$5 + 536 >> 2] > 0) {
                               $2 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                              } else {
                               $2 = 0;
                              }
                              $7 = jsvGetFloat($2);
                              if (HEAP32[$5 + 536 >> 2] > 1) {
                               $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                              } else {
                               $2 = 0;
                              }
                              FUNCTION_TABLE[$1 | 0]($0, $7, $2);
                              HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 120 >> 2];
                              break label$1;
                             }
                             HEAP32[$5 + 116 >> 2] = 0;
                             $2 = HEAP32[$5 + 552 >> 2];
                             $1 = HEAP32[$5 + 544 >> 2];
                             if (HEAP32[$5 + 536 >> 2] > 0) {
                              $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                             } else {
                              $0 = 0;
                             }
                             if (HEAP32[$5 + 536 >> 2] > 1) {
                              $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                             } else {
                              $3 = 0;
                             }
                             FUNCTION_TABLE[$2 | 0]($1, $0, jsvGetBool($3) & 1);
                             HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 116 >> 2];
                             break label$1;
                            }
                            HEAP32[$5 + 112 >> 2] = 0;
                            label$432: {
                             if (HEAP32[$5 + 536 >> 2] > 0) {
                              $0 = jsvNewArray(HEAP32[$5 + 540 >> 2], HEAP32[$5 + 536 >> 2]);
                              break label$432;
                             }
                             $0 = jsvNewEmptyArray();
                            }
                            HEAP32[$5 + 108 >> 2] = $0;
                            FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]](HEAP32[$5 + 544 >> 2], HEAP32[$5 + 108 >> 2]);
                            jsvUnLock(HEAP32[$5 + 108 >> 2]);
                            HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 112 >> 2];
                            break label$1;
                           }
                           HEAP32[$5 + 104 >> 2] = 0;
                           $1 = HEAP32[$5 + 552 >> 2];
                           if (HEAP32[$5 + 536 >> 2] > 0) {
                            $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                           } else {
                            $0 = 0;
                           }
                           if (HEAP32[$5 + 536 >> 2] > 1) {
                            $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                           } else {
                            $2 = 0;
                           }
                           HEAP32[$5 + 104 >> 2] = FUNCTION_TABLE[$1 | 0]($0, jsvGetBool($2) & 1);
                           HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 104 >> 2];
                           break label$1;
                          }
                          HEAP32[$5 + 100 >> 2] = 0;
                          $3 = HEAP32[$5 + 552 >> 2];
                          if (HEAP32[$5 + 536 >> 2] > 0) {
                           $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                          } else {
                           $1 = 0;
                          }
                          if (HEAP32[$5 + 536 >> 2] > 1) {
                           $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                          } else {
                           $0 = 0;
                          }
                          if (HEAP32[$5 + 536 >> 2] > 2) {
                           $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                          } else {
                           $2 = 0;
                          }
                          $2 = jsvGetInteger($2);
                          if (HEAP32[$5 + 536 >> 2] > 3) {
                           $4 = HEAP32[HEAP32[$5 + 540 >> 2] + 12 >> 2];
                          } else {
                           $4 = 0;
                          }
                          HEAP32[$5 + 100 >> 2] = jsvNewFromBool(FUNCTION_TABLE[$3 | 0]($1, $0, $2, jsvGetInteger($4)) & 1);
                          HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 100 >> 2];
                          break label$1;
                         }
                         HEAP32[$5 + 96 >> 2] = 0;
                         $1 = HEAP32[$5 + 552 >> 2];
                         if (HEAP32[$5 + 536 >> 2] > 0) {
                          $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                         } else {
                          $0 = 0;
                         }
                         if (HEAP32[$5 + 536 >> 2] > 1) {
                          $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                         } else {
                          $2 = 0;
                         }
                         HEAP32[$5 + 96 >> 2] = jsvNewFromBool(FUNCTION_TABLE[$1 | 0]($0, $2) & 1);
                         HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 96 >> 2];
                         break label$1;
                        }
                        HEAP32[$5 + 92 >> 2] = 0;
                        $0 = HEAP32[$5 + 552 >> 2];
                        if (HEAP32[$5 + 536 >> 2] > 0) {
                         $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                        } else {
                         $1 = 0;
                        }
                        HEAP32[$5 + 92 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[$0 | 0](jsvGetBool($1) & 1) | 0);
                        HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 92 >> 2];
                        break label$1;
                       }
                       HEAP32[$5 + 88 >> 2] = 0;
                       $0 = HEAP32[$5 + 552 >> 2];
                       if (HEAP32[$5 + 536 >> 2] > 0) {
                        $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                       } else {
                        $1 = 0;
                       }
                       HEAP32[$5 + 88 >> 2] = FUNCTION_TABLE[$0 | 0](jsvGetBool($1) & 1);
                       HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 88 >> 2];
                       break label$1;
                      }
                      HEAP32[$5 + 84 >> 2] = 0;
                      $2 = HEAP32[$5 + 552 >> 2];
                      $1 = HEAP32[$5 + 544 >> 2];
                      if (HEAP32[$5 + 536 >> 2] > 0) {
                       $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                      } else {
                       $0 = 0;
                      }
                      if (HEAP32[$5 + 536 >> 2] > 1) {
                       $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                      } else {
                       $3 = 0;
                      }
                      HEAP32[$5 + 84 >> 2] = FUNCTION_TABLE[$2 | 0]($1, $0, jshGetPinFromVar($3) & 255);
                      HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 84 >> 2];
                      break label$1;
                     }
                     HEAP32[$5 + 80 >> 2] = 0;
                     $4 = HEAP32[$5 + 552 >> 2];
                     $3 = HEAP32[$5 + 544 >> 2];
                     if (HEAP32[$5 + 536 >> 2] > 0) {
                      $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                     } else {
                      $0 = 0;
                     }
                     if (HEAP32[$5 + 536 >> 2] > 1) {
                      $1 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                     } else {
                      $1 = 0;
                     }
                     $2 = jsvGetInteger($1);
                     if (HEAP32[$5 + 536 >> 2] > 2) {
                      $1 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                     } else {
                      $1 = 0;
                     }
                     $1 = jsvGetInteger($1);
                     if (HEAP32[$5 + 536 >> 2] > 3) {
                      $6 = HEAP32[HEAP32[$5 + 540 >> 2] + 12 >> 2];
                     } else {
                      $6 = 0;
                     }
                     FUNCTION_TABLE[$4 | 0]($3, $0, $2, $1, jshGetPinFromVar($6) & 255);
                     HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 80 >> 2];
                     break label$1;
                    }
                    HEAP32[$5 + 76 >> 2] = 0;
                    $3 = HEAP32[$5 + 552 >> 2];
                    $2 = HEAP32[$5 + 544 >> 2];
                    if (HEAP32[$5 + 536 >> 2] > 0) {
                     $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                    } else {
                     $0 = 0;
                    }
                    $1 = jsvGetInteger($0);
                    if (HEAP32[$5 + 536 >> 2] > 1) {
                     $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                    } else {
                     $0 = 0;
                    }
                    $0 = jsvGetInteger($0);
                    if (HEAP32[$5 + 536 >> 2] > 2) {
                     $4 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                    } else {
                     $4 = 0;
                    }
                    HEAP32[$5 + 76 >> 2] = FUNCTION_TABLE[$3 | 0]($2, $1, $0, jsvGetInteger($4));
                    HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 76 >> 2];
                    break label$1;
                   }
                   HEAP32[$5 + 72 >> 2] = 0;
                   $1 = HEAP32[$5 + 552 >> 2];
                   if (HEAP32[$5 + 536 >> 2] > 0) {
                    $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                   } else {
                    $0 = 0;
                   }
                   $0 = jsvGetInteger($0);
                   if (HEAP32[$5 + 536 >> 2] > 1) {
                    $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                   } else {
                    $2 = 0;
                   }
                   HEAP32[$5 + 72 >> 2] = FUNCTION_TABLE[$1 | 0]($0, $2);
                   HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 72 >> 2];
                   break label$1;
                  }
                  HEAP32[$5 + 68 >> 2] = 0;
                  $2 = HEAP32[$5 + 552 >> 2];
                  $1 = HEAP32[$5 + 544 >> 2];
                  if (HEAP32[$5 + 536 >> 2] > 0) {
                   $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                  } else {
                   $0 = 0;
                  }
                  $0 = jshGetPinFromVar($0) & 255;
                  if (HEAP32[$5 + 536 >> 2] > 1) {
                   $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                  } else {
                   $3 = 0;
                  }
                  $7 = jsvGetFloat($3);
                  if (HEAP32[$5 + 536 >> 2] > 2) {
                   $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                  } else {
                   $3 = 0;
                  }
                  FUNCTION_TABLE[$2 | 0]($1, $0, $7, $3);
                  HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 68 >> 2];
                  break label$1;
                 }
                 HEAP32[$5 + 64 >> 2] = 0;
                 $3 = HEAP32[$5 + 552 >> 2];
                 if (HEAP32[$5 + 536 >> 2] > 0) {
                  $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                 } else {
                  $0 = 0;
                 }
                 $2 = jsvGetInteger($0);
                 if (HEAP32[$5 + 536 >> 2] > 1) {
                  $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                 } else {
                  $0 = 0;
                 }
                 $1 = jsvGetInteger($0);
                 if (HEAP32[$5 + 536 >> 2] > 2) {
                  $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                 } else {
                  $0 = 0;
                 }
                 $0 = jsvGetInteger($0);
                 if (HEAP32[$5 + 536 >> 2] > 3) {
                  $4 = HEAP32[HEAP32[$5 + 540 >> 2] + 12 >> 2];
                 } else {
                  $4 = 0;
                 }
                 HEAP32[$5 + 64 >> 2] = FUNCTION_TABLE[$3 | 0]($2, $1, $0, $4);
                 HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 64 >> 2];
                 break label$1;
                }
                HEAP32[$5 + 60 >> 2] = 0;
                $1 = HEAP32[$5 + 552 >> 2];
                $0 = HEAP32[$5 + 544 >> 2];
                if (HEAP32[$5 + 536 >> 2] > 0) {
                 $2 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                } else {
                 $2 = 0;
                }
                HEAP32[$5 + 60 >> 2] = FUNCTION_TABLE[$1 | 0]($0, jsvGetBool($2) & 1);
                HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 60 >> 2];
                break label$1;
               }
               HEAP32[$5 + 56 >> 2] = 0;
               $4 = HEAP32[$5 + 552 >> 2];
               $3 = HEAP32[$5 + 544 >> 2];
               if (HEAP32[$5 + 536 >> 2] > 0) {
                $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
               } else {
                $0 = 0;
               }
               if (HEAP32[$5 + 536 >> 2] > 1) {
                $1 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
               } else {
                $1 = 0;
               }
               $2 = jsvGetInteger($1);
               if (HEAP32[$5 + 536 >> 2] > 2) {
                $1 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
               } else {
                $1 = 0;
               }
               $1 = jsvGetInteger($1);
               if (HEAP32[$5 + 536 >> 2] > 3) {
                $6 = HEAP32[HEAP32[$5 + 540 >> 2] + 12 >> 2];
               } else {
                $6 = 0;
               }
               HEAP32[$5 + 56 >> 2] = FUNCTION_TABLE[$4 | 0]($3, $0, $2, $1, jsvGetInteger($6));
               HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 56 >> 2];
               break label$1;
              }
              HEAP32[$5 + 52 >> 2] = 0;
              $4 = HEAP32[$5 + 552 >> 2];
              $3 = HEAP32[$5 + 544 >> 2];
              if (HEAP32[$5 + 536 >> 2] > 0) {
               $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
              } else {
               $0 = 0;
              }
              $2 = jsvGetInteger($0);
              if (HEAP32[$5 + 536 >> 2] > 1) {
               $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
              } else {
               $0 = 0;
              }
              $1 = jsvGetInteger($0);
              if (HEAP32[$5 + 536 >> 2] > 2) {
               $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
              } else {
               $0 = 0;
              }
              $0 = jsvGetInteger($0);
              if (HEAP32[$5 + 536 >> 2] > 3) {
               $6 = HEAP32[HEAP32[$5 + 540 >> 2] + 12 >> 2];
              } else {
               $6 = 0;
              }
              HEAP32[$5 + 52 >> 2] = FUNCTION_TABLE[$4 | 0]($3, $2, $1, $0, jsvGetInteger($6));
              HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 52 >> 2];
              break label$1;
             }
             HEAP32[$5 + 48 >> 2] = 0;
             $2 = HEAP32[$5 + 552 >> 2];
             $1 = HEAP32[$5 + 544 >> 2];
             if (HEAP32[$5 + 536 >> 2] > 0) {
              $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
             } else {
              $0 = 0;
             }
             $0 = jsvGetInteger($0);
             if (HEAP32[$5 + 536 >> 2] > 1) {
              $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
             } else {
              $3 = 0;
             }
             HEAP32[$5 + 48 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[$2 | 0]($1, $0, jsvGetInteger($3)) | 0);
             HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 48 >> 2];
             break label$1;
            }
            HEAP32[$5 + 44 >> 2] = 0;
            $3 = HEAP32[$5 + 552 >> 2];
            $2 = HEAP32[$5 + 544 >> 2];
            if (HEAP32[$5 + 536 >> 2] > 0) {
             $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
            } else {
             $0 = 0;
            }
            $1 = jsvGetInteger($0);
            if (HEAP32[$5 + 536 >> 2] > 1) {
             $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
            } else {
             $0 = 0;
            }
            $0 = jsvGetInteger($0);
            if (HEAP32[$5 + 536 >> 2] > 2) {
             $4 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
            } else {
             $4 = 0;
            }
            HEAP32[$5 + 44 >> 2] = FUNCTION_TABLE[$3 | 0]($2, $1, $0, $4);
            HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 44 >> 2];
            break label$1;
           }
           HEAP32[$5 + 40 >> 2] = 0;
           $3 = HEAP32[$5 + 552 >> 2];
           $2 = HEAP32[$5 + 544 >> 2];
           if (HEAP32[$5 + 536 >> 2] > 0) {
            $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
           } else {
            $1 = 0;
           }
           if (HEAP32[$5 + 536 >> 2] > 1) {
            $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
           } else {
            $0 = 0;
           }
           if (HEAP32[$5 + 536 >> 2] > 2) {
            $4 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
           } else {
            $4 = 0;
           }
           HEAP32[$5 + 40 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[$3 | 0]($2, $1, $0, $4) | 0);
           HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 40 >> 2];
           break label$1;
          }
          HEAP32[$5 + 36 >> 2] = 0;
          $3 = HEAP32[$5 + 552 >> 2];
          $2 = HEAP32[$5 + 544 >> 2];
          if (HEAP32[$5 + 536 >> 2] > 0) {
           $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
          } else {
           $1 = 0;
          }
          if (HEAP32[$5 + 536 >> 2] > 1) {
           $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
          } else {
           $0 = 0;
          }
          if (HEAP32[$5 + 536 >> 2] > 2) {
           $4 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
          } else {
           $4 = 0;
          }
          HEAP32[$5 + 36 >> 2] = FUNCTION_TABLE[$3 | 0]($2, $1, $0, $4);
          HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 36 >> 2];
          break label$1;
         }
         HEAP32[$5 + 32 >> 2] = 0;
         $4 = HEAP32[$5 + 552 >> 2];
         $3 = HEAP32[$5 + 544 >> 2];
         if (HEAP32[$5 + 536 >> 2] > 0) {
          $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
         } else {
          $1 = 0;
         }
         if (HEAP32[$5 + 536 >> 2] > 1) {
          $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
         } else {
          $0 = 0;
         }
         $2 = jsvGetInteger($0);
         if (HEAP32[$5 + 536 >> 2] > 2) {
          $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
         } else {
          $0 = 0;
         }
         if (HEAP32[$5 + 536 >> 2] > 3) {
          $6 = HEAP32[HEAP32[$5 + 540 >> 2] + 12 >> 2];
         } else {
          $6 = 0;
         }
         HEAP32[$5 + 32 >> 2] = FUNCTION_TABLE[$4 | 0]($3, $1, $2, $0, jsvGetInteger($6));
         HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 32 >> 2];
         break label$1;
        }
        HEAP32[$5 + 28 >> 2] = 0;
        $1 = HEAP32[$5 + 552 >> 2];
        $0 = HEAP32[$5 + 544 >> 2];
        if (HEAP32[$5 + 536 >> 2] > 0) {
         $2 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
        } else {
         $2 = 0;
        }
        HEAP32[$5 + 28 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[$1 | 0]($0, $2) | 0);
        HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 28 >> 2];
        break label$1;
       }
       HEAP32[$5 + 24 >> 2] = 0;
       $4 = HEAP32[$5 + 552 >> 2];
       $3 = HEAP32[$5 + 544 >> 2];
       if (HEAP32[$5 + 536 >> 2] > 0) {
        $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
       } else {
        $0 = 0;
       }
       if (HEAP32[$5 + 536 >> 2] > 1) {
        $1 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
       } else {
        $1 = 0;
       }
       $2 = jsvGetInteger($1);
       if (HEAP32[$5 + 536 >> 2] > 2) {
        $1 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
       } else {
        $1 = 0;
       }
       $1 = jsvGetInteger($1);
       if (HEAP32[$5 + 536 >> 2] > 3) {
        $6 = HEAP32[HEAP32[$5 + 540 >> 2] + 12 >> 2];
       } else {
        $6 = 0;
       }
       HEAP32[$5 + 24 >> 2] = FUNCTION_TABLE[$4 | 0]($3, $0, $2, $1, jsvGetBool($6) & 1);
       HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 24 >> 2];
       break label$1;
      }
      HEAP32[$5 + 20 >> 2] = 0;
      $1 = HEAP32[$5 + 552 >> 2];
      $0 = HEAP32[$5 + 544 >> 2];
      if (HEAP32[$5 + 536 >> 2] > 0) {
       $2 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
      } else {
       $2 = 0;
      }
      $9 = jsvGetFloat($2);
      if (HEAP32[$5 + 536 >> 2] > 1) {
       $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
      } else {
       $2 = 0;
      }
      $8 = jsvGetFloat($2);
      if (HEAP32[$5 + 536 >> 2] > 2) {
       $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
      } else {
       $2 = 0;
      }
      $7 = jsvGetFloat($2);
      if (HEAP32[$5 + 536 >> 2] > 3) {
       $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 12 >> 2];
      } else {
       $2 = 0;
      }
      HEAP32[$5 + 20 >> 2] = FUNCTION_TABLE[$1 | 0]($0, $9, $8, $7, jsvGetFloat($2));
      HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 20 >> 2];
      break label$1;
     }
     HEAP32[$5 + 16 >> 2] = 0;
     $2 = HEAP32[$5 + 552 >> 2];
     $1 = HEAP32[$5 + 544 >> 2];
     if (HEAP32[$5 + 536 >> 2] > 0) {
      $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
     } else {
      $0 = 0;
     }
     $0 = jsvGetInteger($0);
     if (HEAP32[$5 + 536 >> 2] > 1) {
      $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
     } else {
      $3 = 0;
     }
     HEAP32[$5 + 16 >> 2] = FUNCTION_TABLE[$2 | 0]($1, $0, jsvGetInteger($3));
     HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 16 >> 2];
     break label$1;
    }
    HEAP32[$5 + 12 >> 2] = 0;
    $2 = HEAP32[$5 + 552 >> 2];
    $1 = HEAP32[$5 + 544 >> 2];
    if (HEAP32[$5 + 536 >> 2] > 0) {
     $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
    } else {
     $0 = 0;
    }
    if (HEAP32[$5 + 536 >> 2] > 1) {
     $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
    } else {
     $3 = 0;
    }
    HEAP32[$5 + 12 >> 2] = FUNCTION_TABLE[$2 | 0]($1, $0, jsvGetBool($3) & 1);
    HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 12 >> 2];
    break label$1;
   }
   HEAP32[$5 + 8 >> 2] = 0;
   $4 = HEAP32[$5 + 552 >> 2];
   $3 = HEAP32[$5 + 544 >> 2];
   if (HEAP32[$5 + 536 >> 2] > 0) {
    $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
   } else {
    $0 = 0;
   }
   if (HEAP32[$5 + 536 >> 2] > 1) {
    $1 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
   } else {
    $1 = 0;
   }
   $2 = jsvGetInteger($1);
   if (HEAP32[$5 + 536 >> 2] > 2) {
    $1 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
   } else {
    $1 = 0;
   }
   $1 = jsvGetInteger($1);
   if (HEAP32[$5 + 536 >> 2] > 3) {
    $6 = HEAP32[HEAP32[$5 + 540 >> 2] + 12 >> 2];
   } else {
    $6 = 0;
   }
   HEAP32[$5 + 8 >> 2] = FUNCTION_TABLE[$4 | 0]($3, $0, $2, $1, $6);
   HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 8 >> 2];
   break label$1;
  }
  HEAP32[$5 >> 2] = HEAPU16[$5 + 550 >> 1];
  jsExceptionHere(1, 107576, $5);
  HEAP32[$5 + 556 >> 2] = 0;
 }
 __stack_pointer = $5 + 560 | 0;
 return HEAP32[$5 + 556 >> 2];
}

function jsiIdle() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $0 = __stack_pointer - 320 | 0;
 __stack_pointer = $0;
 if (HEAPU8[187066] < 255) {
  HEAP8[187066] = HEAPU8[187066] + 1;
 }
 HEAP8[$0 + 319 | 0] = 0;
 HEAP32[$0 + 308 >> 2] = jshGetEventsUsed();
 while (1) {
  $5 = HEAP32[$0 + 308 >> 2];
  HEAP32[$0 + 308 >> 2] = $5 - 1;
  $1 = 0;
  if (($5 | 0) > 0) {
   $1 = jshPopIOEvent($0 + 312 | 0);
  }
  if ($1 & 1) {
   jsiSetBusy(1, 1);
   HEAP8[$0 + 319 | 0] = 1;
   HEAP8[$0 + 307 | 0] = HEAPU8[$0 + 312 | 0] & 31;
   HEAP8[187066] = 0;
   label$5: {
    if (HEAPU8[$0 + 307 | 0] == HEAPU8[153824]) {
     jsiHandleIOEventForConsole($0 + 312 | 0);
     break label$5;
    }
    label$7: {
     if (!(HEAPU8[$0 + 307 | 0] < 17 | HEAPU8[$0 + 307 | 0] > 22)) {
      HEAP32[$0 + 300 >> 2] = jsvSkipNameAndUnLock(jsiGetClassNameFromDevice(HEAPU8[$0 + 307 | 0]));
      if (jsvIsObject(HEAP32[$0 + 300 >> 2]) & 1) {
       $5 = jsiHandleIOEventForSerial(HEAP32[$0 + 300 >> 2], $0 + 312 | 0);
       HEAP32[$0 + 308 >> 2] = HEAP32[$0 + 308 >> 2] - $5;
      }
      jsvUnLock(HEAP32[$0 + 300 >> 2]);
      break label$7;
     }
     label$10: {
      if (!(HEAPU8[$0 + 307 | 0] < 23 | HEAPU8[$0 + 307 | 0] > 23)) {
       HEAP32[$0 + 296 >> 2] = jsvSkipNameAndUnLock(jsiGetClassNameFromDevice(HEAPU8[$0 + 312 | 0] - 1 & 31));
       if (jsvIsObject(HEAP32[$0 + 296 >> 2]) & 1) {
        if (HEAPU8[$0 + 312 | 0] & 32) {
         jsiExecuteEventCallbackName(HEAP32[$0 + 296 >> 2], 103953, 0, 0);
        }
        if (HEAPU8[$0 + 312 | 0] & 64) {
         jsiExecuteEventCallbackName(HEAP32[$0 + 296 >> 2], 96408, 0, 0);
        }
       }
       jsvUnLock(HEAP32[$0 + 296 >> 2]);
       break label$10;
      }
      label$15: {
       if (HEAPU8[$0 + 307 | 0] == 24) {
        jsbangle_exec_pending($0 + 312 | 0);
        break label$15;
       }
       if (!(!HEAPU8[$0 + 307 | 0] | HEAPU8[$0 + 307 | 0] > 16)) {
        HEAP32[$0 + 292 >> 2] = jsvLock(HEAPU16[93523]);
        jsvObjectIteratorNew($0 + 288 | 0, HEAP32[$0 + 292 >> 2]);
        while (1) {
         if (jsvObjectIteratorHasValue_3($0 + 288 | 0) & 1) {
          HEAP8[$0 + 287 | 0] = 0;
          HEAP32[$0 + 280 >> 2] = jsvObjectIteratorGetValue_3($0 + 288 | 0);
          HEAP8[$0 + 279 | 0] = jshGetPinFromVarAndUnLock(jsvObjectGetChildIfExists(HEAP32[$0 + 280 >> 2], 102482));
          if (jshIsEventForPin($0 + 312 | 0, HEAPU8[$0 + 279 | 0]) & 1) {
           $4 = jshGetSystemTime();
           HEAP32[$0 + 264 >> 2] = $4;
           $2 = i64toi32_i32$HIGH_BITS;
           HEAP32[$0 + 268 >> 2] = $2;
           $2 = HEAP32[$0 + 264 >> 2];
           if ($2 >>> 0 < (HEAPU8[$0 + 313 | 0] | HEAPU8[$0 + 314 | 0] << 8 | (HEAPU8[$0 + 315 | 0] << 16 | HEAPU8[$0 + 316 | 0] << 24)) >>> 0) {
            $4 = HEAP32[$0 + 264 >> 2];
            $5 = $4;
            $2 = HEAP32[$0 + 268 >> 2];
            $1 = 1;
            $1 = $2 - $1 | 0;
            $3 = $5;
            HEAP32[$0 + 264 >> 2] = $3;
            HEAP32[$0 + 268 >> 2] = $1;
           }
           $1 = HEAPU8[$0 + 313 | 0] | HEAPU8[$0 + 314 | 0] << 8 | (HEAPU8[$0 + 315 | 0] << 16 | HEAPU8[$0 + 316 | 0] << 24);
           $2 = $1;
           $5 = HEAP32[$0 + 264 >> 2];
           $1 = HEAP32[$0 + 268 >> 2];
           $5 = $1;
           $6 = $11;
           $1 = $2;
           $1 = $6 | $1;
           HEAP32[$0 + 256 >> 2] = $1;
           $2 = $5;
           HEAP32[$0 + 260 >> 2] = $2;
           HEAP8[$0 + 255 | 0] = (HEAPU8[$0 + 312 | 0] & 32) != 0;
           HEAP8[$0 + 254 | 0] = 0;
           HEAP8[$0 + 254 | 0] = (HEAPU8[$0 + 312 | 0] & 64) != 0;
           HEAP8[$0 + 253 | 0] = 0;
           HEAP32[$0 + 248 >> 2] = jsvObjectGetIntegerChild(HEAP32[$0 + 280 >> 2], 105460);
           label$22: {
            if (HEAP32[$0 + 248 >> 2] <= 0) {
             HEAP8[$0 + 253 | 0] = (HEAPU8[$0 + 254 | 0] ^ -1) & 1;
             jsvObjectSetChildAndUnLock(HEAP32[$0 + 280 >> 2], 104628, jsvNewFromBool(HEAP8[$0 + 255 | 0] & 1));
             break label$22;
            }
            HEAP8[$0 + 247 | 0] = jsvObjectGetBoolChild(HEAP32[$0 + 280 >> 2], 104628) & 1;
            HEAP32[$0 + 240 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 280 >> 2], 97407);
            label$24: {
             if (HEAP32[$0 + 240 >> 2]) {
              $2 = HEAP32[46778];
              $5 = $2;
              $1 = HEAP32[46779];
              $3 = $1;
              $1 = jsvGetLongIntegerAndUnLock(jsvObjectGetChildIfExists(HEAP32[$0 + 240 >> 2], 105007));
              $6 = $1;
              $2 = i64toi32_i32$HIGH_BITS;
              $1 = $2;
              $2 = $3;
              $3 = $2 + $1 | 0;
              $4 = $5 + $6 | 0;
              $3 = $4 >>> 0 < $6 >>> 0 ? $3 + 1 | 0 : $3;
              HEAP32[$0 + 232 >> 2] = $4;
              HEAP32[$0 + 236 >> 2] = $3;
              $3 = HEAP32[$0 + 248 >> 2];
              $5 = $3 >> 31;
              $7 = $3;
              $8 = $5;
              $5 = HEAP32[$0 + 256 >> 2];
              $2 = $5;
              $3 = HEAP32[$0 + 260 >> 2];
              $4 = $3;
              $5 = HEAP32[46779];
              $9 = $5;
              $3 = HEAP32[46778];
              $6 = $3;
              $1 = $2 - $3 | 0;
              $10 = $1;
              $5 = $4;
              $3 = $9;
              $4 = $3 + ($2 >>> 0 < $6 >>> 0) | 0;
              $4 = $5 - $4 | 0;
              $2 = $4;
              $4 = $8;
              $1 = $4 + $2 | 0;
              $5 = $7;
              $6 = $10;
              $3 = $5 + $6 | 0;
              $1 = $3 >>> 0 < $6 >>> 0 ? $1 + 1 | 0 : $1;
              jsvUnLock(jsvObjectSetChild(HEAP32[$0 + 240 >> 2], 105007, jsvNewFromLongInteger($3, $1)));
              jsvObjectSetChildAndUnLock(HEAP32[$0 + 240 >> 2], 104628, jsvNewFromBool(HEAP8[$0 + 255 | 0] & 1));
              label$26: {
               if (!(HEAP8[$0 + 254 | 0] & 1)) {
                $5 = HEAP32[$0 + 260 >> 2];
                $2 = $5;
                $1 = HEAP32[$0 + 256 >> 2];
                $4 = $1;
                $5 = HEAP32[$0 + 232 >> 2];
                $6 = $5;
                $1 = HEAP32[$0 + 236 >> 2];
                $5 = $1;
                $1 = $2;
                if ($4 >>> 0 <= $6 >>> 0 & ($5 | 0) >= ($1 | 0) | ($1 | 0) < ($5 | 0) | (HEAP8[$0 + 255 | 0] & 1) == (HEAP8[$0 + 247 | 0] & 1)) {
                 break label$26;
                }
               }
               HEAP8[$0 + 253 | 0] = (HEAPU8[$0 + 254 | 0] ^ -1) & 1;
               $4 = HEAP32[$0 + 232 >> 2];
               $6 = $4;
               $1 = HEAP32[$0 + 236 >> 2];
               $3 = $1;
               $1 = HEAP32[$0 + 248 >> 2];
               $4 = $1 >> 31;
               $7 = $4;
               $5 = $1;
               $2 = $6 - $1 | 0;
               $4 = $3;
               $1 = $7;
               $3 = $1 + ($5 >>> 0 > $6 >>> 0) | 0;
               $3 = $4 - $3 | 0;
               HEAP32[$0 + 256 >> 2] = $2;
               HEAP32[$0 + 260 >> 2] = $3;
               jsvObjectSetChildAndUnLock(HEAP32[$0 + 280 >> 2], 104628, jsvNewFromBool(HEAP8[$0 + 255 | 0] & 1));
               HEAP32[$0 + 228 >> 2] = jsvNewArray($0 + 240 | 0, 1);
               jswrap_interface_clearTimeout(HEAP32[$0 + 228 >> 2]);
               jsvUnLock(HEAP32[$0 + 228 >> 2]);
               jsvObjectRemoveChild(HEAP32[$0 + 280 >> 2], 97407);
              }
              break label$24;
             }
             label$28: {
              if (!(HEAP8[$0 + 254 | 0] & 1 | (HEAP8[$0 + 255 | 0] & 1) == (HEAP8[$0 + 247 | 0] & 1))) {
               HEAP32[$0 + 240 >> 2] = jsvNewObject();
               if (HEAP32[$0 + 240 >> 2]) {
                jsvObjectSetChild(HEAP32[$0 + 240 >> 2], 103640, HEAP32[$0 + 280 >> 2]);
                $3 = HEAP32[$0 + 248 >> 2];
                $6 = $3 >> 31;
                $7 = $3;
                $8 = $6;
                $6 = HEAP32[$0 + 256 >> 2];
                $4 = $6;
                $3 = HEAP32[$0 + 260 >> 2];
                $2 = $3;
                $6 = HEAP32[46779];
                $9 = $6;
                $3 = HEAP32[46778];
                $5 = $3;
                $1 = $4 - $3 | 0;
                $10 = $1;
                $6 = $2;
                $3 = $9;
                $2 = $3 + ($5 >>> 0 > $4 >>> 0) | 0;
                $2 = $6 - $2 | 0;
                $4 = $2;
                $2 = $8;
                $1 = $4 + $2 | 0;
                $5 = $10;
                $6 = $7;
                $3 = $5 + $6 | 0;
                $1 = $5 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
                jsvObjectSetChildAndUnLock(HEAP32[$0 + 240 >> 2], 105007, jsvNewFromLongInteger($3, $1));
                jsvObjectSetChildAndUnLock(HEAP32[$0 + 240 >> 2], 107791, jsvObjectGetChildIfExists(HEAP32[$0 + 280 >> 2], 107791));
                jsvObjectSetChildAndUnLock(HEAP32[$0 + 240 >> 2], 105012, jsvObjectGetChildIfExists(HEAP32[$0 + 280 >> 2], 105012));
                jsvObjectSetChildAndUnLock(HEAP32[$0 + 240 >> 2], 102482, jsvNewFromPin(HEAPU8[$0 + 279 | 0]));
                jsvObjectSetChildAndUnLock(HEAP32[$0 + 240 >> 2], 104628, jsvNewFromBool(HEAP8[$0 + 255 | 0] & 1));
                jsiTimerAdd(HEAP32[$0 + 240 >> 2]);
                jsvObjectSetChild(HEAP32[$0 + 280 >> 2], 97407, HEAP32[$0 + 240 >> 2]);
               }
               break label$28;
              }
              if (HEAP8[$0 + 254 | 0] & 1) {
               jsvObjectSetChildAndUnLock(HEAP32[$0 + 280 >> 2], 104628, jsvNewFromBool(HEAP8[$0 + 255 | 0] & 1));
              }
             }
            }
            jsvUnLock(HEAP32[$0 + 240 >> 2]);
           }
           if (HEAP8[$0 + 253 | 0] & 1) {
            $1 = HEAP32[$0 + 256 >> 2];
            $6 = HEAP32[$0 + 260 >> 2];
            HEAP32[$0 + 224 >> 2] = jsvNewFromFloat(jshGetMillisecondsFromTime($1, $6) / 1e3);
            if (jsiShouldExecuteWatch(HEAP32[$0 + 280 >> 2], HEAP8[$0 + 255 | 0] & 1) & 1) {
             HEAP32[$0 + 220 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 280 >> 2], 107791);
             HEAP8[$0 + 219 | 0] = jsvObjectGetBoolChild(HEAP32[$0 + 280 >> 2], 100836) & 1;
             HEAP32[$0 + 212 >> 2] = jsvNewObject();
             if (HEAP32[$0 + 212 >> 2]) {
              jsvObjectSetChildAndUnLock(HEAP32[$0 + 212 >> 2], 104628, jsvNewFromBool(HEAP8[$0 + 255 | 0] & 1));
              jsvObjectSetChildAndUnLock(HEAP32[$0 + 212 >> 2], 105012, jsvObjectGetChildIfExists(HEAP32[$0 + 280 >> 2], 105012));
              jsvObjectSetChild(HEAP32[$0 + 212 >> 2], 105007, HEAP32[$0 + 224 >> 2]);
              jsvObjectSetChildAndUnLock(HEAP32[$0 + 212 >> 2], 102482, jsvNewFromPin(HEAPU8[$0 + 279 | 0]));
              HEAP8[$0 + 211 | 0] = jshGetEventDataPin(HEAPU8[$0 + 307 | 0]);
              if (jshIsPinValid(HEAPU8[$0 + 211 | 0]) & 1) {
               jsvObjectSetChildAndUnLock(HEAP32[$0 + 212 >> 2], 107892, jsvNewFromBool((HEAPU8[$0 + 312 | 0] & 64) != 0));
              }
             }
             if (!(jsiExecuteEventCallback(0, HEAP32[$0 + 220 >> 2], 1, $0 + 212 | 0) & 1 | !(HEAP8[$0 + 219 | 0] & 1))) {
              jsError(111492, 0);
              HEAP8[186986] = HEAPU8[186986] | 4;
              HEAP8[$0 + 219 | 0] = 0;
             }
             jsvUnLock(HEAP32[$0 + 212 >> 2]);
             if (!(HEAP8[$0 + 219 | 0] & 1)) {
              jsvObjectIteratorRemoveAndGotoNext($0 + 288 | 0, HEAP32[$0 + 292 >> 2]);
              HEAP8[$0 + 287 | 0] = 1;
              if (!(jsiIsWatchingPin(HEAPU8[$0 + 279 | 0]) & 1)) {
               jshPinWatch(HEAPU8[$0 + 279 | 0], 0, 0);
              }
             }
             jsvUnLock(HEAP32[$0 + 220 >> 2]);
            }
            jsvObjectSetChildAndUnLock(HEAP32[$0 + 280 >> 2], 105012, HEAP32[$0 + 224 >> 2]);
           }
          }
          jsvUnLock(HEAP32[$0 + 280 >> 2]);
          if (!(HEAP8[$0 + 287 | 0] & 1)) {
           jsvObjectIteratorNext($0 + 288 | 0);
          }
          continue;
         }
         break;
        }
        jsvObjectIteratorFree_3($0 + 288 | 0);
        jsvUnLock(HEAP32[$0 + 292 >> 2]);
       }
      }
     }
    }
   }
   continue;
  }
  break;
 }
 if ((jshGetEventsUsed() | 0) < 95) {
  jshSetFlowControlAllReady();
 }
 HEAP32[$0 + 200 >> 2] = -1;
 HEAP32[$0 + 204 >> 2] = 2147483647;
 $6 = jshGetSystemTime();
 HEAP32[$0 + 192 >> 2] = $6;
 $1 = i64toi32_i32$HIGH_BITS;
 HEAP32[$0 + 196 >> 2] = $1;
 $1 = HEAP32[$0 + 192 >> 2];
 $2 = $1;
 $6 = HEAP32[$0 + 196 >> 2];
 $3 = $6;
 $1 = HEAP32[46779];
 $7 = $1;
 $6 = HEAP32[46778];
 $5 = $6;
 $4 = $2 - $5 | 0;
 HEAP32[$0 + 184 >> 2] = $4;
 $1 = $3;
 $6 = $7;
 $3 = $6 + ($2 >>> 0 < $5 >>> 0) | 0;
 $3 = $1 - $3 | 0;
 HEAP32[$0 + 188 >> 2] = $3;
 $2 = HEAP32[$0 + 196 >> 2];
 $3 = HEAP32[$0 + 192 >> 2];
 HEAP32[46778] = $3;
 HEAP32[46779] = $2;
 HEAP32[$0 + 180 >> 2] = jsvLock(HEAPU16[93522]);
 jsvObjectIteratorNew($0 + 176 | 0, HEAP32[$0 + 180 >> 2]);
 while (1) {
  if (jsvObjectIteratorHasValue_3($0 + 176 | 0) & 1) {
   HEAP32[$0 + 172 >> 2] = jsvObjectIteratorGetValue_3($0 + 176 | 0);
   $2 = jsvGetLongIntegerAndUnLock(jsvObjectGetChildIfExists(HEAP32[$0 + 172 >> 2], 105007));
   HEAP32[$0 + 160 >> 2] = $2;
   $3 = i64toi32_i32$HIGH_BITS;
   HEAP32[$0 + 164 >> 2] = $3;
   $3 = HEAP32[$0 + 160 >> 2];
   $1 = $3;
   $2 = HEAP32[$0 + 164 >> 2];
   $4 = $2;
   $3 = HEAP32[$0 + 188 >> 2];
   $7 = $3;
   $2 = HEAP32[$0 + 184 >> 2];
   $5 = $2;
   $6 = $1 - $2 | 0;
   HEAP32[$0 + 152 >> 2] = $6;
   $3 = $4;
   $2 = $7;
   $4 = $2 + ($1 >>> 0 < $5 >>> 0) | 0;
   $4 = $3 - $4 | 0;
   HEAP32[$0 + 156 >> 2] = $4;
   $4 = HEAP32[$0 + 152 >> 2];
   $1 = HEAP32[$0 + 156 >> 2];
   jsvObjectSetChildAndUnLock(HEAP32[$0 + 172 >> 2], 105007, jsvNewFromLongInteger($4, $1));
   jsvUnLock(HEAP32[$0 + 172 >> 2]);
   jsvObjectIteratorNext($0 + 176 | 0);
   continue;
  }
  break;
 }
 jsvObjectIteratorFree_3($0 + 176 | 0);
 while (1) {
  HEAP16[93524] = HEAPU16[93524] & -5;
  jsvObjectIteratorNew($0 + 176 | 0, HEAP32[$0 + 180 >> 2]);
  while (1) {
   $5 = 0;
   if (jsvObjectIteratorHasValue_3($0 + 176 | 0) & 1) {
    $5 = (HEAPU16[93524] & 4) != 0 ^ -1;
   }
   if ($5 & 1) {
    HEAP8[$0 + 151 | 0] = 0;
    HEAP32[$0 + 144 >> 2] = jsvObjectIteratorGetValue_3($0 + 176 | 0);
    $1 = jsvGetLongIntegerAndUnLock(jsvObjectGetChildIfExists(HEAP32[$0 + 144 >> 2], 105007));
    HEAP32[$0 + 136 >> 2] = $1;
    $4 = i64toi32_i32$HIGH_BITS;
    HEAP32[$0 + 140 >> 2] = $4;
    $4 = HEAP32[$0 + 136 >> 2];
    $3 = $4;
    $1 = HEAP32[$0 + 140 >> 2];
    if (!$3 & ($1 | 0) <= 0 | ($1 | 0) < 0) {
     jsiSetBusy(1, 1);
     HEAP8[$0 + 319 | 0] = 1;
     HEAP32[$0 + 132 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 144 >> 2], 107791);
     HEAP32[$0 + 128 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 144 >> 2], 103640);
     HEAP8[$0 + 127 | 0] = 1;
     HEAP32[$0 + 120 >> 2] = 0;
     if (HEAP32[$0 + 128 >> 2]) {
      HEAP8[$0 + 119 | 0] = jsvObjectGetBoolChild(HEAP32[$0 + 128 >> 2], 104628) & 1;
      HEAP8[$0 + 118 | 0] = jsvObjectGetBoolChild(HEAP32[$0 + 144 >> 2], 104628) & 1;
      jsvObjectSetChildAndUnLock(HEAP32[$0 + 128 >> 2], 104628, jsvNewFromBool(HEAP8[$0 + 118 | 0] & 1));
      HEAP8[$0 + 127 | 0] = 0;
      if ((HEAP8[$0 + 119 | 0] & 1) != (HEAP8[$0 + 118 | 0] & 1)) {
       HEAP32[$0 + 112 >> 2] = jsvObjectGetIntegerChild(HEAP32[$0 + 128 >> 2], 105460);
       $3 = HEAP32[46778];
       $5 = $3;
       $1 = HEAP32[46779];
       $6 = $1;
       $3 = HEAP32[$0 + 140 >> 2];
       $7 = $3;
       $1 = HEAP32[$0 + 136 >> 2];
       $4 = $1;
       $2 = $1 + $5 | 0;
       $3 = $6;
       $1 = $7;
       $6 = $3 + $1 | 0;
       $6 = $2 >>> 0 < $4 >>> 0 ? $6 + 1 | 0 : $6;
       $3 = $6;
       $6 = HEAP32[$0 + 112 >> 2];
       $5 = $6 >> 31;
       $7 = $5;
       $4 = $6;
       $1 = $2 - $4 | 0;
       $5 = $3;
       $6 = $7;
       $2 = $6 + ($4 >>> 0 > $2 >>> 0) | 0;
       $2 = $5 - $2 | 0;
       HEAP32[$0 + 108 >> 2] = jsvNewFromFloat(jshGetMillisecondsFromTime($1, $2) / 1e3);
       if (jsiShouldExecuteWatch(HEAP32[$0 + 128 >> 2], HEAP8[$0 + 118 | 0] & 1) & 1) {
        HEAP32[$0 + 120 >> 2] = jsvNewObject();
        if (HEAP32[$0 + 120 >> 2]) {
         HEAP8[$0 + 127 | 0] = 1;
         jsvObjectSetChildAndUnLock(HEAP32[$0 + 120 >> 2], 104628, jsvNewFromBool(HEAP8[$0 + 118 | 0] & 1));
         jsvObjectSetChildAndUnLock(HEAP32[$0 + 120 >> 2], 105012, jsvObjectGetChildIfExists(HEAP32[$0 + 128 >> 2], 105012));
         jsvObjectSetChild(HEAP32[$0 + 120 >> 2], 105007, HEAP32[$0 + 108 >> 2]);
         jsvObjectSetChildAndUnLock(HEAP32[$0 + 120 >> 2], 102482, jsvObjectGetChildIfExists(HEAP32[$0 + 128 >> 2], 102482));
        }
       }
       jsvObjectSetChildAndUnLock(HEAP32[$0 + 128 >> 2], 105012, HEAP32[$0 + 108 >> 2]);
      }
     }
     HEAP8[$0 + 107 | 0] = 0;
     if (HEAP8[$0 + 127 | 0] & 1) {
      label$53: {
       if (HEAP32[$0 + 120 >> 2]) {
        HEAP8[$0 + 106 | 0] = jsiExecuteEventCallback(0, HEAP32[$0 + 132 >> 2], 1, $0 + 120 | 0) & 1;
        break label$53;
       }
       HEAP32[$0 + 100 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 144 >> 2], 100307);
       HEAP8[$0 + 106 | 0] = jsiExecuteEventCallbackArgsArray(0, HEAP32[$0 + 132 >> 2], HEAP32[$0 + 100 >> 2]) & 1;
       jsvUnLock(HEAP32[$0 + 100 >> 2]);
      }
      if (!(HEAP8[$0 + 106 | 0] & 1)) {
       HEAP32[$0 + 96 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 144 >> 2], 100885);
       if (HEAP32[$0 + 96 >> 2]) {
        jsvUnLock(HEAP32[$0 + 96 >> 2]);
        jsError(111444, 0);
        HEAP8[186986] = HEAPU8[186986] | 4;
        HEAP8[$0 + 107 | 0] = 1;
       }
      }
     }
     jsvUnLock(HEAP32[$0 + 120 >> 2]);
     if (HEAP32[$0 + 128 >> 2]) {
      jsvObjectRemoveChild(HEAP32[$0 + 128 >> 2], 97407);
      if (HEAP8[$0 + 127 | 0] & 1) {
       HEAP8[$0 + 95 | 0] = jsvObjectGetBoolChild(HEAP32[$0 + 128 >> 2], 100836) & 1;
       if (!(HEAP8[$0 + 95 | 0] & 1)) {
        HEAP32[$0 + 88 >> 2] = jsvLock(HEAPU16[93523]);
        HEAP32[$0 + 84 >> 2] = jsvGetIndexOf(HEAP32[$0 + 88 >> 2], HEAP32[$0 + 128 >> 2], 1);
        if (HEAP32[$0 + 84 >> 2]) {
         jsvRemoveChildAndUnLock(HEAP32[$0 + 88 >> 2], HEAP32[$0 + 84 >> 2]);
        }
        jsvUnLock(HEAP32[$0 + 88 >> 2]);
        HEAP8[$0 + 83 | 0] = jshGetPinFromVarAndUnLock(jsvObjectGetChildIfExists(HEAP32[$0 + 128 >> 2], 102482));
        if (!(jsiIsWatchingPin(HEAPU8[$0 + 83 | 0]) & 1)) {
         jshPinWatch(HEAPU8[$0 + 83 | 0], 0, 0);
        }
       }
      }
      jsvUnLock(HEAP32[$0 + 128 >> 2]);
     }
     HEAP32[$0 + 76 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 144 >> 2], 100885);
     label$62: {
      if (!(!HEAP32[$0 + 76 >> 2] | HEAP8[$0 + 107 | 0] & 1)) {
       $2 = HEAP32[$0 + 136 >> 2];
       $5 = $2;
       $3 = HEAP32[$0 + 140 >> 2];
       $1 = $3;
       $3 = jsvGetLongInteger(HEAP32[$0 + 76 >> 2]);
       $4 = $3;
       $2 = i64toi32_i32$HIGH_BITS;
       $3 = $2;
       $2 = $1;
       $1 = $2 + $3 | 0;
       $6 = $4 + $5 | 0;
       HEAP32[$0 + 136 >> 2] = $6;
       $1 = $4 >>> 0 > $6 >>> 0 ? $1 + 1 | 0 : $1;
       HEAP32[$0 + 140 >> 2] = $1;
       $1 = HEAP32[$0 + 136 >> 2];
       $5 = HEAP32[$0 + 140 >> 2];
       jsvObjectSetChildAndUnLock(HEAP32[$0 + 144 >> 2], 105007, jsvNewFromLongInteger($1, $5));
       break label$62;
      }
      jsvObjectIteratorRemoveAndGotoNext($0 + 176 | 0, HEAP32[$0 + 180 >> 2]);
      HEAP8[$0 + 151 | 0] = 1;
      HEAP32[$0 + 136 >> 2] = -1;
      HEAP32[$0 + 140 >> 2] = -1;
     }
     jsvUnLock2(HEAP32[$0 + 132 >> 2], HEAP32[$0 + 76 >> 2]);
    }
    $5 = HEAP32[$0 + 136 >> 2];
    $1 = HEAP32[$0 + 140 >> 2];
    label$64: {
     if (($1 | 0) < 0) {
      break label$64;
     }
     $2 = HEAP32[$0 + 136 >> 2];
     $4 = $2;
     $1 = HEAP32[$0 + 140 >> 2];
     $3 = $1;
     $2 = HEAP32[$0 + 204 >> 2];
     $6 = $2;
     $1 = HEAP32[$0 + 200 >> 2];
     $5 = $1;
     $2 = $3;
     $1 = $6;
     if ($5 >>> 0 <= $4 >>> 0 & ($2 | 0) >= ($1 | 0) | ($1 | 0) < ($2 | 0)) {
      break label$64;
     }
     $2 = HEAP32[$0 + 140 >> 2];
     $4 = HEAP32[$0 + 136 >> 2];
     HEAP32[$0 + 200 >> 2] = $4;
     HEAP32[$0 + 204 >> 2] = $2;
    }
    if (!(HEAP8[$0 + 151 | 0] & 1)) {
     jsvObjectIteratorNext($0 + 176 | 0);
    }
    jsvUnLock(HEAP32[$0 + 144 >> 2]);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree_3($0 + 176 | 0);
  if (HEAPU16[93524] & 4) {
   continue;
  }
  break;
 }
 jsvUnLock(HEAP32[$0 + 180 >> 2]);
 if (jswIdle() & 1) {
  HEAP8[$0 + 319 | 0] = 1;
 }
 label$67: {
  if (!(HEAP8[$0 + 319 | 0] & 1)) {
   if (jsvArrayIsEmpty(HEAP32[46760]) & 1) {
    break label$67;
   }
  }
  HEAP8[187066] = 0;
 }
 if (HEAP8[$0 + 319 | 0] & 1) {
  jsiSetBusy(1, 0);
 }
 if (!(jspIsInterrupted() & 1)) {
  jsiExecuteEvents();
 }
 if (HEAPU16[93524] & 224) {
  jsiSetBusy(1, 1);
  HEAP16[$0 + 74 >> 1] = HEAPU16[93524];
  if ((HEAPU16[$0 + 74 >> 1] & 128) == 128) {
   jsiKill();
   jsvReset();
   jshReset();
   jsiSemiInit(0, 0);
   HEAP16[93524] = HEAPU16[93524] & 65407;
  }
  if ((HEAPU16[$0 + 74 >> 1] & 32) == 32) {
   jsvGarbageCollect();
   jsiSoftKill();
   jspSoftKill();
   jsvSoftKill();
   jsfSaveToFlash();
   jshReset();
   jsvSoftInit();
   jspSoftInit();
   jsiSoftInit(0);
   HEAP16[93524] = HEAPU16[93524] & 65503;
  }
  if ((HEAPU16[$0 + 74 >> 1] & 64) == 64) {
   HEAP32[$0 + 68 >> 2] = jsvObjectGetChildIfExists(HEAP32[46748], 106898);
   label$75: {
    if (HEAP32[$0 + 68 >> 2]) {
     jsfNameFromVarAndUnLock($0 + 40 | 0, HEAP32[$0 + 68 >> 2]);
     jsiKill();
     jsvReset();
     jshReset();
     jsiSemiInit(0, $0 + 40 | 0);
     HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 64 >> 2];
     $4 = HEAP32[$0 + 60 >> 2];
     $2 = HEAP32[$0 + 56 >> 2];
     HEAP32[$0 + 24 >> 2] = $2;
     HEAP32[$0 + 28 >> 2] = $4;
     $2 = HEAP32[$0 + 52 >> 2];
     $4 = HEAP32[$0 + 48 >> 2];
     HEAP32[$0 + 16 >> 2] = $4;
     HEAP32[$0 + 20 >> 2] = $2;
     $4 = HEAP32[$0 + 44 >> 2];
     $2 = HEAP32[$0 + 40 >> 2];
     HEAP32[$0 + 8 >> 2] = $2;
     HEAP32[$0 + 12 >> 2] = $4;
     HEAP32[$0 + 36 >> 2] = jsfReadFile($0 + 8 | 0, 0, 0);
     if (HEAP32[$0 + 36 >> 2]) {
      jsvUnLock2(jspEvaluateVar(HEAP32[$0 + 36 >> 2], 0, 0), HEAP32[$0 + 36 >> 2]);
     }
     break label$75;
    }
    jsiSoftKill();
    jspSoftKill();
    jsvSoftKill();
    jsvReset();
    jshReset();
    jsfLoadStateFromFlash();
    jsvSoftInit();
    jspSoftInit();
    jsiSoftInit(0);
   }
   HEAP16[93524] = HEAPU16[93524] & 65471;
  }
  jsiSetBusy(1, 0);
 }
 if (HEAPU16[93524] & 512) {
  jshKickWatchDog();
 }
 label$79: {
  label$80: {
   if (HEAPU8[187066] != 1) {
    break label$80;
   }
   $4 = HEAP32[$0 + 200 >> 2];
   $5 = $4;
   $2 = HEAP32[$0 + 204 >> 2];
   $1 = $2;
   $2 = jshGetTimeFromMilliseconds(10);
   $3 = $2;
   $4 = i64toi32_i32$HIGH_BITS;
   $2 = $4;
   $4 = $1;
   $1 = $3;
   if (($4 | 0) <= ($2 | 0) & $5 >>> 0 <= $1 >>> 0 | ($2 | 0) > ($4 | 0)) {
    break label$80;
   }
   if (jsvMoreFreeVariablesThan(125) & 1) {
    break label$80;
   }
   jsiSetBusy(1, 1);
   jsvGarbageCollect();
   jsiSetBusy(1, 0);
   break label$79;
  }
  if (!HEAPU8[187066]) {
   break label$79;
  }
  if (jshHasEvents() & 1) {
   break label$79;
  }
  $5 = HEAP32[$0 + 200 >> 2];
  $4 = HEAP32[$0 + 204 >> 2];
  jshSleep($5, $4);
 }
 __stack_pointer = $0 + 320 | 0;
}

function jslGetNextToken() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 12 >> 2] = HEAP16[HEAP32[38615] + 2 >> 1];
 HEAP16[HEAP32[38615] + 2 >> 1] = 0;
 HEAP8[HEAP32[38615] + 80 | 0] = 0;
 if (HEAP32[HEAP32[38615] + 76 >> 2]) {
  jsvUnLock(HEAP32[HEAP32[38615] + 76 >> 2]);
  HEAP32[HEAP32[38615] + 76 >> 2] = 0;
 }
 HEAP32[HEAP32[38615] + 8 >> 2] = HEAP32[HEAP32[38615] + 4 >> 2];
 HEAP8[$0 + 11 | 0] = HEAPU8[HEAP32[38615]];
 if (HEAPU8[$0 + 11 | 0] > 124) {
  HEAP8[$0 + 11 | 0] = 0;
 }
 label$3: {
  label$4: {
   label$5: {
    label$6: {
     label$7: {
      label$8: {
       label$9: {
        label$10: {
         label$11: {
          label$12: {
           label$13: {
            label$14: {
             label$15: {
              label$16: {
               label$17: {
                label$18: {
                 label$19: {
                  while (1) {
                   label$21: {
                    $1 = jsvStringIteratorGetIndex(HEAP32[38615] + 88 | 0);
                    HEAP32[HEAP32[38615] + 4 >> 2] = $1 - 1;
                    label$22: {
                     switch (HEAPU8[HEAPU8[$0 + 11 | 0] + 94880 | 0]) {
                     case 12:
                      break label$10;

                     case 13:
                      break label$11;

                     case 10:
                      break label$12;

                     case 9:
                      break label$13;

                     case 8:
                      break label$14;

                     case 7:
                      break label$15;

                     case 6:
                      break label$16;

                     case 4:
                      break label$17;

                     case 3:
                      break label$18;

                     case 2:
                      break label$19;

                     case 0:
                      break label$21;

                     case 1:
                      break label$22;

                     case 17:
                      break label$4;

                     case 15:
                      break label$5;

                     case 16:
                      break label$6;

                     case 11:
                      break label$7;

                     case 14:
                      break label$8;

                     case 5:
                      break label$9;

                     default:
                      break label$3;
                     }
                    }
                    jslSkipWhiteSpace();
                    HEAP8[$0 + 11 | 0] = HEAPU8[HEAP32[38615]];
                    if (HEAPU8[$0 + 11 | 0] > 124) {
                     HEAP8[$0 + 11 | 0] = 0;
                    }
                    if (HEAPU8[$0 + 11 | 0] == 47) {
                     HEAP8[$0 + 11 | 0] = 125;
                    }
                    continue;
                   }
                   break;
                  }
                  jslSingleChar();
                  label$25: {
                   if (HEAP16[HEAP32[38615] + 2 >> 1] == 175) {
                    HEAP8[HEAP32[38615] + 81 | 0] = 1;
                    break label$25;
                   }
                   if (!(HEAP16[HEAP32[38615] + 2 >> 1] != 209 & HEAP16[HEAP32[38615] + 2 >> 1] != 210)) {
                    jslGetRawString();
                   }
                  }
                  break label$3;
                 }
                 while (1) {
                  $1 = 1;
                  label$30: {
                   if (isAlphaInline(HEAP8[HEAP32[38615]]) & 1) {
                    break label$30;
                   }
                   $1 = 1;
                   if (isNumericInline(HEAP8[HEAP32[38615]]) & 1) {
                    break label$30;
                   }
                   $1 = HEAP8[HEAP32[38615]] == 36;
                  }
                  if ($1) {
                   jslTokenAppendChar(HEAP8[HEAP32[38615]]);
                   jslGetNextCh();
                   continue;
                  }
                  break;
                 }
                 HEAP16[HEAP32[38615] + 2 >> 1] = 128;
                 if (!HEAPU8[HEAP32[38615] + 13 | 0]) {
                  break label$3;
                 }
                 label$32: {
                  label$33: {
                   switch (HEAP8[HEAP32[38615] + 12 | 0] - 98 | 0) {
                   case 0:
                    jslCheckToken(103127, 168);
                    break label$32;

                   case 1:
                    if (!(jslCheckToken(104734, 188) & 1)) {
                     if (!(jslCheckToken(103641, 178) & 1)) {
                      if (!(jslCheckToken(100055, 194) & 1)) {
                       if (!(jslCheckToken(97497, 174) & 1)) {
                        jslCheckToken(104401, 169);
                       }
                      }
                     }
                    }
                    break label$32;

                   case 2:
                    if (!(jslCheckToken(97852, 189) & 1)) {
                     if (!(jslCheckToken(104622, 190) & 1)) {
                      if (!(jslCheckToken(102055, 165) & 1)) {
                       jslCheckToken(101245, 193);
                      }
                     }
                    }
                    break label$32;

                   case 3:
                    if (!(jslCheckToken(104722, 164) & 1)) {
                     jslCheckToken(100610, 195);
                    }
                    break label$32;

                   case 4:
                    if (!(jslCheckToken(104721, 181) & 1)) {
                     if (!(jslCheckToken(96499, 179) & 1)) {
                      if (!(jslCheckToken(101103, 167) & 1)) {
                       jslCheckToken(102354, 170);
                      }
                     }
                    }
                    break label$32;

                   case 7:
                    if (!(jslCheckToken(104144, 163) & 1)) {
                     if (!(jslCheckToken(102559, 185) & 1)) {
                      jslCheckToken(104041, 186);
                     }
                    }
                    break label$32;

                   case 10:
                    jslCheckToken(98053, 173);
                    break label$32;

                   case 12:
                    if (!(jslCheckToken(97015, 184) & 1)) {
                     jslCheckToken(102721, 182);
                    }
                    break label$32;

                   case 13:
                    jslCheckToken(104144, 198);
                    break label$32;

                   case 16:
                    jslCheckToken(102080, 171);
                    break label$32;

                   case 17:
                    if (!(jslCheckToken(107753, 197) & 1)) {
                     if (!(jslCheckToken(101159, 196) & 1)) {
                      jslCheckToken(103505, 187);
                     }
                    }
                    break label$32;

                   case 18:
                    label$64: {
                     if (jslCheckToken(100298, 175) & 1) {
                      HEAP8[HEAP32[38615] + 81 | 0] = 1;
                      break label$64;
                     }
                     if (!(jslCheckToken(96765, 176) & 1)) {
                      if (!(jslCheckToken(104397, 180) & 1)) {
                       if (!(jslCheckToken(96433, 177) & 1)) {
                        jslCheckToken(104035, 191);
                       }
                      }
                     }
                    }
                    break label$32;

                   case 19:
                    jslCheckToken(106577, 183);
                    break label$32;

                   case 21:
                    jslCheckToken(105045, 166);
                    break label$32;

                   case 20:
                    break label$33;

                   default:
                    break label$32;
                   }
                  }
                  if (!(jslCheckToken(101594, 172) & 1)) {
                   jslCheckToken(105933, 192);
                  }
                 }
                 break label$3;
                }
                HEAP8[$0 + 10 | 0] = 1;
                label$70: {
                 if (HEAP8[HEAP32[38615]] == 46) {
                  jslGetNextCh();
                  label$72: {
                   if (isNumericInline(HEAP8[HEAP32[38615]]) & 1) {
                    HEAP16[HEAP32[38615] + 2 >> 1] = 130;
                    jslTokenAppendChar(46);
                    break label$72;
                   }
                   HEAP16[HEAP32[38615] + 2 >> 1] = 46;
                   break label$3;
                  }
                  break label$70;
                 }
                 if (HEAP8[HEAP32[38615]] == 48) {
                  jslTokenAppendChar(HEAP8[HEAP32[38615]]);
                  jslGetNextCh();
                  label$75: {
                   label$76: {
                    if (HEAP8[HEAP32[38615]] == 120 | HEAP8[HEAP32[38615]] == 88 | (HEAP8[HEAP32[38615]] == 98 | HEAP8[HEAP32[38615]] == 66)) {
                     break label$76;
                    }
                    if (HEAP8[HEAP32[38615]] == 111) {
                     break label$76;
                    }
                    if (HEAP8[HEAP32[38615]] != 79) {
                     break label$75;
                    }
                   }
                   HEAP8[$0 + 10 | 0] = 0;
                   jslTokenAppendChar(HEAP8[HEAP32[38615]]);
                   jslGetNextCh();
                  }
                 }
                 HEAP16[HEAP32[38615] + 2 >> 1] = 129;
                 while (1) {
                  $1 = 1;
                  label$78: {
                   if (isNumericInline(HEAP8[HEAP32[38615]]) & 1) {
                    break label$78;
                   }
                   if (!(HEAP8[$0 + 10 | 0] & 1)) {
                    $1 = 1;
                    if (isHexadecimal(HEAP8[HEAP32[38615]]) & 1) {
                     break label$78;
                    }
                   }
                   $1 = HEAP8[HEAP32[38615]] == 95;
                  }
                  if ($1) {
                   if (HEAP8[HEAP32[38615]] != 95) {
                    jslTokenAppendChar(HEAP8[HEAP32[38615]]);
                   }
                   jslGetNextCh();
                   continue;
                  }
                  break;
                 }
                 if (!(!(HEAP8[$0 + 10 | 0] & 1) | HEAP8[HEAP32[38615]] != 46)) {
                  HEAP16[HEAP32[38615] + 2 >> 1] = 130;
                  jslTokenAppendChar(46);
                  jslGetNextCh();
                 }
                }
                if (HEAP16[HEAP32[38615] + 2 >> 1] == 130) {
                 while (1) {
                  $1 = 1;
                  if (!(isNumeric(HEAP8[HEAP32[38615]]) & 1)) {
                   $1 = HEAP8[HEAP32[38615]] == 95;
                  }
                  if ($1) {
                   if (HEAP8[HEAP32[38615]] != 95) {
                    jslTokenAppendChar(HEAP8[HEAP32[38615]]);
                   }
                   jslGetNextCh();
                   continue;
                  }
                  break;
                 }
                }
                if (!(!(HEAP8[$0 + 10 | 0] & 1) | HEAP8[HEAP32[38615]] != 101 & HEAP8[HEAP32[38615]] != 69)) {
                 HEAP16[HEAP32[38615] + 2 >> 1] = 130;
                 jslTokenAppendChar(HEAP8[HEAP32[38615]]);
                 jslGetNextCh();
                 if (!(HEAP8[HEAP32[38615]] != 45 & HEAP8[HEAP32[38615]] != 43)) {
                  jslTokenAppendChar(HEAP8[HEAP32[38615]]);
                  jslGetNextCh();
                 }
                 while (1) {
                  $1 = 1;
                  if (!(isNumeric(HEAP8[HEAP32[38615]]) & 1)) {
                   $1 = HEAP8[HEAP32[38615]] == 95;
                  }
                  if ($1) {
                   if (HEAP8[HEAP32[38615]] != 95) {
                    jslTokenAppendChar(HEAP8[HEAP32[38615]]);
                   }
                   jslGetNextCh();
                   continue;
                  }
                  break;
                 }
                }
                break label$3;
               }
               jslLexString();
               break label$3;
              }
              jslSingleChar();
              if (HEAP8[HEAP32[38615]] == 61) {
               HEAP16[HEAP32[38615] + 2 >> 1] = 140;
               jslGetNextCh();
               if (HEAP8[HEAP32[38615]] == 61) {
                HEAP16[HEAP32[38615] + 2 >> 1] = 141;
                jslGetNextCh();
               }
              }
              break label$3;
             }
             jslSingleChar();
             label$98: {
              if (HEAP8[HEAP32[38615]] == 61) {
               HEAP16[HEAP32[38615] + 2 >> 1] = 150;
               jslGetNextCh();
               break label$98;
              }
              if (HEAP8[HEAP32[38615]] == 43) {
               HEAP16[HEAP32[38615] + 2 >> 1] = 152;
               jslGetNextCh();
              }
             }
             break label$3;
            }
            jslSingleChar();
            label$101: {
             if (HEAP8[HEAP32[38615]] == 61) {
              HEAP16[HEAP32[38615] + 2 >> 1] = 151;
              jslGetNextCh();
              break label$101;
             }
             if (HEAP8[HEAP32[38615]] == 45) {
              HEAP16[HEAP32[38615] + 2 >> 1] = 153;
              jslGetNextCh();
             }
            }
            break label$3;
           }
           jslSingleChar();
           label$104: {
            if (HEAP8[HEAP32[38615]] == 61) {
             HEAP16[HEAP32[38615] + 2 >> 1] = 157;
             jslGetNextCh();
             break label$104;
            }
            if (HEAP8[HEAP32[38615]] == 38) {
             HEAP16[HEAP32[38615] + 2 >> 1] = 158;
             jslGetNextCh();
            }
           }
           break label$3;
          }
          jslSingleChar();
          label$107: {
           if (HEAP8[HEAP32[38615]] == 61) {
            HEAP16[HEAP32[38615] + 2 >> 1] = 159;
            jslGetNextCh();
            break label$107;
           }
           if (HEAP8[HEAP32[38615]] == 124) {
            HEAP16[HEAP32[38615] + 2 >> 1] = 160;
            jslGetNextCh();
           }
          }
          break label$3;
         }
         jslSingleChar();
         if (HEAP8[HEAP32[38615]] == 61) {
          HEAP16[HEAP32[38615] + 2 >> 1] = 161;
          jslGetNextCh();
         }
         break label$3;
        }
        jslSingleChar();
        if (HEAP8[HEAP32[38615]] == 61) {
         HEAP16[HEAP32[38615] + 2 >> 1] = 154;
         jslGetNextCh();
        }
        break label$3;
       }
       jslSingleChar();
       if (HEAP8[HEAP32[38615]] == 63) {
        HEAP16[HEAP32[38615] + 2 >> 1] = 208;
        jslGetNextCh();
       }
       break label$3;
      }
      label$113: {
       label$114: {
        label$115: {
         if (!HEAP32[$0 + 12 >> 2]) {
          break label$115;
         }
         label$116: {
          if (HEAP32[$0 + 12 >> 2] < 138 | HEAP32[$0 + 12 >> 2] > 208 | (HEAP32[$0 + 12 >> 2] == 180 | HEAP32[$0 + 12 >> 2] == 181)) {
           break label$116;
          }
          if (HEAP32[$0 + 12 >> 2] == 182) {
           break label$116;
          }
          if (HEAP32[$0 + 12 >> 2] != 183) {
           break label$115;
          }
         }
         if (HEAP32[$0 + 12 >> 2] == 33 | HEAP32[$0 + 12 >> 2] == 37 | (HEAP32[$0 + 12 >> 2] == 38 | HEAP32[$0 + 12 >> 2] == 42)) {
          break label$115;
         }
         if (HEAP32[$0 + 12 >> 2] == 43 | HEAP32[$0 + 12 >> 2] == 45 | (HEAP32[$0 + 12 >> 2] == 47 | HEAP32[$0 + 12 >> 2] == 60)) {
          break label$115;
         }
         if (HEAP32[$0 + 12 >> 2] == 61 | HEAP32[$0 + 12 >> 2] == 62 | (HEAP32[$0 + 12 >> 2] == 63 | HEAP32[$0 + 12 >> 2] == 91)) {
          break label$115;
         }
         if (HEAP32[$0 + 12 >> 2] == 123 | HEAP32[$0 + 12 >> 2] == 125 | (HEAP32[$0 + 12 >> 2] == 40 | HEAP32[$0 + 12 >> 2] == 44)) {
          break label$115;
         }
         if (HEAP32[$0 + 12 >> 2] == 59) {
          break label$115;
         }
         if (HEAP32[$0 + 12 >> 2] != 58) {
          break label$114;
         }
        }
        jslLexRegex();
        break label$113;
       }
       jslSingleChar();
       if (HEAP8[HEAP32[38615]] == 61) {
        HEAP16[HEAP32[38615] + 2 >> 1] = 155;
        jslGetNextCh();
       }
      }
      break label$3;
     }
     jslSingleChar();
     if (HEAP8[HEAP32[38615]] == 61) {
      HEAP16[HEAP32[38615] + 2 >> 1] = 156;
      jslGetNextCh();
     }
     break label$3;
    }
    jslSingleChar();
    label$119: {
     if (HEAP8[HEAP32[38615]] == 61) {
      HEAP16[HEAP32[38615] + 2 >> 1] = 138;
      jslGetNextCh();
      if (HEAP8[HEAP32[38615]] == 61) {
       HEAP16[HEAP32[38615] + 2 >> 1] = 139;
       jslGetNextCh();
      }
      break label$119;
     }
     if (HEAP8[HEAP32[38615]] == 62) {
      HEAP16[HEAP32[38615] + 2 >> 1] = 162;
      jslGetNextCh();
     }
    }
    break label$3;
   }
   jslSingleChar();
   label$123: {
    if (HEAP8[HEAP32[38615]] == 61) {
     HEAP16[HEAP32[38615] + 2 >> 1] = 142;
     jslGetNextCh();
     break label$123;
    }
    if (HEAP8[HEAP32[38615]] == 60) {
     HEAP16[HEAP32[38615] + 2 >> 1] = 143;
     jslGetNextCh();
     if (HEAP8[HEAP32[38615]] == 61) {
      HEAP16[HEAP32[38615] + 2 >> 1] = 144;
      jslGetNextCh();
     }
    }
   }
   break label$3;
  }
  jslSingleChar();
  label$127: {
   if (HEAP8[HEAP32[38615]] == 61) {
    HEAP16[HEAP32[38615] + 2 >> 1] = 145;
    jslGetNextCh();
    break label$127;
   }
   if (HEAP8[HEAP32[38615]] == 62) {
    HEAP16[HEAP32[38615] + 2 >> 1] = 146;
    jslGetNextCh();
    label$130: {
     if (HEAP8[HEAP32[38615]] == 61) {
      HEAP16[HEAP32[38615] + 2 >> 1] = 148;
      jslGetNextCh();
      break label$130;
     }
     if (HEAP8[HEAP32[38615]] == 62) {
      jslGetNextCh();
      label$133: {
       if (HEAP8[HEAP32[38615]] == 61) {
        HEAP16[HEAP32[38615] + 2 >> 1] = 149;
        jslGetNextCh();
        break label$133;
       }
       HEAP16[HEAP32[38615] + 2 >> 1] = 147;
      }
     }
    }
   }
  }
 }
 __stack_pointer = $0 + 16 | 0;
}

function jswrap_graphics_drawImage($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0;
 $5 = __stack_pointer - 784 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 776 >> 2] = $0;
 HEAP32[$5 + 772 >> 2] = $1;
 HEAP32[$5 + 768 >> 2] = $2;
 HEAP32[$5 + 764 >> 2] = $3;
 HEAP32[$5 + 760 >> 2] = $4;
 label$1: {
  if (!(graphicsGetFromVar($5 + 688 | 0, HEAP32[$5 + 776 >> 2]) & 1)) {
   HEAP32[$5 + 780 >> 2] = 0;
   break label$1;
  }
  if (!(_jswrap_graphics_parseImage($5 + 688 | 0, HEAP32[$5 + 772 >> 2], 0, $5 + 600 | 0) & 1)) {
   HEAP32[$5 + 780 >> 2] = 0;
   break label$1;
  }
  HEAPF64[$5 + 592 >> 3] = 1;
  HEAPF64[$5 + 584 >> 3] = 0;
  HEAP8[$5 + 583 | 0] = 0;
  HEAP8[$5 + 582 | 0] = 0;
  if (jsvIsObject(HEAP32[$5 + 760 >> 2]) & 1) {
   HEAP32[$5 + 576 >> 2] = jsvObjectGetIntegerChild(HEAP32[$5 + 760 >> 2], 105027);
   if (HEAP32[$5 + 576 >> 2] > 0) {
    HEAP32[$5 + 624 >> 2] = HEAP32[$5 + 624 >> 2] + Math_imul(HEAPU16[$5 + 650 >> 1], HEAP32[$5 + 576 >> 2]);
   }
   HEAPF64[$5 + 592 >> 3] = jsvObjectGetFloatChild(HEAP32[$5 + 760 >> 2], 105234);
   $1 = __DOUBLE_BITS_11(HEAPF64[$5 + 592 >> 3]);
   $2 = $1;
   $0 = i64toi32_i32$HIGH_BITS;
   $1 = $0 & 2147483647;
   if (HEAPF64[$5 + 592 >> 3] <= 0 ? 1 : ($1 | 0) == 2146435072 | $1 >>> 0 > 2146435072) {
    HEAPF64[$5 + 592 >> 3] = 1;
   }
   HEAPF64[$5 + 584 >> 3] = jsvObjectGetFloatChild(HEAP32[$5 + 760 >> 2], 104634);
   $0 = __DOUBLE_BITS_11(HEAPF64[$5 + 584 >> 3]);
   $2 = $0;
   $1 = i64toi32_i32$HIGH_BITS;
   $0 = $1 & 2147483647;
   HEAP8[$5 + 583 | 0] = $0 >>> 0 < 2146435072;
   if (!(HEAP8[$5 + 583 | 0] & 1)) {
    HEAPF64[$5 + 584 >> 3] = 0;
   }
   HEAP8[$5 + 582 | 0] = jsvObjectGetBoolChild(HEAP32[$5 + 760 >> 2], 101133) & 1;
  }
  HEAP32[$5 + 572 >> 2] = 0;
  HEAP32[$5 + 568 >> 2] = 0;
  HEAP32[$5 + 564 >> 2] = 0;
  jsvStringIteratorNew($5 + 528 | 0, HEAP32[$5 + 620 >> 2], HEAP32[$5 + 624 >> 2]);
  $0 = 0;
  label$10: {
   if ((HEAPU8[$5 + 692 | 0] | HEAPU8[$5 + 693 | 0] << 8 | (HEAPU8[$5 + 694 | 0] << 16 | HEAPU8[$5 + 695 | 0] << 24)) != 5) {
    break label$10;
   }
   $0 = 0;
   if ((HEAPU8[$5 + 696 | 0] | HEAPU8[$5 + 697 | 0] << 8 | (HEAPU8[$5 + 698 | 0] << 16 | HEAPU8[$5 + 699 | 0] << 24)) & 112) {
    break label$10;
   }
   $0 = 0;
   if (HEAPU8[$5 + 704 | 0] != 16) {
    break label$10;
   }
   if (HEAP32[$5 + 608 >> 2] != 8) {
    $0 = 0;
    if (HEAP32[$5 + 608 >> 2] != 1) {
     break label$10;
    }
   }
   $0 = HEAPU8[$5 + 612 | 0] ^ -1;
  }
  HEAP8[$5 + 527 | 0] = $0 & 1;
  label$12: {
   if (!(HEAP8[$5 + 583 | 0] & 1 | (HEAPF64[$5 + 592 >> 3] != 1 | HEAPF64[$5 + 584 >> 3] != 0))) {
    label$14: {
     label$15: {
      if (!(HEAP8[$5 + 527 | 0] & 1) | HEAP32[$5 + 768 >> 2] < (HEAPU8[$5 + 720 | 0] | HEAPU8[$5 + 721 | 0] << 8) | (HEAP32[$5 + 764 >> 2] < (HEAPU8[$5 + 722 | 0] | HEAPU8[$5 + 723 | 0] << 8) | (HEAP32[$5 + 768 >> 2] + HEAP32[$5 + 600 >> 2] | 0) > ((HEAPU8[$5 + 724 | 0] | HEAPU8[$5 + 725 | 0] << 8) + 1 | 0))) {
       break label$15;
      }
      if ((HEAP32[$5 + 764 >> 2] + HEAP32[$5 + 604 >> 2] | 0) > ((HEAPU8[$5 + 726 | 0] | HEAPU8[$5 + 727 | 0] << 8) + 1 | 0)) {
       break label$15;
      }
      label$16: {
       if (HEAP32[$5 + 608 >> 2] == 1) {
        lcdST7789_blit1Bit(HEAP32[$5 + 768 >> 2], HEAP32[$5 + 764 >> 2], HEAP32[$5 + 600 >> 2], HEAP32[$5 + 604 >> 2], 1, $5 + 528 | 0, HEAP32[$5 + 628 >> 2]);
        break label$16;
       }
       if (HEAP32[$5 + 608 >> 2] == 8) {
        lcdST7789_blit8Bit(HEAP32[$5 + 768 >> 2], HEAP32[$5 + 764 >> 2], HEAP32[$5 + 600 >> 2], HEAP32[$5 + 604 >> 2], 1, $5 + 528 | 0, HEAP32[$5 + 628 >> 2]);
       }
      }
      break label$14;
     }
     _jswrap_drawImageSimple($5 + 688 | 0, HEAP32[$5 + 768 >> 2], HEAP32[$5 + 764 >> 2], $5 + 600 | 0, $5 + 528 | 0, 0);
    }
    break label$12;
   }
   $0 = 0;
   label$19: {
    if (HEAP8[$5 + 583 | 0] & 1) {
     break label$19;
    }
    $0 = 0;
    if (HEAPF64[$5 + 592 >> 3] - Math_floor(HEAPF64[$5 + 592 >> 3]) != 0) {
     break label$19;
    }
    $0 = !((HEAPU8[$5 + 696 | 0] | HEAPU8[$5 + 697 | 0] << 8 | (HEAPU8[$5 + 698 | 0] << 16 | HEAPU8[$5 + 699 | 0] << 24)) & 112);
   }
   HEAP8[$5 + 526 | 0] = $0;
   label$20: {
    if (HEAP8[$5 + 526 | 0] & 1) {
     $6 = HEAPF64[$5 + 592 >> 3];
     label$22: {
      if (Math_abs($6) < 2147483648) {
       $0 = ~~$6;
       break label$22;
      }
      $0 = -2147483648;
     }
     HEAP32[$5 + 520 >> 2] = $0;
     label$24: {
      label$25: {
       if (!(HEAP8[$5 + 527 | 0] & 1) | HEAP32[$5 + 520 >> 2] <= 0 | (HEAP32[$5 + 768 >> 2] < (HEAPU8[$5 + 720 | 0] | HEAPU8[$5 + 721 | 0] << 8) | HEAP32[$5 + 764 >> 2] < (HEAPU8[$5 + 722 | 0] | HEAPU8[$5 + 723 | 0] << 8))) {
        break label$25;
       }
       if ((HEAP32[$5 + 768 >> 2] + Math_imul(HEAP32[$5 + 600 >> 2], HEAP32[$5 + 520 >> 2]) | 0) > ((HEAPU8[$5 + 724 | 0] | HEAPU8[$5 + 725 | 0] << 8) + 1 | 0) | (HEAP32[$5 + 764 >> 2] + Math_imul(HEAP32[$5 + 604 >> 2], HEAP32[$5 + 520 >> 2]) | 0) > ((HEAPU8[$5 + 726 | 0] | HEAPU8[$5 + 727 | 0] << 8) + 1 | 0)) {
        break label$25;
       }
       label$26: {
        if (HEAP32[$5 + 608 >> 2] == 1) {
         lcdST7789_blit1Bit(HEAP32[$5 + 768 >> 2], HEAP32[$5 + 764 >> 2], HEAP32[$5 + 600 >> 2], HEAP32[$5 + 604 >> 2], HEAP32[$5 + 520 >> 2], $5 + 528 | 0, HEAP32[$5 + 628 >> 2]);
         break label$26;
        }
        lcdST7789_blit8Bit(HEAP32[$5 + 768 >> 2], HEAP32[$5 + 764 >> 2], HEAP32[$5 + 600 >> 2], HEAP32[$5 + 604 >> 2], HEAP32[$5 + 520 >> 2], $5 + 528 | 0, HEAP32[$5 + 628 >> 2]);
       }
       break label$24;
      }
      HEAP32[$5 + 516 >> 2] = 0;
      HEAP32[$5 + 512 >> 2] = HEAP32[$5 + 764 >> 2];
      HEAP32[$5 + 568 >> 2] = 0;
      while (1) {
       if (HEAP32[$5 + 568 >> 2] < HEAP32[$5 + 604 >> 2]) {
        HEAP32[$5 + 508 >> 2] = jsvStringIteratorGetIndex_6($5 + 528 | 0);
        HEAP32[$5 + 504 >> 2] = HEAP32[$5 + 516 >> 2];
        HEAP32[$5 + 500 >> 2] = HEAP32[$5 + 564 >> 2];
        HEAP32[$5 + 496 >> 2] = 0;
        while (1) {
         if (HEAP32[$5 + 496 >> 2] < HEAP32[$5 + 520 >> 2]) {
          if (HEAP32[$5 + 496 >> 2]) {
           jsvStringIteratorGoto($5 + 528 | 0, HEAP32[$5 + 620 >> 2], HEAP32[$5 + 508 >> 2]);
           HEAP32[$5 + 516 >> 2] = HEAP32[$5 + 504 >> 2];
           HEAP32[$5 + 564 >> 2] = HEAP32[$5 + 500 >> 2];
          }
          HEAP32[$5 + 492 >> 2] = HEAP32[$5 + 768 >> 2];
          HEAP32[$5 + 572 >> 2] = 0;
          while (1) {
           if (HEAP32[$5 + 572 >> 2] < HEAP32[$5 + 600 >> 2]) {
            while (1) {
             if (HEAP32[$5 + 516 >> 2] < HEAP32[$5 + 608 >> 2]) {
              HEAP32[$5 + 564 >> 2] = HEAP32[$5 + 564 >> 2] << 8 | jsvStringIteratorGetCharAndNext($5 + 528 | 0) & 255;
              HEAP32[$5 + 516 >> 2] = HEAP32[$5 + 516 >> 2] + 8;
              continue;
             }
             break;
            }
            HEAP32[$5 + 488 >> 2] = HEAP32[$5 + 636 >> 2] & HEAP32[$5 + 564 >> 2] >>> HEAP32[$5 + 516 >> 2] - HEAP32[$5 + 608 >> 2];
            HEAP32[$5 + 516 >> 2] = HEAP32[$5 + 516 >> 2] - HEAP32[$5 + 608 >> 2];
            label$37: {
             if (!(HEAP32[$5 + 616 >> 2] == HEAP32[$5 + 488 >> 2] | HEAP32[$5 + 512 >> 2] < (HEAPU8[$5 + 722 | 0] | HEAPU8[$5 + 723 | 0] << 8) | HEAP32[$5 + 512 >> 2] > (HEAPU8[$5 + 726 | 0] | HEAPU8[$5 + 727 | 0] << 8))) {
              if (HEAP32[$5 + 628 >> 2]) {
               HEAP32[$5 + 488 >> 2] = HEAPU16[HEAP32[$5 + 628 >> 2] + ((HEAP32[$5 + 488 >> 2] & HEAP32[$5 + 632 >> 2]) << 1) >> 1];
              }
              HEAP32[$5 + 484 >> 2] = 0;
              while (1) {
               if (HEAP32[$5 + 484 >> 2] < HEAP32[$5 + 520 >> 2]) {
                if (!(HEAP32[$5 + 492 >> 2] < (HEAPU8[$5 + 720 | 0] | HEAPU8[$5 + 721 | 0] << 8) | HEAP32[$5 + 492 >> 2] > (HEAPU8[$5 + 724 | 0] | HEAPU8[$5 + 725 | 0] << 8))) {
                 FUNCTION_TABLE[HEAPU8[$5 + 740 | 0] | HEAPU8[$5 + 741 | 0] << 8 | (HEAPU8[$5 + 742 | 0] << 16 | HEAPU8[$5 + 743 | 0] << 24)]($5 + 688 | 0, HEAP32[$5 + 492 >> 2], HEAP32[$5 + 512 >> 2], HEAP32[$5 + 488 >> 2]);
                }
                HEAP32[$5 + 492 >> 2] = HEAP32[$5 + 492 >> 2] + 1;
                HEAP32[$5 + 484 >> 2] = HEAP32[$5 + 484 >> 2] + 1;
                continue;
               }
               break;
              }
              break label$37;
             }
             HEAP32[$5 + 492 >> 2] = HEAP32[$5 + 520 >> 2] + HEAP32[$5 + 492 >> 2];
            }
            HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 572 >> 2] + 1;
            continue;
           }
           break;
          }
          HEAP32[$5 + 512 >> 2] = HEAP32[$5 + 512 >> 2] + 1;
          HEAP32[$5 + 496 >> 2] = HEAP32[$5 + 496 >> 2] + 1;
          continue;
         }
         break;
        }
        HEAP32[$5 + 568 >> 2] = HEAP32[$5 + 568 >> 2] + 1;
        continue;
       }
       break;
      }
      HEAP32[$5 + 480 >> 2] = HEAP32[$5 + 768 >> 2];
      HEAP32[$5 + 476 >> 2] = HEAP32[$5 + 764 >> 2];
      HEAP32[$5 + 472 >> 2] = HEAP32[$5 + 768 >> 2] + Math_imul(HEAP32[$5 + 520 >> 2], HEAP32[$5 + 600 >> 2]);
      HEAP32[$5 + 468 >> 2] = HEAP32[$5 + 764 >> 2] + Math_imul(HEAP32[$5 + 520 >> 2], HEAP32[$5 + 604 >> 2]);
      graphicsSetModifiedAndClip($5 + 688 | 0, $5 + 480 | 0, $5 + 476 | 0, $5 + 472 | 0, $5 + 468 | 0, 0);
     }
     break label$20;
    }
    HEAP32[$5 + 272 >> 2] = HEAP32[$5 + 768 >> 2] << 8;
    HEAP32[$5 + 276 >> 2] = HEAP32[$5 + 764 >> 2] << 8;
    __memcpy($5 + 308 | 0, $5 + 600 | 0, 84);
    $0 = HEAP32[$5 + 532 >> 2];
    $1 = HEAP32[$5 + 528 >> 2];
    $3 = $1;
    $2 = $5 + 272 | 0;
    $1 = $2;
    HEAP32[$1 + 120 >> 2] = $3;
    HEAP32[$1 + 124 >> 2] = $0;
    HEAP32[$1 + 152 >> 2] = HEAP32[$5 + 560 >> 2];
    $1 = HEAP32[$5 + 556 >> 2];
    $0 = HEAP32[$5 + 552 >> 2];
    $3 = $0;
    $0 = $2;
    HEAP32[$0 + 144 >> 2] = $3;
    HEAP32[$0 + 148 >> 2] = $1;
    $0 = HEAP32[$5 + 548 >> 2];
    $1 = HEAP32[$5 + 544 >> 2];
    $3 = $1;
    $1 = $2;
    HEAP32[$1 + 136 >> 2] = $3;
    HEAP32[$1 + 140 >> 2] = $0;
    $1 = HEAP32[$5 + 540 >> 2];
    $0 = HEAP32[$5 + 536 >> 2];
    $3 = $0;
    $0 = $2;
    HEAP32[$0 + 128 >> 2] = $3;
    HEAP32[$0 + 132 >> 2] = $1;
    HEAPF64[$5 + 288 >> 3] = HEAPF64[$5 + 584 >> 3];
    HEAPF64[$5 + 296 >> 3] = HEAPF64[$5 + 592 >> 3];
    HEAP8[$5 + 304 | 0] = HEAP8[$5 + 583 | 0] & 1;
    HEAP8[$5 + 305 | 0] = 0;
    _jswrap_drawImageLayerInit($5 + 272 | 0);
    HEAP32[$5 + 268 >> 2] = HEAP32[$5 + 272 >> 2] >> 8;
    HEAP32[$5 + 264 >> 2] = HEAP32[$5 + 276 >> 2] >> 8;
    HEAP32[$5 + 260 >> 2] = (HEAP32[$5 + 280 >> 2] >> 8) - 1;
    HEAP32[$5 + 256 >> 2] = (HEAP32[$5 + 284 >> 2] >> 8) - 1;
    graphicsSetModifiedAndClip($5 + 688 | 0, $5 + 268 | 0, $5 + 264 | 0, $5 + 260 | 0, $5 + 256 | 0, 0);
    _jswrap_drawImageLayerSetStart($5 + 272 | 0, HEAP32[$5 + 268 >> 2], HEAP32[$5 + 264 >> 2]);
    HEAP32[$5 + 252 >> 2] = graphicsGetSetPixelFn($5 + 688 | 0);
    label$43: {
     if (!(!(HEAP8[$5 + 582 | 0] & 1) | !(HEAPF64[$5 + 592 >> 3] < .75))) {
      $6 = +HEAP32[$5 + 436 >> 2] * HEAPF64[$5 + 592 >> 3];
      label$45: {
       if (Math_abs($6) < 2147483648) {
        $0 = ~~$6;
        break label$45;
       }
       $0 = -2147483648;
      }
      HEAP32[$5 + 248 >> 2] = $0;
      $6 = +HEAP32[$5 + 440 >> 2] * HEAPF64[$5 + 592 >> 3];
      label$47: {
       if (Math_abs($6) < 2147483648) {
        $0 = ~~$6;
        break label$47;
       }
       $0 = -2147483648;
      }
      HEAP32[$5 + 244 >> 2] = $0;
      HEAP32[$5 + 240 >> 2] = HEAP32[$5 + 436 >> 2] - HEAP32[$5 + 248 >> 2];
      HEAP32[$5 + 236 >> 2] = HEAP32[$5 + 440 >> 2] - HEAP32[$5 + 244 >> 2];
      __memcpy($5 + 40 | 0, $5 + 272 | 0, 192);
      jsvStringIteratorNew($5 + 160 | 0, HEAP32[$5 + 96 >> 2], 0);
      HEAP32[$5 + 212 >> 2] = HEAP32[$5 + 244 >> 2] + HEAP32[$5 + 212 >> 2];
      HEAP32[$5 + 216 >> 2] = HEAP32[$5 + 248 >> 2] + HEAP32[$5 + 216 >> 2];
      _jswrap_drawImageLayerNextY($5 + 40 | 0);
      HEAP32[$5 + 568 >> 2] = HEAP32[$5 + 264 >> 2];
      while (1) {
       if (HEAP32[$5 + 568 >> 2] <= HEAP32[$5 + 256 >> 2]) {
        _jswrap_drawImageLayerStartX($5 + 272 | 0);
        _jswrap_drawImageLayerStartX($5 + 40 | 0);
        HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 268 >> 2];
        while (1) {
         if (HEAP32[$5 + 572 >> 2] <= HEAP32[$5 + 260 >> 2]) {
          HEAP8[$5 + 23 | 0] = 1;
          HEAP8[$5 + 23 | 0] = _jswrap_drawImageLayerGetPixel($5 + 272 | 0, $5 + 36 | 0) & 1 & (HEAP8[$5 + 23 | 0] & 1);
          HEAP32[$5 + 452 >> 2] = HEAP32[$5 + 248 >> 2] + HEAP32[$5 + 452 >> 2];
          HEAP32[$5 + 456 >> 2] = HEAP32[$5 + 456 >> 2] - HEAP32[$5 + 244 >> 2];
          HEAP8[$5 + 23 | 0] = _jswrap_drawImageLayerGetPixel($5 + 272 | 0, $5 + 32 | 0) & 1 & (HEAP8[$5 + 23 | 0] & 1);
          HEAP32[$5 + 452 >> 2] = HEAP32[$5 + 240 >> 2] + HEAP32[$5 + 452 >> 2];
          HEAP32[$5 + 456 >> 2] = HEAP32[$5 + 456 >> 2] - HEAP32[$5 + 236 >> 2];
          HEAP8[$5 + 23 | 0] = _jswrap_drawImageLayerGetPixel($5 + 40 | 0, $5 + 28 | 0) & 1 & (HEAP8[$5 + 23 | 0] & 1);
          HEAP32[$5 + 220 >> 2] = HEAP32[$5 + 248 >> 2] + HEAP32[$5 + 220 >> 2];
          HEAP32[$5 + 224 >> 2] = HEAP32[$5 + 224 >> 2] - HEAP32[$5 + 244 >> 2];
          HEAP8[$5 + 23 | 0] = _jswrap_drawImageLayerGetPixel($5 + 40 | 0, $5 + 24 | 0) & 1 & (HEAP8[$5 + 23 | 0] & 1);
          HEAP32[$5 + 220 >> 2] = HEAP32[$5 + 240 >> 2] + HEAP32[$5 + 220 >> 2];
          HEAP32[$5 + 224 >> 2] = HEAP32[$5 + 224 >> 2] - HEAP32[$5 + 236 >> 2];
          HEAP32[$5 + 36 >> 2] = graphicsBlendColor($5 + 688 | 0, HEAP32[$5 + 36 >> 2], HEAP32[$5 + 32 >> 2], 128);
          HEAP32[$5 + 28 >> 2] = graphicsBlendColor($5 + 688 | 0, HEAP32[$5 + 28 >> 2], HEAP32[$5 + 24 >> 2], 128);
          HEAP32[$5 + 564 >> 2] = graphicsBlendColor($5 + 688 | 0, HEAP32[$5 + 36 >> 2], HEAP32[$5 + 28 >> 2], 128);
          FUNCTION_TABLE[HEAP32[$5 + 252 >> 2]]($5 + 688 | 0, HEAP32[$5 + 572 >> 2], HEAP32[$5 + 568 >> 2], HEAP32[$5 + 564 >> 2]);
          HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 572 >> 2] + 1;
          continue;
         }
         break;
        }
        _jswrap_drawImageLayerNextY($5 + 272 | 0);
        _jswrap_drawImageLayerNextY($5 + 40 | 0);
        HEAP32[$5 + 568 >> 2] = HEAP32[$5 + 568 >> 2] + 1;
        continue;
       }
       break;
      }
      jsvStringIteratorFree_16($5 + 160 | 0);
      break label$43;
     }
     HEAP32[$5 + 568 >> 2] = HEAP32[$5 + 264 >> 2];
     while (1) {
      if (HEAP32[$5 + 568 >> 2] <= HEAP32[$5 + 256 >> 2]) {
       _jswrap_drawImageLayerStartX($5 + 272 | 0);
       HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 268 >> 2];
       while (1) {
        if (HEAP32[$5 + 572 >> 2] <= HEAP32[$5 + 260 >> 2]) {
         if (_jswrap_drawImageLayerGetPixel($5 + 272 | 0, $5 + 564 | 0) & 1) {
          FUNCTION_TABLE[HEAP32[$5 + 252 >> 2]]($5 + 688 | 0, HEAP32[$5 + 572 >> 2], HEAP32[$5 + 568 >> 2], HEAP32[$5 + 564 >> 2]);
         }
         _jswrap_drawImageLayerNextX($5 + 272 | 0);
         HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 572 >> 2] + 1;
         continue;
        }
        break;
       }
       _jswrap_drawImageLayerNextY($5 + 272 | 0);
       HEAP32[$5 + 568 >> 2] = HEAP32[$5 + 568 >> 2] + 1;
       continue;
      }
      break;
     }
    }
    $2 = $5 + 272 | 0;
    HEAP32[$5 + 560 >> 2] = HEAP32[$2 + 152 >> 2];
    $1 = HEAP32[$2 + 144 >> 2];
    $0 = HEAP32[$2 + 148 >> 2];
    HEAP32[$5 + 552 >> 2] = $1;
    HEAP32[$5 + 556 >> 2] = $0;
    $1 = HEAP32[$2 + 140 >> 2];
    $0 = HEAP32[$2 + 136 >> 2];
    HEAP32[$5 + 544 >> 2] = $0;
    HEAP32[$5 + 548 >> 2] = $1;
    $0 = HEAP32[$2 + 132 >> 2];
    $1 = HEAP32[$2 + 128 >> 2];
    HEAP32[$5 + 536 >> 2] = $1;
    HEAP32[$5 + 540 >> 2] = $0;
    $1 = HEAP32[$2 + 124 >> 2];
    $0 = HEAP32[$2 + 120 >> 2];
    HEAP32[$5 + 528 >> 2] = $0;
    HEAP32[$5 + 532 >> 2] = $1;
   }
  }
  jsvStringIteratorFree_16($5 + 528 | 0);
  _jswrap_graphics_freeImageInfo($5 + 600 | 0);
  graphicsSetVar($5 + 688 | 0);
  HEAP32[$5 + 780 >> 2] = jsvLockAgain(HEAP32[$5 + 776 >> 2]);
 }
 __stack_pointer = $5 + 784 | 0;
 return HEAP32[$5 + 780 >> 2];
}

function jsfGetJSONWithCallback($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 $6 = __stack_pointer - 352 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 348 >> 2] = $0;
 HEAP32[$6 + 344 >> 2] = $1;
 HEAP32[$6 + 340 >> 2] = $2;
 HEAP32[$6 + 336 >> 2] = $3;
 HEAP32[$6 + 332 >> 2] = $4;
 HEAP32[$6 + 328 >> 2] = $5;
 HEAP32[$6 + 324 >> 2] = HEAP32[$6 + 340 >> 2] + 16384;
 if (!HEAP32[$6 + 336 >> 2]) {
  HEAP32[$6 + 336 >> 2] = 127801;
 }
 label$2: {
  if (jsvIsUndefined(HEAP32[$6 + 348 >> 2]) & 1) {
   cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], HEAP32[$6 + 340 >> 2] & 64 ? 102720 : 106576, 0);
   break label$2;
  }
  label$4: {
   $0 = HEAP32[$6 + 348 >> 2];
   label$5: {
    if ((HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 512) {
     break label$5;
    }
    if (jsuGetFreeStack() >>> 0 < 512) {
     break label$5;
    }
    if (!(jspIsInterrupted() & 1)) {
     break label$4;
    }
   }
   cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], 127774, 0);
   break label$2;
  }
  $0 = HEAP32[$6 + 348 >> 2];
  $1 = HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8 | 512;
  HEAP8[$0 + 11 | 0] = $1;
  HEAP8[$0 + 12 | 0] = $1 >>> 8;
  label$6: {
   if (jsvIsArray(HEAP32[$6 + 348 >> 2]) & 1) {
    HEAP32[$6 + 320 >> 2] = jsvGetArrayLength(HEAP32[$6 + 348 >> 2]);
    $7 = HEAP32[$6 + 340 >> 2] & 8 ? HEAP32[$6 + 320 >> 2] > 15 : $7;
    HEAP8[$6 + 319 | 0] = $7;
    HEAP8[$6 + 318 | 0] = 0;
    cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], HEAP32[$6 + 340 >> 2] & 4 ? 127652 : 108313, 0);
    HEAP32[$6 + 312 >> 2] = -1;
    HEAP8[$6 + 311 | 0] = 1;
    HEAP8[$6 + 310 | 0] = 1;
    jsvObjectIteratorNew($6 + 304 | 0, HEAP32[$6 + 348 >> 2]);
    while (1) {
     $0 = 0;
     label$10: {
      if (HEAP32[$6 + 320 >> 2] <= (HEAP32[$6 + 312 >> 2] + 1 | 0)) {
       break label$10;
      }
      $0 = 0;
      if (!(HEAP8[$6 + 311 | 0] & 1)) {
       break label$10;
      }
      $0 = jspIsInterrupted() ^ -1;
     }
     if ($0 & 1) {
      HEAP32[$6 + 300 >> 2] = jsvObjectIteratorGetKey_5($6 + 304 | 0);
      label$12: {
       label$13: {
        if (jsvObjectIteratorHasValue_8($6 + 304 | 0) & 1) {
         if (!(jsvIsNumeric(HEAP32[$6 + 300 >> 2]) & 1)) {
          break label$13;
         }
        }
        label$15: {
         if (jsvObjectIteratorHasValue_8($6 + 304 | 0) & 1) {
          $0 = jsvGetInteger(HEAP32[$6 + 300 >> 2]);
          break label$15;
         }
         $0 = HEAP32[$6 + 320 >> 2] - 1 | 0;
        }
        HEAP32[$6 + 296 >> 2] = $0;
        HEAP32[$6 + 292 >> 2] = jsvObjectIteratorGetValue_8($6 + 304 | 0);
        while (1) {
         if (HEAP32[$6 + 312 >> 2] < HEAP32[$6 + 296 >> 2]) {
          HEAP32[$6 + 312 >> 2] = HEAP32[$6 + 312 >> 2] + 1;
          if (!(!(!(HEAP8[$6 + 319 | 0] & 1) | HEAP32[$6 + 312 >> 2] < 5) & HEAP32[$6 + 312 >> 2] < (HEAP32[$6 + 320 >> 2] - 5 | 0))) {
           if (!(HEAP8[$6 + 310 | 0] & 1)) {
            cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], HEAP32[$6 + 340 >> 2] & 4 ? 127788 : 112648, 0);
           }
           HEAP8[$6 + 310 | 0] = 0;
           if (!(!(HEAP8[$6 + 319 | 0] & 1) | HEAP32[$6 + 312 >> 2] != (HEAP32[$6 + 320 >> 2] - 5 | 0))) {
            cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], HEAP32[38468], 0);
           }
           $0 = 0;
           if (HEAP32[$6 + 340 >> 2] & 1) {
            $0 = jsonNeedsNewLine(HEAP32[$6 + 292 >> 2]);
           }
           HEAP8[$6 + 291 | 0] = $0 & 1;
           if (HEAP32[$6 + 340 >> 2] & 2) {
            HEAP8[$6 + 318 | 0] = 1;
            HEAP8[$6 + 291 | 0] = 1;
           }
           if (HEAP8[$6 + 291 | 0] & 1 ? 1 : HEAP8[$6 + 318 | 0] & 1) {
            jsonNewLine(HEAP32[$6 + 324 >> 2], HEAP32[$6 + 336 >> 2], HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2]);
            HEAP8[$6 + 318 | 0] = 0;
           }
           label$27: {
            if (HEAP32[$6 + 312 >> 2] == HEAP32[$6 + 296 >> 2]) {
             HEAP32[$6 + 284 >> 2] = jsvNewFromInteger(HEAP32[$6 + 296 >> 2]);
             jsfGetJSONWithCallback(HEAP32[$6 + 292 >> 2], HEAP32[$6 + 284 >> 2], HEAP32[$6 + 324 >> 2], HEAP32[$6 + 336 >> 2], HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2]);
             jsvUnLock(HEAP32[$6 + 284 >> 2]);
             break label$27;
            }
            cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], HEAP32[$6 + 340 >> 2] & 64 ? 102720 : 106576, 0);
           }
           HEAP8[$6 + 318 | 0] = HEAP8[$6 + 291 | 0] & 1;
          }
          continue;
         }
         break;
        }
        jsvUnLock(HEAP32[$6 + 292 >> 2]);
        jsvObjectIteratorNext($6 + 304 | 0);
        break label$12;
       }
       HEAP8[$6 + 311 | 0] = 0;
      }
      jsvUnLock(HEAP32[$6 + 300 >> 2]);
      continue;
     }
     break;
    }
    if (HEAP32[$6 + 340 >> 2] & 4) {
     jsfGetJSONForObjectItWithCallback($6 + 304 | 0, HEAP32[$6 + 340 >> 2], HEAP32[$6 + 336 >> 2], HEAP32[$6 + 324 >> 2], HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], HEAP8[$6 + 310 | 0] & 1);
    }
    jsvObjectIteratorFree_8($6 + 304 | 0);
    if (HEAP8[$6 + 318 | 0] & 1) {
     jsonNewLine(HEAP32[$6 + 340 >> 2], HEAP32[$6 + 336 >> 2], HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2]);
    }
    cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], HEAP32[$6 + 340 >> 2] & 4 ? 108300 : 108301, 0);
    break label$6;
   }
   label$31: {
    if (jsvIsArrayBuffer(HEAP32[$6 + 348 >> 2]) & 1) {
     HEAP8[$6 + 223 | 0] = 1;
     jsvArrayBufferIteratorNew($6 + 224 | 0, HEAP32[$6 + 348 >> 2], 0);
     while (1) {
      if (jsvArrayBufferIteratorHasElement($6 + 224 | 0) & 1) {
       if (jsvArrayBufferIteratorGetFloatValue($6 + 224 | 0) != 0) {
        HEAP8[$6 + 223 | 0] = 0;
       }
       jsvArrayBufferIteratorNext($6 + 224 | 0);
       continue;
      }
      break;
     }
     jsvArrayBufferIteratorFree($6 + 224 | 0);
     HEAP8[$6 + 222 | 0] = (HEAP32[$6 + 340 >> 2] & 128) != 0;
     label$36: {
      if (!(!(HEAP8[$6 + 223 | 0] & 1) | HEAP8[$6 + 222 | 0] & 1)) {
       $0 = HEAP32[$6 + 332 >> 2];
       $1 = HEAP32[$6 + 328 >> 2];
       $2 = jswGetBasicObjectName(HEAP32[$6 + 348 >> 2]);
       HEAP32[$6 + 20 >> 2] = jsvGetArrayBufferLength(HEAP32[$6 + 348 >> 2]);
       HEAP32[$6 + 16 >> 2] = $2;
       cbprintf($0, $1, 126357, $6 + 16 | 0);
       break label$36;
      }
      HEAP32[$6 + 216 >> 2] = jswGetBasicObjectName(HEAP32[$6 + 348 >> 2]);
      HEAP8[$6 + 215 | 0] = !strcmp(HEAP32[$6 + 216 >> 2], 101446);
      if (HEAP8[$6 + 215 | 0] & 1) {
       HEAP32[$6 + 216 >> 2] = 96569;
      }
      $0 = HEAP32[$6 + 332 >> 2];
      $1 = HEAP32[$6 + 328 >> 2];
      $2 = HEAP8[$6 + 222 | 0] & 1;
      HEAP32[$6 >> 2] = HEAP32[$6 + 216 >> 2];
      cbprintf($0, $1, $2 ? 108313 : 108306, $6);
      if (HEAP32[$6 + 340 >> 2] & 2) {
       jsonNewLine(HEAP32[$6 + 324 >> 2], HEAP32[$6 + 336 >> 2], HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2]);
      }
      HEAP32[$6 + 208 >> 2] = jsvGetArrayBufferLength(HEAP32[$6 + 348 >> 2]);
      $7 = HEAP32[$6 + 340 >> 2] & 8 ? HEAPU32[$6 + 208 >> 2] > 15 : $7;
      HEAP8[$6 + 207 | 0] = $7;
      jsvArrayBufferIteratorNew($6 + 224 | 0, HEAP32[$6 + 348 >> 2], 0);
      while (1) {
       $0 = 0;
       if (jsvArrayBufferIteratorHasElement($6 + 224 | 0) & 1) {
        $0 = jspIsInterrupted() ^ -1;
       }
       if ($0 & 1) {
        if (!(!(!(HEAP8[$6 + 207 | 0] & 1) | HEAPU32[$6 + 272 >> 2] < 5) & HEAPU32[$6 + 272 >> 2] < HEAP32[$6 + 208 >> 2] - 5 >>> 0)) {
         if (HEAP32[$6 + 272 >> 2]) {
          cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], HEAP32[$6 + 340 >> 2] & 4 ? 127788 : 112648, 0);
         }
         if (HEAP32[$6 + 340 >> 2] & 2) {
          jsonNewLine(HEAP32[$6 + 324 >> 2], HEAP32[$6 + 336 >> 2], HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2]);
         }
         if (!(!(HEAP8[$6 + 207 | 0] & 1) | HEAP32[$6 + 272 >> 2] != (HEAP32[$6 + 208 >> 2] - 5 | 0))) {
          cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], HEAP32[38468], 0);
         }
         HEAP32[$6 + 200 >> 2] = jsvArrayBufferIteratorGetValue($6 + 224 | 0, 0);
         jsfGetJSONWithCallback(HEAP32[$6 + 200 >> 2], 0, HEAP32[$6 + 324 >> 2], HEAP32[$6 + 336 >> 2], HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2]);
         jsvUnLock(HEAP32[$6 + 200 >> 2]);
        }
        jsvArrayBufferIteratorNext($6 + 224 | 0);
        continue;
       }
       break;
      }
      if (HEAP32[$6 + 340 >> 2] & 2) {
       jsonNewLine(HEAP32[$6 + 340 >> 2], HEAP32[$6 + 336 >> 2], HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2]);
      }
      jsvArrayBufferIteratorFree($6 + 224 | 0);
      cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], HEAP8[$6 + 222 | 0] & 1 ? 108301 : 126525, 0);
      if (!(!(HEAP8[$6 + 215 | 0] & 1) | HEAP8[$6 + 222 | 0] & 1)) {
       cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], 101313, 0);
      }
     }
     break label$31;
    }
    label$51: {
     if (jsvIsObject(HEAP32[$6 + 348 >> 2]) & 1) {
      label$53: {
       if (HEAP32[$6 + 340 >> 2] & 32) {
        $0 = jsiGetDeviceFromClass(HEAP32[$6 + 348 >> 2]) & 255;
        break label$53;
       }
       $0 = 0;
      }
      HEAP8[$6 + 199 | 0] = $0;
      label$55: {
       if (HEAPU8[$6 + 199 | 0]) {
        $0 = HEAP32[$6 + 332 >> 2];
        $1 = HEAP32[$6 + 328 >> 2];
        HEAP32[$6 + 32 >> 2] = jshGetDeviceString(HEAPU8[$6 + 199 | 0]);
        cbprintf($0, $1, 100833, $6 + 32 | 0);
        break label$55;
       }
       HEAP8[$6 + 198 | 0] = 1;
       if (HEAP32[$6 + 340 >> 2] & 256) {
        HEAP32[$6 + 192 >> 2] = jsvObjectGetChildIfExists(HEAP32[$6 + 348 >> 2], 107914);
        if (jsvHasChildren(HEAP32[$6 + 192 >> 2]) & 1) {
         HEAP32[$6 + 188 >> 2] = jsvObjectGetChildIfExists(HEAP32[$6 + 192 >> 2], 100982);
         if (HEAP32[$6 + 188 >> 2]) {
          HEAP32[$6 + 184 >> 2] = jsvGetIndexOf(HEAP32[46747], HEAP32[$6 + 188 >> 2], 1);
          if (HEAP32[$6 + 184 >> 2]) {
           $0 = HEAP32[$6 + 332 >> 2];
           $1 = HEAP32[$6 + 328 >> 2];
           HEAP32[$6 + 64 >> 2] = HEAP32[$6 + 184 >> 2];
           cbprintf($0, $1, 127687, $6 - -64 | 0);
          }
          jsvUnLock2(HEAP32[$6 + 184 >> 2], HEAP32[$6 + 188 >> 2]);
          HEAP32[$6 + 180 >> 2] = jspGetNamedField(HEAP32[$6 + 348 >> 2], 103729, 0);
          label$61: {
           if (!(jsvIsFunction(HEAP32[$6 + 180 >> 2]) & 1)) {
            break label$61;
           }
           $0 = HEAP32[$6 + 180 >> 2];
           if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 1) {
            break label$61;
           }
           HEAP32[$6 + 176 >> 2] = jspExecuteFunction(HEAP32[$6 + 180 >> 2], HEAP32[$6 + 348 >> 2], 0, 0);
           $0 = HEAP32[$6 + 332 >> 2];
           $1 = HEAP32[$6 + 328 >> 2];
           HEAP32[$6 + 48 >> 2] = HEAP32[$6 + 176 >> 2];
           cbprintf($0, $1, 97144, $6 + 48 | 0);
           jsvUnLock(HEAP32[$6 + 176 >> 2]);
           HEAP8[$6 + 198 | 0] = 0;
          }
          jsvUnLock(HEAP32[$6 + 180 >> 2]);
         }
        }
        jsvUnLock(HEAP32[$6 + 192 >> 2]);
       }
       if (HEAP8[$6 + 198 | 0] & 1) {
        HEAP32[$6 + 172 >> 2] = 0;
        if (HEAP32[$6 + 340 >> 2] & 8192) {
         HEAP32[$6 + 172 >> 2] = jspGetNamedField(HEAP32[$6 + 348 >> 2], 109e3, 0);
        }
        label$64: {
         if (jsvIsFunction(HEAP32[$6 + 172 >> 2]) & 1) {
          label$66: {
           if (HEAP32[$6 + 344 >> 2]) {
            $0 = jsvAsString(HEAP32[$6 + 344 >> 2]);
            break label$66;
           }
           $0 = 0;
          }
          HEAP32[$6 + 168 >> 2] = $0;
          HEAP32[$6 + 164 >> 2] = jspExecuteFunction(HEAP32[$6 + 172 >> 2], HEAP32[$6 + 348 >> 2], 1, $6 + 168 | 0);
          jsvUnLock(HEAP32[$6 + 168 >> 2]);
          if (HEAP32[$6 + 164 >> 2] == HEAP32[$6 + 348 >> 2]) {
           $0 = HEAP32[$6 + 348 >> 2];
           $1 = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & -513;
           HEAP8[$0 + 11 | 0] = $1;
           HEAP8[$0 + 12 | 0] = $1 >>> 8;
          }
          jsfGetJSONWithCallback(HEAP32[$6 + 164 >> 2], 0, HEAP32[$6 + 340 >> 2] & -8193, HEAP32[$6 + 336 >> 2], HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2]);
          jsvUnLock(HEAP32[$6 + 164 >> 2]);
          break label$64;
         }
         jsvObjectIteratorNew($6 + 160 | 0, HEAP32[$6 + 348 >> 2]);
         cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], HEAP32[$6 + 340 >> 2] & 4 ? 127512 : 96371, 0);
         HEAP8[$6 + 159 | 0] = jsfGetJSONForObjectItWithCallback($6 + 160 | 0, HEAP32[$6 + 340 >> 2], HEAP32[$6 + 336 >> 2], HEAP32[$6 + 324 >> 2], HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], 1) & 1;
         jsvObjectIteratorFree_8($6 + 160 | 0);
         if (HEAP8[$6 + 159 | 0] & 1) {
          jsonNewLine(HEAP32[$6 + 340 >> 2], HEAP32[$6 + 336 >> 2], HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2]);
         }
         cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], HEAP32[$6 + 340 >> 2] & 4 ? 96360 : 96364, 0);
        }
        jsvUnLock(HEAP32[$6 + 172 >> 2]);
       }
      }
      break label$51;
     }
     label$70: {
      if (jsvIsFunction(HEAP32[$6 + 348 >> 2]) & 1) {
       if (HEAP32[$6 + 340 >> 2] & 16) {
        cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], 106576, 0);
        break label$70;
       }
       cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], 127538, 0);
       jsfGetJSONForFunctionWithCallback(HEAP32[$6 + 348 >> 2], HEAP32[$6 + 324 >> 2], HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2]);
       break label$70;
      }
      label$73: {
       label$74: {
        label$75: {
         if (jsvIsString(HEAP32[$6 + 348 >> 2]) & 1) {
          if (!(jsvIsName(HEAP32[$6 + 348 >> 2]) & 1)) {
           break label$75;
          }
         }
         if (!(HEAP32[$6 + 340 >> 2] & 1024)) {
          break label$74;
         }
         if (!(jsvIsPin(HEAP32[$6 + 348 >> 2]) & 1)) {
          break label$74;
         }
        }
        label$77: {
         label$78: {
          if (!(HEAP32[$6 + 340 >> 2] & 8)) {
           break label$78;
          }
          if (jsvGetStringLength(HEAP32[$6 + 348 >> 2]) >>> 0 <= 40) {
           break label$78;
          }
          HEAP32[$6 + 152 >> 2] = jsvNewFromStringVar(HEAP32[$6 + 348 >> 2], 0, 17);
          HEAP32[$6 + 148 >> 2] = jsvNewFromStringVar(HEAP32[$6 + 348 >> 2], jsvGetStringLength(HEAP32[$6 + 348 >> 2]) - 17 | 0, 17);
          $0 = HEAP32[$6 + 332 >> 2];
          $1 = HEAP32[$6 + 328 >> 2];
          $2 = HEAP32[$6 + 152 >> 2];
          $3 = HEAP32[38468];
          HEAP32[$6 + 88 >> 2] = HEAP32[$6 + 148 >> 2];
          HEAP32[$6 + 84 >> 2] = $3;
          HEAP32[$6 + 80 >> 2] = $2;
          cbprintf($0, $1, 101609, $6 + 80 | 0);
          jsvUnLock2(HEAP32[$6 + 152 >> 2], HEAP32[$6 + 148 >> 2]);
          break label$77;
         }
         $0 = HEAP32[$6 + 332 >> 2];
         $1 = HEAP32[$6 + 328 >> 2];
         $2 = HEAP32[$6 + 340 >> 2] & 2048;
         HEAP32[$6 + 96 >> 2] = HEAP32[$6 + 348 >> 2];
         cbprintf($0, $1, $2 ? 108932 : 101803, $6 + 96 | 0);
        }
        break label$73;
       }
       label$79: {
        label$80: {
         if (!(HEAP32[$6 + 340 >> 2] & 4096)) {
          break label$80;
         }
         if (!(jsvIsFloat(HEAP32[$6 + 348 >> 2]) & 1)) {
          break label$80;
         }
         __DOUBLE_BITS_5(jsvGetFloat(HEAP32[$6 + 348 >> 2]));
         if ((i64toi32_i32$HIGH_BITS & 2147483647) >>> 0 < 2146435072) {
          break label$80;
         }
         cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], 102720, 0);
         break label$79;
        }
        $0 = HEAP32[$6 + 332 >> 2];
        $1 = HEAP32[$6 + 328 >> 2];
        HEAP32[$6 + 112 >> 2] = HEAP32[$6 + 348 >> 2];
        cbprintf($0, $1, 97144, $6 + 112 | 0);
       }
      }
     }
    }
   }
  }
  $0 = HEAP32[$6 + 348 >> 2];
  $1 = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & -513;
  HEAP8[$0 + 11 | 0] = $1;
  HEAP8[$0 + 12 | 0] = $1 >>> 8;
 }
 __stack_pointer = $6 + 352 | 0;
}

function jspeFunctionCall($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0;
 $7 = __stack_pointer - 384 | 0;
 $6 = $7;
 __stack_pointer = $6;
 HEAP32[$6 + 376 >> 2] = $0;
 HEAP32[$6 + 372 >> 2] = $1;
 HEAP32[$6 + 368 >> 2] = $2;
 HEAP8[$6 + 367 | 0] = $3;
 HEAP32[$6 + 360 >> 2] = $4;
 HEAP32[$6 + 356 >> 2] = $5;
 label$1: {
  if (!(HEAP32[$6 + 376 >> 2] | (HEAP32[46755] & 63) != 1)) {
   label$3: {
    if (HEAP32[$6 + 372 >> 2]) {
     HEAP32[$6 + 32 >> 2] = HEAP32[$6 + 372 >> 2];
     jsExceptionHere(1, 127200, $6 + 32 | 0);
     break label$3;
    }
    HEAP32[$6 + 48 >> 2] = HEAP32[$6 + 372 >> 2];
    jsExceptionHere(1, 127223, $6 + 48 | 0);
   }
   HEAP32[$6 + 380 >> 2] = 0;
   break label$1;
  }
  if ((HEAP32[46755] & 63) == 1) {
   if (!(jspCheckStackPosition() & 1)) {
    HEAP32[$6 + 380 >> 2] = 0;
    break label$1;
   }
  }
  if (!(!HEAP32[$6 + 376 >> 2] | (HEAP32[46755] & 63) != 1)) {
   HEAP32[$6 + 352 >> 2] = 0;
   if (!(jsvIsFunction(HEAP32[$6 + 376 >> 2]) & 1)) {
    HEAP32[$6 + 16 >> 2] = HEAP32[$6 + 376 >> 2];
    jsExceptionHere(1, 98893, $6 + 16 | 0);
    HEAP32[$6 + 380 >> 2] = 0;
    break label$1;
   }
   HEAP32[$6 + 348 >> 2] = jsvLockAgainSafe(HEAP32[$6 + 368 >> 2]);
   if (HEAP8[$6 + 367 | 0] & 1) {
    if (!(jslMatch(40) & 1)) {
     HEAP32[$6 + 380 >> 2] = 0;
     break label$1;
    }
   }
   label$11: {
    if (jsvIsNativeFunction(HEAP32[$6 + 376 >> 2]) & 1) {
     HEAP32[$6 + 344 >> 2] = 0;
     HEAP32[$6 + 340 >> 2] = 0;
     jsvObjectIteratorNew($6 + 336 | 0, HEAP32[$6 + 376 >> 2]);
     HEAP32[$6 + 332 >> 2] = jsvObjectIteratorGetKey_2($6 + 336 | 0);
     while (1) {
      if (jsvIsFunctionParameter(HEAP32[$6 + 332 >> 2]) & 1) {
       if (HEAPU32[$6 + 360 >> 2] >= HEAPU32[$6 + 344 >> 2]) {
        if (HEAP32[$6 + 344 >> 2]) {
         $0 = HEAP32[$6 + 344 >> 2];
        } else {
         $0 = HEAP32[$6 + 360 >> 2];
        }
        HEAP32[$6 + 328 >> 2] = $0 << 2;
        HEAP32[$6 + 324 >> 2] = HEAP32[$6 + 328 >> 2] << 2;
        if (jsuGetFreeStack() >>> 0 < HEAP32[$6 + 324 >> 2] + 256 >>> 0) {
         jsExceptionHere(1, 99789, 0);
         jsvUnLock(HEAP32[$6 + 348 >> 2]);
         HEAP32[$6 + 380 >> 2] = 0;
         break label$1;
        }
        $7 = $7 - (HEAP32[$6 + 324 >> 2] + 15 & -16) | 0;
        __stack_pointer = $7;
        HEAP32[$6 + 320 >> 2] = $7;
        __memcpy(HEAP32[$6 + 320 >> 2], HEAP32[$6 + 356 >> 2], HEAP32[$6 + 360 >> 2] << 2);
        HEAP32[$6 + 356 >> 2] = HEAP32[$6 + 320 >> 2];
        HEAP32[$6 + 344 >> 2] = HEAP32[$6 + 328 >> 2];
       }
       HEAP32[$6 + 316 >> 2] = HEAP32[$6 + 360 >> 2] - 1;
       while (1) {
        if (HEAP32[$6 + 316 >> 2] >= HEAP32[$6 + 340 >> 2]) {
         HEAP32[HEAP32[$6 + 356 >> 2] + (HEAP32[$6 + 316 >> 2] + 1 << 2) >> 2] = HEAP32[HEAP32[$6 + 356 >> 2] + (HEAP32[$6 + 316 >> 2] << 2) >> 2];
         HEAP32[$6 + 316 >> 2] = HEAP32[$6 + 316 >> 2] - 1;
         continue;
        }
        break;
       }
       $0 = jsvSkipName(HEAP32[$6 + 332 >> 2]);
       HEAP32[HEAP32[$6 + 356 >> 2] + (HEAP32[$6 + 340 >> 2] << 2) >> 2] = $0;
       HEAP32[$6 + 360 >> 2] = HEAP32[$6 + 360 >> 2] + 1;
       HEAP32[$6 + 340 >> 2] = HEAP32[$6 + 340 >> 2] + 1;
       jsvUnLock(HEAP32[$6 + 332 >> 2]);
       jsvObjectIteratorNext($6 + 336 | 0);
       HEAP32[$6 + 332 >> 2] = jsvObjectIteratorGetKey_2($6 + 336 | 0);
       continue;
      }
      break;
     }
     while (1) {
      if (HEAP32[$6 + 332 >> 2]) {
       if (jsvIsStringEqual(HEAP32[$6 + 332 >> 2], 100302) & 1) {
        jsvUnLock(HEAP32[$6 + 348 >> 2]);
        HEAP32[$6 + 348 >> 2] = jsvSkipName(HEAP32[$6 + 332 >> 2]);
       } else {
        jsvUnLock(HEAP32[$6 + 332 >> 2]);
        jsvObjectIteratorNext($6 + 336 | 0);
        HEAP32[$6 + 332 >> 2] = jsvObjectIteratorGetKey_2($6 + 336 | 0);
        continue;
       }
      }
      break;
     }
     jsvUnLock(HEAP32[$6 + 332 >> 2]);
     jsvObjectIteratorFree_2($6 + 336 | 0);
     HEAP32[$6 + 312 >> 2] = HEAP32[$6 + 340 >> 2];
     if (HEAP8[$6 + 367 | 0] & 1) {
      while (1) {
       $0 = 0;
       label$27: {
        if (HEAP32[46755] & 112) {
         break label$27;
        }
        $0 = 0;
        if (HEAP16[HEAP32[38615] + 2 >> 1] == 41) {
         break label$27;
        }
        $0 = HEAP16[HEAP32[38615] + 2 >> 1];
       }
       if ($0) {
        if (HEAPU32[$6 + 360 >> 2] >= HEAPU32[$6 + 344 >> 2]) {
         if (HEAP32[$6 + 344 >> 2]) {
          $0 = HEAP32[$6 + 344 >> 2] << 2;
         } else {
          $0 = 16;
         }
         HEAP32[$6 + 308 >> 2] = $0;
         $7 = $7 - ((HEAP32[$6 + 308 >> 2] << 2) + 15 & -16) | 0;
         __stack_pointer = $7;
         HEAP32[$6 + 304 >> 2] = $7;
         __memcpy(HEAP32[$6 + 304 >> 2], HEAP32[$6 + 356 >> 2], HEAP32[$6 + 360 >> 2] << 2);
         HEAP32[$6 + 356 >> 2] = HEAP32[$6 + 304 >> 2];
         HEAP32[$6 + 344 >> 2] = HEAP32[$6 + 308 >> 2];
        }
        $1 = jsvSkipNameAndUnLock(jspeAssignmentExpression());
        $2 = HEAP32[$6 + 356 >> 2];
        $0 = HEAP32[$6 + 360 >> 2];
        HEAP32[$6 + 360 >> 2] = $0 + 1;
        HEAP32[($0 << 2) + $2 >> 2] = $1;
        if (HEAP16[HEAP32[38615] + 2 >> 1] != 41) {
         if (!(jslMatch(44) & 1)) {
          jsvUnLockMany(HEAP32[$6 + 360 >> 2], HEAP32[$6 + 356 >> 2]);
          jsvUnLock(HEAP32[$6 + 348 >> 2]);
          HEAP32[$6 + 380 >> 2] = 0;
          break label$1;
         }
        }
        continue;
       }
       break;
      }
      if (!(jslMatch(41) & 1)) {
       jsvUnLockMany(HEAP32[$6 + 360 >> 2], HEAP32[$6 + 356 >> 2]);
       jsvUnLock(HEAP32[$6 + 348 >> 2]);
       HEAP32[$6 + 380 >> 2] = 0;
       break label$1;
      }
      HEAP32[$6 + 312 >> 2] = HEAP32[$6 + 360 >> 2];
     }
     HEAP32[$6 + 300 >> 2] = jsvGetNativeFunctionPtr(HEAP32[$6 + 376 >> 2]);
     HEAP32[$6 + 296 >> 2] = HEAP32[46753];
     label$35: {
      if (HEAP32[$6 + 348 >> 2]) {
       HEAP32[46753] = jsvRef(HEAP32[$6 + 348 >> 2]);
       break label$35;
      }
      label$37: {
       if (HEAP32[$6 + 300 >> 2] == 9) {
        if (HEAP32[46753]) {
         HEAP32[46753] = jsvRef(HEAP32[46753]);
        }
        break label$37;
       }
       HEAP32[46753] = jsvRef(HEAP32[46747]);
      }
     }
     label$40: {
      if (!(!HEAP32[$6 + 300 >> 2] | HEAP32[46755] & 112)) {
       $0 = HEAP32[$6 + 376 >> 2];
       HEAP32[$6 + 352 >> 2] = jsnCallFunction(HEAP32[$6 + 300 >> 2], HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8, HEAP32[$6 + 348 >> 2], HEAP32[$6 + 356 >> 2], HEAP32[$6 + 360 >> 2]);
       break label$40;
      }
      HEAP32[$6 + 352 >> 2] = 0;
     }
     jsvUnLockMany(HEAP32[$6 + 312 >> 2], HEAP32[$6 + 356 >> 2]);
     if (HEAP32[46753]) {
      jsvUnRef(HEAP32[46753]);
     }
     HEAP32[46753] = HEAP32[$6 + 296 >> 2];
     break label$11;
    }
    HEAP32[$6 + 292 >> 2] = jsvNewWithFlags(7);
    if (!HEAP32[$6 + 292 >> 2]) {
     jspSetError(0);
     jsvUnLock(HEAP32[$6 + 348 >> 2]);
     HEAP32[$6 + 380 >> 2] = 0;
     break label$1;
    }
    HEAP32[$6 + 288 >> 2] = 0;
    HEAP32[$6 + 284 >> 2] = 0;
    HEAP32[$6 + 280 >> 2] = 0;
    jsvObjectIteratorNew($6 + 272 | 0, HEAP32[$6 + 376 >> 2]);
    HEAP32[$6 + 268 >> 2] = jsvObjectIteratorGetKey_2($6 + 272 | 0);
    HEAP32[$6 + 264 >> 2] = jsvObjectIteratorGetValue_2($6 + 272 | 0);
    while (1) {
     $0 = 0;
     if (jsvIsFunctionParameter(HEAP32[$6 + 268 >> 2]) & 1) {
      $0 = HEAP32[$6 + 264 >> 2] != 0;
     }
     if ($0) {
      jsvAddFunctionParameter(HEAP32[$6 + 292 >> 2], jsvNewFromStringVar(HEAP32[$6 + 268 >> 2], 1, 2147483647), HEAP32[$6 + 264 >> 2]);
      jsvUnLock2(HEAP32[$6 + 264 >> 2], HEAP32[$6 + 268 >> 2]);
      jsvObjectIteratorNext($6 + 272 | 0);
      HEAP32[$6 + 268 >> 2] = jsvObjectIteratorGetKey_2($6 + 272 | 0);
      HEAP32[$6 + 264 >> 2] = jsvObjectIteratorGetValue_2($6 + 272 | 0);
      continue;
     }
     break;
    }
    jsvUnLock2(HEAP32[$6 + 264 >> 2], HEAP32[$6 + 268 >> 2]);
    label$47: {
     if (HEAP8[$6 + 367 | 0] & 1) {
      HEAP32[$6 + 260 >> 2] = 0;
      while (1) {
       $0 = 0;
       $0 = HEAP32[46755] & 80 ? $0 : HEAP16[HEAP32[38615] + 2 >> 1] != 41;
       if ($0) {
        HEAP32[$6 + 256 >> 2] = jsvObjectIteratorGetKey_2($6 + 272 | 0);
        HEAP8[$6 + 255 | 0] = jsvIsFunctionParameter(HEAP32[$6 + 256 >> 2]) & 1;
        if (!(HEAP8[$6 + 255 | 0] & 1 ? 0 : HEAP16[HEAP32[38615] + 2 >> 1] == 41)) {
         HEAP32[$6 + 260 >> 2] = HEAP32[$6 + 260 >> 2] + 1;
         HEAP32[$6 + 248 >> 2] = 0;
         if (HEAP16[HEAP32[38615] + 2 >> 1] != 41) {
          HEAP32[$6 + 248 >> 2] = jspeAssignmentExpression();
         }
         HEAP32[$6 + 248 >> 2] = jsvSkipNameAndUnLock(HEAP32[$6 + 248 >> 2]);
         $1 = HEAP32[$6 + 292 >> 2];
         label$55: {
          if (HEAP8[$6 + 255 | 0] & 1) {
           $0 = jsvNewFromStringVar(HEAP32[$6 + 256 >> 2], 1, 2147483647);
           break label$55;
          }
          $0 = 0;
         }
         jsvAddFunctionParameter($1, $0, HEAP32[$6 + 248 >> 2]);
         jsvUnLock(HEAP32[$6 + 248 >> 2]);
         if (HEAP16[HEAP32[38615] + 2 >> 1] != 41) {
          if (!(jslMatch(44) & 1)) {
           HEAP32[$6 + 380 >> 2] = 0;
           break label$1;
          }
         }
        }
        jsvUnLock(HEAP32[$6 + 256 >> 2]);
        if (HEAP8[$6 + 255 | 0] & 1) {
         jsvObjectIteratorNext($6 + 272 | 0);
        }
        continue;
       }
       break;
      }
      if (!(jslMatch(41) & 1)) {
       HEAP32[$6 + 380 >> 2] = 0;
       break label$1;
      }
      break label$47;
     }
     HEAP32[$6 + 244 >> 2] = 0;
     while (1) {
      if (HEAP32[$6 + 244 >> 2] < HEAP32[$6 + 360 >> 2]) {
       HEAP32[$6 + 240 >> 2] = jsvObjectIteratorGetKey_2($6 + 272 | 0);
       HEAP8[$6 + 239 | 0] = jsvIsFunctionParameter(HEAP32[$6 + 240 >> 2]) & 1;
       $1 = HEAP32[$6 + 292 >> 2];
       label$63: {
        if (HEAP8[$6 + 239 | 0] & 1) {
         $0 = jsvNewFromStringVar(HEAP32[$6 + 240 >> 2], 1, 2147483647);
         break label$63;
        }
        $0 = 0;
       }
       jsvAddFunctionParameter($1, $0, HEAP32[HEAP32[$6 + 356 >> 2] + (HEAP32[$6 + 244 >> 2] << 2) >> 2]);
       HEAP32[$6 + 244 >> 2] = HEAP32[$6 + 244 >> 2] + 1;
       jsvUnLock(HEAP32[$6 + 240 >> 2]);
       if (HEAP8[$6 + 239 | 0] & 1) {
        jsvObjectIteratorNext($6 + 272 | 0);
       }
       continue;
      }
      break;
     }
    }
    while (1) {
     if (jsvObjectIteratorHasValue_2($6 + 272 | 0) & 1) {
      HEAP32[$6 + 232 >> 2] = jsvObjectIteratorGetKey_2($6 + 272 | 0);
      if (jsvIsString(HEAP32[$6 + 232 >> 2]) & 1) {
       label$69: {
        if (jsvIsStringEqual(HEAP32[$6 + 232 >> 2], 102046) & 1) {
         HEAP32[$6 + 288 >> 2] = jsvSkipName(HEAP32[$6 + 232 >> 2]);
         break label$69;
        }
        label$71: {
         if (jsvIsStringEqual(HEAP32[$6 + 232 >> 2], 105817) & 1) {
          HEAP32[$6 + 284 >> 2] = jsvSkipName(HEAP32[$6 + 232 >> 2]);
          break label$71;
         }
         label$73: {
          if (jsvIsStringEqual(HEAP32[$6 + 232 >> 2], 102698) & 1) {
           HEAP32[$6 + 280 >> 2] = jsvSkipName(HEAP32[$6 + 232 >> 2]);
           break label$73;
          }
          label$75: {
           if (jsvIsStringEqual(HEAP32[$6 + 232 >> 2], 100302) & 1) {
            jsvUnLock(HEAP32[$6 + 348 >> 2]);
            HEAP32[$6 + 348 >> 2] = jsvSkipName(HEAP32[$6 + 232 >> 2]);
            break label$75;
           }
           if (jsvIsFunctionParameter(HEAP32[$6 + 232 >> 2]) & 1) {
            HEAP32[$6 + 228 >> 2] = jsvSkipName(HEAP32[$6 + 232 >> 2]);
            jsvAddFunctionParameter(HEAP32[$6 + 292 >> 2], jsvNewFromStringVar(HEAP32[$6 + 232 >> 2], 1, 2147483647), HEAP32[$6 + 228 >> 2]);
            jsvUnLock(HEAP32[$6 + 228 >> 2]);
           }
          }
         }
        }
       }
      }
      jsvUnLock(HEAP32[$6 + 232 >> 2]);
      jsvObjectIteratorNext($6 + 272 | 0);
      continue;
     }
     break;
    }
    jsvObjectIteratorFree_2($6 + 272 | 0);
    if (HEAP32[$6 + 280 >> 2]) {
     HEAP32[$6 + 224 >> 2] = jsvMakeIntoVariableName(jsvNewFromStringVarComplete(HEAP32[$6 + 280 >> 2]), HEAP32[$6 + 376 >> 2]);
     jsvAddName(HEAP32[$6 + 292 >> 2], HEAP32[$6 + 224 >> 2]);
     jsvUnLock2(HEAP32[$6 + 224 >> 2], HEAP32[$6 + 280 >> 2]);
    }
    if (!(HEAP32[46755] & 112)) {
     HEAP32[$6 + 220 >> 2] = HEAP32[46749];
     HEAP32[46749] = 0;
     if (HEAP32[$6 + 288 >> 2]) {
      jspeiLoadScopesFromVar(HEAP32[$6 + 288 >> 2]);
      jsvUnLock(HEAP32[$6 + 288 >> 2]);
     }
     if (jspeiAddScope(HEAP32[$6 + 292 >> 2]) & 1) {
      HEAP32[$6 + 216 >> 2] = HEAP32[46750];
      HEAP8[$6 + 215 | 0] = HEAPU8[187008];
      HEAP32[46750] = HEAP32[$6 + 292 >> 2];
      HEAP8[187008] = 0;
      HEAP32[$6 + 208 >> 2] = HEAP32[46753];
      label$82: {
       if (HEAP32[$6 + 348 >> 2]) {
        HEAP32[46753] = jsvRef(HEAP32[$6 + 348 >> 2]);
        break label$82;
       }
       HEAP32[46753] = jsvRef(HEAP32[46747]);
      }
      if (HEAP32[$6 + 284 >> 2]) {
       HEAP32[$6 + 76 >> 2] = jslSetLex($6 + 80 | 0);
       jslInit(HEAP32[$6 + 284 >> 2]);
       HEAP32[$6 + 72 >> 2] = HEAP32[46755];
       HEAP32[46755] = HEAP32[46755] & 6256 | 1;
       label$85: {
        if (jsvIsFunctionReturn(HEAP32[$6 + 376 >> 2]) & 1) {
         if (HEAP16[HEAP32[38615] + 2 >> 1] == 59 | HEAP16[HEAP32[38615] + 2 >> 1] == 125) {
          break label$85;
         }
         HEAP32[$6 + 352 >> 2] = jsvSkipNameAndUnLock(jspeExpression());
         break label$85;
        }
        HEAP32[$6 + 68 >> 2] = jsvAddNamedChild(HEAP32[$6 + 292 >> 2], 0, 102075);
        HEAP8[187008] = HEAPU8[187008] - 1;
        jspeBlockNoBrackets();
        HEAP8[187008] = HEAPU8[187008] + 1;
        HEAP32[$6 + 352 >> 2] = jsvSkipName(HEAP32[$6 + 68 >> 2]);
        if (HEAP32[$6 + 68 >> 2]) {
         jsvRemoveChildAndUnLock(HEAP32[$6 + 292 >> 2], HEAP32[$6 + 68 >> 2]);
        }
       }
       HEAP32[$6 + 64 >> 2] = HEAP32[46755] & 112;
       HEAP32[46755] = HEAP32[46755] & -1664 | HEAP32[$6 + 72 >> 2] & 1663;
       jslKill();
       jslSetLex(HEAP32[$6 + 76 >> 2]);
       if (HEAP32[$6 + 64 >> 2]) {
        HEAP32[46755] = HEAP32[$6 + 64 >> 2] | HEAP32[46755];
        HEAP32[$6 + 60 >> 2] = jsvObjectGetChild(HEAP32[46748], 105500, 28);
        if (HEAP32[$6 + 60 >> 2]) {
         $0 = HEAP32[$6 + 60 >> 2];
         $1 = jsvIsString(HEAP32[$6 + 372 >> 2]) & 1;
         HEAP32[$6 >> 2] = HEAP32[$6 + 372 >> 2];
         jsvAppendPrintf($0, $1 ? 127548 : 127576, $6);
         label$90: {
          if (HEAP32[38615]) {
           jspAppendStackTrace(HEAP32[$6 + 60 >> 2]);
           break label$90;
          }
          jsvAppendPrintf(HEAP32[$6 + 60 >> 2], 128265, 0);
         }
         jsvUnLock(HEAP32[$6 + 60 >> 2]);
        }
       }
      }
      if (HEAP32[46753]) {
       jsvUnRef(HEAP32[46753]);
      }
      HEAP32[46753] = HEAP32[$6 + 208 >> 2];
      jspeiRemoveScope();
      HEAP32[46750] = HEAP32[$6 + 216 >> 2];
      HEAP8[187008] = HEAPU8[$6 + 215 | 0];
     }
     jsvUnLock(HEAP32[46749]);
     HEAP32[46749] = HEAP32[$6 + 220 >> 2];
    }
    jsvUnLock2(HEAP32[$6 + 284 >> 2], HEAP32[$6 + 292 >> 2]);
   }
   jsvUnLock(HEAP32[$6 + 348 >> 2]);
   if (HEAP32[38615]) {
    jsvStringIteratorUpdatePtr(HEAP32[38615] + 88 | 0);
   }
   HEAP32[$6 + 380 >> 2] = HEAP32[$6 + 352 >> 2];
   break label$1;
  }
  if (HEAP8[$6 + 367 | 0] & 1) {
   if (jspCheckStackPosition() & 1) {
    jspeParseFunctionCallBrackets();
   }
   HEAP32[$6 + 380 >> 2] = 0;
   break label$1;
  }
  HEAP32[$6 + 380 >> 2] = 0;
 }
 __stack_pointer = $6 + 384 | 0;
 return HEAP32[$6 + 380 >> 2];
}

function jsvMathsOp($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $3 = __stack_pointer - 80 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 72 >> 2] = $0;
 HEAP32[$3 + 68 >> 2] = $1;
 HEAP32[$3 + 64 >> 2] = $2;
 label$1: {
  if (!(HEAP32[$3 + 64 >> 2] != 139 & HEAP32[$3 + 64 >> 2] != 141)) {
   HEAP8[$3 + 63 | 0] = jsvMathsOpTypeEqual(HEAP32[$3 + 72 >> 2], HEAP32[$3 + 68 >> 2]) & 1;
   if (HEAP32[$3 + 64 >> 2] == 139) {
    HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP8[$3 + 63 | 0] & 1);
    break label$1;
   }
   HEAP32[$3 + 76 >> 2] = jsvNewFromBool((HEAPU8[$3 + 63 | 0] ^ -1) & 1);
   break label$1;
  }
  $0 = 1;
  label$5: {
   if (HEAP32[$3 + 64 >> 2] == 38) {
    break label$5;
   }
   $0 = 1;
   if (HEAP32[$3 + 64 >> 2] == 124) {
    break label$5;
   }
   $0 = 1;
   if (HEAP32[$3 + 64 >> 2] == 94) {
    break label$5;
   }
   $0 = 1;
   if (HEAP32[$3 + 64 >> 2] == 143) {
    break label$5;
   }
   $0 = 1;
   if (HEAP32[$3 + 64 >> 2] == 146) {
    break label$5;
   }
   $0 = HEAP32[$3 + 64 >> 2] == 147;
  }
  HEAP8[$3 + 62 | 0] = $0;
  $0 = 1;
  label$6: {
   if (HEAP8[$3 + 62 | 0] & 1) {
    break label$6;
   }
   $0 = 1;
   if (HEAP32[$3 + 64 >> 2] == 42) {
    break label$6;
   }
   $0 = 1;
   if (HEAP32[$3 + 64 >> 2] == 47) {
    break label$6;
   }
   $0 = 1;
   if (HEAP32[$3 + 64 >> 2] == 37) {
    break label$6;
   }
   $0 = HEAP32[$3 + 64 >> 2] == 45;
  }
  HEAP8[$3 + 61 | 0] = $0;
  $0 = 1;
  label$7: {
   if (HEAP32[$3 + 64 >> 2] == 138) {
    break label$7;
   }
   $0 = 1;
   if (HEAP32[$3 + 64 >> 2] == 140) {
    break label$7;
   }
   $0 = 1;
   if (HEAP32[$3 + 64 >> 2] == 60) {
    break label$7;
   }
   $0 = 1;
   if (HEAP32[$3 + 64 >> 2] == 142) {
    break label$7;
   }
   $0 = 1;
   if (HEAP32[$3 + 64 >> 2] == 62) {
    break label$7;
   }
   $0 = HEAP32[$3 + 64 >> 2] == 145;
  }
  HEAP8[$3 + 60 | 0] = $0;
  if (HEAP8[$3 + 60 | 0] & 1) {
   label$9: {
    label$10: {
     if (!(jsvIsNumeric(HEAP32[$3 + 72 >> 2]) & 1)) {
      break label$10;
     }
     if (!(jsvIsString(HEAP32[$3 + 68 >> 2]) & 1)) {
      break label$10;
     }
     HEAP8[$3 + 61 | 0] = 1;
     if (jsvIsIntegerish(HEAP32[$3 + 72 >> 2]) & 1) {
      $4 = jsvIsStringNumericInt(HEAP32[$3 + 68 >> 2], 0);
     }
     HEAP8[$3 + 62 | 0] = $4 & 1;
     break label$9;
    }
    label$12: {
     if (!(jsvIsNumeric(HEAP32[$3 + 68 >> 2]) & 1)) {
      break label$12;
     }
     if (!(jsvIsString(HEAP32[$3 + 72 >> 2]) & 1)) {
      break label$12;
     }
     HEAP8[$3 + 61 | 0] = 1;
     if (jsvIsIntegerish(HEAP32[$3 + 68 >> 2]) & 1) {
      $4 = jsvIsStringNumericInt(HEAP32[$3 + 72 >> 2], 0);
     }
     HEAP8[$3 + 62 | 0] = $4 & 1;
    }
   }
  }
  label$14: {
   if (!(jsvIsUndefined(HEAP32[$3 + 72 >> 2]) & 1)) {
    break label$14;
   }
   if (!(jsvIsUndefined(HEAP32[$3 + 68 >> 2]) & 1)) {
    break label$14;
   }
   if (HEAP32[$3 + 64 >> 2] == 138) {
    HEAP32[$3 + 76 >> 2] = jsvNewFromBool(1);
    break label$1;
   }
   if (HEAP32[$3 + 64 >> 2] == 140) {
    HEAP32[$3 + 76 >> 2] = jsvNewFromBool(0);
    break label$1;
   }
   HEAP32[$3 + 76 >> 2] = 0;
   break label$1;
  }
  label$17: {
   label$18: {
    if (HEAP8[$3 + 61 | 0] & 1) {
     break label$18;
    }
    label$19: {
     if (jsvIsNumeric(HEAP32[$3 + 72 >> 2]) & 1) {
      break label$19;
     }
     if (jsvIsUndefined(HEAP32[$3 + 72 >> 2]) & 1) {
      break label$19;
     }
     if (!(jsvIsNull(HEAP32[$3 + 72 >> 2]) & 1)) {
      break label$17;
     }
    }
    if (jsvIsNumeric(HEAP32[$3 + 68 >> 2]) & 1) {
     break label$18;
    }
    if (jsvIsUndefined(HEAP32[$3 + 68 >> 2]) & 1) {
     break label$18;
    }
    if (!(jsvIsNull(HEAP32[$3 + 68 >> 2]) & 1)) {
     break label$17;
    }
   }
   label$20: {
    if (!(HEAP8[$3 + 62 | 0] & 1)) {
     if (!(jsvIsIntegerish(HEAP32[$3 + 72 >> 2]) & 1)) {
      break label$20;
     }
     if (!(jsvIsIntegerish(HEAP32[$3 + 68 >> 2]) & 1)) {
      break label$20;
     }
    }
    HEAP32[$3 + 56 >> 2] = jsvGetInteger(HEAP32[$3 + 72 >> 2]);
    HEAP32[$3 + 52 >> 2] = jsvGetInteger(HEAP32[$3 + 68 >> 2]);
    label$22: {
     switch (HEAP32[$3 + 64 >> 2] - 37 | 0) {
     case 6:
      $0 = HEAP32[$3 + 56 >> 2];
      $4 = $0 >> 31;
      $2 = $0;
      $1 = $4;
      $4 = HEAP32[$3 + 52 >> 2];
      $0 = $4 >> 31;
      $5 = $4;
      $4 = $0;
      $0 = $1;
      $1 = $0 + $4 | 0;
      $2 = $2 + $5 | 0;
      $1 = $2 >>> 0 < $5 >>> 0 ? $1 + 1 | 0 : $1;
      HEAP32[$3 + 76 >> 2] = jsvNewFromLongInteger($2, $1);
      break label$1;

     case 8:
      $1 = HEAP32[$3 + 56 >> 2];
      $2 = $1 >> 31;
      $0 = $1;
      $6 = $2;
      $2 = HEAP32[$3 + 52 >> 2];
      $1 = $2 >> 31;
      $7 = $1;
      $5 = $2;
      $4 = $0 - $2 | 0;
      $1 = $6;
      $2 = $7;
      $2 = $2 + ($0 >>> 0 < $5 >>> 0) | 0;
      $2 = $1 - $2 | 0;
      HEAP32[$3 + 76 >> 2] = jsvNewFromLongInteger($4, $2);
      break label$1;

     case 5:
      $2 = HEAP32[$3 + 56 >> 2];
      $0 = $2 >> 31;
      $5 = $2;
      $1 = $0;
      $0 = HEAP32[$3 + 52 >> 2];
      $2 = $0 >> 31;
      $4 = $2;
      $2 = $1;
      $1 = $0;
      $0 = $4;
      $0 = __wasm_i64_mul($5, $2, $1, $0);
      $2 = i64toi32_i32$HIGH_BITS;
      HEAP32[$3 + 76 >> 2] = jsvNewFromLongInteger($0, $2);
      break label$1;

     case 10:
      HEAP32[$3 + 76 >> 2] = jsvNewFromFloat(+HEAP32[$3 + 56 >> 2] / +HEAP32[$3 + 52 >> 2]);
      break label$1;

     case 1:
      HEAP32[$3 + 76 >> 2] = jsvNewFromInteger(HEAP32[$3 + 56 >> 2] & HEAP32[$3 + 52 >> 2]);
      break label$1;

     case 87:
      HEAP32[$3 + 76 >> 2] = jsvNewFromInteger(HEAP32[$3 + 56 >> 2] | HEAP32[$3 + 52 >> 2]);
      break label$1;

     case 57:
      HEAP32[$3 + 76 >> 2] = jsvNewFromInteger(HEAP32[$3 + 56 >> 2] ^ HEAP32[$3 + 52 >> 2]);
      break label$1;

     case 0:
      if (HEAP32[$3 + 52 >> 2] < 0) {
       HEAP32[$3 + 52 >> 2] = 0 - HEAP32[$3 + 52 >> 2];
      }
      label$41: {
       if (HEAP32[$3 + 52 >> 2]) {
        $0 = jsvNewFromInteger(HEAP32[$3 + 56 >> 2] % HEAP32[$3 + 52 >> 2] | 0);
        break label$41;
       }
       $0 = jsvNewFromFloat(nan);
      }
      HEAP32[$3 + 76 >> 2] = $0;
      break label$1;

     case 106:
      HEAP32[$3 + 76 >> 2] = jsvNewFromInteger(HEAP32[$3 + 56 >> 2] << HEAP32[$3 + 52 >> 2]);
      break label$1;

     case 109:
      HEAP32[$3 + 76 >> 2] = jsvNewFromInteger(HEAP32[$3 + 56 >> 2] >> HEAP32[$3 + 52 >> 2]);
      break label$1;

     case 110:
      HEAP32[$3 + 76 >> 2] = jsvNewFromLongInteger(HEAP32[$3 + 56 >> 2] >>> HEAP32[$3 + 52 >> 2] | 0, 0);
      break label$1;

     case 101:
      if (HEAP32[$3 + 56 >> 2] == HEAP32[$3 + 52 >> 2]) {
       $5 = (jsvIsNull(HEAP32[$3 + 72 >> 2]) & 1) == (jsvIsNull(HEAP32[$3 + 68 >> 2]) & 1);
      }
      HEAP32[$3 + 76 >> 2] = jsvNewFromBool($5);
      break label$1;

     case 103:
      $0 = 1;
      if (HEAP32[$3 + 56 >> 2] == HEAP32[$3 + 52 >> 2]) {
       $0 = (jsvIsNull(HEAP32[$3 + 72 >> 2]) & 1) != (jsvIsNull(HEAP32[$3 + 68 >> 2]) & 1);
      }
      HEAP32[$3 + 76 >> 2] = jsvNewFromBool($0);
      break label$1;

     case 23:
      HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP32[$3 + 56 >> 2] < HEAP32[$3 + 52 >> 2]);
      break label$1;

     case 105:
      HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP32[$3 + 56 >> 2] <= HEAP32[$3 + 52 >> 2]);
      break label$1;

     case 25:
      HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP32[$3 + 56 >> 2] > HEAP32[$3 + 52 >> 2]);
      break label$1;

     case 108:
      HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP32[$3 + 56 >> 2] >= HEAP32[$3 + 52 >> 2]);
      break label$1;

     default:
      break label$22;
     }
    }
    HEAP32[$3 + 76 >> 2] = jsvMathsOpError(HEAP32[$3 + 64 >> 2], 101295);
    break label$1;
   }
   HEAPF64[$3 + 40 >> 3] = jsvGetFloat(HEAP32[$3 + 72 >> 2]);
   HEAPF64[$3 + 32 >> 3] = jsvGetFloat(HEAP32[$3 + 68 >> 2]);
   label$45: {
    switch (HEAP32[$3 + 64 >> 2] - 37 | 0) {
    case 6:
     HEAP32[$3 + 76 >> 2] = jsvNewFromFloat(HEAPF64[$3 + 40 >> 3] + HEAPF64[$3 + 32 >> 3]);
     break label$1;

    case 8:
     HEAP32[$3 + 76 >> 2] = jsvNewFromFloat(HEAPF64[$3 + 40 >> 3] - HEAPF64[$3 + 32 >> 3]);
     break label$1;

    case 5:
     HEAP32[$3 + 76 >> 2] = jsvNewFromFloat(HEAPF64[$3 + 40 >> 3] * HEAPF64[$3 + 32 >> 3]);
     break label$1;

    case 10:
     HEAP32[$3 + 76 >> 2] = jsvNewFromFloat(HEAPF64[$3 + 40 >> 3] / HEAPF64[$3 + 32 >> 3]);
     break label$1;

    case 0:
     HEAP32[$3 + 76 >> 2] = jsvNewFromFloat(jswrap_math_mod(HEAPF64[$3 + 40 >> 3], HEAPF64[$3 + 32 >> 3]));
     break label$1;

    case 101:
    case 103:
     if (HEAPF64[$3 + 40 >> 3] == HEAPF64[$3 + 32 >> 3]) {
      $5 = (jsvIsNull(HEAP32[$3 + 72 >> 2]) & 1) == (jsvIsNull(HEAP32[$3 + 68 >> 2]) & 1);
     }
     HEAP8[$3 + 31 | 0] = $5;
     label$57: {
      label$58: {
       if (jsvIsNull(HEAP32[$3 + 72 >> 2]) & 1) {
        if (jsvIsUndefined(HEAP32[$3 + 68 >> 2]) & 1) {
         break label$58;
        }
       }
       if (!(jsvIsNull(HEAP32[$3 + 68 >> 2]) & 1)) {
        break label$57;
       }
       if (!(jsvIsUndefined(HEAP32[$3 + 72 >> 2]) & 1)) {
        break label$57;
       }
      }
      HEAP8[$3 + 31 | 0] = 1;
     }
     if (HEAP32[$3 + 64 >> 2] == 138) {
      $0 = HEAP8[$3 + 31 | 0] & 1;
     } else {
      $0 = (HEAPU8[$3 + 31 | 0] ^ -1) & 1;
     }
     HEAP32[$3 + 76 >> 2] = jsvNewFromBool($0);
     break label$1;

    case 23:
     HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAPF64[$3 + 40 >> 3] < HEAPF64[$3 + 32 >> 3]);
     break label$1;

    case 105:
     HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAPF64[$3 + 40 >> 3] <= HEAPF64[$3 + 32 >> 3]);
     break label$1;

    case 25:
     HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAPF64[$3 + 40 >> 3] > HEAPF64[$3 + 32 >> 3]);
     break label$1;

    case 108:
     HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAPF64[$3 + 40 >> 3] >= HEAPF64[$3 + 32 >> 3]);
     break label$1;

    default:
     break label$45;
    }
   }
   HEAP32[$3 + 76 >> 2] = jsvMathsOpError(HEAP32[$3 + 64 >> 2], 105136);
   break label$1;
  }
  label$62: {
   label$63: {
    if (jsvIsArray(HEAP32[$3 + 72 >> 2]) & 1) {
     break label$63;
    }
    if (jsvIsObject(HEAP32[$3 + 72 >> 2]) & 1) {
     break label$63;
    }
    if (jsvIsFunction(HEAP32[$3 + 72 >> 2]) & 1) {
     break label$63;
    }
    if (jsvIsArray(HEAP32[$3 + 68 >> 2]) & 1) {
     break label$63;
    }
    if (jsvIsObject(HEAP32[$3 + 68 >> 2]) & 1) {
     break label$63;
    }
    if (!(jsvIsFunction(HEAP32[$3 + 68 >> 2]) & 1)) {
     break label$62;
    }
   }
   if ((jsvIsArray(HEAP32[$3 + 72 >> 2]) & 1) != (jsvIsArray(HEAP32[$3 + 68 >> 2]) & 1) | HEAP32[$3 + 64 >> 2] != 138 & HEAP32[$3 + 64 >> 2] != 140) {
    break label$62;
   }
   HEAP8[$3 + 30 | 0] = HEAP32[$3 + 72 >> 2] == HEAP32[$3 + 68 >> 2];
   label$65: {
    if (!(jsvIsNativeFunction(HEAP32[$3 + 72 >> 2]) & 1)) {
     if (!(jsvIsNativeFunction(HEAP32[$3 + 68 >> 2]) & 1)) {
      break label$65;
     }
    }
    $0 = 0;
    label$67: {
     if (!HEAP32[$3 + 72 >> 2]) {
      break label$67;
     }
     $0 = 0;
     if (!HEAP32[$3 + 68 >> 2]) {
      break label$67;
     }
     $1 = HEAP32[$3 + 72 >> 2];
     $2 = HEAP32[$3 + 68 >> 2];
     $0 = 0;
     if ((HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24)) != (HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24))) {
      break label$67;
     }
     $1 = HEAP32[$3 + 72 >> 2];
     $2 = HEAP32[$3 + 68 >> 2];
     $0 = 0;
     if ((HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8) != (HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8)) {
      break label$67;
     }
     $0 = (jsvGetFirstChild(HEAP32[$3 + 72 >> 2]) & 65535) == (jsvGetFirstChild(HEAP32[$3 + 68 >> 2]) & 65535);
    }
    HEAP8[$3 + 30 | 0] = $0;
   }
   label$68: {
    switch (HEAP32[$3 + 64 >> 2] - 138 | 0) {
    case 0:
     HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP8[$3 + 30 | 0] & 1);
     break label$1;

    case 2:
     HEAP32[$3 + 76 >> 2] = jsvNewFromBool((HEAPU8[$3 + 30 | 0] ^ -1) & 1);
     break label$1;

    default:
     break label$68;
    }
   }
   HEAP32[$3 + 76 >> 2] = jsvMathsOpError(HEAP32[$3 + 64 >> 2], jsvIsArray(HEAP32[$3 + 72 >> 2]) & 1 ? 96668 : 98070);
   break label$1;
  }
  HEAP32[$3 + 24 >> 2] = jsvAsString(HEAP32[$3 + 72 >> 2]);
  HEAP32[$3 + 20 >> 2] = jsvAsString(HEAP32[$3 + 68 >> 2]);
  if (!(HEAP32[$3 + 20 >> 2] ? HEAP32[$3 + 24 >> 2] : 0)) {
   jsvUnLock2(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
   HEAP32[$3 + 76 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$3 + 64 >> 2] == 43) {
   $0 = HEAP32[$3 + 24 >> 2];
   HEAP16[$3 + 14 >> 1] = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63;
   label$74: {
    label$75: {
     if (HEAPU16[$3 + 14 >> 1] < 28 | HEAPU16[$3 + 14 >> 1] > 36) {
      break label$75;
     }
     if ((jsvGetLocks(HEAP32[$3 + 24 >> 2]) & 255) != 1) {
      break label$75;
     }
     if (jsvGetRefs(HEAP32[$3 + 24 >> 2]) & 65535) {
      break label$75;
     }
     HEAP32[$3 + 16 >> 2] = jsvLockAgain(HEAP32[$3 + 24 >> 2]);
     break label$74;
    }
    label$76: {
     if (!(!(HEAPU16[$3 + 14 >> 1] == 37 | HEAPU16[$3 + 14 >> 1] == 38) & HEAPU16[$3 + 14 >> 1] != 39)) {
      HEAP32[$3 + 16 >> 2] = jsvNewFromStringVarComplete(HEAP32[$3 + 24 >> 2]);
      break label$76;
     }
     HEAP32[$3 + 16 >> 2] = jsvCopy(HEAP32[$3 + 24 >> 2], 0);
    }
   }
   if (HEAP32[$3 + 16 >> 2]) {
    jsvAppendStringVarComplete(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 20 >> 2]);
   }
   jsvUnLock2(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
   HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 16 >> 2];
   break label$1;
  }
  HEAP32[$3 + 8 >> 2] = jsvCompareString(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], 0, 0, 0);
  jsvUnLock2(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
  label$80: {
   label$81: {
    label$82: {
     label$83: {
      $0 = HEAP32[$3 + 64 >> 2];
      if (($0 | 0) != 60) {
       if (($0 | 0) == 62) {
        break label$82;
       }
       label$85: {
        if (($0 | 0) != 138) {
         switch ($0 - 140 | 0) {
         case 5:
          break label$81;

         case 2:
          break label$83;

         case 0:
          break label$85;

         default:
          break label$80;
         }
        }
        HEAP32[$3 + 76 >> 2] = jsvNewFromBool(!HEAP32[$3 + 8 >> 2]);
        break label$1;
       }
       HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP32[$3 + 8 >> 2] != 0);
       break label$1;
      }
      HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP32[$3 + 8 >> 2] < 0);
      break label$1;
     }
     HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP32[$3 + 8 >> 2] <= 0);
     break label$1;
    }
    HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP32[$3 + 8 >> 2] > 0);
    break label$1;
   }
   HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP32[$3 + 8 >> 2] >= 0);
   break label$1;
  }
  HEAP32[$3 + 76 >> 2] = jsvMathsOpError(HEAP32[$3 + 64 >> 2], 103894);
 }
 __stack_pointer = $3 + 80 | 0;
 return HEAP32[$3 + 76 >> 2];
}

function jswrap_graphics_drawString($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 432 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 424 >> 2] = $0;
 HEAP32[$5 + 420 >> 2] = $1;
 HEAP32[$5 + 416 >> 2] = $2;
 HEAP32[$5 + 412 >> 2] = $3;
 HEAP8[$5 + 411 | 0] = $4;
 label$1: {
  if (!(graphicsGetFromVar($5 + 336 | 0, HEAP32[$5 + 424 >> 2]) & 1)) {
   HEAP32[$5 + 428 >> 2] = 0;
   break label$1;
  }
  _jswrap_graphics_getFontInfo($5 + 336 | 0, $5 + 312 | 0);
  HEAP32[$5 + 308 >> 2] = _jswrap_graphics_getFontHeightInternal($5 + 336 | 0, $5 + 312 | 0);
  HEAP32[$5 + 304 >> 2] = 1;
  if (HEAP32[$5 + 312 >> 2] & 32768) {
   if ((HEAP32[$5 + 312 >> 2] & 57344) == 40960) {
    HEAP32[$5 + 304 >> 2] = 2;
   }
   if ((HEAP32[$5 + 312 >> 2] & 57344) == 49152) {
    HEAP32[$5 + 304 >> 2] = 4;
   }
  }
  HEAP32[$5 + 300 >> 2] = HEAPU8[$5 + 344 | 0] | HEAPU8[$5 + 345 | 0] << 8 | (HEAPU8[$5 + 346 | 0] << 16 | HEAPU8[$5 + 347 | 0] << 24);
  label$6: {
   if ((HEAPU8[$5 + 367 | 0] >>> 4 & 3) == 1) {
    $0 = (HEAPU8[$5 + 344 | 0] | HEAPU8[$5 + 345 | 0] << 8 | (HEAPU8[$5 + 346 | 0] << 16 | HEAPU8[$5 + 347 | 0] << 24)) ^ 48;
    HEAP8[$5 + 344 | 0] = $0;
    HEAP8[$5 + 345 | 0] = $0 >>> 8;
    HEAP8[$5 + 346 | 0] = $0 >>> 16;
    HEAP8[$5 + 347 | 0] = $0 >>> 24;
    HEAP32[$5 + 296 >> 2] = (HEAPU8[$5 + 348 | 0] | HEAPU8[$5 + 349 | 0] << 8) - (HEAP32[$5 + 416 >> 2] + 1 | 0);
    HEAP32[$5 + 416 >> 2] = HEAP32[$5 + 412 >> 2];
    HEAP32[$5 + 412 >> 2] = HEAP32[$5 + 296 >> 2];
    break label$6;
   }
   label$8: {
    if ((HEAPU8[$5 + 367 | 0] >>> 4 & 3) == 2) {
     $0 = (HEAPU8[$5 + 344 | 0] | HEAPU8[$5 + 345 | 0] << 8 | (HEAPU8[$5 + 346 | 0] << 16 | HEAPU8[$5 + 347 | 0] << 24)) ^ 96;
     HEAP8[$5 + 344 | 0] = $0;
     HEAP8[$5 + 345 | 0] = $0 >>> 8;
     HEAP8[$5 + 346 | 0] = $0 >>> 16;
     HEAP8[$5 + 347 | 0] = $0 >>> 24;
     HEAP32[$5 + 416 >> 2] = (HEAPU8[$5 + 348 | 0] | HEAPU8[$5 + 349 | 0] << 8) - (HEAP32[$5 + 416 >> 2] + 1 | 0);
     HEAP32[$5 + 412 >> 2] = (HEAPU8[$5 + 350 | 0] | HEAPU8[$5 + 351 | 0] << 8) - (HEAP32[$5 + 412 >> 2] + 1 | 0);
     break label$8;
    }
    if ((HEAPU8[$5 + 367 | 0] >>> 4 & 3) == 3) {
     $0 = (HEAPU8[$5 + 344 | 0] | HEAPU8[$5 + 345 | 0] << 8 | (HEAPU8[$5 + 346 | 0] << 16 | HEAPU8[$5 + 347 | 0] << 24)) ^ 80;
     HEAP8[$5 + 344 | 0] = $0;
     HEAP8[$5 + 345 | 0] = $0 >>> 8;
     HEAP8[$5 + 346 | 0] = $0 >>> 16;
     HEAP8[$5 + 347 | 0] = $0 >>> 24;
     HEAP32[$5 + 292 >> 2] = (HEAPU8[$5 + 350 | 0] | HEAPU8[$5 + 351 | 0] << 8) - (HEAP32[$5 + 412 >> 2] + 1 | 0);
     HEAP32[$5 + 412 >> 2] = HEAP32[$5 + 416 >> 2];
     HEAP32[$5 + 416 >> 2] = HEAP32[$5 + 292 >> 2];
    }
   }
  }
  HEAP32[$5 + 288 >> 2] = jsvAsString(HEAP32[$5 + 420 >> 2]);
  HEAP32[$5 + 284 >> 2] = HEAP32[$5 + 416 >> 2];
  if ((HEAPU8[$5 + 367 | 0] & 3) >>> 0 < 2) {
   HEAP32[$5 + 416 >> 2] = HEAP32[$5 + 284 >> 2] - ((Math_imul(_jswrap_graphics_stringWidth($5 + 336 | 0, HEAP32[$5 + 288 >> 2], 0), (HEAPU8[$5 + 367 | 0] & 3) + 1 | 0) | 0) / 2 | 0);
  }
  if ((HEAPU8[$5 + 367 | 0] >>> 2 & 3) >>> 0 < 2) {
   _jswrap_graphics_stringMetrics($5 + 336 | 0, HEAP32[$5 + 288 >> 2], -1, $5 + 264 | 0);
   HEAP32[$5 + 412 >> 2] = HEAP32[$5 + 412 >> 2] - ((Math_imul(HEAP32[$5 + 268 >> 2], (HEAPU8[$5 + 367 | 0] >>> 2 & 3) + 1 | 0) | 0) / 2 | 0);
  }
  HEAP32[$5 + 260 >> 2] = HEAPU8[$5 + 368 | 0] | HEAPU8[$5 + 369 | 0] << 8;
  HEAP32[$5 + 256 >> 2] = HEAPU8[$5 + 370 | 0] | HEAPU8[$5 + 371 | 0] << 8;
  HEAP32[$5 + 252 >> 2] = HEAPU8[$5 + 372 | 0] | HEAPU8[$5 + 373 | 0] << 8;
  HEAP32[$5 + 248 >> 2] = HEAPU8[$5 + 374 | 0] | HEAPU8[$5 + 375 | 0] << 8;
  deviceToGraphicsCoordinates($5 + 336 | 0, $5 + 260 | 0, $5 + 256 | 0);
  deviceToGraphicsCoordinates($5 + 336 | 0, $5 + 252 | 0, $5 + 248 | 0);
  if (HEAP32[$5 + 252 >> 2] < HEAP32[$5 + 260 >> 2]) {
   HEAP32[$5 + 244 >> 2] = HEAP32[$5 + 260 >> 2];
   HEAP32[$5 + 260 >> 2] = HEAP32[$5 + 252 >> 2];
   HEAP32[$5 + 252 >> 2] = HEAP32[$5 + 244 >> 2];
  }
  if (HEAP32[$5 + 248 >> 2] < HEAP32[$5 + 256 >> 2]) {
   HEAP32[$5 + 240 >> 2] = HEAP32[$5 + 256 >> 2];
   HEAP32[$5 + 256 >> 2] = HEAP32[$5 + 248 >> 2];
   HEAP32[$5 + 248 >> 2] = HEAP32[$5 + 240 >> 2];
  }
  jsvStringIteratorNewUTF8($5 + 200 | 0, HEAP32[$5 + 288 >> 2], 0);
  while (1) {
   if (jsvStringIteratorHasChar_12($5 + 200 | 0) & 1) {
    HEAP32[$5 + 196 >> 2] = jsvStringIteratorGetUTF8CharAndNext($5 + 200 | 0);
    if (HEAP32[$5 + 196 >> 2] == 10) {
     HEAP32[$5 + 416 >> 2] = HEAP32[$5 + 284 >> 2];
     if ((HEAPU8[$5 + 367 | 0] & 3) >>> 0 < 2) {
      $0 = HEAP32[$5 + 288 >> 2];
      HEAP32[$5 + 416 >> 2] = HEAP32[$5 + 284 >> 2] - ((Math_imul(_jswrap_graphics_stringWidth($5 + 336 | 0, $0, jsvConvertToUTF8Index($0, jsvStringIteratorGetIndex_6($5 + 200 | 0))), (HEAPU8[$5 + 367 | 0] & 3) + 1 | 0) | 0) / 2 | 0);
     }
     HEAP32[$5 + 412 >> 2] = HEAP32[$5 + 308 >> 2] + HEAP32[$5 + 412 >> 2];
     continue;
    }
    if (!HEAP32[$5 + 196 >> 2]) {
     HEAP32[$5 + 108 >> 2] = jsvConvertToUTF8Index(HEAP32[$5 + 288 >> 2], jsvStringIteratorGetIndex_6($5 + 200 | 0));
     if (_jswrap_graphics_parseImage($5 + 336 | 0, HEAP32[$5 + 288 >> 2], HEAP32[$5 + 108 >> 2], $5 + 112 | 0) & 1) {
      jsvStringIteratorGotoUTF8($5 + 200 | 0, HEAP32[$5 + 288 >> 2], HEAP32[$5 + 108 >> 2] + HEAPU16[$5 + 160 >> 1] | 0);
      _jswrap_drawImageSimple($5 + 336 | 0, HEAP32[$5 + 416 >> 2], HEAP32[$5 + 412 >> 2] + ((HEAP32[$5 + 308 >> 2] - HEAP32[$5 + 116 >> 2] | 0) / 2 | 0) | 0, $5 + 112 | 0, $5 + 200 | 0, 1);
      _jswrap_graphics_freeImageInfo($5 + 112 | 0);
      HEAP32[$5 + 416 >> 2] = HEAP32[$5 + 112 >> 2] + HEAP32[$5 + 416 >> 2];
     }
     continue;
    }
    label$21: {
     if (!(HEAP32[$5 + 312 >> 2] | HEAP32[$5 + 196 >> 2] >= 256)) {
      HEAP32[$5 + 104 >> 2] = graphicsVectorCharWidth(HEAPU16[$5 + 318 >> 1], HEAP32[$5 + 196 >> 2] << 24 >> 24);
      if (!(HEAP32[$5 + 416 >> 2] <= (HEAP32[$5 + 260 >> 2] - HEAP32[$5 + 104 >> 2] | 0) | HEAP32[$5 + 416 >> 2] >= HEAP32[$5 + 252 >> 2] | (HEAP32[$5 + 412 >> 2] <= (HEAP32[$5 + 256 >> 2] - HEAP32[$5 + 308 >> 2] | 0) | HEAP32[$5 + 412 >> 2] > HEAP32[$5 + 248 >> 2]))) {
       if (HEAP8[$5 + 411 | 0] & 1) {
        graphicsFillRect($5 + 336 | 0, HEAP32[$5 + 416 >> 2], HEAP32[$5 + 412 >> 2], (HEAP32[$5 + 416 >> 2] + HEAP32[$5 + 104 >> 2] | 0) - 1 | 0, (HEAP32[$5 + 412 >> 2] + HEAP32[$5 + 308 >> 2] | 0) - 1 | 0, HEAPU8[$5 + 357 | 0] | HEAPU8[$5 + 358 | 0] << 8 | (HEAPU8[$5 + 359 | 0] << 16 | HEAPU8[$5 + 360 | 0] << 24));
       }
       graphicsGetVectorChar(631, $5 + 336 | 0, HEAP32[$5 + 416 >> 2], HEAP32[$5 + 412 >> 2], HEAPU16[$5 + 318 >> 1], HEAPU16[$5 + 320 >> 1], HEAP32[$5 + 196 >> 2] << 24 >> 24);
      }
      HEAP32[$5 + 416 >> 2] = HEAP32[$5 + 104 >> 2] + HEAP32[$5 + 416 >> 2];
      break label$21;
     }
     label$25: {
      if (!(HEAP32[$5 + 312 >> 2] != 8192 | HEAP32[$5 + 196 >> 2] >= 256)) {
       if (!(HEAP32[$5 + 416 >> 2] <= (HEAP32[$5 + 260 >> 2] - (HEAPU16[$5 + 318 >> 1] << 2) | 0) | HEAP32[$5 + 416 >> 2] >= HEAP32[$5 + 252 >> 2] | (HEAP32[$5 + 412 >> 2] <= (HEAP32[$5 + 256 >> 2] - HEAP32[$5 + 308 >> 2] | 0) | HEAP32[$5 + 412 >> 2] > HEAP32[$5 + 248 >> 2]))) {
        graphicsDrawChar4x6($5 + 336 | 0, HEAP32[$5 + 416 >> 2], HEAP32[$5 + 412 >> 2], HEAP32[$5 + 196 >> 2] << 24 >> 24, HEAPU16[$5 + 318 >> 1], HEAPU16[$5 + 320 >> 1], HEAP8[$5 + 411 | 0] & 1);
       }
       HEAP32[$5 + 416 >> 2] = HEAP32[$5 + 416 >> 2] + (HEAPU16[$5 + 318 >> 1] << 2);
       break label$25;
      }
      label$28: {
       if (HEAP32[$5 + 312 >> 2] == 16384) {
        if (!(HEAP32[$5 + 416 >> 2] <= (HEAP32[$5 + 260 >> 2] - Math_imul(HEAPU16[$5 + 318 >> 1], 6) | 0) | HEAP32[$5 + 416 >> 2] >= HEAP32[$5 + 252 >> 2] | (HEAP32[$5 + 412 >> 2] <= (HEAP32[$5 + 256 >> 2] - HEAP32[$5 + 308 >> 2] | 0) | HEAP32[$5 + 412 >> 2] > HEAP32[$5 + 248 >> 2]))) {
         graphicsDrawChar6x8($5 + 336 | 0, HEAP32[$5 + 416 >> 2], HEAP32[$5 + 412 >> 2], HEAP32[$5 + 196 >> 2] << 24 >> 24, HEAPU16[$5 + 318 >> 1], HEAPU16[$5 + 320 >> 1], HEAP8[$5 + 411 | 0] & 1);
        }
        HEAP32[$5 + 416 >> 2] = HEAP32[$5 + 416 >> 2] + Math_imul(HEAPU16[$5 + 318 >> 1], 6);
        break label$28;
       }
       if (!(!(HEAP32[$5 + 312 >> 2] & 32768) | HEAP32[$5 + 196 >> 2] >= 256)) {
        HEAP32[$5 + 100 >> 2] = (1 << HEAP32[$5 + 304 >> 2]) - 1;
        HEAP32[$5 + 96 >> 2] = 0;
        HEAP32[$5 + 92 >> 2] = 0;
        label$32: {
         if (jsvIsString(HEAP32[$5 + 324 >> 2]) & 1) {
          if (HEAP32[$5 + 196 >> 2] >= HEAPU8[$5 + 322 | 0]) {
           jsvStringIteratorNew($5 + 56 | 0, HEAP32[$5 + 324 >> 2], 0);
           while (1) {
            $0 = 0;
            if (jsvStringIteratorHasChar_12($5 + 56 | 0) & 1) {
             $0 = (jsvStringIteratorGetIndex_6($5 + 56 | 0) | 0) < (HEAP32[$5 + 196 >> 2] - HEAPU8[$5 + 322 | 0] | 0);
            }
            if ($0) {
             HEAP32[$5 + 92 >> 2] = (jsvStringIteratorGetCharAndNext($5 + 56 | 0) & 255) + HEAP32[$5 + 92 >> 2];
             continue;
            }
            break;
           }
           HEAP32[$5 + 96 >> 2] = jsvStringIteratorGetChar_6($5 + 56 | 0) & 255;
           jsvStringIteratorFree_16($5 + 56 | 0);
          }
          break label$32;
         }
         HEAP32[$5 + 96 >> 2] = jsvGetInteger(HEAP32[$5 + 324 >> 2]);
         HEAP32[$5 + 92 >> 2] = Math_imul(HEAP32[$5 + 96 >> 2], HEAP32[$5 + 196 >> 2] - HEAPU8[$5 + 322 | 0] | 0);
        }
        label$38: {
         if (HEAP32[$5 + 196 >> 2] < HEAPU8[$5 + 322 | 0] | HEAP32[$5 + 416 >> 2] <= (HEAP32[$5 + 260 >> 2] - Math_imul(HEAP32[$5 + 96 >> 2], HEAPU16[$5 + 318 >> 1]) | 0) | (HEAP32[$5 + 412 >> 2] <= (HEAP32[$5 + 256 >> 2] - HEAP32[$5 + 308 >> 2] | 0) | HEAP32[$5 + 416 >> 2] >= HEAP32[$5 + 252 >> 2])) {
          break label$38;
         }
         if (HEAP32[$5 + 412 >> 2] > HEAP32[$5 + 248 >> 2]) {
          break label$38;
         }
         HEAP32[$5 + 52 >> 2] = HEAP32[$5 + 308 >> 2] / HEAPU16[$5 + 320 >> 1];
         HEAP32[$5 + 92 >> 2] = Math_imul(HEAP32[$5 + 92 >> 2], Math_imul(HEAP32[$5 + 52 >> 2], HEAP32[$5 + 304 >> 2]));
         jsvStringIteratorNew($5 + 16 | 0, HEAP32[$5 + 328 >> 2], HEAP32[$5 + 92 >> 2] >> 3);
         HEAP32[$5 + 92 >> 2] = HEAP32[$5 + 92 >> 2] & 7;
         HEAP32[$5 + 4 >> 2] = jsvStringIteratorGetChar_6($5 + 16 | 0) << 24 >> 24;
         HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] << Math_imul(HEAP32[$5 + 304 >> 2], HEAP32[$5 + 92 >> 2]);
         HEAP32[$5 + 12 >> 2] = 0;
         while (1) {
          if (HEAP32[$5 + 12 >> 2] < HEAP32[$5 + 96 >> 2]) {
           HEAP32[$5 + 8 >> 2] = 0;
           while (1) {
            if (HEAP32[$5 + 8 >> 2] < HEAP32[$5 + 52 >> 2]) {
             HEAP32[$5 >> 2] = (HEAP32[$5 + 4 >> 2] & 255) >> 8 - HEAP32[$5 + 304 >> 2];
             if (HEAP32[$5 >> 2] ? 1 : HEAP8[$5 + 411 | 0] & 1) {
              graphicsFillRect($5 + 336 | 0, HEAP32[$5 + 416 >> 2] + Math_imul(HEAP32[$5 + 12 >> 2], HEAPU16[$5 + 318 >> 1]) | 0, HEAP32[$5 + 412 >> 2] + Math_imul(HEAP32[$5 + 8 >> 2], HEAPU16[$5 + 320 >> 1]) | 0, (HEAPU16[$5 + 318 >> 1] + (HEAP32[$5 + 416 >> 2] + Math_imul(HEAP32[$5 + 12 >> 2], HEAPU16[$5 + 318 >> 1]) | 0) | 0) - 1 | 0, (HEAPU16[$5 + 320 >> 1] + (HEAP32[$5 + 412 >> 2] + Math_imul(HEAP32[$5 + 8 >> 2], HEAPU16[$5 + 320 >> 1]) | 0) | 0) - 1 | 0, graphicsBlendGfxColor($5 + 336 | 0, (HEAP32[$5 >> 2] << 8) / HEAP32[$5 + 100 >> 2] | 0));
             }
             HEAP32[$5 + 92 >> 2] = HEAP32[$5 + 304 >> 2] + HEAP32[$5 + 92 >> 2];
             HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] << HEAP32[$5 + 304 >> 2];
             if (HEAP32[$5 + 92 >> 2] >= 8) {
              HEAP32[$5 + 92 >> 2] = 0;
              jsvStringIteratorNext($5 + 16 | 0);
              HEAP32[$5 + 4 >> 2] = jsvStringIteratorGetChar_6($5 + 16 | 0) << 24 >> 24;
             }
             HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 8 >> 2] + 1;
             continue;
            }
            break;
           }
           HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 12 >> 2] + 1;
           continue;
          }
          break;
         }
         jsvStringIteratorFree_16($5 + 16 | 0);
        }
        HEAP32[$5 + 416 >> 2] = HEAP32[$5 + 416 >> 2] + Math_imul(HEAP32[$5 + 96 >> 2], HEAPU16[$5 + 318 >> 1]);
       }
      }
     }
    }
    if (!(jspIsInterrupted() & 1)) {
     continue;
    }
   }
   break;
  }
  jsvStringIteratorFree_16($5 + 200 | 0);
  jsvUnLock(HEAP32[$5 + 288 >> 2]);
  $0 = HEAP32[$5 + 300 >> 2];
  HEAP8[$5 + 344 | 0] = $0;
  HEAP8[$5 + 345 | 0] = $0 >>> 8;
  HEAP8[$5 + 346 | 0] = $0 >>> 16;
  HEAP8[$5 + 347 | 0] = $0 >>> 24;
  graphicsSetVar($5 + 336 | 0);
  _jswrap_graphics_freeFontInfo($5 + 312 | 0);
  HEAP32[$5 + 428 >> 2] = jsvLockAgain(HEAP32[$5 + 424 >> 2]);
 }
 __stack_pointer = $5 + 432 | 0;
 return HEAP32[$5 + 428 >> 2];
}

function jswrap_graphics_drawImages($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 304 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 296 >> 2] = $0;
 HEAP32[$3 + 292 >> 2] = $1;
 HEAP32[$3 + 288 >> 2] = $2;
 HEAP32[$3 + 284 >> 2] = 4;
 label$1: {
  if (!(graphicsGetFromVar($3 + 208 | 0, HEAP32[$3 + 296 >> 2]) & 1)) {
   HEAP32[$3 + 300 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 204 >> 2] = $3;
  $2 = $3 - 768 | 0;
  __stack_pointer = $2;
  label$3: {
   label$4: {
    if (jsvIsArray(HEAP32[$3 + 292 >> 2]) & 1) {
     $0 = jsvGetArrayLength(HEAP32[$3 + 292 >> 2]);
     HEAP32[$3 + 196 >> 2] = $0;
     if (($0 | 0) <= 4) {
      break label$4;
     }
    }
    HEAP32[$3 + 48 >> 2] = 4;
    jsExceptionHere(3, 100386, $3 + 48 | 0);
    HEAP32[$3 + 300 >> 2] = 0;
    break label$3;
   }
   HEAP32[$3 + 188 >> 2] = 1e4;
   HEAP32[$3 + 184 >> 2] = 1e4;
   HEAP32[$3 + 180 >> 2] = 1e4;
   HEAP32[$3 + 176 >> 2] = 1e4;
   HEAP8[$3 + 175 | 0] = 1;
   HEAP32[$3 + 200 >> 2] = 0;
   while (1) {
    if (HEAP32[$3 + 200 >> 2] < HEAP32[$3 + 196 >> 2]) {
     HEAP32[$3 + 168 >> 2] = jsvGetArrayItem(HEAP32[$3 + 292 >> 2], HEAP32[$3 + 200 >> 2]);
     label$8: {
      if (jsvIsObject(HEAP32[$3 + 168 >> 2]) & 1) {
       HEAP32[$3 + 164 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 168 >> 2], 105339);
       label$10: {
        if (_jswrap_graphics_parseImage($3 + 208 | 0, HEAP32[$3 + 164 >> 2], 0, (Math_imul(HEAP32[$3 + 200 >> 2], 192) + $2 | 0) + 36 | 0) & 1) {
         $4 = jsvObjectGetFloatChild(HEAP32[$3 + 168 >> 2], 96763) * 256;
         label$12: {
          if (Math_abs($4) < 2147483648) {
           $0 = ~~$4;
           break label$12;
          }
          $0 = -2147483648;
         }
         HEAP32[Math_imul(HEAP32[$3 + 200 >> 2], 192) + $2 >> 2] = $0;
         $4 = jsvObjectGetFloatChild(HEAP32[$3 + 168 >> 2], 96676) * 256;
         label$14: {
          if (Math_abs($4) < 2147483648) {
           $0 = ~~$4;
           break label$14;
          }
          $0 = -2147483648;
         }
         HEAP32[(Math_imul(HEAP32[$3 + 200 >> 2], 192) + $2 | 0) + 4 >> 2] = $0;
         $4 = jsvObjectGetFloatChild(HEAP32[$3 + 168 >> 2], 105234);
         HEAPF64[(Math_imul(HEAP32[$3 + 200 >> 2], 192) + $2 | 0) + 24 >> 3] = $4;
         $0 = __DOUBLE_BITS_11(HEAPF64[(Math_imul(HEAP32[$3 + 200 >> 2], 192) + $2 | 0) + 24 >> 3]);
         $1 = $0;
         $0 = i64toi32_i32$HIGH_BITS;
         $0 = $0 & 2147483647;
         if (HEAPF64[(Math_imul(HEAP32[$3 + 200 >> 2], 192) + $2 | 0) + 24 >> 3] <= 0 ? 1 : ($0 | 0) == 2146435072 | $0 >>> 0 > 2146435072) {
          HEAPF64[(Math_imul(HEAP32[$3 + 200 >> 2], 192) + $2 | 0) + 24 >> 3] = 1;
         }
         $4 = jsvObjectGetFloatChild(HEAP32[$3 + 168 >> 2], 104634);
         HEAPF64[(Math_imul(HEAP32[$3 + 200 >> 2], 192) + $2 | 0) + 16 >> 3] = $4;
         $0 = __DOUBLE_BITS_11(HEAPF64[(Math_imul(HEAP32[$3 + 200 >> 2], 192) + $2 | 0) + 16 >> 3]);
         $1 = $0;
         $0 = i64toi32_i32$HIGH_BITS;
         $0 = $0 & 2147483647;
         if (($0 | 0) == 2146435072 | $0 >>> 0 > 2146435072) {
          HEAPF64[(Math_imul(HEAP32[$3 + 200 >> 2], 192) + $2 | 0) + 16 >> 3] = 0;
         }
         $0 = jsvObjectGetBoolChild(HEAP32[$3 + 168 >> 2], 101126);
         HEAP8[(Math_imul(HEAP32[$3 + 200 >> 2], 192) + $2 | 0) + 32 | 0] = $0 & 1;
         $0 = jsvObjectGetBoolChild(HEAP32[$3 + 168 >> 2], 98107);
         HEAP8[(Math_imul(HEAP32[$3 + 200 >> 2], 192) + $2 | 0) + 33 | 0] = $0 & 1;
         _jswrap_drawImageLayerInit(Math_imul(HEAP32[$3 + 200 >> 2], 192) + $2 | 0);
         if (!(jsvObjectGetBoolChild(HEAP32[$3 + 168 >> 2], 100582) & 1)) {
          if (HEAP32[$3 + 188 >> 2] > HEAP32[Math_imul(HEAP32[$3 + 200 >> 2], 192) + $2 >> 2] >> 8) {
           HEAP32[$3 + 188 >> 2] = HEAP32[Math_imul(HEAP32[$3 + 200 >> 2], 192) + $2 >> 2] >> 8;
          }
          if (HEAP32[$3 + 184 >> 2] > HEAP32[(Math_imul(HEAP32[$3 + 200 >> 2], 192) + $2 | 0) + 4 >> 2] >> 8) {
           HEAP32[$3 + 184 >> 2] = HEAP32[(Math_imul(HEAP32[$3 + 200 >> 2], 192) + $2 | 0) + 4 >> 2] >> 8;
          }
          if ((HEAP32[$3 + 188 >> 2] + HEAP32[$3 + 180 >> 2] | 0) < HEAP32[(Math_imul(HEAP32[$3 + 200 >> 2], 192) + $2 | 0) + 8 >> 2] + 255 >> 8) {
           HEAP32[$3 + 180 >> 2] = (HEAP32[(Math_imul(HEAP32[$3 + 200 >> 2], 192) + $2 | 0) + 8 >> 2] + 255 >> 8) - HEAP32[$3 + 188 >> 2];
          }
          if ((HEAP32[$3 + 184 >> 2] + HEAP32[$3 + 176 >> 2] | 0) < HEAP32[(Math_imul(HEAP32[$3 + 200 >> 2], 192) + $2 | 0) + 12 >> 2] + 255 >> 8) {
           HEAP32[$3 + 176 >> 2] = (HEAP32[(Math_imul(HEAP32[$3 + 200 >> 2], 192) + $2 | 0) + 12 >> 2] + 255 >> 8) - HEAP32[$3 + 184 >> 2];
          }
         }
         HEAP32[$3 + 160 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 168 >> 2], 104567);
         if (HEAP32[$3 + 160 >> 2]) {
          jsvUnLock(_jswrap_graphics_parseImage_palette((Math_imul(HEAP32[$3 + 200 >> 2], 192) + $2 | 0) + 36 | 0, HEAP32[$3 + 160 >> 2]));
          if (!HEAP32[(Math_imul(HEAP32[$3 + 200 >> 2], 192) + $2 | 0) + 64 >> 2]) {
           HEAP8[$3 + 175 | 0] = 0;
          }
         }
         HEAP32[$3 + 156 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 168 >> 2], 104706);
         HEAP32[(Math_imul(HEAP32[$3 + 200 >> 2], 192) + $2 | 0) + 188 >> 2] = 0;
         label$27: {
          label$28: {
           if (HEAP32[$3 + 156 >> 2]) {
            if (jsvGetStringLength(HEAP32[$3 + 156 >> 2])) {
             break label$28;
            }
           }
           HEAP32[(Math_imul(HEAP32[$3 + 200 >> 2], 192) + $2 | 0) + 188 >> 2] = 0;
           break label$27;
          }
          label$30: {
           if (jsvIsStringEqual(HEAP32[$3 + 156 >> 2], 106737) & 1) {
            HEAP32[(Math_imul(HEAP32[$3 + 200 >> 2], 192) + $2 | 0) + 188 >> 2] = 1;
            break label$30;
           }
           label$32: {
            if (jsvIsStringEqual(HEAP32[$3 + 156 >> 2], 101103) & 1) {
             HEAP32[(Math_imul(HEAP32[$3 + 200 >> 2], 192) + $2 | 0) + 188 >> 2] = 2;
             break label$32;
            }
            label$34: {
             if (jsvIsStringEqual(HEAP32[$3 + 156 >> 2], 100890) & 1) {
              HEAP32[(Math_imul(HEAP32[$3 + 200 >> 2], 192) + $2 | 0) + 188 >> 2] = 3;
              break label$34;
             }
             HEAP32[$3 >> 2] = HEAP32[$3 + 156 >> 2];
             jsExceptionHere(1, 101668, $3);
             HEAP8[$3 + 175 | 0] = 0;
            }
           }
          }
         }
         jsvUnLock(HEAP32[$3 + 156 >> 2]);
         break label$10;
        }
        HEAP8[$3 + 175 | 0] = 0;
       }
       jsvUnLock(HEAP32[$3 + 164 >> 2]);
       break label$8;
      }
      HEAP8[$3 + 175 | 0] = 0;
     }
     jsvUnLock(HEAP32[$3 + 168 >> 2]);
     HEAP32[$3 + 200 >> 2] = HEAP32[$3 + 200 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$3 + 96 >> 2] = 96763;
   HEAP16[$3 + 100 >> 1] = 10;
   HEAP32[$3 + 104 >> 2] = $3 + 188;
   HEAP32[$3 + 108 >> 2] = 96676;
   HEAP16[$3 + 112 >> 1] = 10;
   HEAP32[$3 + 116 >> 2] = $3 + 184;
   HEAP32[$3 + 120 >> 2] = 103393;
   HEAP16[$3 + 124 >> 1] = 10;
   HEAP32[$3 + 128 >> 2] = $3 + 180;
   HEAP32[$3 + 132 >> 2] = 97915;
   HEAP16[$3 + 136 >> 1] = 10;
   HEAP32[$3 + 140 >> 2] = $3 + 176;
   if (!(jsvReadConfigObject(HEAP32[$3 + 288 >> 2], $3 + 96 | 0, 4) & 1)) {
    HEAP8[$3 + 175 | 0] = 0;
   }
   HEAP32[$3 + 92 >> 2] = (HEAP32[$3 + 188 >> 2] + HEAP32[$3 + 180 >> 2] | 0) - 1;
   HEAP32[$3 + 88 >> 2] = (HEAP32[$3 + 184 >> 2] + HEAP32[$3 + 176 >> 2] | 0) - 1;
   graphicsSetModifiedAndClip($3 + 208 | 0, $3 + 188 | 0, $3 + 184 | 0, $3 + 92 | 0, $3 + 88 | 0, 0);
   HEAP32[$3 + 84 >> 2] = graphicsGetSetPixelFn($3 + 208 | 0);
   if (HEAP8[$3 + 175 | 0] & 1) {
    HEAP32[$3 + 80 >> 2] = (1 << HEAPU8[$3 + 224 | 0]) - 1;
    HEAP32[$3 + 200 >> 2] = 0;
    while (1) {
     if (HEAP32[$3 + 200 >> 2] < HEAP32[$3 + 196 >> 2]) {
      jsvStringIteratorNew((Math_imul(HEAP32[$3 + 200 >> 2], 192) + $2 | 0) + 120 | 0, HEAP32[(Math_imul(HEAP32[$3 + 200 >> 2], 192) + $2 | 0) + 56 >> 2], HEAP32[(Math_imul(HEAP32[$3 + 200 >> 2], 192) + $2 | 0) + 60 >> 2]);
      _jswrap_drawImageLayerSetStart(Math_imul(HEAP32[$3 + 200 >> 2], 192) + $2 | 0, HEAP32[$3 + 188 >> 2], HEAP32[$3 + 184 >> 2]);
      HEAP32[$3 + 200 >> 2] = HEAP32[$3 + 200 >> 2] + 1;
      continue;
     }
     break;
    }
    HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 184 >> 2];
    while (1) {
     if (HEAP32[$3 + 76 >> 2] <= HEAP32[$3 + 88 >> 2]) {
      HEAP32[$3 + 200 >> 2] = 0;
      while (1) {
       if (HEAP32[$3 + 200 >> 2] < HEAP32[$3 + 196 >> 2]) {
        _jswrap_drawImageLayerStartX(Math_imul(HEAP32[$3 + 200 >> 2], 192) + $2 | 0);
        HEAP32[$3 + 200 >> 2] = HEAP32[$3 + 200 >> 2] + 1;
        continue;
       }
       break;
      }
      HEAP32[$3 + 72 >> 2] = HEAP32[$3 + 188 >> 2];
      while (1) {
       if (HEAP32[$3 + 72 >> 2] <= HEAP32[$3 + 92 >> 2]) {
        HEAP8[$3 + 71 | 0] = 0;
        HEAP32[$3 + 64 >> 2] = 0;
        HEAP32[$3 + 200 >> 2] = 0;
        while (1) {
         if (HEAP32[$3 + 200 >> 2] < HEAP32[$3 + 196 >> 2]) {
          if (_jswrap_drawImageLayerGetPixel(Math_imul(HEAP32[$3 + 200 >> 2], 192) + $2 | 0, $3 + 60 | 0) & 1) {
           HEAP8[$3 + 71 | 0] = 1;
           if (!(HEAP32[$3 + 200 >> 2] | !HEAP32[$2 + 188 >> 2])) {
            HEAP32[$3 + 64 >> 2] = graphicsGetPixel($3 + 208 | 0, HEAP32[$3 + 72 >> 2], HEAP32[$3 + 76 >> 2]);
           }
           label$50: {
            label$51: {
             switch (HEAP32[(Math_imul(HEAP32[$3 + 200 >> 2], 192) + $2 | 0) + 188 >> 2]) {
             case 0:
              HEAP32[$3 + 64 >> 2] = HEAP32[$3 + 60 >> 2];
              break label$50;

             case 1:
              HEAP32[$3 + 64 >> 2] = HEAP32[$3 + 60 >> 2] + HEAP32[$3 + 64 >> 2];
              if (HEAPU32[$3 + 64 >> 2] > HEAPU32[$3 + 80 >> 2]) {
               HEAP32[$3 + 64 >> 2] = HEAP32[$3 + 80 >> 2];
              }
              break label$50;

             case 2:
              HEAP32[$3 + 64 >> 2] = HEAP32[$3 + 60 >> 2] | HEAP32[$3 + 64 >> 2];
              break label$50;

             case 3:
              break label$51;

             default:
              break label$50;
             }
            }
            HEAP32[$3 + 64 >> 2] = HEAP32[$3 + 60 >> 2] ^ HEAP32[$3 + 64 >> 2];
           }
          }
          _jswrap_drawImageLayerNextX(Math_imul(HEAP32[$3 + 200 >> 2], 192) + $2 | 0);
          _jswrap_drawImageLayerNextXRepeat(Math_imul(HEAP32[$3 + 200 >> 2], 192) + $2 | 0);
          HEAP32[$3 + 200 >> 2] = HEAP32[$3 + 200 >> 2] + 1;
          continue;
         }
         break;
        }
        if (HEAP8[$3 + 71 | 0] & 1) {
         FUNCTION_TABLE[HEAP32[$3 + 84 >> 2]]($3 + 208 | 0, HEAP32[$3 + 72 >> 2], HEAP32[$3 + 76 >> 2], HEAP32[$3 + 64 >> 2]);
        }
        HEAP32[$3 + 72 >> 2] = HEAP32[$3 + 72 >> 2] + 1;
        continue;
       }
       break;
      }
      HEAP32[$3 + 200 >> 2] = 0;
      while (1) {
       if (HEAP32[$3 + 200 >> 2] < HEAP32[$3 + 196 >> 2]) {
        _jswrap_drawImageLayerNextY(Math_imul(HEAP32[$3 + 200 >> 2], 192) + $2 | 0);
        HEAP32[$3 + 200 >> 2] = HEAP32[$3 + 200 >> 2] + 1;
        continue;
       }
       break;
      }
      HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] + 1;
      continue;
     }
     break;
    }
    HEAP32[$3 + 200 >> 2] = 0;
    while (1) {
     if (HEAP32[$3 + 200 >> 2] < HEAP32[$3 + 196 >> 2]) {
      jsvStringIteratorFree_16((Math_imul(HEAP32[$3 + 200 >> 2], 192) + $2 | 0) + 120 | 0);
      HEAP32[$3 + 200 >> 2] = HEAP32[$3 + 200 >> 2] + 1;
      continue;
     }
     break;
    }
   }
   HEAP32[$3 + 200 >> 2] = 0;
   while (1) {
    if (HEAP32[$3 + 200 >> 2] < HEAP32[$3 + 196 >> 2]) {
     jsvUnLock(HEAP32[(Math_imul(HEAP32[$3 + 200 >> 2], 192) + $2 | 0) + 56 >> 2]);
     HEAP32[$3 + 200 >> 2] = HEAP32[$3 + 200 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$3 + 300 >> 2] = jsvLockAgain(HEAP32[$3 + 296 >> 2]);
  }
  HEAP32[$3 + 192 >> 2] = 1;
 }
 __stack_pointer = $3 + 304 | 0;
 return HEAP32[$3 + 300 >> 2];
}

function _jswrap_graphics_parseImage($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 176 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 168 >> 2] = $0;
 HEAP32[$4 + 164 >> 2] = $1;
 HEAP32[$4 + 160 >> 2] = $2;
 HEAP32[$4 + 156 >> 2] = $3;
 memset(HEAP32[$4 + 156 >> 2], 0, 84);
 label$1: {
  label$2: {
   if (jsvIsObject(HEAP32[$4 + 164 >> 2]) & 1) {
    label$4: {
     if (jsvIsInstanceOf(HEAP32[$4 + 164 >> 2], 100617) & 1) {
      if (!(graphicsGetFromVar($4 + 80 | 0, HEAP32[$4 + 164 >> 2]) & 1)) {
       HEAP8[$4 + 175 | 0] = 0;
       break label$1;
      }
      if (HEAPU8[$4 + 84 | 0] | HEAPU8[$4 + 85 | 0] << 8 | (HEAPU8[$4 + 86 | 0] << 16 | HEAPU8[$4 + 87 | 0] << 24)) {
       HEAP8[$4 + 175 | 0] = 0;
       break label$1;
      }
      HEAP32[HEAP32[$4 + 156 >> 2] >> 2] = HEAPU8[$4 + 92 | 0] | HEAPU8[$4 + 93 | 0] << 8;
      HEAP32[HEAP32[$4 + 156 >> 2] + 4 >> 2] = HEAPU8[$4 + 94 | 0] | HEAPU8[$4 + 95 | 0] << 8;
      HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] = HEAPU8[$4 + 96 | 0];
      break label$4;
     }
     $0 = jsvObjectGetIntegerChild(HEAP32[$4 + 164 >> 2], 103393);
     HEAP32[HEAP32[$4 + 156 >> 2] >> 2] = $0;
     $0 = jsvObjectGetIntegerChild(HEAP32[$4 + 164 >> 2], 97915);
     HEAP32[HEAP32[$4 + 156 >> 2] + 4 >> 2] = $0;
     $0 = jsvObjectGetIntegerChild(HEAP32[$4 + 164 >> 2], 101843);
     HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] = $0;
     if (HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] <= 0) {
      HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] = 1;
     }
    }
    HEAP32[$4 + 76 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 164 >> 2], 101361);
    $0 = jsvGetArrayBufferBackingString(HEAP32[$4 + 76 >> 2], HEAP32[$4 + 156 >> 2] + 24 | 0);
    HEAP32[HEAP32[$4 + 156 >> 2] + 20 >> 2] = $0;
    jsvUnLock(HEAP32[$4 + 76 >> 2]);
    $0 = HEAP32[$4 + 156 >> 2];
    HEAP32[$0 + 24 >> 2] = HEAP32[$4 + 160 >> 2] + HEAP32[$0 + 24 >> 2];
    HEAP32[$4 + 72 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 164 >> 2], 97704);
    HEAP8[HEAP32[$4 + 156 >> 2] + 12 | 0] = HEAP32[$4 + 72 >> 2] != 0;
    $0 = jsvGetIntegerAndUnLock(HEAP32[$4 + 72 >> 2]);
    HEAP32[HEAP32[$4 + 156 >> 2] + 16 >> 2] = $0;
    HEAP32[$4 + 72 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 164 >> 2], 104567);
    if (HEAP32[$4 + 72 >> 2]) {
     jsvUnLock(_jswrap_graphics_parseImage_palette(HEAP32[$4 + 156 >> 2], HEAP32[$4 + 72 >> 2]));
     if (!HEAP32[HEAP32[$4 + 156 >> 2] + 28 >> 2]) {
      HEAP8[$4 + 175 | 0] = 0;
      break label$1;
     }
    }
    break label$2;
   }
   label$11: {
    label$12: {
     if (!(jsvIsString(HEAP32[$4 + 164 >> 2]) & 1)) {
      if (!(jsvIsArrayBuffer(HEAP32[$4 + 164 >> 2]) & 1)) {
       break label$12;
      }
     }
     label$14: {
      if (jsvIsArrayBuffer(HEAP32[$4 + 164 >> 2]) & 1) {
       $0 = jsvGetArrayBufferBackingString(HEAP32[$4 + 164 >> 2], HEAP32[$4 + 156 >> 2] + 24 | 0);
       HEAP32[HEAP32[$4 + 156 >> 2] + 20 >> 2] = $0;
       break label$14;
      }
      $0 = jsvLockAgain(HEAP32[$4 + 164 >> 2]);
      HEAP32[HEAP32[$4 + 156 >> 2] + 20 >> 2] = $0;
     }
     jsvStringIteratorNewUTF8($4 + 32 | 0, HEAP32[HEAP32[$4 + 156 >> 2] + 20 >> 2], HEAP32[$4 + 160 >> 2]);
     $0 = jsvStringIteratorGetUTF8CharAndNext($4 + 32 | 0);
     HEAP32[HEAP32[$4 + 156 >> 2] >> 2] = $0;
     $0 = jsvStringIteratorGetUTF8CharAndNext($4 + 32 | 0);
     HEAP32[HEAP32[$4 + 156 >> 2] + 4 >> 2] = $0;
     $0 = jsvStringIteratorGetUTF8CharAndNext($4 + 32 | 0);
     HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] = $0;
     $0 = HEAP32[$4 + 156 >> 2];
     HEAP32[$0 + 24 >> 2] = HEAP32[$4 + 160 >> 2] + HEAP32[$0 + 24 >> 2];
     label$16: {
      if (HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] & 128) {
       HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] = HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] & 127;
       HEAP8[HEAP32[$4 + 156 >> 2] + 12 | 0] = 1;
       $0 = jsvStringIteratorGetUTF8CharAndNext($4 + 32 | 0);
       HEAP32[HEAP32[$4 + 156 >> 2] + 16 >> 2] = $0;
       HEAP16[HEAP32[$4 + 156 >> 2] + 48 >> 1] = 4;
       break label$16;
      }
      HEAP16[HEAP32[$4 + 156 >> 2] + 48 >> 1] = 3;
     }
     $0 = HEAP32[$4 + 156 >> 2];
     HEAP32[$0 + 24 >> 2] = HEAPU16[HEAP32[$4 + 156 >> 2] + 48 >> 1] + HEAP32[$0 + 24 >> 2];
     if (HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] & 64) {
      HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] = HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] & 63;
      if (HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] > 8) {
       jsExceptionHere(1, 100446, 0);
       _jswrap_graphics_freeImageInfo(HEAP32[$4 + 156 >> 2]);
       jsvStringIteratorFree_16($4 + 32 | 0);
       HEAP8[$4 + 175 | 0] = 0;
       break label$1;
      }
      HEAP32[$4 + 28 >> 2] = 1 << HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2];
      HEAP32[HEAP32[$4 + 156 >> 2] + 32 >> 2] = HEAP32[$4 + 28 >> 2] - 1;
      label$20: {
       if (HEAP32[$4 + 28 >> 2] << 1 >>> 0 <= 32) {
        HEAP32[$4 + 24 >> 2] = HEAP32[HEAP32[$4 + 156 >> 2] + 24 >> 2];
        HEAP32[$4 + 20 >> 2] = 0;
        while (1) {
         if (HEAPU32[$4 + 20 >> 2] < HEAPU32[$4 + 28 >> 2]) {
          $0 = jsvStringIteratorGetUTF8CharAndNext($4 + 32 | 0) & 255;
          $1 = (jsvStringIteratorGetUTF8CharAndNext($4 + 32 | 0) & 255) << 8;
          HEAP16[(HEAP32[$4 + 156 >> 2] + 52 | 0) + (HEAP32[$4 + 20 >> 2] << 1) >> 1] = $0 | $1;
          HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 24 >> 2] + 2;
          HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 20 >> 2] + 1;
          continue;
         }
         break;
        }
        HEAP32[HEAP32[$4 + 156 >> 2] + 28 >> 2] = HEAP32[$4 + 156 >> 2] + 52;
        break label$20;
       }
       if (HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] <= 8) {
        HEAP32[$4 + 16 >> 2] = HEAP32[HEAP32[$4 + 156 >> 2] + 24 >> 2] + (HEAP32[$4 + 28 >> 2] << 1);
        HEAP32[$4 + 12 >> 2] = 0;
        HEAP32[$4 + 8 >> 2] = jsvGetDataPointer(HEAP32[HEAP32[$4 + 156 >> 2] + 20 >> 2], $4 + 12 | 0);
        if (!(!HEAP32[$4 + 8 >> 2] | HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] > 8 | HEAPU32[$4 + 16 >> 2] >= HEAPU32[$4 + 12 >> 2])) {
         HEAP32[HEAP32[$4 + 156 >> 2] + 32 >> 2] = HEAP32[$4 + 28 >> 2] - 1;
         HEAP32[HEAP32[$4 + 156 >> 2] + 28 >> 2] = HEAP32[$4 + 8 >> 2] + (HEAP32[HEAP32[$4 + 156 >> 2] + 24 >> 2] + HEAPU16[HEAP32[$4 + 156 >> 2] + 48 >> 1] | 0);
        }
       }
      }
      if (!HEAP32[HEAP32[$4 + 156 >> 2] + 28 >> 2]) {
       jsExceptionHere(1, 110255, 0);
       _jswrap_graphics_freeImageInfo(HEAP32[$4 + 156 >> 2]);
       jsvStringIteratorFree_16($4 + 32 | 0);
       HEAP8[$4 + 175 | 0] = 0;
       break label$1;
      }
      $0 = HEAP32[$4 + 156 >> 2];
      HEAP16[$0 + 48 >> 1] = HEAPU16[$0 + 48 >> 1] + (HEAP32[$4 + 28 >> 2] << 1 & 65535);
      $0 = HEAP32[$4 + 156 >> 2];
      HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 24 >> 2] + (HEAP32[$4 + 28 >> 2] << 1 & 65535);
     }
     jsvStringIteratorFree_16($4 + 32 | 0);
     break label$11;
    }
    jsExceptionHere(1, 103738, 0);
    HEAP8[$4 + 175 | 0] = 0;
    break label$1;
   }
  }
  if (!(HEAP8[HEAP32[$4 + 156 >> 2] + 12 | 0] & 1)) {
   HEAP32[HEAP32[$4 + 156 >> 2] + 16 >> 2] = -1;
  }
  if (!HEAP32[HEAP32[$4 + 156 >> 2] + 28 >> 2]) {
   label$29: {
    if (HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] == 1) {
     $0 = HEAP32[$4 + 168 >> 2];
     HEAP16[HEAP32[$4 + 156 >> 2] + 52 >> 1] = HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24);
     $0 = HEAP32[$4 + 168 >> 2];
     HEAP16[HEAP32[$4 + 156 >> 2] + 54 >> 1] = HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24);
     HEAP32[HEAP32[$4 + 156 >> 2] + 28 >> 2] = HEAP32[$4 + 156 >> 2] + 52;
     HEAP32[HEAP32[$4 + 156 >> 2] + 32 >> 2] = 1;
     break label$29;
    }
    label$31: {
     if (HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] == 2) {
      $0 = HEAP32[$4 + 168 >> 2];
      HEAP16[HEAP32[$4 + 156 >> 2] + 52 >> 1] = HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24);
      $0 = graphicsBlendGfxColor(HEAP32[$4 + 168 >> 2], 85);
      HEAP16[HEAP32[$4 + 156 >> 2] + 54 >> 1] = $0;
      $0 = graphicsBlendGfxColor(HEAP32[$4 + 168 >> 2], 171);
      HEAP16[HEAP32[$4 + 156 >> 2] + 56 >> 1] = $0;
      $0 = HEAP32[$4 + 168 >> 2];
      HEAP16[HEAP32[$4 + 156 >> 2] + 58 >> 1] = HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24);
      HEAP32[HEAP32[$4 + 156 >> 2] + 28 >> 2] = HEAP32[$4 + 156 >> 2] + 52;
      HEAP32[HEAP32[$4 + 156 >> 2] + 32 >> 2] = 3;
      break label$31;
     }
     label$33: {
      if (!(HEAPU8[HEAP32[$4 + 168 >> 2] + 16 | 0] != 16 | HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] != 3)) {
       HEAP32[HEAP32[$4 + 156 >> 2] + 28 >> 2] = 146736;
       HEAP32[HEAP32[$4 + 156 >> 2] + 32 >> 2] = 7;
       break label$33;
      }
      label$35: {
       if (!(HEAPU8[HEAP32[$4 + 168 >> 2] + 16 | 0] != 16 | HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] != 4)) {
        HEAP32[HEAP32[$4 + 156 >> 2] + 28 >> 2] = 146768;
        HEAP32[HEAP32[$4 + 156 >> 2] + 32 >> 2] = 15;
        break label$35;
       }
       label$37: {
        if (!(HEAPU8[HEAP32[$4 + 168 >> 2] + 16 | 0] != 16 | HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] != 8)) {
         HEAP32[HEAP32[$4 + 156 >> 2] + 28 >> 2] = 146800;
         HEAP32[HEAP32[$4 + 156 >> 2] + 32 >> 2] = 255;
         break label$37;
        }
        label$39: {
         if (!(HEAPU8[HEAP32[$4 + 168 >> 2] + 16 | 0] != 8 | HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] != 4)) {
          HEAP32[HEAP32[$4 + 156 >> 2] + 28 >> 2] = 147312;
          HEAP32[HEAP32[$4 + 156 >> 2] + 32 >> 2] = 15;
          break label$39;
         }
         label$41: {
          if (!(HEAPU8[HEAP32[$4 + 168 >> 2] + 16 | 0] != 8 | HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] != 3)) {
           HEAP32[HEAP32[$4 + 156 >> 2] + 28 >> 2] = 147344;
           HEAP32[HEAP32[$4 + 156 >> 2] + 32 >> 2] = 7;
           break label$41;
          }
          if (!(HEAPU8[HEAP32[$4 + 168 >> 2] + 16 | 0] != 4 | HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] != 3)) {
           HEAP32[HEAP32[$4 + 156 >> 2] + 28 >> 2] = 147360;
           HEAP32[HEAP32[$4 + 156 >> 2] + 32 >> 2] = 7;
          }
         }
        }
       }
      }
     }
    }
   }
  }
  label$44: {
   if (!(!(jsvIsString(HEAP32[HEAP32[$4 + 156 >> 2] + 20 >> 2]) & 1) | HEAP32[HEAP32[$4 + 156 >> 2] >> 2] <= 0 | HEAP32[HEAP32[$4 + 156 >> 2] + 4 >> 2] <= 0)) {
    if (HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] <= 32) {
     break label$44;
    }
   }
   jsExceptionHere(1, 105345, 0);
   _jswrap_graphics_freeImageInfo(HEAP32[$4 + 156 >> 2]);
   HEAP8[$4 + 175 | 0] = 0;
   break label$1;
  }
  HEAP32[HEAP32[$4 + 156 >> 2] + 36 >> 2] = (1 << HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2]) - 1;
  $1 = HEAP32[$4 + 156 >> 2];
  if (HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] < 8) {
   $0 = (8 / HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] | 0) - 1 | 0;
  } else {
   $0 = 0;
  }
  HEAP32[$1 + 40 >> 2] = $0;
  HEAP32[HEAP32[$4 + 156 >> 2] + 44 >> 2] = Math_imul(HEAP32[HEAP32[$4 + 156 >> 2] >> 2], HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2]) + 7 >> 3;
  HEAP16[HEAP32[$4 + 156 >> 2] + 50 >> 1] = Math_imul(HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2], Math_imul(HEAP32[HEAP32[$4 + 156 >> 2] >> 2], HEAP32[HEAP32[$4 + 156 >> 2] + 4 >> 2])) + 7 >> 3;
  HEAP8[$4 + 175 | 0] = 1;
 }
 __stack_pointer = $4 + 176 | 0;
 return HEAP8[$4 + 175 | 0] & 1;
}

function gemmlowp__FixedPoint_int_2c_200__20gemmlowp__exp_on_negative_values_int_2c_205__28gemmlowp__FixedPoint_int_2c_205__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 496 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 480 >> 2] = $0;
 HEAP32[$1 + 472 >> 2] = gemmlowp__FixedPoint_int_2c_205__20gemmlowp__FixedPoint_int_2c_205___ConstantPOT__2__28_29();
 HEAP32[$1 + 456 >> 2] = HEAP32[$1 + 472 >> 2];
 HEAP32[$1 + 448 >> 2] = gemmlowp__FixedPoint_int_2c_205___FromScalarRaw_28int_29(1);
 HEAP32[$1 + 464 >> 2] = gemmlowp__FixedPoint_int_2c_205__20gemmlowp__operator__int_2c_205__28gemmlowp__FixedPoint_int_2c_205__2c_20gemmlowp__FixedPoint_int_2c_205__29(HEAP32[$1 + 456 >> 2], HEAP32[$1 + 448 >> 2]);
 HEAP32[$1 + 424 >> 2] = HEAP32[$1 + 480 >> 2];
 HEAP32[$1 + 416 >> 2] = HEAP32[$1 + 464 >> 2];
 HEAP32[$1 + 432 >> 2] = gemmlowp__FixedPoint_int_2c_205__20gemmlowp__operator__int_2c_205__28gemmlowp__FixedPoint_int_2c_205__2c_20gemmlowp__FixedPoint_int_2c_205__29_1(HEAP32[$1 + 424 >> 2], HEAP32[$1 + 416 >> 2]);
 HEAP32[$1 + 408 >> 2] = HEAP32[$1 + 472 >> 2];
 HEAP32[$1 + 440 >> 2] = gemmlowp__FixedPoint_int_2c_205__20gemmlowp__operator__int_2c_205__28gemmlowp__FixedPoint_int_2c_205__2c_20gemmlowp__FixedPoint_int_2c_205__29(HEAP32[$1 + 432 >> 2], HEAP32[$1 + 408 >> 2]);
 HEAP32[$1 + 392 >> 2] = HEAP32[$1 + 440 >> 2];
 HEAP32[$1 + 400 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__Rescale_0_2c_20int_2c_205__28gemmlowp__FixedPoint_int_2c_205__29(HEAP32[$1 + 392 >> 2]);
 HEAP32[$1 + 488 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__exp_on_interval_between_negative_one_quarter_and_0_excl_int__28gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 400 >> 2]);
 HEAP32[$1 + 376 >> 2] = HEAP32[$1 + 440 >> 2];
 HEAP32[$1 + 368 >> 2] = HEAP32[$1 + 480 >> 2];
 HEAP32[$1 + 384 >> 2] = gemmlowp__FixedPoint_int_2c_205__20gemmlowp__operator__int_2c_205__28gemmlowp__FixedPoint_int_2c_205__2c_20gemmlowp__FixedPoint_int_2c_205__29(HEAP32[$1 + 376 >> 2], HEAP32[$1 + 368 >> 2]);
 HEAP32[$1 + 388 >> 2] = HEAP32[gemmlowp__FixedPoint_int_2c_205___raw_28_29($1 + 384 | 0) >> 2];
 HEAP32[$1 + 360 >> 2] = gemmlowp__FixedPoint_int_2c_200___FromScalarRaw_28int_29(gemmlowp__FixedPoint_int_2c_200___ScalarRawType_20gemmlowp__RescaleConstantInitializer_gemmlowp__FixedPoint_int_2c_200___28int_29(1672461947));
 $0 = int_20gemmlowp__MaskIfNonZero_int__28int_29(int_20gemmlowp__BitAnd_int__28int_2c_20int_29(HEAP32[$1 + 388 >> 2], int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(16777216)));
 HEAP32[$1 + 336 >> 2] = HEAP32[$1 + 488 >> 2];
 HEAP32[$1 + 328 >> 2] = HEAP32[$1 + 360 >> 2];
 HEAP32[$1 + 344 >> 2] = gemmlowp__FixedPoint_int_2c_200_20__200__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 336 >> 2], HEAP32[$1 + 328 >> 2]);
 HEAP32[$1 + 320 >> 2] = HEAP32[$1 + 488 >> 2];
 HEAP32[$1 + 352 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__SelectUsingMask_int_2c_200__28int_2c_20gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29($0, HEAP32[$1 + 344 >> 2], HEAP32[$1 + 320 >> 2]);
 HEAP32[$1 + 488 >> 2] = HEAP32[$1 + 352 >> 2];
 HEAP32[$1 + 312 >> 2] = gemmlowp__FixedPoint_int_2c_200___FromScalarRaw_28int_29(gemmlowp__FixedPoint_int_2c_200___ScalarRawType_20gemmlowp__RescaleConstantInitializer_gemmlowp__FixedPoint_int_2c_200___28int_29(1302514674));
 $0 = int_20gemmlowp__MaskIfNonZero_int__28int_29(int_20gemmlowp__BitAnd_int__28int_2c_20int_29(HEAP32[$1 + 388 >> 2], int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(33554432)));
 HEAP32[$1 + 288 >> 2] = HEAP32[$1 + 488 >> 2];
 HEAP32[$1 + 280 >> 2] = HEAP32[$1 + 312 >> 2];
 HEAP32[$1 + 296 >> 2] = gemmlowp__FixedPoint_int_2c_200_20__200__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 288 >> 2], HEAP32[$1 + 280 >> 2]);
 HEAP32[$1 + 272 >> 2] = HEAP32[$1 + 488 >> 2];
 HEAP32[$1 + 304 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__SelectUsingMask_int_2c_200__28int_2c_20gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29($0, HEAP32[$1 + 296 >> 2], HEAP32[$1 + 272 >> 2]);
 HEAP32[$1 + 488 >> 2] = HEAP32[$1 + 304 >> 2];
 HEAP32[$1 + 264 >> 2] = gemmlowp__FixedPoint_int_2c_200___FromScalarRaw_28int_29(gemmlowp__FixedPoint_int_2c_200___ScalarRawType_20gemmlowp__RescaleConstantInitializer_gemmlowp__FixedPoint_int_2c_200___28int_29(790015084));
 $0 = int_20gemmlowp__MaskIfNonZero_int__28int_29(int_20gemmlowp__BitAnd_int__28int_2c_20int_29(HEAP32[$1 + 388 >> 2], int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(67108864)));
 HEAP32[$1 + 240 >> 2] = HEAP32[$1 + 488 >> 2];
 HEAP32[$1 + 232 >> 2] = HEAP32[$1 + 264 >> 2];
 HEAP32[$1 + 248 >> 2] = gemmlowp__FixedPoint_int_2c_200_20__200__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 240 >> 2], HEAP32[$1 + 232 >> 2]);
 HEAP32[$1 + 224 >> 2] = HEAP32[$1 + 488 >> 2];
 HEAP32[$1 + 256 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__SelectUsingMask_int_2c_200__28int_2c_20gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29($0, HEAP32[$1 + 248 >> 2], HEAP32[$1 + 224 >> 2]);
 HEAP32[$1 + 488 >> 2] = HEAP32[$1 + 256 >> 2];
 HEAP32[$1 + 216 >> 2] = gemmlowp__FixedPoint_int_2c_200___FromScalarRaw_28int_29(gemmlowp__FixedPoint_int_2c_200___ScalarRawType_20gemmlowp__RescaleConstantInitializer_gemmlowp__FixedPoint_int_2c_200___28int_29(290630308));
 $0 = int_20gemmlowp__MaskIfNonZero_int__28int_29(int_20gemmlowp__BitAnd_int__28int_2c_20int_29(HEAP32[$1 + 388 >> 2], int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(134217728)));
 HEAP32[$1 + 192 >> 2] = HEAP32[$1 + 488 >> 2];
 HEAP32[$1 + 184 >> 2] = HEAP32[$1 + 216 >> 2];
 HEAP32[$1 + 200 >> 2] = gemmlowp__FixedPoint_int_2c_200_20__200__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 192 >> 2], HEAP32[$1 + 184 >> 2]);
 HEAP32[$1 + 176 >> 2] = HEAP32[$1 + 488 >> 2];
 HEAP32[$1 + 208 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__SelectUsingMask_int_2c_200__28int_2c_20gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29($0, HEAP32[$1 + 200 >> 2], HEAP32[$1 + 176 >> 2]);
 HEAP32[$1 + 488 >> 2] = HEAP32[$1 + 208 >> 2];
 HEAP32[$1 + 168 >> 2] = gemmlowp__FixedPoint_int_2c_200___FromScalarRaw_28int_29(gemmlowp__FixedPoint_int_2c_200___ScalarRawType_20gemmlowp__RescaleConstantInitializer_gemmlowp__FixedPoint_int_2c_200___28int_29(39332535));
 $0 = int_20gemmlowp__MaskIfNonZero_int__28int_29(int_20gemmlowp__BitAnd_int__28int_2c_20int_29(HEAP32[$1 + 388 >> 2], int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(268435456)));
 HEAP32[$1 + 144 >> 2] = HEAP32[$1 + 488 >> 2];
 HEAP32[$1 + 136 >> 2] = HEAP32[$1 + 168 >> 2];
 HEAP32[$1 + 152 >> 2] = gemmlowp__FixedPoint_int_2c_200_20__200__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 144 >> 2], HEAP32[$1 + 136 >> 2]);
 HEAP32[$1 + 128 >> 2] = HEAP32[$1 + 488 >> 2];
 HEAP32[$1 + 160 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__SelectUsingMask_int_2c_200__28int_2c_20gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29($0, HEAP32[$1 + 152 >> 2], HEAP32[$1 + 128 >> 2]);
 HEAP32[$1 + 488 >> 2] = HEAP32[$1 + 160 >> 2];
 HEAP32[$1 + 120 >> 2] = gemmlowp__FixedPoint_int_2c_200___FromScalarRaw_28int_29(gemmlowp__FixedPoint_int_2c_200___ScalarRawType_20gemmlowp__RescaleConstantInitializer_gemmlowp__FixedPoint_int_2c_200___28int_29(720401));
 $0 = int_20gemmlowp__MaskIfNonZero_int__28int_29(int_20gemmlowp__BitAnd_int__28int_2c_20int_29(HEAP32[$1 + 388 >> 2], int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(536870912)));
 HEAP32[$1 + 96 >> 2] = HEAP32[$1 + 488 >> 2];
 HEAP32[$1 + 88 >> 2] = HEAP32[$1 + 120 >> 2];
 HEAP32[$1 + 104 >> 2] = gemmlowp__FixedPoint_int_2c_200_20__200__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 96 >> 2], HEAP32[$1 + 88 >> 2]);
 HEAP32[$1 + 80 >> 2] = HEAP32[$1 + 488 >> 2];
 HEAP32[$1 + 112 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__SelectUsingMask_int_2c_200__28int_2c_20gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29($0, HEAP32[$1 + 104 >> 2], HEAP32[$1 + 80 >> 2]);
 HEAP32[$1 + 488 >> 2] = HEAP32[$1 + 112 >> 2];
 HEAP32[$1 + 72 >> 2] = gemmlowp__FixedPoint_int_2c_200___FromScalarRaw_28int_29(gemmlowp__FixedPoint_int_2c_200___ScalarRawType_20gemmlowp__RescaleConstantInitializer_gemmlowp__FixedPoint_int_2c_200___28int_29(242));
 $0 = int_20gemmlowp__MaskIfNonZero_int__28int_29(int_20gemmlowp__BitAnd_int__28int_2c_20int_29(HEAP32[$1 + 388 >> 2], int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(1073741824)));
 HEAP32[$1 + 48 >> 2] = HEAP32[$1 + 488 >> 2];
 HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 72 >> 2];
 HEAP32[$1 + 56 >> 2] = gemmlowp__FixedPoint_int_2c_200_20__200__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 48 >> 2], HEAP32[$1 + 40 >> 2]);
 HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 488 >> 2];
 HEAP32[$1 + 64 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__SelectUsingMask_int_2c_200__28int_2c_20gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29($0, HEAP32[$1 + 56 >> 2], HEAP32[$1 + 32 >> 2]);
 HEAP32[$1 + 488 >> 2] = HEAP32[$1 + 64 >> 2];
 HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 480 >> 2];
 $0 = int_20gemmlowp__MaskIfZero_int_2c_205__28gemmlowp__FixedPoint_int_2c_205__29(HEAP32[$1 + 16 >> 2]);
 HEAP32[$1 + 8 >> 2] = gemmlowp__FixedPoint_int_2c_200___One_28_29();
 HEAP32[$1 >> 2] = HEAP32[$1 + 488 >> 2];
 HEAP32[$1 + 24 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__SelectUsingMask_int_2c_200__28int_2c_20gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29($0, HEAP32[$1 + 8 >> 2], HEAP32[$1 >> 2]);
 HEAP32[$1 + 488 >> 2] = HEAP32[$1 + 24 >> 2];
 __stack_pointer = $1 + 496 | 0;
 return HEAP32[$1 + 488 >> 2];
}

function jswrap_banglejs_init() {
 var $0 = 0, $1 = 0, $2 = 0;
 $0 = __stack_pointer - 272 | 0;
 __stack_pointer = $0;
 HEAP8[$0 + 270 | 0] = (HEAPU16[93524] & 4096) != 0;
 HEAP8[$0 + 269 | 0] = 0;
 if (HEAP8[$0 + 270 | 0] & 1) {
  HEAP32[85796] = 196686;
  HEAP8[343244] = 255;
  HEAP32[85817] = 0;
  healthStateClear(343272);
  healthStateClear(343288);
  healthStateClear(343304);
  if (jshPinGetValue(23) & 1) {
   HEAP8[$0 + 269 | 0] = 1;
  }
 }
 HEAP32[85796] = HEAP32[85796] | 2048;
 HEAP16[171604] = 0;
 HEAP32[85812] = 1500;
 HEAP32[85798] = 3e4;
 HEAP32[85800] = 3e4;
 HEAP32[85801] = 3e4;
 HEAP8[343214] = 0;
 if (jshPinGetValue(23) & 1) {
  HEAP8[343214] = 3;
 }
 HEAP8[343320] = 0;
 HEAP16[171661] = 0;
 if (!(HEAP8[$0 + 269 | 0] & 1)) {
  HEAP32[$0 + 264 >> 2] = jsvNewFromString(102097);
  HEAP32[$0 + 260 >> 2] = jswrap_storage_readJSON(HEAP32[$0 + 264 >> 2], 1);
  jsvUnLock(HEAP32[$0 + 264 >> 2]);
  label$5: {
   if (jsvIsObject(HEAP32[$0 + 260 >> 2]) & 1) {
    $1 = jsvObjectGetChildIfExists(HEAP32[$0 + 260 >> 2], 101966);
    break label$5;
   }
   $1 = 0;
  }
  HEAP32[$0 + 256 >> 2] = $1;
  label$7: {
   label$8: {
    if (!HEAP32[$0 + 256 >> 2]) {
     break label$8;
    }
    if (jsvGetBool(HEAP32[$0 + 256 >> 2]) & 1) {
     break label$8;
    }
    HEAP32[85796] = HEAP32[85796] & -257;
    break label$7;
   }
   HEAP32[85796] = HEAP32[85796] | 256;
   label$9: {
    label$10: {
     if (HEAP32[$0 + 256 >> 2]) {
      if (!(jsvIsStringEqual(HEAP32[$0 + 256 >> 2], 107783) & 1)) {
       break label$10;
      }
     }
     HEAP32[85796] = HEAP32[85796] | 128;
     break label$9;
    }
    HEAP32[85796] = HEAP32[85796] & -129;
   }
  }
  jsvUnLock(HEAP32[$0 + 256 >> 2]);
  label$12: {
   if (jsvIsObject(HEAP32[$0 + 260 >> 2]) & 1) {
    $1 = jsvObjectGetChildIfExists(HEAP32[$0 + 260 >> 2], 104671);
    break label$12;
   }
   $1 = 0;
  }
  HEAP32[$0 + 256 >> 2] = $1;
  label$14: {
   label$15: {
    if (!HEAP32[$0 + 256 >> 2]) {
     break label$15;
    }
    if (jsvGetBool(HEAP32[$0 + 256 >> 2]) & 1) {
     break label$15;
    }
    HEAP32[85796] = HEAP32[85796] & -513;
    break label$14;
   }
   HEAP32[85796] = HEAP32[85796] | 512;
  }
  jsvUnLock(HEAP32[$0 + 256 >> 2]);
  jswrap_banglejs_setTheme();
  label$16: {
   if (jsvIsObject(HEAP32[$0 + 260 >> 2]) & 1) {
    $1 = jsvObjectGetChildIfExists(HEAP32[$0 + 260 >> 2], 105021);
    break label$16;
   }
   $1 = 0;
  }
  HEAP32[$0 + 256 >> 2] = $1;
  if (jsvIsObject(HEAP32[$0 + 256 >> 2]) & 1) {
   $1 = jsvObjectGetIntegerChild(HEAP32[$0 + 256 >> 2], 103993);
   HEAP8[189412] = $1;
   HEAP8[189413] = $1 >>> 8;
   $1 = jsvObjectGetIntegerChild(HEAP32[$0 + 256 >> 2], 103997);
   HEAP8[189414] = $1;
   HEAP8[189415] = $1 >>> 8;
   $1 = jsvObjectGetIntegerChild(HEAP32[$0 + 256 >> 2], 110890);
   HEAP8[189416] = $1;
   HEAP8[189417] = $1 >>> 8;
   $1 = jsvObjectGetIntegerChild(HEAP32[$0 + 256 >> 2], 110894);
   HEAP8[189418] = $1;
   HEAP8[189419] = $1 >>> 8;
   $1 = jsvObjectGetIntegerChild(HEAP32[$0 + 256 >> 2], 109556);
   HEAP8[189420] = $1;
   HEAP8[189421] = $1 >>> 8;
   $1 = jsvObjectGetIntegerChild(HEAP32[$0 + 256 >> 2], 109560);
   HEAP8[189422] = $1;
   HEAP8[189423] = $1 >>> 8;
   HEAP8[189424] = jsvObjectGetBoolChild(HEAP32[$0 + 256 >> 2], 103074) & 1;
  }
  jsvUnLock(HEAP32[$0 + 256 >> 2]);
  jsvUnLock(HEAP32[$0 + 260 >> 2]);
 }
 jswrap_banglejs_setLCDOffset(0);
 HEAP8[189440] = 240;
 HEAP8[189441] = 0;
 HEAP8[189442] = 240;
 HEAP8[189443] = 0;
 HEAP8[189444] = 16;
 graphicsStructResetState(189428);
 HEAP32[$0 + 252 >> 2] = jspNewObject(0, 100617);
 label$19: {
  if (!HEAP32[$0 + 252 >> 2]) {
   break label$19;
  }
  jsvObjectSetChild(HEAP32[46747], 104025, HEAP32[$0 + 252 >> 2]);
  jsvObjectSetChild(HEAP32[46748], 96685, HEAP32[$0 + 252 >> 2]);
  $1 = HEAP32[$0 + 252 >> 2];
  HEAP8[189428] = $1;
  HEAP8[189429] = $1 >>> 8;
  HEAP8[189430] = $1 >>> 16;
  HEAP8[189431] = $1 >>> 24;
  HEAP32[$0 + 248 >> 2] = jsvNewNativeFunction(580, 32792);
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 252 >> 2], 101953, HEAP32[$0 + 248 >> 2]);
  if (!(HEAP8[$0 + 270 | 0] & 1)) {
   if ((lcdST7789_getMode() | 0) != 1) {
    lcdST7789_setMode(1);
    graphicsClear(189428);
   }
  }
  HEAP8[$0 + 247 | 0] = 1;
  if (HEAPU16[93524] & 64) {
   HEAP8[$0 + 247 | 0] = 0;
   if (!(HEAP8[$0 + 270 | 0] & 1 | HEAP8[$0 + 269 | 0] & 1)) {
    jsfNameFromString($0 + 208 | 0, 103984);
    HEAP32[$0 + 64 >> 2] = HEAP32[$0 + 232 >> 2];
    $1 = HEAP32[$0 + 228 >> 2];
    $2 = HEAP32[$0 + 224 >> 2];
    HEAP32[$0 + 56 >> 2] = $2;
    HEAP32[$0 + 60 >> 2] = $1;
    $2 = HEAP32[$0 + 220 >> 2];
    $1 = HEAP32[$0 + 216 >> 2];
    HEAP32[$0 + 48 >> 2] = $1;
    HEAP32[$0 + 52 >> 2] = $2;
    $1 = HEAP32[$0 + 212 >> 2];
    $2 = HEAP32[$0 + 208 >> 2];
    HEAP32[$0 + 40 >> 2] = $2;
    HEAP32[$0 + 44 >> 2] = $1;
    HEAP32[$0 + 240 >> 2] = jsfReadFile($0 + 40 | 0, 0, 0);
    label$24: {
     if (jsvIsString(HEAP32[$0 + 240 >> 2]) & 1) {
      if (jsvGetStringLength(HEAP32[$0 + 240 >> 2]) >>> 0 > 3) {
       HEAP32[$0 + 204 >> 2] = jsvGetCharInString(HEAP32[$0 + 240 >> 2], 0) & 255;
       HEAP32[$0 + 200 >> 2] = jsvGetCharInString(HEAP32[$0 + 240 >> 2], 1) & 255;
       jsvUnLock2(jswrap_graphics_drawImage(HEAP32[$0 + 252 >> 2], HEAP32[$0 + 240 >> 2], (240 - HEAP32[$0 + 204 >> 2] | 0) / 2 | 0, (240 - HEAP32[$0 + 200 >> 2] | 0) / 2 | 0, 0), HEAP32[$0 + 240 >> 2]);
       graphicsInternalFlip();
      }
      break label$24;
     }
     HEAP32[$0 + 196 >> 2] = 120;
     HEAP32[$0 + 192 >> 2] = 120;
     graphicsFillRect(189428, HEAP32[$0 + 196 >> 2] - 49 | 0, HEAP32[$0 + 192 >> 2] - 19 | 0, HEAP32[$0 + 196 >> 2] + 49 | 0, HEAP32[$0 + 192 >> 2] + 19 | 0, HEAPU8[189414] | HEAPU8[189415] << 8);
     $1 = HEAPU8[189412] | HEAPU8[189413] << 8;
     HEAP8[189445] = $1;
     HEAP8[189446] = $1 >>> 8;
     HEAP8[189447] = $1 >>> 16;
     HEAP8[189448] = $1 >>> 24;
     graphicsDrawRect(189428, HEAP32[$0 + 196 >> 2] - 50 | 0, HEAP32[$0 + 192 >> 2] - 20 | 0, HEAP32[$0 + 196 >> 2] + 50 | 0, HEAP32[$0 + 192 >> 2] + 20 | 0);
     HEAP32[$0 + 192 >> 2] = HEAP32[$0 + 192 >> 2] - 4;
     HEAP32[$0 + 196 >> 2] = HEAP32[$0 + 196 >> 2] - 24;
     HEAP32[$0 + 188 >> 2] = 112329;
     while (1) {
      if (HEAPU8[HEAP32[$0 + 188 >> 2]]) {
       graphicsDrawChar6x8(189428, HEAP32[$0 + 196 >> 2], HEAP32[$0 + 192 >> 2], HEAP8[HEAP32[$0 + 188 >> 2]], 1, 1, 0);
       HEAP32[$0 + 196 >> 2] = HEAP32[$0 + 196 >> 2] + 6;
       HEAP32[$0 + 188 >> 2] = HEAP32[$0 + 188 >> 2] + 1;
       continue;
      }
      break;
     }
     graphicsInternalFlip();
    }
   }
  }
  if (HEAP8[$0 + 269 | 0] & 1) {
   HEAP8[$0 + 247 | 0] = 0;
  }
  if (HEAP8[$0 + 247 | 0] & 1) {
   HEAP8[189453] = 1;
   HEAP8[189454] = 64;
   graphicsClear(189428);
   HEAP8[$0 + 187 | 0] = 0;
   jsfNameFromString($0 + 152 | 0, 103445);
   HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 176 >> 2];
   $2 = HEAP32[$0 + 172 >> 2];
   $1 = HEAP32[$0 + 168 >> 2];
   HEAP32[$0 + 24 >> 2] = $1;
   HEAP32[$0 + 28 >> 2] = $2;
   $1 = HEAP32[$0 + 164 >> 2];
   $2 = HEAP32[$0 + 160 >> 2];
   HEAP32[$0 + 16 >> 2] = $2;
   HEAP32[$0 + 20 >> 2] = $1;
   $2 = HEAP32[$0 + 156 >> 2];
   $1 = HEAP32[$0 + 152 >> 2];
   HEAP32[$0 + 8 >> 2] = $1;
   HEAP32[$0 + 12 >> 2] = $2;
   HEAP32[$0 + 180 >> 2] = jsfReadFile($0 + 8 | 0, 0, 0);
   label$31: {
    if (jsvIsString(HEAP32[$0 + 180 >> 2]) & 1) {
     if (jsvGetStringLength(HEAP32[$0 + 180 >> 2])) {
      break label$31;
     }
    }
    jsvUnLock(HEAP32[$0 + 180 >> 2]);
    HEAP8[$0 + 187 | 0] = 1;
    HEAP32[$0 + 180 >> 2] = jswrap_banglejs_getLogo();
   }
   HEAP32[$0 + 148 >> 2] = jsvGetCharInString(HEAP32[$0 + 180 >> 2], 0) & 255;
   HEAP32[$0 + 144 >> 2] = jsvGetCharInString(HEAP32[$0 + 180 >> 2], 1) & 255;
   HEAP32[$0 + 108 >> 2] = jsvNewFromString(106228);
   jsvGetString(HEAP32[$0 + 108 >> 2], $0 + 112 | 0, 20);
   jsvUnLock(HEAP32[$0 + 108 >> 2]);
   HEAP32[$0 + 104 >> 2] = (240 - HEAP32[$0 + 144 >> 2] | 0) / 2;
   jsvUnLock2(jswrap_graphics_drawImage(HEAP32[$0 + 252 >> 2], HEAP32[$0 + 180 >> 2], (240 - HEAP32[$0 + 148 >> 2] | 0) / 2 | 0, HEAP32[$0 + 104 >> 2], 0), HEAP32[$0 + 180 >> 2]);
   if (HEAP8[$0 + 187 | 0] & 1) {
    label$34: {
     if (HEAP32[$0 + 144 >> 2] > 56) {
      HEAP32[$0 + 104 >> 2] = HEAP32[$0 + 104 >> 2] + (HEAP32[$0 + 144 >> 2] - 28 | 0);
      break label$34;
     }
     HEAP32[$0 + 104 >> 2] = HEAP32[$0 + 104 >> 2] + (HEAP32[$0 + 144 >> 2] - 15 | 0);
    }
    HEAP32[$0 + 76 >> 2] = jsvNewFromString(106228);
    jsvGetString(HEAP32[$0 + 76 >> 2], $0 + 80 | 0, 20);
    jsvUnLock(HEAP32[$0 + 76 >> 2]);
    jswrap_graphics_drawCString(189428, 8, HEAP32[$0 + 104 >> 2], 110812);
    jswrap_graphics_drawCString(189428, 8, HEAP32[$0 + 104 >> 2] + 10 | 0, $0 + 80 | 0);
    jswrap_graphics_drawCString(189428, 8, HEAP32[$0 + 104 >> 2] + 20 | 0, 100255);
   }
  }
  graphicsInternalFlip();
  graphicsStructResetState(189428);
  if (HEAP8[$0 + 270 | 0] & 1) {
   stepcount_init();
   HEAP32[85813] = 0;
  }
  HEAP8[343324] = 0;
  jshPinSetState(12, 5);
  HEAP32[85807] = 0;
  HEAP32[85809] = 0;
  HEAP32[85808] = 0;
  jshSetPinShouldStayWatched(24, 1);
  jshSetPinShouldStayWatched(22, 1);
  HEAP8[$0 + 271 | 0] = jshPinWatch(24, 1, 0);
  if (HEAPU8[$0 + 271 | 0]) {
   jshSetEventCallback(HEAPU8[$0 + 271 | 0], 581);
  }
  HEAP8[$0 + 271 | 0] = jshPinWatch(22, 1, 0);
  if (HEAPU8[$0 + 271 | 0]) {
   jshSetEventCallback(HEAPU8[$0 + 271 | 0], 582);
  }
  jshSetPinShouldStayWatched(23, 1);
  HEAP8[$0 + 271 | 0] = jshPinWatch(23, 1, 0);
  if (HEAPU8[$0 + 271 | 0]) {
   jshSetEventCallback(HEAPU8[$0 + 271 | 0], 583);
  }
  jshSetPinShouldStayWatched(11, 1);
  HEAP8[$0 + 271 | 0] = jshPinWatch(11, 1, 0);
  if (HEAPU8[$0 + 271 | 0]) {
   jshSetEventCallback(HEAPU8[$0 + 271 | 0], 584);
  }
  jshSetPinShouldStayWatched(16, 1);
  HEAP8[$0 + 271 | 0] = jshPinWatch(16, 1, 0);
  if (HEAPU8[$0 + 271 | 0]) {
   jshSetEventCallback(HEAPU8[$0 + 271 | 0], 585);
  }
  if (!(HEAP8[$0 + 270 | 0] & 1)) {
   jsvUnLock(jsiSetTimeout(586, 500));
  }
  if (!(HEAP8[$0 + 269 | 0] & 1)) {
   break label$19;
  }
  jsvUnLock(jspEvaluate(126528, 1));
 }
 __stack_pointer = $0 + 272 | 0;
}

function jsiHandleChar($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 31 | 0] = $0;
 label$1: {
  if (jsiPasswordProtected() & 1) {
   if (!(HEAP8[$1 + 31 | 0] != 13 & HEAP8[$1 + 31 | 0] != 10)) {
    HEAP32[$1 + 24 >> 2] = jsvObjectGetChildIfExists(HEAP32[46748], 105507);
    label$5: {
     if (!HEAP32[$1 + 24 >> 2]) {
      break label$5;
     }
     if (jsvCompareString(HEAP32[46763], HEAP32[$1 + 24 >> 2], 0, 0, 0)) {
      break label$5;
     }
     HEAP16[93524] = HEAPU16[93524] & -1025;
    }
    jsvUnLock(HEAP32[$1 + 24 >> 2]);
    jsiClearInputLine(0);
    label$6: {
     if (jsiPasswordProtected() & 1) {
      jsiConsolePrintString(110305);
      break label$6;
     }
     jsiConsolePrintString(128975);
     HEAP8[187056] = 1;
     jsiConsoleReturnInputLine();
    }
    break label$1;
   }
   HEAP8[$1 + 22 | 0] = HEAPU8[$1 + 31 | 0];
   HEAP8[$1 + 23 | 0] = 0;
   if (jsvGetStringLength(HEAP32[46763]) >>> 0 < 20) {
    jsiAppendToInputLine($1 + 22 | 0);
   }
   break label$1;
  }
  if (!HEAP8[$1 + 31 | 0]) {
   HEAP8[187064] = 0;
   break label$1;
  }
  label$10: {
   if (HEAP8[$1 + 31 | 0] == 1) {
    jsiHandleHome();
    break label$10;
   }
   label$12: {
    if (HEAP8[$1 + 31 | 0] == 4) {
     jsiHandleDelete(0);
     break label$12;
    }
    label$14: {
     if (HEAP8[$1 + 31 | 0] == 5) {
      jsiHandleEnd();
      break label$14;
     }
     label$16: {
      if (!(HEAP8[$1 + 31 | 0] != 21 & HEAP8[$1 + 31 | 0] != 23)) {
       jsiClearInputLine(1);
       break label$16;
      }
      label$19: {
       if (HEAP8[$1 + 31 | 0] == 27) {
        HEAP8[187064] = 2;
        break label$19;
       }
       label$21: {
        if (HEAPU8[187064] == 2) {
         HEAP8[187064] = 0;
         label$23: {
          if (HEAP8[$1 + 31 | 0] == 79) {
           HEAP8[187064] = 3;
           break label$23;
          }
          label$25: {
           if (HEAP8[$1 + 31 | 0] == 91) {
            HEAP8[187064] = 4;
            break label$25;
           }
           if (HEAP8[$1 + 31 | 0] == 10) {
            jsiHandleNewLine(0);
           }
          }
         }
         break label$21;
        }
        label$28: {
         if (HEAPU8[187064] == 3) {
          HEAP8[187064] = 0;
          label$30: {
           if (HEAP8[$1 + 31 | 0] == 70) {
            jsiHandleEnd();
            break label$30;
           }
           label$32: {
            if (HEAP8[$1 + 31 | 0] == 72) {
             jsiHandleHome();
             break label$32;
            }
            label$34: {
             if (HEAP8[$1 + 31 | 0] == 111) {
              jsiHandleChar(47);
              break label$34;
             }
             label$36: {
              if (HEAP8[$1 + 31 | 0] == 106) {
               jsiHandleChar(42);
               break label$36;
              }
              label$38: {
               if (HEAP8[$1 + 31 | 0] == 109) {
                jsiHandleChar(45);
                break label$38;
               }
               label$40: {
                if (HEAP8[$1 + 31 | 0] == 107) {
                 jsiHandleChar(43);
                 break label$40;
                }
                if (HEAP8[$1 + 31 | 0] == 77) {
                 jsiHandleChar(13);
                }
               }
              }
             }
            }
           }
          }
          break label$28;
         }
         label$43: {
          if (HEAPU8[187064] == 4) {
           HEAP8[187064] = 0;
           label$45: {
            if (!(HEAP8[$1 + 31 | 0] < 48 | HEAP8[$1 + 31 | 0] > 57)) {
             HEAP16[93560] = HEAP8[$1 + 31 | 0] - 48;
             HEAP8[187064] = 5;
             break label$45;
            }
            label$47: {
             if (HEAP8[$1 + 31 | 0] == 68) {
              if (!HEAP32[46765]) {
               break label$47;
              }
              if ((jsvGetCharInString(HEAP32[46763], HEAP32[46765] - 1 | 0) | 0) == 10) {
               break label$47;
              }
              HEAP32[46765] = HEAP32[46765] - 1;
              if (jsiShowInputLine() & 1) {
               jsiConsolePrintString(109903);
              }
              break label$47;
             }
             label$50: {
              if (HEAP8[$1 + 31 | 0] == 67) {
               if (HEAPU32[46765] >= jsvGetStringLength(HEAP32[46763]) >>> 0) {
                break label$50;
               }
               if ((jsvGetCharInString(HEAP32[46763], HEAP32[46765]) | 0) == 10) {
                break label$50;
               }
               HEAP32[46765] = HEAP32[46765] + 1;
               if (jsiShowInputLine() & 1) {
                jsiConsolePrintString(110105);
               }
               break label$50;
              }
              label$53: {
               if (HEAP8[$1 + 31 | 0] == 65) {
                HEAP32[$1 + 16 >> 2] = jsvGetStringLength(HEAP32[46763]);
                label$55: {
                 label$56: {
                  if (HEAP32[$1 + 16 >> 2]) {
                   if (!(jsiIsInHistory(HEAP32[46763]) & 1)) {
                    break label$56;
                   }
                  }
                  if (HEAP32[46765] != HEAP32[$1 + 16 >> 2]) {
                   break label$56;
                  }
                  jsiChangeToHistory(1);
                  break label$55;
                 }
                 jsiHandleMoveUpDown(-1);
                }
                break label$53;
               }
               label$58: {
                if (HEAP8[$1 + 31 | 0] == 66) {
                 HEAP32[$1 + 12 >> 2] = jsvGetStringLength(HEAP32[46763]);
                 label$60: {
                  label$61: {
                   if (HEAP32[$1 + 12 >> 2]) {
                    if (!(jsiIsInHistory(HEAP32[46763]) & 1)) {
                     break label$61;
                    }
                   }
                   if (HEAP32[46765] != HEAP32[$1 + 12 >> 2]) {
                    break label$61;
                   }
                   jsiChangeToHistory(0);
                   break label$60;
                  }
                  jsiHandleMoveUpDown(1);
                 }
                 break label$58;
                }
                label$63: {
                 if (HEAP8[$1 + 31 | 0] == 70) {
                  jsiHandleEnd();
                  break label$63;
                 }
                 if (HEAP8[$1 + 31 | 0] == 72) {
                  jsiHandleHome();
                 }
                }
               }
              }
             }
            }
           }
           break label$43;
          }
          label$66: {
           if (HEAPU8[187064] == 5) {
            if (!(HEAP8[$1 + 31 | 0] < 48 | HEAP8[$1 + 31 | 0] > 57)) {
             HEAP16[93560] = (HEAP8[$1 + 31 | 0] + Math_imul(HEAPU16[93560], 10) | 0) - 48;
             break label$66;
            }
            label$69: {
             if (HEAP8[$1 + 31 | 0] == 100) {
              HEAP16[93536] = HEAPU16[93560];
              break label$69;
             }
             label$71: {
              if (HEAP8[$1 + 31 | 0] == 72) {
               if (HEAPU16[93560] == 2) {
                jsiClearInputLine(1);
               }
               break label$71;
              }
              if (HEAP8[$1 + 31 | 0] == 126) {
               label$75: {
                if (HEAPU16[93560] == 1) {
                 jsiHandleHome();
                 break label$75;
                }
                label$77: {
                 if (HEAPU16[93560] == 3) {
                  jsiHandleDelete(0);
                  break label$77;
                 }
                 label$79: {
                  if (HEAPU16[93560] == 4) {
                   jsiHandleEnd();
                   break label$79;
                  }
                  label$81: {
                   if (HEAPU16[93560] == 5) {
                    jsiHandlePageUpDown(0);
                    break label$81;
                   }
                   if (HEAPU16[93560] == 6) {
                    jsiHandlePageUpDown(1);
                   }
                  }
                 }
                }
               }
              }
             }
            }
            HEAP8[187064] = 0;
            break label$66;
           }
           label$84: {
            label$85: {
             if (HEAP8[$1 + 31 | 0] != 16) {
              break label$85;
             }
             if (jsvGetStringLength(HEAP32[46763])) {
              break label$85;
             }
             HEAP16[93524] = HEAPU16[93524] | 2;
             break label$84;
            }
            HEAP8[187064] = 0;
            label$86: {
             if (!(HEAP8[$1 + 31 | 0] != 8 & HEAP8[$1 + 31 | 0] != 127)) {
              jsiHandleDelete(1);
              break label$86;
             }
             label$89: {
              if (!(HEAP8[$1 + 31 | 0] != 10 | HEAPU8[187064] != 1)) {
               HEAP8[187064] = 0;
               break label$89;
              }
              label$91: {
               if (!(HEAP8[$1 + 31 | 0] != 13 & HEAP8[$1 + 31 | 0] != 10)) {
                if (HEAP8[$1 + 31 | 0] == 13) {
                 HEAP8[187064] = 1;
                }
                jsiHandleNewLine(1);
                break label$91;
               }
               label$95: {
                label$96: {
                 if (HEAP8[$1 + 31 | 0] != 9) {
                  break label$96;
                 }
                 if (!(jsiEcho() & 1)) {
                  break label$96;
                 }
                 jsiTabComplete();
                 break label$95;
                }
                if (!(HEAP8[$1 + 31 | 0] != 9 & HEAPU8[$1 + 31 | 0] < 32)) {
                 HEAP8[$1 + 10 | 0] = HEAPU8[$1 + 31 | 0];
                 HEAP8[$1 + 11 | 0] = 0;
                 HEAP32[$1 + 4 >> 2] = HEAP8[$1 + 31 | 0] == 9 ? 127794 : $1 + 10 | 0;
                 jsiAppendStringToInputLine(HEAP32[$1 + 4 >> 2]);
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 __stack_pointer = $1 + 32 | 0;
}

function jswrap_banglejs_idle() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0;
 $3 = __stack_pointer - 336 | 0;
 $0 = $3;
 __stack_pointer = $0;
 HEAP32[$0 + 332 >> 2] = jsvObjectGetChildIfExists(HEAP32[46747], 105122);
 label$1: {
  if (jsiObjectHasCallbacks(HEAP32[$0 + 332 >> 2], 102978) & 1) {
   HEAP32[85796] = HEAP32[85796] | 1024;
   break label$1;
  }
  HEAP32[85796] = HEAP32[85796] & -1025;
 }
 if (!HEAP32[$0 + 332 >> 2]) {
  HEAP32[85799] = 0;
 }
 if (HEAP32[85799]) {
  if (HEAP32[85799] & 4) {
   jswrap_banglejs_setLCDPower(0);
  }
  if (HEAP32[85799] & 2) {
   jswrap_banglejs_setLCDPower(1);
  }
  if (HEAP32[85799] & 16) {
   jswrap_banglejs_setLCDPowerBacklight(0);
  }
  if (HEAP32[85799] & 8) {
   jswrap_banglejs_setLCDPowerBacklight(1);
  }
  if (HEAP32[85799] & 32) {
   _jswrap_banglejs_setLocked(1, HEAP32[85797]);
   HEAP32[85797] = 0;
  }
  if (HEAP32[85799] & 64) {
   _jswrap_banglejs_setLocked(0, HEAP32[85797]);
   HEAP32[85797] = 0;
  }
  if (HEAP32[85799] & 1) {
   HEAP16[93524] = HEAPU16[93524] | 64;
  }
  if (HEAP32[85799] & 67108864) {
   jswrap_banglejs_setPollInterval_internal(80);
  }
  if (HEAP32[85799] & 134217728) {
   jswrap_banglejs_setPollInterval_internal(800);
  }
  if (HEAP32[85799] & 128) {
   HEAP32[$0 + 328 >> 2] = jswrap_banglejs_getAccel();
   if (HEAP32[$0 + 328 >> 2]) {
    jsiQueueObjectCallbacks(HEAP32[$0 + 332 >> 2], 102978, $0 + 328 | 0, 1);
    jsvUnLock(HEAP32[$0 + 328 >> 2]);
   }
  }
  if (HEAP32[85799] & 256) {
   HEAP32[$0 + 324 >> 2] = jsvNewObject();
   if (HEAP32[$0 + 324 >> 2]) {
    HEAP32[$0 + 320 >> 2] = 129588;
    if (HEAP8[343336] & 1) {
     HEAP32[$0 + 320 >> 2] = 97632;
    }
    if (HEAPU8[343336] & 2) {
     HEAP32[$0 + 320 >> 2] = 103122;
    }
    if (HEAPU8[343336] & 4) {
     HEAP32[$0 + 320 >> 2] = 101848;
    }
    if (HEAPU8[343336] & 8) {
     HEAP32[$0 + 320 >> 2] = 102656;
    }
    if (HEAPU8[343336] & 16) {
     HEAP32[$0 + 320 >> 2] = 97952;
    }
    if (HEAPU8[343336] & 32) {
     HEAP32[$0 + 320 >> 2] = 97884;
    }
    HEAP32[$0 + 316 >> 2] = HEAPU8[343336] & 128 ? 2 : 1;
    jsvObjectSetChildAndUnLock(HEAP32[$0 + 324 >> 2], 101106, jsvNewFromString(HEAP32[$0 + 320 >> 2]));
    jsvObjectSetChildAndUnLock(HEAP32[$0 + 324 >> 2], 105129, jsvNewFromBool((HEAPU8[343336] & 128) != 0));
    $2 = HEAP32[$0 + 324 >> 2];
    if (HEAPU8[343336] & 16) {
     $1 = 0 - HEAP32[$0 + 316 >> 2] | 0;
    } else {
     if (HEAPU8[343336] & 32) {
      $1 = HEAP32[$0 + 316 >> 2];
     } else {
      $1 = 0;
     }
    }
    jsvObjectSetChildAndUnLock($2, 96763, jsvNewFromInteger($1));
    $2 = HEAP32[$0 + 324 >> 2];
    if (HEAPU8[343336] & 4) {
     $1 = 0 - HEAP32[$0 + 316 >> 2] | 0;
    } else {
     if (HEAPU8[343336] & 8) {
      $1 = HEAP32[$0 + 316 >> 2];
     } else {
      $1 = 0;
     }
    }
    jsvObjectSetChildAndUnLock($2, 96676, jsvNewFromInteger($1));
    $2 = HEAP32[$0 + 324 >> 2];
    if (HEAP8[343336] & 1) {
     $1 = 0 - HEAP32[$0 + 316 >> 2] | 0;
    } else {
     if (HEAPU8[343336] & 2) {
      $1 = HEAP32[$0 + 316 >> 2];
     } else {
      $1 = 0;
     }
    }
    jsvObjectSetChildAndUnLock($2, 96406, jsvNewFromInteger($1));
    jsiQueueObjectCallbacks(HEAP32[$0 + 332 >> 2], 101971, $0 + 324 | 0, 1);
    jsvUnLock(HEAP32[$0 + 324 >> 2]);
   }
  }
  if (HEAP32[85799] & 16384) {
   label$37: {
    if (!HEAP32[$0 + 332 >> 2]) {
     break label$37;
    }
    if (!(jsiObjectHasCallbacks(HEAP32[$0 + 332 >> 2], 104007) & 1)) {
     break label$37;
    }
    HEAP32[$0 + 312 >> 2] = jswrap_banglejs_getCompass();
    if (HEAP32[$0 + 312 >> 2]) {
     jsiQueueObjectCallbacks(HEAP32[$0 + 332 >> 2], 104007, $0 + 312 | 0, 1);
     jsvUnLock(HEAP32[$0 + 312 >> 2]);
    }
   }
  }
  if (HEAP32[85799] & 536870912) {
   HEAP32[$0 + 308 >> 2] = _jswrap_banglejs_getHealthStatusObject(343288);
   if (HEAP32[$0 + 308 >> 2]) {
    jsiQueueObjectCallbacks(HEAP32[$0 + 332 >> 2], 103334, $0 + 308 | 0, 1);
    jsvUnLock(HEAP32[$0 + 308 >> 2]);
   }
  }
  if (HEAP32[85799] & 1073741824) {
   jsiQueueObjectCallbacks(HEAP32[$0 + 332 >> 2], 97890, 0, 0);
  }
  if (HEAP32[85799] & 32768) {
   if (jsiObjectHasCallbacks(HEAP32[$0 + 332 >> 2], 104738) & 1) {
    HEAP32[$0 + 304 >> 2] = jsvNewTypedArray(17, Math_imul(HEAPU8[343337], 3));
    if (HEAP32[$0 + 304 >> 2]) {
     HEAP32[$0 + 300 >> 2] = HEAPU8[343338] - Math_imul(HEAPU8[343337], 3);
     while (1) {
      if (HEAP32[$0 + 300 >> 2] < 0) {
       HEAP32[$0 + 300 >> 2] = HEAP32[$0 + 300 >> 2] + 150;
       continue;
      }
      break;
     }
     jsvArrayBufferIteratorNew($0 + 240 | 0, HEAP32[$0 + 304 >> 2], 0);
     HEAP32[$0 + 236 >> 2] = 0;
     while (1) {
      if (HEAP32[$0 + 236 >> 2] < (Math_imul(HEAPU8[343337], 3) | 0)) {
       $1 = HEAP32[$0 + 300 >> 2];
       HEAP32[$0 + 300 >> 2] = $1 + 1;
       jsvArrayBufferIteratorSetByteValue($0 + 240 | 0, HEAP8[$1 + 343344 | 0]);
       jsvArrayBufferIteratorNext($0 + 240 | 0);
       if (HEAP32[$0 + 300 >> 2] >= 150) {
        HEAP32[$0 + 300 >> 2] = HEAP32[$0 + 300 >> 2] - 150;
       }
       HEAP32[$0 + 236 >> 2] = HEAP32[$0 + 236 >> 2] + 1;
       continue;
      }
      break;
     }
     jsvArrayBufferIteratorFree($0 + 240 | 0);
     jsiQueueObjectCallbacks(HEAP32[$0 + 332 >> 2], 104738, $0 + 304 | 0, 1);
     jsvUnLock(HEAP32[$0 + 304 >> 2]);
    }
   }
   if (jsiObjectHasCallbacks(HEAP32[$0 + 332 >> 2], 104749) & 1) {
    jsfNameFromString($0 + 168 | 0, 102809);
    HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 192 >> 2];
    $2 = HEAP32[$0 + 188 >> 2];
    $1 = HEAP32[$0 + 184 >> 2];
    HEAP32[$0 + 24 >> 2] = $1;
    HEAP32[$0 + 28 >> 2] = $2;
    $1 = HEAP32[$0 + 180 >> 2];
    $2 = HEAP32[$0 + 176 >> 2];
    HEAP32[$0 + 16 >> 2] = $2;
    HEAP32[$0 + 20 >> 2] = $1;
    $2 = HEAP32[$0 + 172 >> 2];
    $1 = HEAP32[$0 + 168 >> 2];
    HEAP32[$0 + 8 >> 2] = $1;
    HEAP32[$0 + 12 >> 2] = $2;
    HEAP32[$0 + 196 >> 2] = jsfFindFile($0 + 8 | 0, $0 + 200 | 0);
    label$51: {
     if (!HEAP32[$0 + 196 >> 2]) {
      jsiConsolePrintf(128273, 0);
      break label$51;
     }
     HEAP32[$0 + 164 >> 2] = jsfGetFileSize($0 + 200 | 0);
     $3 = $3 - (HEAP32[$0 + 164 >> 2] + 15 & -16) | 0;
     __stack_pointer = $3;
     HEAP32[$0 + 160 >> 2] = $3;
     jshFlashRead(HEAP32[$0 + 160 >> 2], HEAP32[$0 + 196 >> 2], HEAP32[$0 + 164 >> 2]);
     HEAP32[$0 + 156 >> 2] = jsvNewNativeString(HEAP32[$0 + 160 >> 2], HEAP32[$0 + 164 >> 2]);
     while (1) {
      if (jsiFreeMoreMemory() & 1) {
       continue;
      }
      break;
     }
     jsvGarbageCollect();
     HEAP32[$0 + 152 >> 2] = jswrap_tensorflow_create(4e3, HEAP32[$0 + 156 >> 2]);
     jsvUnLock(HEAP32[$0 + 156 >> 2]);
     if (HEAP32[$0 + 152 >> 2]) {
      HEAP32[$0 + 148 >> 2] = jswrap_tfmicrointerpreter_getInput(HEAP32[$0 + 152 >> 2]);
      jsvArrayBufferIteratorNew($0 + 88 | 0, HEAP32[$0 + 148 >> 2], 0);
      HEAP32[$0 + 84 >> 2] = HEAPU8[343338] - Math_imul(HEAPU8[343337], 3);
      while (1) {
       if (HEAP32[$0 + 84 >> 2] < 0) {
        HEAP32[$0 + 84 >> 2] = HEAP32[$0 + 84 >> 2] + 150;
        continue;
       }
       break;
      }
      HEAP32[$0 + 80 >> 2] = 0;
      while (1) {
       if (HEAP32[$0 + 80 >> 2] < (Math_imul(HEAPU8[343337], 3) | 0)) {
        $1 = HEAP32[$0 + 84 >> 2];
        HEAP32[$0 + 84 >> 2] = $1 + 1;
        jsvArrayBufferIteratorSetIntegerValue($0 + 88 | 0, HEAP8[$1 + 343344 | 0]);
        jsvArrayBufferIteratorNext($0 + 88 | 0);
        if (HEAP32[$0 + 84 >> 2] >= 150) {
         HEAP32[$0 + 84 >> 2] = HEAP32[$0 + 84 >> 2] - 150;
        }
        HEAP32[$0 + 80 >> 2] = HEAP32[$0 + 80 >> 2] + 1;
        continue;
       }
       break;
      }
      jsvArrayBufferIteratorFree($0 + 88 | 0);
      jsvUnLock(HEAP32[$0 + 148 >> 2]);
      jswrap_tfmicrointerpreter_invoke(HEAP32[$0 + 152 >> 2]);
      HEAP32[$0 + 148 >> 2] = jswrap_tfmicrointerpreter_getOutput(HEAP32[$0 + 152 >> 2]);
      HEAP32[$0 + 76 >> 2] = jswrap_array_slice(HEAP32[$0 + 148 >> 2], 0, 0);
      jsvUnLock2(HEAP32[$0 + 148 >> 2], HEAP32[$0 + 152 >> 2]);
      HEAP32[$0 + 72 >> 2] = jspExecuteJSFunction(118623, 0, 1, $0 + 76 | 0);
      HEAP32[$0 + 64 >> 2] = HEAP32[$0 + 72 >> 2];
      HEAP32[$0 + 68 >> 2] = HEAP32[$0 + 76 >> 2];
      jsiQueueObjectCallbacks(HEAP32[$0 + 332 >> 2], 104749, $0 - -64 | 0, 2);
      jsvUnLock2(HEAP32[$0 + 72 >> 2], HEAP32[$0 + 76 >> 2]);
     }
    }
   }
  }
  if (HEAP32[85799] & 131072) {
   HEAP32[$0 + 60 >> 2] = jsvNewFromBool(HEAP8[343494] & 1);
   jsiQueueObjectCallbacks(HEAP32[$0 + 332 >> 2], 103972, $0 + 60 | 0, 1);
   jsvUnLock(HEAP32[$0 + 60 >> 2]);
  }
  if (HEAP32[85799] & 262144) {
   HEAP32[$0 + 56 >> 2] = jsvNewFromInteger(HEAP32[85813]);
   jsiQueueObjectCallbacks(HEAP32[$0 + 332 >> 2], 101958, $0 + 56 | 0, 1);
   jsvUnLock(HEAP32[$0 + 56 >> 2]);
  }
  if (HEAP32[85799] & 16777216) {
   jsiQueueObjectCallbacks(HEAP32[$0 + 332 >> 2], 97502, 0, 0);
  }
  if (HEAP32[85799] & 33554432) {
   HEAP32[$0 + 52 >> 2] = jsvNewFromBool(HEAP8[343495] & 1);
   jsiQueueObjectCallbacks(HEAP32[$0 + 332 >> 2], 102008, $0 + 52 | 0, 1);
   jsvUnLock(HEAP32[$0 + 52 >> 2]);
  }
  if (HEAP32[85799] & 524288) {
   $1 = $0 + 44 | 0;
   HEAP32[$1 >> 2] = jsvNewFromInteger(HEAP32[85810] == 1 ? -1 : HEAP32[85810] == 2);
   HEAP32[$1 + 4 >> 2] = jsvNewFromInteger(HEAP32[85810] == 3 ? -1 : HEAP32[85810] == 4);
   HEAP32[85810] = 0;
   jsiQueueObjectCallbacks(HEAP32[$0 + 332 >> 2], 104978, $0 + 44 | 0, 2);
   jsvUnLockMany(2, $0 + 44 | 0);
  }
  if (HEAP32[85799] & 3145728) {
   HEAP32[$0 + 40 >> 2] = jsvNewFromInteger(!!(HEAP32[85799] & 1048576) | (HEAP32[85799] & 2097152 ? 2 : 0));
   jsiQueueObjectCallbacks(HEAP32[$0 + 332 >> 2], 103484, $0 + 40 | 0, 1);
   jsvUnLock(HEAP32[$0 + 40 >> 2]);
  }
 }
 jsvUnLock(HEAP32[$0 + 332 >> 2]);
 HEAP32[85799] = 0;
 if (!(HEAPU8[343320] | !HEAP32[85833])) {
  jspromise_resolve(HEAP32[85833], 0);
  jsvUnLock(HEAP32[85833]);
  HEAP32[85833] = 0;
 }
 if (!(HEAPU16[171661] | !HEAP32[85832])) {
  jspromise_resolve(HEAP32[85832], 0);
  jsvUnLock(HEAP32[85832]);
  HEAP32[85832] = 0;
 }
 __stack_pointer = $0 + 336 | 0;
 return 0;
}

function __rem_pio2_large($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 $8 = __stack_pointer - 560 | 0;
 __stack_pointer = $8;
 $7 = ($2 - 3 | 0) / 24 | 0;
 $18 = ($7 | 0) > 0 ? $7 : 0;
 $13 = Math_imul($18, -24) + $2 | 0;
 $12 = HEAP32[($4 << 2) + 150960 >> 2];
 $15 = $3 - 1 | 0;
 if (($12 + $15 | 0) >= 0) {
  $6 = $3 + $12 | 0;
  $2 = $18 - $15 | 0;
  $7 = 0;
  while (1) {
   $5 = ($2 | 0) < 0 ? 0 : +HEAP32[($2 << 2) + 150976 >> 2];
   HEAPF64[($8 + 320 | 0) + ($7 << 3) >> 3] = $5;
   $2 = $2 + 1 | 0;
   $7 = $7 + 1 | 0;
   if (($7 | 0) != ($6 | 0)) {
    continue;
   }
   break;
  }
 }
 $17 = $13 - 24 | 0;
 $6 = 0;
 $10 = ($12 | 0) > 0 ? $12 : 0;
 $11 = ($3 | 0) <= 0;
 while (1) {
  label$6: {
   if ($11) {
    $5 = 0;
    break label$6;
   }
   $7 = $6 + $15 | 0;
   $2 = 0;
   $5 = 0;
   while (1) {
    $5 = HEAPF64[($2 << 3) + $0 >> 3] * HEAPF64[($8 + 320 | 0) + ($7 - $2 << 3) >> 3] + $5;
    $2 = $2 + 1 | 0;
    if (($3 | 0) != ($2 | 0)) {
     continue;
    }
    break;
   }
  }
  HEAPF64[($6 << 3) + $8 >> 3] = $5;
  $2 = ($6 | 0) == ($10 | 0);
  $6 = $6 + 1 | 0;
  if (!$2) {
   continue;
  }
  break;
 }
 $23 = 47 - $13 | 0;
 $21 = 48 - $13 | 0;
 $24 = $13 - 25 | 0;
 $6 = $12;
 label$9: {
  while (1) {
   $5 = HEAPF64[($6 << 3) + $8 >> 3];
   $2 = 0;
   $7 = $6;
   $15 = ($6 | 0) <= 0;
   if (!$15) {
    while (1) {
     $10 = $2 << 2;
     $10 = $10 + ($8 + 480 | 0) | 0;
     $9 = $5 * 5.960464477539063e-8;
     label$14: {
      if (Math_abs($9) < 2147483648) {
       $11 = ~~$9;
       break label$14;
      }
      $11 = -2147483648;
     }
     $9 = +($11 | 0);
     $5 = $9 * -16777216 + $5;
     label$13: {
      if (Math_abs($5) < 2147483648) {
       $11 = ~~$5;
       break label$13;
      }
      $11 = -2147483648;
     }
     HEAP32[$10 >> 2] = $11;
     $7 = $7 - 1 | 0;
     $5 = HEAPF64[($7 << 3) + $8 >> 3] + $9;
     $2 = $2 + 1 | 0;
     if (($6 | 0) != ($2 | 0)) {
      continue;
     }
     break;
    }
   }
   $5 = scalbn($5, $17);
   $5 = $5 + floor($5 * .125) * -8;
   label$17: {
    if (Math_abs($5) < 2147483648) {
     $16 = ~~$5;
     break label$17;
    }
    $16 = -2147483648;
   }
   $5 = $5 - +($16 | 0);
   label$19: {
    label$20: {
     label$21: {
      $22 = ($17 | 0) <= 0;
      label$22: {
       if (!$22) {
        $7 = ($6 << 2) + $8 | 0;
        $2 = $7 + 476 | 0;
        $11 = $2;
        $2 = HEAP32[$7 + 476 >> 2];
        $7 = $2;
        $2 = $2 >> $21;
        $7 = $7 - ($2 << $21) | 0;
        HEAP32[$11 >> 2] = $7;
        $16 = $2 + $16 | 0;
        $14 = $7 >> $23;
        break label$22;
       }
       if ($17) {
        break label$21;
       }
       $14 = HEAP32[(($6 << 2) + $8 | 0) + 476 >> 2] >> 23;
      }
      if (($14 | 0) <= 0) {
       break label$19;
      }
      break label$20;
     }
     $14 = 2;
     if ($5 >= .5) {
      break label$20;
     }
     $14 = 0;
     break label$19;
    }
    $2 = 0;
    $11 = 0;
    if (!$15) {
     while (1) {
      $15 = ($8 + 480 | 0) + ($2 << 2) | 0;
      $7 = HEAP32[$15 >> 2];
      $10 = 16777215;
      label$26: {
       label$27: {
        if ($11) {
         break label$27;
        }
        $10 = 16777216;
        if ($7) {
         break label$27;
        }
        $11 = 0;
        break label$26;
       }
       HEAP32[$15 >> 2] = $10 - $7;
       $11 = 1;
      }
      $2 = $2 + 1 | 0;
      if (($6 | 0) != ($2 | 0)) {
       continue;
      }
      break;
     }
    }
    label$28: {
     if ($22) {
      break label$28;
     }
     $2 = 8388607;
     label$29: {
      switch ($24 | 0) {
      case 1:
       $2 = 4194303;
       break;

      case 0:
       break label$29;

      default:
       break label$28;
      }
     }
     $10 = ($6 << 2) + $8 | 0;
     $7 = $10 + 476 | 0;
     HEAP32[$7 >> 2] = HEAP32[$10 + 476 >> 2] & $2;
    }
    $16 = $16 + 1 | 0;
    if (($14 | 0) != 2) {
     break label$19;
    }
    $5 = 1 - $5;
    $14 = 2;
    if (!$11) {
     break label$19;
    }
    $5 = $5 - scalbn(1, $17);
   }
   if ($5 == 0) {
    $7 = 0;
    label$32: {
     $2 = $6;
     if (($12 | 0) >= ($2 | 0)) {
      break label$32;
     }
     while (1) {
      $2 = $2 - 1 | 0;
      $7 = HEAP32[($8 + 480 | 0) + ($2 << 2) >> 2] | $7;
      if (($2 | 0) > ($12 | 0)) {
       continue;
      }
      break;
     }
     if (!$7) {
      break label$32;
     }
     $13 = $17;
     while (1) {
      $13 = $13 - 24 | 0;
      $6 = $6 - 1 | 0;
      if (!HEAP32[($8 + 480 | 0) + ($6 << 2) >> 2]) {
       continue;
      }
      break;
     }
     break label$9;
    }
    $2 = 1;
    while (1) {
     $7 = $2;
     $2 = $2 + 1 | 0;
     if (!HEAP32[($8 + 480 | 0) + ($12 - $7 << 2) >> 2]) {
      continue;
     }
     break;
    }
    $10 = $6 + $7 | 0;
    while (1) {
     $7 = $3 + $6 | 0;
     $6 = $6 + 1 | 0;
     HEAPF64[($8 + 320 | 0) + ($7 << 3) >> 3] = HEAP32[($18 + $6 << 2) + 150976 >> 2];
     $2 = 0;
     $5 = 0;
     if (($3 | 0) > 0) {
      while (1) {
       $5 = HEAPF64[($2 << 3) + $0 >> 3] * HEAPF64[($8 + 320 | 0) + ($7 - $2 << 3) >> 3] + $5;
       $2 = $2 + 1 | 0;
       if (($3 | 0) != ($2 | 0)) {
        continue;
       }
       break;
      }
     }
     HEAPF64[($6 << 3) + $8 >> 3] = $5;
     if (($6 | 0) < ($10 | 0)) {
      continue;
     }
     break;
    }
    $6 = $10;
    continue;
   }
   break;
  }
  $5 = scalbn($5, 24 - $13 | 0);
  label$39: {
   if ($5 >= 16777216) {
    $3 = $6 << 2;
    $3 = $3 + ($8 + 480 | 0) | 0;
    $9 = $5 * 5.960464477539063e-8;
    label$42: {
     if (Math_abs($9) < 2147483648) {
      $2 = ~~$9;
      break label$42;
     }
     $2 = -2147483648;
    }
    $5 = +($2 | 0) * -16777216 + $5;
    label$41: {
     if (Math_abs($5) < 2147483648) {
      $7 = ~~$5;
      break label$41;
     }
     $7 = -2147483648;
    }
    HEAP32[$3 >> 2] = $7;
    $6 = $6 + 1 | 0;
    break label$39;
   }
   if (Math_abs($5) < 2147483648) {
    $2 = ~~$5;
   } else {
    $2 = -2147483648;
   }
   $13 = $17;
  }
  HEAP32[($8 + 480 | 0) + ($6 << 2) >> 2] = $2;
 }
 $5 = scalbn(1, $13);
 label$47: {
  if (($6 | 0) < 0) {
   break label$47;
  }
  $3 = $6;
  while (1) {
   $2 = $3;
   HEAPF64[($2 << 3) + $8 >> 3] = $5 * +HEAP32[($8 + 480 | 0) + ($2 << 2) >> 2];
   $3 = $2 - 1 | 0;
   $5 = $5 * 5.960464477539063e-8;
   if ($2) {
    continue;
   }
   break;
  }
  $10 = 0;
  if (($6 | 0) < 0) {
   break label$47;
  }
  $12 = ($12 | 0) > 0 ? $12 : 0;
  $7 = $6;
  while (1) {
   $0 = $10 >>> 0 > $12 >>> 0 ? $12 : $10;
   $11 = $6 - $7 | 0;
   $2 = 0;
   $5 = 0;
   while (1) {
    $5 = HEAPF64[($2 << 3) + 153744 >> 3] * HEAPF64[($2 + $7 << 3) + $8 >> 3] + $5;
    $3 = ($0 | 0) != ($2 | 0);
    $2 = $2 + 1 | 0;
    if ($3) {
     continue;
    }
    break;
   }
   HEAPF64[($8 + 160 | 0) + ($11 << 3) >> 3] = $5;
   $7 = $7 - 1 | 0;
   $2 = ($6 | 0) != ($10 | 0);
   $10 = $10 + 1 | 0;
   if ($2) {
    continue;
   }
   break;
  }
 }
 label$51: {
  label$52: {
   label$53: {
    switch ($4 | 0) {
    case 3:
     label$56: {
      if (($6 | 0) <= 0) {
       break label$56;
      }
      $5 = HEAPF64[($8 + 160 | 0) + ($6 << 3) >> 3];
      $2 = $6;
      while (1) {
       $3 = $2 - 1 | 0;
       $7 = ($8 + 160 | 0) + ($3 << 3) | 0;
       $9 = HEAPF64[$7 >> 3];
       $19 = $9;
       $9 = $9 + $5;
       HEAPF64[($8 + 160 | 0) + ($2 << 3) >> 3] = $5 + ($19 - $9);
       HEAPF64[$7 >> 3] = $9;
       $7 = $2 >>> 0 > 1;
       $5 = $9;
       $2 = $3;
       if ($7) {
        continue;
       }
       break;
      }
      if (($6 | 0) < 2) {
       break label$56;
      }
      $5 = HEAPF64[($8 + 160 | 0) + ($6 << 3) >> 3];
      $2 = $6;
      while (1) {
       $3 = $2 - 1 | 0;
       $7 = ($8 + 160 | 0) + ($3 << 3) | 0;
       $9 = HEAPF64[$7 >> 3];
       $19 = $9;
       $9 = $9 + $5;
       HEAPF64[($8 + 160 | 0) + ($2 << 3) >> 3] = $5 + ($19 - $9);
       HEAPF64[$7 >> 3] = $9;
       $7 = $2 >>> 0 > 2;
       $5 = $9;
       $2 = $3;
       if ($7) {
        continue;
       }
       break;
      }
      if (($6 | 0) <= 1) {
       break label$56;
      }
      while (1) {
       $20 = $20 + HEAPF64[($8 + 160 | 0) + ($6 << 3) >> 3];
       $2 = ($6 | 0) > 2;
       $6 = $6 - 1 | 0;
       if ($2) {
        continue;
       }
       break;
      }
     }
     $5 = HEAPF64[$8 + 160 >> 3];
     if ($14) {
      break label$52;
     }
     HEAPF64[$1 >> 3] = $5;
     $5 = HEAPF64[$8 + 168 >> 3];
     HEAPF64[$1 + 16 >> 3] = $20;
     HEAPF64[$1 + 8 >> 3] = $5;
     break label$51;

    case 0:
     $5 = 0;
     if (($6 | 0) >= 0) {
      while (1) {
       $2 = $6;
       $6 = $2 - 1 | 0;
       $5 = $5 + HEAPF64[($8 + 160 | 0) + ($2 << 3) >> 3];
       if ($2) {
        continue;
       }
       break;
      }
     }
     HEAPF64[$1 >> 3] = $14 ? -$5 : $5;
     break label$51;

    case 1:
    case 2:
     break label$53;

    default:
     break label$51;
    }
   }
   $5 = 0;
   if (($6 | 0) >= 0) {
    $3 = $6;
    while (1) {
     $2 = $3;
     $3 = $2 - 1 | 0;
     $5 = $5 + HEAPF64[($8 + 160 | 0) + ($2 << 3) >> 3];
     if ($2) {
      continue;
     }
     break;
    }
   }
   HEAPF64[$1 >> 3] = $14 ? -$5 : $5;
   $5 = HEAPF64[$8 + 160 >> 3] - $5;
   $2 = 1;
   if (($6 | 0) > 0) {
    while (1) {
     $5 = $5 + HEAPF64[($8 + 160 | 0) + ($2 << 3) >> 3];
     $3 = ($2 | 0) != ($6 | 0);
     $2 = $2 + 1 | 0;
     if ($3) {
      continue;
     }
     break;
    }
   }
   HEAPF64[$1 + 8 >> 3] = $14 ? -$5 : $5;
   break label$51;
  }
  HEAPF64[$1 >> 3] = -$5;
  $5 = HEAPF64[$8 + 168 >> 3];
  HEAPF64[$1 + 16 >> 3] = -$20;
  HEAPF64[$1 + 8 >> 3] = -$5;
 }
 __stack_pointer = $8 + 560 | 0;
 return $16 & 7;
}

function jspeStatementFor() {
 var $0 = 0, $1 = 0, $2 = 0;
 $0 = __stack_pointer - 432 | 0;
 __stack_pointer = $0;
 jslGetNextToken();
 label$1: {
  if (!(jslMatch(40) & 1)) {
   break label$1;
  }
  HEAP8[$0 + 427 | 0] = (HEAP32[46755] & 512) != 0;
  HEAP32[46755] = HEAP32[46755] | 256;
  HEAP32[$0 + 420 >> 2] = jspeBlockStart();
  HEAP32[$0 + 416 >> 2] = 0;
  HEAP8[$0 + 415 | 0] = HEAP16[HEAP32[38615] + 2 >> 1] == 174;
  if (HEAP16[HEAP32[38615] + 2 >> 1] != 59) {
   HEAP32[$0 + 416 >> 2] = jspeStatement();
  }
  if (jspIsInterrupted() & 1) {
   jsvUnLock(HEAP32[$0 + 416 >> 2]);
   jspeBlockEnd(HEAP32[$0 + 420 >> 2]);
   break label$1;
  }
  HEAP32[46755] = HEAP32[46755] & -257;
  label$5: {
   if (!(HEAP16[HEAP32[38615] + 2 >> 1] != 185 & HEAP16[HEAP32[38615] + 2 >> 1] != 198)) {
    HEAP8[$0 + 414 | 0] = HEAP16[HEAP32[38615] + 2 >> 1] == 198;
    label$8: {
     if ((HEAP32[46755] & 63) != 1) {
      break label$8;
     }
     if (jsvIsName(HEAP32[$0 + 416 >> 2]) & 1) {
      break label$8;
     }
     jsvUnLock(HEAP32[$0 + 416 >> 2]);
     $1 = HEAP8[$0 + 414 | 0] & 1;
     HEAP32[$0 + 20 >> 2] = HEAP32[$0 + 416 >> 2];
     HEAP32[$0 + 16 >> 2] = $1 ? 104048 : 102506;
     jsExceptionHere(1, 98280, $0 + 16 | 0);
     jspeBlockEnd(HEAP32[$0 + 420 >> 2]);
     break label$1;
    }
    jslGetNextToken();
    HEAP32[$0 + 408 >> 2] = jsvSkipNameAndUnLock(jspeExpression());
    jslCharPosFromLex($0 + 368 | 0);
    if (!(jslMatch(41) & 1)) {
     jsvUnLock2(HEAP32[$0 + 416 >> 2], HEAP32[$0 + 408 >> 2]);
     jslCharPosFree($0 + 368 | 0);
     jspeBlockEnd(HEAP32[$0 + 420 >> 2]);
     break label$1;
    }
    HEAP32[$0 + 364 >> 2] = HEAP32[46755];
    jspSetNoExecute();
    HEAP32[46755] = HEAP32[46755] | 512;
    jsvUnLock(jspeBlockOrStatement());
    jslCharPosNew($0 + 320 | 0, HEAP32[HEAP32[38615] + 84 >> 2], HEAP32[HEAP32[38615] + 4 >> 2]);
    if (!(HEAP8[$0 + 427 | 0] & 1)) {
     HEAP32[46755] = HEAP32[46755] & -513;
    }
    HEAP32[46755] = HEAP32[46755] & -1664 | HEAP32[$0 + 364 >> 2] & 1663;
    if ((HEAP32[46755] & 63) == 1) {
     label$12: {
      if (jsvIsIterable(HEAP32[$0 + 408 >> 2]) & 1) {
       HEAP32[$0 + 316 >> 2] = jsvGetInternalFunctionCheckerFor(HEAP32[$0 + 408 >> 2]);
       HEAP32[$0 + 312 >> 2] = 0;
       if (!(HEAP8[$0 + 414 | 0] & 1)) {
        HEAP32[$0 + 312 >> 2] = jspGetBuiltinPrototype(HEAP32[$0 + 408 >> 2]);
       }
       jsvIteratorNew($0 + 248 | 0, HEAP32[$0 + 408 >> 2], HEAP8[$0 + 414 | 0] & 1);
       HEAP8[$0 + 247 | 0] = 0;
       while (1) {
        $1 = 0;
        label$16: {
         if ((HEAP32[46755] & 63) != 1) {
          break label$16;
         }
         $1 = 0;
         if (!(jsvIteratorHasElement($0 + 248 | 0) & 1)) {
          break label$16;
         }
         $1 = HEAPU8[$0 + 247 | 0] ^ -1;
        }
        if ($1 & 1) {
         HEAP32[$0 + 240 >> 2] = jsvIteratorGetKey($0 + 248 | 0);
         HEAP8[$0 + 239 | 0] = 0;
         label$18: {
          if (!HEAP32[$0 + 316 >> 2]) {
           break label$18;
          }
          if (!(FUNCTION_TABLE[HEAP32[$0 + 316 >> 2]](HEAP32[$0 + 240 >> 2]) & 1)) {
           break label$18;
          }
          HEAP8[$0 + 239 | 0] = 1;
          label$19: {
           if (HEAP8[$0 + 414 | 0] & 1) {
            break label$19;
           }
           if (!(jsvIsString(HEAP32[$0 + 240 >> 2]) & 1)) {
            break label$19;
           }
           if (!(jsvIsStringEqual(HEAP32[$0 + 240 >> 2], 107914) & 1)) {
            break label$19;
           }
           HEAP32[$0 + 312 >> 2] = jsvSkipName(HEAP32[$0 + 240 >> 2]);
          }
         }
         if (!(HEAP8[$0 + 239 | 0] & 1)) {
          label$21: {
           if (HEAP8[$0 + 414 | 0] & 1) {
            HEAP32[$0 + 232 >> 2] = jsvIteratorGetValue($0 + 248 | 0);
            break label$21;
           }
           HEAP32[$0 + 232 >> 2] = jsvAsString(HEAP32[$0 + 240 >> 2]);
          }
          if (HEAP32[$0 + 232 >> 2] ? 1 : HEAP8[$0 + 414 | 0] & 1) {
           if (HEAP8[$0 + 415 | 0] & 1) {
            $1 = HEAP32[$0 + 416 >> 2];
            $2 = (HEAPU8[$1 + 11 | 0] | HEAPU8[$1 + 12 | 0] << 8) & -65;
            HEAP8[$1 + 11 | 0] = $2;
            HEAP8[$1 + 12 | 0] = $2 >>> 8;
           }
           jsvReplaceWithOrAddToRoot(HEAP32[$0 + 416 >> 2], HEAP32[$0 + 232 >> 2]);
           if (HEAP8[$0 + 415 | 0] & 1) {
            $1 = HEAP32[$0 + 416 >> 2];
            $2 = HEAPU8[$1 + 11 | 0] | HEAPU8[$1 + 12 | 0] << 8 | 64;
            HEAP8[$1 + 11 | 0] = $2;
            HEAP8[$1 + 12 | 0] = $2 >>> 8;
           }
           jsvUnLock(HEAP32[$0 + 232 >> 2]);
           jslSeekToP($0 + 368 | 0);
           HEAP32[46755] = HEAP32[46755] | 512;
           jspDebuggerLoopIfCtrlC();
           jsvUnLock(jspeBlockOrStatement());
           if (!(HEAP8[$0 + 427 | 0] & 1)) {
            HEAP32[46755] = HEAP32[46755] & -513;
           }
           HEAP8[$0 + 247 | 0] = jspeCheckBreakContinue() & 1 | HEAP8[$0 + 247 | 0] & 1;
          }
         }
         jsvIteratorNext($0 + 248 | 0);
         jsvUnLock(HEAP32[$0 + 240 >> 2]);
         if (!(jsvIteratorHasElement($0 + 248 | 0) & 1 | HEAP8[$0 + 414 | 0] & 1 | !HEAP32[$0 + 312 >> 2])) {
          jsvIteratorFree($0 + 248 | 0);
          HEAP32[$0 + 228 >> 2] = HEAP32[$0 + 312 >> 2];
          jsvIteratorNew($0 + 248 | 0, HEAP32[$0 + 228 >> 2], 0);
          HEAP32[$0 + 316 >> 2] = jsvGetInternalFunctionCheckerFor(HEAP32[$0 + 228 >> 2]);
          HEAP32[$0 + 312 >> 2] = jspGetBuiltinPrototype(HEAP32[$0 + 228 >> 2]);
          jsvUnLock(HEAP32[$0 + 228 >> 2]);
         }
         continue;
        }
        break;
       }
       jsvUnLock(HEAP32[$0 + 312 >> 2]);
       jsvIteratorFree($0 + 248 | 0);
       break label$12;
      }
      if (!(jsvIsUndefined(HEAP32[$0 + 408 >> 2]) & 1)) {
       HEAP32[$0 >> 2] = HEAP32[$0 + 408 >> 2];
       jsExceptionHere(1, 98214, $0);
      }
     }
    }
    jslSeekToP($0 + 320 | 0);
    jslCharPosFree($0 + 368 | 0);
    jslCharPosFree($0 + 320 | 0);
    jsvUnLock2(HEAP32[$0 + 416 >> 2], HEAP32[$0 + 408 >> 2]);
    break label$5;
   }
   HEAP8[$0 + 227 | 0] = 1;
   HEAP8[$0 + 226 | 0] = 0;
   jsvUnLock(HEAP32[$0 + 416 >> 2]);
   jslCharPosFromLex($0 + 184 | 0);
   if (!(jslMatch(59) & 1)) {
    jslCharPosFree($0 + 184 | 0);
    jspeBlockEnd(HEAP32[$0 + 420 >> 2]);
    jspeBlockEnd(HEAP32[$0 + 420 >> 2]);
    break label$1;
   }
   if (HEAP16[HEAP32[38615] + 2 >> 1] != 59) {
    HEAP32[$0 + 180 >> 2] = jspeExpression();
    if ((HEAP32[46755] & 63) == 1) {
     $1 = jsvGetBoolAndUnLock(jsvSkipName(HEAP32[$0 + 180 >> 2]));
    }
    HEAP8[$0 + 227 | 0] = $1 & 1;
    jsvUnLock(HEAP32[$0 + 180 >> 2]);
   }
   jslCharPosFromLex($0 + 136 | 0);
   if (!(jslMatch(59) & 1)) {
    jslCharPosFree($0 + 184 | 0);
    jslCharPosFree($0 + 136 | 0);
    jspeBlockEnd(HEAP32[$0 + 420 >> 2]);
    break label$1;
   }
   if (HEAP16[HEAP32[38615] + 2 >> 1] != 41) {
    HEAP32[$0 + 132 >> 2] = HEAP32[46755];
    jspSetNoExecute();
    jsvUnLock(jspeExpression());
    HEAP32[46755] = HEAP32[46755] & -1664 | HEAP32[$0 + 132 >> 2] & 1663;
   }
   jslSkipWhiteSpace();
   jslCharPosFromLex($0 + 88 | 0);
   if (!(jslMatch(41) & 1)) {
    jslCharPosFree($0 + 184 | 0);
    jslCharPosFree($0 + 136 | 0);
    jslCharPosFree($0 + 88 | 0);
    jspeBlockEnd(HEAP32[$0 + 420 >> 2]);
    break label$1;
   }
   HEAP32[$0 + 84 >> 2] = HEAP32[46755];
   if (!(HEAP8[$0 + 227 | 0] & 1)) {
    jspSetNoExecute();
   }
   HEAP32[46755] = HEAP32[46755] | 512;
   jsvUnLock(jspeBlockOrStatement());
   jslSkipWhiteSpace();
   jslCharPosNew($0 + 40 | 0, HEAP32[HEAP32[38615] + 84 >> 2], HEAP32[HEAP32[38615] + 4 >> 2]);
   if (!(HEAP8[$0 + 427 | 0] & 1)) {
    HEAP32[46755] = HEAP32[46755] & -513;
   }
   if (!(!(HEAP8[$0 + 227 | 0] & 1) & (HEAP32[46755] & 63) == 1)) {
    HEAP8[$0 + 226 | 0] = jspeCheckBreakContinue() & 1 | HEAP8[$0 + 226 | 0] & 1;
    if (HEAP8[$0 + 226 | 0] & 1) {
     HEAP8[$0 + 227 | 0] = 0;
    }
   }
   if (!(HEAP8[$0 + 227 | 0] & 1)) {
    HEAP32[46755] = HEAP32[46755] & -1664 | HEAP32[$0 + 84 >> 2] & 1663;
   }
   if (HEAP8[$0 + 227 | 0] & 1) {
    jslSeekToP($0 + 136 | 0);
    if (HEAP16[HEAP32[38615] + 2 >> 1] != 41) {
     jsvUnLock(jspeExpression());
    }
   }
   while (1) {
    $1 = 0;
    label$45: {
     if (HEAP8[$0 + 226 | 0] & 1) {
      break label$45;
     }
     $1 = 0;
     if ((HEAP32[46755] & 63) != 1) {
      break label$45;
     }
     $1 = HEAPU8[$0 + 227 | 0];
    }
    if ($1 & 1) {
     jslSeekToP($0 + 184 | 0);
     label$47: {
      if (HEAP16[HEAP32[38615] + 2 >> 1] == 59) {
       HEAP8[$0 + 227 | 0] = 1;
       break label$47;
      }
      HEAP32[$0 + 36 >> 2] = jspeExpression();
      HEAP8[$0 + 227 | 0] = jsvGetBoolAndUnLock(jsvSkipName(HEAP32[$0 + 36 >> 2])) & 1;
      jsvUnLock(HEAP32[$0 + 36 >> 2]);
     }
     if (!(!(HEAP8[$0 + 227 | 0] & 1) | (HEAP32[46755] & 63) != 1)) {
      jslSeekToP($0 + 88 | 0);
      HEAP32[46755] = HEAP32[46755] | 512;
      jspDebuggerLoopIfCtrlC();
      jsvUnLock(jspeBlockOrStatement());
      if (!(HEAP8[$0 + 427 | 0] & 1)) {
       HEAP32[46755] = HEAP32[46755] & -513;
      }
      HEAP8[$0 + 226 | 0] = jspeCheckBreakContinue() & 1 | HEAP8[$0 + 226 | 0] & 1;
     }
     if (!(HEAP8[$0 + 226 | 0] & 1 | (!(HEAP8[$0 + 227 | 0] & 1) | (HEAP32[46755] & 63) != 1))) {
      jslSeekToP($0 + 136 | 0);
      if (HEAP16[HEAP32[38615] + 2 >> 1] != 41) {
       jsvUnLock(jspeExpression());
      }
     }
     continue;
    }
    break;
   }
   jslSeekToP($0 + 40 | 0);
   jslCharPosFree($0 + 184 | 0);
   jslCharPosFree($0 + 136 | 0);
   jslCharPosFree($0 + 88 | 0);
   jslCharPosFree($0 + 40 | 0);
  }
  jspeBlockEnd(HEAP32[$0 + 420 >> 2]);
 }
 HEAP32[$0 + 428 >> 2] = 0;
 __stack_pointer = $0 + 432 | 0;
 return HEAP32[$0 + 428 >> 2];
}

function jswrap_graphics_toColor($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = __stack_pointer - 304 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 296 >> 2] = $0;
 HEAP32[$4 + 292 >> 2] = $1;
 HEAP32[$4 + 288 >> 2] = $2;
 HEAP32[$4 + 284 >> 2] = $3;
 label$1: {
  if (!(graphicsGetFromVar($4 + 208 | 0, HEAP32[$4 + 296 >> 2]) & 1)) {
   HEAP32[$4 + 300 >> 2] = 0;
   break label$1;
  }
  HEAP32[$4 + 204 >> 2] = 0;
  label$3: {
   if (jsvIsString(HEAP32[$4 + 292 >> 2]) & 1) {
    $1 = $4 + 167 | 0;
    HEAP8[$1 | 0] = 0;
    HEAP8[$1 + 1 | 0] = 0;
    HEAP8[$1 + 2 | 0] = 0;
    HEAP8[$1 + 3 | 0] = 0;
    HEAP8[$1 + 4 | 0] = 0;
    HEAP8[$1 + 5 | 0] = 0;
    HEAP8[$1 + 6 | 0] = 0;
    HEAP8[$1 + 7 | 0] = 0;
    HEAP8[$1 + 8 | 0] = 0;
    jsvGetString(HEAP32[$4 + 292 >> 2], $4 + 167 | 0, 9);
    label$5: {
     if (!HEAP8[$4 + 171 | 0]) {
      HEAPF64[$4 + 192 >> 3] = +(chtod(HEAP8[$4 + 168 | 0]) | 0) / 15;
      HEAPF64[$4 + 184 >> 3] = +(chtod(HEAP8[$4 + 169 | 0]) | 0) / 15;
      HEAPF64[$4 + 176 >> 3] = +(chtod(HEAP8[$4 + 170 | 0]) | 0) / 15;
      break label$5;
     }
     HEAPF64[$4 + 192 >> 3] = +(hexToByte(HEAP8[$4 + 168 | 0], HEAP8[$4 + 169 | 0]) | 0) / 255;
     HEAPF64[$4 + 184 >> 3] = +(hexToByte(HEAP8[$4 + 170 | 0], HEAP8[$4 + 171 | 0]) | 0) / 255;
     HEAPF64[$4 + 176 >> 3] = +(hexToByte(HEAP8[$4 + 172 | 0], HEAP8[$4 + 173 | 0]) | 0) / 255;
    }
    label$7: {
     if (!(HEAPF64[$4 + 192 >> 3] < 0 | HEAPF64[$4 + 184 >> 3] < 0 | HEAPF64[$4 + 176 >> 3] < 0)) {
      if (!HEAP8[$4 + 174 | 0]) {
       break label$7;
      }
     }
     jsExceptionHere(1, 126875, 0);
     HEAP32[$4 + 300 >> 2] = 0;
     break label$1;
    }
    break label$3;
   }
   HEAPF64[$4 + 192 >> 3] = jsvGetFloat(HEAP32[$4 + 292 >> 2]);
   HEAPF64[$4 + 184 >> 3] = jsvGetFloat(HEAP32[$4 + 288 >> 2]);
   HEAPF64[$4 + 176 >> 3] = jsvGetFloat(HEAP32[$4 + 284 >> 2]);
  }
  $1 = __DOUBLE_BITS_11(HEAPF64[$4 + 192 >> 3]);
  $0 = $1;
  $1 = i64toi32_i32$HIGH_BITS;
  $1 = $1 & 2147483647;
  label$9: {
   label$10: {
    if (($1 | 0) == 2146435072 | $1 >>> 0 > 2146435072) {
     break label$10;
    }
    $1 = __DOUBLE_BITS_11(HEAPF64[$4 + 184 >> 3]);
    $0 = $1;
    $1 = i64toi32_i32$HIGH_BITS;
    $1 = $1 & 2147483647;
    if (($1 | 0) == 2146435072 | $1 >>> 0 > 2146435072) {
     break label$10;
    }
    $1 = __DOUBLE_BITS_11(HEAPF64[$4 + 176 >> 3]);
    $0 = $1;
    $1 = i64toi32_i32$HIGH_BITS;
    $1 = $1 & 2147483647;
    if (($1 | 0) == 2146435072 | $1 >>> 0 > 2146435072) {
     break label$10;
    }
    $5 = HEAPF64[$4 + 192 >> 3] * 256;
    label$14: {
     if (Math_abs($5) < 2147483648) {
      $0 = ~~$5;
      break label$14;
     }
     $0 = -2147483648;
    }
    HEAP32[$4 + 160 >> 2] = $0;
    $5 = HEAPF64[$4 + 184 >> 3] * 256;
    label$16: {
     if (Math_abs($5) < 2147483648) {
      $0 = ~~$5;
      break label$16;
     }
     $0 = -2147483648;
    }
    HEAP32[$4 + 156 >> 2] = $0;
    $5 = HEAPF64[$4 + 176 >> 3] * 256;
    label$18: {
     if (Math_abs($5) < 2147483648) {
      $0 = ~~$5;
      break label$18;
     }
     $0 = -2147483648;
    }
    HEAP32[$4 + 152 >> 2] = $0;
    if (HEAP32[$4 + 160 >> 2] > 255) {
     HEAP32[$4 + 160 >> 2] = 255;
    }
    if (HEAP32[$4 + 156 >> 2] > 255) {
     HEAP32[$4 + 156 >> 2] = 255;
    }
    if (HEAP32[$4 + 152 >> 2] > 255) {
     HEAP32[$4 + 152 >> 2] = 255;
    }
    if (HEAP32[$4 + 160 >> 2] < 0) {
     HEAP32[$4 + 160 >> 2] = 0;
    }
    if (HEAP32[$4 + 156 >> 2] < 0) {
     HEAP32[$4 + 156 >> 2] = 0;
    }
    if (HEAP32[$4 + 152 >> 2] < 0) {
     HEAP32[$4 + 152 >> 2] = 0;
    }
    HEAP32[$4 + 148 >> 2] = (HEAPU8[$4 + 216 | 0] | HEAPU8[$4 + 217 | 0] << 8 | (HEAPU8[$4 + 218 | 0] << 16 | HEAPU8[$4 + 219 | 0] << 24)) & 896;
    if (HEAP32[$4 + 148 >> 2]) {
     HEAP32[$4 + 144 >> 2] = HEAP32[$4 + 160 >> 2];
     HEAP32[$4 + 140 >> 2] = HEAP32[$4 + 156 >> 2];
     HEAP32[$4 + 136 >> 2] = HEAP32[$4 + 152 >> 2];
     label$27: {
      label$28: {
       label$29: {
        label$30: {
         label$31: {
          $0 = HEAP32[$4 + 148 >> 2];
          if (($0 | 0) != 128) {
           if (($0 | 0) == 256) {
            break label$31;
           }
           if (($0 | 0) == 384) {
            break label$30;
           }
           if (($0 | 0) == 512) {
            break label$29;
           }
           if (($0 | 0) == 640) {
            break label$28;
           }
           break label$27;
          }
          HEAP32[$4 + 160 >> 2] = HEAP32[$4 + 136 >> 2];
          HEAP32[$4 + 156 >> 2] = HEAP32[$4 + 144 >> 2];
          HEAP32[$4 + 152 >> 2] = HEAP32[$4 + 140 >> 2];
          break label$27;
         }
         HEAP32[$4 + 160 >> 2] = HEAP32[$4 + 136 >> 2];
         HEAP32[$4 + 152 >> 2] = HEAP32[$4 + 144 >> 2];
         break label$27;
        }
        HEAP32[$4 + 160 >> 2] = HEAP32[$4 + 140 >> 2];
        HEAP32[$4 + 156 >> 2] = HEAP32[$4 + 136 >> 2];
        HEAP32[$4 + 152 >> 2] = HEAP32[$4 + 144 >> 2];
        break label$27;
       }
       HEAP32[$4 + 160 >> 2] = HEAP32[$4 + 140 >> 2];
       HEAP32[$4 + 156 >> 2] = HEAP32[$4 + 144 >> 2];
       break label$27;
      }
      HEAP32[$4 + 156 >> 2] = HEAP32[$4 + 136 >> 2];
      HEAP32[$4 + 152 >> 2] = HEAP32[$4 + 140 >> 2];
     }
    }
    label$33: {
     if (HEAPU8[$4 + 224 | 0] == 16) {
      HEAP32[$4 + 204 >> 2] = HEAP32[$4 + 156 >> 2] >> 2 << 5 | HEAP32[$4 + 152 >> 2] >> 3 | HEAP32[$4 + 160 >> 2] >> 3 << 11;
      break label$33;
     }
     label$35: {
      if (HEAPU8[$4 + 224 | 0] == 32) {
       HEAP32[$4 + 204 >> 2] = HEAP32[$4 + 152 >> 2] | HEAP32[$4 + 156 >> 2] << 8 | HEAP32[$4 + 160 >> 2] << 16 | -16777216;
       break label$35;
      }
      label$37: {
       if (HEAPU8[$4 + 224 | 0] == 24) {
        HEAP32[$4 + 204 >> 2] = HEAP32[$4 + 152 >> 2] | HEAP32[$4 + 156 >> 2] << 8 | HEAP32[$4 + 160 >> 2] << 16;
        break label$37;
       }
       label$39: {
        if (HEAPU8[$4 + 224 | 0] == 4) {
         HEAP32[$4 + 132 >> 2] = 2147483647;
         HEAP32[$4 + 204 >> 2] = 0;
         HEAP32[$4 + 128 >> 2] = 0;
         while (1) {
          if (HEAPU32[$4 + 128 >> 2] < 16) {
           HEAP32[$4 + 124 >> 2] = HEAPU16[(HEAP32[$4 + 128 >> 2] << 1) + 146768 >> 1];
           HEAP32[$4 + 120 >> 2] = HEAP32[$4 + 124 >> 2] >> 8 & 248;
           HEAP32[$4 + 116 >> 2] = HEAP32[$4 + 124 >> 2] >> 3 & 252;
           HEAP32[$4 + 112 >> 2] = HEAP32[$4 + 124 >> 2] << 3 & 248;
           HEAP32[$4 + 120 >> 2] = HEAP32[$4 + 120 >> 2] | HEAP32[$4 + 120 >> 2] >> 5;
           HEAP32[$4 + 116 >> 2] = HEAP32[$4 + 116 >> 2] | HEAP32[$4 + 112 >> 2] >> 6;
           HEAP32[$4 + 112 >> 2] = HEAP32[$4 + 112 >> 2] | HEAP32[$4 + 112 >> 2] >> 5;
           HEAP32[$4 + 108 >> 2] = HEAP32[$4 + 120 >> 2] - HEAP32[$4 + 160 >> 2];
           HEAP32[$4 + 104 >> 2] = HEAP32[$4 + 116 >> 2] - HEAP32[$4 + 156 >> 2];
           HEAP32[$4 + 100 >> 2] = HEAP32[$4 + 112 >> 2] - HEAP32[$4 + 152 >> 2];
           HEAP32[$4 + 96 >> 2] = (Math_imul(HEAP32[$4 + 108 >> 2], HEAP32[$4 + 108 >> 2]) + Math_imul(HEAP32[$4 + 104 >> 2], HEAP32[$4 + 104 >> 2]) | 0) + Math_imul(HEAP32[$4 + 100 >> 2], HEAP32[$4 + 100 >> 2]);
           if (HEAP32[$4 + 96 >> 2] < HEAP32[$4 + 132 >> 2]) {
            HEAP32[$4 + 132 >> 2] = HEAP32[$4 + 96 >> 2];
            HEAP32[$4 + 204 >> 2] = HEAP32[$4 + 128 >> 2];
           }
           HEAP32[$4 + 128 >> 2] = HEAP32[$4 + 128 >> 2] + 1;
           continue;
          }
          break;
         }
         break label$39;
        }
        label$44: {
         if (HEAPU8[$4 + 224 | 0] == 8) {
          HEAP32[$4 + 92 >> 2] = 2147483647;
          HEAP32[$4 + 204 >> 2] = 0;
          HEAP32[$4 + 88 >> 2] = 0;
          while (1) {
           if (HEAP32[$4 + 88 >> 2] < 255) {
            HEAP32[$4 + 84 >> 2] = HEAPU16[(HEAP32[$4 + 88 >> 2] << 1) + 146800 >> 1];
            HEAP32[$4 + 80 >> 2] = HEAP32[$4 + 84 >> 2] >> 8 & 248;
            HEAP32[$4 + 76 >> 2] = HEAP32[$4 + 84 >> 2] >> 3 & 252;
            HEAP32[$4 + 72 >> 2] = HEAP32[$4 + 84 >> 2] << 3 & 248;
            HEAP32[$4 + 80 >> 2] = HEAP32[$4 + 80 >> 2] | HEAP32[$4 + 80 >> 2] >> 5;
            HEAP32[$4 + 76 >> 2] = HEAP32[$4 + 76 >> 2] | HEAP32[$4 + 72 >> 2] >> 6;
            HEAP32[$4 + 72 >> 2] = HEAP32[$4 + 72 >> 2] | HEAP32[$4 + 72 >> 2] >> 5;
            HEAP32[$4 + 68 >> 2] = HEAP32[$4 + 80 >> 2] - HEAP32[$4 + 160 >> 2];
            HEAP32[$4 + 64 >> 2] = HEAP32[$4 + 76 >> 2] - HEAP32[$4 + 156 >> 2];
            HEAP32[$4 + 60 >> 2] = HEAP32[$4 + 72 >> 2] - HEAP32[$4 + 152 >> 2];
            HEAP32[$4 + 56 >> 2] = (Math_imul(HEAP32[$4 + 68 >> 2], HEAP32[$4 + 68 >> 2]) + Math_imul(HEAP32[$4 + 64 >> 2], HEAP32[$4 + 64 >> 2]) | 0) + Math_imul(HEAP32[$4 + 60 >> 2], HEAP32[$4 + 60 >> 2]);
            if (HEAP32[$4 + 56 >> 2] < HEAP32[$4 + 92 >> 2]) {
             HEAP32[$4 + 92 >> 2] = HEAP32[$4 + 56 >> 2];
             HEAP32[$4 + 204 >> 2] = HEAP32[$4 + 88 >> 2];
            }
            HEAP32[$4 + 88 >> 2] = HEAP32[$4 + 88 >> 2] + 1;
            continue;
           }
           break;
          }
          break label$44;
         }
         HEAP32[$4 + 204 >> 2] = (HEAP32[$4 + 152 >> 2] + (HEAP32[$4 + 160 >> 2] + HEAP32[$4 + 156 >> 2] | 0) | 0) >= 384 ? -1 : 0;
        }
       }
      }
     }
    }
    break label$9;
   }
   HEAP32[$4 + 204 >> 2] = jsvGetInteger(HEAP32[$4 + 292 >> 2]);
  }
  HEAP32[$4 + 300 >> 2] = HEAP32[$4 + 204 >> 2];
 }
 __stack_pointer = $4 + 304 | 0;
 return HEAP32[$4 + 300 >> 2];
}

function jswrap_graphics_asBMP_X($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 240 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 232 >> 2] = $0;
 HEAP8[$2 + 231 | 0] = $1;
 label$1: {
  if (!(graphicsGetFromVar($2 + 152 | 0, HEAP32[$2 + 232 >> 2]) & 1)) {
   HEAP32[$2 + 236 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 148 >> 2] = graphicsGetWidth($2 + 152 | 0) & 65535;
  HEAP32[$2 + 144 >> 2] = graphicsGetHeight($2 + 152 | 0) & 65535;
  HEAP32[$2 + 140 >> 2] = HEAPU8[$2 + 168 | 0];
  HEAP32[$2 + 136 >> 2] = HEAP32[$2 + 140 >> 2];
  label$3: {
   if (!(HEAP32[$2 + 136 >> 2] <= 1 | HEAP32[$2 + 136 >> 2] >= 4)) {
    HEAP32[$2 + 136 >> 2] = 4;
    break label$3;
   }
   if (!(HEAP32[$2 + 136 >> 2] <= 4 | HEAP32[$2 + 136 >> 2] >= 8)) {
    HEAP32[$2 + 136 >> 2] = 8;
   }
  }
  HEAP8[$2 + 135 | 0] = HEAP32[$2 + 136 >> 2] <= 8;
  HEAP32[$2 + 128 >> 2] = Math_imul(HEAP32[$2 + 148 >> 2], HEAP32[$2 + 136 >> 2]) + 31 >> 5 << 2;
  if (HEAP8[$2 + 135 | 0] & 1) {
   $0 = 1 << HEAP32[$2 + 136 >> 2];
  } else {
   $0 = 0;
  }
  HEAP32[$2 + 124 >> 2] = $0;
  HEAP32[$2 + 120 >> 2] = Math_imul(HEAP32[$2 + 124 >> 2], 3) + 26;
  HEAP32[$2 + 116 >> 2] = HEAP32[$2 + 120 >> 2] + Math_imul(HEAP32[$2 + 144 >> 2], HEAP32[$2 + 128 >> 2]);
  if (HEAP8[$2 + 231 | 0] & 1) {
   $0 = HEAP32[$2 + 120 >> 2] + HEAP32[$2 + 128 >> 2] | 0;
  } else {
   $0 = HEAP32[$2 + 116 >> 2];
  }
  HEAP32[$2 + 112 >> 2] = $0;
  HEAP32[$2 + 108 >> 2] = jsvNewFlatStringOfLength(HEAP32[$2 + 112 >> 2]);
  if (!HEAP32[$2 + 108 >> 2]) {
   HEAP32[$2 + 236 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 104 >> 2] = jsvGetFlatStringPointer(HEAP32[$2 + 108 >> 2]);
  HEAP8[HEAP32[$2 + 104 >> 2]] = 66;
  HEAP8[HEAP32[$2 + 104 >> 2] + 1 | 0] = 77;
  HEAP8[HEAP32[$2 + 104 >> 2] + 2 | 0] = HEAP32[$2 + 116 >> 2];
  HEAP8[HEAP32[$2 + 104 >> 2] + 3 | 0] = HEAP32[$2 + 116 >> 2] >> 8;
  HEAP8[HEAP32[$2 + 104 >> 2] + 10 | 0] = HEAP32[$2 + 120 >> 2];
  HEAP8[HEAP32[$2 + 104 >> 2] + 14 | 0] = 12;
  HEAP8[HEAP32[$2 + 104 >> 2] + 18 | 0] = HEAP32[$2 + 148 >> 2];
  HEAP8[HEAP32[$2 + 104 >> 2] + 19 | 0] = HEAP32[$2 + 148 >> 2] >> 8;
  HEAP8[HEAP32[$2 + 104 >> 2] + 20 | 0] = HEAP32[$2 + 144 >> 2];
  HEAP8[HEAP32[$2 + 104 >> 2] + 21 | 0] = HEAP32[$2 + 144 >> 2] >> 8;
  HEAP8[HEAP32[$2 + 104 >> 2] + 22 | 0] = 1;
  HEAP8[HEAP32[$2 + 104 >> 2] + 24 | 0] = HEAP32[$2 + 136 >> 2];
  if (HEAP8[$2 + 135 | 0] & 1) {
   label$12: {
    if (HEAP32[$2 + 136 >> 2] == 1) {
     HEAP8[HEAP32[$2 + 104 >> 2] + 26 | 0] = 255;
     HEAP8[HEAP32[$2 + 104 >> 2] + 27 | 0] = 255;
     HEAP8[HEAP32[$2 + 104 >> 2] + 28 | 0] = 255;
     break label$12;
    }
    label$14: {
     if (HEAP32[$2 + 140 >> 2] == 3) {
      HEAP32[$2 + 100 >> 2] = 0;
      while (1) {
       if (HEAP32[$2 + 100 >> 2] < HEAP32[$2 + 124 >> 2]) {
        HEAP8[HEAP32[$2 + 104 >> 2] + (Math_imul(HEAP32[$2 + 100 >> 2], 3) + 26 | 0) | 0] = HEAP32[$2 + 100 >> 2] & 1 ? 255 : 0;
        HEAP8[HEAP32[$2 + 104 >> 2] + (Math_imul(HEAP32[$2 + 100 >> 2], 3) + 27 | 0) | 0] = HEAP32[$2 + 100 >> 2] & 2 ? 255 : 0;
        HEAP8[HEAP32[$2 + 104 >> 2] + (Math_imul(HEAP32[$2 + 100 >> 2], 3) + 28 | 0) | 0] = HEAP32[$2 + 100 >> 2] & 4 ? 255 : 0;
        HEAP32[$2 + 100 >> 2] = HEAP32[$2 + 100 >> 2] + 1;
        continue;
       }
       break;
      }
      break label$14;
     }
     label$18: {
      if (HEAP32[$2 + 140 >> 2] == 4) {
       HEAP32[$2 + 96 >> 2] = 0;
       while (1) {
        if (HEAP32[$2 + 96 >> 2] < 16) {
         HEAP32[$2 + 92 >> 2] = HEAPU16[(HEAP32[$2 + 96 >> 2] << 1) + 146768 >> 1];
         HEAP8[HEAP32[$2 + 104 >> 2] + (Math_imul(HEAP32[$2 + 96 >> 2], 3) + 26 | 0) | 0] = HEAP32[$2 + 92 >> 2] << 3 & 248;
         HEAP8[HEAP32[$2 + 104 >> 2] + (Math_imul(HEAP32[$2 + 96 >> 2], 3) + 27 | 0) | 0] = HEAP32[$2 + 92 >> 2] >> 3 & 252;
         HEAP8[HEAP32[$2 + 104 >> 2] + (Math_imul(HEAP32[$2 + 96 >> 2], 3) + 28 | 0) | 0] = HEAP32[$2 + 92 >> 2] >> 8 & 248;
         HEAP32[$2 + 96 >> 2] = HEAP32[$2 + 96 >> 2] + 1;
         continue;
        }
        break;
       }
       break label$18;
      }
      label$22: {
       if (HEAP32[$2 + 140 >> 2] == 8) {
        HEAP32[$2 + 88 >> 2] = 0;
        while (1) {
         if (HEAP32[$2 + 88 >> 2] < 255) {
          HEAP32[$2 + 84 >> 2] = HEAPU16[(HEAP32[$2 + 88 >> 2] << 1) + 146800 >> 1];
          HEAP8[HEAP32[$2 + 104 >> 2] + (Math_imul(HEAP32[$2 + 88 >> 2], 3) + 26 | 0) | 0] = HEAP32[$2 + 84 >> 2] << 3 & 248;
          HEAP8[HEAP32[$2 + 104 >> 2] + (Math_imul(HEAP32[$2 + 88 >> 2], 3) + 27 | 0) | 0] = HEAP32[$2 + 84 >> 2] >> 3 & 252;
          HEAP8[HEAP32[$2 + 104 >> 2] + (Math_imul(HEAP32[$2 + 88 >> 2], 3) + 28 | 0) | 0] = HEAP32[$2 + 84 >> 2] >> 8 & 248;
          HEAP32[$2 + 88 >> 2] = HEAP32[$2 + 88 >> 2] + 1;
          continue;
         }
         break;
        }
        break label$22;
       }
       HEAP32[$2 + 80 >> 2] = 0;
       while (1) {
        if (HEAP32[$2 + 80 >> 2] < 1 << HEAP32[$2 + 140 >> 2]) {
         HEAP8[$2 + 79 | 0] = (Math_imul(HEAP32[$2 + 80 >> 2], 255) | 0) / (1 << HEAP32[$2 + 140 >> 2]);
         HEAP8[HEAP32[$2 + 104 >> 2] + (Math_imul(HEAP32[$2 + 80 >> 2], 3) + 26 | 0) | 0] = HEAPU8[$2 + 79 | 0];
         HEAP8[HEAP32[$2 + 104 >> 2] + (Math_imul(HEAP32[$2 + 80 >> 2], 3) + 27 | 0) | 0] = HEAPU8[$2 + 79 | 0];
         HEAP8[HEAP32[$2 + 104 >> 2] + (Math_imul(HEAP32[$2 + 80 >> 2], 3) + 28 | 0) | 0] = HEAPU8[$2 + 79 | 0];
         HEAP32[$2 + 80 >> 2] = HEAP32[$2 + 80 >> 2] + 1;
         continue;
        }
        break;
       }
      }
     }
    }
   }
  }
  HEAP32[$2 + 72 >> 2] = (1 << HEAP32[$2 + 136 >> 2]) - 1;
  HEAP32[$2 + 68 >> 2] = 8 / HEAP32[$2 + 136 >> 2];
  HEAP32[$2 + 64 >> 2] = HEAP32[$2 + 120 >> 2];
  HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 144 >> 2] - 1;
  while (1) {
   if (HEAP32[$2 + 60 >> 2] >= 0) {
    HEAP32[$2 + 56 >> 2] = 0;
    label$30: {
     if (HEAP32[$2 + 136 >> 2] < 8) {
      HEAP32[$2 + 52 >> 2] = 0;
      while (1) {
       if (HEAP32[$2 + 52 >> 2] < HEAP32[$2 + 148 >> 2]) {
        HEAP32[$2 + 48 >> 2] = 0;
        HEAP32[$2 + 44 >> 2] = 0;
        while (1) {
         if (HEAP32[$2 + 44 >> 2] < HEAP32[$2 + 68 >> 2]) {
          $0 = HEAP32[$2 + 52 >> 2];
          HEAP32[$2 + 52 >> 2] = $0 + 1;
          HEAP32[$2 + 40 >> 2] = graphicsGetPixel($2 + 152 | 0, $0, HEAP32[$2 + 60 >> 2]);
          HEAP32[$2 + 48 >> 2] = HEAP32[$2 + 40 >> 2] & HEAP32[$2 + 72 >> 2] | HEAP32[$2 + 48 >> 2] << HEAP32[$2 + 136 >> 2];
          HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 44 >> 2] + 1;
          continue;
         }
         break;
        }
        $1 = HEAP32[$2 + 48 >> 2];
        $3 = HEAP32[$2 + 104 >> 2];
        $0 = HEAP32[$2 + 64 >> 2];
        HEAP32[$2 + 64 >> 2] = $0 + 1;
        HEAP8[$3 + $0 | 0] = $1;
        HEAP32[$2 + 56 >> 2] = HEAP32[$2 + 56 >> 2] + 1;
        continue;
       }
       break;
      }
      break label$30;
     }
     HEAP32[$2 + 36 >> 2] = 0;
     while (1) {
      if (HEAP32[$2 + 36 >> 2] < HEAP32[$2 + 148 >> 2]) {
       HEAP32[$2 + 32 >> 2] = graphicsGetPixel($2 + 152 | 0, HEAP32[$2 + 36 >> 2], HEAP32[$2 + 60 >> 2]);
       if (HEAP32[$2 + 136 >> 2] == 16) {
        HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 32 >> 2] & 31 | HEAP32[$2 + 32 >> 2] >>> 1 & -32;
       }
       HEAP32[$2 + 28 >> 2] = 0;
       while (1) {
        if (HEAP32[$2 + 28 >> 2] < HEAP32[$2 + 136 >> 2]) {
         $1 = HEAP32[$2 + 32 >> 2];
         $3 = HEAP32[$2 + 104 >> 2];
         $0 = HEAP32[$2 + 64 >> 2];
         HEAP32[$2 + 64 >> 2] = $0 + 1;
         HEAP8[$3 + $0 | 0] = $1;
         HEAP32[$2 + 56 >> 2] = HEAP32[$2 + 56 >> 2] + 1;
         HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 32 >> 2] >>> 8;
         HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 28 >> 2] + 8;
         continue;
        }
        break;
       }
       HEAP32[$2 + 36 >> 2] = HEAP32[$2 + 36 >> 2] + 1;
       continue;
      }
      break;
     }
    }
    if (HEAP32[$2 + 56 >> 2] < HEAP32[$2 + 128 >> 2]) {
     HEAP32[$2 + 64 >> 2] = HEAP32[$2 + 64 >> 2] + (HEAP32[$2 + 128 >> 2] - HEAP32[$2 + 56 >> 2] | 0);
    }
    if (!(!(HEAP8[$2 + 231 | 0] & 1) | HEAP32[$2 + 64 >> 2] <= 2)) {
     HEAP8[$2 + 27 | 0] = !HEAP32[$2 + 60 >> 2];
     if (HEAP8[$2 + 27 | 0] & 1) {
      $0 = HEAP32[$2 + 64 >> 2];
     } else {
      $0 = HEAP32[$2 + 64 >> 2] - (HEAP32[$2 + 64 >> 2] % 3 | 0) | 0;
     }
     HEAP32[$2 + 20 >> 2] = $0;
     HEAP32[$2 + 16 >> 2] = jsvNewArrayBufferFromString(HEAP32[$2 + 108 >> 2], HEAP32[$2 + 20 >> 2]);
     HEAP32[$2 + 12 >> 2] = jswrap_btoa(HEAP32[$2 + 16 >> 2]);
     jsvUnLock(HEAP32[$2 + 16 >> 2]);
     if (HEAP32[$2 + 12 >> 2]) {
      HEAP32[$2 >> 2] = HEAP32[$2 + 12 >> 2];
      jsiConsolePrintf(97144, $2);
     }
     jsvUnLock(HEAP32[$2 + 12 >> 2]);
     if (HEAP32[$2 + 20 >> 2] < HEAP32[$2 + 64 >> 2]) {
      memmove(HEAP32[$2 + 104 >> 2], HEAP32[$2 + 104 >> 2] + HEAP32[$2 + 20 >> 2] | 0, HEAP32[$2 + 64 >> 2] - HEAP32[$2 + 20 >> 2] | 0);
     }
     HEAP32[$2 + 64 >> 2] = HEAP32[$2 + 64 >> 2] - HEAP32[$2 + 20 >> 2];
    }
    HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 60 >> 2] - 1;
    continue;
   }
   break;
  }
  if (HEAP8[$2 + 231 | 0] & 1) {
   jsiConsolePrintf(129587, 0);
   jsvUnLock(HEAP32[$2 + 108 >> 2]);
   HEAP32[$2 + 236 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 236 >> 2] = HEAP32[$2 + 108 >> 2];
 }
 __stack_pointer = $2 + 240 | 0;
 return HEAP32[$2 + 236 >> 2];
}

function _jsvTrace($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 336 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 332 >> 2] = $0;
 HEAP32[$4 + 328 >> 2] = $1;
 HEAP32[$4 + 324 >> 2] = $2;
 HEAP32[$4 + 320 >> 2] = $3;
 HEAP32[$4 + 316 >> 2] = 0;
 while (1) {
  if (HEAP32[$4 + 316 >> 2] < HEAP32[$4 + 328 >> 2]) {
   jsiConsolePrintString(127850);
   HEAP32[$4 + 316 >> 2] = HEAP32[$4 + 316 >> 2] + 1;
   continue;
  }
  break;
 }
 label$3: {
  if (!HEAP32[$4 + 332 >> 2]) {
   jsiConsolePrintString(106576);
   break label$3;
  }
  if (!(HEAP32[$4 + 332 >> 2] != HEAP32[46747] | HEAP32[$4 + 320 >> 2] <= 0)) {
   jsiConsolePrintString(108633);
   break label$3;
  }
  jsvTraceLockInfo(HEAP32[$4 + 332 >> 2]);
  HEAP32[$4 + 312 >> 2] = _jsvTraceGetLowestLevel(HEAP32[$4 + 324 >> 2], HEAP32[$4 + 332 >> 2]);
  if (!((HEAP32[$4 + 312 >> 2] < 0 | HEAP32[$4 + 312 >> 2] >= HEAP32[$4 + 320 >> 2]) & HEAP32[$4 + 320 >> 2] <= 16)) {
   jsiConsolePrintString(129258);
   break label$3;
  }
  label$8: {
   if (jsvIsNewChild(HEAP32[$4 + 332 >> 2]) & 1) {
    jsiConsolePrintString(110346);
    HEAP32[$4 + 308 >> 2] = jsvGetAddressOf(jsvGetNextSibling(HEAP32[$4 + 332 >> 2]) & 65535);
    _jsvTrace(HEAP32[$4 + 308 >> 2], HEAP32[$4 + 328 >> 2] + 2 | 0, HEAP32[$4 + 324 >> 2], HEAP32[$4 + 320 >> 2] + 1 | 0);
    jsiConsolePrintString(127710);
    break label$8;
   }
   if (jsvIsName(HEAP32[$4 + 332 >> 2]) & 1) {
    jsiConsolePrintString(127601);
   }
  }
  HEAP8[$4 + 307 | 0] = 32;
  label$11: {
   if (jsvIsObject(HEAP32[$4 + 332 >> 2]) & 1) {
    jsiConsolePrintString(127448);
    HEAP8[$4 + 307 | 0] = 125;
    break label$11;
   }
   label$13: {
    if (jsvIsGetterOrSetter(HEAP32[$4 + 332 >> 2]) & 1) {
     jsiConsolePrintString(127458);
     HEAP8[$4 + 307 | 0] = 125;
     break label$13;
    }
    label$15: {
     if (jsvIsArray(HEAP32[$4 + 332 >> 2]) & 1) {
      $0 = HEAP32[$4 + 332 >> 2];
      HEAP32[$4 + 48 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
      jsiConsolePrintf(127642, $4 + 48 | 0);
      HEAP8[$4 + 307 | 0] = 93;
      break label$15;
     }
     label$17: {
      if (jsvIsNativeFunction(HEAP32[$4 + 332 >> 2]) & 1) {
       $0 = HEAP32[$4 + 332 >> 2];
       $1 = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
       $0 = HEAP32[$4 + 332 >> 2];
       HEAP32[$4 + 68 >> 2] = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8;
       HEAP32[$4 + 64 >> 2] = $1;
       jsiConsolePrintf(127487, $4 - -64 | 0);
       HEAP8[$4 + 307 | 0] = 125;
       break label$17;
      }
      label$19: {
       if (jsvIsFunction(HEAP32[$4 + 332 >> 2]) & 1) {
        jsiConsolePrintString(127475);
        if (jsvIsFunctionReturn(HEAP32[$4 + 332 >> 2]) & 1) {
         jsiConsolePrintString(127530);
        }
        HEAP8[$4 + 307 | 0] = 125;
        break label$19;
       }
       label$22: {
        if (jsvIsPin(HEAP32[$4 + 332 >> 2]) & 1) {
         HEAP32[$4 + 80 >> 2] = jsvGetInteger(HEAP32[$4 + 332 >> 2]);
         jsiConsolePrintf(107502, $4 + 80 | 0);
         break label$22;
        }
        label$24: {
         if (jsvIsInt(HEAP32[$4 + 332 >> 2]) & 1) {
          HEAP32[$4 + 96 >> 2] = jsvGetInteger(HEAP32[$4 + 332 >> 2]);
          jsiConsolePrintf(107393, $4 + 96 | 0);
          break label$24;
         }
         label$26: {
          if (jsvIsBoolean(HEAP32[$4 + 332 >> 2]) & 1) {
           HEAP32[$4 + 112 >> 2] = jsvGetBool(HEAP32[$4 + 332 >> 2]) & 1 ? 104396 : 104720;
           jsiConsolePrintf(100711, $4 + 112 | 0);
           break label$26;
          }
          label$28: {
           if (jsvIsFloat(HEAP32[$4 + 332 >> 2]) & 1) {
            HEAPF64[$4 + 128 >> 3] = jsvGetFloat(HEAP32[$4 + 332 >> 2]);
            jsiConsolePrintf(104120, $4 + 128 | 0);
            break label$28;
           }
           label$30: {
            if (jsvIsFunctionParameter(HEAP32[$4 + 332 >> 2]) & 1) {
             HEAP32[$4 + 144 >> 2] = HEAP32[$4 + 332 >> 2];
             jsiConsolePrintf(127520, $4 + 144 | 0);
             break label$30;
            }
            label$32: {
             if (jsvIsArrayBufferName(HEAP32[$4 + 332 >> 2]) & 1) {
              HEAP32[$4 + 160 >> 2] = jsvGetInteger(HEAP32[$4 + 332 >> 2]);
              jsiConsolePrintf(127621, $4 + 160 | 0);
              break label$32;
             }
             label$34: {
              if (jsvIsArrayBuffer(HEAP32[$4 + 332 >> 2]) & 1) {
               label$36: {
                if (jswGetBasicObjectName(HEAP32[$4 + 332 >> 2])) {
                 $1 = jswGetBasicObjectName(HEAP32[$4 + 332 >> 2]);
                 break label$36;
                }
                $1 = 101438;
               }
               $0 = HEAP32[$4 + 332 >> 2];
               $2 = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8;
               HEAP32[$4 + 184 >> 2] = HEAPU8[$0 + 2 | 0] | HEAPU8[$0 + 3 | 0] << 8 | HEAPU8[$0 + 4 | 0] << 16;
               HEAP32[$4 + 180 >> 2] = $2;
               HEAP32[$4 + 176 >> 2] = $1;
               jsiConsolePrintf(126484, $4 + 176 | 0);
               break label$34;
              }
              label$38: {
               if (jsvIsString(HEAP32[$4 + 332 >> 2]) & 1) {
                HEAP32[$4 + 300 >> 2] = 1;
                if (jsvGetLastChild(HEAP32[$4 + 332 >> 2]) & 65535) {
                 HEAP32[$4 + 296 >> 2] = jsvGetAddressOf(jsvGetLastChild(HEAP32[$4 + 332 >> 2]) & 65535);
                 HEAP32[$4 + 300 >> 2] = jsvCountJsVarsUsed(HEAP32[$4 + 296 >> 2]) + HEAP32[$4 + 300 >> 2];
                }
                if (jsvIsFlatString(HEAP32[$4 + 332 >> 2]) & 1) {
                 HEAP32[$4 + 300 >> 2] = jsvGetFlatStringBlocks(HEAP32[$4 + 332 >> 2]) + HEAP32[$4 + 300 >> 2];
                }
                HEAP32[$4 + 292 >> 2] = 129588;
                if (jsvIsFlatString(HEAP32[$4 + 332 >> 2]) & 1) {
                 HEAP32[$4 + 292 >> 2] = 98102;
                }
                if (jsvIsNativeString(HEAP32[$4 + 332 >> 2]) & 1) {
                 HEAP32[$4 + 292 >> 2] = 104337;
                }
                if (jsvIsFlashString(HEAP32[$4 + 332 >> 2]) & 1) {
                 HEAP32[$4 + 292 >> 2] = 103453;
                }
                $0 = HEAP32[$4 + 292 >> 2];
                $1 = HEAP32[$4 + 300 >> 2];
                HEAP32[$4 + 200 >> 2] = HEAP32[$4 + 332 >> 2];
                HEAP32[$4 + 196 >> 2] = $1;
                HEAP32[$4 + 192 >> 2] = $0;
                jsiConsolePrintf(101757, $4 + 192 | 0);
                break label$38;
               }
               $0 = HEAP32[$4 + 332 >> 2];
               HEAP32[$4 + 208 >> 2] = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 50175;
               jsiConsolePrintf(107491, $4 + 208 | 0);
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
  if (jsvIsConstant(HEAP32[$4 + 332 >> 2]) & 1) {
   jsiConsolePrintf(127655, 0);
  }
  if (jsvIsNameInt(HEAP32[$4 + 332 >> 2]) & 1) {
   HEAP32[$4 >> 2] = jsvGetFirstChildSigned(HEAP32[$4 + 332 >> 2]) << 16 >> 16;
   jsiConsolePrintf(128502, $4);
   break label$3;
  }
  if (jsvIsNameIntBool(HEAP32[$4 + 332 >> 2]) & 1) {
   HEAP32[$4 + 16 >> 2] = jsvGetFirstChild(HEAP32[$4 + 332 >> 2]) & 65535 ? 104396 : 104720;
   jsiConsolePrintf(128203, $4 + 16 | 0);
   break label$3;
  }
  label$48: {
   if (jsvHasSingleChild(HEAP32[$4 + 332 >> 2]) & 1) {
    label$50: {
     if (jsvGetFirstChild(HEAP32[$4 + 332 >> 2]) & 65535) {
      $0 = jsvGetAddressOf(jsvGetFirstChild(HEAP32[$4 + 332 >> 2]) & 65535);
      break label$50;
     }
     $0 = 0;
    }
    HEAP32[$4 + 288 >> 2] = $0;
    _jsvTrace(HEAP32[$4 + 288 >> 2], HEAP32[$4 + 328 >> 2] + 2 | 0, HEAP32[$4 + 324 >> 2], HEAP32[$4 + 320 >> 2] + 1 | 0);
    break label$48;
   }
   if (jsvHasChildren(HEAP32[$4 + 332 >> 2]) & 1) {
    jsvIteratorNew($4 + 224 | 0, HEAP32[$4 + 332 >> 2], 0);
    HEAP8[$4 + 223 | 0] = 1;
    while (1) {
     $0 = 0;
     if (jsvIteratorHasElement($4 + 224 | 0) & 1) {
      $0 = jspIsInterrupted() ^ -1;
     }
     if ($0 & 1) {
      if (HEAP8[$4 + 223 | 0] & 1) {
       jsiConsolePrintf(129587, 0);
      }
      HEAP8[$4 + 223 | 0] = 0;
      HEAP32[$4 + 216 >> 2] = jsvIteratorGetKey($4 + 224 | 0);
      _jsvTrace(HEAP32[$4 + 216 >> 2], HEAP32[$4 + 328 >> 2] + 2 | 0, HEAP32[$4 + 324 >> 2], HEAP32[$4 + 320 >> 2] + 1 | 0);
      jsvUnLock(HEAP32[$4 + 216 >> 2]);
      jsiConsolePrintf(129587, 0);
      jsvIteratorNext($4 + 224 | 0);
      continue;
     }
     break;
    }
    jsvIteratorFree($4 + 224 | 0);
    if (!(HEAP8[$4 + 223 | 0] & 1)) {
     HEAP32[$4 + 316 >> 2] = 0;
     while (1) {
      if (HEAP32[$4 + 316 >> 2] < HEAP32[$4 + 328 >> 2]) {
       jsiConsolePrintString(127850);
       HEAP32[$4 + 316 >> 2] = HEAP32[$4 + 316 >> 2] + 1;
       continue;
      }
      break;
     }
    }
   }
  }
  HEAP32[$4 + 32 >> 2] = HEAP8[$4 + 307 | 0];
  jsiConsolePrintf(107763, $4 + 32 | 0);
 }
 __stack_pointer = $4 + 336 | 0;
}

function tflite__reference_integer_ops__DepthwiseConvPerChannel_28tflite__DepthwiseParams_20const__2c_20int_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 var $11 = 0;
 $11 = __stack_pointer - 192 | 0;
 __stack_pointer = $11;
 HEAP32[$11 + 188 >> 2] = $0;
 HEAP32[$11 + 184 >> 2] = $1;
 HEAP32[$11 + 180 >> 2] = $2;
 HEAP32[$11 + 176 >> 2] = $3;
 HEAP32[$11 + 172 >> 2] = $4;
 HEAP32[$11 + 168 >> 2] = $5;
 HEAP32[$11 + 164 >> 2] = $6;
 HEAP32[$11 + 160 >> 2] = $7;
 HEAP32[$11 + 156 >> 2] = $8;
 HEAP32[$11 + 152 >> 2] = $9;
 HEAP32[$11 + 148 >> 2] = $10;
 HEAP32[$11 + 144 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 10 >> 1];
 HEAP32[$11 + 140 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 12 >> 1];
 HEAP32[$11 + 136 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 14 >> 1];
 HEAP32[$11 + 132 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 16 >> 1];
 HEAP32[$11 + 128 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 2 >> 1];
 HEAP32[$11 + 124 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 4 >> 1];
 HEAP32[$11 + 120 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 18 >> 1];
 HEAP32[$11 + 116 >> 2] = HEAP32[HEAP32[$11 + 188 >> 2] + 20 >> 2];
 HEAP32[$11 + 112 >> 2] = HEAP32[HEAP32[$11 + 188 >> 2] + 28 >> 2];
 HEAP32[$11 + 108 >> 2] = HEAP32[HEAP32[$11 + 188 >> 2] + 40 >> 2];
 HEAP32[$11 + 104 >> 2] = HEAP32[HEAP32[$11 + 188 >> 2] + 44 >> 2];
 label$1: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$11 + 176 >> 2]) | 0) != 4) {
   break label$1;
  }
 }
 label$2: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$11 + 168 >> 2]) | 0) != 4) {
   break label$2;
  }
 }
 label$3: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$11 + 152 >> 2]) | 0) != 4) {
   break label$3;
  }
 }
 label$4: {
  if (HEAP32[$11 + 108 >> 2] > HEAP32[$11 + 104 >> 2]) {
   break label$4;
  }
 }
 HEAP32[$11 + 100 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$11 + 176 >> 2], 0, HEAP32[$11 + 152 >> 2], 0);
 HEAP32[$11 + 96 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$11 + 168 >> 2], 3, HEAP32[$11 + 152 >> 2], 3);
 HEAP32[$11 + 92 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 176 >> 2], 1);
 HEAP32[$11 + 88 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 176 >> 2], 2);
 HEAP32[$11 + 84 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 176 >> 2], 3);
 HEAP32[$11 + 80 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 168 >> 2], 1);
 HEAP32[$11 + 76 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 168 >> 2], 2);
 HEAP32[$11 + 72 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 152 >> 2], 1);
 HEAP32[$11 + 68 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 152 >> 2], 2);
 label$5: {
  if (HEAP32[$11 + 96 >> 2] != (Math_imul(HEAP32[$11 + 84 >> 2], HEAP32[$11 + 120 >> 2]) | 0)) {
   break label$5;
  }
 }
 label$6: {
  if ((tflite__RuntimeShape__FlatSize_28_29_20const(HEAP32[$11 + 160 >> 2]) | 0) != HEAP32[$11 + 96 >> 2]) {
   break label$6;
  }
 }
 HEAP32[$11 + 64 >> 2] = 0;
 while (1) {
  if (HEAP32[$11 + 64 >> 2] < HEAP32[$11 + 100 >> 2]) {
   HEAP32[$11 + 60 >> 2] = 0;
   while (1) {
    if (HEAP32[$11 + 60 >> 2] < HEAP32[$11 + 72 >> 2]) {
     HEAP32[$11 + 56 >> 2] = 0;
     while (1) {
      if (HEAP32[$11 + 56 >> 2] < HEAP32[$11 + 68 >> 2]) {
       HEAP32[$11 + 52 >> 2] = 0;
       while (1) {
        if (HEAP32[$11 + 52 >> 2] < HEAP32[$11 + 84 >> 2]) {
         HEAP32[$11 + 48 >> 2] = 0;
         while (1) {
          if (HEAP32[$11 + 48 >> 2] < HEAP32[$11 + 120 >> 2]) {
           HEAP32[$11 + 44 >> 2] = HEAP32[$11 + 48 >> 2] + Math_imul(HEAP32[$11 + 52 >> 2], HEAP32[$11 + 120 >> 2]);
           HEAP32[$11 + 40 >> 2] = Math_imul(HEAP32[$11 + 56 >> 2], HEAP32[$11 + 144 >> 2]) - HEAP32[$11 + 128 >> 2];
           HEAP32[$11 + 36 >> 2] = Math_imul(HEAP32[$11 + 60 >> 2], HEAP32[$11 + 140 >> 2]) - HEAP32[$11 + 124 >> 2];
           HEAP32[$11 + 32 >> 2] = 0;
           HEAP32[$11 + 28 >> 2] = 0;
           while (1) {
            if (HEAP32[$11 + 28 >> 2] < HEAP32[$11 + 80 >> 2]) {
             HEAP32[$11 + 24 >> 2] = 0;
             while (1) {
              if (HEAP32[$11 + 24 >> 2] < HEAP32[$11 + 76 >> 2]) {
               HEAP32[$11 + 20 >> 2] = HEAP32[$11 + 40 >> 2] + Math_imul(HEAP32[$11 + 136 >> 2], HEAP32[$11 + 24 >> 2]);
               HEAP32[$11 + 16 >> 2] = HEAP32[$11 + 36 >> 2] + Math_imul(HEAP32[$11 + 132 >> 2], HEAP32[$11 + 28 >> 2]);
               $0 = 0;
               label$21: {
                if (HEAP32[$11 + 20 >> 2] < 0) {
                 break label$21;
                }
                $0 = 0;
                if (HEAP32[$11 + 20 >> 2] >= HEAP32[$11 + 88 >> 2]) {
                 break label$21;
                }
                $0 = 0;
                if (HEAP32[$11 + 16 >> 2] < 0) {
                 break label$21;
                }
                $0 = HEAP32[$11 + 16 >> 2] < HEAP32[$11 + 92 >> 2];
               }
               HEAP8[$11 + 15 | 0] = $0;
               if (HEAP8[$11 + 15 | 0] & 1) {
                HEAP32[$11 + 8 >> 2] = HEAP8[HEAP32[$11 + 172 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$11 + 176 >> 2], HEAP32[$11 + 64 >> 2], HEAP32[$11 + 16 >> 2], HEAP32[$11 + 20 >> 2], HEAP32[$11 + 52 >> 2]) | 0];
                HEAP32[$11 + 4 >> 2] = HEAP8[HEAP32[$11 + 164 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$11 + 168 >> 2], 0, HEAP32[$11 + 28 >> 2], HEAP32[$11 + 24 >> 2], HEAP32[$11 + 44 >> 2]) | 0];
                HEAP32[$11 + 32 >> 2] = HEAP32[$11 + 32 >> 2] + Math_imul(HEAP32[$11 + 4 >> 2], HEAP32[$11 + 8 >> 2] + HEAP32[$11 + 116 >> 2] | 0);
               }
               HEAP32[$11 + 24 >> 2] = HEAP32[$11 + 24 >> 2] + 1;
               continue;
              }
              break;
             }
             HEAP32[$11 + 28 >> 2] = HEAP32[$11 + 28 >> 2] + 1;
             continue;
            }
            break;
           }
           if (HEAP32[$11 + 156 >> 2]) {
            HEAP32[$11 + 32 >> 2] = HEAP32[HEAP32[$11 + 156 >> 2] + (HEAP32[$11 + 44 >> 2] << 2) >> 2] + HEAP32[$11 + 32 >> 2];
           }
           HEAP32[$11 + 32 >> 2] = tflite__MultiplyByQuantizedMultiplier_28int_2c_20int_2c_20int_29(HEAP32[$11 + 32 >> 2], HEAP32[HEAP32[$11 + 184 >> 2] + (HEAP32[$11 + 44 >> 2] << 2) >> 2], HEAP32[HEAP32[$11 + 180 >> 2] + (HEAP32[$11 + 44 >> 2] << 2) >> 2]);
           HEAP32[$11 + 32 >> 2] = HEAP32[$11 + 112 >> 2] + HEAP32[$11 + 32 >> 2];
           HEAP32[$11 + 32 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($11 + 32 | 0, $11 + 108 | 0) >> 2];
           HEAP32[$11 + 32 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($11 + 32 | 0, $11 + 104 | 0) >> 2];
           $0 = HEAP32[$11 + 32 >> 2];
           HEAP8[HEAP32[$11 + 148 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$11 + 152 >> 2], HEAP32[$11 + 64 >> 2], HEAP32[$11 + 60 >> 2], HEAP32[$11 + 56 >> 2], HEAP32[$11 + 44 >> 2]) | 0] = $0;
           HEAP32[$11 + 48 >> 2] = HEAP32[$11 + 48 >> 2] + 1;
           continue;
          }
          break;
         }
         HEAP32[$11 + 52 >> 2] = HEAP32[$11 + 52 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$11 + 56 >> 2] = HEAP32[$11 + 56 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$11 + 60 >> 2] = HEAP32[$11 + 60 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$11 + 64 >> 2] = HEAP32[$11 + 64 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $11 + 192 | 0;
}

function tflite__reference_integer_ops__ConvPerChannel_28tflite__ConvParams_20const__2c_20int_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 var $11 = 0;
 $11 = __stack_pointer - 192 | 0;
 __stack_pointer = $11;
 HEAP32[$11 + 188 >> 2] = $0;
 HEAP32[$11 + 184 >> 2] = $1;
 HEAP32[$11 + 180 >> 2] = $2;
 HEAP32[$11 + 176 >> 2] = $3;
 HEAP32[$11 + 172 >> 2] = $4;
 HEAP32[$11 + 168 >> 2] = $5;
 HEAP32[$11 + 164 >> 2] = $6;
 HEAP32[$11 + 160 >> 2] = $7;
 HEAP32[$11 + 156 >> 2] = $8;
 HEAP32[$11 + 152 >> 2] = $9;
 HEAP32[$11 + 148 >> 2] = $10;
 HEAP32[$11 + 144 >> 2] = HEAP32[HEAP32[$11 + 188 >> 2] + 20 >> 2];
 HEAP32[$11 + 140 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 10 >> 1];
 HEAP32[$11 + 136 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 12 >> 1];
 HEAP32[$11 + 132 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 14 >> 1];
 HEAP32[$11 + 128 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 16 >> 1];
 HEAP32[$11 + 124 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 2 >> 1];
 HEAP32[$11 + 120 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 4 >> 1];
 HEAP32[$11 + 116 >> 2] = HEAP32[HEAP32[$11 + 188 >> 2] + 28 >> 2];
 HEAP32[$11 + 112 >> 2] = HEAP32[HEAP32[$11 + 188 >> 2] + 40 >> 2];
 HEAP32[$11 + 108 >> 2] = HEAP32[HEAP32[$11 + 188 >> 2] + 44 >> 2];
 label$1: {
  if (HEAP32[$11 + 112 >> 2] > HEAP32[$11 + 108 >> 2]) {
   break label$1;
  }
 }
 label$2: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$11 + 176 >> 2]) | 0) != 4) {
   break label$2;
  }
 }
 label$3: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$11 + 168 >> 2]) | 0) != 4) {
   break label$3;
  }
 }
 label$4: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$11 + 152 >> 2]) | 0) != 4) {
   break label$4;
  }
 }
 HEAP32[$11 + 104 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$11 + 176 >> 2], 0, HEAP32[$11 + 152 >> 2], 0);
 HEAP32[$11 + 100 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$11 + 176 >> 2], 3, HEAP32[$11 + 168 >> 2], 3);
 HEAP32[$11 + 96 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$11 + 168 >> 2], 0, HEAP32[$11 + 152 >> 2], 3);
 if (HEAP32[$11 + 156 >> 2]) {
  label$6: {
   if ((tflite__RuntimeShape__FlatSize_28_29_20const(HEAP32[$11 + 160 >> 2]) | 0) != HEAP32[$11 + 96 >> 2]) {
    break label$6;
   }
  }
 }
 HEAP32[$11 + 92 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 176 >> 2], 1);
 HEAP32[$11 + 88 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 176 >> 2], 2);
 HEAP32[$11 + 84 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 168 >> 2], 1);
 HEAP32[$11 + 80 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 168 >> 2], 2);
 HEAP32[$11 + 76 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 152 >> 2], 1);
 HEAP32[$11 + 72 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 152 >> 2], 2);
 HEAP32[$11 + 68 >> 2] = 0;
 while (1) {
  if (HEAP32[$11 + 68 >> 2] < HEAP32[$11 + 104 >> 2]) {
   HEAP32[$11 + 64 >> 2] = 0;
   while (1) {
    if (HEAP32[$11 + 64 >> 2] < HEAP32[$11 + 76 >> 2]) {
     HEAP32[$11 + 60 >> 2] = 0;
     while (1) {
      if (HEAP32[$11 + 60 >> 2] < HEAP32[$11 + 72 >> 2]) {
       HEAP32[$11 + 56 >> 2] = 0;
       while (1) {
        if (HEAP32[$11 + 56 >> 2] < HEAP32[$11 + 96 >> 2]) {
         HEAP32[$11 + 52 >> 2] = Math_imul(HEAP32[$11 + 60 >> 2], HEAP32[$11 + 140 >> 2]) - HEAP32[$11 + 124 >> 2];
         HEAP32[$11 + 48 >> 2] = Math_imul(HEAP32[$11 + 64 >> 2], HEAP32[$11 + 136 >> 2]) - HEAP32[$11 + 120 >> 2];
         HEAP32[$11 + 44 >> 2] = 0;
         HEAP32[$11 + 40 >> 2] = 0;
         while (1) {
          if (HEAP32[$11 + 40 >> 2] < HEAP32[$11 + 84 >> 2]) {
           HEAP32[$11 + 36 >> 2] = 0;
           while (1) {
            if (HEAP32[$11 + 36 >> 2] < HEAP32[$11 + 80 >> 2]) {
             HEAP32[$11 + 32 >> 2] = 0;
             while (1) {
              if (HEAP32[$11 + 32 >> 2] < HEAP32[$11 + 100 >> 2]) {
               HEAP32[$11 + 28 >> 2] = HEAP32[$11 + 52 >> 2] + Math_imul(HEAP32[$11 + 132 >> 2], HEAP32[$11 + 36 >> 2]);
               HEAP32[$11 + 24 >> 2] = HEAP32[$11 + 48 >> 2] + Math_imul(HEAP32[$11 + 128 >> 2], HEAP32[$11 + 40 >> 2]);
               $0 = 0;
               label$21: {
                if (HEAP32[$11 + 28 >> 2] < 0) {
                 break label$21;
                }
                $0 = 0;
                if (HEAP32[$11 + 28 >> 2] >= HEAP32[$11 + 88 >> 2]) {
                 break label$21;
                }
                $0 = 0;
                if (HEAP32[$11 + 24 >> 2] < 0) {
                 break label$21;
                }
                $0 = HEAP32[$11 + 24 >> 2] < HEAP32[$11 + 92 >> 2];
               }
               HEAP8[$11 + 23 | 0] = $0;
               if (HEAP8[$11 + 23 | 0] & 1) {
                HEAP32[$11 + 16 >> 2] = HEAP8[HEAP32[$11 + 172 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$11 + 176 >> 2], HEAP32[$11 + 68 >> 2], HEAP32[$11 + 24 >> 2], HEAP32[$11 + 28 >> 2], HEAP32[$11 + 32 >> 2]) | 0];
                HEAP32[$11 + 12 >> 2] = HEAP8[HEAP32[$11 + 164 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$11 + 168 >> 2], HEAP32[$11 + 56 >> 2], HEAP32[$11 + 40 >> 2], HEAP32[$11 + 36 >> 2], HEAP32[$11 + 32 >> 2]) | 0];
                HEAP32[$11 + 44 >> 2] = HEAP32[$11 + 44 >> 2] + Math_imul(HEAP32[$11 + 12 >> 2], HEAP32[$11 + 16 >> 2] + HEAP32[$11 + 144 >> 2] | 0);
               }
               HEAP32[$11 + 32 >> 2] = HEAP32[$11 + 32 >> 2] + 1;
               continue;
              }
              break;
             }
             HEAP32[$11 + 36 >> 2] = HEAP32[$11 + 36 >> 2] + 1;
             continue;
            }
            break;
           }
           HEAP32[$11 + 40 >> 2] = HEAP32[$11 + 40 >> 2] + 1;
           continue;
          }
          break;
         }
         if (HEAP32[$11 + 156 >> 2]) {
          HEAP32[$11 + 44 >> 2] = HEAP32[HEAP32[$11 + 156 >> 2] + (HEAP32[$11 + 56 >> 2] << 2) >> 2] + HEAP32[$11 + 44 >> 2];
         }
         HEAP32[$11 + 44 >> 2] = tflite__MultiplyByQuantizedMultiplier_28int_2c_20int_2c_20int_29(HEAP32[$11 + 44 >> 2], HEAP32[HEAP32[$11 + 184 >> 2] + (HEAP32[$11 + 56 >> 2] << 2) >> 2], HEAP32[HEAP32[$11 + 180 >> 2] + (HEAP32[$11 + 56 >> 2] << 2) >> 2]);
         HEAP32[$11 + 44 >> 2] = HEAP32[$11 + 116 >> 2] + HEAP32[$11 + 44 >> 2];
         HEAP32[$11 + 44 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($11 + 44 | 0, $11 + 112 | 0) >> 2];
         HEAP32[$11 + 44 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($11 + 44 | 0, $11 + 108 | 0) >> 2];
         $0 = HEAP32[$11 + 44 >> 2];
         HEAP8[HEAP32[$11 + 148 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$11 + 152 >> 2], HEAP32[$11 + 68 >> 2], HEAP32[$11 + 64 >> 2], HEAP32[$11 + 60 >> 2], HEAP32[$11 + 56 >> 2]) | 0] = $0;
         HEAP32[$11 + 56 >> 2] = HEAP32[$11 + 56 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$11 + 60 >> 2] = HEAP32[$11 + 60 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$11 + 64 >> 2] = HEAP32[$11 + 64 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$11 + 68 >> 2] = HEAP32[$11 + 68 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $11 + 192 | 0;
}

function tflite__internal__InitializeTfLiteTensorFromFlatbuffer_28tflite__SimpleMemoryAllocator__2c_20bool_2c_20tflite__Tensor_20const__2c_20flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer___20const__2c_20tflite__ErrorReporter__2c_20TfLiteTensor__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0;
 $6 = __stack_pointer - 128 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 120 >> 2] = $0;
 HEAP8[$6 + 119 | 0] = $1;
 HEAP32[$6 + 112 >> 2] = $2;
 HEAP32[$6 + 108 >> 2] = $3;
 HEAP32[$6 + 104 >> 2] = $4;
 HEAP32[$6 + 100 >> 2] = $5;
 label$1: {
  if (!HEAP32[$6 + 100 >> 2]) {
   break label$1;
  }
 }
 HEAP32[$6 + 88 >> 2] = 0;
 HEAP32[$6 + 92 >> 2] = 0;
 HEAP32[$6 + 80 >> 2] = 0;
 HEAP32[$6 + 84 >> 2] = 0;
 HEAP32[$6 + 72 >> 2] = 0;
 HEAP32[$6 + 76 >> 2] = 0;
 HEAP32[$6 + 64 >> 2] = 0;
 HEAP32[$6 + 68 >> 2] = 0;
 HEAP32[$6 + 56 >> 2] = 0;
 HEAP32[$6 + 60 >> 2] = 0;
 $1 = HEAP32[$6 + 60 >> 2];
 $0 = HEAP32[$6 + 56 >> 2];
 $3 = $0;
 $2 = HEAP32[$6 + 100 >> 2];
 $0 = $2;
 HEAP32[$0 >> 2] = $3;
 HEAP32[$0 + 4 >> 2] = $1;
 $0 = HEAP32[$6 + 92 >> 2];
 $1 = HEAP32[$6 + 88 >> 2];
 $3 = $1;
 $1 = $2;
 HEAP32[$1 + 32 >> 2] = $3;
 HEAP32[$1 + 36 >> 2] = $0;
 $1 = HEAP32[$6 + 84 >> 2];
 $0 = HEAP32[$6 + 80 >> 2];
 $3 = $0;
 $0 = $2;
 HEAP32[$0 + 24 >> 2] = $3;
 HEAP32[$0 + 28 >> 2] = $1;
 $0 = HEAP32[$6 + 76 >> 2];
 $1 = HEAP32[$6 + 72 >> 2];
 $3 = $1;
 $1 = $2;
 HEAP32[$1 + 16 >> 2] = $3;
 HEAP32[$1 + 20 >> 2] = $0;
 $1 = HEAP32[$6 + 68 >> 2];
 $0 = HEAP32[$6 + 64 >> 2];
 $3 = $0;
 $0 = $2;
 HEAP32[$0 + 8 >> 2] = $3;
 HEAP32[$0 + 12 >> 2] = $1;
 HEAP32[$6 + 52 >> 2] = tflite__ConvertTensorType_28tflite__TensorType_2c_20TfLiteType__2c_20tflite__ErrorReporter__29(tflite__Tensor__type_28_29_20const(HEAP32[$6 + 112 >> 2]), HEAP32[$6 + 100 >> 2] + 28 | 0, HEAP32[$6 + 104 >> 2]);
 label$2: {
  if (HEAP32[$6 + 52 >> 2]) {
   HEAP32[$6 + 124 >> 2] = HEAP32[$6 + 52 >> 2];
   break label$2;
  }
  $0 = tflite__Tensor__is_variable_28_29_20const(HEAP32[$6 + 112 >> 2]);
  HEAP8[HEAP32[$6 + 100 >> 2] + 36 | 0] = $0 & 1;
  $0 = tflite__internal__GetFlatbufferTensorBuffer_28tflite__Tensor_20const__2c_20flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer___20const__29(HEAP32[$6 + 112 >> 2], HEAP32[$6 + 108 >> 2]);
  HEAP32[HEAP32[$6 + 100 >> 2] + 16 >> 2] = $0;
  label$4: {
   if (!HEAP32[HEAP32[$6 + 100 >> 2] + 16 >> 2]) {
    HEAP32[HEAP32[$6 + 100 >> 2] + 32 >> 2] = 2;
    break label$4;
   }
   HEAP32[HEAP32[$6 + 100 >> 2] + 32 >> 2] = 1;
  }
  HEAP32[$6 + 44 >> 2] = tflite__BytesRequiredForTensor_28tflite__Tensor_20const__2c_20unsigned_20long__2c_20unsigned_20long__2c_20tflite__ErrorReporter__29(HEAP32[$6 + 112 >> 2], HEAP32[$6 + 100 >> 2] + 24 | 0, $6 + 48 | 0, HEAP32[$6 + 104 >> 2]);
  if (HEAP32[$6 + 44 >> 2]) {
   HEAP32[$6 + 124 >> 2] = HEAP32[$6 + 44 >> 2];
   break label$2;
  }
  label$7: {
   if (!tflite__Tensor__shape_28_29_20const(HEAP32[$6 + 112 >> 2])) {
    HEAP32[HEAP32[$6 + 100 >> 2] + 20 >> 2] = 147920;
    break label$7;
   }
   HEAP32[$6 + 40 >> 2] = TfLiteStatus_20tflite__internal__FlatBufferVectorToTfLiteTypeArray_int_2c_20TfLiteIntArray__28tflite__SimpleMemoryAllocator__2c_20tflite__ErrorReporter__2c_20flatbuffers__Vector_int__20const__2c_20TfLiteIntArray___29(HEAP32[$6 + 120 >> 2], HEAP32[$6 + 104 >> 2], tflite__Tensor__shape_28_29_20const(HEAP32[$6 + 112 >> 2]), HEAP32[$6 + 100 >> 2] + 20 | 0);
   if (HEAP32[$6 + 40 >> 2]) {
    HEAP32[$6 + 124 >> 2] = HEAP32[$6 + 40 >> 2];
    break label$2;
   }
  }
  HEAP32[$6 + 36 >> 2] = tflite__Tensor__quantization_28_29_20const(HEAP32[$6 + 112 >> 2]);
  label$10: {
   if (!HEAP32[$6 + 36 >> 2]) {
    break label$10;
   }
   if (!tflite__QuantizationParameters__scale_28_29_20const(HEAP32[$6 + 36 >> 2])) {
    break label$10;
   }
   if (!flatbuffers__Vector_float___size_28_29_20const(tflite__QuantizationParameters__scale_28_29_20const(HEAP32[$6 + 36 >> 2]))) {
    break label$10;
   }
   if (!tflite__QuantizationParameters__zero_point_28_29_20const(HEAP32[$6 + 36 >> 2])) {
    break label$10;
   }
   if (!flatbuffers__Vector_long_20long___size_28_29_20const(tflite__QuantizationParameters__zero_point_28_29_20const(HEAP32[$6 + 36 >> 2]))) {
    break label$10;
   }
   $7 = flatbuffers__Vector_float___Get_28unsigned_20int_29_20const(tflite__QuantizationParameters__scale_28_29_20const(HEAP32[$6 + 36 >> 2]), 0);
   HEAPF32[HEAP32[$6 + 100 >> 2] + 8 >> 2] = $7;
   $1 = flatbuffers__Vector_long_20long___Get_28unsigned_20int_29_20const(tflite__QuantizationParameters__zero_point_28_29_20const(HEAP32[$6 + 36 >> 2]), 0);
   HEAP32[HEAP32[$6 + 100 >> 2] + 12 >> 2] = $1;
   HEAP32[$6 + 32 >> 2] = flatbuffers__Vector_float___size_28_29_20const(tflite__QuantizationParameters__scale_28_29_20const(HEAP32[$6 + 36 >> 2]));
   label$11: {
    if (HEAP8[$6 + 119 | 0] & 1) {
     $0 = HEAP32[$6 + 120 >> 2];
     $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, 12, 4) | 0;
     break label$11;
    }
    $0 = HEAP32[$6 + 120 >> 2];
    $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, 12, 4) | 0;
   }
   HEAP32[$6 + 28 >> 2] = $0;
   if (!HEAP32[$6 + 28 >> 2]) {
    tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$6 + 104 >> 2], 128894, 0);
    HEAP32[$6 + 124 >> 2] = 1;
    break label$2;
   }
   label$14: {
    if (HEAP8[$6 + 119 | 0] & 1) {
     $0 = HEAP32[$6 + 120 >> 2];
     $0 = (wasm2js_i32$1 = $0, wasm2js_i32$2 = TfLiteIntArrayGetSizeInBytes(HEAP32[$6 + 32 >> 2]), 
     wasm2js_i32$3 = 4, wasm2js_i32$0 = HEAP32[HEAP32[$0 >> 2] + 16 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
     break label$14;
    }
    $0 = HEAP32[$6 + 120 >> 2];
    $0 = (wasm2js_i32$3 = $0, wasm2js_i32$2 = TfLiteIntArrayGetSizeInBytes(HEAP32[$6 + 32 >> 2]), 
    wasm2js_i32$1 = 4, wasm2js_i32$0 = HEAP32[HEAP32[$0 >> 2] + 12 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0) | 0);
   }
   HEAP32[HEAP32[$6 + 28 >> 2] + 4 >> 2] = $0;
   if (!HEAP32[HEAP32[$6 + 28 >> 2] + 4 >> 2]) {
    tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$6 + 104 >> 2], 128778, 0);
    HEAP32[$6 + 124 >> 2] = 1;
    break label$2;
   }
   HEAP32[$6 + 24 >> 2] = TfLiteStatus_20tflite__internal__FlatBufferVectorToTfLiteTypeArray_float_2c_20TfLiteFloatArray__28tflite__SimpleMemoryAllocator__2c_20tflite__ErrorReporter__2c_20flatbuffers__Vector_float__20const__2c_20TfLiteFloatArray___29(HEAP32[$6 + 120 >> 2], HEAP32[$6 + 104 >> 2], tflite__QuantizationParameters__scale_28_29_20const(HEAP32[$6 + 36 >> 2]), HEAP32[$6 + 28 >> 2]);
   if (HEAP32[$6 + 24 >> 2]) {
    HEAP32[$6 + 124 >> 2] = HEAP32[$6 + 24 >> 2];
    break label$2;
   }
   HEAP32[HEAP32[HEAP32[$6 + 28 >> 2] + 4 >> 2] >> 2] = HEAP32[$6 + 32 >> 2];
   HEAP32[$6 + 20 >> 2] = HEAP32[HEAP32[$6 + 28 >> 2] + 4 >> 2] + 4;
   HEAP32[$6 + 16 >> 2] = 0;
   while (1) {
    if (HEAP32[$6 + 16 >> 2] < HEAP32[$6 + 32 >> 2]) {
     $0 = flatbuffers__Vector_long_20long___Get_28unsigned_20int_29_20const(tflite__QuantizationParameters__zero_point_28_29_20const(HEAP32[$6 + 36 >> 2]), HEAP32[$6 + 16 >> 2]);
     HEAP32[HEAP32[$6 + 20 >> 2] + (HEAP32[$6 + 16 >> 2] << 2) >> 2] = $0;
     HEAP32[$6 + 16 >> 2] = HEAP32[$6 + 16 >> 2] + 1;
     continue;
    }
    break;
   }
   $0 = tflite__QuantizationParameters__quantized_dimension_28_29_20const(HEAP32[$6 + 36 >> 2]);
   HEAP32[HEAP32[$6 + 28 >> 2] + 8 >> 2] = $0;
   HEAP32[$6 + 8 >> 2] = 1;
   HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 28 >> 2];
   $0 = HEAP32[$6 + 12 >> 2];
   $1 = HEAP32[$6 + 8 >> 2];
   $2 = $1;
   $1 = HEAP32[$6 + 100 >> 2];
   HEAP32[$1 >> 2] = $2;
   HEAP32[$1 + 4 >> 2] = $0;
  }
  HEAP32[$6 + 124 >> 2] = 0;
 }
 __stack_pointer = $6 + 128 | 0;
 return HEAP32[$6 + 124 >> 2];
}

function tflite__ops__micro__quantize__Eval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 240 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 232 >> 2] = $0;
 HEAP32[$2 + 228 >> 2] = $1;
 label$1: {
  if (!HEAP32[HEAP32[$2 + 228 >> 2] + 8 >> 2]) {
   break label$1;
  }
 }
 HEAP32[$2 + 224 >> 2] = HEAP32[HEAP32[$2 + 228 >> 2] + 8 >> 2];
 HEAP32[$2 + 220 >> 2] = tflite__micro__GetEvalInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 232 >> 2], HEAP32[$2 + 228 >> 2], 0);
 HEAP32[$2 + 216 >> 2] = tflite__micro__GetEvalOutput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 232 >> 2], HEAP32[$2 + 228 >> 2], 0);
 label$2: {
  label$3: {
   if (HEAP32[HEAP32[$2 + 220 >> 2] + 8 >> 2] == 1) {
    label$5: {
     switch (HEAP32[HEAP32[$2 + 216 >> 2] + 8 >> 2] - 3 | 0) {
     case 6:
      $0 = HEAP32[$2 + 224 >> 2];
      tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($2 + 192 | 0, HEAP32[$2 + 220 >> 2]);
      $1 = float_20const__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor_20const__29(HEAP32[$2 + 220 >> 2]);
      tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($2 + 168 | 0, HEAP32[$2 + 216 >> 2]);
      void_20tflite__reference_ops__AffineQuantize_float_2c_20signed_20char__28tflite__QuantizationParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($0, $2 + 192 | 0, $1, $2 + 168 | 0, signed_20char__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor__29(HEAP32[$2 + 216 >> 2]));
      tflite__RuntimeShape___RuntimeShape_28_29($2 + 168 | 0);
      tflite__RuntimeShape___RuntimeShape_28_29($2 + 192 | 0);
      break label$3;

     case 0:
      $0 = HEAP32[$2 + 224 >> 2];
      tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($2 + 144 | 0, HEAP32[$2 + 220 >> 2]);
      $1 = float_20const__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor_20const__29(HEAP32[$2 + 220 >> 2]);
      tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($2 + 120 | 0, HEAP32[$2 + 216 >> 2]);
      void_20tflite__reference_ops__AffineQuantize_float_2c_20unsigned_20char__28tflite__QuantizationParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($0, $2 + 144 | 0, $1, $2 + 120 | 0, unsigned_20char__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor__29(HEAP32[$2 + 216 >> 2]));
      tflite__RuntimeShape___RuntimeShape_28_29($2 + 120 | 0);
      tflite__RuntimeShape___RuntimeShape_28_29($2 + 144 | 0);
      break label$3;

     case 4:
      $0 = HEAP32[$2 + 224 >> 2];
      tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($2 + 96 | 0, HEAP32[$2 + 220 >> 2]);
      $1 = float_20const__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor_20const__29(HEAP32[$2 + 220 >> 2]);
      tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($2 + 72 | 0, HEAP32[$2 + 216 >> 2]);
      void_20tflite__reference_ops__AffineQuantize_float_2c_20short__28tflite__QuantizationParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20short__29($0, $2 + 96 | 0, $1, $2 + 72 | 0, short__20tflite__micro__GetTensorData_short__28TfLiteEvalTensor__29(HEAP32[$2 + 216 >> 2]));
      tflite__RuntimeShape___RuntimeShape_28_29($2 + 72 | 0);
      tflite__RuntimeShape___RuntimeShape_28_29($2 + 96 | 0);
      HEAP32[$2 + 236 >> 2] = 0;
      break label$2;

     default:
      break label$5;
     }
    }
    $0 = HEAP32[HEAP32[$2 + 232 >> 2] + 20 >> 2];
    $1 = HEAP32[$2 + 232 >> 2];
    $3 = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 220 >> 2] + 8 >> 2]);
    HEAP32[$2 + 4 >> 2] = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 216 >> 2] + 8 >> 2]);
    HEAP32[$2 >> 2] = $3;
    FUNCTION_TABLE[$0 | 0]($1, 112088, $2);
    HEAP32[$2 + 236 >> 2] = 1;
    break label$2;
   }
   label$9: {
    if (HEAP32[HEAP32[$2 + 220 >> 2] + 8 >> 2] == 7) {
     HEAP32[$2 + 68 >> 2] = tflite__ElementCount_28TfLiteIntArray_20const__29(HEAP32[HEAP32[$2 + 220 >> 2] + 4 >> 2]);
     label$11: {
      label$12: {
       switch (HEAP32[HEAP32[$2 + 216 >> 2] + 8 >> 2] - 7 | 0) {
       case 2:
        void_20tflite__reference_ops__Requantize_short_2c_20signed_20char__28short_20const__2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20signed_20char__29(short_20const__20tflite__micro__GetTensorData_short__28TfLiteEvalTensor_20const__29(HEAP32[$2 + 220 >> 2]), HEAP32[$2 + 68 >> 2], HEAP32[HEAP32[$2 + 224 >> 2] + 16 >> 2], HEAP32[HEAP32[$2 + 224 >> 2] + 20 >> 2], HEAP32[HEAP32[$2 + 224 >> 2] + 24 >> 2], HEAP32[HEAP32[$2 + 224 >> 2] >> 2], signed_20char__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor__29(HEAP32[$2 + 216 >> 2]));
        break label$11;

       case 0:
        void_20tflite__reference_ops__Requantize_short_2c_20short__28short_20const__2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20short__29(short_20const__20tflite__micro__GetTensorData_short__28TfLiteEvalTensor_20const__29(HEAP32[$2 + 220 >> 2]), HEAP32[$2 + 68 >> 2], HEAP32[HEAP32[$2 + 224 >> 2] + 16 >> 2], HEAP32[HEAP32[$2 + 224 >> 2] + 20 >> 2], HEAP32[HEAP32[$2 + 224 >> 2] + 24 >> 2], HEAP32[HEAP32[$2 + 224 >> 2] >> 2], short__20tflite__micro__GetTensorData_short__28TfLiteEvalTensor__29(HEAP32[$2 + 216 >> 2]));
        HEAP32[$2 + 236 >> 2] = 0;
        break label$2;

       default:
        break label$12;
       }
      }
      $0 = HEAP32[HEAP32[$2 + 232 >> 2] + 20 >> 2];
      $1 = HEAP32[$2 + 232 >> 2];
      $3 = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 220 >> 2] + 8 >> 2]);
      HEAP32[$2 + 20 >> 2] = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 216 >> 2] + 8 >> 2]);
      HEAP32[$2 + 16 >> 2] = $3;
      FUNCTION_TABLE[$0 | 0]($1, 112088, $2 + 16 | 0);
      HEAP32[$2 + 236 >> 2] = 1;
      break label$2;
     }
     break label$9;
    }
    label$15: {
     if (HEAP32[HEAP32[$2 + 220 >> 2] + 8 >> 2] == 9) {
      HEAP32[$2 + 64 >> 2] = tflite__ElementCount_28TfLiteIntArray_20const__29(HEAP32[HEAP32[$2 + 220 >> 2] + 4 >> 2]);
      label$17: {
       if (HEAP32[HEAP32[$2 + 216 >> 2] + 8 >> 2] == 9) {
        void_20tflite__reference_ops__Requantize_signed_20char_2c_20signed_20char__28signed_20char_20const__2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20signed_20char__29(signed_20char_20const__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor_20const__29(HEAP32[$2 + 220 >> 2]), HEAP32[$2 + 64 >> 2], HEAP32[HEAP32[$2 + 224 >> 2] + 16 >> 2], HEAP32[HEAP32[$2 + 224 >> 2] + 20 >> 2], HEAP32[HEAP32[$2 + 224 >> 2] + 24 >> 2], HEAP32[HEAP32[$2 + 224 >> 2] >> 2], signed_20char__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor__29(HEAP32[$2 + 216 >> 2]));
        break label$17;
       }
       $0 = HEAP32[HEAP32[$2 + 232 >> 2] + 20 >> 2];
       $1 = HEAP32[$2 + 232 >> 2];
       $3 = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 220 >> 2] + 8 >> 2]);
       HEAP32[$2 + 36 >> 2] = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 216 >> 2] + 8 >> 2]);
       HEAP32[$2 + 32 >> 2] = $3;
       FUNCTION_TABLE[$0 | 0]($1, 112088, $2 + 32 | 0);
       HEAP32[$2 + 236 >> 2] = 1;
       break label$2;
      }
      break label$15;
     }
     $0 = HEAP32[HEAP32[$2 + 232 >> 2] + 20 >> 2];
     $1 = HEAP32[$2 + 232 >> 2];
     $3 = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 220 >> 2] + 8 >> 2]);
     HEAP32[$2 + 52 >> 2] = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 216 >> 2] + 8 >> 2]);
     HEAP32[$2 + 48 >> 2] = $3;
     FUNCTION_TABLE[$0 | 0]($1, 112088, $2 + 48 | 0);
     HEAP32[$2 + 236 >> 2] = 1;
     break label$2;
    }
   }
  }
  HEAP32[$2 + 236 >> 2] = 0;
 }
 __stack_pointer = $2 + 240 | 0;
 return HEAP32[$2 + 236 >> 2];
}

function vcbprintf($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 144 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 140 >> 2] = $0;
 HEAP32[$4 + 136 >> 2] = $1;
 HEAP32[$4 + 132 >> 2] = $2;
 HEAP32[$4 + 128 >> 2] = $3;
 while (1) {
  label$2: {
   if (!HEAPU8[HEAP32[$4 + 132 >> 2]]) {
    break label$2;
   }
   label$3: {
    if (HEAP8[HEAP32[$4 + 132 >> 2]] == 37) {
     HEAP32[$4 + 132 >> 2] = HEAP32[$4 + 132 >> 2] + 1;
     $0 = HEAP32[$4 + 132 >> 2];
     HEAP32[$4 + 132 >> 2] = $0 + 1;
     HEAP8[$4 + 95 | 0] = HEAPU8[$0 | 0];
     label$5: {
      label$6: {
       switch (HEAP8[$4 + 95 | 0] - 32 | 0) {
       case 0:
       case 16:
       case 17:
       case 18:
       case 19:
       case 20:
       case 21:
       case 22:
       case 23:
       case 24:
       case 25:
        HEAP32[$4 + 88 >> 2] = 127850;
        if (!HEAPU8[HEAP32[$4 + 132 >> 2]]) {
         break label$5;
        }
        if (HEAP8[$4 + 95 | 0] == 48) {
         HEAP32[$4 + 88 >> 2] = 111390;
         $0 = HEAP32[$4 + 132 >> 2];
         HEAP32[$4 + 132 >> 2] = $0 + 1;
         HEAP8[$4 + 95 | 0] = HEAPU8[$0 | 0];
         if (!HEAPU8[HEAP32[$4 + 132 >> 2]]) {
          break label$5;
         }
        }
        HEAP32[$4 + 84 >> 2] = HEAP8[$4 + 95 | 0] - 48;
        $0 = HEAP32[$4 + 128 >> 2];
        HEAP32[$4 + 128 >> 2] = $0 + 4;
        HEAP32[$4 + 80 >> 2] = HEAP32[$0 >> 2];
        label$18: {
         if (HEAP8[HEAP32[$4 + 132 >> 2]] == 120) {
          itostr_extra(HEAP32[$4 + 80 >> 2], $4 + 96 | 0, 0, 16);
          break label$18;
         }
         itostr_1(HEAP32[$4 + 80 >> 2], $4 + 96 | 0, 10);
        }
        HEAP32[$4 + 132 >> 2] = HEAP32[$4 + 132 >> 2] + 1;
        HEAP32[$4 + 76 >> 2] = strlen($4 + 96 | 0);
        while (1) {
         if (HEAP32[$4 + 76 >> 2] < HEAP32[$4 + 84 >> 2]) {
          FUNCTION_TABLE[HEAP32[$4 + 140 >> 2]](HEAP32[$4 + 88 >> 2], HEAP32[$4 + 136 >> 2]);
          HEAP32[$4 + 76 >> 2] = HEAP32[$4 + 76 >> 2] + 1;
          continue;
         }
         break;
        }
        ;
        FUNCTION_TABLE[HEAP32[$4 + 140 >> 2]]($4 + 96 | 0, HEAP32[$4 + 136 >> 2]);
        break label$5;

       case 68:
       case 73:
        $0 = HEAP32[$4 + 128 >> 2];
        HEAP32[$4 + 128 >> 2] = $0 + 4;
        itostr_1(HEAP32[$0 >> 2], $4 + 96 | 0, 10);
        FUNCTION_TABLE[HEAP32[$4 + 140 >> 2]]($4 + 96 | 0, HEAP32[$4 + 136 >> 2]);
        break label$5;

       case 88:
        $0 = HEAP32[$4 + 128 >> 2];
        HEAP32[$4 + 128 >> 2] = $0 + 4;
        itostr_extra(HEAP32[$0 >> 2], $4 + 96 | 0, 0, 16);
        FUNCTION_TABLE[HEAP32[$4 + 140 >> 2]]($4 + 96 | 0, HEAP32[$4 + 136 >> 2]);
        break label$5;

       case 44:
        HEAP32[$4 + 72 >> 2] = 10;
        HEAP8[$4 + 71 | 0] = 1;
        if (HEAP8[HEAP32[$4 + 132 >> 2]] == 120) {
         HEAP32[$4 + 72 >> 2] = 16;
         HEAP32[$4 + 132 >> 2] = HEAP32[$4 + 132 >> 2] + 1;
         HEAP8[$4 + 71 | 0] = 0;
        }
        $0 = HEAP32[$4 + 128 >> 2];
        HEAP32[$4 + 128 >> 2] = $0 + 4;
        itostr_extra(HEAP32[$0 >> 2], $4 + 96 | 0, HEAP8[$4 + 71 | 0] & 1, HEAP32[$4 + 72 >> 2]);
        FUNCTION_TABLE[HEAP32[$4 + 140 >> 2]]($4 + 96 | 0, HEAP32[$4 + 136 >> 2]);
        break label$5;

       case 70:
        $0 = HEAP32[$4 + 128 >> 2] + 7 & -8;
        HEAP32[$4 + 128 >> 2] = $0 + 8;
        ftoa_bounded(HEAPF64[$0 >> 3], $4 + 96 | 0, 32);
        FUNCTION_TABLE[HEAP32[$4 + 140 >> 2]]($4 + 96 | 0, HEAP32[$4 + 136 >> 2]);
        break label$5;

       case 83:
        $1 = HEAP32[$4 + 140 >> 2];
        $0 = HEAP32[$4 + 128 >> 2];
        HEAP32[$4 + 128 >> 2] = $0 + 4;
        FUNCTION_TABLE[$1 | 0](HEAP32[$0 >> 2], HEAP32[$4 + 136 >> 2]);
        break label$5;

       case 67:
        $0 = HEAP32[$4 + 128 >> 2];
        HEAP32[$4 + 128 >> 2] = $0 + 4;
        HEAP8[$4 + 96 | 0] = HEAP32[$0 >> 2];
        HEAP8[$4 + 97 | 0] = 0;
        FUNCTION_TABLE[HEAP32[$4 + 140 >> 2]]($4 + 96 | 0, HEAP32[$4 + 136 >> 2]);
        break label$5;

       case 49:
       case 81:
       case 86:
        HEAP8[$4 + 70 | 0] = HEAP8[$4 + 95 | 0] != 118;
        HEAP8[$4 + 69 | 0] = HEAP8[$4 + 95 | 0] == 81;
        if (HEAP8[$4 + 70 | 0] & 1) {
         FUNCTION_TABLE[HEAP32[$4 + 140 >> 2]](126943, HEAP32[$4 + 136 >> 2]);
        }
        $0 = HEAP32[$4 + 128 >> 2];
        HEAP32[$4 + 128 >> 2] = $0 + 4;
        HEAP32[$4 + 64 >> 2] = jsvAsString(HEAP32[$0 >> 2]);
        if (jsvIsUTF8String(HEAP32[$4 + 64 >> 2]) & 1) {
         HEAP8[$4 + 69 | 0] = 1;
        }
        HEAP8[$4 + 97 | 0] = 0;
        if (jsvIsString(HEAP32[$4 + 64 >> 2]) & 1) {
         jsvStringIteratorNewUTF8($4 + 24 | 0, HEAP32[$4 + 64 >> 2], 0);
         label$26: {
          if (HEAP8[$4 + 70 | 0] & 1) {
           HEAP32[$4 + 20 >> 2] = jsvStringIteratorGetUTF8CharAndNext($4 + 24 | 0);
           while (1) {
            $0 = 1;
            if (!(jsvStringIteratorHasChar_3($4 + 24 | 0) & 1)) {
             $0 = HEAP32[$4 + 20 >> 2] >= 0;
            }
            if ($0) {
             HEAP32[$4 + 16 >> 2] = jsvStringIteratorGetUTF8CharAndNext($4 + 24 | 0);
             label$31: {
              if (HEAP8[$4 + 70 | 0] & 1) {
               $0 = HEAP32[$4 + 140 >> 2];
               FUNCTION_TABLE[$0 | 0](escapeCharacter(HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2], HEAP8[$4 + 69 | 0] & 1), HEAP32[$4 + 136 >> 2]);
               break label$31;
              }
              FUNCTION_TABLE[HEAP32[$4 + 140 >> 2]]($4 + 96 | 0, HEAP32[$4 + 136 >> 2]);
             }
             HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 16 >> 2];
             continue;
            }
            break;
           }
           break label$26;
          }
          while (1) {
           if (jsvStringIteratorHasChar_3($4 + 24 | 0) & 1) {
            HEAP8[$4 + 96 | 0] = jsvStringIteratorGetCharAndNext($4 + 24 | 0);
            FUNCTION_TABLE[HEAP32[$4 + 140 >> 2]]($4 + 96 | 0, HEAP32[$4 + 136 >> 2]);
            continue;
           }
           break;
          }
         }
         jsvStringIteratorFree_3($4 + 24 | 0);
         jsvUnLock(HEAP32[$4 + 64 >> 2]);
        }
        if (HEAP8[$4 + 70 | 0] & 1) {
         FUNCTION_TABLE[HEAP32[$4 + 140 >> 2]](126943, HEAP32[$4 + 136 >> 2]);
        }
        break label$5;

       case 74:
        $0 = HEAP32[$4 + 128 >> 2];
        HEAP32[$4 + 128 >> 2] = $0 + 4;
        HEAP32[$4 + 12 >> 2] = HEAP32[$0 >> 2];
        jsfGetJSONWithCallback(HEAP32[$4 + 12 >> 2], 0, 8229, 0, HEAP32[$4 + 140 >> 2], HEAP32[$4 + 136 >> 2]);
        break label$5;

       case 84:
        $0 = HEAP32[$4 + 128 >> 2];
        HEAP32[$4 + 128 >> 2] = $0 + 4;
        HEAP32[$4 + 8 >> 2] = HEAP32[$0 >> 2];
        if (jsvIsNull(HEAP32[$4 + 8 >> 2]) & 1) {
         $0 = 102720;
        } else {
         $0 = jswGetBasicObjectName(HEAP32[$4 + 8 >> 2]);
        }
        HEAP32[$4 + 4 >> 2] = $0;
        if (!HEAP32[$4 + 4 >> 2]) {
         HEAP32[$4 + 4 >> 2] = jsvGetTypeOf(HEAP32[$4 + 8 >> 2]);
        }
        FUNCTION_TABLE[HEAP32[$4 + 140 >> 2]](HEAP32[$4 + 4 >> 2], HEAP32[$4 + 136 >> 2]);
        break label$5;

       case 80:
        break label$6;

       default:
        break label$2;
       }
      }
      $0 = HEAP32[$4 + 128 >> 2];
      HEAP32[$4 + 128 >> 2] = $0 + 4;
      jshGetPinString($4 + 96 | 0, HEAP32[$0 >> 2] & 255);
      FUNCTION_TABLE[HEAP32[$4 + 140 >> 2]]($4 + 96 | 0, HEAP32[$4 + 136 >> 2]);
     }
     break label$3;
    }
    $0 = HEAP32[$4 + 132 >> 2];
    HEAP32[$4 + 132 >> 2] = $0 + 1;
    HEAP8[$4 + 96 | 0] = HEAPU8[$0 | 0];
    HEAP8[$4 + 97 | 0] = 0;
    FUNCTION_TABLE[HEAP32[$4 + 140 >> 2]]($4 + 96 | 0, HEAP32[$4 + 136 >> 2]);
   }
   continue;
  }
  break;
 }
 __stack_pointer = $4 + 144 | 0;
}

function tflite__reference_ops__depthwise_conv__DepthwiseConvBasicKernel__28tflite__DepthwiseConvOutputRounding_291___Run_28tflite__DepthwiseParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0;
 $9 = __stack_pointer - 192 | 0;
 __stack_pointer = $9;
 HEAP32[$9 + 188 >> 2] = $0;
 HEAP32[$9 + 184 >> 2] = $1;
 HEAP32[$9 + 180 >> 2] = $2;
 HEAP32[$9 + 176 >> 2] = $3;
 HEAP32[$9 + 172 >> 2] = $4;
 HEAP32[$9 + 168 >> 2] = $5;
 HEAP32[$9 + 164 >> 2] = $6;
 HEAP32[$9 + 160 >> 2] = $7;
 HEAP32[$9 + 156 >> 2] = $8;
 HEAP32[$9 + 152 >> 2] = HEAP16[HEAP32[$9 + 188 >> 2] + 10 >> 1];
 HEAP32[$9 + 148 >> 2] = HEAP16[HEAP32[$9 + 188 >> 2] + 12 >> 1];
 HEAP32[$9 + 144 >> 2] = HEAP16[HEAP32[$9 + 188 >> 2] + 14 >> 1];
 HEAP32[$9 + 140 >> 2] = HEAP16[HEAP32[$9 + 188 >> 2] + 16 >> 1];
 HEAP32[$9 + 136 >> 2] = HEAP16[HEAP32[$9 + 188 >> 2] + 2 >> 1];
 HEAP32[$9 + 132 >> 2] = HEAP16[HEAP32[$9 + 188 >> 2] + 4 >> 1];
 HEAP32[$9 + 128 >> 2] = HEAP16[HEAP32[$9 + 188 >> 2] + 18 >> 1];
 HEAP32[$9 + 124 >> 2] = HEAP32[HEAP32[$9 + 188 >> 2] + 40 >> 2];
 HEAP32[$9 + 120 >> 2] = HEAP32[HEAP32[$9 + 188 >> 2] + 44 >> 2];
 HEAP32[$9 + 116 >> 2] = HEAP32[HEAP32[$9 + 188 >> 2] + 20 >> 2];
 HEAP32[$9 + 112 >> 2] = HEAP32[HEAP32[$9 + 188 >> 2] + 24 >> 2];
 HEAP32[$9 + 108 >> 2] = HEAP32[HEAP32[$9 + 188 >> 2] + 28 >> 2];
 HEAP32[$9 + 104 >> 2] = HEAP32[HEAP32[$9 + 188 >> 2] + 32 >> 2];
 HEAP32[$9 + 100 >> 2] = HEAP32[HEAP32[$9 + 188 >> 2] + 36 >> 2];
 label$1: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$9 + 184 >> 2]) | 0) != 4) {
   break label$1;
  }
 }
 label$2: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$9 + 176 >> 2]) | 0) != 4) {
   break label$2;
  }
 }
 label$3: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$9 + 160 >> 2]) | 0) != 4) {
   break label$3;
  }
 }
 label$4: {
  if (HEAP32[$9 + 124 >> 2] > HEAP32[$9 + 120 >> 2]) {
   break label$4;
  }
 }
 HEAP32[$9 + 96 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$9 + 184 >> 2], 0, HEAP32[$9 + 160 >> 2], 0);
 HEAP32[$9 + 92 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$9 + 176 >> 2], 3, HEAP32[$9 + 160 >> 2], 3);
 HEAP32[$9 + 88 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 184 >> 2], 1);
 HEAP32[$9 + 84 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 184 >> 2], 2);
 HEAP32[$9 + 80 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 184 >> 2], 3);
 HEAP32[$9 + 76 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 176 >> 2], 1);
 HEAP32[$9 + 72 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 176 >> 2], 2);
 HEAP32[$9 + 68 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 160 >> 2], 1);
 HEAP32[$9 + 64 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 160 >> 2], 2);
 label$5: {
  if (HEAP32[$9 + 92 >> 2] != (Math_imul(HEAP32[$9 + 80 >> 2], HEAP32[$9 + 128 >> 2]) | 0)) {
   break label$5;
  }
 }
 label$6: {
  if ((tflite__RuntimeShape__FlatSize_28_29_20const(HEAP32[$9 + 168 >> 2]) | 0) != HEAP32[$9 + 92 >> 2]) {
   break label$6;
  }
 }
 HEAP32[$9 + 60 >> 2] = 0;
 while (1) {
  if (HEAP32[$9 + 60 >> 2] < HEAP32[$9 + 96 >> 2]) {
   HEAP32[$9 + 56 >> 2] = 0;
   while (1) {
    if (HEAP32[$9 + 56 >> 2] < HEAP32[$9 + 68 >> 2]) {
     HEAP32[$9 + 52 >> 2] = 0;
     while (1) {
      if (HEAP32[$9 + 52 >> 2] < HEAP32[$9 + 64 >> 2]) {
       HEAP32[$9 + 48 >> 2] = 0;
       while (1) {
        if (HEAP32[$9 + 48 >> 2] < HEAP32[$9 + 80 >> 2]) {
         HEAP32[$9 + 44 >> 2] = 0;
         while (1) {
          if (HEAP32[$9 + 44 >> 2] < HEAP32[$9 + 128 >> 2]) {
           HEAP32[$9 + 40 >> 2] = HEAP32[$9 + 44 >> 2] + Math_imul(HEAP32[$9 + 48 >> 2], HEAP32[$9 + 128 >> 2]);
           HEAP32[$9 + 36 >> 2] = Math_imul(HEAP32[$9 + 52 >> 2], HEAP32[$9 + 152 >> 2]) - HEAP32[$9 + 136 >> 2];
           HEAP32[$9 + 32 >> 2] = Math_imul(HEAP32[$9 + 56 >> 2], HEAP32[$9 + 148 >> 2]) - HEAP32[$9 + 132 >> 2];
           HEAP32[$9 + 28 >> 2] = 0;
           HEAP32[$9 + 24 >> 2] = 0;
           while (1) {
            if (HEAP32[$9 + 24 >> 2] < HEAP32[$9 + 76 >> 2]) {
             HEAP32[$9 + 20 >> 2] = 0;
             while (1) {
              if (HEAP32[$9 + 20 >> 2] < HEAP32[$9 + 72 >> 2]) {
               HEAP32[$9 + 16 >> 2] = HEAP32[$9 + 36 >> 2] + Math_imul(HEAP32[$9 + 144 >> 2], HEAP32[$9 + 20 >> 2]);
               HEAP32[$9 + 12 >> 2] = HEAP32[$9 + 32 >> 2] + Math_imul(HEAP32[$9 + 140 >> 2], HEAP32[$9 + 24 >> 2]);
               if (!(HEAP32[$9 + 16 >> 2] < 0 | HEAP32[$9 + 16 >> 2] >= HEAP32[$9 + 84 >> 2] | (HEAP32[$9 + 12 >> 2] < 0 | HEAP32[$9 + 12 >> 2] >= HEAP32[$9 + 88 >> 2]))) {
                HEAP32[$9 + 8 >> 2] = HEAPU8[HEAP32[$9 + 180 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$9 + 184 >> 2], HEAP32[$9 + 60 >> 2], HEAP32[$9 + 12 >> 2], HEAP32[$9 + 16 >> 2], HEAP32[$9 + 48 >> 2]) | 0];
                HEAP32[$9 + 4 >> 2] = HEAPU8[HEAP32[$9 + 172 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$9 + 176 >> 2], 0, HEAP32[$9 + 24 >> 2], HEAP32[$9 + 20 >> 2], HEAP32[$9 + 40 >> 2]) | 0];
                HEAP32[$9 + 28 >> 2] = HEAP32[$9 + 28 >> 2] + Math_imul(HEAP32[$9 + 4 >> 2] + HEAP32[$9 + 112 >> 2] | 0, HEAP32[$9 + 8 >> 2] + HEAP32[$9 + 116 >> 2] | 0);
               }
               HEAP32[$9 + 20 >> 2] = HEAP32[$9 + 20 >> 2] + 1;
               continue;
              }
              break;
             }
             HEAP32[$9 + 24 >> 2] = HEAP32[$9 + 24 >> 2] + 1;
             continue;
            }
            break;
           }
           if (HEAP32[$9 + 164 >> 2]) {
            HEAP32[$9 + 28 >> 2] = HEAP32[HEAP32[$9 + 164 >> 2] + (HEAP32[$9 + 40 >> 2] << 2) >> 2] + HEAP32[$9 + 28 >> 2];
           }
           HEAP32[$9 + 28 >> 2] = int_20tflite__reference_ops__depthwise_conv__DepthwiseConvRound__28tflite__DepthwiseConvOutputRounding_291__28int_2c_20int_2c_20int_29(HEAP32[$9 + 28 >> 2], HEAP32[$9 + 104 >> 2], HEAP32[$9 + 100 >> 2]);
           HEAP32[$9 + 28 >> 2] = HEAP32[$9 + 108 >> 2] + HEAP32[$9 + 28 >> 2];
           HEAP32[$9 + 28 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($9 + 28 | 0, $9 + 124 | 0) >> 2];
           HEAP32[$9 + 28 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($9 + 28 | 0, $9 + 120 | 0) >> 2];
           $0 = HEAP32[$9 + 28 >> 2];
           HEAP8[HEAP32[$9 + 156 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$9 + 160 >> 2], HEAP32[$9 + 60 >> 2], HEAP32[$9 + 56 >> 2], HEAP32[$9 + 52 >> 2], HEAP32[$9 + 40 >> 2]) | 0] = $0;
           HEAP32[$9 + 44 >> 2] = HEAP32[$9 + 44 >> 2] + 1;
           continue;
          }
          break;
         }
         HEAP32[$9 + 48 >> 2] = HEAP32[$9 + 48 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$9 + 52 >> 2] = HEAP32[$9 + 52 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$9 + 56 >> 2] = HEAP32[$9 + 56 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$9 + 60 >> 2] = HEAP32[$9 + 60 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $9 + 192 | 0;
}

function tflite__reference_ops__Conv_28tflite__ConvParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__2c_20void__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
 var $12 = 0;
 $12 = __stack_pointer - 192 | 0;
 __stack_pointer = $12;
 HEAP32[$12 + 188 >> 2] = $0;
 HEAP32[$12 + 184 >> 2] = $1;
 HEAP32[$12 + 180 >> 2] = $2;
 HEAP32[$12 + 176 >> 2] = $3;
 HEAP32[$12 + 172 >> 2] = $4;
 HEAP32[$12 + 168 >> 2] = $5;
 HEAP32[$12 + 164 >> 2] = $6;
 HEAP32[$12 + 160 >> 2] = $7;
 HEAP32[$12 + 156 >> 2] = $8;
 HEAP32[$12 + 152 >> 2] = $9;
 HEAP32[$12 + 148 >> 2] = $10;
 HEAP32[$12 + 144 >> 2] = $11;
 HEAP32[$12 + 140 >> 2] = HEAP16[HEAP32[$12 + 188 >> 2] + 10 >> 1];
 HEAP32[$12 + 136 >> 2] = HEAP16[HEAP32[$12 + 188 >> 2] + 12 >> 1];
 HEAP32[$12 + 132 >> 2] = HEAP16[HEAP32[$12 + 188 >> 2] + 14 >> 1];
 HEAP32[$12 + 128 >> 2] = HEAP16[HEAP32[$12 + 188 >> 2] + 16 >> 1];
 HEAP32[$12 + 124 >> 2] = HEAP16[HEAP32[$12 + 188 >> 2] + 2 >> 1];
 HEAP32[$12 + 120 >> 2] = HEAP16[HEAP32[$12 + 188 >> 2] + 4 >> 1];
 HEAP32[$12 + 116 >> 2] = HEAP32[HEAP32[$12 + 188 >> 2] + 20 >> 2];
 HEAP32[$12 + 112 >> 2] = HEAP32[HEAP32[$12 + 188 >> 2] + 24 >> 2];
 HEAP32[$12 + 108 >> 2] = HEAP32[HEAP32[$12 + 188 >> 2] + 28 >> 2];
 HEAP32[$12 + 104 >> 2] = HEAP32[HEAP32[$12 + 188 >> 2] + 32 >> 2];
 HEAP32[$12 + 100 >> 2] = HEAP32[HEAP32[$12 + 188 >> 2] + 36 >> 2];
 HEAP32[$12 + 96 >> 2] = HEAP32[HEAP32[$12 + 188 >> 2] + 40 >> 2];
 HEAP32[$12 + 92 >> 2] = HEAP32[HEAP32[$12 + 188 >> 2] + 44 >> 2];
 label$1: {
  if (HEAP32[$12 + 96 >> 2] > HEAP32[$12 + 92 >> 2]) {
   break label$1;
  }
 }
 label$2: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$12 + 184 >> 2]) | 0) != 4) {
   break label$2;
  }
 }
 label$3: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$12 + 176 >> 2]) | 0) != 4) {
   break label$3;
  }
 }
 label$4: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$12 + 160 >> 2]) | 0) != 4) {
   break label$4;
  }
 }
 HEAP32[$12 + 88 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$12 + 184 >> 2], 0, HEAP32[$12 + 160 >> 2], 0);
 HEAP32[$12 + 84 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$12 + 184 >> 2], 3, HEAP32[$12 + 176 >> 2], 3);
 HEAP32[$12 + 80 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$12 + 176 >> 2], 0, HEAP32[$12 + 160 >> 2], 3);
 if (HEAP32[$12 + 164 >> 2]) {
  label$6: {
   if ((tflite__RuntimeShape__FlatSize_28_29_20const(HEAP32[$12 + 168 >> 2]) | 0) != HEAP32[$12 + 80 >> 2]) {
    break label$6;
   }
  }
 }
 HEAP32[$12 + 76 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$12 + 184 >> 2], 1);
 HEAP32[$12 + 72 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$12 + 184 >> 2], 2);
 HEAP32[$12 + 68 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$12 + 176 >> 2], 1);
 HEAP32[$12 + 64 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$12 + 176 >> 2], 2);
 HEAP32[$12 + 60 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$12 + 160 >> 2], 1);
 HEAP32[$12 + 56 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$12 + 160 >> 2], 2);
 HEAP32[$12 + 52 >> 2] = 0;
 while (1) {
  if (HEAP32[$12 + 52 >> 2] < HEAP32[$12 + 88 >> 2]) {
   HEAP32[$12 + 48 >> 2] = 0;
   while (1) {
    if (HEAP32[$12 + 48 >> 2] < HEAP32[$12 + 60 >> 2]) {
     HEAP32[$12 + 44 >> 2] = 0;
     while (1) {
      if (HEAP32[$12 + 44 >> 2] < HEAP32[$12 + 56 >> 2]) {
       HEAP32[$12 + 40 >> 2] = 0;
       while (1) {
        if (HEAP32[$12 + 40 >> 2] < HEAP32[$12 + 80 >> 2]) {
         HEAP32[$12 + 36 >> 2] = Math_imul(HEAP32[$12 + 44 >> 2], HEAP32[$12 + 140 >> 2]) - HEAP32[$12 + 124 >> 2];
         HEAP32[$12 + 32 >> 2] = Math_imul(HEAP32[$12 + 48 >> 2], HEAP32[$12 + 136 >> 2]) - HEAP32[$12 + 120 >> 2];
         HEAP32[$12 + 28 >> 2] = 0;
         HEAP32[$12 + 24 >> 2] = 0;
         while (1) {
          if (HEAP32[$12 + 24 >> 2] < HEAP32[$12 + 68 >> 2]) {
           HEAP32[$12 + 20 >> 2] = 0;
           while (1) {
            if (HEAP32[$12 + 20 >> 2] < HEAP32[$12 + 64 >> 2]) {
             HEAP32[$12 + 16 >> 2] = 0;
             while (1) {
              if (HEAP32[$12 + 16 >> 2] < HEAP32[$12 + 84 >> 2]) {
               HEAP32[$12 + 12 >> 2] = HEAP32[$12 + 36 >> 2] + Math_imul(HEAP32[$12 + 132 >> 2], HEAP32[$12 + 20 >> 2]);
               HEAP32[$12 + 8 >> 2] = HEAP32[$12 + 32 >> 2] + Math_imul(HEAP32[$12 + 128 >> 2], HEAP32[$12 + 24 >> 2]);
               if (!(HEAP32[$12 + 12 >> 2] < 0 | HEAP32[$12 + 12 >> 2] >= HEAP32[$12 + 72 >> 2] | (HEAP32[$12 + 8 >> 2] < 0 | HEAP32[$12 + 8 >> 2] >= HEAP32[$12 + 76 >> 2]))) {
                HEAP32[$12 + 4 >> 2] = HEAPU8[HEAP32[$12 + 180 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$12 + 184 >> 2], HEAP32[$12 + 52 >> 2], HEAP32[$12 + 8 >> 2], HEAP32[$12 + 12 >> 2], HEAP32[$12 + 16 >> 2]) | 0];
                HEAP32[$12 >> 2] = HEAPU8[HEAP32[$12 + 172 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$12 + 176 >> 2], HEAP32[$12 + 40 >> 2], HEAP32[$12 + 24 >> 2], HEAP32[$12 + 20 >> 2], HEAP32[$12 + 16 >> 2]) | 0];
                HEAP32[$12 + 28 >> 2] = HEAP32[$12 + 28 >> 2] + Math_imul(HEAP32[$12 >> 2] + HEAP32[$12 + 112 >> 2] | 0, HEAP32[$12 + 4 >> 2] + HEAP32[$12 + 116 >> 2] | 0);
               }
               HEAP32[$12 + 16 >> 2] = HEAP32[$12 + 16 >> 2] + 1;
               continue;
              }
              break;
             }
             HEAP32[$12 + 20 >> 2] = HEAP32[$12 + 20 >> 2] + 1;
             continue;
            }
            break;
           }
           HEAP32[$12 + 24 >> 2] = HEAP32[$12 + 24 >> 2] + 1;
           continue;
          }
          break;
         }
         if (HEAP32[$12 + 164 >> 2]) {
          HEAP32[$12 + 28 >> 2] = HEAP32[HEAP32[$12 + 164 >> 2] + (HEAP32[$12 + 40 >> 2] << 2) >> 2] + HEAP32[$12 + 28 >> 2];
         }
         HEAP32[$12 + 28 >> 2] = tflite__MultiplyByQuantizedMultiplier_28int_2c_20int_2c_20int_29(HEAP32[$12 + 28 >> 2], HEAP32[$12 + 104 >> 2], HEAP32[$12 + 100 >> 2]);
         HEAP32[$12 + 28 >> 2] = HEAP32[$12 + 108 >> 2] + HEAP32[$12 + 28 >> 2];
         HEAP32[$12 + 28 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($12 + 28 | 0, $12 + 96 | 0) >> 2];
         HEAP32[$12 + 28 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($12 + 28 | 0, $12 + 92 | 0) >> 2];
         $0 = HEAP32[$12 + 28 >> 2];
         HEAP8[HEAP32[$12 + 156 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$12 + 160 >> 2], HEAP32[$12 + 52 >> 2], HEAP32[$12 + 48 >> 2], HEAP32[$12 + 44 >> 2], HEAP32[$12 + 40 >> 2]) | 0] = $0;
         HEAP32[$12 + 40 >> 2] = HEAP32[$12 + 40 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$12 + 44 >> 2] = HEAP32[$12 + 44 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$12 + 48 >> 2] = HEAP32[$12 + 48 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$12 + 52 >> 2] = HEAP32[$12 + 52 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $12 + 192 | 0;
}

function jswrap_graphics_wrapString($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 $3 = __stack_pointer - 352 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 344 >> 2] = $0;
 HEAP32[$3 + 340 >> 2] = $1;
 HEAP32[$3 + 336 >> 2] = $2;
 label$1: {
  if (!HEAP32[$3 + 340 >> 2]) {
   HEAP32[$3 + 348 >> 2] = jsvNewEmptyArray();
   break label$1;
  }
  if (HEAP32[$3 + 336 >> 2] <= 0) {
   HEAP32[$3 + 348 >> 2] = 0;
   break label$1;
  }
  if (!(graphicsGetFromVar($3 + 264 | 0, HEAP32[$3 + 344 >> 2]) & 1)) {
   HEAP32[$3 + 348 >> 2] = 0;
   break label$1;
  }
  _jswrap_graphics_getFontInfo($3 + 264 | 0, $3 + 240 | 0);
  HEAP32[$3 + 340 >> 2] = jsvAsString(HEAP32[$3 + 340 >> 2]);
  HEAP32[$3 + 236 >> 2] = jsvNewEmptyArray();
  HEAP32[$3 + 232 >> 2] = jsvNewFromEmptyString_14();
  HEAP32[$3 + 228 >> 2] = _jswrap_graphics_getCharWidth($3 + 240 | 0, 32);
  HEAP32[$3 + 224 >> 2] = 0;
  HEAP32[$3 + 220 >> 2] = 0;
  HEAP8[$3 + 219 | 0] = 0;
  HEAP8[$3 + 218 | 0] = 0;
  HEAP32[$3 + 212 >> 2] = 0;
  HEAP8[$3 + 211 | 0] = 0;
  HEAP8[$3 + 210 | 0] = 0;
  jsvStringIteratorNewUTF8($3 + 168 | 0, HEAP32[$3 + 340 >> 2], 0);
  while (1) {
   label$6: {
    label$7: {
     if (!(jsvStringIteratorHasChar_12($3 + 168 | 0) & 1)) {
      $0 = 0;
      if (!(HEAP8[$3 + 211 | 0] & 1)) {
       break label$7;
      }
     }
     $0 = jspIsInterrupted() ^ -1;
    }
    if (!($0 & 1)) {
     break label$6;
    }
    HEAP32[$3 + 164 >> 2] = jsvStringIteratorGetUTF8CharAndNext($3 + 168 | 0);
    $0 = 1;
    label$9: {
     if (HEAP8[$3 + 211 | 0] & 1) {
      break label$9;
     }
     $0 = 1;
     if (HEAP32[$3 + 164 >> 2] == 10) {
      break label$9;
     }
     $0 = HEAP32[$3 + 164 >> 2] == 32;
    }
    HEAP8[$3 + 163 | 0] = $0;
    if (HEAP8[$3 + 219 | 0] & 1 ? 1 : HEAP8[$3 + 163 | 0] & 1) {
     HEAP32[$3 + 156 >> 2] = jsvStringIteratorGetIndex_6($3 + 168 | 0);
     label$12: {
      if (!(HEAP8[$3 + 210 | 0] & 1 | HEAP32[$3 + 336 >> 2] < (HEAP32[$3 + 224 >> 2] + (HEAP32[$3 + 220 >> 2] + HEAP32[$3 + 228 >> 2] | 0) | 0))) {
       if (!(!HEAP8[$3 + 218 | 0] | !HEAP32[$3 + 220 >> 2] & HEAP8[$3 + 218 | 0] == 32)) {
        jsvAppendCharacter_2(HEAP32[$3 + 232 >> 2], HEAP8[$3 + 218 | 0]);
        HEAP32[$3 + 220 >> 2] = HEAP32[$3 + 228 >> 2] + HEAP32[$3 + 220 >> 2];
       }
       jsvAppendStringVar(HEAP32[$3 + 232 >> 2], HEAP32[$3 + 340 >> 2], HEAP32[$3 + 212 >> 2], HEAP32[$3 + 156 >> 2] - (HEAP32[$3 + 212 >> 2] + 1 | 0) | 0);
       HEAP32[$3 + 220 >> 2] = HEAP32[$3 + 224 >> 2] + HEAP32[$3 + 220 >> 2];
       break label$12;
      }
      HEAP32[$3 + 220 >> 2] = HEAP32[$3 + 224 >> 2];
      if (wasm2js_i32$0 = 1, wasm2js_i32$1 = jsvGetStringLength(HEAP32[$3 + 232 >> 2]), 
      wasm2js_i32$2 = HEAP8[$3 + 210 | 0] & 1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) {
       jsvArrayPush(HEAP32[$3 + 236 >> 2], HEAP32[$3 + 232 >> 2]);
      }
      jsvUnLock(HEAP32[$3 + 232 >> 2]);
      HEAP32[$3 + 232 >> 2] = 0;
      while (1) {
       if (HEAP32[$3 + 224 >> 2] > HEAP32[$3 + 336 >> 2]) {
        HEAP32[$3 + 152 >> 2] = 0;
        HEAP32[$3 + 232 >> 2] = jsvNewFromEmptyString_14();
        jsvStringIteratorNew($3 + 112 | 0, HEAP32[$3 + 340 >> 2], HEAP32[$3 + 212 >> 2]);
        while (1) {
         label$21: {
          if (jsvStringIteratorGetIndex_6($3 + 112 | 0) >>> 0 >= HEAPU32[$3 + 156 >> 2]) {
           break label$21;
          }
          HEAP32[$3 + 108 >> 2] = jsvStringIteratorGetUTF8CharAndNext($3 + 112 | 0);
          if (!HEAP32[$3 + 108 >> 2]) {
           jsvAppendStringVar(HEAP32[$3 + 232 >> 2], HEAP32[$3 + 340 >> 2], HEAP32[$3 + 212 >> 2], HEAP32[$3 + 156 >> 2] - (HEAP32[$3 + 212 >> 2] + 1 | 0) | 0);
           HEAP32[$3 + 220 >> 2] = HEAP32[$3 + 224 >> 2] + HEAP32[$3 + 220 >> 2];
           HEAP32[$3 + 224 >> 2] = 0;
           HEAP32[$3 + 212 >> 2] = HEAP32[$3 + 156 >> 2] - 1;
           break label$21;
          }
          HEAP32[$3 + 104 >> 2] = _jswrap_graphics_getCharWidth($3 + 240 | 0, HEAP32[$3 + 108 >> 2]);
          if (HEAP32[$3 + 152 >> 2] ? HEAP32[$3 + 336 >> 2] <= (HEAP32[$3 + 152 >> 2] + HEAP32[$3 + 104 >> 2] | 0) : 0) {
           break label$21;
          }
          HEAP32[$3 + 224 >> 2] = HEAP32[$3 + 224 >> 2] - HEAP32[$3 + 104 >> 2];
          HEAP32[$3 + 220 >> 2] = HEAP32[$3 + 220 >> 2] - HEAP32[$3 + 104 >> 2];
          HEAP32[$3 + 152 >> 2] = HEAP32[$3 + 104 >> 2] + HEAP32[$3 + 152 >> 2];
          HEAP32[$3 + 212 >> 2] = jsvStringIteratorGetIndex_6($3 + 112 | 0);
          jsvAppendCharacter_2(HEAP32[$3 + 232 >> 2], HEAP32[$3 + 108 >> 2] << 24 >> 24);
          continue;
         }
         break;
        }
        jsvStringIteratorFree_16($3 + 112 | 0);
        jsvArrayPush(HEAP32[$3 + 236 >> 2], HEAP32[$3 + 232 >> 2]);
        jsvUnLock(HEAP32[$3 + 232 >> 2]);
        continue;
       }
       break;
      }
      HEAP32[$3 + 232 >> 2] = jsvNewWritableStringFromStringVar(HEAP32[$3 + 340 >> 2], HEAP32[$3 + 212 >> 2], HEAP32[$3 + 156 >> 2] - (HEAP32[$3 + 212 >> 2] + 1 | 0) | 0);
      if (HEAP8[$3 + 210 | 0] & 1) {
       HEAP8[$3 + 218 | 0] = 32;
      }
     }
     HEAP8[$3 + 218 | 0] = 0;
     if (!(!(HEAP8[$3 + 219 | 0] & 1) | HEAP8[$3 + 163 | 0] & 1)) {
      HEAP32[$3 + 156 >> 2] = HEAP32[$3 + 156 >> 2] - 1;
     }
     if (!(!(HEAP8[$3 + 163 | 0] & 1) | HEAP32[$3 + 164 >> 2] <= 0)) {
      HEAP8[$3 + 218 | 0] = HEAP32[$3 + 164 >> 2];
     }
     HEAP32[$3 + 224 >> 2] = 0;
     HEAP32[$3 + 212 >> 2] = HEAP32[$3 + 156 >> 2];
     HEAP8[$3 + 210 | 0] = HEAP32[$3 + 164 >> 2] == 10;
     HEAP8[$3 + 219 | 0] = !HEAP32[$3 + 164 >> 2];
     if (HEAP8[$3 + 211 | 0] & 1) {
      break label$6;
     }
     if (HEAP32[$3 + 164 >> 2]) {
      continue;
     }
    }
    HEAP8[$3 + 219 | 0] = 0;
    if (!HEAP32[$3 + 164 >> 2]) {
     HEAP32[$3 + 12 >> 2] = jsvConvertToUTF8Index(HEAP32[$3 + 340 >> 2], jsvStringIteratorGetIndex_6($3 + 168 | 0));
     if (_jswrap_graphics_parseImage($3 + 264 | 0, HEAP32[$3 + 340 >> 2], HEAP32[$3 + 12 >> 2], $3 + 16 | 0) & 1) {
      jsvStringIteratorGotoUTF8($3 + 168 | 0, HEAP32[$3 + 340 >> 2], HEAPU16[$3 + 66 >> 1] + (HEAP32[$3 + 12 >> 2] + HEAPU16[$3 + 64 >> 1] | 0) | 0);
      _jswrap_graphics_freeImageInfo($3 + 16 | 0);
      HEAP32[$3 + 224 >> 2] = HEAP32[$3 + 16 >> 2] + HEAP32[$3 + 224 >> 2];
      HEAP8[$3 + 219 | 0] = 1;
      if (!(jsvStringIteratorHasChar_12($3 + 168 | 0) & 1)) {
       HEAP8[$3 + 211 | 0] = 1;
      }
     }
     continue;
    }
    HEAP32[$3 + 224 >> 2] = _jswrap_graphics_getCharWidth($3 + 240 | 0, HEAP32[$3 + 164 >> 2]) + HEAP32[$3 + 224 >> 2];
    label$30: {
     label$31: {
      if (HEAP32[$3 + 164 >> 2] == 44 | HEAP32[$3 + 164 >> 2] == 46 | (HEAP32[$3 + 164 >> 2] == 45 | HEAP32[$3 + 164 >> 2] == 47)) {
       break label$31;
      }
      if (HEAP32[$3 + 164 >> 2] == 92) {
       break label$31;
      }
      if (HEAP32[$3 + 164 >> 2] != 58) {
       break label$30;
      }
     }
     HEAP8[$3 + 219 | 0] = 1;
    }
    if (!(jsvStringIteratorHasChar_12($3 + 168 | 0) & 1)) {
     HEAP8[$3 + 211 | 0] = 1;
    }
    continue;
   }
   break;
  }
  jsvStringIteratorFree_16($3 + 168 | 0);
  if (jsvGetStringLength(HEAP32[$3 + 232 >> 2])) {
   jsvArrayPush(HEAP32[$3 + 236 >> 2], HEAP32[$3 + 232 >> 2]);
  }
  jsvUnLock2(HEAP32[$3 + 340 >> 2], HEAP32[$3 + 232 >> 2]);
  _jswrap_graphics_freeFontInfo($3 + 240 | 0);
  HEAP32[$3 + 348 >> 2] = HEAP32[$3 + 236 >> 2];
 }
 __stack_pointer = $3 + 352 | 0;
 return HEAP32[$3 + 348 >> 2];
}

function tflite__MicroAllocator__PrepareNodeAndRegistrationDataFromFlatbuffer_28tflite__Model_20const__2c_20tflite__MicroOpResolver_20const__2c_20tflite__NodeAndRegistration__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = __stack_pointer - 208 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 200 >> 2] = $0;
 HEAP32[$4 + 196 >> 2] = $1;
 HEAP32[$4 + 192 >> 2] = $2;
 HEAP32[$4 + 188 >> 2] = $3;
 $5 = HEAP32[$4 + 200 >> 2];
 label$1: {
  if (!HEAP32[$4 + 196 >> 2]) {
   break label$1;
  }
 }
 label$2: {
  if (!HEAP32[$4 + 188 >> 2]) {
   break label$2;
  }
 }
 HEAP32[$4 + 184 >> 2] = tflite__MicroAllocator__GetSubGraphFromModel_28tflite__Model_20const__29($5, HEAP32[$4 + 196 >> 2]);
 label$3: {
  if (!HEAP32[$4 + 184 >> 2]) {
   break label$3;
  }
 }
 HEAP32[$4 + 180 >> 2] = 0;
 HEAP32[$4 + 176 >> 2] = tflite__Model__operator_codes_28_29_20const(HEAP32[$4 + 196 >> 2]);
 tflite___28anonymous_20namespace_29__MicroBuiltinDataAllocator__MicroBuiltinDataAllocator_28tflite__SimpleMemoryAllocator__29($4 + 168 | 0, HEAP32[$5 + 4 >> 2]);
 HEAP32[$4 + 164 >> 2] = 0;
 label$4: {
  while (1) {
   if (HEAPU32[$4 + 164 >> 2] < flatbuffers__Vector_flatbuffers__Offset_tflite__Operator____size_28_29_20const(tflite__SubGraph__operators_28_29_20const(HEAP32[$4 + 184 >> 2])) >>> 0) {
    HEAP32[$4 + 160 >> 2] = flatbuffers__Vector_flatbuffers__Offset_tflite__Operator____Get_28unsigned_20int_29_20const(tflite__SubGraph__operators_28_29_20const(HEAP32[$4 + 184 >> 2]), HEAP32[$4 + 164 >> 2]);
    HEAP32[$4 + 156 >> 2] = tflite__Operator__opcode_index_28_29_20const(HEAP32[$4 + 160 >> 2]);
    if (HEAPU32[$4 + 156 >> 2] >= flatbuffers__Vector_flatbuffers__Offset_tflite__OperatorCode____size_28_29_20const(HEAP32[$4 + 176 >> 2]) >>> 0) {
     $0 = HEAP32[$5 + 8 >> 2];
     HEAP32[$4 >> 2] = HEAP32[$4 + 156 >> 2];
     tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 128460, $4);
     HEAP32[$4 + 204 >> 2] = 1;
     break label$4;
    }
    HEAP32[$4 + 148 >> 2] = flatbuffers__Vector_flatbuffers__Offset_tflite__OperatorCode____operator_5b_5d_28unsigned_20int_29_20const(HEAP32[$4 + 176 >> 2], HEAP32[$4 + 156 >> 2]);
    HEAP32[$4 + 180 >> 2] = tflite__GetRegistrationFromOpCode_28tflite__OperatorCode_20const__2c_20tflite__OpResolver_20const__2c_20tflite__ErrorReporter__2c_20TfLiteRegistration_20const___29(HEAP32[$4 + 148 >> 2], HEAP32[$4 + 192 >> 2], HEAP32[$5 + 8 >> 2], (HEAP32[$4 + 188 >> 2] + Math_imul(HEAP32[$4 + 164 >> 2], 28) | 0) + 24 | 0);
    if (HEAP32[$4 + 180 >> 2]) {
     $0 = HEAP32[$5 + 8 >> 2];
     HEAP32[$4 + 16 >> 2] = tflite__EnumNameBuiltinOperator_28tflite__BuiltinOperator_29(tflite__OperatorCode__builtin_code_28_29_20const(HEAP32[$4 + 148 >> 2]));
     tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 127804, $4 + 16 | 0);
     HEAP32[$4 + 204 >> 2] = HEAP32[$4 + 180 >> 2];
     break label$4;
    }
    HEAP32[$4 + 144 >> 2] = HEAP32[(HEAP32[$4 + 188 >> 2] + Math_imul(HEAP32[$4 + 164 >> 2], 28) | 0) + 24 >> 2];
    if (!HEAP32[$4 + 144 >> 2]) {
     $0 = HEAP32[$5 + 8 >> 2];
     HEAP32[$4 + 32 >> 2] = HEAP32[$4 + 156 >> 2];
     tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 128427, $4 + 32 | 0);
     HEAP32[$4 + 204 >> 2] = 1;
     break label$4;
    }
    HEAP32[$4 + 140 >> 2] = HEAP32[HEAP32[$4 + 144 >> 2] + 20 >> 2];
    HEAP32[$4 + 136 >> 2] = 0;
    HEAP32[$4 + 132 >> 2] = 0;
    HEAP32[$4 + 128 >> 2] = 0;
    label$10: {
     if (HEAP32[$4 + 140 >> 2] == 32) {
      if (tflite__Operator__custom_options_28_29_20const(HEAP32[$4 + 160 >> 2])) {
       HEAP32[$4 + 136 >> 2] = flatbuffers__Vector_unsigned_20char___data_28_29_20const(tflite__Operator__custom_options_28_29_20const(HEAP32[$4 + 160 >> 2]));
       HEAP32[$4 + 132 >> 2] = flatbuffers__Vector_unsigned_20char___size_28_29_20const(tflite__Operator__custom_options_28_29_20const(HEAP32[$4 + 160 >> 2]));
      }
      break label$10;
     }
     if (tflite__Operator__custom_options_28_29_20const(HEAP32[$4 + 160 >> 2])) {
      $0 = HEAP32[$5 + 8 >> 2];
      HEAP32[$4 + 48 >> 2] = tflite__EnumNameBuiltinOperator_28tflite__BuiltinOperator_29(HEAP32[$4 + 140 >> 2]);
      tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 128824, $4 + 48 | 0);
      HEAP32[$4 + 204 >> 2] = 1;
      break label$4;
     }
     $0 = HEAP32[$4 + 192 >> 2];
     HEAP32[$4 + 124 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, HEAP32[$4 + 140 >> 2]);
     if (!HEAP32[$4 + 124 >> 2]) {
      $0 = HEAP32[$5 + 8 >> 2];
      HEAP32[$4 + 64 >> 2] = tflite__EnumNameBuiltinOperator_28tflite__BuiltinOperator_29(HEAP32[$4 + 140 >> 2]);
      tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 100682, $4 - -64 | 0);
      HEAP32[$4 + 204 >> 2] = 1;
      break label$4;
     }
     HEAP32[$4 + 120 >> 2] = FUNCTION_TABLE[HEAP32[$4 + 124 >> 2]](HEAP32[$4 + 160 >> 2], HEAP32[$5 + 8 >> 2], $4 + 168 | 0, $4 + 128 | 0);
     if (HEAP32[$4 + 120 >> 2]) {
      HEAP32[$4 + 204 >> 2] = HEAP32[$4 + 120 >> 2];
      break label$4;
     }
    }
    HEAP32[$4 + 112 >> 2] = TfLiteStatus_20tflite__internal__FlatBufferVectorToTfLiteTypeArray_int_2c_20TfLiteIntArray__28tflite__SimpleMemoryAllocator__2c_20tflite__ErrorReporter__2c_20flatbuffers__Vector_int__20const__2c_20TfLiteIntArray___29(HEAP32[$5 + 4 >> 2], HEAP32[$5 + 8 >> 2], tflite__Operator__inputs_28_29_20const(HEAP32[$4 + 160 >> 2]), $4 + 116 | 0);
    if (HEAP32[$4 + 112 >> 2]) {
     HEAP32[$4 + 204 >> 2] = HEAP32[$4 + 112 >> 2];
     break label$4;
    }
    HEAP32[$4 + 104 >> 2] = TfLiteStatus_20tflite__internal__FlatBufferVectorToTfLiteTypeArray_int_2c_20TfLiteIntArray__28tflite__SimpleMemoryAllocator__2c_20tflite__ErrorReporter__2c_20flatbuffers__Vector_int__20const__2c_20TfLiteIntArray___29(HEAP32[$5 + 4 >> 2], HEAP32[$5 + 8 >> 2], tflite__Operator__outputs_28_29_20const(HEAP32[$4 + 160 >> 2]), $4 + 108 | 0);
    if (HEAP32[$4 + 104 >> 2]) {
     HEAP32[$4 + 204 >> 2] = HEAP32[$4 + 104 >> 2];
     break label$4;
    } else {
     HEAP32[$4 + 100 >> 2] = HEAP32[$4 + 188 >> 2] + Math_imul(HEAP32[$4 + 164 >> 2], 28);
     HEAP32[$4 + 88 >> 2] = 0;
     HEAP32[$4 + 92 >> 2] = 0;
     HEAP32[$4 + 80 >> 2] = 0;
     HEAP32[$4 + 84 >> 2] = 0;
     HEAP32[$4 + 72 >> 2] = 0;
     HEAP32[$4 + 76 >> 2] = 0;
     $2 = HEAP32[$4 + 76 >> 2];
     $0 = HEAP32[$4 + 72 >> 2];
     $3 = $0;
     $1 = HEAP32[$4 + 100 >> 2];
     $0 = $1;
     HEAP32[$0 >> 2] = $3;
     HEAP32[$0 + 4 >> 2] = $2;
     $0 = HEAP32[$4 + 92 >> 2];
     $2 = HEAP32[$4 + 88 >> 2];
     $3 = $2;
     $2 = $1;
     HEAP32[$2 + 16 >> 2] = $3;
     HEAP32[$2 + 20 >> 2] = $0;
     $2 = HEAP32[$4 + 84 >> 2];
     $0 = HEAP32[$4 + 80 >> 2];
     $3 = $0;
     $0 = $1;
     HEAP32[$0 + 8 >> 2] = $3;
     HEAP32[$0 + 12 >> 2] = $2;
     HEAP32[HEAP32[$4 + 100 >> 2] >> 2] = HEAP32[$4 + 116 >> 2];
     HEAP32[HEAP32[$4 + 100 >> 2] + 4 >> 2] = HEAP32[$4 + 108 >> 2];
     HEAP32[HEAP32[$4 + 100 >> 2] + 12 >> 2] = HEAP32[$4 + 128 >> 2];
     HEAP32[HEAP32[$4 + 100 >> 2] + 16 >> 2] = HEAP32[$4 + 136 >> 2];
     HEAP32[HEAP32[$4 + 100 >> 2] + 20 >> 2] = HEAP32[$4 + 132 >> 2];
     HEAP32[$4 + 164 >> 2] = HEAP32[$4 + 164 >> 2] + 1;
     continue;
    }
   }
   break;
  }
  HEAP32[$4 + 204 >> 2] = 0;
 }
 HEAP32[$4 + 152 >> 2] = 1;
 tflite___28anonymous_20namespace_29__MicroBuiltinDataAllocator___MicroBuiltinDataAllocator_28_29($4 + 168 | 0);
 __stack_pointer = $4 + 208 | 0;
 return HEAP32[$4 + 204 >> 2];
}

function __jspeBinaryExpression($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 208 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 204 >> 2] = $0;
 HEAP32[$2 + 200 >> 2] = $1;
 HEAP32[$2 + 196 >> 2] = jspeGetBinaryExpressionPrecedence(HEAP16[HEAP32[38615] + 2 >> 1]);
 while (1) {
  $0 = 0;
  $0 = HEAP32[$2 + 196 >> 2] ? HEAPU32[$2 + 196 >> 2] > HEAPU32[$2 + 200 >> 2] : $0;
  if ($0) {
   HEAP32[$2 + 192 >> 2] = HEAP16[HEAP32[38615] + 2 >> 1];
   jslGetNextToken();
   label$4: {
    if (!(HEAP32[$2 + 192 >> 2] != 158 & HEAP32[$2 + 192 >> 2] != 160)) {
     HEAP32[$2 + 188 >> 2] = jsvSkipNameAndUnLock(HEAP32[$2 + 204 >> 2]);
     HEAP8[$2 + 187 | 0] = jsvGetBool(HEAP32[$2 + 188 >> 2]) & 1;
     label$7: {
      if (!(!(!(HEAP8[$2 + 187 | 0] & 1) & HEAP32[$2 + 192 >> 2] == 158) & (!(HEAP8[$2 + 187 | 0] & 1) | HEAP32[$2 + 192 >> 2] != 160))) {
       HEAP32[$2 + 204 >> 2] = HEAP32[$2 + 188 >> 2];
       HEAP32[$2 + 180 >> 2] = HEAP32[46755];
       jspSetNoExecute();
       jsvUnLock(__jspeBinaryExpression(jspeUnaryExpression(), HEAP32[$2 + 196 >> 2]));
       HEAP32[46755] = HEAP32[46755] & -1664 | HEAP32[$2 + 180 >> 2] & 1663;
       break label$7;
      }
      jsvUnLock(HEAP32[$2 + 188 >> 2]);
      HEAP32[$2 + 204 >> 2] = __jspeBinaryExpression(jspeUnaryExpression(), HEAP32[$2 + 196 >> 2]);
     }
     break label$4;
    }
    label$11: {
     if (HEAP32[$2 + 192 >> 2] == 208) {
      HEAP32[$2 + 176 >> 2] = jsvSkipNameAndUnLock(HEAP32[$2 + 204 >> 2]);
      label$13: {
       if (jsvIsNullish(HEAP32[$2 + 176 >> 2]) & 1) {
        if (!(jsvIsUndefined(HEAP32[$2 + 176 >> 2]) & 1)) {
         jsvUnLock(HEAP32[$2 + 176 >> 2]);
        }
        HEAP32[$2 + 204 >> 2] = __jspeBinaryExpression(jspeUnaryExpression(), HEAP32[$2 + 196 >> 2]);
        break label$13;
       }
       HEAP32[$2 + 204 >> 2] = HEAP32[$2 + 176 >> 2];
       HEAP32[$2 + 172 >> 2] = HEAP32[46755];
       jspSetNoExecute();
       jsvUnLock(__jspeBinaryExpression(jspeUnaryExpression(), HEAP32[$2 + 196 >> 2]));
       HEAP32[46755] = HEAP32[46755] & -1664 | HEAP32[$2 + 172 >> 2] & 1663;
      }
      break label$11;
     }
     HEAP32[$2 + 168 >> 2] = __jspeBinaryExpression(jspeUnaryExpression(), HEAP32[$2 + 196 >> 2]);
     if ((HEAP32[46755] & 63) == 1) {
      label$17: {
       if (HEAP32[$2 + 192 >> 2] == 185) {
        HEAP32[$2 + 164 >> 2] = jsvSkipName(HEAP32[$2 + 204 >> 2]);
        HEAP32[$2 + 160 >> 2] = jsvSkipName(HEAP32[$2 + 168 >> 2]);
        label$19: {
         if (jsvHasChildren(HEAP32[$2 + 160 >> 2]) & 1) {
          HEAP32[$2 + 164 >> 2] = jsvAsArrayIndexAndUnLock(HEAP32[$2 + 164 >> 2]);
          HEAP32[$2 + 156 >> 2] = jspGetVarNamedField(HEAP32[$2 + 160 >> 2], HEAP32[$2 + 164 >> 2], 1);
          jsvUnLock2(HEAP32[$2 + 204 >> 2], HEAP32[$2 + 156 >> 2]);
          HEAP32[$2 + 204 >> 2] = jsvNewFromBool(HEAP32[$2 + 156 >> 2] != 0);
          break label$19;
         }
         HEAP32[$2 + 152 >> 2] = jswGetSymbolListForObjectProto(HEAP32[$2 + 160 >> 2]);
         label$21: {
          if (HEAP32[$2 + 152 >> 2]) {
           HEAP32[$2 + 148 >> 2] = 0;
           if (jsvGetString(HEAP32[$2 + 164 >> 2], $2 + 80 | 0, 64) >>> 0 < 64) {
            HEAP32[$2 + 148 >> 2] = jswBinarySearch(HEAP32[$2 + 152 >> 2], HEAP32[$2 + 160 >> 2], $2 + 80 | 0);
           }
           HEAP8[$2 + 79 | 0] = HEAP32[$2 + 148 >> 2] != 0;
           jsvUnLock2(HEAP32[$2 + 204 >> 2], HEAP32[$2 + 148 >> 2]);
           label$24: {
            if (HEAP8[$2 + 79 | 0] & 1) {
             break label$24;
            }
            if (!(jsvIsArrayBuffer(HEAP32[$2 + 160 >> 2]) & 1)) {
             break label$24;
            }
            HEAPF64[$2 + 64 >> 3] = jsvGetFloat(HEAP32[$2 + 164 >> 2]);
            label$25: {
             if (!(HEAPF64[$2 + 64 >> 3] >= 0) | HEAPF64[$2 + 64 >> 3] != Math_floor(HEAPF64[$2 + 64 >> 3])) {
              break label$25;
             }
             if (!(HEAPF64[$2 + 64 >> 3] < +(jsvGetArrayBufferLength(HEAP32[$2 + 160 >> 2]) >>> 0))) {
              break label$25;
             }
             HEAP8[$2 + 79 | 0] = 1;
            }
           }
           HEAP32[$2 + 204 >> 2] = jsvNewFromBool(HEAP8[$2 + 79 | 0] & 1);
           break label$21;
          }
          HEAP32[$2 >> 2] = HEAP32[$2 + 160 >> 2];
          jsExceptionHere(1, 99617, $2);
          jsvUnLock(HEAP32[$2 + 204 >> 2]);
          HEAP32[$2 + 204 >> 2] = 0;
         }
        }
        jsvUnLock2(HEAP32[$2 + 164 >> 2], HEAP32[$2 + 160 >> 2]);
        break label$17;
       }
       label$26: {
        if (HEAP32[$2 + 192 >> 2] == 186) {
         HEAP8[$2 + 63 | 0] = 0;
         HEAP32[$2 + 56 >> 2] = jsvSkipName(HEAP32[$2 + 204 >> 2]);
         HEAP32[$2 + 52 >> 2] = jsvSkipName(HEAP32[$2 + 168 >> 2]);
         label$28: {
          if (!(jsvIsFunction(HEAP32[$2 + 52 >> 2]) & 1)) {
           HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 52 >> 2];
           jsExceptionHere(1, 99244, $2 + 16 | 0);
           break label$28;
          }
          label$30: {
           if (!(jsvIsObject(HEAP32[$2 + 56 >> 2]) & 1)) {
            if (!(jsvIsFunction(HEAP32[$2 + 56 >> 2]) & 1)) {
             break label$30;
            }
           }
           HEAP32[$2 + 48 >> 2] = jspGetNamedField(HEAP32[$2 + 52 >> 2], 104794, 0);
           HEAP32[$2 + 44 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 56 >> 2], 107914);
           while (1) {
            if (jsvHasChildren(HEAP32[$2 + 44 >> 2]) & 1) {
             if (HEAP32[$2 + 44 >> 2] == HEAP32[$2 + 48 >> 2]) {
              HEAP8[$2 + 63 | 0] = 1;
             }
             HEAP32[$2 + 40 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 44 >> 2], 107914);
             jsvUnLock(HEAP32[$2 + 44 >> 2]);
             HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 40 >> 2];
             continue;
            }
            break;
           }
           if (jspIsConstructor(HEAP32[$2 + 52 >> 2], 98070) & 1) {
            HEAP8[$2 + 63 | 0] = 1;
           }
           jsvUnLock2(HEAP32[$2 + 48 >> 2], HEAP32[$2 + 44 >> 2]);
          }
          if (!(HEAP8[$2 + 63 | 0] & 1)) {
           HEAP32[$2 + 36 >> 2] = jswGetBasicObjectName(HEAP32[$2 + 56 >> 2]);
           if (HEAP32[$2 + 36 >> 2]) {
            HEAP8[$2 + 63 | 0] = jspIsConstructor(HEAP32[$2 + 52 >> 2], HEAP32[$2 + 36 >> 2]) & 1;
           }
           label$38: {
            if (HEAP8[$2 + 63 | 0] & 1) {
             break label$38;
            }
            if (!(jsvIsArray(HEAP32[$2 + 56 >> 2]) & 1)) {
             if (!(jsvIsArrayBuffer(HEAP32[$2 + 56 >> 2]) & 1)) {
              break label$38;
             }
            }
            if (!(jspIsConstructor(HEAP32[$2 + 52 >> 2], 98070) & 1)) {
             break label$38;
            }
            HEAP8[$2 + 63 | 0] = 1;
           }
          }
         }
         jsvUnLock3(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2], HEAP32[$2 + 204 >> 2]);
         HEAP32[$2 + 204 >> 2] = jsvNewFromBool(HEAP8[$2 + 63 | 0] & 1);
         break label$26;
        }
        HEAP32[$2 + 32 >> 2] = jsvMathsOpSkipNames(HEAP32[$2 + 204 >> 2], HEAP32[$2 + 168 >> 2], HEAP32[$2 + 192 >> 2]);
        jsvUnLock(HEAP32[$2 + 204 >> 2]);
        HEAP32[$2 + 204 >> 2] = HEAP32[$2 + 32 >> 2];
       }
      }
     }
     jsvUnLock(HEAP32[$2 + 168 >> 2]);
    }
   }
   HEAP32[$2 + 196 >> 2] = jspeGetBinaryExpressionPrecedence(HEAP16[HEAP32[38615] + 2 >> 1]);
   continue;
  }
  break;
 }
 __stack_pointer = $2 + 208 | 0;
 return HEAP32[$2 + 204 >> 2];
}

function jsiDumpState($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = __stack_pointer - 272 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 268 >> 2] = $0;
 HEAP32[$2 + 264 >> 2] = $1;
 jsvObjectIteratorNew($2 + 256 | 0, HEAP32[46747]);
 while (1) {
  if (jsvObjectIteratorHasValue_3($2 + 256 | 0) & 1) {
   HEAP32[$2 + 252 >> 2] = jsvObjectIteratorGetKey_3($2 + 256 | 0);
   HEAP32[$2 + 248 >> 2] = jsvObjectIteratorGetValue_3($2 + 256 | 0);
   jsvGetString(HEAP32[$2 + 252 >> 2], $2 + 176 | 0, 64);
   HEAP8[$2 + 175 | 0] = 0;
   HEAP32[$2 + 168 >> 2] = 140909;
   while (1) {
    if (HEAPU8[HEAP32[$2 + 168 >> 2]]) {
     if (!strcmp(HEAP32[$2 + 168 >> 2], $2 + 176 | 0)) {
      HEAP8[$2 + 175 | 0] = 1;
     }
     HEAP32[$2 + 168 >> 2] = (strlen(HEAP32[$2 + 168 >> 2]) + 1 | 0) + HEAP32[$2 + 168 >> 2];
     continue;
    }
    break;
   }
   if (!(HEAP8[$2 + 175 | 0] & 1)) {
    label$7: {
     if (jswIsBuiltInObject($2 + 176 | 0) & 1) {
      jsiDumpObjectState(HEAP32[$2 + 268 >> 2], HEAP32[$2 + 264 >> 2], HEAP32[$2 + 252 >> 2], HEAP32[$2 + 248 >> 2]);
      break label$7;
     }
     if (!(jsvIsStringEqualOrStartsWith(HEAP32[$2 + 252 >> 2], 102470, 1) & 1)) {
      if (!(jsvIsStringEqual(HEAP32[$2 + 252 >> 2], 100100) & 1)) {
       if (!(jsvIsStringEqual(HEAP32[$2 + 252 >> 2], 100438) & 1)) {
        label$12: {
         if (HEAP8[HEAP32[$2 + 252 >> 2]] == -1) {
          break label$12;
         }
         if (jshFromDeviceString($2 + 176 | 0) & 255) {
          break label$12;
         }
         if (!(jsvIsNativeFunction(HEAP32[$2 + 248 >> 2]) & 1)) {
          label$15: {
           if (jsvIsFunction(HEAP32[$2 + 248 >> 2]) & 1) {
            $0 = HEAP32[$2 + 268 >> 2];
            $1 = HEAP32[$2 + 264 >> 2];
            HEAP32[$2 >> 2] = HEAP32[$2 + 252 >> 2];
            cbprintf($0, $1, 97079, $2);
            jsfGetJSONForFunctionWithCallback(HEAP32[$2 + 248 >> 2], 32, HEAP32[$2 + 268 >> 2], HEAP32[$2 + 264 >> 2]);
            FUNCTION_TABLE[HEAP32[$2 + 268 >> 2]](129587, HEAP32[$2 + 264 >> 2]);
            jsiDumpObjectState(HEAP32[$2 + 268 >> 2], HEAP32[$2 + 264 >> 2], HEAP32[$2 + 252 >> 2], HEAP32[$2 + 248 >> 2]);
            break label$15;
           }
           $0 = HEAP32[$2 + 268 >> 2];
           $1 = HEAP32[$2 + 264 >> 2];
           HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 252 >> 2];
           cbprintf($0, $1, 127677, $2 + 32 | 0);
           HEAP8[$2 + 167 | 0] = 0;
           if (jsvIsObject(HEAP32[$2 + 248 >> 2]) & 1) {
            HEAP32[$2 + 160 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 248 >> 2], 107914);
            if (HEAP32[$2 + 160 >> 2]) {
             HEAP32[$2 + 156 >> 2] = jsvGetPathTo(HEAP32[46747], HEAP32[$2 + 160 >> 2], 4, HEAP32[$2 + 248 >> 2]);
             if (HEAP32[$2 + 156 >> 2]) {
              $0 = HEAP32[$2 + 268 >> 2];
              $1 = HEAP32[$2 + 264 >> 2];
              HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 156 >> 2];
              cbprintf($0, $1, 128651, $2 + 16 | 0);
              jsiDumpObjectState(HEAP32[$2 + 268 >> 2], HEAP32[$2 + 264 >> 2], HEAP32[$2 + 252 >> 2], HEAP32[$2 + 248 >> 2]);
              HEAP8[$2 + 167 | 0] = 1;
             }
            }
           }
           if (!(HEAP8[$2 + 167 | 0] & 1)) {
            jsiDumpJSON(HEAP32[$2 + 268 >> 2], HEAP32[$2 + 264 >> 2], HEAP32[$2 + 248 >> 2], HEAP32[$2 + 252 >> 2]);
            FUNCTION_TABLE[HEAP32[$2 + 268 >> 2]](128775, HEAP32[$2 + 264 >> 2]);
           }
          }
         }
        }
       }
      }
     }
    }
   }
   jsvUnLock2(HEAP32[$2 + 248 >> 2], HEAP32[$2 + 252 >> 2]);
   jsvObjectIteratorNext($2 + 256 | 0);
   continue;
  }
  break;
 }
 jsvObjectIteratorFree_3($2 + 256 | 0);
 HEAP32[$2 + 152 >> 2] = jsvLock(HEAPU16[93522]);
 jsvObjectIteratorNew($2 + 256 | 0, HEAP32[$2 + 152 >> 2]);
 jsvUnLock(HEAP32[$2 + 152 >> 2]);
 while (1) {
  if (jsvObjectIteratorHasValue_3($2 + 256 | 0) & 1) {
   HEAP32[$2 + 148 >> 2] = jsvObjectIteratorGetValue_3($2 + 256 | 0);
   HEAP32[$2 + 144 >> 2] = jsvObjectIteratorGetKey_3($2 + 256 | 0);
   HEAP32[$2 + 140 >> 2] = jsvSkipOneNameAndUnLock(jsvFindChildFromString(HEAP32[$2 + 148 >> 2], 107791));
   HEAP32[$2 + 136 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 148 >> 2], 100885);
   FUNCTION_TABLE[HEAP32[$2 + 268 >> 2]](HEAP32[$2 + 136 >> 2] ? 126652 : 126630, HEAP32[$2 + 264 >> 2]);
   jsiDumpJSON(HEAP32[$2 + 268 >> 2], HEAP32[$2 + 264 >> 2], HEAP32[$2 + 140 >> 2], 0);
   $4 = HEAP32[$2 + 268 >> 2];
   $5 = HEAP32[$2 + 264 >> 2];
   label$23: {
    if (HEAP32[$2 + 136 >> 2]) {
     $0 = jsvGetLongInteger(HEAP32[$2 + 136 >> 2]);
     $3 = $0;
     $1 = i64toi32_i32$HIGH_BITS;
     $0 = $1;
     break label$23;
    }
    $1 = jsvGetLongIntegerAndUnLock(jsvObjectGetChildIfExists(HEAP32[$2 + 148 >> 2], 105007));
    $3 = $1;
    $0 = i64toi32_i32$HIGH_BITS;
   }
   $6 = jshGetMillisecondsFromTime($3, $0);
   HEAP32[$2 + 56 >> 2] = HEAP32[$2 + 144 >> 2];
   HEAPF64[$2 + 48 >> 3] = $6;
   cbprintf($4, $5, 127934, $2 + 48 | 0);
   jsvUnLock3(HEAP32[$2 + 136 >> 2], HEAP32[$2 + 140 >> 2], HEAP32[$2 + 144 >> 2]);
   jsvUnLock(HEAP32[$2 + 148 >> 2]);
   jsvObjectIteratorNext($2 + 256 | 0);
   continue;
  }
  break;
 }
 jsvObjectIteratorFree_3($2 + 256 | 0);
 HEAP32[$2 + 132 >> 2] = jsvLock(HEAPU16[93523]);
 jsvObjectIteratorNew($2 + 256 | 0, HEAP32[$2 + 132 >> 2]);
 jsvUnLock(HEAP32[$2 + 132 >> 2]);
 while (1) {
  if (jsvObjectIteratorHasValue_3($2 + 256 | 0) & 1) {
   HEAP32[$2 + 128 >> 2] = jsvObjectIteratorGetValue_3($2 + 256 | 0);
   HEAP32[$2 + 124 >> 2] = jsvSkipOneNameAndUnLock(jsvFindChildFromString(HEAP32[$2 + 128 >> 2], 107791));
   HEAP8[$2 + 123 | 0] = jsvObjectGetBoolChild(HEAP32[$2 + 128 >> 2], 100836) & 1;
   HEAP32[$2 + 116 >> 2] = jsvObjectGetIntegerChild(HEAP32[$2 + 128 >> 2], 105312);
   HEAP32[$2 + 112 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 128 >> 2], 102482);
   HEAP32[$2 + 108 >> 2] = jsvObjectGetIntegerChild(HEAP32[$2 + 128 >> 2], 105460);
   FUNCTION_TABLE[HEAP32[$2 + 268 >> 2]](126679, HEAP32[$2 + 264 >> 2]);
   jsiDumpJSON(HEAP32[$2 + 268 >> 2], HEAP32[$2 + 264 >> 2], HEAP32[$2 + 124 >> 2], 0);
   $0 = HEAP32[$2 + 268 >> 2];
   $1 = HEAP32[$2 + 264 >> 2];
   $3 = HEAP32[$2 + 112 >> 2];
   $4 = HEAP8[$2 + 123 | 0] & 1 ? 104396 : 104720;
   HEAP32[$2 + 88 >> 2] = HEAP32[$2 + 116 >> 2] < 0 ? 103964 : HEAP32[$2 + 116 >> 2] > 0 ? 103678 : 103329;
   HEAP32[$2 + 84 >> 2] = $4;
   HEAP32[$2 + 80 >> 2] = $3;
   cbprintf($0, $1, 126742, $2 + 80 | 0);
   if (HEAP32[$2 + 108 >> 2] > 0) {
    $3 = HEAP32[$2 + 268 >> 2];
    $4 = HEAP32[$2 + 264 >> 2];
    $0 = HEAP32[$2 + 108 >> 2];
    $1 = $0 >> 31;
    HEAPF64[$2 + 64 >> 3] = jshGetMillisecondsFromTime($0, $1);
    cbprintf($3, $4, 104130, $2 - -64 | 0);
   }
   FUNCTION_TABLE[HEAP32[$2 + 268 >> 2]](128645, HEAP32[$2 + 264 >> 2]);
   jsvUnLock2(HEAP32[$2 + 112 >> 2], HEAP32[$2 + 124 >> 2]);
   jsvUnLock(HEAP32[$2 + 128 >> 2]);
   jsvObjectIteratorNext($2 + 256 | 0);
   continue;
  }
  break;
 }
 jsvObjectIteratorFree_3($2 + 256 | 0);
 jsiDumpHardwareInitialisation(HEAP32[$2 + 268 >> 2], HEAP32[$2 + 264 >> 2], 1);
 HEAP32[$2 + 104 >> 2] = jsfGetBootCodeFromFlash(0);
 if (HEAP32[$2 + 104 >> 2]) {
  cbprintf(HEAP32[$2 + 268 >> 2], HEAP32[$2 + 264 >> 2], 128294, 0);
  jslPrintTokenisedString(HEAP32[$2 + 104 >> 2], HEAP32[$2 + 268 >> 2], HEAP32[$2 + 264 >> 2]);
  jsvUnLock(HEAP32[$2 + 104 >> 2]);
 }
 __stack_pointer = $2 + 272 | 0;
}

function tflite__reference_ops__Conv_28tflite__ConvParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__2c_20tflite__RuntimeShape_20const__2c_20float__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 var $11 = 0, $12 = Math_fround(0);
 $11 = __stack_pointer - 176 | 0;
 __stack_pointer = $11;
 HEAP32[$11 + 172 >> 2] = $0;
 HEAP32[$11 + 168 >> 2] = $1;
 HEAP32[$11 + 164 >> 2] = $2;
 HEAP32[$11 + 160 >> 2] = $3;
 HEAP32[$11 + 156 >> 2] = $4;
 HEAP32[$11 + 152 >> 2] = $5;
 HEAP32[$11 + 148 >> 2] = $6;
 HEAP32[$11 + 144 >> 2] = $7;
 HEAP32[$11 + 140 >> 2] = $8;
 HEAP32[$11 + 136 >> 2] = $9;
 HEAP32[$11 + 132 >> 2] = $10;
 HEAP32[$11 + 128 >> 2] = HEAP16[HEAP32[$11 + 172 >> 2] + 10 >> 1];
 HEAP32[$11 + 124 >> 2] = HEAP16[HEAP32[$11 + 172 >> 2] + 12 >> 1];
 HEAP32[$11 + 120 >> 2] = HEAP16[HEAP32[$11 + 172 >> 2] + 14 >> 1];
 HEAP32[$11 + 116 >> 2] = HEAP16[HEAP32[$11 + 172 >> 2] + 16 >> 1];
 HEAP32[$11 + 112 >> 2] = HEAP16[HEAP32[$11 + 172 >> 2] + 2 >> 1];
 HEAP32[$11 + 108 >> 2] = HEAP16[HEAP32[$11 + 172 >> 2] + 4 >> 1];
 HEAPF32[$11 + 104 >> 2] = HEAPF32[HEAP32[$11 + 172 >> 2] + 48 >> 2];
 HEAPF32[$11 + 100 >> 2] = HEAPF32[HEAP32[$11 + 172 >> 2] + 52 >> 2];
 label$1: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$11 + 168 >> 2]) | 0) != 4) {
   break label$1;
  }
 }
 label$2: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$11 + 160 >> 2]) | 0) != 4) {
   break label$2;
  }
 }
 label$3: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$11 + 144 >> 2]) | 0) != 4) {
   break label$3;
  }
 }
 HEAP32[$11 + 96 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$11 + 168 >> 2], 0, HEAP32[$11 + 144 >> 2], 0);
 HEAP32[$11 + 92 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$11 + 168 >> 2], 3, HEAP32[$11 + 160 >> 2], 3);
 HEAP32[$11 + 88 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$11 + 160 >> 2], 0, HEAP32[$11 + 144 >> 2], 3);
 if (HEAP32[$11 + 148 >> 2]) {
  label$5: {
   if ((tflite__RuntimeShape__FlatSize_28_29_20const(HEAP32[$11 + 152 >> 2]) | 0) != HEAP32[$11 + 88 >> 2]) {
    break label$5;
   }
  }
 }
 HEAP32[$11 + 84 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 168 >> 2], 1);
 HEAP32[$11 + 80 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 168 >> 2], 2);
 HEAP32[$11 + 76 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 160 >> 2], 1);
 HEAP32[$11 + 72 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 160 >> 2], 2);
 HEAP32[$11 + 68 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 144 >> 2], 1);
 HEAP32[$11 + 64 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 144 >> 2], 2);
 HEAP32[$11 + 60 >> 2] = 0;
 while (1) {
  if (HEAP32[$11 + 60 >> 2] < HEAP32[$11 + 96 >> 2]) {
   HEAP32[$11 + 56 >> 2] = 0;
   while (1) {
    if (HEAP32[$11 + 56 >> 2] < HEAP32[$11 + 68 >> 2]) {
     HEAP32[$11 + 52 >> 2] = 0;
     while (1) {
      if (HEAP32[$11 + 52 >> 2] < HEAP32[$11 + 64 >> 2]) {
       HEAP32[$11 + 48 >> 2] = 0;
       while (1) {
        if (HEAP32[$11 + 48 >> 2] < HEAP32[$11 + 88 >> 2]) {
         HEAP32[$11 + 44 >> 2] = Math_imul(HEAP32[$11 + 52 >> 2], HEAP32[$11 + 128 >> 2]) - HEAP32[$11 + 112 >> 2];
         HEAP32[$11 + 40 >> 2] = Math_imul(HEAP32[$11 + 56 >> 2], HEAP32[$11 + 124 >> 2]) - HEAP32[$11 + 108 >> 2];
         HEAPF32[$11 + 36 >> 2] = 0;
         HEAP32[$11 + 32 >> 2] = 0;
         while (1) {
          if (HEAP32[$11 + 32 >> 2] < HEAP32[$11 + 76 >> 2]) {
           HEAP32[$11 + 28 >> 2] = 0;
           while (1) {
            if (HEAP32[$11 + 28 >> 2] < HEAP32[$11 + 72 >> 2]) {
             HEAP32[$11 + 24 >> 2] = 0;
             while (1) {
              if (HEAP32[$11 + 24 >> 2] < HEAP32[$11 + 92 >> 2]) {
               HEAP32[$11 + 20 >> 2] = HEAP32[$11 + 44 >> 2] + Math_imul(HEAP32[$11 + 120 >> 2], HEAP32[$11 + 28 >> 2]);
               HEAP32[$11 + 16 >> 2] = HEAP32[$11 + 40 >> 2] + Math_imul(HEAP32[$11 + 116 >> 2], HEAP32[$11 + 32 >> 2]);
               if (!(HEAP32[$11 + 20 >> 2] < 0 | HEAP32[$11 + 20 >> 2] >= HEAP32[$11 + 80 >> 2] | (HEAP32[$11 + 16 >> 2] < 0 | HEAP32[$11 + 16 >> 2] >= HEAP32[$11 + 84 >> 2]))) {
                HEAPF32[$11 + 12 >> 2] = HEAPF32[HEAP32[$11 + 164 >> 2] + (tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$11 + 168 >> 2], HEAP32[$11 + 60 >> 2], HEAP32[$11 + 16 >> 2], HEAP32[$11 + 20 >> 2], HEAP32[$11 + 24 >> 2]) << 2) >> 2];
                HEAPF32[$11 + 8 >> 2] = HEAPF32[HEAP32[$11 + 156 >> 2] + (tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$11 + 160 >> 2], HEAP32[$11 + 48 >> 2], HEAP32[$11 + 32 >> 2], HEAP32[$11 + 28 >> 2], HEAP32[$11 + 24 >> 2]) << 2) >> 2];
                HEAPF32[$11 + 36 >> 2] = Math_fround(HEAPF32[$11 + 12 >> 2] * HEAPF32[$11 + 8 >> 2]) + HEAPF32[$11 + 36 >> 2];
               }
               HEAP32[$11 + 24 >> 2] = HEAP32[$11 + 24 >> 2] + 1;
               continue;
              }
              break;
             }
             HEAP32[$11 + 28 >> 2] = HEAP32[$11 + 28 >> 2] + 1;
             continue;
            }
            break;
           }
           HEAP32[$11 + 32 >> 2] = HEAP32[$11 + 32 >> 2] + 1;
           continue;
          }
          break;
         }
         HEAPF32[$11 + 4 >> 2] = 0;
         if (HEAP32[$11 + 148 >> 2]) {
          HEAPF32[$11 + 4 >> 2] = HEAPF32[HEAP32[$11 + 148 >> 2] + (HEAP32[$11 + 48 >> 2] << 2) >> 2];
         }
         $12 = float_20tflite__ActivationFunctionWithMinMax_float__28float_2c_20float_2c_20float_29(Math_fround(HEAPF32[$11 + 36 >> 2] + HEAPF32[$11 + 4 >> 2]), HEAPF32[$11 + 104 >> 2], HEAPF32[$11 + 100 >> 2]);
         HEAPF32[HEAP32[$11 + 140 >> 2] + (tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$11 + 144 >> 2], HEAP32[$11 + 60 >> 2], HEAP32[$11 + 56 >> 2], HEAP32[$11 + 52 >> 2], HEAP32[$11 + 48 >> 2]) << 2) >> 2] = $12;
         HEAP32[$11 + 48 >> 2] = HEAP32[$11 + 48 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$11 + 52 >> 2] = HEAP32[$11 + 52 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$11 + 56 >> 2] = HEAP32[$11 + 56 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$11 + 60 >> 2] = HEAP32[$11 + 60 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $11 + 176 | 0;
}

function tflite__PopulateConvolutionQuantizationParams_28TfLiteContext__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20TfLiteFusedActivation_20const__2c_20int__2c_20int__2c_20int__2c_20int__2c_20int__2c_20int__2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12) {
 var $13 = 0, $14 = Math_fround(0);
 $13 = __stack_pointer - 256 | 0;
 __stack_pointer = $13;
 HEAP32[$13 + 248 >> 2] = $0;
 HEAP32[$13 + 244 >> 2] = $1;
 HEAP32[$13 + 240 >> 2] = $2;
 HEAP32[$13 + 236 >> 2] = $3;
 HEAP32[$13 + 232 >> 2] = $4;
 HEAP32[$13 + 228 >> 2] = $5;
 HEAP32[$13 + 224 >> 2] = $6;
 HEAP32[$13 + 220 >> 2] = $7;
 HEAP32[$13 + 216 >> 2] = $8;
 HEAP32[$13 + 212 >> 2] = $9;
 HEAP32[$13 + 208 >> 2] = $10;
 HEAP32[$13 + 204 >> 2] = $11;
 HEAP32[$13 + 200 >> 2] = $12;
 label$1: {
  if (HEAP32[HEAP32[$13 + 244 >> 2] >> 2] != 1) {
   $0 = HEAP32[HEAP32[$13 + 248 >> 2] + 20 >> 2];
   $1 = HEAP32[$13 + 248 >> 2];
   $2 = HEAP32[HEAP32[$13 + 244 >> 2] >> 2];
   HEAP32[$13 + 12 >> 2] = 1;
   HEAP32[$13 + 8 >> 2] = $2;
   HEAP32[$13 + 4 >> 2] = 102382;
   HEAP32[$13 >> 2] = 104914;
   FUNCTION_TABLE[$0 | 0]($1, 126505, $13);
   HEAP32[$13 + 252 >> 2] = 1;
   break label$1;
  }
  if (HEAP32[HEAP32[$13 + 240 >> 2] >> 2] != 1) {
   $0 = HEAP32[HEAP32[$13 + 248 >> 2] + 20 >> 2];
   $1 = HEAP32[$13 + 248 >> 2];
   $2 = HEAP32[HEAP32[$13 + 240 >> 2] >> 2];
   HEAP32[$13 + 28 >> 2] = 1;
   HEAP32[$13 + 24 >> 2] = $2;
   HEAP32[$13 + 20 >> 2] = 102382;
   HEAP32[$13 + 16 >> 2] = 104939;
   FUNCTION_TABLE[$0 | 0]($1, 126505, $13 + 16 | 0);
   HEAP32[$13 + 252 >> 2] = 1;
   break label$1;
  }
  HEAP32[$13 + 196 >> 2] = HEAP32[HEAP32[$13 + 240 >> 2] + 4 >> 2];
  if (!HEAP32[$13 + 196 >> 2]) {
   $0 = HEAP32[HEAP32[$13 + 248 >> 2] + 20 >> 2];
   $1 = HEAP32[$13 + 248 >> 2];
   HEAP32[$13 + 112 >> 2] = 102362;
   FUNCTION_TABLE[$0 | 0]($1, 111890, $13 + 112 | 0);
   HEAP32[$13 + 252 >> 2] = 1;
   break label$1;
  }
  if (!HEAP32[HEAP32[$13 + 196 >> 2] >> 2]) {
   $0 = HEAP32[HEAP32[$13 + 248 >> 2] + 20 >> 2];
   $1 = HEAP32[$13 + 248 >> 2];
   HEAP32[$13 + 96 >> 2] = 105213;
   FUNCTION_TABLE[$0 | 0]($1, 111890, $13 + 96 | 0);
   HEAP32[$13 + 252 >> 2] = 1;
   break label$1;
  }
  HEAP8[$13 + 195 | 0] = HEAP32[HEAP32[HEAP32[$13 + 196 >> 2] >> 2] >> 2] > 1;
  if (HEAP8[$13 + 195 | 0] & 1) {
   if (!(HEAP32[HEAP32[$13 + 244 >> 2] + 28 >> 2] == 9 | HEAP32[HEAP32[$13 + 244 >> 2] + 28 >> 2] == 7)) {
    $0 = HEAP32[HEAP32[$13 + 248 >> 2] + 20 >> 2];
    $1 = HEAP32[$13 + 248 >> 2];
    HEAP32[$13 + 80 >> 2] = 110670;
    FUNCTION_TABLE[$0 | 0]($1, 111890, $13 + 80 | 0);
    HEAP32[$13 + 252 >> 2] = 1;
    break label$1;
   }
   if (HEAP32[HEAP32[$13 + 240 >> 2] + 28 >> 2] != 9) {
    $0 = HEAP32[HEAP32[$13 + 248 >> 2] + 20 >> 2];
    $1 = HEAP32[$13 + 248 >> 2];
    $2 = HEAP32[HEAP32[$13 + 240 >> 2] + 28 >> 2];
    HEAP32[$13 + 44 >> 2] = 9;
    HEAP32[$13 + 40 >> 2] = $2;
    HEAP32[$13 + 36 >> 2] = 110449;
    HEAP32[$13 + 32 >> 2] = 104875;
    FUNCTION_TABLE[$0 | 0]($1, 126505, $13 + 32 | 0);
    HEAP32[$13 + 252 >> 2] = 1;
    break label$1;
   }
   if (HEAP32[HEAP32[HEAP32[$13 + 196 >> 2] >> 2] >> 2] != HEAP32[$13 + 200 >> 2]) {
    $0 = HEAP32[HEAP32[$13 + 248 >> 2] + 20 >> 2];
    $1 = HEAP32[$13 + 248 >> 2];
    $2 = HEAP32[HEAP32[HEAP32[$13 + 196 >> 2] >> 2] >> 2];
    HEAP32[$13 + 60 >> 2] = HEAP32[$13 + 200 >> 2];
    HEAP32[$13 + 56 >> 2] = $2;
    HEAP32[$13 + 52 >> 2] = 100281;
    HEAP32[$13 + 48 >> 2] = 104234;
    FUNCTION_TABLE[$0 | 0]($1, 126505, $13 + 48 | 0);
    HEAP32[$13 + 252 >> 2] = 1;
    break label$1;
   }
   if (HEAP32[$13 + 200 >> 2] != HEAP32[(HEAP32[HEAP32[$13 + 240 >> 2] + 20 >> 2] + 4 | 0) + (HEAP32[HEAP32[$13 + 196 >> 2] + 8 >> 2] << 2) >> 2]) {
    $0 = HEAP32[HEAP32[$13 + 248 >> 2] + 20 >> 2];
    $1 = HEAP32[$13 + 248 >> 2];
    $2 = HEAP32[$13 + 200 >> 2];
    HEAP32[$13 + 76 >> 2] = HEAP32[(HEAP32[HEAP32[$13 + 240 >> 2] + 20 >> 2] + 4 | 0) + (HEAP32[HEAP32[$13 + 196 >> 2] + 8 >> 2] << 2) >> 2];
    HEAP32[$13 + 72 >> 2] = $2;
    HEAP32[$13 + 68 >> 2] = 107956;
    HEAP32[$13 + 64 >> 2] = 100281;
    FUNCTION_TABLE[$0 | 0]($1, 126505, $13 - -64 | 0);
    HEAP32[$13 + 252 >> 2] = 1;
    break label$1;
   }
  }
  HEAPF32[$13 + 188 >> 2] = HEAPF32[HEAP32[$13 + 244 >> 2] + 8 >> 2];
  HEAPF32[$13 + 184 >> 2] = HEAPF32[HEAP32[$13 + 232 >> 2] + 8 >> 2];
  HEAP32[$13 + 180 >> 2] = HEAP32[HEAP32[$13 + 196 >> 2] >> 2] + 4;
  HEAP32[$13 + 176 >> 2] = 0;
  while (1) {
   if (HEAP32[$13 + 176 >> 2] < HEAP32[$13 + 200 >> 2]) {
    if (HEAP8[$13 + 195 | 0] & 1) {
     $14 = HEAPF32[HEAP32[$13 + 180 >> 2] + (HEAP32[$13 + 176 >> 2] << 2) >> 2];
    } else {
     $14 = HEAPF32[HEAP32[$13 + 180 >> 2] >> 2];
    }
    HEAPF32[$13 + 172 >> 2] = $14;
    HEAPF64[$13 + 160 >> 3] = HEAPF32[$13 + 172 >> 2];
    HEAPF64[$13 + 152 >> 3] = +HEAPF32[$13 + 188 >> 2] * HEAPF64[$13 + 160 >> 3] / +HEAPF32[$13 + 184 >> 2];
    tflite__QuantizeMultiplier_28double_2c_20int__2c_20int__29(HEAPF64[$13 + 152 >> 3], $13 + 148 | 0, $13 + 144 | 0);
    HEAP32[HEAP32[$13 + 208 >> 2] + (HEAP32[$13 + 176 >> 2] << 2) >> 2] = HEAP32[$13 + 148 >> 2];
    HEAP32[HEAP32[$13 + 204 >> 2] + (HEAP32[$13 + 176 >> 2] << 2) >> 2] = HEAP32[$13 + 144 >> 2];
    HEAP32[$13 + 176 >> 2] = HEAP32[$13 + 176 >> 2] + 1;
    continue;
   }
   break;
  }
  if (HEAP32[HEAP32[$13 + 244 >> 2] + 28 >> 2] == 3) {
   HEAPF64[$13 + 136 >> 3] = 0;
   HEAP32[$13 + 132 >> 2] = tflite__GetQuantizedConvolutionMultipler_28TfLiteContext__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20double__29(HEAP32[$13 + 248 >> 2], HEAP32[$13 + 244 >> 2], HEAP32[$13 + 240 >> 2], HEAP32[$13 + 236 >> 2], HEAP32[$13 + 232 >> 2], $13 + 136 | 0);
   if (HEAP32[$13 + 132 >> 2]) {
    HEAP32[$13 + 252 >> 2] = HEAP32[$13 + 132 >> 2];
    break label$1;
   }
   tflite__QuantizeMultiplier_28double_2c_20int__2c_20int__29(HEAPF64[$13 + 136 >> 3], HEAP32[$13 + 224 >> 2], $13 + 128 | 0);
   HEAP32[HEAP32[$13 + 220 >> 2] >> 2] = 0 - HEAP32[$13 + 128 >> 2];
  }
  if (!(!(HEAP32[HEAP32[$13 + 244 >> 2] + 28 >> 2] == 9 | HEAP32[HEAP32[$13 + 244 >> 2] + 28 >> 2] == 3) & HEAP32[HEAP32[$13 + 244 >> 2] + 28 >> 2] != 7)) {
   HEAP32[$13 + 124 >> 2] = tflite__CalculateActivationRangeQuantized_28TfLiteContext__2c_20TfLiteFusedActivation_2c_20TfLiteTensor__2c_20int__2c_20int__29(HEAP32[$13 + 248 >> 2], HEAP32[HEAP32[$13 + 228 >> 2] >> 2], HEAP32[$13 + 232 >> 2], HEAP32[$13 + 216 >> 2], HEAP32[$13 + 212 >> 2]);
   if (HEAP32[$13 + 124 >> 2]) {
    HEAP32[$13 + 252 >> 2] = HEAP32[$13 + 124 >> 2];
    break label$1;
   }
  }
  HEAP32[$13 + 252 >> 2] = 0;
 }
 __stack_pointer = $13 + 256 | 0;
 return HEAP32[$13 + 252 >> 2];
}

function _jswrap_string_replace($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 240 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 232 >> 2] = $0;
 HEAP32[$4 + 228 >> 2] = $1;
 HEAP32[$4 + 224 >> 2] = $2;
 HEAP8[$4 + 223 | 0] = $3;
 HEAP32[$4 + 216 >> 2] = jsvAsString(HEAP32[$4 + 232 >> 2]);
 label$1: {
  if (jsvIsInstanceOf(HEAP32[$4 + 228 >> 2], 101806) & 1) {
   label$3: {
    label$4: {
     if (!(jsvIsFunction(HEAP32[$4 + 224 >> 2]) & 1)) {
      if (!(jsvIsString(HEAP32[$4 + 224 >> 2]) & 1)) {
       break label$4;
      }
     }
     HEAP32[$4 + 212 >> 2] = jsvLockAgain(HEAP32[$4 + 224 >> 2]);
     break label$3;
    }
    HEAP32[$4 + 212 >> 2] = jsvAsString(HEAP32[$4 + 224 >> 2]);
   }
   jsvObjectSetChildAndUnLock(HEAP32[$4 + 228 >> 2], 96707, jsvNewFromInteger(0));
   HEAP8[$4 + 211 | 0] = jswrap_regexp_hasFlag(HEAP32[$4 + 228 >> 2], 103) & 1;
   if (HEAP8[$4 + 223 | 0] & 1) {
    HEAP8[$4 + 211 | 0] = 1;
   }
   HEAP32[$4 + 204 >> 2] = jsvNewFromEmptyString_8();
   jsvStringIteratorNew($4 + 168 | 0, HEAP32[$4 + 204 >> 2], 0);
   HEAP32[$4 + 164 >> 2] = 0;
   HEAP32[$4 + 160 >> 2] = jswrap_regexp_exec(HEAP32[$4 + 228 >> 2], HEAP32[$4 + 216 >> 2]);
   while (1) {
    $0 = 0;
    label$8: {
     if (!HEAP32[$4 + 160 >> 2]) {
      break label$8;
     }
     $0 = 0;
     if (jsvIsNull(HEAP32[$4 + 160 >> 2]) & 1) {
      break label$8;
     }
     $0 = jspIsInterrupted() ^ -1;
    }
    if ($0 & 1) {
     HEAP32[$4 + 156 >> 2] = jsvGetArrayItem(HEAP32[$4 + 160 >> 2], 0);
     HEAP32[$4 + 152 >> 2] = jsvObjectGetIntegerChild(HEAP32[$4 + 160 >> 2], 96701);
     HEAP32[$4 + 148 >> 2] = jsvGetStringLength(HEAP32[$4 + 156 >> 2]);
     jsvStringIteratorAppendString($4 + 168 | 0, HEAP32[$4 + 216 >> 2], HEAP32[$4 + 164 >> 2], HEAP32[$4 + 152 >> 2] - HEAP32[$4 + 164 >> 2] | 0);
     label$10: {
      if (jsvIsFunction(HEAP32[$4 + 212 >> 2]) & 1) {
       HEAP32[$4 + 144 >> 2] = 0;
       $1 = jsvLockAgain(HEAP32[$4 + 156 >> 2]);
       $0 = HEAP32[$4 + 144 >> 2];
       HEAP32[$4 + 144 >> 2] = $0 + 1;
       HEAP32[($4 + 80 | 0) + ($0 << 2) >> 2] = $1;
       while (1) {
        $1 = jsvGetArrayItem(HEAP32[$4 + 160 >> 2], HEAP32[$4 + 144 >> 2]);
        HEAP32[$4 + 76 >> 2] = $1;
        $0 = 0;
        $0 = $1 ? HEAPU32[$4 + 144 >> 2] < 11 : $0;
        if ($0) {
         $1 = HEAP32[$4 + 76 >> 2];
         $0 = HEAP32[$4 + 144 >> 2];
         HEAP32[$4 + 144 >> 2] = $0 + 1;
         HEAP32[($4 + 80 | 0) + ($0 << 2) >> 2] = $1;
         continue;
        }
        break;
       }
       $1 = jsvObjectGetChildIfExists(HEAP32[$4 + 160 >> 2], 96701);
       $0 = HEAP32[$4 + 144 >> 2];
       HEAP32[$4 + 144 >> 2] = $0 + 1;
       HEAP32[($4 + 80 | 0) + ($0 << 2) >> 2] = $1;
       $1 = jsvObjectGetChildIfExists(HEAP32[$4 + 160 >> 2], 97377);
       $0 = HEAP32[$4 + 144 >> 2];
       HEAP32[$4 + 144 >> 2] = $0 + 1;
       HEAP32[($4 + 80 | 0) + ($0 << 2) >> 2] = $1;
       HEAP32[$4 + 72 >> 2] = jsvAsStringAndUnLock(jspeFunctionCall(HEAP32[$4 + 212 >> 2], 0, 0, 0, HEAP32[$4 + 144 >> 2], $4 + 80 | 0));
       jsvUnLockMany(HEAP32[$4 + 144 >> 2], $4 + 80 | 0);
       jsvStringIteratorAppendString($4 + 168 | 0, HEAP32[$4 + 72 >> 2], 0, 2147483647);
       jsvUnLock(HEAP32[$4 + 72 >> 2]);
       break label$10;
      }
      jsvStringIteratorNew($4 + 32 | 0, HEAP32[$4 + 212 >> 2], 0);
      while (1) {
       if (jsvStringIteratorHasChar_8($4 + 32 | 0) & 1) {
        HEAP8[$4 + 31 | 0] = jsvStringIteratorGetCharAndNext($4 + 32 | 0);
        label$17: {
         if (HEAP8[$4 + 31 | 0] == 36) {
          HEAP8[$4 + 31 | 0] = jsvStringIteratorGetCharAndNext($4 + 32 | 0);
          HEAP32[$4 + 24 >> 2] = 0;
          if (!(HEAP8[$4 + 31 | 0] <= 48 | HEAP8[$4 + 31 | 0] > 57)) {
           HEAP32[$4 + 24 >> 2] = jsvGetArrayItem(HEAP32[$4 + 160 >> 2], HEAP8[$4 + 31 | 0] - 48 | 0);
          }
          label$20: {
           if (HEAP32[$4 + 24 >> 2]) {
            jsvStringIteratorAppendString($4 + 168 | 0, HEAP32[$4 + 24 >> 2], 0, 2147483647);
            jsvUnLock(HEAP32[$4 + 24 >> 2]);
            break label$20;
           }
           jsvStringIteratorAppend($4 + 168 | 0, 36);
           jsvStringIteratorAppend($4 + 168 | 0, HEAP8[$4 + 31 | 0]);
          }
          break label$17;
         }
         jsvStringIteratorAppend($4 + 168 | 0, HEAP8[$4 + 31 | 0]);
        }
        continue;
       }
       break;
      }
      jsvStringIteratorFree_10($4 + 32 | 0);
     }
     HEAP32[$4 + 164 >> 2] = HEAP32[$4 + 152 >> 2] + HEAP32[$4 + 148 >> 2];
     jsvUnLock(HEAP32[$4 + 156 >> 2]);
     jsvUnLock(HEAP32[$4 + 160 >> 2]);
     HEAP32[$4 + 160 >> 2] = 0;
     if (HEAP8[$4 + 211 | 0] & 1) {
      jsvObjectSetChildAndUnLock(HEAP32[$4 + 228 >> 2], 96707, jsvNewFromInteger(HEAP32[$4 + 164 >> 2] + !HEAP32[$4 + 148 >> 2] | 0));
      HEAP32[$4 + 160 >> 2] = jswrap_regexp_exec(HEAP32[$4 + 228 >> 2], HEAP32[$4 + 216 >> 2]);
     }
     continue;
    }
    break;
   }
   jsvStringIteratorAppendString($4 + 168 | 0, HEAP32[$4 + 216 >> 2], HEAP32[$4 + 164 >> 2], 2147483647);
   jsvStringIteratorFree_10($4 + 168 | 0);
   jsvUnLock3(HEAP32[$4 + 160 >> 2], HEAP32[$4 + 212 >> 2], HEAP32[$4 + 216 >> 2]);
   if (HEAP8[$4 + 211 | 0] & 1) {
    jsvObjectSetChildAndUnLock(HEAP32[$4 + 228 >> 2], 96707, jsvNewFromInteger(0));
   }
   HEAP32[$4 + 236 >> 2] = HEAP32[$4 + 204 >> 2];
   break label$1;
  }
  HEAP32[$4 + 224 >> 2] = jsvAsString(HEAP32[$4 + 224 >> 2]);
  HEAP32[$4 + 228 >> 2] = jsvAsString(HEAP32[$4 + 228 >> 2]);
  HEAP32[$4 + 20 >> 2] = jswrap_string_indexOf(HEAP32[$4 + 216 >> 2], HEAP32[$4 + 228 >> 2], 0, 0);
  while (1) {
   $0 = 0;
   if (HEAP32[$4 + 20 >> 2] >= 0) {
    $0 = jspIsInterrupted() ^ -1;
   }
   if ($0 & 1) {
    HEAP32[$4 + 16 >> 2] = jsvNewWritableStringFromStringVar(HEAP32[$4 + 216 >> 2], 0, HEAP32[$4 + 20 >> 2]);
    jsvAppendStringVarComplete(HEAP32[$4 + 16 >> 2], HEAP32[$4 + 224 >> 2]);
    jsvAppendStringVar(HEAP32[$4 + 16 >> 2], HEAP32[$4 + 216 >> 2], HEAP32[$4 + 20 >> 2] + jsvGetStringLength(HEAP32[$4 + 228 >> 2]) | 0, 2147483647);
    jsvUnLock(HEAP32[$4 + 216 >> 2]);
    HEAP32[$4 + 216 >> 2] = HEAP32[$4 + 16 >> 2];
    label$27: {
     if (HEAP8[$4 + 223 | 0] & 1) {
      HEAP32[$4 + 12 >> 2] = jsvNewFromInteger(HEAP32[$4 + 20 >> 2] + jsvGetStringLength(HEAP32[$4 + 224 >> 2]) | 0);
      HEAP32[$4 + 20 >> 2] = jswrap_string_indexOf(HEAP32[$4 + 216 >> 2], HEAP32[$4 + 228 >> 2], HEAP32[$4 + 12 >> 2], 0);
      jsvUnLock(HEAP32[$4 + 12 >> 2]);
      break label$27;
     }
     HEAP32[$4 + 20 >> 2] = -1;
    }
    continue;
   }
   break;
  }
  jsvUnLock2(HEAP32[$4 + 228 >> 2], HEAP32[$4 + 224 >> 2]);
  HEAP32[$4 + 236 >> 2] = HEAP32[$4 + 216 >> 2];
 }
 __stack_pointer = $4 + 240 | 0;
 return HEAP32[$4 + 236 >> 2];
}

function tflite__ops__micro__dequantize__Eval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 272 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 264 >> 2] = $0;
 HEAP32[$2 + 260 >> 2] = $1;
 label$1: {
  if (!HEAP32[HEAP32[$2 + 260 >> 2] + 8 >> 2]) {
   break label$1;
  }
 }
 HEAP32[$2 + 256 >> 2] = HEAP32[HEAP32[$2 + 260 >> 2] + 8 >> 2];
 HEAP32[$2 + 252 >> 2] = tflite__micro__GetEvalInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 264 >> 2], HEAP32[$2 + 260 >> 2], 0);
 HEAP32[$2 + 248 >> 2] = tflite__micro__GetEvalOutput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 264 >> 2], HEAP32[$2 + 260 >> 2], 0);
 label$2: {
  label$3: {
   if (HEAP32[HEAP32[$2 + 248 >> 2] + 8 >> 2] == 1) {
    label$5: {
     switch (HEAP32[HEAP32[$2 + 252 >> 2] + 8 >> 2] - 3 | 0) {
     case 0:
      $0 = HEAP32[$2 + 256 >> 2];
      tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($2 + 224 | 0, HEAP32[$2 + 252 >> 2]);
      $1 = unsigned_20char_20const__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor_20const__29(HEAP32[$2 + 252 >> 2]);
      tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($2 + 200 | 0, HEAP32[$2 + 248 >> 2]);
      void_20tflite__reference_ops__Dequantize_unsigned_20char_2c_20float__28tflite__DequantizationParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($0, $2 + 224 | 0, $1, $2 + 200 | 0, float__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor__29(HEAP32[$2 + 248 >> 2]));
      tflite__RuntimeShape___RuntimeShape_28_29($2 + 200 | 0);
      tflite__RuntimeShape___RuntimeShape_28_29($2 + 224 | 0);
      break label$3;

     case 6:
      $0 = HEAP32[$2 + 256 >> 2];
      tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($2 + 176 | 0, HEAP32[$2 + 252 >> 2]);
      $1 = signed_20char_20const__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor_20const__29(HEAP32[$2 + 252 >> 2]);
      tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($2 + 152 | 0, HEAP32[$2 + 248 >> 2]);
      void_20tflite__reference_ops__Dequantize_signed_20char_2c_20float__28tflite__DequantizationParams_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($0, $2 + 176 | 0, $1, $2 + 152 | 0, float__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor__29(HEAP32[$2 + 248 >> 2]));
      tflite__RuntimeShape___RuntimeShape_28_29($2 + 152 | 0);
      tflite__RuntimeShape___RuntimeShape_28_29($2 + 176 | 0);
      break label$3;

     case 4:
      $0 = HEAP32[$2 + 256 >> 2];
      tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($2 + 128 | 0, HEAP32[$2 + 252 >> 2]);
      $1 = short_20const__20tflite__micro__GetTensorData_short__28TfLiteEvalTensor_20const__29(HEAP32[$2 + 252 >> 2]);
      tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($2 + 104 | 0, HEAP32[$2 + 248 >> 2]);
      void_20tflite__reference_ops__Dequantize_short_2c_20float__28tflite__DequantizationParams_20const__2c_20tflite__RuntimeShape_20const__2c_20short_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($0, $2 + 128 | 0, $1, $2 + 104 | 0, float__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor__29(HEAP32[$2 + 248 >> 2]));
      tflite__RuntimeShape___RuntimeShape_28_29($2 + 104 | 0);
      tflite__RuntimeShape___RuntimeShape_28_29($2 + 128 | 0);
      break label$3;

     default:
      break label$5;
     }
    }
    $0 = HEAP32[HEAP32[$2 + 264 >> 2] + 20 >> 2];
    $1 = HEAP32[$2 + 264 >> 2];
    $3 = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 252 >> 2] + 8 >> 2]);
    HEAP32[$2 + 4 >> 2] = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 248 >> 2] + 8 >> 2]);
    HEAP32[$2 >> 2] = $3;
    FUNCTION_TABLE[$0 | 0]($1, 112088, $2);
    HEAP32[$2 + 268 >> 2] = 1;
    break label$2;
   }
   label$9: {
    if (HEAP32[HEAP32[$2 + 248 >> 2] + 8 >> 2] == 2) {
     tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($2 + 72 | 0, HEAP32[$2 + 252 >> 2]);
     tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($2 + 48 | 0, HEAP32[$2 + 248 >> 2]);
     $0 = tflite__MatchingFlatSize_28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__29($2 + 72 | 0, $2 + 48 | 0);
     tflite__RuntimeShape___RuntimeShape_28_29($2 + 48 | 0);
     tflite__RuntimeShape___RuntimeShape_28_29($2 + 72 | 0);
     HEAP32[$2 + 100 >> 2] = $0;
     label$11: {
      label$12: {
       switch (HEAP32[HEAP32[$2 + 252 >> 2] + 8 >> 2] - 7 | 0) {
       case 0:
        void_20tflite__reference_ops__Requantize_short_2c_20int__28short_20const__2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int__29(short_20const__20tflite__micro__GetTensorData_short__28TfLiteEvalTensor_20const__29(HEAP32[$2 + 252 >> 2]), HEAP32[$2 + 100 >> 2], HEAP32[HEAP32[$2 + 256 >> 2] + 16 >> 2], HEAP32[HEAP32[$2 + 256 >> 2] + 20 >> 2], HEAP32[HEAP32[$2 + 256 >> 2] + 8 >> 2], HEAP32[HEAP32[$2 + 256 >> 2] + 24 >> 2], int__20tflite__micro__GetTensorData_int__28TfLiteEvalTensor__29(HEAP32[$2 + 248 >> 2]));
        break label$11;

       case 2:
        void_20tflite__reference_ops__Requantize_signed_20char_2c_20int__28signed_20char_20const__2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int__29(signed_20char_20const__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor_20const__29(HEAP32[$2 + 252 >> 2]), HEAP32[$2 + 100 >> 2], HEAP32[HEAP32[$2 + 256 >> 2] + 16 >> 2], HEAP32[HEAP32[$2 + 256 >> 2] + 20 >> 2], HEAP32[HEAP32[$2 + 256 >> 2] + 8 >> 2], HEAP32[HEAP32[$2 + 256 >> 2] + 24 >> 2], int__20tflite__micro__GetTensorData_int__28TfLiteEvalTensor__29(HEAP32[$2 + 248 >> 2]));
        break label$11;

       default:
        break label$12;
       }
      }
      $0 = HEAP32[HEAP32[$2 + 264 >> 2] + 20 >> 2];
      $1 = HEAP32[$2 + 264 >> 2];
      $3 = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 252 >> 2] + 8 >> 2]);
      HEAP32[$2 + 20 >> 2] = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 248 >> 2] + 8 >> 2]);
      HEAP32[$2 + 16 >> 2] = $3;
      FUNCTION_TABLE[$0 | 0]($1, 112088, $2 + 16 | 0);
      HEAP32[$2 + 268 >> 2] = 1;
      break label$2;
     }
     break label$9;
    }
    $0 = HEAP32[HEAP32[$2 + 264 >> 2] + 20 >> 2];
    $1 = HEAP32[$2 + 264 >> 2];
    $3 = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 252 >> 2] + 8 >> 2]);
    HEAP32[$2 + 36 >> 2] = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 248 >> 2] + 8 >> 2]);
    HEAP32[$2 + 32 >> 2] = $3;
    FUNCTION_TABLE[$0 | 0]($1, 112088, $2 + 32 | 0);
    HEAP32[$2 + 268 >> 2] = 1;
    break label$2;
   }
  }
  HEAP32[$2 + 268 >> 2] = 0;
 }
 __stack_pointer = $2 + 272 | 0;
 return HEAP32[$2 + 268 >> 2];
}

function tflite__reference_ops__DepthwiseConv_28tflite__DepthwiseParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0, $10 = Math_fround(0);
 $9 = __stack_pointer - 176 | 0;
 __stack_pointer = $9;
 HEAP32[$9 + 172 >> 2] = $0;
 HEAP32[$9 + 168 >> 2] = $1;
 HEAP32[$9 + 164 >> 2] = $2;
 HEAP32[$9 + 160 >> 2] = $3;
 HEAP32[$9 + 156 >> 2] = $4;
 HEAP32[$9 + 152 >> 2] = $5;
 HEAP32[$9 + 148 >> 2] = $6;
 HEAP32[$9 + 144 >> 2] = $7;
 HEAP32[$9 + 140 >> 2] = $8;
 HEAP32[$9 + 136 >> 2] = HEAP16[HEAP32[$9 + 172 >> 2] + 10 >> 1];
 HEAP32[$9 + 132 >> 2] = HEAP16[HEAP32[$9 + 172 >> 2] + 12 >> 1];
 HEAP32[$9 + 128 >> 2] = HEAP16[HEAP32[$9 + 172 >> 2] + 14 >> 1];
 HEAP32[$9 + 124 >> 2] = HEAP16[HEAP32[$9 + 172 >> 2] + 16 >> 1];
 HEAP32[$9 + 120 >> 2] = HEAP16[HEAP32[$9 + 172 >> 2] + 2 >> 1];
 HEAP32[$9 + 116 >> 2] = HEAP16[HEAP32[$9 + 172 >> 2] + 4 >> 1];
 HEAP32[$9 + 112 >> 2] = HEAP16[HEAP32[$9 + 172 >> 2] + 18 >> 1];
 HEAPF32[$9 + 108 >> 2] = HEAPF32[HEAP32[$9 + 172 >> 2] + 48 >> 2];
 HEAPF32[$9 + 104 >> 2] = HEAPF32[HEAP32[$9 + 172 >> 2] + 52 >> 2];
 label$1: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$9 + 168 >> 2]) | 0) != 4) {
   break label$1;
  }
 }
 label$2: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$9 + 160 >> 2]) | 0) != 4) {
   break label$2;
  }
 }
 label$3: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$9 + 144 >> 2]) | 0) != 4) {
   break label$3;
  }
 }
 HEAP32[$9 + 100 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$9 + 168 >> 2], 0, HEAP32[$9 + 144 >> 2], 0);
 HEAP32[$9 + 96 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$9 + 160 >> 2], 3, HEAP32[$9 + 144 >> 2], 3);
 HEAP32[$9 + 92 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 168 >> 2], 1);
 HEAP32[$9 + 88 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 168 >> 2], 2);
 HEAP32[$9 + 84 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 168 >> 2], 3);
 HEAP32[$9 + 80 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 160 >> 2], 1);
 HEAP32[$9 + 76 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 160 >> 2], 2);
 HEAP32[$9 + 72 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 144 >> 2], 1);
 HEAP32[$9 + 68 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 144 >> 2], 2);
 label$4: {
  if (HEAP32[$9 + 96 >> 2] != (Math_imul(HEAP32[$9 + 84 >> 2], HEAP32[$9 + 112 >> 2]) | 0)) {
   break label$4;
  }
 }
 label$5: {
  if ((tflite__RuntimeShape__FlatSize_28_29_20const(HEAP32[$9 + 152 >> 2]) | 0) != HEAP32[$9 + 96 >> 2]) {
   break label$5;
  }
 }
 HEAP32[$9 + 64 >> 2] = 0;
 while (1) {
  if (HEAP32[$9 + 64 >> 2] < HEAP32[$9 + 100 >> 2]) {
   HEAP32[$9 + 60 >> 2] = 0;
   while (1) {
    if (HEAP32[$9 + 60 >> 2] < HEAP32[$9 + 72 >> 2]) {
     HEAP32[$9 + 56 >> 2] = 0;
     while (1) {
      if (HEAP32[$9 + 56 >> 2] < HEAP32[$9 + 68 >> 2]) {
       HEAP32[$9 + 52 >> 2] = 0;
       while (1) {
        if (HEAP32[$9 + 52 >> 2] < HEAP32[$9 + 84 >> 2]) {
         HEAP32[$9 + 48 >> 2] = 0;
         while (1) {
          if (HEAP32[$9 + 48 >> 2] < HEAP32[$9 + 112 >> 2]) {
           HEAP32[$9 + 44 >> 2] = HEAP32[$9 + 48 >> 2] + Math_imul(HEAP32[$9 + 52 >> 2], HEAP32[$9 + 112 >> 2]);
           HEAP32[$9 + 40 >> 2] = Math_imul(HEAP32[$9 + 56 >> 2], HEAP32[$9 + 136 >> 2]) - HEAP32[$9 + 120 >> 2];
           HEAP32[$9 + 36 >> 2] = Math_imul(HEAP32[$9 + 60 >> 2], HEAP32[$9 + 132 >> 2]) - HEAP32[$9 + 116 >> 2];
           HEAPF32[$9 + 32 >> 2] = 0;
           HEAP32[$9 + 28 >> 2] = 0;
           while (1) {
            if (HEAP32[$9 + 28 >> 2] < HEAP32[$9 + 80 >> 2]) {
             HEAP32[$9 + 24 >> 2] = 0;
             while (1) {
              if (HEAP32[$9 + 24 >> 2] < HEAP32[$9 + 76 >> 2]) {
               HEAP32[$9 + 20 >> 2] = HEAP32[$9 + 40 >> 2] + Math_imul(HEAP32[$9 + 128 >> 2], HEAP32[$9 + 24 >> 2]);
               HEAP32[$9 + 16 >> 2] = HEAP32[$9 + 36 >> 2] + Math_imul(HEAP32[$9 + 124 >> 2], HEAP32[$9 + 28 >> 2]);
               if (!(HEAP32[$9 + 20 >> 2] < 0 | HEAP32[$9 + 20 >> 2] >= HEAP32[$9 + 88 >> 2] | (HEAP32[$9 + 16 >> 2] < 0 | HEAP32[$9 + 16 >> 2] >= HEAP32[$9 + 92 >> 2]))) {
                HEAPF32[$9 + 12 >> 2] = HEAPF32[HEAP32[$9 + 164 >> 2] + (tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$9 + 168 >> 2], HEAP32[$9 + 64 >> 2], HEAP32[$9 + 16 >> 2], HEAP32[$9 + 20 >> 2], HEAP32[$9 + 52 >> 2]) << 2) >> 2];
                HEAPF32[$9 + 8 >> 2] = HEAPF32[HEAP32[$9 + 156 >> 2] + (tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$9 + 160 >> 2], 0, HEAP32[$9 + 28 >> 2], HEAP32[$9 + 24 >> 2], HEAP32[$9 + 44 >> 2]) << 2) >> 2];
                HEAPF32[$9 + 32 >> 2] = Math_fround(HEAPF32[$9 + 12 >> 2] * HEAPF32[$9 + 8 >> 2]) + HEAPF32[$9 + 32 >> 2];
               }
               HEAP32[$9 + 24 >> 2] = HEAP32[$9 + 24 >> 2] + 1;
               continue;
              }
              break;
             }
             HEAP32[$9 + 28 >> 2] = HEAP32[$9 + 28 >> 2] + 1;
             continue;
            }
            break;
           }
           HEAPF32[$9 + 4 >> 2] = 0;
           if (HEAP32[$9 + 148 >> 2]) {
            HEAPF32[$9 + 4 >> 2] = HEAPF32[HEAP32[$9 + 148 >> 2] + (HEAP32[$9 + 44 >> 2] << 2) >> 2];
           }
           $10 = float_20tflite__ActivationFunctionWithMinMax_float__28float_2c_20float_2c_20float_29(Math_fround(HEAPF32[$9 + 32 >> 2] + HEAPF32[$9 + 4 >> 2]), HEAPF32[$9 + 108 >> 2], HEAPF32[$9 + 104 >> 2]);
           HEAPF32[HEAP32[$9 + 140 >> 2] + (tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$9 + 144 >> 2], HEAP32[$9 + 64 >> 2], HEAP32[$9 + 60 >> 2], HEAP32[$9 + 56 >> 2], HEAP32[$9 + 44 >> 2]) << 2) >> 2] = $10;
           HEAP32[$9 + 48 >> 2] = HEAP32[$9 + 48 >> 2] + 1;
           continue;
          }
          break;
         }
         HEAP32[$9 + 52 >> 2] = HEAP32[$9 + 52 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$9 + 56 >> 2] = HEAP32[$9 + 56 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$9 + 60 >> 2] = HEAP32[$9 + 60 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$9 + 64 >> 2] = HEAP32[$9 + 64 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $9 + 176 | 0;
}

function jswrap_graphics_asImage($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 272 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 264 >> 2] = $0;
 HEAP32[$2 + 260 >> 2] = $1;
 label$1: {
  if (!(graphicsGetFromVar($2 + 184 | 0, HEAP32[$2 + 264 >> 2]) & 1)) {
   HEAP32[$2 + 268 >> 2] = 0;
   break label$1;
  }
  label$3: {
   label$4: {
    if (!(jsvIsUndefined(HEAP32[$2 + 260 >> 2]) & 1)) {
     if (!(jsvIsStringEqual(HEAP32[$2 + 260 >> 2], 98063) & 1)) {
      break label$4;
     }
    }
    HEAP8[$2 + 183 | 0] = 1;
    break label$3;
   }
   label$6: {
    if (jsvIsStringEqual(HEAP32[$2 + 260 >> 2], 103722) & 1) {
     HEAP8[$2 + 183 | 0] = 0;
     break label$6;
    }
    HEAP32[$2 >> 2] = HEAP32[$2 + 260 >> 2];
    jsExceptionHere(1, 103258, $2);
    HEAP32[$2 + 268 >> 2] = 0;
    break label$1;
   }
  }
  HEAP32[$2 + 176 >> 2] = jswrap_graphics_getWidthOrHeight(HEAP32[$2 + 264 >> 2], 0);
  HEAP32[$2 + 172 >> 2] = jswrap_graphics_getWidthOrHeight(HEAP32[$2 + 264 >> 2], 1);
  HEAP32[$2 + 168 >> 2] = HEAPU8[$2 + 200 | 0];
  HEAP32[$2 + 164 >> 2] = 1 << HEAP32[$2 + 168 >> 2];
  HEAP32[$2 + 160 >> 2] = Math_imul(HEAP32[$2 + 168 >> 2], Math_imul(HEAP32[$2 + 176 >> 2], HEAP32[$2 + 172 >> 2])) + 7 >> 3;
  HEAP32[$2 + 156 >> 2] = -1;
  HEAP32[$2 + 152 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 264 >> 2], 97704);
  if (HEAP32[$2 + 152 >> 2]) {
   HEAP32[$2 + 156 >> 2] = jsvGetIntegerAndUnLock(HEAP32[$2 + 152 >> 2]);
  }
  HEAP32[$2 + 148 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 264 >> 2], 104567);
  label$9: {
   if (jsvIsArray(HEAP32[$2 + 148 >> 2]) & 1) {
    break label$9;
   }
   if (jsvIsArrayBuffer(HEAP32[$2 + 148 >> 2]) & 1) {
    break label$9;
   }
   jsvUnLock(HEAP32[$2 + 148 >> 2]);
   HEAP32[$2 + 148 >> 2] = 0;
  }
  HEAP32[$2 + 144 >> 2] = 0;
  label$10: {
   if (HEAP8[$2 + 183 | 0] & 1) {
    HEAP32[$2 + 144 >> 2] = jsvNewObject();
    if (!HEAP32[$2 + 144 >> 2]) {
     HEAP32[$2 + 268 >> 2] = 0;
     break label$1;
    }
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 144 >> 2], 103393, jsvNewFromInteger(HEAP32[$2 + 176 >> 2]));
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 144 >> 2], 97915, jsvNewFromInteger(HEAP32[$2 + 172 >> 2]));
    if (HEAP32[$2 + 168 >> 2] != 1) {
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 144 >> 2], 101843, jsvNewFromInteger(HEAP32[$2 + 168 >> 2]));
    }
    if (!(HEAPU8[$2 + 188 | 0] | HEAPU8[$2 + 189 | 0] << 8 | (HEAPU8[$2 + 190 | 0] << 16 | HEAPU8[$2 + 191 | 0] << 24) | (!((HEAPU8[$2 + 192 | 0] | HEAPU8[$2 + 193 | 0] << 8 | (HEAPU8[$2 + 194 | 0] << 16 | HEAPU8[$2 + 195 | 0] << 24)) & 4) | (HEAPU8[$2 + 192 | 0] | HEAPU8[$2 + 193 | 0] << 8 | (HEAPU8[$2 + 194 | 0] << 16 | HEAPU8[$2 + 195 | 0] << 24)) & 11 ? HEAP32[$2 + 168 >> 2] != 8 : 0))) {
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 144 >> 2], 101361, jsvObjectGetChildIfExists(HEAPU8[$2 + 184 | 0] | HEAPU8[$2 + 185 | 0] << 8 | (HEAPU8[$2 + 186 | 0] << 16 | HEAPU8[$2 + 187 | 0] << 24), 101361));
     HEAP32[$2 + 268 >> 2] = HEAP32[$2 + 144 >> 2];
     break label$1;
    }
    if (HEAP32[$2 + 156 >> 2] >= 0) {
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 144 >> 2], 97704, jsvNewFromInteger(HEAP32[$2 + 156 >> 2]));
    }
    if (HEAP32[$2 + 148 >> 2]) {
     jsvObjectSetChild(HEAP32[$2 + 144 >> 2], 104567, HEAP32[$2 + 148 >> 2]);
    }
    break label$10;
   }
   $1 = HEAP32[$2 + 160 >> 2];
   if (HEAP32[$2 + 148 >> 2]) {
    $0 = HEAP32[$2 + 164 >> 2] << 1;
   } else {
    $0 = 0;
   }
   HEAP32[$2 + 160 >> 2] = $1 + ($0 + ((HEAP32[$2 + 156 >> 2] >= 0) + 3 | 0) | 0);
  }
  HEAP32[$2 + 140 >> 2] = jsvNewStringOfLength(HEAP32[$2 + 160 >> 2], 0);
  if (!HEAP32[$2 + 140 >> 2]) {
   jsvUnLock(HEAP32[$2 + 144 >> 2]);
   HEAP32[$2 + 268 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 136 >> 2] = 0;
  HEAP32[$2 + 132 >> 2] = 0;
  HEAP32[$2 + 128 >> 2] = 0;
  HEAP32[$2 + 124 >> 2] = 0;
  jsvStringIteratorNew($2 + 88 | 0, HEAP32[$2 + 140 >> 2], 0);
  if (!(HEAP8[$2 + 183 | 0] & 1)) {
   jsvStringIteratorSetCharAndNext($2 + 88 | 0, HEAP32[$2 + 176 >> 2] << 24 >> 24);
   jsvStringIteratorSetCharAndNext($2 + 88 | 0, HEAP32[$2 + 172 >> 2] << 24 >> 24);
   jsvStringIteratorSetCharAndNext($2 + 88 | 0, ((HEAP32[$2 + 168 >> 2] | (HEAP32[$2 + 156 >> 2] >= 0 ? 128 : 0)) << 24 >> 24 | (HEAP32[$2 + 148 >> 2] ? 64 : 0)) << 24 >> 24);
   if (HEAP32[$2 + 156 >> 2] >= 0) {
    jsvStringIteratorSetCharAndNext($2 + 88 | 0, HEAP32[$2 + 156 >> 2] << 24 >> 24);
   }
   if (HEAP32[$2 + 148 >> 2]) {
    HEAP32[$2 + 20 >> 2] = 0;
    jsvIteratorNew($2 + 24 | 0, HEAP32[$2 + 148 >> 2], 1);
    while (1) {
     if (jsvIteratorHasElement($2 + 24 | 0) & 1) {
      HEAP32[$2 + 16 >> 2] = jsvIteratorGetIntegerValue($2 + 24 | 0);
      if (HEAP32[$2 + 20 >> 2] < HEAP32[$2 + 164 >> 2]) {
       jsvStringIteratorSetCharAndNext($2 + 88 | 0, HEAP32[$2 + 16 >> 2] << 24 >> 24);
       jsvStringIteratorSetCharAndNext($2 + 88 | 0, HEAP32[$2 + 16 >> 2] >> 8 << 24 >> 24);
      }
      jsvIteratorNext($2 + 24 | 0);
      HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 20 >> 2] + 1;
      continue;
     }
     break;
    }
    jsvIteratorFree($2 + 24 | 0);
    while (1) {
     if (HEAP32[$2 + 20 >> 2] < HEAP32[$2 + 164 >> 2]) {
      jsvStringIteratorSetCharAndNext($2 + 88 | 0, 0);
      jsvStringIteratorSetCharAndNext($2 + 88 | 0, 0);
      HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 20 >> 2] + 1;
      continue;
     }
     break;
    }
   }
  }
  while (1) {
   if (jsvStringIteratorHasChar_12($2 + 88 | 0) & 1) {
    HEAP32[$2 + 12 >> 2] = graphicsGetPixel($2 + 184 | 0, HEAP32[$2 + 136 >> 2], HEAP32[$2 + 132 >> 2]);
    HEAP32[$2 + 128 >> 2] = HEAP32[$2 + 12 >> 2] | HEAP32[$2 + 128 >> 2] << HEAP32[$2 + 168 >> 2];
    HEAP32[$2 + 124 >> 2] = HEAP32[$2 + 168 >> 2] + HEAP32[$2 + 124 >> 2];
    HEAP32[$2 + 136 >> 2] = HEAP32[$2 + 136 >> 2] + 1;
    if (HEAP32[$2 + 136 >> 2] >= HEAP32[$2 + 176 >> 2]) {
     HEAP32[$2 + 136 >> 2] = 0;
     HEAP32[$2 + 132 >> 2] = HEAP32[$2 + 132 >> 2] + 1;
    }
    while (1) {
     if (HEAPU32[$2 + 124 >> 2] >= 8) {
      jsvStringIteratorSetCharAndNext($2 + 88 | 0, HEAP32[$2 + 128 >> 2] >>> HEAP32[$2 + 124 >> 2] - 8 << 24 >> 24);
      HEAP32[$2 + 124 >> 2] = HEAP32[$2 + 124 >> 2] - 8;
      continue;
     }
     break;
    }
    continue;
   }
   break;
  }
  jsvStringIteratorFree_16($2 + 88 | 0);
  jsvUnLock(HEAP32[$2 + 148 >> 2]);
  if (HEAP8[$2 + 183 | 0] & 1) {
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 144 >> 2], 101361, HEAP32[$2 + 140 >> 2]);
   HEAP32[$2 + 268 >> 2] = HEAP32[$2 + 144 >> 2];
   break label$1;
  }
  HEAP32[$2 + 268 >> 2] = HEAP32[$2 + 140 >> 2];
 }
 __stack_pointer = $2 + 272 | 0;
 return HEAP32[$2 + 268 >> 2];
}

function tflite___28anonymous_20namespace_29__AllocationInfoBuilder__AddTensors_28tflite__SubGraph_20const__2c_20int_20const__2c_20TfLiteEvalTensor__29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 112 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 104 >> 2] = $0;
 HEAP32[$4 + 100 >> 2] = $1;
 HEAP32[$4 + 96 >> 2] = $2;
 HEAP32[$4 + 92 >> 2] = $3;
 $1 = HEAP32[$4 + 104 >> 2];
 label$1: {
  if (!HEAP32[$4 + 92 >> 2]) {
   break label$1;
  }
 }
 HEAP32[$4 + 88 >> 2] = 0;
 label$2: {
  while (1) {
   if (HEAPU32[$4 + 88 >> 2] < HEAPU32[$1 + 8 >> 2]) {
    HEAP32[$4 + 84 >> 2] = HEAP32[$1 + 16 >> 2] + Math_imul(HEAP32[$4 + 88 >> 2], 24);
    HEAP32[HEAP32[$4 + 84 >> 2] + 4 >> 2] = HEAP32[$4 + 92 >> 2] + Math_imul(HEAP32[$4 + 88 >> 2], 12);
    HEAP32[$4 + 80 >> 2] = tflite__TfLiteEvalTensorByteLength_28TfLiteEvalTensor_20const__2c_20unsigned_20long__29(HEAP32[$4 + 92 >> 2] + Math_imul(HEAP32[$4 + 88 >> 2], 12) | 0, HEAP32[$4 + 84 >> 2]);
    if (HEAP32[$4 + 80 >> 2]) {
     HEAP32[$4 + 108 >> 2] = HEAP32[$4 + 80 >> 2];
     break label$2;
    } else {
     HEAP32[HEAP32[$4 + 84 >> 2] + 8 >> 2] = -1;
     HEAP32[HEAP32[$4 + 84 >> 2] + 12 >> 2] = -1;
     $0 = 0;
     if (!HEAP32[HEAP32[$4 + 92 >> 2] + Math_imul(HEAP32[$4 + 88 >> 2], 12) >> 2]) {
      $0 = tflite__Tensor__is_variable_28_29_20const(flatbuffers__Vector_flatbuffers__Offset_tflite__Tensor____Get_28unsigned_20int_29_20const(tflite__SubGraph__tensors_28_29_20const(HEAP32[$4 + 100 >> 2]), HEAP32[$4 + 88 >> 2])) ^ -1;
     }
     HEAP8[HEAP32[$4 + 84 >> 2] + 20 | 0] = $0 & 1;
     label$8: {
      if (HEAP32[$4 + 96 >> 2]) {
       HEAP32[HEAP32[$4 + 84 >> 2] + 16 >> 2] = HEAP32[HEAP32[$4 + 96 >> 2] + (HEAP32[$4 + 88 >> 2] << 2) >> 2];
       break label$8;
      }
      HEAP32[HEAP32[$4 + 84 >> 2] + 16 >> 2] = -1;
     }
     HEAP32[$4 + 88 >> 2] = HEAP32[$4 + 88 >> 2] + 1;
     continue;
    }
   }
   break;
  }
  HEAP32[$4 + 76 >> 2] = 0;
  while (1) {
   if (HEAPU32[$4 + 76 >> 2] < flatbuffers__Vector_int___size_28_29_20const(tflite__SubGraph__inputs_28_29_20const(HEAP32[$4 + 100 >> 2])) >>> 0) {
    HEAP32[$4 + 72 >> 2] = flatbuffers__Vector_int___Get_28unsigned_20int_29_20const(tflite__SubGraph__inputs_28_29_20const(HEAP32[$4 + 100 >> 2]), HEAP32[$4 + 76 >> 2]);
    HEAP32[$4 + 68 >> 2] = HEAP32[$1 + 16 >> 2] + Math_imul(HEAP32[$4 + 72 >> 2], 24);
    HEAP32[HEAP32[$4 + 68 >> 2] + 8 >> 2] = 0;
    HEAP32[$4 + 76 >> 2] = HEAP32[$4 + 76 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$4 + 64 >> 2] = 0;
  while (1) {
   if (HEAPU32[$4 + 64 >> 2] < flatbuffers__Vector_int___size_28_29_20const(tflite__SubGraph__outputs_28_29_20const(HEAP32[$4 + 100 >> 2])) >>> 0) {
    HEAP32[$4 + 60 >> 2] = flatbuffers__Vector_int___Get_28unsigned_20int_29_20const(tflite__SubGraph__outputs_28_29_20const(HEAP32[$4 + 100 >> 2]), HEAP32[$4 + 64 >> 2]);
    HEAP32[$4 + 56 >> 2] = HEAP32[$1 + 16 >> 2] + Math_imul(HEAP32[$4 + 60 >> 2], 24);
    $0 = flatbuffers__Vector_flatbuffers__Offset_tflite__Operator____size_28_29_20const(tflite__SubGraph__operators_28_29_20const(HEAP32[$4 + 100 >> 2]));
    HEAP32[HEAP32[$4 + 56 >> 2] + 12 >> 2] = $0 - 1;
    HEAP32[$4 + 64 >> 2] = HEAP32[$4 + 64 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$4 + 52 >> 2] = flatbuffers__Vector_flatbuffers__Offset_tflite__Operator____size_28_29_20const(tflite__SubGraph__operators_28_29_20const(HEAP32[$4 + 100 >> 2])) - 1;
  while (1) {
   if (HEAP32[$4 + 52 >> 2] >= 0) {
    HEAP32[$4 + 48 >> 2] = flatbuffers__Vector_flatbuffers__Offset_tflite__Operator____Get_28unsigned_20int_29_20const(tflite__SubGraph__operators_28_29_20const(HEAP32[$4 + 100 >> 2]), HEAP32[$4 + 52 >> 2]);
    HEAP32[$4 + 44 >> 2] = 0;
    while (1) {
     if (HEAPU32[$4 + 44 >> 2] < flatbuffers__Vector_int___size_28_29_20const(tflite__Operator__inputs_28_29_20const(HEAP32[$4 + 48 >> 2])) >>> 0) {
      HEAP32[$4 + 40 >> 2] = flatbuffers__Vector_int___Get_28unsigned_20int_29_20const(tflite__Operator__inputs_28_29_20const(HEAP32[$4 + 48 >> 2]), HEAP32[$4 + 44 >> 2]);
      HEAP32[$4 + 36 >> 2] = HEAP32[$1 + 16 >> 2] + Math_imul(HEAP32[$4 + 40 >> 2], 24);
      if (!(HEAP32[HEAP32[$4 + 36 >> 2] + 12 >> 2] != -1 & HEAP32[HEAP32[$4 + 36 >> 2] + 12 >> 2] >= HEAP32[$4 + 52 >> 2])) {
       HEAP32[HEAP32[$4 + 36 >> 2] + 12 >> 2] = HEAP32[$4 + 52 >> 2];
      }
      HEAP32[$4 + 44 >> 2] = HEAP32[$4 + 44 >> 2] + 1;
      continue;
     }
     break;
    }
    HEAP32[$4 + 32 >> 2] = 0;
    while (1) {
     if (HEAPU32[$4 + 32 >> 2] < flatbuffers__Vector_int___size_28_29_20const(tflite__Operator__outputs_28_29_20const(HEAP32[$4 + 48 >> 2])) >>> 0) {
      HEAP32[$4 + 28 >> 2] = flatbuffers__Vector_int___Get_28unsigned_20int_29_20const(tflite__Operator__outputs_28_29_20const(HEAP32[$4 + 48 >> 2]), HEAP32[$4 + 32 >> 2]);
      HEAP32[$4 + 24 >> 2] = HEAP32[$1 + 16 >> 2] + Math_imul(HEAP32[$4 + 28 >> 2], 24);
      if (!(HEAP32[HEAP32[$4 + 24 >> 2] + 8 >> 2] != -1 & HEAP32[HEAP32[$4 + 24 >> 2] + 8 >> 2] <= HEAP32[$4 + 52 >> 2])) {
       HEAP32[HEAP32[$4 + 24 >> 2] + 8 >> 2] = HEAP32[$4 + 52 >> 2];
      }
      HEAP32[$4 + 32 >> 2] = HEAP32[$4 + 32 >> 2] + 1;
      continue;
     }
     break;
    }
    HEAP32[$4 + 52 >> 2] = HEAP32[$4 + 52 >> 2] - 1;
    continue;
   }
   break;
  }
  HEAP32[$4 + 20 >> 2] = 0;
  while (1) {
   if (HEAPU32[$4 + 20 >> 2] < HEAPU32[$1 + 8 >> 2]) {
    HEAP32[$4 + 16 >> 2] = HEAP32[$1 + 16 >> 2] + Math_imul(HEAP32[$4 + 20 >> 2], 24);
    $0 = 0;
    $0 = HEAP32[HEAP32[$4 + 16 >> 2] + 8 >> 2] == -1 ? HEAP32[HEAP32[$4 + 16 >> 2] + 12 >> 2] != -1 : $0;
    HEAP8[$4 + 15 | 0] = $0;
    if (HEAP8[$4 + 15 | 0] & 1) {
     HEAP8[HEAP32[$4 + 16 >> 2] + 20 | 0] = 0;
    }
    $0 = 0;
    if (!(HEAP8[$4 + 15 | 0] & 1)) {
     $0 = 1;
     $0 = HEAP32[HEAP32[$4 + 16 >> 2] + 8 >> 2] != -1 ? HEAP32[HEAP32[$4 + 16 >> 2] + 12 >> 2] == -1 : $0;
    }
    HEAP8[$4 + 14 | 0] = $0 & 1;
    if (!(!(HEAP8[$4 + 14 | 0] & 1) | !(HEAP8[HEAP32[$4 + 16 >> 2] + 20 | 0] & 1))) {
     $0 = HEAP32[$1 >> 2];
     $1 = HEAP32[$4 + 20 >> 2];
     $2 = HEAP32[HEAP32[$4 + 16 >> 2] + 8 >> 2];
     HEAP32[$4 + 8 >> 2] = HEAP32[HEAP32[$4 + 16 >> 2] + 12 >> 2];
     HEAP32[$4 + 4 >> 2] = $2;
     HEAP32[$4 >> 2] = $1;
     tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 107595, $4);
     HEAP32[$4 + 108 >> 2] = 1;
     break label$2;
    }
    HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 20 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$4 + 108 >> 2] = 0;
 }
 __stack_pointer = $4 + 112 | 0;
 return HEAP32[$4 + 108 >> 2];
}

function jspeFactor() {
 var $0 = 0, $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 $0 = __stack_pointer - 96 | 0;
 __stack_pointer = $0;
 label$1: {
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 128) {
   HEAP32[$0 + 88 >> 2] = jspGetNamedVariable(jslGetTokenValueAsString());
   jslGetNextToken();
   label$3: {
    if (HEAP16[HEAP32[38615] + 2 >> 1] == 133) {
     jsExceptionHere(2, 106048, 0);
     break label$3;
    }
    label$5: {
     if (HEAP16[HEAP32[38615] + 2 >> 1] != 162) {
      break label$5;
     }
     if (!(wasm2js_i32$0 = jsvIsName(HEAP32[$0 + 88 >> 2]) & 1, wasm2js_i32$1 = 1, wasm2js_i32$2 = HEAP32[$0 + 88 >> 2] | (HEAP32[46755] & 63) == 1, 
     wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1)) {
      break label$5;
     }
     HEAP32[$0 + 84 >> 2] = jspeArrowFunction(0, HEAP32[$0 + 88 >> 2]);
     jsvUnLock(HEAP32[$0 + 88 >> 2]);
     HEAP32[$0 + 88 >> 2] = HEAP32[$0 + 84 >> 2];
    }
   }
   HEAP32[$0 + 92 >> 2] = HEAP32[$0 + 88 >> 2];
   break label$1;
  }
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 129) {
   HEAP32[$0 + 80 >> 2] = 0;
   if ((HEAP32[46755] & 63) == 1) {
    HEAP32[$0 + 80 >> 2] = jsvNewFromLongInteger(stringToInt(jslGetTokenValueAsString()), i64toi32_i32$HIGH_BITS);
   }
   jslGetNextToken();
   HEAP32[$0 + 92 >> 2] = HEAP32[$0 + 80 >> 2];
   break label$1;
  }
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 130) {
   HEAP32[$0 + 76 >> 2] = 0;
   if ((HEAP32[46755] & 63) == 1) {
    HEAP32[$0 + 76 >> 2] = jsvNewFromFloat(stringToFloat(jslGetTokenValueAsString()));
   }
   jslGetNextToken();
   HEAP32[$0 + 92 >> 2] = HEAP32[$0 + 76 >> 2];
   break label$1;
  }
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 40) {
   jslGetNextToken();
   if (!(jspCheckStackPosition() & 1)) {
    HEAP32[$0 + 92 >> 2] = 0;
    break label$1;
   }
   HEAP32[$0 + 92 >> 2] = jspeExpressionOrArrowFunction();
   break label$1;
  }
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 180) {
   jslGetNextToken();
   label$14: {
    if ((HEAP32[46755] & 63) == 1) {
     $1 = jsvNewFromBool(1);
     break label$14;
    }
    $1 = 0;
   }
   HEAP32[$0 + 92 >> 2] = $1;
   break label$1;
  }
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 181) {
   jslGetNextToken();
   label$17: {
    if ((HEAP32[46755] & 63) == 1) {
     $1 = jsvNewFromBool(0);
     break label$17;
    }
    $1 = 0;
   }
   HEAP32[$0 + 92 >> 2] = $1;
   break label$1;
  }
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 182) {
   jslGetNextToken();
   label$20: {
    if ((HEAP32[46755] & 63) == 1) {
     $1 = jsvNewWithFlags(2);
     break label$20;
    }
    $1 = 0;
   }
   HEAP32[$0 + 92 >> 2] = $1;
   break label$1;
  }
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 183) {
   jslGetNextToken();
   HEAP32[$0 + 92 >> 2] = 0;
   break label$1;
  }
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 131) {
   HEAP32[$0 + 72 >> 2] = 0;
   if ((HEAP32[46755] & 63) == 1) {
    HEAP32[$0 + 72 >> 2] = jslGetTokenValueAsVar();
   }
   jslGetNextToken();
   HEAP32[$0 + 92 >> 2] = HEAP32[$0 + 72 >> 2];
   break label$1;
  }
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 133) {
   HEAP32[$0 + 92 >> 2] = jspeTemplateLiteral();
   break label$1;
  }
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 135) {
   HEAP32[$0 + 68 >> 2] = 0;
   if ((HEAP32[46755] & 63) == 1) {
    HEAP32[$0 + 64 >> 2] = jslGetTokenValueAsVar();
    HEAP32[$0 + 60 >> 2] = 0;
    HEAP32[$0 + 56 >> 2] = 0;
    jsvStringIteratorNew($0 + 16 | 0, HEAP32[$0 + 64 >> 2], 0);
    while (1) {
     if (jsvStringIteratorHasChar_4($0 + 16 | 0) & 1) {
      HEAP32[$0 + 56 >> 2] = HEAP32[$0 + 56 >> 2] + 1;
      if ((jsvStringIteratorGetCharAndNext($0 + 16 | 0) & 255) == 47) {
       HEAP32[$0 + 60 >> 2] = HEAP32[$0 + 56 >> 2];
      }
      continue;
     }
     break;
    }
    jsvStringIteratorFree_4($0 + 16 | 0);
    HEAP32[$0 + 12 >> 2] = 0;
    if (HEAPU32[$0 + 60 >> 2] < HEAPU32[$0 + 56 >> 2]) {
     HEAP32[$0 + 12 >> 2] = jsvNewFromStringVar(HEAP32[$0 + 64 >> 2], HEAP32[$0 + 60 >> 2], 2147483647);
    }
    HEAP32[$0 + 8 >> 2] = jsvNewFromStringVar(HEAP32[$0 + 64 >> 2], 1, HEAP32[$0 + 60 >> 2] - 2 | 0);
    HEAP32[$0 + 68 >> 2] = jswrap_regexp_constructor(HEAP32[$0 + 8 >> 2], HEAP32[$0 + 12 >> 2]);
    jsvUnLock3(HEAP32[$0 + 64 >> 2], HEAP32[$0 + 12 >> 2], HEAP32[$0 + 8 >> 2]);
   }
   jslGetNextToken();
   HEAP32[$0 + 92 >> 2] = HEAP32[$0 + 68 >> 2];
   break label$1;
  }
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 123) {
   if (!(jspCheckStackPosition() & 1)) {
    HEAP32[$0 + 92 >> 2] = 0;
    break label$1;
   }
   HEAP32[$0 + 92 >> 2] = jspeFactorObject();
   break label$1;
  }
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 91) {
   if (!(jspCheckStackPosition() & 1)) {
    HEAP32[$0 + 92 >> 2] = 0;
    break label$1;
   }
   HEAP32[$0 + 92 >> 2] = jspeFactorArray();
   break label$1;
  }
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 170) {
   if (!(jspCheckStackPosition() & 1)) {
    HEAP32[$0 + 92 >> 2] = 0;
    break label$1;
   }
   jslGetNextToken();
   HEAP32[$0 + 92 >> 2] = jspeFunctionDefinition(1);
   break label$1;
  }
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 194) {
   if (!(jspCheckStackPosition() & 1)) {
    HEAP32[$0 + 92 >> 2] = 0;
    break label$1;
   }
   jslGetNextToken();
   HEAP32[$0 + 92 >> 2] = jspeClassDefinition(1);
   break label$1;
  }
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 175) {
   jslGetNextToken();
   if (HEAP32[46753]) {
    $1 = HEAP32[46753];
   } else {
    $1 = HEAP32[46747];
   }
   HEAP32[$0 + 92 >> 2] = jsvLockAgain($1);
   break label$1;
  }
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 190) {
   if (!(jspCheckStackPosition() & 1)) {
    HEAP32[$0 + 92 >> 2] = 0;
    break label$1;
   }
   HEAP32[$0 + 92 >> 2] = jspeFactorDelete();
   break label$1;
  }
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 191) {
   if (!(jspCheckStackPosition() & 1)) {
    HEAP32[$0 + 92 >> 2] = 0;
    break label$1;
   }
   HEAP32[$0 + 92 >> 2] = jspeFactorTypeOf();
   break label$1;
  }
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 192) {
   if (!(jspCheckStackPosition() & 1)) {
    HEAP32[$0 + 92 >> 2] = 0;
    break label$1;
   }
   jslGetNextToken();
   jsvUnLock(jspeUnaryExpression());
   HEAP32[$0 + 92 >> 2] = 0;
   break label$1;
  }
  if (!(jslMatch(0) & 1)) {
   HEAP32[$0 + 92 >> 2] = 0;
   break label$1;
  }
  jsExceptionHere(2, 97383, 0);
  HEAP32[$0 + 92 >> 2] = 0;
 }
 __stack_pointer = $0 + 96 | 0;
 return HEAP32[$0 + 92 >> 2];
}

function ftoa_bounded_extra($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 96 | 0;
 __stack_pointer = $5;
 HEAPF64[$5 + 88 >> 3] = $0;
 HEAP32[$5 + 84 >> 2] = $1;
 HEAP32[$5 + 80 >> 2] = $2;
 HEAP32[$5 + 76 >> 2] = $3;
 HEAP32[$5 + 72 >> 2] = $4;
 HEAPF64[$5 + 64 >> 3] = 1e-7;
 $2 = __DOUBLE_BITS_1(HEAPF64[$5 + 88 >> 3]);
 $3 = $2;
 $1 = i64toi32_i32$HIGH_BITS;
 $2 = $1 & 2147483647;
 $1 = $3;
 label$1: {
  if (!(!$1 & ($2 | 0) == 2146435072 | $2 >>> 0 < 2146435072)) {
   strcpy(HEAP32[$5 + 84 >> 2], 108990);
   break label$1;
  }
  $1 = __DOUBLE_BITS_1(HEAPF64[$5 + 88 >> 3]);
  $3 = $1;
  $2 = i64toi32_i32$HIGH_BITS;
  $1 = $2 & 2147483647;
  label$4: {
   if (($1 | 0) == 2146435072 | $1 >>> 0 > 2146435072) {
    if (HEAPF64[$5 + 88 >> 3] < 0) {
     strcpy(HEAP32[$5 + 84 >> 2], 96418);
     break label$4;
    }
    strcpy(HEAP32[$5 + 84 >> 2], 96419);
    break label$4;
   }
   if (HEAPF64[$5 + 88 >> 3] < 0) {
    $1 = HEAP32[$5 + 80 >> 2] - 1 | 0;
    HEAP32[$5 + 80 >> 2] = $1;
    if (!$1) {
     HEAP8[HEAP32[$5 + 84 >> 2]] = 0;
     break label$1;
    }
    $1 = HEAP32[$5 + 84 >> 2];
    HEAP32[$5 + 84 >> 2] = $1 + 1;
    HEAP8[$1 | 0] = 45;
    HEAPF64[$5 + 88 >> 3] = -HEAPF64[$5 + 88 >> 3];
   }
   HEAP32[$5 + 60 >> 2] = 0;
   if (!(!(HEAPF64[$5 + 88 >> 3] > 0) | HEAP32[$5 + 76 >> 2] != 10 | HEAP32[$5 + 72 >> 2] >= 0)) {
    label$11: {
     if (HEAPF64[$5 + 88 >> 3] >= 1e21) {
      while (1) {
       if (HEAPF64[$5 + 88 >> 3] > 1e5) {
        HEAPF64[$5 + 88 >> 3] = HEAPF64[$5 + 88 >> 3] / 1e5;
        HEAP32[$5 + 60 >> 2] = HEAP32[$5 + 60 >> 2] + 5;
        continue;
       }
       break;
      }
      while (1) {
       if (HEAPF64[$5 + 88 >> 3] > 10) {
        HEAPF64[$5 + 88 >> 3] = HEAPF64[$5 + 88 >> 3] / 10;
        HEAP32[$5 + 60 >> 2] = HEAP32[$5 + 60 >> 2] + 1;
        continue;
       }
       break;
      }
      break label$11;
     }
     if (HEAPF64[$5 + 88 >> 3] < 1e-6) {
      while (1) {
       if (HEAPF64[$5 + 88 >> 3] < 1e-5) {
        HEAPF64[$5 + 88 >> 3] = HEAPF64[$5 + 88 >> 3] * 1e5;
        HEAP32[$5 + 60 >> 2] = HEAP32[$5 + 60 >> 2] - 5;
        continue;
       }
       break;
      }
      while (1) {
       if (HEAPF64[$5 + 88 >> 3] < 1) {
        HEAPF64[$5 + 88 >> 3] = HEAPF64[$5 + 88 >> 3] * 10;
        HEAP32[$5 + 60 >> 2] = HEAP32[$5 + 60 >> 2] - 1;
        continue;
       }
       break;
      }
     }
    }
   }
   $0 = HEAPF64[$5 + 88 >> 3] + 1e-7;
   label$22: {
    if (Math_abs($0) < 2147483648) {
     $1 = ~~$0;
     break label$22;
    }
    $1 = -2147483648;
   }
   $0 = HEAPF64[$5 + 88 >> 3];
   label$24: {
    if (Math_abs($0) < 2147483648) {
     $2 = ~~$0;
     break label$24;
    }
    $2 = -2147483648;
   }
   if (($1 | 0) == ($2 + 1 | 0)) {
    $0 = HEAPF64[$5 + 88 >> 3];
    label$27: {
     if (Math_abs($0) < 2147483648) {
      $1 = ~~$0;
      break label$27;
     }
     $1 = -2147483648;
    }
    HEAPF64[$5 + 88 >> 3] = $1 + 1 | 0;
   }
   HEAPF64[$5 + 48 >> 3] = 1;
   while (1) {
    if (HEAPF64[$5 + 88 >> 3] >= HEAPF64[$5 + 48 >> 3] * +HEAP32[$5 + 76 >> 2]) {
     HEAPF64[$5 + 48 >> 3] = HEAPF64[$5 + 48 >> 3] * +HEAP32[$5 + 76 >> 2];
     continue;
    }
    break;
   }
   while (1) {
    if (HEAPF64[$5 + 48 >> 3] >= 1) {
     $0 = HEAPF64[$5 + 88 >> 3] / HEAPF64[$5 + 48 >> 3];
     label$33: {
      if (Math_abs($0) < 2147483648) {
       $1 = ~~$0;
       break label$33;
      }
      $1 = -2147483648;
     }
     HEAP32[$5 + 44 >> 2] = $1;
     HEAPF64[$5 + 88 >> 3] = - +HEAP32[$5 + 44 >> 2] * HEAPF64[$5 + 48 >> 3] + HEAPF64[$5 + 88 >> 3];
     $1 = HEAP32[$5 + 80 >> 2] - 1 | 0;
     HEAP32[$5 + 80 >> 2] = $1;
     if ($1) {
      $2 = itoch(HEAP32[$5 + 44 >> 2]);
      $1 = HEAP32[$5 + 84 >> 2];
      HEAP32[$5 + 84 >> 2] = $1 + 1;
      HEAP8[$1 | 0] = $2;
      HEAPF64[$5 + 48 >> 3] = HEAPF64[$5 + 48 >> 3] / +HEAP32[$5 + 76 >> 2];
      continue;
     } else {
      HEAP8[HEAP32[$5 + 84 >> 2]] = 0;
      break label$1;
     }
    }
    break;
   }
   if (!(!(HEAP32[$5 + 72 >> 2] < 0 & HEAPF64[$5 + 88 >> 3] > 0) & HEAP32[$5 + 72 >> 2] <= 0)) {
    HEAP8[$5 + 43 | 0] = 0;
    HEAPF64[$5 + 88 >> 3] = HEAPF64[$5 + 88 >> 3] * +HEAP32[$5 + 76 >> 2];
    while (1) {
     label$41: {
      if (!(HEAP32[$5 + 72 >> 2] <= -12 | HEAP32[$5 + 72 >> 2] >= 0)) {
       $1 = 1;
       if (HEAPF64[$5 + 88 >> 3] > 1e-7) {
        break label$41;
       }
      }
      $1 = HEAP32[$5 + 72 >> 2] > 0;
     }
     if ($1) {
      $0 = HEAPF64[$5 + 88 >> 3] + (HEAP32[$5 + 72 >> 2] == 1 ? .5 : 1e-8);
      label$44: {
       if (Math_abs($0) < 2147483648) {
        $1 = ~~$0;
        break label$44;
       }
       $1 = -2147483648;
      }
      HEAP32[$5 + 36 >> 2] = $1;
      HEAPF64[$5 + 88 >> 3] = (HEAPF64[$5 + 88 >> 3] - +HEAP32[$5 + 36 >> 2]) * +HEAP32[$5 + 76 >> 2];
      if (HEAP32[$5 + 36 >> 2] == HEAP32[$5 + 76 >> 2]) {
       HEAP32[$5 + 36 >> 2] = HEAP32[$5 + 76 >> 2] - 1;
      }
      if (!(HEAP8[$5 + 43 | 0] & 1)) {
       HEAP8[$5 + 43 | 0] = 1;
       $1 = HEAP32[$5 + 80 >> 2] - 1 | 0;
       HEAP32[$5 + 80 >> 2] = $1;
       if (!$1) {
        HEAP8[HEAP32[$5 + 84 >> 2]] = 0;
        break label$1;
       }
       $1 = HEAP32[$5 + 84 >> 2];
       HEAP32[$5 + 84 >> 2] = $1 + 1;
       HEAP8[$1 | 0] = 46;
      }
      $1 = HEAP32[$5 + 80 >> 2] - 1 | 0;
      HEAP32[$5 + 80 >> 2] = $1;
      if (!$1) {
       HEAP8[HEAP32[$5 + 84 >> 2]] = 0;
       break label$1;
      }
      $2 = itoch(HEAP32[$5 + 36 >> 2]);
      $1 = HEAP32[$5 + 84 >> 2];
      HEAP32[$5 + 84 >> 2] = $1 + 1;
      HEAP8[$1 | 0] = $2;
      HEAP32[$5 + 72 >> 2] = HEAP32[$5 + 72 >> 2] - 1;
      continue;
     }
     break;
    }
   }
   if (!(!HEAP32[$5 + 60 >> 2] | HEAPU32[$5 + 80 >> 2] <= 5)) {
    $1 = HEAP32[$5 + 84 >> 2];
    HEAP32[$5 + 84 >> 2] = $1 + 1;
    HEAP8[$1 | 0] = 101;
    if (HEAP32[$5 + 60 >> 2] > 0) {
     $1 = HEAP32[$5 + 84 >> 2];
     HEAP32[$5 + 84 >> 2] = $1 + 1;
     HEAP8[$1 | 0] = 43;
    }
    itostr_1(HEAP32[$5 + 60 >> 2], HEAP32[$5 + 84 >> 2], 10);
    break label$1;
   }
   $1 = HEAP32[$5 + 84 >> 2];
   HEAP32[$5 + 84 >> 2] = $1 + 1;
   HEAP8[$1 | 0] = 0;
  }
 }
 __stack_pointer = $5 + 96 | 0;
}

function jsfBankFindFile($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = __stack_pointer - 480 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 472 >> 2] = $0;
 HEAP32[$4 + 468 >> 2] = $1;
 HEAP32[$4 + 464 >> 2] = $3;
 HEAP32[$4 + 460 >> 2] = HEAP32[$4 + 472 >> 2];
 label$1: {
  label$2: {
   if (!(!HEAP32[46756] | HEAP32[$4 + 460 >> 2] != 134217728)) {
    HEAP32[$4 + 156 >> 2] = HEAP32[$4 + 460 >> 2];
    HEAP32[$4 + 152 >> 2] = HEAP32[46756];
    HEAP32[$4 + 148 >> 2] = HEAP32[$4 + 152 >> 2] + HEAP32[46757];
    HEAP32[$4 + 144 >> 2] = HEAP32[$4 + 148 >> 2] - HEAP32[$4 + 152 >> 2] >>> 5;
    while (1) {
     if (HEAP32[$4 + 144 >> 2]) {
      HEAP32[$4 + 140 >> 2] = HEAP32[$4 + 144 >> 2];
      if (HEAP32[$4 + 140 >> 2] > 8) {
       HEAP32[$4 + 140 >> 2] = 8;
      }
      jshFlashRead($4 + 160 | 0, HEAP32[$4 + 152 >> 2], HEAP32[$4 + 140 >> 2] << 5);
      HEAP32[$4 + 152 >> 2] = HEAP32[$4 + 152 >> 2] + (HEAP32[$4 + 140 >> 2] << 5);
      HEAP32[$4 + 144 >> 2] = HEAP32[$4 + 144 >> 2] - HEAP32[$4 + 140 >> 2];
      HEAP32[$4 + 136 >> 2] = 0;
      while (1) {
       if (HEAP32[$4 + 136 >> 2] < HEAP32[$4 + 140 >> 2]) {
        $3 = ($4 + 160 | 0) + (HEAP32[$4 + 136 >> 2] << 5) | 0;
        HEAP32[$4 + 64 >> 2] = HEAP32[$3 + 28 >> 2];
        $1 = HEAP32[$3 + 20 >> 2];
        $0 = HEAP32[$3 + 24 >> 2];
        HEAP32[$4 + 56 >> 2] = $1;
        HEAP32[$4 + 60 >> 2] = $0;
        $1 = HEAP32[$3 + 16 >> 2];
        $0 = HEAP32[$3 + 12 >> 2];
        HEAP32[$4 + 48 >> 2] = $0;
        HEAP32[$4 + 52 >> 2] = $1;
        $0 = HEAP32[$3 + 8 >> 2];
        $1 = HEAP32[$3 + 4 >> 2];
        HEAP32[$4 + 40 >> 2] = $1;
        HEAP32[$4 + 44 >> 2] = $0;
        HEAP32[$4 + 32 >> 2] = HEAP32[$2 + 24 >> 2];
        $3 = $2;
        $0 = HEAP32[$3 + 16 >> 2];
        $1 = HEAP32[$3 + 20 >> 2];
        HEAP32[$4 + 24 >> 2] = $0;
        HEAP32[$4 + 28 >> 2] = $1;
        $0 = HEAP32[$3 + 12 >> 2];
        $1 = HEAP32[$3 + 8 >> 2];
        HEAP32[$4 + 16 >> 2] = $1;
        HEAP32[$4 + 20 >> 2] = $0;
        $1 = HEAP32[$3 + 4 >> 2];
        $0 = HEAP32[$3 >> 2];
        HEAP32[$4 + 8 >> 2] = $0;
        HEAP32[$4 + 12 >> 2] = $1;
        if (jsfIsNameEqual($4 + 40 | 0, $4 + 8 | 0) & 1) {
         HEAP32[$4 + 132 >> 2] = HEAP32[$4 + 156 >> 2] + HEAP32[($4 + 160 | 0) + (HEAP32[$4 + 136 >> 2] << 5) >> 2];
         if (!(!(jsfGetFileHeader(HEAP32[$4 + 132 >> 2], ($4 + 160 | 0) + (HEAP32[$4 + 136 >> 2] << 5) | 0, 1) & 1) | !HEAP32[(($4 + 160 | 0) + (HEAP32[$4 + 136 >> 2] << 5) | 0) + 4 >> 2])) {
          if (HEAP32[$4 + 464 >> 2]) {
           $3 = ($4 + 160 | 0) + (HEAP32[$4 + 136 >> 2] << 5) | 0;
           $1 = HEAP32[$3 >> 2];
           $0 = HEAP32[$3 + 4 >> 2];
           $5 = $1;
           $2 = HEAP32[$4 + 464 >> 2];
           $1 = $2;
           HEAP32[$1 >> 2] = $5;
           HEAP32[$1 + 4 >> 2] = $0;
           $1 = HEAP32[$3 + 28 >> 2];
           $0 = HEAP32[$3 + 24 >> 2];
           $5 = $0;
           $0 = $2;
           HEAP32[$0 + 24 >> 2] = $5;
           HEAP32[$0 + 28 >> 2] = $1;
           $0 = HEAP32[$3 + 20 >> 2];
           $1 = HEAP32[$3 + 16 >> 2];
           $5 = $1;
           $1 = $2;
           HEAP32[$1 + 16 >> 2] = $5;
           HEAP32[$1 + 20 >> 2] = $0;
           $1 = HEAP32[$3 + 12 >> 2];
           $0 = HEAP32[$3 + 8 >> 2];
           $3 = $0;
           $0 = $2;
           HEAP32[$0 + 8 >> 2] = $3;
           HEAP32[$0 + 12 >> 2] = $1;
          }
          HEAP32[$4 + 476 >> 2] = HEAP32[$4 + 132 >> 2] + 32;
          break label$1;
         }
        }
        HEAP32[$4 + 136 >> 2] = HEAP32[$4 + 136 >> 2] + 1;
        continue;
       }
       break;
      }
      continue;
     }
     break;
    }
    HEAP32[$4 + 460 >> 2] = HEAP32[46756] - 32;
    HEAP32[$4 + 428 >> 2] = 0;
    HEAP32[$4 + 424 >> 2] = HEAP32[46757];
    break label$2;
   }
   if (!(jsfGetFileHeader(HEAP32[$4 + 460 >> 2], $4 + 424 | 0, 0) & 1)) {
    HEAP32[$4 + 476 >> 2] = 0;
    break label$1;
   }
  }
  while (1) {
   if (HEAP32[$4 + 428 >> 2] == HEAP32[$2 >> 2]) {
    label$15: {
     if (!(jsfGetFileHeader(HEAP32[$4 + 460 >> 2], $4 + 424 | 0, 1) & 1)) {
      break label$15;
     }
     $3 = $4 + 424 | 0;
     HEAP32[$4 + 128 >> 2] = HEAP32[$3 + 28 >> 2];
     $1 = HEAP32[$3 + 20 >> 2];
     $0 = HEAP32[$3 + 24 >> 2];
     HEAP32[$4 + 120 >> 2] = $1;
     HEAP32[$4 + 124 >> 2] = $0;
     $1 = HEAP32[$3 + 16 >> 2];
     $0 = HEAP32[$3 + 12 >> 2];
     HEAP32[$4 + 112 >> 2] = $0;
     HEAP32[$4 + 116 >> 2] = $1;
     $0 = HEAP32[$3 + 8 >> 2];
     $1 = HEAP32[$3 + 4 >> 2];
     HEAP32[$4 + 104 >> 2] = $1;
     HEAP32[$4 + 108 >> 2] = $0;
     HEAP32[$4 + 96 >> 2] = HEAP32[$2 + 24 >> 2];
     $3 = $2;
     $0 = HEAP32[$3 + 16 >> 2];
     $1 = HEAP32[$3 + 20 >> 2];
     HEAP32[$4 + 88 >> 2] = $0;
     HEAP32[$4 + 92 >> 2] = $1;
     $0 = HEAP32[$3 + 12 >> 2];
     $1 = HEAP32[$3 + 8 >> 2];
     HEAP32[$4 + 80 >> 2] = $1;
     HEAP32[$4 + 84 >> 2] = $0;
     $1 = HEAP32[$3 + 4 >> 2];
     $0 = HEAP32[$3 >> 2];
     HEAP32[$4 + 72 >> 2] = $0;
     HEAP32[$4 + 76 >> 2] = $1;
     if (!(jsfIsNameEqual($4 + 104 | 0, $4 + 72 | 0) & 1)) {
      break label$15;
     }
     if (HEAP32[$4 + 464 >> 2]) {
      $0 = HEAP32[$4 + 428 >> 2];
      $1 = HEAP32[$4 + 424 >> 2];
      $3 = $1;
      $2 = HEAP32[$4 + 464 >> 2];
      $1 = $2;
      HEAP32[$1 >> 2] = $3;
      HEAP32[$1 + 4 >> 2] = $0;
      $1 = HEAP32[$4 + 452 >> 2];
      $0 = HEAP32[$4 + 448 >> 2];
      $3 = $0;
      $0 = $2;
      HEAP32[$0 + 24 >> 2] = $3;
      HEAP32[$0 + 28 >> 2] = $1;
      $0 = HEAP32[$4 + 444 >> 2];
      $1 = HEAP32[$4 + 440 >> 2];
      $3 = $1;
      $1 = $2;
      HEAP32[$1 + 16 >> 2] = $3;
      HEAP32[$1 + 20 >> 2] = $0;
      $1 = HEAP32[$4 + 436 >> 2];
      $0 = HEAP32[$4 + 432 >> 2];
      $3 = $0;
      $0 = $2;
      HEAP32[$0 + 8 >> 2] = $3;
      HEAP32[$0 + 12 >> 2] = $1;
     }
     HEAP32[$4 + 476 >> 2] = HEAP32[$4 + 460 >> 2] + 32;
     break label$1;
    }
   }
   if (jsfGetNextFileHeader($4 + 460 | 0, $4 + 424 | 0, 3) & 1) {
    continue;
   }
   break;
  }
  HEAP32[$4 + 476 >> 2] = 0;
 }
 __stack_pointer = $4 + 480 | 0;
 return HEAP32[$4 + 476 >> 2];
}

function void_20tflite__reference_ops__Softmax_unsigned_20char_2c_20unsigned_20char__28tflite__SoftmaxParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 208 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 204 >> 2] = $0;
 HEAP32[$5 + 200 >> 2] = $1;
 HEAP32[$5 + 196 >> 2] = $2;
 HEAP32[$5 + 192 >> 2] = $3;
 HEAP32[$5 + 188 >> 2] = $4;
 HEAP32[$5 + 184 >> 2] = HEAP32[HEAP32[$5 + 204 >> 2] + 8 >> 2];
 HEAP32[$5 + 180 >> 2] = HEAP32[HEAP32[$5 + 204 >> 2] + 12 >> 2];
 HEAP32[$5 + 176 >> 2] = HEAP32[HEAP32[$5 + 204 >> 2] + 24 >> 2];
 HEAP32[$5 + 172 >> 2] = tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$5 + 200 >> 2]) - 1;
 HEAP32[$5 + 168 >> 2] = tflite__MatchingFlatSizeSkipDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__29(HEAP32[$5 + 200 >> 2], HEAP32[$5 + 172 >> 2], HEAP32[$5 + 192 >> 2]);
 HEAP32[$5 + 164 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 200 >> 2], HEAP32[$5 + 172 >> 2], HEAP32[$5 + 192 >> 2], HEAP32[$5 + 172 >> 2]);
 HEAP32[$5 + 160 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 160 >> 2] < HEAP32[$5 + 168 >> 2]) {
   HEAP8[$5 + 159 | 0] = std____2__numeric_limits_unsigned_20char___min_28_29();
   HEAP32[$5 + 152 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 152 >> 2] < HEAP32[$5 + 164 >> 2]) {
     HEAP8[$5 + 159 | 0] = HEAPU8[unsigned_20char_20const__20std____2__max_unsigned_20char__28unsigned_20char_20const__2c_20unsigned_20char_20const__29($5 + 159 | 0, HEAP32[$5 + 196 >> 2] + (HEAP32[$5 + 152 >> 2] + Math_imul(HEAP32[$5 + 160 >> 2], HEAP32[$5 + 164 >> 2]) | 0) | 0) | 0];
     HEAP32[$5 + 152 >> 2] = HEAP32[$5 + 152 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 144 >> 2] = gemmlowp__FixedPoint_int_2c_2012___Zero_28_29();
   HEAP32[$5 + 140 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 140 >> 2] < HEAP32[$5 + 164 >> 2]) {
     HEAP32[$5 + 136 >> 2] = HEAPU8[HEAP32[$5 + 196 >> 2] + (HEAP32[$5 + 140 >> 2] + Math_imul(HEAP32[$5 + 160 >> 2], HEAP32[$5 + 164 >> 2]) | 0) | 0] - HEAPU8[$5 + 159 | 0];
     if (HEAP32[$5 + 136 >> 2] >= HEAP32[$5 + 176 >> 2]) {
      HEAP32[$5 + 132 >> 2] = tflite__MultiplyByQuantizedMultiplierGreaterThanOne_28int_2c_20int_2c_20int_29(HEAP32[$5 + 136 >> 2], HEAP32[$5 + 184 >> 2], HEAP32[$5 + 180 >> 2]);
      HEAP32[$5 + 128 >> 2] = gemmlowp__FixedPoint_int_2c_205___FromRaw_28int_29(HEAP32[$5 + 132 >> 2]);
      HEAP32[$5 + 112 >> 2] = HEAP32[$5 + 144 >> 2];
      HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 128 >> 2];
      HEAP32[$5 + 96 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__exp_on_negative_values_int_2c_205__28gemmlowp__FixedPoint_int_2c_205__29(HEAP32[$5 + 88 >> 2]);
      HEAP32[$5 + 104 >> 2] = gemmlowp__FixedPoint_int_2c_2012__20gemmlowp__Rescale_12_2c_20int_2c_200__28gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$5 + 96 >> 2]);
      HEAP32[$5 + 120 >> 2] = gemmlowp__FixedPoint_int_2c_2012__20gemmlowp__operator__int_2c_2012__28gemmlowp__FixedPoint_int_2c_2012__2c_20gemmlowp__FixedPoint_int_2c_2012__29(HEAP32[$5 + 112 >> 2], HEAP32[$5 + 104 >> 2]);
      HEAP32[$5 + 144 >> 2] = HEAP32[$5 + 120 >> 2];
     }
     HEAP32[$5 + 140 >> 2] = HEAP32[$5 + 140 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 80 >> 2] = gemmlowp__FixedPoint_int_2c_200___FromRaw_28int_29(tflite__GetReciprocal_28int_2c_20int_2c_20int__29(HEAP32[gemmlowp__FixedPoint_int_2c_2012___raw_28_29($5 + 144 | 0) >> 2], 12, $5 + 84 | 0));
   HEAP32[$5 + 76 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 76 >> 2] < HEAP32[$5 + 164 >> 2]) {
     HEAP32[$5 + 72 >> 2] = HEAPU8[HEAP32[$5 + 196 >> 2] + (HEAP32[$5 + 76 >> 2] + Math_imul(HEAP32[$5 + 160 >> 2], HEAP32[$5 + 164 >> 2]) | 0) | 0] - HEAPU8[$5 + 159 | 0];
     label$10: {
      if (HEAP32[$5 + 72 >> 2] >= HEAP32[$5 + 176 >> 2]) {
       HEAP32[$5 + 68 >> 2] = tflite__MultiplyByQuantizedMultiplierGreaterThanOne_28int_2c_20int_2c_20int_29(HEAP32[$5 + 72 >> 2], HEAP32[$5 + 184 >> 2], HEAP32[$5 + 180 >> 2]);
       HEAP32[$5 + 64 >> 2] = gemmlowp__FixedPoint_int_2c_205___FromRaw_28int_29(HEAP32[$5 + 68 >> 2]);
       HEAP32[$5 + 48 >> 2] = HEAP32[$5 + 64 >> 2];
       HEAP32[$5 + 56 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__exp_on_negative_values_int_2c_205__28gemmlowp__FixedPoint_int_2c_205__29(HEAP32[$5 + 48 >> 2]);
       HEAP32[$5 + 32 >> 2] = HEAP32[$5 + 80 >> 2];
       HEAP32[$5 + 24 >> 2] = HEAP32[$5 + 56 >> 2];
       HEAP32[$5 + 40 >> 2] = gemmlowp__FixedPoint_int_2c_200_20__200__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$5 + 32 >> 2], HEAP32[$5 + 24 >> 2]);
       HEAP32[$5 + 44 >> 2] = int_20gemmlowp__RoundingDivideByPOT_int__28int_2c_20int_29(HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($5 + 40 | 0) >> 2], HEAP32[$5 + 84 >> 2] + 23 | 0);
       HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 44 >> 2] + (std____2__numeric_limits_unsigned_20char___min_28_29() & 255);
       HEAP32[$5 + 16 >> 2] = std____2__numeric_limits_unsigned_20char___max_28_29() & 255;
       $0 = int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($5 + 20 | 0, $5 + 16 | 0);
       HEAP32[$5 + 12 >> 2] = std____2__numeric_limits_unsigned_20char___min_28_29() & 255;
       $0 = int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($0, $5 + 12 | 0);
       HEAP8[HEAP32[$5 + 188 >> 2] + (HEAP32[$5 + 76 >> 2] + Math_imul(HEAP32[$5 + 160 >> 2], HEAP32[$5 + 164 >> 2]) | 0) | 0] = HEAP32[$0 >> 2];
       break label$10;
      }
      $0 = std____2__numeric_limits_unsigned_20char___min_28_29();
      HEAP8[HEAP32[$5 + 188 >> 2] + (HEAP32[$5 + 76 >> 2] + Math_imul(HEAP32[$5 + 160 >> 2], HEAP32[$5 + 164 >> 2]) | 0) | 0] = $0;
     }
     HEAP32[$5 + 76 >> 2] = HEAP32[$5 + 76 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 160 >> 2] = HEAP32[$5 + 160 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $5 + 208 | 0;
}

function graphicsFillPoly($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $4 = __stack_pointer - 96 | 0;
 $3 = $4;
 __stack_pointer = $3;
 HEAP32[$3 + 92 >> 2] = $0;
 HEAP32[$3 + 88 >> 2] = $1;
 HEAP32[$3 + 84 >> 2] = $2;
 HEAP32[$3 + 80 >> 2] = HEAP32[$3 + 84 >> 2];
 $0 = HEAP32[$3 + 92 >> 2];
 HEAP32[$3 + 64 >> 2] = (HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8) - 1;
 HEAP32[$3 + 60 >> 2] = 0;
 HEAP32[$3 + 76 >> 2] = 0;
 while (1) {
  if (HEAP32[$3 + 76 >> 2] < HEAP32[$3 + 88 >> 2]) {
   HEAP32[$3 + 56 >> 2] = HEAP16[HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 76 >> 2] << 2) >> 1];
   HEAP32[$3 + 52 >> 2] = HEAP16[(HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 76 >> 2] << 2) | 0) + 2 >> 1];
   graphicsToDeviceCoordinates16x(HEAP32[$3 + 92 >> 2], $3 + 56 | 0, $3 + 52 | 0);
   HEAP16[HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 76 >> 2] << 2) >> 1] = HEAP32[$3 + 56 >> 2];
   HEAP16[(HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 76 >> 2] << 2) | 0) + 2 >> 1] = HEAP32[$3 + 52 >> 2];
   HEAP16[$3 + 50 >> 1] = HEAP16[(HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 76 >> 2] << 2) | 0) + 2 >> 1] >> 4;
   if (HEAP16[$3 + 50 >> 1] < HEAP32[$3 + 64 >> 2]) {
    HEAP32[$3 + 64 >> 2] = HEAP16[$3 + 50 >> 1];
   }
   if (HEAP16[$3 + 50 >> 1] > HEAP32[$3 + 60 >> 2]) {
    HEAP32[$3 + 60 >> 2] = HEAP16[$3 + 50 >> 1];
   }
   HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] + 1;
   continue;
  }
  break;
 }
 $0 = HEAP32[$3 + 92 >> 2];
 if (HEAP32[$3 + 64 >> 2] < (HEAPU8[$0 + 34 | 0] | HEAPU8[$0 + 35 | 0] << 8)) {
  $0 = HEAP32[$3 + 92 >> 2];
  HEAP32[$3 + 64 >> 2] = HEAPU8[$0 + 34 | 0] | HEAPU8[$0 + 35 | 0] << 8;
 }
 $0 = HEAP32[$3 + 92 >> 2];
 if (HEAP32[$3 + 60 >> 2] > (HEAPU8[$0 + 38 | 0] | HEAPU8[$0 + 39 | 0] << 8)) {
  $0 = HEAP32[$3 + 92 >> 2];
  HEAP32[$3 + 60 >> 2] = HEAPU8[$0 + 38 | 0] | HEAPU8[$0 + 39 | 0] << 8;
 }
 HEAP32[$3 + 44 >> 2] = 64;
 HEAP32[$3 + 68 >> 2] = HEAP32[$3 + 64 >> 2] << 4;
 while (1) {
  if (HEAP32[$3 + 68 >> 2] <= HEAP32[$3 + 60 >> 2] << 4) {
   HEAP32[$3 + 40 >> 2] = HEAP32[$3 + 68 >> 2] >> 4;
   HEAP32[$3 + 36 >> 2] = $4;
   $4 = $4 - 128 | 0;
   __stack_pointer = $4;
   $0 = $4 + -64 | 0;
   __stack_pointer = $0;
   HEAP32[$3 + 32 >> 2] = 0;
   HEAP32[$3 + 72 >> 2] = HEAP32[$3 + 88 >> 2] - 1;
   HEAP32[$3 + 76 >> 2] = 0;
   while (1) {
    if (HEAP32[$3 + 76 >> 2] < HEAP32[$3 + 88 >> 2]) {
     if (!(!(HEAP16[(HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 76 >> 2] << 2) | 0) + 2 >> 1] <= HEAP32[$3 + 68 >> 2] & HEAP16[(HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 72 >> 2] << 2) | 0) + 2 >> 1] > HEAP32[$3 + 68 >> 2]) & (HEAP16[(HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 76 >> 2] << 2) | 0) + 2 >> 1] <= HEAP32[$3 + 68 >> 2] | HEAP16[(HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 72 >> 2] << 2) | 0) + 2 >> 1] > HEAP32[$3 + 68 >> 2]))) {
      if (HEAP32[$3 + 32 >> 2] < 64) {
       HEAP32[$3 + 28 >> 2] = HEAP16[(HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 72 >> 2] << 2) | 0) + 2 >> 1] - HEAP16[(HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 76 >> 2] << 2) | 0) + 2 >> 1];
       if (HEAP32[$3 + 28 >> 2]) {
        HEAP16[(HEAP32[$3 + 32 >> 2] << 1) + $4 >> 1] = HEAP16[HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 76 >> 2] << 2) >> 1] + ((Math_imul(HEAP32[$3 + 68 >> 2] - HEAP16[(HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 76 >> 2] << 2) | 0) + 2 >> 1] | 0, HEAP16[HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 72 >> 2] << 2) >> 1] - HEAP16[HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 76 >> 2] << 2) >> 1] | 0) | 0) / HEAP32[$3 + 28 >> 2] | 0);
        HEAP8[HEAP32[$3 + 32 >> 2] + $0 | 0] = HEAP32[$3 + 28 >> 2] > 1;
        HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 32 >> 2] + 1;
       }
      }
     }
     HEAP32[$3 + 72 >> 2] = HEAP32[$3 + 76 >> 2];
     HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$3 + 76 >> 2] = 0;
   while (1) {
    if (HEAP32[$3 + 76 >> 2] < (HEAP32[$3 + 32 >> 2] - 1 | 0)) {
     if (HEAP16[(HEAP32[$3 + 76 >> 2] << 1) + $4 >> 1] > HEAP16[(HEAP32[$3 + 76 >> 2] + 1 << 1) + $4 >> 1]) {
      HEAP16[$3 + 26 >> 1] = HEAPU16[(HEAP32[$3 + 76 >> 2] << 1) + $4 >> 1];
      HEAP16[(HEAP32[$3 + 76 >> 2] << 1) + $4 >> 1] = HEAPU16[(HEAP32[$3 + 76 >> 2] + 1 << 1) + $4 >> 1];
      HEAP16[(HEAP32[$3 + 76 >> 2] + 1 << 1) + $4 >> 1] = HEAPU16[$3 + 26 >> 1];
      HEAP8[$3 + 25 | 0] = HEAP8[HEAP32[$3 + 76 >> 2] + $0 | 0] & 1;
      HEAP8[HEAP32[$3 + 76 >> 2] + $0 | 0] = HEAP8[(HEAP32[$3 + 76 >> 2] + 1 | 0) + $0 | 0] & 1;
      HEAP8[(HEAP32[$3 + 76 >> 2] + 1 | 0) + $0 | 0] = HEAP8[$3 + 25 | 0] & 1;
      if (HEAP32[$3 + 76 >> 2]) {
       HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] - 1;
      }
      continue;
     }
     HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$3 + 20 >> 2] = 0;
   HEAP32[$3 + 16 >> 2] = 0;
   HEAP32[$3 + 76 >> 2] = 0;
   while (1) {
    label$21: {
     if (HEAP32[$3 + 76 >> 2] >= HEAP32[$3 + 32 >> 2]) {
      break label$21;
     }
     if (!HEAP32[$3 + 16 >> 2]) {
      HEAP32[$3 + 20 >> 2] = HEAP16[(HEAP32[$3 + 76 >> 2] << 1) + $4 >> 1];
     }
     label$23: {
      if (HEAP8[HEAP32[$3 + 76 >> 2] + $0 | 0] & 1) {
       HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 16 >> 2] + 1;
       break label$23;
      }
      HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 16 >> 2] - 1;
     }
     if (!(HEAP32[$3 + 76 >> 2] != (HEAP32[$3 + 32 >> 2] - 1 | 0) ? HEAP32[$3 + 16 >> 2] : 0)) {
      HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 20 >> 2] + 15 >> 4;
      HEAP32[$3 + 8 >> 2] = HEAP16[(HEAP32[$3 + 76 >> 2] << 1) + $4 >> 1] + 15 >> 4;
      if (HEAP32[$3 + 8 >> 2] > HEAP32[$3 + 12 >> 2]) {
       $1 = HEAP32[$3 + 92 >> 2];
       graphicsFillRectDevice(HEAP32[$3 + 92 >> 2], HEAP32[$3 + 12 >> 2], HEAP32[$3 + 40 >> 2], HEAP32[$3 + 8 >> 2] - 1 | 0, HEAP32[$3 + 40 >> 2], HEAPU8[$1 + 17 | 0] | HEAPU8[$1 + 18 | 0] << 8 | (HEAPU8[$1 + 19 | 0] << 16 | HEAPU8[$1 + 20 | 0] << 24));
      }
     }
     if (jspIsInterrupted() & 1) {
      break label$21;
     }
     HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] + 1;
     continue;
    }
    break;
   }
   $4 = HEAP32[$3 + 36 >> 2];
   HEAP32[$3 + 68 >> 2] = HEAP32[$3 + 68 >> 2] + 16;
   continue;
  }
  break;
 }
 __stack_pointer = $3 + 96 | 0;
}

function void_20tflite__reference_ops__Softmax_signed_20char_2c_20signed_20char__28tflite__SoftmaxParams_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 208 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 204 >> 2] = $0;
 HEAP32[$5 + 200 >> 2] = $1;
 HEAP32[$5 + 196 >> 2] = $2;
 HEAP32[$5 + 192 >> 2] = $3;
 HEAP32[$5 + 188 >> 2] = $4;
 HEAP32[$5 + 184 >> 2] = HEAP32[HEAP32[$5 + 204 >> 2] + 8 >> 2];
 HEAP32[$5 + 180 >> 2] = HEAP32[HEAP32[$5 + 204 >> 2] + 12 >> 2];
 HEAP32[$5 + 176 >> 2] = HEAP32[HEAP32[$5 + 204 >> 2] + 24 >> 2];
 HEAP32[$5 + 172 >> 2] = tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$5 + 200 >> 2]) - 1;
 HEAP32[$5 + 168 >> 2] = tflite__MatchingFlatSizeSkipDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__29(HEAP32[$5 + 200 >> 2], HEAP32[$5 + 172 >> 2], HEAP32[$5 + 192 >> 2]);
 HEAP32[$5 + 164 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 200 >> 2], HEAP32[$5 + 172 >> 2], HEAP32[$5 + 192 >> 2], HEAP32[$5 + 172 >> 2]);
 HEAP32[$5 + 160 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 160 >> 2] < HEAP32[$5 + 168 >> 2]) {
   HEAP8[$5 + 159 | 0] = std____2__numeric_limits_signed_20char___min_28_29();
   HEAP32[$5 + 152 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 152 >> 2] < HEAP32[$5 + 164 >> 2]) {
     HEAP8[$5 + 159 | 0] = HEAPU8[signed_20char_20const__20std____2__max_signed_20char__28signed_20char_20const__2c_20signed_20char_20const__29($5 + 159 | 0, HEAP32[$5 + 196 >> 2] + (HEAP32[$5 + 152 >> 2] + Math_imul(HEAP32[$5 + 160 >> 2], HEAP32[$5 + 164 >> 2]) | 0) | 0) | 0];
     HEAP32[$5 + 152 >> 2] = HEAP32[$5 + 152 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 144 >> 2] = gemmlowp__FixedPoint_int_2c_2012___Zero_28_29();
   HEAP32[$5 + 140 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 140 >> 2] < HEAP32[$5 + 164 >> 2]) {
     HEAP32[$5 + 136 >> 2] = HEAP8[HEAP32[$5 + 196 >> 2] + (HEAP32[$5 + 140 >> 2] + Math_imul(HEAP32[$5 + 160 >> 2], HEAP32[$5 + 164 >> 2]) | 0) | 0] - HEAP8[$5 + 159 | 0];
     if (HEAP32[$5 + 136 >> 2] >= HEAP32[$5 + 176 >> 2]) {
      HEAP32[$5 + 132 >> 2] = tflite__MultiplyByQuantizedMultiplierGreaterThanOne_28int_2c_20int_2c_20int_29(HEAP32[$5 + 136 >> 2], HEAP32[$5 + 184 >> 2], HEAP32[$5 + 180 >> 2]);
      HEAP32[$5 + 128 >> 2] = gemmlowp__FixedPoint_int_2c_205___FromRaw_28int_29(HEAP32[$5 + 132 >> 2]);
      HEAP32[$5 + 112 >> 2] = HEAP32[$5 + 144 >> 2];
      HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 128 >> 2];
      HEAP32[$5 + 96 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__exp_on_negative_values_int_2c_205__28gemmlowp__FixedPoint_int_2c_205__29(HEAP32[$5 + 88 >> 2]);
      HEAP32[$5 + 104 >> 2] = gemmlowp__FixedPoint_int_2c_2012__20gemmlowp__Rescale_12_2c_20int_2c_200__28gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$5 + 96 >> 2]);
      HEAP32[$5 + 120 >> 2] = gemmlowp__FixedPoint_int_2c_2012__20gemmlowp__operator__int_2c_2012__28gemmlowp__FixedPoint_int_2c_2012__2c_20gemmlowp__FixedPoint_int_2c_2012__29(HEAP32[$5 + 112 >> 2], HEAP32[$5 + 104 >> 2]);
      HEAP32[$5 + 144 >> 2] = HEAP32[$5 + 120 >> 2];
     }
     HEAP32[$5 + 140 >> 2] = HEAP32[$5 + 140 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 80 >> 2] = gemmlowp__FixedPoint_int_2c_200___FromRaw_28int_29(tflite__GetReciprocal_28int_2c_20int_2c_20int__29(HEAP32[gemmlowp__FixedPoint_int_2c_2012___raw_28_29($5 + 144 | 0) >> 2], 12, $5 + 84 | 0));
   HEAP32[$5 + 76 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 76 >> 2] < HEAP32[$5 + 164 >> 2]) {
     HEAP32[$5 + 72 >> 2] = HEAP8[HEAP32[$5 + 196 >> 2] + (HEAP32[$5 + 76 >> 2] + Math_imul(HEAP32[$5 + 160 >> 2], HEAP32[$5 + 164 >> 2]) | 0) | 0] - HEAP8[$5 + 159 | 0];
     label$10: {
      if (HEAP32[$5 + 72 >> 2] >= HEAP32[$5 + 176 >> 2]) {
       HEAP32[$5 + 68 >> 2] = tflite__MultiplyByQuantizedMultiplierGreaterThanOne_28int_2c_20int_2c_20int_29(HEAP32[$5 + 72 >> 2], HEAP32[$5 + 184 >> 2], HEAP32[$5 + 180 >> 2]);
       HEAP32[$5 + 64 >> 2] = gemmlowp__FixedPoint_int_2c_205___FromRaw_28int_29(HEAP32[$5 + 68 >> 2]);
       HEAP32[$5 + 48 >> 2] = HEAP32[$5 + 64 >> 2];
       HEAP32[$5 + 56 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__exp_on_negative_values_int_2c_205__28gemmlowp__FixedPoint_int_2c_205__29(HEAP32[$5 + 48 >> 2]);
       HEAP32[$5 + 32 >> 2] = HEAP32[$5 + 80 >> 2];
       HEAP32[$5 + 24 >> 2] = HEAP32[$5 + 56 >> 2];
       HEAP32[$5 + 40 >> 2] = gemmlowp__FixedPoint_int_2c_200_20__200__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$5 + 32 >> 2], HEAP32[$5 + 24 >> 2]);
       HEAP32[$5 + 44 >> 2] = int_20gemmlowp__RoundingDivideByPOT_int__28int_2c_20int_29(HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($5 + 40 | 0) >> 2], HEAP32[$5 + 84 >> 2] + 23 | 0);
       HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 44 >> 2] + (std____2__numeric_limits_signed_20char___min_28_29() << 24 >> 24);
       HEAP32[$5 + 16 >> 2] = std____2__numeric_limits_signed_20char___max_28_29() << 24 >> 24;
       $0 = int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($5 + 20 | 0, $5 + 16 | 0);
       HEAP32[$5 + 12 >> 2] = std____2__numeric_limits_signed_20char___min_28_29() << 24 >> 24;
       $0 = int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($0, $5 + 12 | 0);
       HEAP8[HEAP32[$5 + 188 >> 2] + (HEAP32[$5 + 76 >> 2] + Math_imul(HEAP32[$5 + 160 >> 2], HEAP32[$5 + 164 >> 2]) | 0) | 0] = HEAP32[$0 >> 2];
       break label$10;
      }
      $0 = std____2__numeric_limits_signed_20char___min_28_29();
      HEAP8[HEAP32[$5 + 188 >> 2] + (HEAP32[$5 + 76 >> 2] + Math_imul(HEAP32[$5 + 160 >> 2], HEAP32[$5 + 164 >> 2]) | 0) | 0] = $0;
     }
     HEAP32[$5 + 76 >> 2] = HEAP32[$5 + 76 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 160 >> 2] = HEAP32[$5 + 160 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $5 + 208 | 0;
}

function tflite__reference_integer_ops__MaxPool_28tflite__PoolParams_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 144 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 140 >> 2] = $0;
 HEAP32[$5 + 136 >> 2] = $1;
 HEAP32[$5 + 132 >> 2] = $2;
 HEAP32[$5 + 128 >> 2] = $3;
 HEAP32[$5 + 124 >> 2] = $4;
 label$1: {
  if (HEAP32[HEAP32[$5 + 140 >> 2] + 28 >> 2] > HEAP32[HEAP32[$5 + 140 >> 2] + 32 >> 2]) {
   break label$1;
  }
 }
 label$2: {
  if (HEAP32[HEAP32[$5 + 140 >> 2] + 28 >> 2] < std____2__numeric_limits_signed_20char___min_28_29() << 24 >> 24) {
   break label$2;
  }
 }
 label$3: {
  if (HEAP32[HEAP32[$5 + 140 >> 2] + 32 >> 2] > std____2__numeric_limits_signed_20char___max_28_29() << 24 >> 24) {
   break label$3;
  }
 }
 label$4: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$5 + 136 >> 2]) | 0) != 4) {
   break label$4;
  }
 }
 label$5: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$5 + 128 >> 2]) | 0) != 4) {
   break label$5;
  }
 }
 HEAP32[$5 + 120 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 136 >> 2], 0, HEAP32[$5 + 128 >> 2], 0);
 HEAP32[$5 + 116 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 136 >> 2], 3, HEAP32[$5 + 128 >> 2], 3);
 HEAP32[$5 + 112 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 136 >> 2], 1);
 HEAP32[$5 + 108 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 136 >> 2], 2);
 HEAP32[$5 + 104 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 128 >> 2], 1);
 HEAP32[$5 + 100 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 128 >> 2], 2);
 HEAP32[$5 + 96 >> 2] = HEAP32[HEAP32[$5 + 140 >> 2] + 12 >> 2];
 HEAP32[$5 + 92 >> 2] = HEAP32[HEAP32[$5 + 140 >> 2] + 16 >> 2];
 HEAP32[$5 + 88 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 88 >> 2] < HEAP32[$5 + 120 >> 2]) {
   HEAP32[$5 + 84 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 84 >> 2] < HEAP32[$5 + 104 >> 2]) {
     HEAP32[$5 + 80 >> 2] = 0;
     while (1) {
      if (HEAP32[$5 + 80 >> 2] < HEAP32[$5 + 100 >> 2]) {
       HEAP32[$5 + 76 >> 2] = 0;
       while (1) {
        if (HEAP32[$5 + 76 >> 2] < HEAP32[$5 + 116 >> 2]) {
         HEAP32[$5 + 72 >> 2] = Math_imul(HEAP32[$5 + 80 >> 2], HEAP32[$5 + 92 >> 2]) - HEAP16[HEAP32[$5 + 140 >> 2] + 2 >> 1];
         HEAP32[$5 + 68 >> 2] = Math_imul(HEAP32[$5 + 84 >> 2], HEAP32[$5 + 96 >> 2]) - HEAP16[HEAP32[$5 + 140 >> 2] + 4 >> 1];
         HEAP32[$5 + 60 >> 2] = 0;
         HEAP32[$5 + 56 >> 2] = 0 - HEAP32[$5 + 72 >> 2];
         HEAP32[$5 + 64 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($5 + 60 | 0, $5 + 56 | 0) >> 2];
         $0 = HEAP32[$5 + 140 >> 2];
         HEAP32[$5 + 48 >> 2] = HEAP32[$5 + 108 >> 2] - HEAP32[$5 + 72 >> 2];
         HEAP32[$5 + 52 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($0 + 24 | 0, $5 + 48 | 0) >> 2];
         HEAP32[$5 + 40 >> 2] = 0;
         HEAP32[$5 + 36 >> 2] = 0 - HEAP32[$5 + 68 >> 2];
         HEAP32[$5 + 44 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($5 + 40 | 0, $5 + 36 | 0) >> 2];
         $0 = HEAP32[$5 + 140 >> 2];
         HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 112 >> 2] - HEAP32[$5 + 68 >> 2];
         HEAP32[$5 + 32 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($0 + 20 | 0, $5 + 28 | 0) >> 2];
         HEAP8[$5 + 27 | 0] = std____2__numeric_limits_signed_20char___lowest_28_29();
         HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 44 >> 2];
         while (1) {
          if (HEAP32[$5 + 20 >> 2] < HEAP32[$5 + 32 >> 2]) {
           HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 64 >> 2];
           while (1) {
            if (HEAP32[$5 + 16 >> 2] < HEAP32[$5 + 52 >> 2]) {
             HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 72 >> 2] + HEAP32[$5 + 16 >> 2];
             HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 68 >> 2] + HEAP32[$5 + 20 >> 2];
             HEAP8[$5 + 27 | 0] = HEAPU8[signed_20char_20const__20std____2__max_signed_20char__28signed_20char_20const__2c_20signed_20char_20const__29($5 + 27 | 0, HEAP32[$5 + 132 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$5 + 136 >> 2], HEAP32[$5 + 88 >> 2], HEAP32[$5 + 8 >> 2], HEAP32[$5 + 12 >> 2], HEAP32[$5 + 76 >> 2]) | 0) | 0];
             HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] + 1;
             continue;
            }
            break;
           }
           HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 20 >> 2] + 1;
           continue;
          }
          break;
         }
         HEAP8[$5 + 7 | 0] = HEAP32[HEAP32[$5 + 140 >> 2] + 28 >> 2];
         HEAP8[$5 + 27 | 0] = HEAPU8[signed_20char_20const__20std____2__max_signed_20char__28signed_20char_20const__2c_20signed_20char_20const__29($5 + 27 | 0, $5 + 7 | 0) | 0];
         HEAP8[$5 + 6 | 0] = HEAP32[HEAP32[$5 + 140 >> 2] + 32 >> 2];
         HEAP8[$5 + 27 | 0] = HEAPU8[signed_20char_20const__20std____2__min_signed_20char__28signed_20char_20const__2c_20signed_20char_20const__29($5 + 27 | 0, $5 + 6 | 0) | 0];
         $0 = HEAPU8[$5 + 27 | 0];
         HEAP8[HEAP32[$5 + 124 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$5 + 128 >> 2], HEAP32[$5 + 88 >> 2], HEAP32[$5 + 84 >> 2], HEAP32[$5 + 80 >> 2], HEAP32[$5 + 76 >> 2]) | 0] = $0;
         HEAP32[$5 + 76 >> 2] = HEAP32[$5 + 76 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$5 + 80 >> 2] = HEAP32[$5 + 80 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$5 + 84 >> 2] = HEAP32[$5 + 84 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 88 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $5 + 144 | 0;
}

function void_20tflite__reference_ops__Softmax_signed_20char_2c_20short__28tflite__SoftmaxParams_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20short__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 208 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 204 >> 2] = $0;
 HEAP32[$5 + 200 >> 2] = $1;
 HEAP32[$5 + 196 >> 2] = $2;
 HEAP32[$5 + 192 >> 2] = $3;
 HEAP32[$5 + 188 >> 2] = $4;
 HEAP32[$5 + 184 >> 2] = HEAP32[HEAP32[$5 + 204 >> 2] + 8 >> 2];
 HEAP32[$5 + 180 >> 2] = HEAP32[HEAP32[$5 + 204 >> 2] + 12 >> 2];
 HEAP32[$5 + 176 >> 2] = HEAP32[HEAP32[$5 + 204 >> 2] + 24 >> 2];
 HEAP32[$5 + 172 >> 2] = tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$5 + 200 >> 2]) - 1;
 HEAP32[$5 + 168 >> 2] = tflite__MatchingFlatSizeSkipDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__29(HEAP32[$5 + 200 >> 2], HEAP32[$5 + 172 >> 2], HEAP32[$5 + 192 >> 2]);
 HEAP32[$5 + 164 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 200 >> 2], HEAP32[$5 + 172 >> 2], HEAP32[$5 + 192 >> 2], HEAP32[$5 + 172 >> 2]);
 HEAP32[$5 + 160 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 160 >> 2] < HEAP32[$5 + 168 >> 2]) {
   HEAP8[$5 + 159 | 0] = std____2__numeric_limits_signed_20char___min_28_29();
   HEAP32[$5 + 152 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 152 >> 2] < HEAP32[$5 + 164 >> 2]) {
     HEAP8[$5 + 159 | 0] = HEAPU8[signed_20char_20const__20std____2__max_signed_20char__28signed_20char_20const__2c_20signed_20char_20const__29($5 + 159 | 0, HEAP32[$5 + 196 >> 2] + (HEAP32[$5 + 152 >> 2] + Math_imul(HEAP32[$5 + 160 >> 2], HEAP32[$5 + 164 >> 2]) | 0) | 0) | 0];
     HEAP32[$5 + 152 >> 2] = HEAP32[$5 + 152 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 144 >> 2] = gemmlowp__FixedPoint_int_2c_2012___Zero_28_29();
   HEAP32[$5 + 140 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 140 >> 2] < HEAP32[$5 + 164 >> 2]) {
     HEAP32[$5 + 136 >> 2] = HEAP8[HEAP32[$5 + 196 >> 2] + (HEAP32[$5 + 140 >> 2] + Math_imul(HEAP32[$5 + 160 >> 2], HEAP32[$5 + 164 >> 2]) | 0) | 0] - HEAP8[$5 + 159 | 0];
     if (HEAP32[$5 + 136 >> 2] >= HEAP32[$5 + 176 >> 2]) {
      HEAP32[$5 + 132 >> 2] = tflite__MultiplyByQuantizedMultiplierGreaterThanOne_28int_2c_20int_2c_20int_29(HEAP32[$5 + 136 >> 2], HEAP32[$5 + 184 >> 2], HEAP32[$5 + 180 >> 2]);
      HEAP32[$5 + 128 >> 2] = gemmlowp__FixedPoint_int_2c_205___FromRaw_28int_29(HEAP32[$5 + 132 >> 2]);
      HEAP32[$5 + 112 >> 2] = HEAP32[$5 + 144 >> 2];
      HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 128 >> 2];
      HEAP32[$5 + 96 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__exp_on_negative_values_int_2c_205__28gemmlowp__FixedPoint_int_2c_205__29(HEAP32[$5 + 88 >> 2]);
      HEAP32[$5 + 104 >> 2] = gemmlowp__FixedPoint_int_2c_2012__20gemmlowp__Rescale_12_2c_20int_2c_200__28gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$5 + 96 >> 2]);
      HEAP32[$5 + 120 >> 2] = gemmlowp__FixedPoint_int_2c_2012__20gemmlowp__operator__int_2c_2012__28gemmlowp__FixedPoint_int_2c_2012__2c_20gemmlowp__FixedPoint_int_2c_2012__29(HEAP32[$5 + 112 >> 2], HEAP32[$5 + 104 >> 2]);
      HEAP32[$5 + 144 >> 2] = HEAP32[$5 + 120 >> 2];
     }
     HEAP32[$5 + 140 >> 2] = HEAP32[$5 + 140 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 80 >> 2] = gemmlowp__FixedPoint_int_2c_200___FromRaw_28int_29(tflite__GetReciprocal_28int_2c_20int_2c_20int__29(HEAP32[gemmlowp__FixedPoint_int_2c_2012___raw_28_29($5 + 144 | 0) >> 2], 12, $5 + 84 | 0));
   HEAP32[$5 + 76 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 76 >> 2] < HEAP32[$5 + 164 >> 2]) {
     HEAP32[$5 + 72 >> 2] = HEAP8[HEAP32[$5 + 196 >> 2] + (HEAP32[$5 + 76 >> 2] + Math_imul(HEAP32[$5 + 160 >> 2], HEAP32[$5 + 164 >> 2]) | 0) | 0] - HEAP8[$5 + 159 | 0];
     label$10: {
      if (HEAP32[$5 + 72 >> 2] >= HEAP32[$5 + 176 >> 2]) {
       HEAP32[$5 + 68 >> 2] = tflite__MultiplyByQuantizedMultiplierGreaterThanOne_28int_2c_20int_2c_20int_29(HEAP32[$5 + 72 >> 2], HEAP32[$5 + 184 >> 2], HEAP32[$5 + 180 >> 2]);
       HEAP32[$5 + 64 >> 2] = gemmlowp__FixedPoint_int_2c_205___FromRaw_28int_29(HEAP32[$5 + 68 >> 2]);
       HEAP32[$5 + 48 >> 2] = HEAP32[$5 + 64 >> 2];
       HEAP32[$5 + 56 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__exp_on_negative_values_int_2c_205__28gemmlowp__FixedPoint_int_2c_205__29(HEAP32[$5 + 48 >> 2]);
       HEAP32[$5 + 32 >> 2] = HEAP32[$5 + 80 >> 2];
       HEAP32[$5 + 24 >> 2] = HEAP32[$5 + 56 >> 2];
       HEAP32[$5 + 40 >> 2] = gemmlowp__FixedPoint_int_2c_200_20__200__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$5 + 32 >> 2], HEAP32[$5 + 24 >> 2]);
       HEAP32[$5 + 44 >> 2] = int_20gemmlowp__RoundingDivideByPOT_int__28int_2c_20int_29(HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($5 + 40 | 0) >> 2], HEAP32[$5 + 84 >> 2] + 15 | 0);
       HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 44 >> 2] + (std____2__numeric_limits_short___min_28_29() << 16 >> 16);
       HEAP32[$5 + 16 >> 2] = std____2__numeric_limits_short___max_28_29() << 16 >> 16;
       $0 = int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($5 + 20 | 0, $5 + 16 | 0);
       HEAP32[$5 + 12 >> 2] = std____2__numeric_limits_short___min_28_29() << 16 >> 16;
       $0 = int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($0, $5 + 12 | 0);
       HEAP16[HEAP32[$5 + 188 >> 2] + (HEAP32[$5 + 76 >> 2] + Math_imul(HEAP32[$5 + 160 >> 2], HEAP32[$5 + 164 >> 2]) << 1) >> 1] = HEAP32[$0 >> 2];
       break label$10;
      }
      $0 = std____2__numeric_limits_short___min_28_29();
      HEAP16[HEAP32[$5 + 188 >> 2] + (HEAP32[$5 + 76 >> 2] + Math_imul(HEAP32[$5 + 160 >> 2], HEAP32[$5 + 164 >> 2]) << 1) >> 1] = $0;
     }
     HEAP32[$5 + 76 >> 2] = HEAP32[$5 + 76 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 160 >> 2] = HEAP32[$5 + 160 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $5 + 208 | 0;
}

function matchcharacter($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 40 >> 2] = $0;
 HEAP32[$4 + 36 >> 2] = $1;
 HEAP32[$4 + 32 >> 2] = $2;
 HEAP32[$4 + 28 >> 2] = $3;
 HEAP32[HEAP32[$4 + 32 >> 2] >> 2] = 1;
 HEAP8[$4 + 27 | 0] = jsvStringIteratorGetChar_5(HEAP32[$4 + 36 >> 2]);
 label$1: {
  if (HEAP8[HEAP32[$4 + 40 >> 2]] == 46) {
   HEAP8[$4 + 47 | 0] = 1;
   break label$1;
  }
  if (HEAP8[HEAP32[$4 + 40 >> 2]] == 91) {
   HEAP8[HEAP32[$4 + 28 >> 2] + 9 | 0] = 1;
   HEAP8[$4 + 26 | 0] = HEAP8[HEAP32[$4 + 40 >> 2] + 1 | 0] == 94;
   if (HEAP8[$4 + 26 | 0] & 1) {
    $0 = HEAP32[$4 + 32 >> 2];
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
   }
   HEAP8[$4 + 25 | 0] = 0;
   while (1) {
    $0 = 0;
    $0 = HEAP8[HEAP32[$4 + 40 >> 2] + HEAP32[HEAP32[$4 + 32 >> 2] >> 2] | 0] ? HEAP8[HEAP32[$4 + 40 >> 2] + HEAP32[HEAP32[$4 + 32 >> 2] >> 2] | 0] != 93 : $0;
    if ($0) {
     if (HEAP8[HEAP32[$4 + 40 >> 2] + HEAP32[HEAP32[$4 + 32 >> 2] >> 2] | 0] == 46) {
      HEAP8[$4 + 25 | 0] = HEAP8[$4 + 25 | 0] & 1 | HEAP8[$4 + 27 | 0] == 46;
      $0 = HEAP32[$4 + 32 >> 2];
      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
      continue;
     }
     HEAP8[$4 + 25 | 0] = matchcharacter(HEAP32[$4 + 40 >> 2] + HEAP32[HEAP32[$4 + 32 >> 2] >> 2] | 0, HEAP32[$4 + 36 >> 2], $4 + 20 | 0, HEAP32[$4 + 28 >> 2]) & 1 | HEAP8[$4 + 25 | 0] & 1;
     $0 = HEAP32[$4 + 32 >> 2];
     HEAP32[$0 >> 2] = HEAP32[$4 + 20 >> 2] + HEAP32[$0 >> 2];
     continue;
    }
    break;
   }
   label$9: {
    if (HEAP8[HEAP32[$4 + 40 >> 2] + HEAP32[HEAP32[$4 + 32 >> 2] >> 2] | 0] == 93) {
     $0 = HEAP32[$4 + 32 >> 2];
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     break label$9;
    }
    jsExceptionHere(1, 96731, 0);
    HEAP8[$4 + 47 | 0] = 0;
    break label$1;
   }
   HEAP8[HEAP32[$4 + 28 >> 2] + 9 | 0] = 0;
   HEAP8[$4 + 47 | 0] = (HEAP8[$4 + 25 | 0] & 1) != (HEAP8[$4 + 26 | 0] & 1);
   break label$1;
  }
  HEAP8[$4 + 19 | 0] = HEAPU8[HEAP32[$4 + 40 >> 2]];
  label$11: {
   if (HEAP8[$4 + 19 | 0] != 92) {
    break label$11;
   }
   HEAP32[HEAP32[$4 + 32 >> 2] >> 2] = 2;
   HEAP8[$4 + 19 | 0] = HEAPU8[HEAP32[$4 + 40 >> 2] + 1 | 0];
   if (HEAP8[$4 + 19 | 0] == 100) {
    HEAP8[$4 + 47 | 0] = isNumeric(HEAP8[$4 + 27 | 0]) & 1;
    break label$1;
   }
   if (HEAP8[$4 + 19 | 0] == 68) {
    HEAP8[$4 + 47 | 0] = (isNumeric(HEAP8[$4 + 27 | 0]) ^ -1) & 1;
    break label$1;
   }
   if (HEAP8[$4 + 19 | 0] == 102) {
    HEAP8[$4 + 19 | 0] = 12;
    break label$11;
   }
   if (HEAP8[$4 + 19 | 0] == 98) {
    HEAP8[$4 + 19 | 0] = 8;
    break label$11;
   }
   if (HEAP8[$4 + 19 | 0] == 110) {
    HEAP8[$4 + 19 | 0] = 10;
    break label$11;
   }
   if (HEAP8[$4 + 19 | 0] == 114) {
    HEAP8[$4 + 19 | 0] = 13;
    break label$11;
   }
   if (HEAP8[$4 + 19 | 0] == 115) {
    HEAP8[$4 + 47 | 0] = isWhitespace(HEAP8[$4 + 27 | 0]) & 1;
    break label$1;
   }
   if (HEAP8[$4 + 19 | 0] == 83) {
    HEAP8[$4 + 47 | 0] = (isWhitespace(HEAP8[$4 + 27 | 0]) ^ -1) & 1;
    break label$1;
   }
   if (HEAP8[$4 + 19 | 0] == 116) {
    HEAP8[$4 + 19 | 0] = 9;
    break label$11;
   }
   if (HEAP8[$4 + 19 | 0] == 118) {
    HEAP8[$4 + 19 | 0] = 11;
    break label$11;
   }
   if (HEAP8[$4 + 19 | 0] == 119) {
    $0 = 1;
    label$23: {
     if (isNumeric(HEAP8[$4 + 27 | 0]) & 1) {
      break label$23;
     }
     $0 = 1;
     if (isAlpha(HEAP8[$4 + 27 | 0]) & 1) {
      break label$23;
     }
     $0 = HEAP8[$4 + 27 | 0] == 95;
    }
    HEAP8[$4 + 47 | 0] = $0;
    break label$1;
   }
   if (HEAP8[$4 + 19 | 0] == 87) {
    $0 = 1;
    label$25: {
     if (isNumeric(HEAP8[$4 + 27 | 0]) & 1) {
      break label$25;
     }
     $0 = 1;
     if (isAlpha(HEAP8[$4 + 27 | 0]) & 1) {
      break label$25;
     }
     $0 = HEAP8[$4 + 27 | 0] == 95;
    }
    HEAP8[$4 + 47 | 0] = ($0 ^ -1) & 1;
    break label$1;
   }
   if (HEAP8[$4 + 19 | 0] == 48) {
    HEAP8[$4 + 19 | 0] = 0;
    break label$11;
   }
   if (!(HEAP8[$4 + 19 | 0] < 49 | HEAP8[$4 + 19 | 0] > 57)) {
    jsExceptionHere(1, 106087, 0);
    HEAP8[$4 + 47 | 0] = 0;
    break label$1;
   }
   if (!(!HEAP8[HEAP32[$4 + 40 >> 2] + 3 | 0] | (!HEAP8[HEAP32[$4 + 40 >> 2] + 2 | 0] | HEAP8[$4 + 19 | 0] != 120))) {
    HEAP32[HEAP32[$4 + 32 >> 2] >> 2] = 4;
    HEAP8[$4 + 19 | 0] = hexToByte(HEAP8[HEAP32[$4 + 40 >> 2] + 2 | 0], HEAP8[HEAP32[$4 + 40 >> 2] + 3 | 0]);
   }
  }
  if (!(!(HEAP8[HEAP32[$4 + 28 >> 2] + 9 | 0] & 1) | HEAP8[HEAP32[$4 + 40 >> 2] + HEAP32[HEAP32[$4 + 32 >> 2] >> 2] | 0] != 45 | HEAP8[HEAP32[$4 + 40 >> 2] + (HEAP32[HEAP32[$4 + 32 >> 2] >> 2] + 1 | 0) | 0] == 93)) {
   HEAP16[HEAP32[$4 + 28 >> 2] + 10 >> 1] = HEAP8[$4 + 19 | 0];
   $0 = HEAP32[$4 + 32 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
   HEAP8[$4 + 11 | 0] = matchcharacter(HEAP32[$4 + 40 >> 2] + HEAP32[HEAP32[$4 + 32 >> 2] >> 2] | 0, HEAP32[$4 + 36 >> 2], $4 + 12 | 0, HEAP32[$4 + 28 >> 2]) & 1;
   $0 = HEAP32[$4 + 32 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$4 + 12 >> 2] + HEAP32[$0 >> 2];
   HEAP8[$4 + 47 | 0] = HEAP8[$4 + 11 | 0] & 1;
   break label$1;
  }
  if (HEAP8[HEAP32[$4 + 28 >> 2] + 8 | 0] & 1) {
   HEAP8[$4 + 27 | 0] = charToLowerCase(HEAP8[$4 + 27 | 0]);
   HEAP8[$4 + 19 | 0] = charToLowerCase(HEAP8[$4 + 19 | 0]);
  }
  if (HEAP16[HEAP32[$4 + 28 >> 2] + 10 >> 1] != 256) {
   HEAP8[$4 + 10 | 0] = HEAPU16[HEAP32[$4 + 28 >> 2] + 10 >> 1];
   if (HEAP8[HEAP32[$4 + 28 >> 2] + 8 | 0] & 1) {
    HEAP8[$4 + 10 | 0] = charToLowerCase(HEAP8[$4 + 10 | 0]);
   }
   HEAP16[HEAP32[$4 + 28 >> 2] + 10 >> 1] = 256;
   $0 = 0;
   label$33: {
    if (HEAP8[$4 + 27 | 0] < HEAP8[$4 + 10 | 0]) {
     break label$33;
    }
    $0 = 0;
    if (HEAP8[$4 + 27 | 0] > HEAP8[$4 + 19 | 0]) {
     break label$33;
    }
    $0 = HEAP8[$4 + 10 | 0] < HEAP8[$4 + 19 | 0];
   }
   HEAP8[$4 + 47 | 0] = $0;
   break label$1;
  }
  HEAP8[$4 + 47 | 0] = HEAP8[$4 + 19 | 0] == HEAP8[$4 + 27 | 0];
 }
 __stack_pointer = $4 + 48 | 0;
 return HEAP8[$4 + 47 | 0] & 1;
}

function jswrap_interface_setWatch($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 80 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 72 >> 2] = $0;
 HEAP8[$3 + 71 | 0] = $1;
 HEAP32[$3 + 64 >> 2] = $2;
 label$1: {
  if (!(jshIsPinValid(HEAPU8[$3 + 71 | 0]) & 1)) {
   jsError(102474, 0);
   HEAP32[$3 + 76 >> 2] = 0;
   break label$1;
  }
  label$3: {
   if (jsiIsWatchingPin(HEAPU8[$3 + 71 | 0]) & 1) {
    break label$3;
   }
   if (jshCanWatch(HEAPU8[$3 + 71 | 0]) & 1) {
    break label$3;
   }
   jsWarn(103511, 0);
   HEAP32[$3 + 76 >> 2] = 0;
   break label$1;
  }
  HEAP8[$3 + 63 | 0] = 0;
  HEAPF64[$3 + 48 >> 3] = 0;
  HEAP32[$3 + 44 >> 2] = 0;
  HEAP8[$3 + 43 | 0] = 0;
  HEAP8[$3 + 42 | 0] = 0;
  HEAP8[$3 + 41 | 0] = 255;
  label$4: {
   if (!(HEAPU8[$3 + 71 | 0] == 24 | HEAPU8[$3 + 71 | 0] == 22 | (HEAPU8[$3 + 71 | 0] == 23 | HEAPU8[$3 + 71 | 0] == 11))) {
    if (HEAPU8[$3 + 71 | 0] != 16) {
     break label$4;
    }
   }
   HEAP32[$3 + 44 >> 2] = 1;
   HEAPF64[$3 + 48 >> 3] = 25;
  }
  label$6: {
   if (jsvIsObject(HEAP32[$3 + 64 >> 2]) & 1) {
    HEAP32[$3 + 36 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 64 >> 2], 98107);
    if (HEAP32[$3 + 36 >> 2]) {
     HEAP8[$3 + 63 | 0] = jsvGetBoolAndUnLock(HEAP32[$3 + 36 >> 2]) & 1;
    }
    HEAP32[$3 + 36 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 64 >> 2], 105460);
    if (HEAP32[$3 + 36 >> 2]) {
     HEAPF64[$3 + 48 >> 3] = jsvGetFloatAndUnLock(HEAP32[$3 + 36 >> 2]);
    }
    $1 = __DOUBLE_BITS_9(HEAPF64[$3 + 48 >> 3]);
    $0 = $1;
    $2 = i64toi32_i32$HIGH_BITS;
    $1 = $2 & 2147483647;
    $2 = $0;
    if (!(HEAPF64[$3 + 48 >> 3] < 0 ? 0 : !$2 & ($1 | 0) == 2146435072 | $1 >>> 0 < 2146435072)) {
     HEAPF64[$3 + 48 >> 3] = 0;
    }
    HEAP32[$3 + 36 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 64 >> 2], 105312);
    if (!(jsvIsUndefined(HEAP32[$3 + 36 >> 2]) & 1)) {
     label$13: {
      if (jsvIsNumeric(HEAP32[$3 + 36 >> 2]) & 1) {
       HEAP32[$3 + 32 >> 2] = jsvGetInteger(HEAP32[$3 + 36 >> 2]);
       HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 32 >> 2] > 0 ? 1 : HEAP32[$3 + 32 >> 2] < 0 ? -1 : 0;
       break label$13;
      }
      HEAP32[$3 + 44 >> 2] = -1e3;
      if (jsvIsString(HEAP32[$3 + 36 >> 2]) & 1) {
       label$18: {
        if (jsvIsStringEqual(HEAP32[$3 + 36 >> 2], 103678) & 1) {
         HEAP32[$3 + 44 >> 2] = 1;
         break label$18;
        }
        label$20: {
         if (jsvIsStringEqual(HEAP32[$3 + 36 >> 2], 103964) & 1) {
          HEAP32[$3 + 44 >> 2] = -1;
          break label$20;
         }
         if (jsvIsStringEqual(HEAP32[$3 + 36 >> 2], 103329) & 1) {
          HEAP32[$3 + 44 >> 2] = 0;
         }
        }
       }
      }
     }
    }
    jsvUnLock(HEAP32[$3 + 36 >> 2]);
    if (!(HEAP32[$3 + 44 >> 2] <= 1 & HEAP32[$3 + 44 >> 2] >= -1)) {
     jsExceptionHere(3, 126771, 0);
     HEAP32[$3 + 76 >> 2] = 0;
     break label$1;
    }
    HEAP8[$3 + 43 | 0] = jsvObjectGetBoolChild(HEAP32[$3 + 64 >> 2], 101600) & 1;
    HEAP8[$3 + 42 | 0] = jsvObjectGetBoolChild(HEAP32[$3 + 64 >> 2], 106725) & 1;
    HEAP8[$3 + 41 | 0] = jshGetPinFromVarAndUnLock(jsvObjectGetChildIfExists(HEAP32[$3 + 64 >> 2], 107892));
    break label$6;
   }
   HEAP8[$3 + 63 | 0] = jsvGetBool(HEAP32[$3 + 64 >> 2]) & 1;
  }
  HEAP32[$3 + 28 >> 2] = -1;
  label$25: {
   label$26: {
    if (jsvIsFunction(HEAP32[$3 + 72 >> 2]) & 1) {
     break label$26;
    }
    if (jsvIsString(HEAP32[$3 + 72 >> 2]) & 1) {
     break label$26;
    }
    jsExceptionHere(1, 127273, 0);
    break label$25;
   }
   HEAP32[$3 + 24 >> 2] = jsvNewObject();
   if (HEAP32[$3 + 24 >> 2]) {
    jsvObjectSetChildAndUnLock(HEAP32[$3 + 24 >> 2], 102482, jsvNewFromPin(HEAPU8[$3 + 71 | 0]));
    if (HEAP8[$3 + 63 | 0] & 1) {
     jsvObjectSetChildAndUnLock(HEAP32[$3 + 24 >> 2], 100836, jsvNewFromBool(HEAP8[$3 + 63 | 0] & 1));
    }
    if (HEAPF64[$3 + 48 >> 3] > 0) {
     $0 = HEAP32[$3 + 24 >> 2];
     $2 = jshGetTimeFromMilliseconds(HEAPF64[$3 + 48 >> 3]);
     jsvObjectSetChildAndUnLock($0, 105460, jsvNewFromInteger($2));
    }
    if (HEAP32[$3 + 44 >> 2]) {
     jsvObjectSetChildAndUnLock(HEAP32[$3 + 24 >> 2], 105312, jsvNewFromInteger(HEAP32[$3 + 44 >> 2]));
    }
    jsvObjectSetChild(HEAP32[$3 + 24 >> 2], 107791, HEAP32[$3 + 72 >> 2]);
    jsvObjectSetChildAndUnLock(HEAP32[$3 + 24 >> 2], 104628, jsvNewFromBool(jshPinInput(HEAPU8[$3 + 71 | 0]) & 1));
    if (HEAP8[$3 + 42 | 0] & 1) {
     jsvObjectSetChildAndUnLock(HEAP32[$3 + 24 >> 2], 106725, jsvNewFromBool(1));
    }
   }
   HEAP8[$3 + 23 | 0] = 0;
   if (!(jsiIsWatchingPin(HEAPU8[$3 + 71 | 0]) & 1)) {
    HEAP8[$3 + 23 | 0] = jshPinWatch(HEAPU8[$3 + 71 | 0], 1, HEAP8[$3 + 42 | 0] & 1);
   }
   label$33: {
    if (HEAPU8[$3 + 23 | 0]) {
     jshSetEventCallback(HEAPU8[$3 + 23 | 0], 0);
     if (jshIsPinValid(HEAPU8[$3 + 41 | 0]) & 1) {
      jshSetEventDataPin(HEAPU8[$3 + 23 | 0], HEAPU8[$3 + 41 | 0]);
     }
     if (HEAP8[$3 + 43 | 0] & 1) {
      label$37: {
       if (jsvIsNativeFunction(HEAP32[$3 + 72 >> 2]) & 1) {
        jshSetEventCallback(HEAPU8[$3 + 23 | 0], jsvGetNativeFunctionPtr(HEAP32[$3 + 72 >> 2]));
        break label$37;
       }
       label$39: {
        if (jshIsPinValid(HEAPU8[$3 + 41 | 0]) & 1) {
         jsExceptionHere(1, 104359, 0);
         break label$39;
        }
        jsExceptionHere(1, 102135, 0);
       }
      }
     }
     break label$33;
    }
    if (HEAP8[$3 + 43 | 0] & 1) {
     jsExceptionHere(1, 106237, 0);
    }
   }
   HEAP32[$3 + 16 >> 2] = jsvLock(HEAPU16[93523]);
   HEAP32[$3 + 28 >> 2] = jsvArrayAddToEnd(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 24 >> 2], 1) - 1;
   jsvUnLock2(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 24 >> 2]);
  }
  label$42: {
   if (HEAP32[$3 + 28 >> 2] >= 0) {
    $0 = jsvNewFromInteger(HEAP32[$3 + 28 >> 2]);
    break label$42;
   }
   $0 = 0;
  }
  HEAP32[$3 + 76 >> 2] = $0;
 }
 __stack_pointer = $3 + 80 | 0;
 return HEAP32[$3 + 76 >> 2];
}

function tflite__reference_ops__MaxPool_28tflite__PoolParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 144 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 140 >> 2] = $0;
 HEAP32[$5 + 136 >> 2] = $1;
 HEAP32[$5 + 132 >> 2] = $2;
 HEAP32[$5 + 128 >> 2] = $3;
 HEAP32[$5 + 124 >> 2] = $4;
 label$1: {
  if (HEAP32[HEAP32[$5 + 140 >> 2] + 28 >> 2] > HEAP32[HEAP32[$5 + 140 >> 2] + 32 >> 2]) {
   break label$1;
  }
 }
 label$2: {
  if (HEAP32[HEAP32[$5 + 140 >> 2] + 28 >> 2] < 0) {
   break label$2;
  }
 }
 label$3: {
  if (HEAP32[HEAP32[$5 + 140 >> 2] + 32 >> 2] > 255) {
   break label$3;
  }
 }
 label$4: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$5 + 136 >> 2]) | 0) != 4) {
   break label$4;
  }
 }
 label$5: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$5 + 128 >> 2]) | 0) != 4) {
   break label$5;
  }
 }
 HEAP32[$5 + 120 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 136 >> 2], 0, HEAP32[$5 + 128 >> 2], 0);
 HEAP32[$5 + 116 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 136 >> 2], 3, HEAP32[$5 + 128 >> 2], 3);
 HEAP32[$5 + 112 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 136 >> 2], 1);
 HEAP32[$5 + 108 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 136 >> 2], 2);
 HEAP32[$5 + 104 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 128 >> 2], 1);
 HEAP32[$5 + 100 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 128 >> 2], 2);
 HEAP32[$5 + 96 >> 2] = HEAP32[HEAP32[$5 + 140 >> 2] + 12 >> 2];
 HEAP32[$5 + 92 >> 2] = HEAP32[HEAP32[$5 + 140 >> 2] + 16 >> 2];
 HEAP32[$5 + 88 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 88 >> 2] < HEAP32[$5 + 120 >> 2]) {
   HEAP32[$5 + 84 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 84 >> 2] < HEAP32[$5 + 104 >> 2]) {
     HEAP32[$5 + 80 >> 2] = 0;
     while (1) {
      if (HEAP32[$5 + 80 >> 2] < HEAP32[$5 + 100 >> 2]) {
       HEAP32[$5 + 76 >> 2] = 0;
       while (1) {
        if (HEAP32[$5 + 76 >> 2] < HEAP32[$5 + 116 >> 2]) {
         HEAP32[$5 + 72 >> 2] = Math_imul(HEAP32[$5 + 80 >> 2], HEAP32[$5 + 92 >> 2]) - HEAP16[HEAP32[$5 + 140 >> 2] + 2 >> 1];
         HEAP32[$5 + 68 >> 2] = Math_imul(HEAP32[$5 + 84 >> 2], HEAP32[$5 + 96 >> 2]) - HEAP16[HEAP32[$5 + 140 >> 2] + 4 >> 1];
         HEAP32[$5 + 60 >> 2] = 0;
         HEAP32[$5 + 56 >> 2] = 0 - HEAP32[$5 + 72 >> 2];
         HEAP32[$5 + 64 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($5 + 60 | 0, $5 + 56 | 0) >> 2];
         $0 = HEAP32[$5 + 140 >> 2];
         HEAP32[$5 + 48 >> 2] = HEAP32[$5 + 108 >> 2] - HEAP32[$5 + 72 >> 2];
         HEAP32[$5 + 52 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($0 + 24 | 0, $5 + 48 | 0) >> 2];
         HEAP32[$5 + 40 >> 2] = 0;
         HEAP32[$5 + 36 >> 2] = 0 - HEAP32[$5 + 68 >> 2];
         HEAP32[$5 + 44 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($5 + 40 | 0, $5 + 36 | 0) >> 2];
         $0 = HEAP32[$5 + 140 >> 2];
         HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 112 >> 2] - HEAP32[$5 + 68 >> 2];
         HEAP32[$5 + 32 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($0 + 20 | 0, $5 + 28 | 0) >> 2];
         HEAP8[$5 + 27 | 0] = 0;
         HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 44 >> 2];
         while (1) {
          if (HEAP32[$5 + 20 >> 2] < HEAP32[$5 + 32 >> 2]) {
           HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 64 >> 2];
           while (1) {
            if (HEAP32[$5 + 16 >> 2] < HEAP32[$5 + 52 >> 2]) {
             HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 72 >> 2] + HEAP32[$5 + 16 >> 2];
             HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 68 >> 2] + HEAP32[$5 + 20 >> 2];
             HEAP8[$5 + 27 | 0] = HEAPU8[unsigned_20char_20const__20std____2__max_unsigned_20char__28unsigned_20char_20const__2c_20unsigned_20char_20const__29($5 + 27 | 0, HEAP32[$5 + 132 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$5 + 136 >> 2], HEAP32[$5 + 88 >> 2], HEAP32[$5 + 8 >> 2], HEAP32[$5 + 12 >> 2], HEAP32[$5 + 76 >> 2]) | 0) | 0];
             HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] + 1;
             continue;
            }
            break;
           }
           HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 20 >> 2] + 1;
           continue;
          }
          break;
         }
         HEAP8[$5 + 7 | 0] = HEAP32[HEAP32[$5 + 140 >> 2] + 28 >> 2];
         HEAP8[$5 + 27 | 0] = HEAPU8[unsigned_20char_20const__20std____2__max_unsigned_20char__28unsigned_20char_20const__2c_20unsigned_20char_20const__29($5 + 27 | 0, $5 + 7 | 0) | 0];
         HEAP8[$5 + 6 | 0] = HEAP32[HEAP32[$5 + 140 >> 2] + 32 >> 2];
         HEAP8[$5 + 27 | 0] = HEAPU8[unsigned_20char_20const__20std____2__min_unsigned_20char__28unsigned_20char_20const__2c_20unsigned_20char_20const__29($5 + 27 | 0, $5 + 6 | 0) | 0];
         $0 = HEAPU8[$5 + 27 | 0];
         HEAP8[HEAP32[$5 + 124 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$5 + 128 >> 2], HEAP32[$5 + 88 >> 2], HEAP32[$5 + 84 >> 2], HEAP32[$5 + 80 >> 2], HEAP32[$5 + 76 >> 2]) | 0] = $0;
         HEAP32[$5 + 76 >> 2] = HEAP32[$5 + 76 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$5 + 80 >> 2] = HEAP32[$5 + 80 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$5 + 84 >> 2] = HEAP32[$5 + 84 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 88 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $5 + 144 | 0;
}

function jstDumpUtilityTimers() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $0 = __stack_pointer - 544 | 0;
 __stack_pointer = $0;
 jshInterruptOff();
 HEAP32[$0 + 540 >> 2] = 0;
 while (1) {
  if (HEAP32[$0 + 540 >> 2] < 16) {
   $1 = Math_imul(HEAP32[$0 + 540 >> 2], 25) + 189008 | 0;
   $2 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
   $3 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
   $4 = $2;
   $6 = ($0 + 128 | 0) + Math_imul(HEAP32[$0 + 540 >> 2], 25) | 0;
   $2 = $6;
   HEAP8[$2 | 0] = $4;
   HEAP8[$2 + 1 | 0] = $4 >>> 8;
   HEAP8[$2 + 2 | 0] = $4 >>> 16;
   HEAP8[$2 + 3 | 0] = $4 >>> 24;
   HEAP8[$2 + 4 | 0] = $3;
   HEAP8[$2 + 5 | 0] = $3 >>> 8;
   HEAP8[$2 + 6 | 0] = $3 >>> 16;
   HEAP8[$2 + 7 | 0] = $3 >>> 24;
   HEAP8[$2 + 24 | 0] = HEAPU8[$1 + 24 | 0];
   $2 = HEAPU8[$1 + 20 | 0] | HEAPU8[$1 + 21 | 0] << 8 | (HEAPU8[$1 + 22 | 0] << 16 | HEAPU8[$1 + 23 | 0] << 24);
   $3 = HEAPU8[$1 + 16 | 0] | HEAPU8[$1 + 17 | 0] << 8 | (HEAPU8[$1 + 18 | 0] << 16 | HEAPU8[$1 + 19 | 0] << 24);
   $4 = $3;
   $3 = $6;
   HEAP8[$3 + 16 | 0] = $4;
   HEAP8[$3 + 17 | 0] = $4 >>> 8;
   HEAP8[$3 + 18 | 0] = $4 >>> 16;
   HEAP8[$3 + 19 | 0] = $4 >>> 24;
   HEAP8[$3 + 20 | 0] = $2;
   HEAP8[$3 + 21 | 0] = $2 >>> 8;
   HEAP8[$3 + 22 | 0] = $2 >>> 16;
   HEAP8[$3 + 23 | 0] = $2 >>> 24;
   $3 = HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8 | (HEAPU8[$1 + 14 | 0] << 16 | HEAPU8[$1 + 15 | 0] << 24);
   $2 = HEAPU8[$1 + 8 | 0] | HEAPU8[$1 + 9 | 0] << 8 | (HEAPU8[$1 + 10 | 0] << 16 | HEAPU8[$1 + 11 | 0] << 24);
   $4 = $2;
   $2 = $6;
   HEAP8[$2 + 8 | 0] = $4;
   HEAP8[$2 + 9 | 0] = $4 >>> 8;
   HEAP8[$2 + 10 | 0] = $4 >>> 16;
   HEAP8[$2 + 11 | 0] = $4 >>> 24;
   HEAP8[$2 + 12 | 0] = $3;
   HEAP8[$2 + 13 | 0] = $3 >>> 8;
   HEAP8[$2 + 14 | 0] = $3 >>> 16;
   HEAP8[$2 + 15 | 0] = $3 >>> 24;
   HEAP32[$0 + 540 >> 2] = HEAP32[$0 + 540 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP8[$0 + 127 | 0] = HEAPU8[188993];
 HEAP8[$0 + 126 | 0] = HEAPU8[188994];
 jshInterruptOn();
 HEAP32[$0 + 80 >> 2] = HEAP8[188995] & 1 ? 102471 : 104077;
 jsiConsolePrintf(128188, $0 + 80 | 0);
 HEAP8[$0 + 125 | 0] = HEAPU8[$0 + 126 | 0];
 HEAP8[$0 + 124 | 0] = 0;
 while (1) {
  if (HEAPU8[$0 + 125 | 0] != HEAPU8[$0 + 127 | 0]) {
   HEAP8[$0 + 124 | 0] = 1;
   $1 = ($0 + 128 | 0) + Math_imul(HEAPU8[$0 + 125 | 0], 25) | 0;
   HEAP8[$0 + 120 | 0] = HEAPU8[$1 + 24 | 0];
   $3 = HEAPU8[$1 + 16 | 0] | HEAPU8[$1 + 17 | 0] << 8 | (HEAPU8[$1 + 18 | 0] << 16 | HEAPU8[$1 + 19 | 0] << 24);
   $2 = HEAPU8[$1 + 20 | 0] | HEAPU8[$1 + 21 | 0] << 8 | (HEAPU8[$1 + 22 | 0] << 16 | HEAPU8[$1 + 23 | 0] << 24);
   HEAP32[$0 + 112 >> 2] = $3;
   HEAP32[$0 + 116 >> 2] = $2;
   $3 = HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8 | (HEAPU8[$1 + 14 | 0] << 16 | HEAPU8[$1 + 15 | 0] << 24);
   $2 = HEAPU8[$1 + 8 | 0] | HEAPU8[$1 + 9 | 0] << 8 | (HEAPU8[$1 + 10 | 0] << 16 | HEAPU8[$1 + 11 | 0] << 24);
   HEAP32[$0 + 104 >> 2] = $2;
   HEAP32[$0 + 108 >> 2] = $3;
   $2 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
   $3 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
   HEAP32[$0 + 96 >> 2] = $3;
   HEAP32[$0 + 100 >> 2] = $2;
   $2 = HEAPU8[$0 + 96 | 0] | HEAPU8[$0 + 97 | 0] << 8 | (HEAPU8[$0 + 98 | 0] << 16 | HEAPU8[$0 + 99 | 0] << 24);
   $3 = $2 >> 31;
   $5 = jshGetMillisecondsFromTime($2, $3) * 1e3;
   label$5: {
    if (Math_abs($5) < 2147483648) {
     $2 = ~~$5;
     break label$5;
    }
    $2 = -2147483648;
   }
   HEAP32[$0 + 64 >> 2] = $2;
   jsiConsolePrintf(99716, $0 - -64 | 0);
   $3 = HEAPU8[$0 + 100 | 0] | HEAPU8[$0 + 101 | 0] << 8 | (HEAPU8[$0 + 102 | 0] << 16 | HEAPU8[$0 + 103 | 0] << 24);
   $5 = jshGetMillisecondsFromTime($3, 0) * 1e3;
   label$7: {
    if (Math_abs($5) < 2147483648) {
     $2 = ~~$5;
     break label$7;
    }
    $2 = -2147483648;
   }
   HEAP32[$0 + 48 >> 2] = $2;
   jsiConsolePrintf(99707, $0 + 48 | 0);
   jsiConsolePrintf(127718, 0);
   label$9: {
    label$10: {
     switch (HEAPU8[$0 + 120 | 0] - 1 | 0) {
     case 0:
      jsiConsolePrintf(128614, 0);
      break label$9;

     case 1:
      jsiConsolePrintf(127663, 0);
      HEAP32[$0 + 540 >> 2] = 0;
      while (1) {
       if (HEAP32[$0 + 540 >> 2] < 4) {
        if (HEAPU8[HEAP32[$0 + 540 >> 2] + ($0 + 104 | 0) | 0] != 255) {
         $2 = HEAPU8[HEAP32[$0 + 540 >> 2] + ($0 + 104 | 0) | 0];
         HEAP32[$0 + 20 >> 2] = HEAPU8[$0 + 108 | 0] >> HEAP32[$0 + 540 >> 2] & 1;
         HEAP32[$0 + 16 >> 2] = $2;
         jsiConsolePrintf(112610, $0 + 16 | 0);
        }
        HEAP32[$0 + 540 >> 2] = HEAP32[$0 + 540 >> 2] + 1;
        continue;
       }
       break;
      }
      ;
      jsiConsolePrintf(129587, 0);
      break label$9;

     case 3:
      jsiConsolePrintf(128622, 0);
      break label$9;

     case 4:
      jsiConsolePrintf(128634, 0);
      break label$9;

     case 5:
      jsiConsolePrintf(128589, 0);
      break label$9;

     case 6:
      jsiConsolePrintf(128602, 0);
      break label$9;

     case 2:
      $2 = HEAPU8[$0 + 104 | 0] | HEAPU8[$0 + 105 | 0] << 8 | (HEAPU8[$0 + 106 | 0] << 16 | HEAPU8[$0 + 107 | 0] << 24);
      HEAP32[$0 + 36 >> 2] = HEAPU8[$0 + 108 | 0] | HEAPU8[$0 + 109 | 0] << 8 | (HEAPU8[$0 + 110 | 0] << 16 | HEAPU8[$0 + 111 | 0] << 24);
      HEAP32[$0 + 32 >> 2] = $2;
      jsiConsolePrintf(129374, $0 + 32 | 0);
      break label$9;

     default:
      break label$10;
     }
    }
    HEAP32[$0 >> 2] = HEAPU8[$0 + 120 | 0];
    jsiConsolePrintf(128563, $0);
   }
   HEAP8[$0 + 125 | 0] = HEAPU8[$0 + 125 | 0] + 1 & 15;
   continue;
  }
  break;
 }
 if (!(HEAP8[$0 + 124 | 0] & 1)) {
  jsiConsolePrintf(129128, 0);
 }
 __stack_pointer = $0 + 544 | 0;
}

function tflite__reference_integer_ops__AveragePool_28tflite__PoolParams_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 144 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 140 >> 2] = $0;
 HEAP32[$5 + 136 >> 2] = $1;
 HEAP32[$5 + 132 >> 2] = $2;
 HEAP32[$5 + 128 >> 2] = $3;
 HEAP32[$5 + 124 >> 2] = $4;
 label$1: {
  if (HEAP32[HEAP32[$5 + 140 >> 2] + 28 >> 2] > HEAP32[HEAP32[$5 + 140 >> 2] + 32 >> 2]) {
   break label$1;
  }
 }
 label$2: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$5 + 136 >> 2]) | 0) != 4) {
   break label$2;
  }
 }
 label$3: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$5 + 128 >> 2]) | 0) != 4) {
   break label$3;
  }
 }
 HEAP32[$5 + 120 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 136 >> 2], 0, HEAP32[$5 + 128 >> 2], 0);
 HEAP32[$5 + 116 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 136 >> 2], 3, HEAP32[$5 + 128 >> 2], 3);
 HEAP32[$5 + 112 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 136 >> 2], 1);
 HEAP32[$5 + 108 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 136 >> 2], 2);
 HEAP32[$5 + 104 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 128 >> 2], 1);
 HEAP32[$5 + 100 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 128 >> 2], 2);
 HEAP32[$5 + 96 >> 2] = HEAP32[HEAP32[$5 + 140 >> 2] + 12 >> 2];
 HEAP32[$5 + 92 >> 2] = HEAP32[HEAP32[$5 + 140 >> 2] + 16 >> 2];
 HEAP32[$5 + 88 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 88 >> 2] < HEAP32[$5 + 120 >> 2]) {
   HEAP32[$5 + 84 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 84 >> 2] < HEAP32[$5 + 104 >> 2]) {
     HEAP32[$5 + 80 >> 2] = 0;
     while (1) {
      if (HEAP32[$5 + 80 >> 2] < HEAP32[$5 + 100 >> 2]) {
       HEAP32[$5 + 76 >> 2] = 0;
       while (1) {
        if (HEAP32[$5 + 76 >> 2] < HEAP32[$5 + 116 >> 2]) {
         HEAP32[$5 + 72 >> 2] = Math_imul(HEAP32[$5 + 80 >> 2], HEAP32[$5 + 92 >> 2]) - HEAP16[HEAP32[$5 + 140 >> 2] + 2 >> 1];
         HEAP32[$5 + 68 >> 2] = Math_imul(HEAP32[$5 + 84 >> 2], HEAP32[$5 + 96 >> 2]) - HEAP16[HEAP32[$5 + 140 >> 2] + 4 >> 1];
         HEAP32[$5 + 60 >> 2] = 0;
         HEAP32[$5 + 56 >> 2] = 0 - HEAP32[$5 + 72 >> 2];
         HEAP32[$5 + 64 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($5 + 60 | 0, $5 + 56 | 0) >> 2];
         $0 = HEAP32[$5 + 140 >> 2];
         HEAP32[$5 + 48 >> 2] = HEAP32[$5 + 108 >> 2] - HEAP32[$5 + 72 >> 2];
         HEAP32[$5 + 52 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($0 + 24 | 0, $5 + 48 | 0) >> 2];
         HEAP32[$5 + 40 >> 2] = 0;
         HEAP32[$5 + 36 >> 2] = 0 - HEAP32[$5 + 68 >> 2];
         HEAP32[$5 + 44 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($5 + 40 | 0, $5 + 36 | 0) >> 2];
         $0 = HEAP32[$5 + 140 >> 2];
         HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 112 >> 2] - HEAP32[$5 + 68 >> 2];
         HEAP32[$5 + 32 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($0 + 20 | 0, $5 + 28 | 0) >> 2];
         HEAP32[$5 + 24 >> 2] = 0;
         HEAP32[$5 + 20 >> 2] = 0;
         HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 44 >> 2];
         while (1) {
          if (HEAP32[$5 + 16 >> 2] < HEAP32[$5 + 32 >> 2]) {
           HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 64 >> 2];
           while (1) {
            if (HEAP32[$5 + 12 >> 2] < HEAP32[$5 + 52 >> 2]) {
             HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 72 >> 2] + HEAP32[$5 + 12 >> 2];
             HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 68 >> 2] + HEAP32[$5 + 16 >> 2];
             HEAP32[$5 + 24 >> 2] = HEAP8[HEAP32[$5 + 132 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$5 + 136 >> 2], HEAP32[$5 + 88 >> 2], HEAP32[$5 + 4 >> 2], HEAP32[$5 + 8 >> 2], HEAP32[$5 + 76 >> 2]) | 0] + HEAP32[$5 + 24 >> 2];
             HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 20 >> 2] + 1;
             HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 12 >> 2] + 1;
             continue;
            }
            break;
           }
           HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] + 1;
           continue;
          }
          break;
         }
         if (HEAP32[$5 + 24 >> 2] > 0) {
          $0 = (HEAP32[$5 + 24 >> 2] + (HEAP32[$5 + 20 >> 2] / 2 | 0) | 0) / HEAP32[$5 + 20 >> 2] | 0;
         } else {
          $0 = (HEAP32[$5 + 24 >> 2] - (HEAP32[$5 + 20 >> 2] / 2 | 0) | 0) / HEAP32[$5 + 20 >> 2] | 0;
         }
         HEAP32[$5 + 24 >> 2] = $0;
         HEAP32[$5 + 24 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($5 + 24 | 0, HEAP32[$5 + 140 >> 2] + 28 | 0) >> 2];
         HEAP32[$5 + 24 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($5 + 24 | 0, HEAP32[$5 + 140 >> 2] + 32 | 0) >> 2];
         $0 = HEAP32[$5 + 24 >> 2];
         HEAP8[HEAP32[$5 + 124 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$5 + 128 >> 2], HEAP32[$5 + 88 >> 2], HEAP32[$5 + 84 >> 2], HEAP32[$5 + 80 >> 2], HEAP32[$5 + 76 >> 2]) | 0] = $0;
         HEAP32[$5 + 76 >> 2] = HEAP32[$5 + 76 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$5 + 80 >> 2] = HEAP32[$5 + 80 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$5 + 84 >> 2] = HEAP32[$5 + 84 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 88 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $5 + 144 | 0;
}

function tflite__MicroAllocator__CommitStaticMemoryPlan_28tflite__Model_20const__2c_20tflite__SubGraph_20const__2c_20TfLiteEvalTensor__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 208 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 200 >> 2] = $0;
 HEAP32[$4 + 196 >> 2] = $1;
 HEAP32[$4 + 192 >> 2] = $2;
 HEAP32[$4 + 188 >> 2] = $3;
 $0 = HEAP32[$4 + 200 >> 2];
 HEAP32[$4 + 184 >> 2] = 0;
 tflite__SimpleMemoryAllocator__SimpleMemoryAllocator_28tflite__ErrorReporter__2c_20unsigned_20char__2c_20unsigned_20char__29($4 + 152 | 0, HEAP32[$0 + 8 >> 2], tflite__SimpleMemoryAllocator__GetBufferHead_28_29_20const(HEAP32[$0 + 4 >> 2]), tflite__SimpleMemoryAllocator__GetTail_28_29_20const(HEAP32[$0 + 4 >> 2]));
 tflite___28anonymous_20namespace_29__AllocationInfoBuilder__AllocationInfoBuilder_28tflite__ErrorReporter__2c_20tflite__SimpleMemoryAllocator__29($4 + 128 | 0, HEAP32[$0 + 8 >> 2], $4 + 152 | 0);
 HEAP32[$4 + 124 >> 2] = tflite___28anonymous_20namespace_29__AllocationInfoBuilder__Init_28unsigned_20long_2c_20unsigned_20long_29($4 + 128 | 0, flatbuffers__Vector_flatbuffers__Offset_tflite__Tensor____size_28_29_20const(tflite__SubGraph__tensors_28_29_20const(HEAP32[$4 + 192 >> 2])), HEAP32[$0 + 20 >> 2]);
 label$1: {
  if (HEAP32[$4 + 124 >> 2]) {
   HEAP32[$4 + 204 >> 2] = HEAP32[$4 + 124 >> 2];
   HEAP32[$4 + 120 >> 2] = 1;
   break label$1;
  }
  HEAP32[$4 + 116 >> 2] = 0;
  HEAP32[$4 + 112 >> 2] = tflite___28anonymous_20namespace_29__AllocationInfoBuilder__GetOfflinePlannedOffsets_28tflite__Model_20const__2c_20int_20const___29($4 + 128 | 0, HEAP32[$4 + 196 >> 2], $4 + 116 | 0);
  if (HEAP32[$4 + 112 >> 2]) {
   HEAP32[$4 + 204 >> 2] = HEAP32[$4 + 112 >> 2];
   HEAP32[$4 + 120 >> 2] = 1;
   break label$1;
  }
  HEAP32[$4 + 108 >> 2] = tflite___28anonymous_20namespace_29__AllocationInfoBuilder__AddTensors_28tflite__SubGraph_20const__2c_20int_20const__2c_20TfLiteEvalTensor__29($4 + 128 | 0, HEAP32[$4 + 192 >> 2], HEAP32[$4 + 116 >> 2], HEAP32[$4 + 188 >> 2]);
  if (HEAP32[$4 + 108 >> 2]) {
   HEAP32[$4 + 204 >> 2] = HEAP32[$4 + 108 >> 2];
   HEAP32[$4 + 120 >> 2] = 1;
   break label$1;
  }
  HEAP32[$4 + 104 >> 2] = tflite___28anonymous_20namespace_29__AllocationInfoBuilder__AddScratchBuffers_28tflite__internal__ScratchBufferHandle__29($4 + 128 | 0, HEAP32[$0 + 16 >> 2]);
  if (HEAP32[$4 + 104 >> 2]) {
   HEAP32[$4 + 204 >> 2] = HEAP32[$4 + 104 >> 2];
   HEAP32[$4 + 120 >> 2] = 1;
   break label$1;
  }
  HEAP32[$4 + 100 >> 2] = tflite___28anonymous_20namespace_29__AllocationInfoBuilder__Finish_28_29_20const($4 + 128 | 0);
  HEAP32[$4 + 96 >> 2] = tflite__SimpleMemoryAllocator__GetAvailableMemory_28unsigned_20long_29_20const($4 + 152 | 0, 16);
  HEAP32[$4 + 92 >> 2] = tflite__SimpleMemoryAllocator__AllocateTemp_28unsigned_20long_2c_20unsigned_20long_29($4 + 152 | 0, HEAP32[$4 + 96 >> 2], 16);
  if (!HEAP32[$4 + 92 >> 2]) {
   $1 = HEAP32[$0 + 8 >> 2];
   $2 = HEAP32[$0 + 8 >> 2];
   HEAP32[$4 + 16 >> 2] = 100860;
   tflite__ErrorReporter__ReportError_28void__2c_20char_20const__2c_20____29($1, $2, 111890, $4 + 16 | 0);
   HEAP32[$4 + 204 >> 2] = 1;
   HEAP32[$4 + 120 >> 2] = 1;
   break label$1;
  }
  tflite__GreedyMemoryPlanner__GreedyMemoryPlanner_28unsigned_20char__2c_20int_29($4 + 48 | 0, HEAP32[$4 + 92 >> 2], HEAP32[$4 + 96 >> 2]);
  HEAP32[$4 + 44 >> 2] = tflite___28anonymous_20namespace_29__CreatePlan_28tflite__ErrorReporter__2c_20tflite__GreedyMemoryPlanner__2c_20tflite___28anonymous_20namespace_29__AllocationInfo_20const__2c_20unsigned_20long_29(HEAP32[$0 + 8 >> 2], $4 + 48 | 0, HEAP32[$4 + 100 >> 2], tflite___28anonymous_20namespace_29__AllocationInfoBuilder__Size_28_29_20const($4 + 128 | 0));
  label$7: {
   if (HEAP32[$4 + 44 >> 2]) {
    HEAP32[$4 + 204 >> 2] = HEAP32[$4 + 44 >> 2];
    HEAP32[$4 + 120 >> 2] = 1;
    break label$7;
   }
   HEAP32[$4 + 40 >> 2] = tflite__SimpleMemoryAllocator__GetAvailableMemory_28unsigned_20long_29_20const(HEAP32[$0 + 4 >> 2], 16);
   if (tflite__GreedyMemoryPlanner__GetMaximumMemorySize_28_29($4 + 48 | 0) >>> 0 > HEAPU32[$4 + 40 >> 2]) {
    $1 = HEAP32[$0 + 8 >> 2];
    $2 = tflite__GreedyMemoryPlanner__GetMaximumMemorySize_28_29($4 + 48 | 0);
    HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 40 >> 2];
    HEAP32[$4 >> 2] = $2;
    tflite__ErrorReporter__Report_28char_20const__2c_20____29($1, 111950, $4);
    HEAP32[$4 + 204 >> 2] = 1;
    HEAP32[$4 + 120 >> 2] = 1;
    break label$7;
   }
   HEAP32[$4 + 36 >> 2] = tflite___28anonymous_20namespace_29__CommitPlan_28tflite__ErrorReporter__2c_20tflite__MemoryPlanner__2c_20unsigned_20char__2c_20tflite___28anonymous_20namespace_29__AllocationInfo_20const__2c_20unsigned_20long_29(HEAP32[$0 + 8 >> 2], $4 + 48 | 0, tflite__SimpleMemoryAllocator__GetBufferHead_28_29_20const(HEAP32[$0 + 4 >> 2]), HEAP32[$4 + 100 >> 2], tflite___28anonymous_20namespace_29__AllocationInfoBuilder__Size_28_29_20const($4 + 128 | 0));
   if (HEAP32[$4 + 36 >> 2]) {
    HEAP32[$4 + 204 >> 2] = HEAP32[$4 + 36 >> 2];
    HEAP32[$4 + 120 >> 2] = 1;
    break label$7;
   }
   HEAP32[$4 + 184 >> 2] = tflite__GreedyMemoryPlanner__GetMaximumMemorySize_28_29($4 + 48 | 0);
   HEAP32[$4 + 120 >> 2] = 0;
  }
  tflite__GreedyMemoryPlanner___GreedyMemoryPlanner_28_29($4 + 48 | 0);
 }
 tflite__SimpleMemoryAllocator___SimpleMemoryAllocator_28_29($4 + 152 | 0);
 label$11: {
  if (HEAP32[$4 + 120 >> 2] == 1) {
   break label$11;
  }
  $0 = HEAP32[$0 + 4 >> 2];
  HEAP32[$4 + 32 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$4 + 184 >> 2], 16);
  if (HEAP32[$4 + 32 >> 2]) {
   HEAP32[$4 + 204 >> 2] = HEAP32[$4 + 32 >> 2];
   break label$11;
  }
  HEAP32[$4 + 204 >> 2] = 0;
 }
 __stack_pointer = $4 + 208 | 0;
 return HEAP32[$4 + 204 >> 2];
}

function tflite__ops__micro__activations___28anonymous_20namespace_29__CalculateSoftmaxParams_28TfLiteContext__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20TfLiteSoftmaxParams_20const__2c_20tflite__SoftmaxParams__29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0;
 $5 = __stack_pointer - 176 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 168 >> 2] = $0;
 HEAP32[$5 + 164 >> 2] = $1;
 HEAP32[$5 + 160 >> 2] = $2;
 HEAP32[$5 + 156 >> 2] = $3;
 HEAP32[$5 + 152 >> 2] = $4;
 label$1: {
  label$2: {
   if (!(HEAP32[HEAP32[$5 + 164 >> 2] + 28 >> 2] != 3 & HEAP32[HEAP32[$5 + 164 >> 2] + 28 >> 2] != 9)) {
    label$5: {
     if (HEAP32[HEAP32[$5 + 164 >> 2] + 28 >> 2] == 3) {
      if (HEAP32[HEAP32[$5 + 160 >> 2] + 28 >> 2] != 3) {
       $0 = HEAP32[HEAP32[$5 + 168 >> 2] + 20 >> 2];
       $1 = HEAP32[$5 + 168 >> 2];
       $2 = TfLiteTypeGetName(HEAP32[HEAP32[$5 + 160 >> 2] + 28 >> 2]);
       HEAP32[$5 + 12 >> 2] = TfLiteTypeGetName(3);
       HEAP32[$5 + 8 >> 2] = $2;
       HEAP32[$5 + 4 >> 2] = 110461;
       HEAP32[$5 >> 2] = 104850;
       FUNCTION_TABLE[$0 | 0]($1, 126107, $5);
       HEAP32[$5 + 172 >> 2] = 1;
       break label$1;
      }
      if (HEAP32[HEAP32[$5 + 160 >> 2] + 12 >> 2]) {
       $0 = HEAP32[HEAP32[$5 + 168 >> 2] + 20 >> 2];
       $1 = HEAP32[$5 + 168 >> 2];
       $2 = HEAP32[HEAP32[$5 + 160 >> 2] + 12 >> 2];
       HEAP32[$5 + 28 >> 2] = 0;
       HEAP32[$5 + 24 >> 2] = $2;
       HEAP32[$5 + 20 >> 2] = 111390;
       HEAP32[$5 + 16 >> 2] = 97678;
       FUNCTION_TABLE[$0 | 0]($1, 126505, $5 + 16 | 0);
       HEAP32[$5 + 172 >> 2] = 1;
       break label$1;
      }
      break label$5;
     }
     if (HEAP32[HEAP32[$5 + 164 >> 2] + 28 >> 2] != 9) {
      $0 = HEAP32[HEAP32[$5 + 168 >> 2] + 20 >> 2];
      $1 = HEAP32[$5 + 168 >> 2];
      $2 = TfLiteTypeGetName(HEAP32[HEAP32[$5 + 164 >> 2] + 28 >> 2]);
      HEAP32[$5 + 44 >> 2] = TfLiteTypeGetName(9);
      HEAP32[$5 + 40 >> 2] = $2;
      HEAP32[$5 + 36 >> 2] = 110449;
      HEAP32[$5 + 32 >> 2] = 104863;
      FUNCTION_TABLE[$0 | 0]($1, 126107, $5 + 32 | 0);
      HEAP32[$5 + 172 >> 2] = 1;
      break label$1;
     }
     label$10: {
      if (HEAP32[HEAP32[$5 + 160 >> 2] + 28 >> 2] == 7) {
       if (HEAP32[HEAP32[$5 + 160 >> 2] + 12 >> 2] != -32768) {
        $0 = HEAP32[HEAP32[$5 + 168 >> 2] + 20 >> 2];
        $1 = HEAP32[$5 + 168 >> 2];
        $2 = HEAP32[HEAP32[$5 + 160 >> 2] + 12 >> 2];
        HEAP32[$5 + 60 >> 2] = -32768;
        HEAP32[$5 + 56 >> 2] = $2;
        HEAP32[$5 + 52 >> 2] = 110480;
        HEAP32[$5 + 48 >> 2] = 97678;
        FUNCTION_TABLE[$0 | 0]($1, 126505, $5 + 48 | 0);
        HEAP32[$5 + 172 >> 2] = 1;
        break label$1;
       }
       break label$10;
      }
      if (HEAP32[HEAP32[$5 + 160 >> 2] + 28 >> 2] != 9) {
       $0 = HEAP32[HEAP32[$5 + 168 >> 2] + 20 >> 2];
       $1 = HEAP32[$5 + 168 >> 2];
       $2 = TfLiteTypeGetName(HEAP32[HEAP32[$5 + 160 >> 2] + 28 >> 2]);
       HEAP32[$5 + 76 >> 2] = TfLiteTypeGetName(9);
       HEAP32[$5 + 72 >> 2] = $2;
       HEAP32[$5 + 68 >> 2] = 110449;
       HEAP32[$5 + 64 >> 2] = 104850;
       FUNCTION_TABLE[$0 | 0]($1, 126107, $5 - -64 | 0);
       HEAP32[$5 + 172 >> 2] = 1;
       break label$1;
      }
      if (HEAP32[HEAP32[$5 + 160 >> 2] + 12 >> 2] != -128) {
       $0 = HEAP32[HEAP32[$5 + 168 >> 2] + 20 >> 2];
       $1 = HEAP32[$5 + 168 >> 2];
       $2 = HEAP32[HEAP32[$5 + 160 >> 2] + 12 >> 2];
       HEAP32[$5 + 92 >> 2] = -128;
       HEAP32[$5 + 88 >> 2] = $2;
       HEAP32[$5 + 84 >> 2] = 110498;
       HEAP32[$5 + 80 >> 2] = 97678;
       FUNCTION_TABLE[$0 | 0]($1, 126505, $5 + 80 | 0);
       HEAP32[$5 + 172 >> 2] = 1;
       break label$1;
      }
      if (HEAPF32[HEAP32[$5 + 160 >> 2] + 8 >> 2] != Math_fround(.00390625)) {
       $0 = HEAP32[HEAP32[$5 + 168 >> 2] + 20 >> 2];
       $1 = HEAP32[$5 + 168 >> 2];
       HEAP32[$5 + 96 >> 2] = 110513;
       FUNCTION_TABLE[$0 | 0]($1, 111890, $5 + 96 | 0);
       HEAP32[$5 + 172 >> 2] = 1;
       break label$1;
      }
     }
    }
    tflite__PreprocessSoftmaxScaling_28double_2c_20double_2c_20int_2c_20int__2c_20int__29(+HEAPF32[HEAP32[$5 + 156 >> 2] >> 2], +HEAPF32[HEAP32[$5 + 164 >> 2] + 8 >> 2], 5, HEAP32[$5 + 152 >> 2] + 8 | 0, $5 + 148 | 0);
    HEAP32[HEAP32[$5 + 152 >> 2] + 12 >> 2] = HEAP32[$5 + 148 >> 2];
    $6 = -0 - +(tflite__CalculateInputRadius_28int_2c_20int_2c_20int_29(5, HEAP32[HEAP32[$5 + 152 >> 2] + 12 >> 2], 31) | 0);
    label$16: {
     if (Math_abs($6) < 2147483648) {
      $0 = ~~$6;
      break label$16;
     }
     $0 = -2147483648;
    }
    HEAP32[HEAP32[$5 + 152 >> 2] + 24 >> 2] = $0;
    break label$2;
   }
   if (HEAP32[HEAP32[$5 + 164 >> 2] + 28 >> 2] != 1) {
    $0 = HEAP32[HEAP32[$5 + 168 >> 2] + 20 >> 2];
    $1 = HEAP32[$5 + 168 >> 2];
    $2 = TfLiteTypeGetName(HEAP32[HEAP32[$5 + 164 >> 2] + 28 >> 2]);
    HEAP32[$5 + 124 >> 2] = TfLiteTypeGetName(1);
    HEAP32[$5 + 120 >> 2] = $2;
    HEAP32[$5 + 116 >> 2] = 111011;
    HEAP32[$5 + 112 >> 2] = 104863;
    FUNCTION_TABLE[$0 | 0]($1, 126107, $5 + 112 | 0);
    HEAP32[$5 + 172 >> 2] = 1;
    break label$1;
   }
   if (HEAP32[HEAP32[$5 + 160 >> 2] + 28 >> 2] != 1) {
    $0 = HEAP32[HEAP32[$5 + 168 >> 2] + 20 >> 2];
    $1 = HEAP32[$5 + 168 >> 2];
    $2 = TfLiteTypeGetName(HEAP32[HEAP32[$5 + 160 >> 2] + 28 >> 2]);
    HEAP32[$5 + 140 >> 2] = TfLiteTypeGetName(1);
    HEAP32[$5 + 136 >> 2] = $2;
    HEAP32[$5 + 132 >> 2] = 111011;
    HEAP32[$5 + 128 >> 2] = 104850;
    FUNCTION_TABLE[$0 | 0]($1, 126107, $5 + 128 | 0);
    HEAP32[$5 + 172 >> 2] = 1;
    break label$1;
   }
   HEAPF64[HEAP32[$5 + 152 >> 2] >> 3] = HEAPF32[HEAP32[$5 + 156 >> 2] >> 2];
  }
  HEAP32[$5 + 172 >> 2] = 0;
 }
 __stack_pointer = $5 + 176 | 0;
 return HEAP32[$5 + 172 >> 2];
}

function tflite__reference_ops__AveragePool_28tflite__PoolParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 144 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 140 >> 2] = $0;
 HEAP32[$5 + 136 >> 2] = $1;
 HEAP32[$5 + 132 >> 2] = $2;
 HEAP32[$5 + 128 >> 2] = $3;
 HEAP32[$5 + 124 >> 2] = $4;
 label$1: {
  if (HEAP32[HEAP32[$5 + 140 >> 2] + 28 >> 2] > HEAP32[HEAP32[$5 + 140 >> 2] + 32 >> 2]) {
   break label$1;
  }
 }
 label$2: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$5 + 136 >> 2]) | 0) != 4) {
   break label$2;
  }
 }
 label$3: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$5 + 128 >> 2]) | 0) != 4) {
   break label$3;
  }
 }
 HEAP32[$5 + 120 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 136 >> 2], 0, HEAP32[$5 + 128 >> 2], 0);
 HEAP32[$5 + 116 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 136 >> 2], 3, HEAP32[$5 + 128 >> 2], 3);
 HEAP32[$5 + 112 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 136 >> 2], 1);
 HEAP32[$5 + 108 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 136 >> 2], 2);
 HEAP32[$5 + 104 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 128 >> 2], 1);
 HEAP32[$5 + 100 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 128 >> 2], 2);
 HEAP32[$5 + 96 >> 2] = HEAP32[HEAP32[$5 + 140 >> 2] + 12 >> 2];
 HEAP32[$5 + 92 >> 2] = HEAP32[HEAP32[$5 + 140 >> 2] + 16 >> 2];
 HEAP32[$5 + 88 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 88 >> 2] < HEAP32[$5 + 120 >> 2]) {
   HEAP32[$5 + 84 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 84 >> 2] < HEAP32[$5 + 104 >> 2]) {
     HEAP32[$5 + 80 >> 2] = 0;
     while (1) {
      if (HEAP32[$5 + 80 >> 2] < HEAP32[$5 + 100 >> 2]) {
       HEAP32[$5 + 76 >> 2] = 0;
       while (1) {
        if (HEAP32[$5 + 76 >> 2] < HEAP32[$5 + 116 >> 2]) {
         HEAP32[$5 + 72 >> 2] = Math_imul(HEAP32[$5 + 80 >> 2], HEAP32[$5 + 92 >> 2]) - HEAP16[HEAP32[$5 + 140 >> 2] + 2 >> 1];
         HEAP32[$5 + 68 >> 2] = Math_imul(HEAP32[$5 + 84 >> 2], HEAP32[$5 + 96 >> 2]) - HEAP16[HEAP32[$5 + 140 >> 2] + 4 >> 1];
         HEAP32[$5 + 60 >> 2] = 0;
         HEAP32[$5 + 56 >> 2] = 0 - HEAP32[$5 + 72 >> 2];
         HEAP32[$5 + 64 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($5 + 60 | 0, $5 + 56 | 0) >> 2];
         $0 = HEAP32[$5 + 140 >> 2];
         HEAP32[$5 + 48 >> 2] = HEAP32[$5 + 108 >> 2] - HEAP32[$5 + 72 >> 2];
         HEAP32[$5 + 52 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($0 + 24 | 0, $5 + 48 | 0) >> 2];
         HEAP32[$5 + 40 >> 2] = 0;
         HEAP32[$5 + 36 >> 2] = 0 - HEAP32[$5 + 68 >> 2];
         HEAP32[$5 + 44 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($5 + 40 | 0, $5 + 36 | 0) >> 2];
         $0 = HEAP32[$5 + 140 >> 2];
         HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 112 >> 2] - HEAP32[$5 + 68 >> 2];
         HEAP32[$5 + 32 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($0 + 20 | 0, $5 + 28 | 0) >> 2];
         HEAP32[$5 + 24 >> 2] = 0;
         HEAP32[$5 + 20 >> 2] = 0;
         HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 44 >> 2];
         while (1) {
          if (HEAP32[$5 + 16 >> 2] < HEAP32[$5 + 32 >> 2]) {
           HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 64 >> 2];
           while (1) {
            if (HEAP32[$5 + 12 >> 2] < HEAP32[$5 + 52 >> 2]) {
             HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 72 >> 2] + HEAP32[$5 + 12 >> 2];
             HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 68 >> 2] + HEAP32[$5 + 16 >> 2];
             HEAP32[$5 + 24 >> 2] = HEAPU8[HEAP32[$5 + 132 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$5 + 136 >> 2], HEAP32[$5 + 88 >> 2], HEAP32[$5 + 4 >> 2], HEAP32[$5 + 8 >> 2], HEAP32[$5 + 76 >> 2]) | 0] + HEAP32[$5 + 24 >> 2];
             HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 20 >> 2] + 1;
             HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 12 >> 2] + 1;
             continue;
            }
            break;
           }
           HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] + 1;
           continue;
          }
          break;
         }
         HEAP32[$5 + 24 >> 2] = (HEAP32[$5 + 24 >> 2] + (HEAP32[$5 + 20 >> 2] / 2 | 0) | 0) / HEAP32[$5 + 20 >> 2];
         HEAP32[$5 + 24 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($5 + 24 | 0, HEAP32[$5 + 140 >> 2] + 28 | 0) >> 2];
         HEAP32[$5 + 24 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($5 + 24 | 0, HEAP32[$5 + 140 >> 2] + 32 | 0) >> 2];
         $0 = HEAP32[$5 + 24 >> 2];
         HEAP8[HEAP32[$5 + 124 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$5 + 128 >> 2], HEAP32[$5 + 88 >> 2], HEAP32[$5 + 84 >> 2], HEAP32[$5 + 80 >> 2], HEAP32[$5 + 76 >> 2]) | 0] = $0;
         HEAP32[$5 + 76 >> 2] = HEAP32[$5 + 76 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$5 + 80 >> 2] = HEAP32[$5 + 80 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$5 + 84 >> 2] = HEAP32[$5 + 84 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 88 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $5 + 144 | 0;
}

function jswrap_storagefile_write($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 240 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 236 >> 2] = $0;
 HEAP32[$2 + 232 >> 2] = $1;
 HEAP8[$2 + 231 | 0] = jsvObjectGetIntegerChild(HEAP32[$2 + 236 >> 2], 105433);
 label$1: {
  if (!(HEAP8[$2 + 231 | 0] == 119 | HEAP8[$2 + 231 | 0] == 97)) {
   jsExceptionHere(1, 105372, 0);
   break label$1;
  }
  HEAP32[$2 + 224 >> 2] = jsvAsString(HEAP32[$2 + 232 >> 2]);
  if (!HEAP32[$2 + 224 >> 2]) {
   break label$1;
  }
  HEAP32[$2 + 220 >> 2] = jsvGetStringLength(HEAP32[$2 + 224 >> 2]);
  if (!HEAP32[$2 + 220 >> 2]) {
   jsvUnLock(HEAP32[$2 + 224 >> 2]);
   break label$1;
  }
  HEAP32[$2 + 216 >> 2] = jsvObjectGetIntegerChild(HEAP32[$2 + 236 >> 2], 98034);
  HEAP32[$2 + 212 >> 2] = jsvObjectGetIntegerChild(HEAP32[$2 + 236 >> 2], 103079);
  jsfNameFromVarAndUnLock($2 + 184 | 0, jsvObjectGetChildIfExists(HEAP32[$2 + 236 >> 2], 105033));
  HEAP32[$2 + 180 >> 2] = 27;
  while (1) {
   $0 = 0;
   $0 = HEAP32[$2 + 180 >> 2] ? !HEAP8[(HEAP32[$2 + 180 >> 2] + $2 | 0) + 183 | 0] : $0;
   if ($0) {
    HEAP32[$2 + 180 >> 2] = HEAP32[$2 + 180 >> 2] - 1;
    continue;
   }
   break;
  }
  HEAP8[HEAP32[$2 + 180 >> 2] + ($2 + 184 | 0) | 0] = HEAP32[$2 + 212 >> 2];
  HEAP32[$2 + 120 >> 2] = HEAP32[$2 + 208 >> 2];
  $0 = HEAP32[$2 + 204 >> 2];
  $1 = HEAP32[$2 + 200 >> 2];
  HEAP32[$2 + 112 >> 2] = $1;
  HEAP32[$2 + 116 >> 2] = $0;
  $1 = HEAP32[$2 + 196 >> 2];
  $0 = HEAP32[$2 + 192 >> 2];
  HEAP32[$2 + 104 >> 2] = $0;
  HEAP32[$2 + 108 >> 2] = $1;
  $0 = HEAP32[$2 + 188 >> 2];
  $1 = HEAP32[$2 + 184 >> 2];
  HEAP32[$2 + 96 >> 2] = $1;
  HEAP32[$2 + 100 >> 2] = $0;
  HEAP32[$2 + 140 >> 2] = jsfFindFile($2 + 96 | 0, $2 + 144 | 0);
  label$7: {
   if (HEAP32[$2 + 140 >> 2]) {
    $0 = jsfGetFileSize($2 + 144 | 0);
    break label$7;
   }
   $0 = 0;
  }
  HEAP32[$2 + 136 >> 2] = $0;
  if (!HEAP32[$2 + 140 >> 2]) {
   $3 = HEAP32[$2 + 224 >> 2];
   HEAP32[$2 + 88 >> 2] = HEAP32[$2 + 208 >> 2];
   $1 = HEAP32[$2 + 204 >> 2];
   $0 = HEAP32[$2 + 200 >> 2];
   HEAP32[$2 + 80 >> 2] = $0;
   HEAP32[$2 + 84 >> 2] = $1;
   $0 = HEAP32[$2 + 196 >> 2];
   $1 = HEAP32[$2 + 192 >> 2];
   HEAP32[$2 + 72 >> 2] = $1;
   HEAP32[$2 + 76 >> 2] = $0;
   $1 = HEAP32[$2 + 188 >> 2];
   $0 = HEAP32[$2 + 184 >> 2];
   HEAP32[$2 + 64 >> 2] = $0;
   HEAP32[$2 + 68 >> 2] = $1;
   label$10: {
    if (jsfWriteFile($2 - -64 | 0, $3, 64, 0, 40928) & 1) {
     HEAP32[$2 + 56 >> 2] = HEAP32[$2 + 208 >> 2];
     $0 = HEAP32[$2 + 204 >> 2];
     $1 = HEAP32[$2 + 200 >> 2];
     HEAP32[$2 + 48 >> 2] = $1;
     HEAP32[$2 + 52 >> 2] = $0;
     $1 = HEAP32[$2 + 196 >> 2];
     $0 = HEAP32[$2 + 192 >> 2];
     HEAP32[$2 + 40 >> 2] = $0;
     HEAP32[$2 + 44 >> 2] = $1;
     $0 = HEAP32[$2 + 188 >> 2];
     $1 = HEAP32[$2 + 184 >> 2];
     HEAP32[$2 + 32 >> 2] = $1;
     HEAP32[$2 + 36 >> 2] = $0;
     HEAP32[$2 + 140 >> 2] = jsfFindFile($2 + 32 | 0, $2 + 144 | 0);
     HEAP32[$2 + 136 >> 2] = jsfGetFileSize($2 + 144 | 0);
     HEAP32[$2 + 216 >> 2] = HEAP32[$2 + 220 >> 2];
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 236 >> 2], 98034, jsvNewFromInteger(HEAP32[$2 + 216 >> 2]));
     break label$10;
    }
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 236 >> 2], 105433, jsvNewFromInteger(0));
   }
   jsvUnLock(HEAP32[$2 + 224 >> 2]);
   break label$1;
  }
  HEAP32[$2 + 132 >> 2] = HEAP32[$2 + 136 >> 2] - HEAP32[$2 + 216 >> 2];
  label$12: {
   if (HEAP32[$2 + 220 >> 2] < HEAP32[$2 + 132 >> 2]) {
    jswrap_flash_write(HEAP32[$2 + 224 >> 2], HEAP32[$2 + 140 >> 2] + HEAP32[$2 + 216 >> 2] | 0);
    HEAP32[$2 + 216 >> 2] = HEAP32[$2 + 220 >> 2] + HEAP32[$2 + 216 >> 2];
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 236 >> 2], 98034, jsvNewFromInteger(HEAP32[$2 + 216 >> 2]));
    break label$12;
   }
   HEAP32[$2 + 128 >> 2] = jsvNewFromStringVar(HEAP32[$2 + 224 >> 2], 0, HEAP32[$2 + 132 >> 2]);
   jswrap_flash_write(HEAP32[$2 + 128 >> 2], HEAP32[$2 + 140 >> 2] + HEAP32[$2 + 216 >> 2] | 0);
   HEAP32[$2 + 216 >> 2] = HEAP32[$2 + 132 >> 2] + HEAP32[$2 + 216 >> 2];
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 236 >> 2], 98034, jsvNewFromInteger(HEAP32[$2 + 216 >> 2]));
   jsvUnLock(HEAP32[$2 + 128 >> 2]);
   if (HEAP32[$2 + 212 >> 2] == 255) {
    jsExceptionHere(1, 127186, 0);
    jsvUnLock(HEAP32[$2 + 224 >> 2]);
    break label$1;
   }
   HEAP32[$2 + 212 >> 2] = HEAP32[$2 + 212 >> 2] + 1;
   HEAP8[HEAP32[$2 + 180 >> 2] + ($2 + 184 | 0) | 0] = HEAP32[$2 + 212 >> 2];
   HEAP32[$2 + 128 >> 2] = jsvNewFromStringVar(HEAP32[$2 + 224 >> 2], HEAP32[$2 + 132 >> 2], 2147483647);
   $3 = HEAP32[$2 + 128 >> 2];
   HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 208 >> 2];
   $1 = HEAP32[$2 + 204 >> 2];
   $0 = HEAP32[$2 + 200 >> 2];
   HEAP32[$2 + 16 >> 2] = $0;
   HEAP32[$2 + 20 >> 2] = $1;
   $0 = HEAP32[$2 + 196 >> 2];
   $1 = HEAP32[$2 + 192 >> 2];
   HEAP32[$2 + 8 >> 2] = $1;
   HEAP32[$2 + 12 >> 2] = $0;
   $1 = HEAP32[$2 + 188 >> 2];
   $0 = HEAP32[$2 + 184 >> 2];
   HEAP32[$2 >> 2] = $0;
   HEAP32[$2 + 4 >> 2] = $1;
   label$15: {
    if (jsfWriteFile($2, $3, 64, 0, 40928) & 1) {
     HEAP32[$2 + 216 >> 2] = jsvGetStringLength(HEAP32[$2 + 128 >> 2]);
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 236 >> 2], 103079, jsvNewFromInteger(HEAP32[$2 + 212 >> 2]));
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 236 >> 2], 98034, jsvNewFromInteger(HEAP32[$2 + 216 >> 2]));
     break label$15;
    }
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 236 >> 2], 105433, jsvNewFromInteger(0));
   }
   jsvUnLock(HEAP32[$2 + 128 >> 2]);
  }
  jsvUnLock(HEAP32[$2 + 224 >> 2]);
 }
 __stack_pointer = $2 + 240 | 0;
}

function jswrap_json_parse_internal($0) {
 var $1 = 0;
 $1 = __stack_pointer - 112 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 104 >> 2] = $0;
 label$1: {
  label$2: {
   label$3: {
    label$4: {
     label$5: {
      label$6: {
       label$7: {
        $0 = HEAP16[HEAP32[38615] + 2 >> 1];
        if (($0 | 0) != 45) {
         if (($0 | 0) == 91) {
          break label$4;
         }
         if (($0 | 0) == 123) {
          break label$3;
         }
         if (($0 | 0) == 129) {
          break label$7;
         }
         if (($0 | 0) == 130) {
          break label$6;
         }
         if (($0 | 0) == 131) {
          break label$5;
         }
         label$9: {
          label$10: {
           if (($0 | 0) != 180) {
            if (($0 | 0) == 181) {
             break label$10;
            }
            if (($0 | 0) == 182) {
             break label$9;
            }
            break label$2;
           }
           jslGetNextToken();
           HEAP32[$1 + 108 >> 2] = jsvNewFromBool(1);
           break label$1;
          }
          jslGetNextToken();
          HEAP32[$1 + 108 >> 2] = jsvNewFromBool(0);
          break label$1;
         }
         jslGetNextToken();
         HEAP32[$1 + 108 >> 2] = jsvNewWithFlags(2);
         break label$1;
        }
        jslGetNextToken();
        if (!(HEAP16[HEAP32[38615] + 2 >> 1] == 129 | HEAP16[HEAP32[38615] + 2 >> 1] == 130)) {
         HEAP32[$1 + 108 >> 2] = 0;
         break label$1;
        }
        HEAP32[$1 + 100 >> 2] = jswrap_json_parse_internal(HEAP32[$1 + 104 >> 2]);
        HEAP32[$1 + 96 >> 2] = jsvNewFromInteger(0);
        HEAP32[$1 + 92 >> 2] = jsvMathsOp(HEAP32[$1 + 96 >> 2], HEAP32[$1 + 100 >> 2], 45);
        jsvUnLock2(HEAP32[$1 + 100 >> 2], HEAP32[$1 + 96 >> 2]);
        HEAP32[$1 + 108 >> 2] = HEAP32[$1 + 92 >> 2];
        break label$1;
       }
       HEAP32[$1 + 80 >> 2] = stringToInt(jslGetTokenValueAsString());
       HEAP32[$1 + 84 >> 2] = i64toi32_i32$HIGH_BITS;
       jslGetNextToken();
       HEAP32[$1 + 108 >> 2] = jsvNewFromLongInteger(HEAP32[$1 + 80 >> 2], HEAP32[$1 + 84 >> 2]);
       break label$1;
      }
      HEAPF64[$1 + 72 >> 3] = stringToFloat(jslGetTokenValueAsString());
      jslGetNextToken();
      HEAP32[$1 + 108 >> 2] = jsvNewFromFloat(HEAPF64[$1 + 72 >> 3]);
      break label$1;
     }
     HEAP32[$1 + 68 >> 2] = jslGetTokenValueAsVar();
     jslGetNextToken();
     HEAP32[$1 + 108 >> 2] = HEAP32[$1 + 68 >> 2];
     break label$1;
    }
    HEAP32[$1 + 64 >> 2] = jsvNewEmptyArray();
    if (!HEAP32[$1 + 64 >> 2]) {
     HEAP32[$1 + 108 >> 2] = 0;
     break label$1;
    }
    jslGetNextToken();
    while (1) {
     $0 = 0;
     if (HEAP16[HEAP32[38615] + 2 >> 1] != 93) {
      $0 = jspHasError() ^ -1;
     }
     if ($0 & 1) {
      HEAP32[$1 + 60 >> 2] = jswrap_json_parse_internal(HEAP32[$1 + 104 >> 2]);
      label$17: {
       if (HEAP32[$1 + 60 >> 2]) {
        if (HEAP16[HEAP32[38615] + 2 >> 1] == 93) {
         break label$17;
        }
        if (jslMatch(44) & 1) {
         break label$17;
        }
       }
       jsvUnLock2(HEAP32[$1 + 60 >> 2], HEAP32[$1 + 64 >> 2]);
       HEAP32[$1 + 108 >> 2] = 0;
       break label$1;
      }
      jsvArrayPush(HEAP32[$1 + 64 >> 2], HEAP32[$1 + 60 >> 2]);
      jsvUnLock(HEAP32[$1 + 60 >> 2]);
      continue;
     }
     break;
    }
    if (!(jslMatch(93) & 1)) {
     jsvUnLock(HEAP32[$1 + 64 >> 2]);
     HEAP32[$1 + 108 >> 2] = 0;
     break label$1;
    }
    HEAP32[$1 + 108 >> 2] = HEAP32[$1 + 64 >> 2];
    break label$1;
   }
   HEAP32[$1 + 56 >> 2] = jsvNewObject();
   if (!HEAP32[$1 + 56 >> 2]) {
    HEAP32[$1 + 108 >> 2] = 0;
    break label$1;
   }
   jslGetNextToken();
   while (1) {
    label$22: {
     if (!(HEAP16[HEAP32[38615] + 2 >> 1] == 131 | HEAP16[HEAP32[38615] + 2 >> 1] == 129)) {
      $0 = 0;
      if (!(jslIsIDOrReservedWord() & 1)) {
       break label$22;
      }
     }
     $0 = jspHasError() ^ -1;
    }
    if ($0 & 1) {
     label$25: {
      if (HEAP32[$1 + 104 >> 2] & 512) {
       break label$25;
      }
      if (!(jslIsIDOrReservedWord() & 1) & HEAP16[HEAP32[38615] + 2 >> 1] != 129) {
       break label$25;
      }
      jslMatch(131);
      HEAP32[$1 + 108 >> 2] = HEAP32[$1 + 56 >> 2];
      break label$1;
     }
     HEAP32[$1 + 52 >> 2] = jsvAsArrayIndexAndUnLock(jslGetTokenValueAsVar());
     jslGetNextToken();
     HEAP32[$1 + 48 >> 2] = 0;
     label$27: {
      label$28: {
       if (!(jslMatch(58) & 1)) {
        break label$28;
       }
       $0 = jswrap_json_parse_internal(HEAP32[$1 + 104 >> 2]);
       HEAP32[$1 + 48 >> 2] = $0;
       if (!$0) {
        break label$28;
       }
       if (HEAP16[HEAP32[38615] + 2 >> 1] == 125) {
        break label$27;
       }
       if (jslMatch(44) & 1) {
        break label$27;
       }
      }
      jsvUnLock3(HEAP32[$1 + 52 >> 2], HEAP32[$1 + 48 >> 2], HEAP32[$1 + 56 >> 2]);
      HEAP32[$1 + 108 >> 2] = 0;
      break label$1;
     }
     jsvAddName(HEAP32[$1 + 56 >> 2], jsvMakeIntoVariableName(HEAP32[$1 + 52 >> 2], HEAP32[$1 + 48 >> 2]));
     jsvUnLock2(HEAP32[$1 + 48 >> 2], HEAP32[$1 + 52 >> 2]);
     continue;
    }
    break;
   }
   if (!(jslMatch(125) & 1)) {
    jsvUnLock(HEAP32[$1 + 56 >> 2]);
    HEAP32[$1 + 108 >> 2] = 0;
    break label$1;
   }
   HEAP32[$1 + 108 >> 2] = HEAP32[$1 + 56 >> 2];
   break label$1;
  }
  jslTokenAsString(HEAP16[HEAP32[38615] + 2 >> 1], $1 + 16 | 0, 32);
  HEAP32[$1 >> 2] = $1 + 16;
  jsExceptionHere(2, 100652, $1);
  HEAP32[$1 + 108 >> 2] = 0;
 }
 __stack_pointer = $1 + 112 | 0;
 return HEAP32[$1 + 108 >> 2];
}

function jsvMakeIntoVariableName($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 96 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 88 >> 2] = $0;
 HEAP32[$2 + 84 >> 2] = $1;
 label$1: {
  if (!HEAP32[$2 + 88 >> 2]) {
   HEAP32[$2 + 92 >> 2] = 0;
   break label$1;
  }
  $0 = HEAP32[$2 + 88 >> 2];
  HEAP16[$2 + 82 >> 1] = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63;
  label$3: {
   if (HEAPU16[$2 + 82 >> 1] == 10) {
    HEAP32[$2 + 76 >> 2] = 15;
    label$5: {
     if (!(jsvIsInt(HEAP32[$2 + 84 >> 2]) & 1)) {
      if (!(jsvIsBoolean(HEAP32[$2 + 84 >> 2]) & 1)) {
       break label$5;
      }
     }
     if (jsvIsPin(HEAP32[$2 + 84 >> 2]) & 1) {
      break label$5;
     }
     $0 = HEAP32[$2 + 84 >> 2];
     HEAP32[$2 + 72 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
     if (!(HEAP32[$2 + 72 >> 2] < -2048 | HEAP32[$2 + 72 >> 2] > 2047)) {
      HEAP32[$2 + 76 >> 2] = jsvIsInt(HEAP32[$2 + 84 >> 2]) & 1 ? 16 : 17;
      jsvSetFirstChild(HEAP32[$2 + 88 >> 2], HEAP32[$2 + 72 >> 2] & 65535);
      HEAP32[$2 + 84 >> 2] = 0;
     }
    }
    $0 = HEAP32[$2 + 88 >> 2];
    $1 = HEAP32[$2 + 88 >> 2];
    $1 = HEAP32[$2 + 76 >> 2] | (HEAPU8[$1 + 11 | 0] | HEAPU8[$1 + 12 | 0] << 8) & -64;
    HEAP8[$0 + 11 | 0] = $1;
    HEAP8[$0 + 12 | 0] = $1 >>> 8;
    break label$3;
   }
   if (!(HEAPU16[$2 + 82 >> 1] < 18 | HEAPU16[$2 + 82 >> 1] > 39)) {
    label$9: {
     if (!(!(HEAPU16[$2 + 82 >> 1] == 37 | HEAPU16[$2 + 82 >> 1] == 38) & HEAPU16[$2 + 82 >> 1] != 39)) {
      HEAP32[$2 + 68 >> 2] = jsvNewWithFlags(23);
      jsvAppendStringVarComplete(HEAP32[$2 + 68 >> 2], HEAP32[$2 + 88 >> 2]);
      jsvUnLock(HEAP32[$2 + 88 >> 2]);
      HEAP32[$2 + 88 >> 2] = HEAP32[$2 + 68 >> 2];
      break label$9;
     }
     if (jsvGetCharactersInVar(HEAP32[$2 + 88 >> 2]) >>> 0 > 4) {
      jsvStringIteratorNew($2 + 32 | 0, HEAP32[$2 + 88 >> 2], 4);
      HEAP32[$2 + 24 >> 2] = 0;
      while (1) {
       $0 = 0;
       if (HEAP32[$2 + 24 >> 2] < 4) {
        $0 = jsvStringIteratorHasChar_1($2 + 32 | 0);
       }
       if ($0 & 1) {
        $0 = jsvStringIteratorGetCharAndNext($2 + 32 | 0);
        HEAP8[HEAP32[$2 + 24 >> 2] + ($2 + 28 | 0) | 0] = $0;
        HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 24 >> 2] + 1;
        continue;
       }
       break;
      }
      jsvStringIteratorFree_1($2 + 32 | 0);
      HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 88 >> 2];
      while (1) {
       if (jsvGetLastChild(HEAP32[$2 + 20 >> 2]) & 65535) {
        HEAP32[$2 + 20 >> 2] = jsvGetAddressOf(jsvGetLastChild(HEAP32[$2 + 20 >> 2]) & 65535);
        continue;
       }
       break;
      }
      if (HEAP32[$2 + 20 >> 2] != HEAP32[$2 + 88 >> 2]) {
       HEAP32[$2 + 16 >> 2] = jsvGetCharactersInVar(HEAP32[$2 + 20 >> 2]) + HEAP32[$2 + 24 >> 2];
       label$19: {
        if (HEAP32[$2 + 16 >> 2] <= 9) {
         jsvSetCharactersInVar(HEAP32[$2 + 20 >> 2], HEAP32[$2 + 16 >> 2]);
         HEAP32[$2 + 20 >> 2] = 0;
         break label$19;
        }
        HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 16 >> 2] - 9;
       }
      }
      if (HEAP32[$2 + 20 >> 2]) {
       jsvSetCharactersInVar(HEAP32[$2 + 20 >> 2], jsvGetMaxCharactersInVar(HEAP32[$2 + 20 >> 2]));
       HEAP32[$2 + 12 >> 2] = jsvNewWithFlags(40);
       if (HEAP32[$2 + 12 >> 2]) {
        jsvSetCharactersInVar(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 24 >> 2]);
        jsvSetLastChild(HEAP32[$2 + 20 >> 2], jsvGetRef(HEAP32[$2 + 12 >> 2]) & 65535);
        jsvUnLock(HEAP32[$2 + 12 >> 2]);
       }
      }
      jsvStringIteratorNew($2 + 32 | 0, HEAP32[$2 + 88 >> 2], 8);
      HEAP32[$2 + 24 >> 2] = 0;
      while (1) {
       if (jsvStringIteratorHasChar_1($2 + 32 | 0) & 1) {
        HEAP8[$2 + 11 | 0] = jsvStringIteratorGetChar_1($2 + 32 | 0);
        jsvStringIteratorSetChar($2 + 32 | 0, HEAP8[HEAP32[$2 + 24 >> 2] + ($2 + 28 | 0) | 0]);
        HEAP8[HEAP32[$2 + 24 >> 2] + ($2 + 28 | 0) | 0] = HEAPU8[$2 + 11 | 0];
        jsvStringIteratorNext($2 + 32 | 0);
        HEAP32[$2 + 24 >> 2] = (HEAP32[$2 + 24 >> 2] + 1 | 0) % 4;
        continue;
       }
       break;
      }
      jsvStringIteratorFree_1($2 + 32 | 0);
      jsvSetCharactersInVar(HEAP32[$2 + 88 >> 2], 4);
      jsvSetNextSibling(HEAP32[$2 + 88 >> 2], 0);
      jsvSetPrevSibling(HEAP32[$2 + 88 >> 2], 0);
      jsvSetFirstChild(HEAP32[$2 + 88 >> 2], 0);
     }
    }
    HEAP32[$2 + 4 >> 2] = 23;
    label$25: {
     label$26: {
      if (!(jsvIsInt(HEAP32[$2 + 84 >> 2]) & 1)) {
       break label$26;
      }
      if (jsvIsPin(HEAP32[$2 + 84 >> 2]) & 1) {
       break label$26;
      }
      $0 = HEAP32[$2 + 84 >> 2];
      HEAP32[$2 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
      if (!(HEAP32[$2 >> 2] < -2048 | HEAP32[$2 >> 2] > 2047)) {
       HEAP32[$2 + 4 >> 2] = 18;
       jsvSetFirstChild(HEAP32[$2 + 88 >> 2], HEAP32[$2 >> 2] & 65535);
       HEAP32[$2 + 84 >> 2] = 0;
      }
      break label$25;
     }
     jsvSetFirstChild(HEAP32[$2 + 88 >> 2], 0);
    }
    $0 = HEAP32[$2 + 88 >> 2];
    $1 = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 65472;
    $3 = HEAP32[$2 + 4 >> 2] + jsvGetCharactersInVar(HEAP32[$2 + 88 >> 2]) | 0;
    $0 = HEAP32[$2 + 88 >> 2];
    $1 = $1 | $3;
    HEAP8[$0 + 11 | 0] = $1;
    HEAP8[$0 + 12 | 0] = $1 >>> 8;
   }
  }
  if (HEAP32[$2 + 84 >> 2]) {
   jsvSetFirstChild(HEAP32[$2 + 88 >> 2], jsvGetRef(jsvRef(HEAP32[$2 + 84 >> 2])) & 65535);
  }
  HEAP32[$2 + 92 >> 2] = HEAP32[$2 + 88 >> 2];
 }
 __stack_pointer = $2 + 96 | 0;
 return HEAP32[$2 + 92 >> 2];
}

function tflite__GreedyMemoryPlanner__CalculateOffsetsIfNeeded_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 96 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 92 >> 2] = $0;
 label$1: {
  $0 = HEAP32[$1 + 92 >> 2];
  if (!(HEAP8[$0 + 40 | 0] & 1) | !HEAP32[$0 + 8 >> 2]) {
   break label$1;
  }
  HEAP8[$0 + 40 | 0] = 0;
  HEAP32[$1 + 88 >> 2] = HEAP32[$0 + 8 >> 2];
  HEAP32[$1 + 84 >> 2] = 0;
  HEAP32[$1 + 80 >> 2] = 0;
  while (1) {
   if (HEAP32[$1 + 80 >> 2] < HEAP32[$0 + 8 >> 2]) {
    label$5: {
     if (HEAP32[(HEAP32[$0 + 12 >> 2] + (HEAP32[$1 + 80 >> 2] << 4) | 0) + 4 >> 2] == -1) {
      HEAP32[$1 + 88 >> 2] = HEAP32[$1 + 88 >> 2] - 1;
      HEAP32[HEAP32[$0 + 16 >> 2] + (HEAP32[$1 + 88 >> 2] << 2) >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] + (HEAP32[$1 + 80 >> 2] << 4) >> 2];
      HEAP32[HEAP32[$0 + 20 >> 2] + (HEAP32[$1 + 88 >> 2] << 2) >> 2] = HEAP32[$1 + 80 >> 2];
      HEAP32[HEAP32[$0 + 36 >> 2] + (HEAP32[$1 + 80 >> 2] << 2) >> 2] = -1;
      break label$5;
     }
     HEAP32[HEAP32[$0 + 16 >> 2] + (HEAP32[$1 + 84 >> 2] << 2) >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] + (HEAP32[$1 + 80 >> 2] << 4) >> 2];
     HEAP32[HEAP32[$0 + 20 >> 2] + (HEAP32[$1 + 84 >> 2] << 2) >> 2] = HEAP32[$1 + 80 >> 2];
     HEAP32[HEAP32[$0 + 36 >> 2] + (HEAP32[$1 + 80 >> 2] << 2) >> 2] = HEAP32[(HEAP32[$0 + 12 >> 2] + (HEAP32[$1 + 80 >> 2] << 4) | 0) + 4 >> 2];
     HEAP32[$1 + 84 >> 2] = HEAP32[$1 + 84 >> 2] + 1;
    }
    HEAP32[$1 + 80 >> 2] = HEAP32[$1 + 80 >> 2] + 1;
    continue;
   }
   break;
  }
  tflite__ReverseSortInPlace_28int__2c_20int__2c_20int_29(HEAP32[$0 + 16 >> 2] + (HEAP32[$1 + 84 >> 2] << 2) | 0, HEAP32[$0 + 20 >> 2] + (HEAP32[$1 + 84 >> 2] << 2) | 0, HEAP32[$0 + 8 >> 2] - HEAP32[$1 + 84 >> 2] | 0);
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 1;
  HEAP32[$1 + 76 >> 2] = HEAP32[$0 + 24 >> 2] + Math_imul(HEAP32[$0 + 32 >> 2], 12);
  HEAP32[HEAP32[$1 + 76 >> 2] + 8 >> 2] = -1;
  HEAP32[$1 + 72 >> 2] = HEAP32[HEAP32[$0 + 20 >> 2] >> 2];
  HEAP32[HEAP32[$1 + 76 >> 2] + 4 >> 2] = HEAP32[$1 + 72 >> 2];
  if (HEAP32[(HEAP32[$0 + 12 >> 2] + (HEAP32[$1 + 72 >> 2] << 4) | 0) + 4 >> 2] == -1) {
   HEAP32[HEAP32[$0 + 36 >> 2] + (HEAP32[$1 + 72 >> 2] << 2) >> 2] = 0;
  }
  HEAP32[HEAP32[$1 + 76 >> 2] >> 2] = HEAP32[HEAP32[$0 + 36 >> 2] + (HEAP32[$1 + 72 >> 2] << 2) >> 2];
  HEAP32[$1 + 68 >> 2] = 1;
  while (1) {
   if (HEAP32[$1 + 68 >> 2] >= HEAP32[$0 + 8 >> 2]) {
    break label$1;
   }
   HEAP32[$1 + 72 >> 2] = HEAP32[HEAP32[$0 + 20 >> 2] + (HEAP32[$1 + 68 >> 2] << 2) >> 2];
   HEAP32[$1 + 64 >> 2] = HEAP32[$0 + 12 >> 2] + (HEAP32[$1 + 72 >> 2] << 4);
   HEAP32[$1 + 60 >> 2] = HEAP32[HEAP32[$1 + 64 >> 2] >> 2];
   HEAP32[$1 + 56 >> 2] = HEAP32[HEAP32[$1 + 64 >> 2] + 8 >> 2];
   HEAP32[$1 + 52 >> 2] = HEAP32[HEAP32[$1 + 64 >> 2] + 12 >> 2];
   HEAP32[$1 + 48 >> 2] = 0;
   label$9: {
    if (HEAP32[HEAP32[$1 + 64 >> 2] + 4 >> 2] == -1) {
     HEAP32[$1 + 44 >> 2] = 0;
     while (1) {
      HEAP32[$1 + 40 >> 2] = tflite__GreedyMemoryPlanner__NextSimultaneouslyActiveBuffer_28tflite__GreedyMemoryPlanner__ListEntry_20const__2c_20int_2c_20int_29($0, HEAP32[$1 + 44 >> 2], HEAP32[$1 + 56 >> 2], HEAP32[$1 + 52 >> 2]);
      if (HEAP32[$1 + 44 >> 2]) {
       HEAP32[$1 + 36 >> 2] = HEAP32[$0 + 12 >> 2] + (HEAP32[HEAP32[$1 + 44 >> 2] + 4 >> 2] << 4);
       HEAP32[$1 + 32 >> 2] = HEAP32[HEAP32[$1 + 44 >> 2] >> 2] + HEAP32[HEAP32[$1 + 36 >> 2] >> 2];
       if (HEAP32[$1 + 32 >> 2] > HEAP32[$1 + 48 >> 2]) {
        HEAP32[$1 + 48 >> 2] = HEAP32[$1 + 32 >> 2];
       }
      }
      label$14: {
       if (!HEAP32[$1 + 40 >> 2]) {
        break label$14;
       }
       HEAP32[$1 + 28 >> 2] = HEAP32[HEAP32[$1 + 40 >> 2] >> 2] - HEAP32[$1 + 48 >> 2];
       if (HEAP32[$1 + 28 >> 2] >= HEAP32[$1 + 60 >> 2]) {
        break label$14;
       }
       HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 40 >> 2];
       continue;
      }
      break;
     }
     break label$9;
    }
    HEAP32[$1 + 48 >> 2] = HEAP32[HEAP32[$1 + 64 >> 2] + 4 >> 2];
   }
   HEAP32[HEAP32[$0 + 36 >> 2] + (HEAP32[$1 + 72 >> 2] << 2) >> 2] = HEAP32[$1 + 48 >> 2];
   HEAP32[$1 + 24 >> 2] = HEAP32[$0 + 24 >> 2] + Math_imul(HEAP32[$0 + 28 >> 2], 12);
   HEAP32[HEAP32[$1 + 24 >> 2] >> 2] = HEAP32[$1 + 48 >> 2];
   HEAP32[HEAP32[$1 + 24 >> 2] + 4 >> 2] = HEAP32[$1 + 72 >> 2];
   HEAP32[$1 + 20 >> 2] = HEAP32[$0 + 28 >> 2];
   HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 28 >> 2] + 1;
   label$15: {
    if (HEAP32[HEAP32[$1 + 76 >> 2] >> 2] > HEAP32[$1 + 48 >> 2]) {
     HEAP32[$1 + 76 >> 2] = HEAP32[$1 + 24 >> 2];
     HEAP32[HEAP32[$1 + 76 >> 2] + 8 >> 2] = HEAP32[$0 + 32 >> 2];
     HEAP32[$0 + 32 >> 2] = HEAP32[$1 + 20 >> 2];
     break label$15;
    }
    HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 76 >> 2];
    while (1) {
     label$18: {
      HEAP32[$1 + 12 >> 2] = HEAP32[HEAP32[$1 + 16 >> 2] + 8 >> 2];
      if (HEAP32[$1 + 12 >> 2] == -1) {
       HEAP32[HEAP32[$1 + 16 >> 2] + 8 >> 2] = HEAP32[$1 + 20 >> 2];
       HEAP32[HEAP32[$1 + 24 >> 2] + 8 >> 2] = -1;
       break label$18;
      }
      HEAP32[$1 + 8 >> 2] = HEAP32[$0 + 24 >> 2] + Math_imul(HEAP32[$1 + 12 >> 2], 12);
      if (HEAP32[HEAP32[$1 + 8 >> 2] >> 2] > HEAP32[$1 + 48 >> 2]) {
       HEAP32[HEAP32[$1 + 24 >> 2] + 8 >> 2] = HEAP32[HEAP32[$1 + 16 >> 2] + 8 >> 2];
       HEAP32[HEAP32[$1 + 16 >> 2] + 8 >> 2] = HEAP32[$1 + 20 >> 2];
      } else {
       HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 8 >> 2];
       continue;
      }
     }
     break;
    }
   }
   HEAP32[$1 + 68 >> 2] = HEAP32[$1 + 68 >> 2] + 1;
   continue;
  }
 }
 __stack_pointer = $1 + 96 | 0;
}

function jspeClassDefinition($0) {
 var $1 = 0;
 $1 = __stack_pointer - 96 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 91 | 0] = $0;
 HEAP32[$1 + 84 >> 2] = 0;
 HEAP32[$1 + 80 >> 2] = 0;
 HEAP32[$1 + 76 >> 2] = 0;
 HEAP8[$1 + 75 | 0] = (HEAP32[46755] & 63) == 1;
 if (HEAP8[$1 + 75 | 0] & 1) {
  HEAP32[$1 + 84 >> 2] = jsvNewWithFlags(7);
  HEAP32[$1 + 76 >> 2] = jsvNewObject();
  HEAP32[$1 + 68 >> 2] = jspeiGetScopesAsVar();
  if (HEAP32[$1 + 68 >> 2]) {
   jsvAddNamedChildAndUnLock(HEAP32[$1 + 84 >> 2], HEAP32[$1 + 68 >> 2], 102046);
  }
 }
 if (!(!(HEAP8[$1 + 91 | 0] & 1) | HEAP16[HEAP32[38615] + 2 >> 1] != 128)) {
  if (HEAP32[$1 + 76 >> 2]) {
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 76 >> 2], 102698, jslGetTokenValueAsVar());
  }
  jslGetNextToken();
 }
 if (HEAP32[$1 + 84 >> 2]) {
  HEAP32[$1 + 64 >> 2] = jsvFindOrAddChildFromString(HEAP32[$1 + 84 >> 2], 104794);
  jspEnsureIsPrototype(HEAP32[$1 + 84 >> 2], HEAP32[$1 + 64 >> 2]);
  HEAP32[$1 + 80 >> 2] = jsvSkipName(HEAP32[$1 + 64 >> 2]);
  jsvUnLock(HEAP32[$1 + 64 >> 2]);
 }
 label$6: {
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 195) {
   jslGetNextToken();
   HEAP32[$1 + 60 >> 2] = 0;
   HEAP32[$1 + 56 >> 2] = 0;
   if (HEAP8[$1 + 75 | 0] & 1) {
    HEAP32[$1 + 60 >> 2] = jspGetNamedVariable(jslGetTokenValueAsString());
    HEAP32[$1 + 56 >> 2] = jsvSkipName(HEAP32[$1 + 60 >> 2]);
   }
   if (!(jslMatch(128) & 1)) {
    jsvUnLock4(HEAP32[$1 + 56 >> 2], HEAP32[$1 + 84 >> 2], HEAP32[$1 + 76 >> 2], HEAP32[$1 + 80 >> 2]);
    HEAP32[$1 + 92 >> 2] = 0;
    break label$6;
   }
   if (HEAP32[$1 + 80 >> 2]) {
    label$11: {
     if (jsvIsFunction(HEAP32[$1 + 56 >> 2]) & 1) {
      HEAP32[$1 + 52 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 56 >> 2], 104794);
      if (HEAP32[$1 + 52 >> 2]) {
       jsvObjectSetChild(HEAP32[$1 + 80 >> 2], 107914, HEAP32[$1 + 52 >> 2]);
       $0 = HEAP32[$1 + 84 >> 2];
       HEAP32[$1 >> 2] = HEAP32[$1 + 60 >> 2];
       jsvObjectSetChildAndUnLock($0, 105817, jsvVarPrintf(125972, $1));
       jsvUnLock(HEAP32[$1 + 52 >> 2]);
      }
      break label$11;
     }
     $0 = HEAP32[$1 + 60 >> 2];
     HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 56 >> 2];
     HEAP32[$1 + 16 >> 2] = $0;
     jsExceptionHere(2, 98955, $1 + 16 | 0);
    }
   }
   jsvUnLock2(HEAP32[$1 + 56 >> 2], HEAP32[$1 + 60 >> 2]);
  }
  if (!(jslMatch(123) & 1)) {
   jsvUnLock3(HEAP32[$1 + 84 >> 2], HEAP32[$1 + 76 >> 2], HEAP32[$1 + 80 >> 2]);
   HEAP32[$1 + 92 >> 2] = 0;
   break label$6;
  }
  while (1) {
   label$16: {
    if (HEAP16[HEAP32[38615] + 2 >> 1] != 128) {
     $0 = 0;
     if (HEAP16[HEAP32[38615] + 2 >> 1] != 197) {
      break label$16;
     }
    }
    $0 = jspIsInterrupted() ^ -1;
   }
   if ($0 & 1) {
    HEAP8[$1 + 51 | 0] = HEAP16[HEAP32[38615] + 2 >> 1] == 197;
    if (HEAP8[$1 + 51 | 0] & 1) {
     jslGetNextToken();
    }
    HEAP32[$1 + 44 >> 2] = jslGetTokenValueAsVar();
    HEAP8[$1 + 43 | 0] = jsvIsStringEqual(HEAP32[$1 + 44 >> 2], 100982) & 1;
    if (!(jslMatch(128) & 1)) {
     jsvUnLock4(HEAP32[$1 + 44 >> 2], HEAP32[$1 + 84 >> 2], HEAP32[$1 + 76 >> 2], HEAP32[$1 + 80 >> 2]);
     HEAP32[$1 + 92 >> 2] = 0;
     break label$6;
    }
    HEAP8[$1 + 42 | 0] = 0;
    HEAP8[$1 + 41 | 0] = 0;
    if (HEAP16[HEAP32[38615] + 2 >> 1] == 128) {
     HEAP8[$1 + 42 | 0] = jsvIsStringEqual(HEAP32[$1 + 44 >> 2], 98052) & 1;
     HEAP8[$1 + 41 | 0] = jsvIsStringEqual(HEAP32[$1 + 44 >> 2], 98048) & 1;
     if (HEAP8[$1 + 41 | 0] & 1 ? 1 : HEAP8[$1 + 42 | 0] & 1) {
      jsvUnLock(HEAP32[$1 + 44 >> 2]);
      HEAP32[$1 + 44 >> 2] = jslGetTokenValueAsVar();
      jslGetNextToken();
     }
    }
    if (HEAP8[$1 + 51 | 0] & 1) {
     $0 = HEAP32[$1 + 76 >> 2];
    } else {
     $0 = HEAP32[$1 + 80 >> 2];
    }
    HEAP32[$1 + 36 >> 2] = $0;
    if (HEAP32[$1 + 36 >> 2]) {
     label$27: {
      label$28: {
       if (!(HEAP8[$1 + 43 | 0] & 1 | (HEAP8[$1 + 42 | 0] & 1 | HEAP8[$1 + 41 | 0] & 1))) {
        if (HEAP16[HEAP32[38615] + 2 >> 1] != 40) {
         break label$28;
        }
       }
       HEAP32[$1 + 32 >> 2] = jspeFunctionDefinition(0);
       label$30: {
        if (HEAP8[$1 + 43 | 0] & 1) {
         jswrap_function_replaceWith(HEAP32[$1 + 84 >> 2], HEAP32[$1 + 32 >> 2]);
         break label$30;
        }
        label$32: {
         if (HEAP8[$1 + 41 | 0] & 1 ? 1 : HEAP8[$1 + 42 | 0] & 1) {
          jsvAddGetterOrSetter(HEAP32[$1 + 36 >> 2], HEAP32[$1 + 44 >> 2], HEAP8[$1 + 42 | 0] & 1, HEAP32[$1 + 32 >> 2]);
          break label$32;
         }
         jsvObjectSetChildVar(HEAP32[$1 + 36 >> 2], HEAP32[$1 + 44 >> 2], HEAP32[$1 + 32 >> 2]);
        }
       }
       jsvUnLock(HEAP32[$1 + 32 >> 2]);
       break label$27;
      }
      if (!(jslMatch(61) & 1)) {
       jsvUnLock4(HEAP32[$1 + 44 >> 2], HEAP32[$1 + 84 >> 2], HEAP32[$1 + 76 >> 2], HEAP32[$1 + 80 >> 2]);
       HEAP32[$1 + 92 >> 2] = 0;
       break label$6;
      }
      HEAP32[$1 + 28 >> 2] = jsvSkipNameAndUnLock(jspeAssignmentExpression());
      jsvObjectSetChildVar(HEAP32[$1 + 36 >> 2], HEAP32[$1 + 44 >> 2], HEAP32[$1 + 28 >> 2]);
      jsvUnLock(HEAP32[$1 + 28 >> 2]);
     }
    }
    jsvUnLock(HEAP32[$1 + 44 >> 2]);
    continue;
   }
   break;
  }
  jsvUnLock(HEAP32[$1 + 80 >> 2]);
  jsvObjectAppendAll(HEAP32[$1 + 84 >> 2], HEAP32[$1 + 76 >> 2]);
  jsvUnLock(HEAP32[$1 + 76 >> 2]);
  if (!(jslMatch(125) & 1)) {
   jsvUnLock(HEAP32[$1 + 84 >> 2]);
   HEAP32[$1 + 92 >> 2] = 0;
   break label$6;
  }
  HEAP32[$1 + 92 >> 2] = HEAP32[$1 + 84 >> 2];
 }
 __stack_pointer = $1 + 96 | 0;
 return HEAP32[$1 + 92 >> 2];
}

function jswrap_graphics_createArrayBuffer($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 112 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 104 >> 2] = $0;
 HEAP32[$4 + 100 >> 2] = $1;
 HEAP32[$4 + 96 >> 2] = $2;
 HEAP32[$4 + 92 >> 2] = $3;
 label$1: {
  label$2: {
   if (!(HEAP32[$4 + 104 >> 2] <= 0 | HEAP32[$4 + 100 >> 2] <= 0 | HEAP32[$4 + 104 >> 2] > 32767)) {
    if (HEAP32[$4 + 100 >> 2] <= 32767) {
     break label$2;
    }
   }
   jsExceptionHere(1, 104305, 0);
   HEAP32[$4 + 108 >> 2] = 0;
   break label$1;
  }
  if (!(isValidBPP(HEAP32[$4 + 96 >> 2]) & 1)) {
   jsExceptionHere(1, 108973, 0);
   HEAP32[$4 + 108 >> 2] = 0;
   break label$1;
  }
  HEAP32[$4 + 88 >> 2] = jspNewObject(0, 100617);
  if (!HEAP32[$4 + 88 >> 2]) {
   HEAP32[$4 + 108 >> 2] = 0;
   break label$1;
  }
  HEAP8[$4 + 20 | 0] = 0;
  HEAP8[$4 + 21 | 0] = 0;
  HEAP8[$4 + 22 | 0] = 0;
  HEAP8[$4 + 23 | 0] = 0;
  graphicsStructInit($4 + 16 | 0, HEAP32[$4 + 104 >> 2], HEAP32[$4 + 100 >> 2], HEAP32[$4 + 96 >> 2]);
  HEAP8[$4 + 24 | 0] = 0;
  HEAP8[$4 + 25 | 0] = 0;
  HEAP8[$4 + 26 | 0] = 0;
  HEAP8[$4 + 27 | 0] = 0;
  $0 = HEAP32[$4 + 88 >> 2];
  HEAP8[$4 + 16 | 0] = $0;
  HEAP8[$4 + 17 | 0] = $0 >>> 8;
  HEAP8[$4 + 18 | 0] = $0 >>> 16;
  HEAP8[$4 + 19 | 0] = $0 >>> 24;
  if (jsvIsObject(HEAP32[$4 + 92 >> 2]) & 1) {
   if (jsvObjectGetBoolChild(HEAP32[$4 + 92 >> 2], 104e3) & 1) {
    $0 = HEAPU8[$4 + 24 | 0] | HEAPU8[$4 + 25 | 0] << 8 | (HEAPU8[$4 + 26 | 0] << 16 | HEAPU8[$4 + 27 | 0] << 24) | 1;
    HEAP8[$4 + 24 | 0] = $0;
    HEAP8[$4 + 25 | 0] = $0 >>> 8;
    HEAP8[$4 + 26 | 0] = $0 >>> 16;
    HEAP8[$4 + 27 | 0] = $0 >>> 24;
   }
   if (jsvObjectGetBoolChild(HEAP32[$4 + 92 >> 2], 107766) & 1) {
    $0 = HEAPU8[$4 + 24 | 0] | HEAPU8[$4 + 25 | 0] << 8 | (HEAPU8[$4 + 26 | 0] << 16 | HEAPU8[$4 + 27 | 0] << 24) | 4;
    HEAP8[$4 + 24 | 0] = $0;
    HEAP8[$4 + 25 | 0] = $0 >>> 8;
    HEAP8[$4 + 26 | 0] = $0 >>> 16;
    HEAP8[$4 + 27 | 0] = $0 >>> 24;
   }
   if (jsvObjectGetBoolChild(HEAP32[$4 + 92 >> 2], 96689) & 1) {
    $0 = HEAPU8[$4 + 24 | 0] | HEAPU8[$4 + 25 | 0] << 8 | (HEAPU8[$4 + 26 | 0] << 16 | HEAPU8[$4 + 27 | 0] << 24) | 8;
    HEAP8[$4 + 24 | 0] = $0;
    HEAP8[$4 + 25 | 0] = $0 >>> 8;
    HEAP8[$4 + 26 | 0] = $0 >>> 16;
    HEAP8[$4 + 27 | 0] = $0 >>> 24;
   }
   if (jsvObjectGetBoolChild(HEAP32[$4 + 92 >> 2], 104553) & 1) {
    label$11: {
     if (HEAPU8[$4 + 32 | 0] == 1) {
      $0 = HEAPU8[$4 + 24 | 0] | HEAPU8[$4 + 25 | 0] << 8 | (HEAPU8[$4 + 26 | 0] << 16 | HEAPU8[$4 + 27 | 0] << 24) | 2;
      HEAP8[$4 + 24 | 0] = $0;
      HEAP8[$4 + 25 | 0] = $0 >>> 8;
      HEAP8[$4 + 26 | 0] = $0 >>> 16;
      HEAP8[$4 + 27 | 0] = $0 >>> 24;
      break label$11;
     }
     jsExceptionHere(1, 100149, 0);
     HEAP32[$4 + 108 >> 2] = 0;
     break label$1;
    }
    if ((HEAPU8[$4 + 30 | 0] | HEAPU8[$4 + 31 | 0] << 8) & 7) {
     jsExceptionHere(1, 104511, 0);
     HEAP32[$4 + 108 >> 2] = 0;
     break label$1;
    }
   }
   HEAP32[$4 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 92 >> 2], 101485);
   if (HEAP32[$4 + 12 >> 2]) {
    if (!(jsvIsStringEqual(HEAP32[$4 + 12 >> 2], 107787) & 1)) {
     label$16: {
      if (!(jsvIsStringEqual(HEAP32[$4 + 12 >> 2], 103646) & 1)) {
       $0 = HEAPU8[$4 + 24 | 0] | HEAPU8[$4 + 25 | 0] << 8 | (HEAPU8[$4 + 26 | 0] << 16 | HEAPU8[$4 + 27 | 0] << 24) | 128;
       HEAP8[$4 + 24 | 0] = $0;
       HEAP8[$4 + 25 | 0] = $0 >>> 8;
       HEAP8[$4 + 26 | 0] = $0 >>> 16;
       HEAP8[$4 + 27 | 0] = $0 >>> 24;
       break label$16;
      }
      label$18: {
       if (!(jsvIsStringEqual(HEAP32[$4 + 12 >> 2], 101110) & 1)) {
        $0 = HEAPU8[$4 + 24 | 0] | HEAPU8[$4 + 25 | 0] << 8 | (HEAPU8[$4 + 26 | 0] << 16 | HEAPU8[$4 + 27 | 0] << 24) | 256;
        HEAP8[$4 + 24 | 0] = $0;
        HEAP8[$4 + 25 | 0] = $0 >>> 8;
        HEAP8[$4 + 26 | 0] = $0 >>> 16;
        HEAP8[$4 + 27 | 0] = $0 >>> 24;
        break label$18;
       }
       label$20: {
        if (!(jsvIsStringEqual(HEAP32[$4 + 12 >> 2], 101587) & 1)) {
         $0 = HEAPU8[$4 + 24 | 0] | HEAPU8[$4 + 25 | 0] << 8 | (HEAPU8[$4 + 26 | 0] << 16 | HEAPU8[$4 + 27 | 0] << 24) | 384;
         HEAP8[$4 + 24 | 0] = $0;
         HEAP8[$4 + 25 | 0] = $0 >>> 8;
         HEAP8[$4 + 26 | 0] = $0 >>> 16;
         HEAP8[$4 + 27 | 0] = $0 >>> 24;
         break label$20;
        }
        label$22: {
         if (!(jsvIsStringEqual(HEAP32[$4 + 12 >> 2], 107774) & 1)) {
          $0 = HEAPU8[$4 + 24 | 0] | HEAPU8[$4 + 25 | 0] << 8 | (HEAPU8[$4 + 26 | 0] << 16 | HEAPU8[$4 + 27 | 0] << 24) | 512;
          HEAP8[$4 + 24 | 0] = $0;
          HEAP8[$4 + 25 | 0] = $0 >>> 8;
          HEAP8[$4 + 26 | 0] = $0 >>> 16;
          HEAP8[$4 + 27 | 0] = $0 >>> 24;
          break label$22;
         }
         label$24: {
          if (!(jsvIsStringEqual(HEAP32[$4 + 12 >> 2], 103996) & 1)) {
           $0 = HEAPU8[$4 + 24 | 0] | HEAPU8[$4 + 25 | 0] << 8 | (HEAPU8[$4 + 26 | 0] << 16 | HEAPU8[$4 + 27 | 0] << 24) | 640;
           HEAP8[$4 + 24 | 0] = $0;
           HEAP8[$4 + 25 | 0] = $0 >>> 8;
           HEAP8[$4 + 26 | 0] = $0 >>> 16;
           HEAP8[$4 + 27 | 0] = $0 >>> 24;
           break label$24;
          }
          jsWarn(100067, 0);
         }
        }
       }
      }
     }
    }
    jsvUnLock(HEAP32[$4 + 12 >> 2]);
   }
  }
  lcdInit_ArrayBuffer($4 + 16 | 0);
  graphicsSetVarInitial($4 + 16 | 0);
  HEAP32[$4 + 108 >> 2] = HEAP32[$4 + 88 >> 2];
 }
 __stack_pointer = $4 + 112 | 0;
 return HEAP32[$4 + 108 >> 2];
}

function jsvCopy($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer + -64 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 56 >> 2] = $0;
 HEAP8[$2 + 55 | 0] = $1;
 label$1: {
  if (jsvIsFlatString(HEAP32[$2 + 56 >> 2]) & 1) {
   HEAP32[$2 + 60 >> 2] = jsvNewFromStringVarComplete(HEAP32[$2 + 56 >> 2]);
   break label$1;
  }
  $0 = HEAP32[$2 + 56 >> 2];
  HEAP32[$2 + 48 >> 2] = jsvNewWithFlags((HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 255);
  if (!HEAP32[$2 + 48 >> 2]) {
   HEAP32[$2 + 60 >> 2] = 0;
   break label$1;
  }
  label$4: {
   if (!(jsvIsStringExt(HEAP32[$2 + 56 >> 2]) & 1)) {
    $0 = 1;
    label$6: {
     if (jsvIsBasicString(HEAP32[$2 + 56 >> 2]) & 1) {
      break label$6;
     }
     $0 = 1;
     if (jsvIsNativeString(HEAP32[$2 + 56 >> 2]) & 1) {
      break label$6;
     }
     $0 = 1;
     if (jsvIsFlashString(HEAP32[$2 + 56 >> 2]) & 1) {
      break label$6;
     }
     $0 = jsvIsNativeFunction(HEAP32[$2 + 56 >> 2]);
    }
    HEAP8[$2 + 47 | 0] = $0 & 1;
    __memcpy(HEAP32[$2 + 48 >> 2], HEAP32[$2 + 56 >> 2], HEAP8[$2 + 47 | 0] & 1 ? 8 : 4);
    if (jsvIsNativeFunction(HEAP32[$2 + 56 >> 2]) & 1) {
     jsvSetFirstChild(HEAP32[$2 + 48 >> 2], 0);
    }
    label$8: {
     if (HEAP8[$2 + 47 | 0] & 1) {
      break label$8;
     }
    }
    break label$4;
   }
   $3 = HEAP32[$2 + 56 >> 2];
   $1 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
   $4 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
   $0 = $1;
   $1 = HEAP32[$2 + 48 >> 2];
   HEAP8[$1 | 0] = $0;
   HEAP8[$1 + 1 | 0] = $0 >>> 8;
   HEAP8[$1 + 2 | 0] = $0 >>> 16;
   HEAP8[$1 + 3 | 0] = $0 >>> 24;
   HEAP8[$1 + 4 | 0] = $4;
   HEAP8[$1 + 5 | 0] = $4 >>> 8;
   HEAP8[$1 + 6 | 0] = $4 >>> 16;
   HEAP8[$1 + 7 | 0] = $4 >>> 24;
   HEAP8[$1 + 8 | 0] = HEAPU8[$3 + 8 | 0];
  }
  label$9: {
   if (!(HEAP8[$2 + 55 | 0] & 1)) {
    break label$9;
   }
   if (!(jsvIsName(HEAP32[$2 + 56 >> 2]) & 1)) {
    break label$9;
   }
   if (jsvGetFirstChild(HEAP32[$2 + 56 >> 2]) & 65535) {
    label$11: {
     if (jsvIsNameWithValue(HEAP32[$2 + 56 >> 2]) & 1) {
      jsvSetFirstChild(HEAP32[$2 + 48 >> 2], jsvGetFirstChild(HEAP32[$2 + 56 >> 2]) & 65535);
      break label$11;
     }
     HEAP32[$2 + 40 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$2 + 56 >> 2]) & 65535);
     HEAP32[$2 + 36 >> 2] = jsvRef(jsvCopy(HEAP32[$2 + 40 >> 2], 1));
     jsvUnLock(HEAP32[$2 + 40 >> 2]);
     if (HEAP32[$2 + 36 >> 2]) {
      jsvSetFirstChild(HEAP32[$2 + 48 >> 2], jsvGetRef(HEAP32[$2 + 36 >> 2]) & 65535);
      jsvUnLock(HEAP32[$2 + 36 >> 2]);
     }
    }
   }
  }
  label$14: {
   if (jsvHasStringExt(HEAP32[$2 + 56 >> 2]) & 1) {
    HEAP32[$2 + 56 >> 2] = jsvLockAgain(HEAP32[$2 + 56 >> 2]);
    HEAP32[$2 + 32 >> 2] = jsvLockAgain(HEAP32[$2 + 48 >> 2]);
    while (1) {
     if (jsvGetLastChild(HEAP32[$2 + 56 >> 2]) & 65535) {
      HEAP32[$2 + 28 >> 2] = jsvLock(jsvGetLastChild(HEAP32[$2 + 56 >> 2]) & 65535);
      label$18: {
       if (jsvIsStringExt(HEAP32[$2 + 28 >> 2]) & 1) {
        $0 = HEAP32[$2 + 28 >> 2];
        HEAP32[$2 + 24 >> 2] = jsvNewWithFlags((HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 255);
        if (HEAP32[$2 + 24 >> 2]) {
         $3 = HEAP32[$2 + 28 >> 2];
         $4 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
         $1 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
         $0 = $4;
         $4 = HEAP32[$2 + 24 >> 2];
         HEAP8[$4 | 0] = $0;
         HEAP8[$4 + 1 | 0] = $0 >>> 8;
         HEAP8[$4 + 2 | 0] = $0 >>> 16;
         HEAP8[$4 + 3 | 0] = $0 >>> 24;
         HEAP8[$4 + 4 | 0] = $1;
         HEAP8[$4 + 5 | 0] = $1 >>> 8;
         HEAP8[$4 + 6 | 0] = $1 >>> 16;
         HEAP8[$4 + 7 | 0] = $1 >>> 24;
         HEAP8[$4 + 8 | 0] = HEAPU8[$3 + 8 | 0];
         jsvSetLastChild(HEAP32[$2 + 32 >> 2], jsvGetRef(HEAP32[$2 + 24 >> 2]) & 65535);
        }
        jsvUnLock2(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 32 >> 2]);
        HEAP32[$2 + 56 >> 2] = HEAP32[$2 + 28 >> 2];
        HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 24 >> 2];
        break label$18;
       }
       HEAP32[$2 + 20 >> 2] = jsvCopy(HEAP32[$2 + 28 >> 2], 1);
       if (HEAP32[$2 + 20 >> 2]) {
        jsvSetLastChild(HEAP32[$2 + 32 >> 2], jsvGetRef(jsvRef(HEAP32[$2 + 20 >> 2])) & 65535);
        jsvUnLock(HEAP32[$2 + 20 >> 2]);
       }
       jsvUnLock3(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 32 >> 2], HEAP32[$2 + 28 >> 2]);
       HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 48 >> 2];
       break label$1;
      }
      continue;
     }
     break;
    }
    jsvUnLock2(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 32 >> 2]);
    break label$14;
   }
   if (jsvHasChildren(HEAP32[$2 + 56 >> 2]) & 1 & (HEAP8[$2 + 55 | 0] & 1)) {
    HEAP16[$2 + 18 >> 1] = jsvGetFirstChild(HEAP32[$2 + 56 >> 2]);
    while (1) {
     if (HEAPU16[$2 + 18 >> 1]) {
      HEAP32[$2 + 12 >> 2] = jsvLock(HEAPU16[$2 + 18 >> 1]);
      HEAP32[$2 + 8 >> 2] = jsvCopyNameOnly(HEAP32[$2 + 12 >> 2], 1, 1);
      if (HEAP32[$2 + 8 >> 2]) {
       jsvAddName(HEAP32[$2 + 48 >> 2], HEAP32[$2 + 8 >> 2]);
       jsvUnLock(HEAP32[$2 + 8 >> 2]);
      }
      HEAP16[$2 + 18 >> 1] = jsvGetNextSibling(HEAP32[$2 + 12 >> 2]);
      jsvUnLock(HEAP32[$2 + 12 >> 2]);
      continue;
     }
     break;
    }
   }
  }
  HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 48 >> 2];
 }
 __stack_pointer = $2 - -64 | 0;
 return HEAP32[$2 + 60 >> 2];
}

function jswGetSymbolListForObject($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (jsvIsNativeFunction(HEAP32[$1 + 8 >> 2]) & 1) {
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 27) {
    HEAP32[$1 + 12 >> 2] = 140032;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 28) {
    HEAP32[$1 + 12 >> 2] = 140059;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 29) {
    HEAP32[$1 + 12 >> 2] = 140068;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 30) {
    HEAP32[$1 + 12 >> 2] = 140077;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 31) {
    HEAP32[$1 + 12 >> 2] = 140086;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 32) {
    HEAP32[$1 + 12 >> 2] = 140104;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 11) {
    HEAP32[$1 + 12 >> 2] = 140140;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 33) {
    HEAP32[$1 + 12 >> 2] = 140203;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 34) {
    HEAP32[$1 + 12 >> 2] = 140212;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 35) {
    HEAP32[$1 + 12 >> 2] = 140221;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 36) {
    HEAP32[$1 + 12 >> 2] = 140248;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 37) {
    HEAP32[$1 + 12 >> 2] = 140284;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 38) {
    HEAP32[$1 + 12 >> 2] = 140293;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 39) {
    HEAP32[$1 + 12 >> 2] = 140302;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 40) {
    HEAP32[$1 + 12 >> 2] = 140311;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 41) {
    HEAP32[$1 + 12 >> 2] = 140320;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 42) {
    HEAP32[$1 + 12 >> 2] = 140329;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 19) {
    HEAP32[$1 + 12 >> 2] = 140347;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 20) {
    HEAP32[$1 + 12 >> 2] = 140365;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 43) {
    HEAP32[$1 + 12 >> 2] = 140383;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 22) {
    HEAP32[$1 + 12 >> 2] = 140401;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 23) {
    HEAP32[$1 + 12 >> 2] = 140419;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 44) {
    HEAP32[$1 + 12 >> 2] = 140446;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 25) {
    HEAP32[$1 + 12 >> 2] = 140464;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 45) {
    HEAP32[$1 + 12 >> 2] = 140473;
    break label$1;
   }
  }
  if (HEAP32[$1 + 8 >> 2] == HEAP32[46747]) {
   HEAP32[$1 + 12 >> 2] = 140050;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function tflite__reference_ops__AveragePool_28tflite__PoolParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = Math_fround(0);
 $5 = __stack_pointer - 144 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 140 >> 2] = $0;
 HEAP32[$5 + 136 >> 2] = $1;
 HEAP32[$5 + 132 >> 2] = $2;
 HEAP32[$5 + 128 >> 2] = $3;
 HEAP32[$5 + 124 >> 2] = $4;
 label$1: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$5 + 136 >> 2]) | 0) != 4) {
   break label$1;
  }
 }
 label$2: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$5 + 128 >> 2]) | 0) != 4) {
   break label$2;
  }
 }
 HEAP32[$5 + 120 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 136 >> 2], 0, HEAP32[$5 + 128 >> 2], 0);
 HEAP32[$5 + 116 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 136 >> 2], 3, HEAP32[$5 + 128 >> 2], 3);
 HEAP32[$5 + 112 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 136 >> 2], 1);
 HEAP32[$5 + 108 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 136 >> 2], 2);
 HEAP32[$5 + 104 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 128 >> 2], 1);
 HEAP32[$5 + 100 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 128 >> 2], 2);
 HEAP32[$5 + 96 >> 2] = HEAP32[HEAP32[$5 + 140 >> 2] + 12 >> 2];
 HEAP32[$5 + 92 >> 2] = HEAP32[HEAP32[$5 + 140 >> 2] + 16 >> 2];
 HEAP32[$5 + 88 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 88 >> 2] < HEAP32[$5 + 120 >> 2]) {
   HEAP32[$5 + 84 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 84 >> 2] < HEAP32[$5 + 104 >> 2]) {
     HEAP32[$5 + 80 >> 2] = 0;
     while (1) {
      if (HEAP32[$5 + 80 >> 2] < HEAP32[$5 + 100 >> 2]) {
       HEAP32[$5 + 76 >> 2] = 0;
       while (1) {
        if (HEAP32[$5 + 76 >> 2] < HEAP32[$5 + 116 >> 2]) {
         HEAP32[$5 + 72 >> 2] = Math_imul(HEAP32[$5 + 80 >> 2], HEAP32[$5 + 92 >> 2]) - HEAP16[HEAP32[$5 + 140 >> 2] + 2 >> 1];
         HEAP32[$5 + 68 >> 2] = Math_imul(HEAP32[$5 + 84 >> 2], HEAP32[$5 + 96 >> 2]) - HEAP16[HEAP32[$5 + 140 >> 2] + 4 >> 1];
         HEAP32[$5 + 60 >> 2] = 0;
         HEAP32[$5 + 56 >> 2] = 0 - HEAP32[$5 + 72 >> 2];
         HEAP32[$5 + 64 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($5 + 60 | 0, $5 + 56 | 0) >> 2];
         $0 = HEAP32[$5 + 140 >> 2];
         HEAP32[$5 + 48 >> 2] = HEAP32[$5 + 108 >> 2] - HEAP32[$5 + 72 >> 2];
         HEAP32[$5 + 52 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($0 + 24 | 0, $5 + 48 | 0) >> 2];
         HEAP32[$5 + 40 >> 2] = 0;
         HEAP32[$5 + 36 >> 2] = 0 - HEAP32[$5 + 68 >> 2];
         HEAP32[$5 + 44 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($5 + 40 | 0, $5 + 36 | 0) >> 2];
         $0 = HEAP32[$5 + 140 >> 2];
         HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 112 >> 2] - HEAP32[$5 + 68 >> 2];
         HEAP32[$5 + 32 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($0 + 20 | 0, $5 + 28 | 0) >> 2];
         HEAPF32[$5 + 24 >> 2] = 0;
         HEAPF32[$5 + 20 >> 2] = 0;
         HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 44 >> 2];
         while (1) {
          if (HEAP32[$5 + 16 >> 2] < HEAP32[$5 + 32 >> 2]) {
           HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 64 >> 2];
           while (1) {
            if (HEAP32[$5 + 12 >> 2] < HEAP32[$5 + 52 >> 2]) {
             HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 72 >> 2] + HEAP32[$5 + 12 >> 2];
             HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 68 >> 2] + HEAP32[$5 + 16 >> 2];
             $0 = HEAP32[$5 + 132 >> 2] + (tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$5 + 136 >> 2], HEAP32[$5 + 88 >> 2], HEAP32[$5 + 4 >> 2], HEAP32[$5 + 8 >> 2], HEAP32[$5 + 76 >> 2]) << 2) | 0;
             HEAPF32[$5 + 24 >> 2] = HEAPF32[$5 + 24 >> 2] + HEAPF32[$0 >> 2];
             HEAPF32[$5 + 20 >> 2] = HEAPF32[$5 + 20 >> 2] + Math_fround(1);
             HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 12 >> 2] + 1;
             continue;
            }
            break;
           }
           HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] + 1;
           continue;
          }
          break;
         }
         HEAPF32[$5 >> 2] = HEAPF32[$5 + 24 >> 2] / HEAPF32[$5 + 20 >> 2];
         $6 = float_20tflite__ActivationFunctionWithMinMax_float__28float_2c_20float_2c_20float_29(HEAPF32[$5 >> 2], HEAPF32[HEAP32[$5 + 140 >> 2] + 36 >> 2], HEAPF32[HEAP32[$5 + 140 >> 2] + 40 >> 2]);
         HEAPF32[HEAP32[$5 + 124 >> 2] + (tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$5 + 128 >> 2], HEAP32[$5 + 88 >> 2], HEAP32[$5 + 84 >> 2], HEAP32[$5 + 80 >> 2], HEAP32[$5 + 76 >> 2]) << 2) >> 2] = $6;
         HEAP32[$5 + 76 >> 2] = HEAP32[$5 + 76 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$5 + 80 >> 2] = HEAP32[$5 + 80 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$5 + 84 >> 2] = HEAP32[$5 + 84 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 88 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $5 + 144 | 0;
}

function jsvIterateBufferCallback($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 256 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 248 >> 2] = $0;
 HEAP32[$3 + 244 >> 2] = $1;
 HEAP32[$3 + 240 >> 2] = $2;
 HEAP8[$3 + 239 | 0] = 1;
 label$1: {
  label$2: {
   if (jsvIsNumeric(HEAP32[$3 + 248 >> 2]) & 1) {
    HEAP8[$3 + 238 | 0] = jsvGetInteger(HEAP32[$3 + 248 >> 2]);
    FUNCTION_TABLE[HEAP32[$3 + 244 >> 2]]($3 + 238 | 0, 1, HEAP32[$3 + 240 >> 2]);
    break label$2;
   }
   label$4: {
    if (jsvIsObject(HEAP32[$3 + 248 >> 2]) & 1) {
     HEAP32[$3 + 232 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 248 >> 2], 103118);
     if (jsvIsFunction(HEAP32[$3 + 232 >> 2]) & 1) {
      HEAP32[$3 + 228 >> 2] = jspExecuteFunction(HEAP32[$3 + 232 >> 2], 0, 0, 0);
      jsvUnLock(HEAP32[$3 + 232 >> 2]);
      if (HEAP32[$3 + 228 >> 2]) {
       HEAP8[$3 + 227 | 0] = jsvIterateBufferCallback(HEAP32[$3 + 228 >> 2], HEAP32[$3 + 244 >> 2], HEAP32[$3 + 240 >> 2]) & 1;
       jsvUnLock(HEAP32[$3 + 228 >> 2]);
       HEAP8[$3 + 255 | 0] = HEAP8[$3 + 227 | 0] & 1;
       break label$1;
      }
      HEAP8[$3 + 255 | 0] = 1;
      break label$1;
     }
     jsvUnLock(HEAP32[$3 + 232 >> 2]);
     HEAP32[$3 + 220 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 248 >> 2], 97544);
     HEAP32[$3 + 216 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 248 >> 2], 107892);
     label$8: {
      label$9: {
       if (!HEAP32[$3 + 220 >> 2] | !HEAP32[$3 + 216 >> 2]) {
        break label$9;
       }
       if (!(jsvIsNumeric(HEAP32[$3 + 220 >> 2]) & 1)) {
        break label$9;
       }
       HEAP32[$3 + 212 >> 2] = jsvGetInteger(HEAP32[$3 + 220 >> 2]);
       while (1) {
        $0 = 0;
        if (HEAP8[$3 + 239 | 0] & 1) {
         $0 = HEAP32[$3 + 212 >> 2];
         HEAP32[$3 + 212 >> 2] = $0 - 1;
         $0 = ($0 | 0) > 0;
        }
        if ($0) {
         HEAP8[$3 + 239 | 0] = jsvIterateBufferCallback(HEAP32[$3 + 216 >> 2], HEAP32[$3 + 244 >> 2], HEAP32[$3 + 240 >> 2]) & 1;
         continue;
        }
        break;
       }
       break label$8;
      }
      HEAP32[$3 >> 2] = HEAP32[$3 + 248 >> 2];
      jsExceptionHere(3, 103142, $3);
      HEAP8[$3 + 239 | 0] = 0;
     }
     jsvUnLock2(HEAP32[$3 + 220 >> 2], HEAP32[$3 + 216 >> 2]);
     break label$4;
    }
    label$13: {
     if (jsvIsString(HEAP32[$3 + 248 >> 2]) & 1) {
      jsvStringIteratorNew($3 + 176 | 0, HEAP32[$3 + 248 >> 2], 0);
      while (1) {
       $0 = 0;
       if (jsvStringIteratorHasChar_2($3 + 176 | 0) & 1) {
        $0 = HEAPU8[$3 + 239 | 0];
       }
       if ($0 & 1) {
        jsvStringIteratorGetPtrAndNext($3 + 176 | 0, $3 + 172 | 0, $3 + 168 | 0);
        FUNCTION_TABLE[HEAP32[$3 + 244 >> 2]](HEAP32[$3 + 172 >> 2], HEAP32[$3 + 168 >> 2], HEAP32[$3 + 240 >> 2]);
        continue;
       }
       break;
      }
      jsvStringIteratorFree_2($3 + 176 | 0);
      break label$13;
     }
     label$18: {
      if (jsvIsArrayBuffer(HEAP32[$3 + 248 >> 2]) & 1) {
       jsvArrayBufferIteratorNew($3 + 112 | 0, HEAP32[$3 + 248 >> 2], 0);
       label$20: {
        if (!(HEAPU8[$3 + 148 | 0] & 16 | (HEAPU8[$3 + 148 | 0] & 15) != 1)) {
         HEAP32[$3 + 108 >> 2] = $3 + 112;
         HEAP32[$3 + 104 >> 2] = jsvGetArrayBufferLength(HEAP32[$3 + 248 >> 2]);
         while (1) {
          if (HEAP32[$3 + 104 >> 2]) {
           jsvStringIteratorGetPtrAndNext(HEAP32[$3 + 108 >> 2], $3 + 100 | 0, $3 + 96 | 0);
           if (HEAPU32[$3 + 96 >> 2] > HEAPU32[$3 + 104 >> 2]) {
            HEAP32[$3 + 96 >> 2] = HEAP32[$3 + 104 >> 2];
           }
           FUNCTION_TABLE[HEAP32[$3 + 244 >> 2]](HEAP32[$3 + 100 >> 2], HEAP32[$3 + 96 >> 2], HEAP32[$3 + 240 >> 2]);
           HEAP32[$3 + 104 >> 2] = HEAP32[$3 + 104 >> 2] - HEAP32[$3 + 96 >> 2];
           continue;
          }
          break;
         }
         break label$20;
        }
        while (1) {
         if (jsvArrayBufferIteratorHasElement($3 + 112 | 0) & 1) {
          HEAP8[$3 + 95 | 0] = jsvArrayBufferIteratorGetIntegerValue($3 + 112 | 0);
          FUNCTION_TABLE[HEAP32[$3 + 244 >> 2]]($3 + 95 | 0, 1, HEAP32[$3 + 240 >> 2]);
          jsvArrayBufferIteratorNext($3 + 112 | 0);
          continue;
         }
         break;
        }
       }
       jsvArrayBufferIteratorFree($3 + 112 | 0);
       break label$18;
      }
      label$27: {
       if (jsvIsIterable(HEAP32[$3 + 248 >> 2]) & 1) {
        jsvIteratorNew($3 + 32 | 0, HEAP32[$3 + 248 >> 2], 1);
        while (1) {
         $0 = 0;
         if (jsvIteratorHasElement($3 + 32 | 0) & 1) {
          $0 = HEAPU8[$3 + 239 | 0];
         }
         if ($0 & 1) {
          HEAP32[$3 + 28 >> 2] = jsvIteratorGetValue($3 + 32 | 0);
          HEAP8[$3 + 239 | 0] = jsvIterateBufferCallback(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 244 >> 2], HEAP32[$3 + 240 >> 2]) & 1;
          jsvUnLock(HEAP32[$3 + 28 >> 2]);
          jsvIteratorNext($3 + 32 | 0);
          continue;
         }
         break;
        }
        jsvIteratorFree($3 + 32 | 0);
        break label$27;
       }
       HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 248 >> 2];
       jsExceptionHere(3, 99073, $3 + 16 | 0);
       HEAP8[$3 + 239 | 0] = 0;
      }
     }
    }
   }
  }
  HEAP8[$3 + 255 | 0] = HEAP8[$3 + 239 | 0] & 1;
 }
 __stack_pointer = $3 + 256 | 0;
 return HEAP8[$3 + 255 | 0] & 1;
}

function __rem_pio2($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 $7 = __stack_pointer - 48 | 0;
 __stack_pointer = $7;
 wasm2js_scratch_store_f64(+$0);
 $4 = wasm2js_scratch_load_i32(1) | 0;
 $11 = wasm2js_scratch_load_i32(0) | 0;
 label$1: {
  label$2: {
   $3 = $4;
   $8 = $4 & 2147483647;
   label$3: {
    if ($8 >>> 0 <= 1074752122) {
     if (($3 & 1048575) == 598523) {
      break label$3;
     }
     if ($8 >>> 0 <= 1073928572) {
      if (($4 | 0) > 0 | ($4 | 0) >= 0) {
       $0 = $0 + -1.5707963267341256;
       $2 = $0 + -6077100506506192e-26;
       HEAPF64[$1 >> 3] = $2;
       HEAPF64[$1 + 8 >> 3] = $0 - $2 + -6077100506506192e-26;
       $3 = 1;
       break label$1;
      }
      $0 = $0 + 1.5707963267341256;
      $2 = $0 + 6077100506506192e-26;
      HEAPF64[$1 >> 3] = $2;
      HEAPF64[$1 + 8 >> 3] = $0 - $2 + 6077100506506192e-26;
      $3 = -1;
      break label$1;
     }
     if (($4 | 0) > 0 | ($4 | 0) >= 0) {
      $0 = $0 + -3.1415926534682512;
      $2 = $0 + -1.2154201013012384e-10;
      HEAPF64[$1 >> 3] = $2;
      HEAPF64[$1 + 8 >> 3] = $0 - $2 + -1.2154201013012384e-10;
      $3 = 2;
      break label$1;
     }
     $0 = $0 + 3.1415926534682512;
     $2 = $0 + 1.2154201013012384e-10;
     HEAPF64[$1 >> 3] = $2;
     HEAPF64[$1 + 8 >> 3] = $0 - $2 + 1.2154201013012384e-10;
     $3 = -2;
     break label$1;
    }
    if ($8 >>> 0 <= 1075594811) {
     if ($8 >>> 0 <= 1075183036) {
      if (($8 | 0) == 1074977148) {
       break label$3;
      }
      if (($4 | 0) > 0 | ($4 | 0) >= 0) {
       $0 = $0 + -4.712388980202377;
       $2 = $0 + -1.8231301519518578e-10;
       HEAPF64[$1 >> 3] = $2;
       HEAPF64[$1 + 8 >> 3] = $0 - $2 + -1.8231301519518578e-10;
       $3 = 3;
       break label$1;
      }
      $0 = $0 + 4.712388980202377;
      $2 = $0 + 1.8231301519518578e-10;
      HEAPF64[$1 >> 3] = $2;
      HEAPF64[$1 + 8 >> 3] = $0 - $2 + 1.8231301519518578e-10;
      $3 = -3;
      break label$1;
     }
     if (($8 | 0) == 1075388923) {
      break label$3;
     }
     if (($4 | 0) > 0 | ($4 | 0) >= 0) {
      $0 = $0 + -6.2831853069365025;
      $2 = $0 + -2.430840202602477e-10;
      HEAPF64[$1 >> 3] = $2;
      HEAPF64[$1 + 8 >> 3] = $0 - $2 + -2.430840202602477e-10;
      $3 = 4;
      break label$1;
     }
     $0 = $0 + 6.2831853069365025;
     $2 = $0 + 2.430840202602477e-10;
     HEAPF64[$1 >> 3] = $2;
     HEAPF64[$1 + 8 >> 3] = $0 - $2 + 2.430840202602477e-10;
     $3 = -4;
     break label$1;
    }
    if ($8 >>> 0 > 1094263290) {
     break label$2;
    }
   }
   $2 = $0 * .6366197723675814 + 6755399441055744 + -6755399441055744;
   $6 = $0 + $2 * -1.5707963267341256;
   $10 = $2 * 6077100506506192e-26;
   $12 = $6 - $10;
   $9 = $12 < -.7853981633974483;
   if (Math_abs($2) < 2147483648) {
    $3 = ~~$2;
   } else {
    $3 = -2147483648;
   }
   label$14: {
    if ($9) {
     $3 = $3 - 1 | 0;
     $2 = $2 + -1;
     $10 = $2 * 6077100506506192e-26;
     $6 = $0 + $2 * -1.5707963267341256;
     break label$14;
    }
    if (!($12 > .7853981633974483)) {
     break label$14;
    }
    $3 = $3 + 1 | 0;
    $2 = $2 + 1;
    $10 = $2 * 6077100506506192e-26;
    $6 = $0 + $2 * -1.5707963267341256;
   }
   $0 = $6 - $10;
   HEAPF64[$1 >> 3] = $0;
   wasm2js_scratch_store_f64(+$0);
   $5 = wasm2js_scratch_load_i32(1) | 0;
   wasm2js_scratch_load_i32(0) | 0;
   $9 = $8 >>> 20 | 0;
   label$16: {
    if (($9 - ($5 >>> 20 & 2047) | 0) < 17) {
     break label$16;
    }
    $0 = $2 * 6077100506303966e-26;
    $12 = $6 - $0;
    $10 = $2 * 20222662487959506e-37 - ($6 - $12 - $0);
    $0 = $12 - $10;
    HEAPF64[$1 >> 3] = $0;
    wasm2js_scratch_store_f64(+$0);
    $5 = wasm2js_scratch_load_i32(1) | 0;
    wasm2js_scratch_load_i32(0) | 0;
    if (($9 - ($5 >>> 20 & 2047) | 0) < 50) {
     $6 = $12;
     break label$16;
    }
    $0 = $2 * 20222662487111665e-37;
    $6 = $12 - $0;
    $10 = $2 * 84784276603689e-45 - ($12 - $6 - $0);
    $0 = $6 - $10;
    HEAPF64[$1 >> 3] = $0;
   }
   HEAPF64[$1 + 8 >> 3] = $6 - $0 - $10;
   break label$1;
  }
  if ($8 >>> 0 >= 2146435072) {
   $0 = $0 - $0;
   HEAPF64[$1 >> 3] = $0;
   HEAPF64[$1 + 8 >> 3] = $0;
   $3 = 0;
   break label$1;
  }
  $5 = $4 & 1048575;
  wasm2js_scratch_store_i32(0, $11 | 0);
  $5 = $5 | 1096810496;
  wasm2js_scratch_store_i32(1, $5 | 0);
  $0 = +wasm2js_scratch_load_f64();
  $3 = 0;
  $9 = 1;
  while (1) {
   $3 = ($7 + 16 | 0) + ($3 << 3) | 0;
   if (Math_abs($0) < 2147483648) {
    $5 = ~~$0;
   } else {
    $5 = -2147483648;
   }
   $2 = +($5 | 0);
   HEAPF64[$3 >> 3] = $2;
   $0 = ($0 - $2) * 16777216;
   $3 = 1;
   $5 = $9 & 1;
   $9 = 0;
   if ($5) {
    continue;
   }
   break;
  }
  HEAPF64[$7 + 32 >> 3] = $0;
  $3 = 2;
  while (1) {
   $9 = $3;
   $3 = $3 - 1 | 0;
   if (HEAPF64[($7 + 16 | 0) + ($9 << 3) >> 3] == 0) {
    continue;
   }
   break;
  }
  $3 = __rem_pio2_large($7 + 16 | 0, $7, ($8 >>> 20 | 0) - 1046 | 0, $9 + 1 | 0, 1);
  $0 = HEAPF64[$7 >> 3];
  if (($4 | 0) < 0) {
   HEAPF64[$1 >> 3] = -$0;
   HEAPF64[$1 + 8 >> 3] = -HEAPF64[$7 + 8 >> 3];
   $3 = 0 - $3 | 0;
   break label$1;
  }
  HEAPF64[$1 >> 3] = $0;
  HEAPF64[$1 + 8 >> 3] = HEAPF64[$7 + 8 >> 3];
 }
 __stack_pointer = $7 + 48 | 0;
 return $3;
}

function terminalSendChar($0) {
 var $1 = 0;
 $1 = __stack_pointer - 176 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 175 | 0] = $0;
 label$1: {
  if (!HEAP8[343500]) {
   if (HEAP8[$1 + 175 | 0] == 8) {
    if (HEAPU8[343498]) {
     HEAP8[343498] = HEAPU8[343498] - 1;
    }
    break label$1;
   }
   label$5: {
    if (HEAP8[$1 + 175 | 0] == 10) {
     HEAP8[343498] = 0;
     HEAP8[153876] = HEAPU8[153876] + 1;
     while (1) {
      if (HEAPU8[153876] >= 30) {
       terminalScroll();
       continue;
      }
      break;
     }
     break label$5;
    }
    label$9: {
     if (HEAP8[$1 + 175 | 0] == 13) {
      HEAP8[343498] = 0;
      break label$9;
     }
     label$11: {
      if (HEAP8[$1 + 175 | 0] == 27) {
       HEAP8[343500] = 27;
       break label$11;
      }
      if (!(HEAP8[$1 + 175 | 0] == 19 | HEAP8[$1 + 175 | 0] == 17)) {
       if (terminalGetGFX($1 + 96 | 0) & 1) {
        HEAP16[$1 + 94 >> 1] = Math_imul(HEAPU8[343498], 6);
        HEAP16[$1 + 92 >> 1] = ((HEAPU8[$1 + 110 | 0] | HEAPU8[$1 + 111 | 0] << 8) + (HEAPU8[153876] << 3) | 0) - 240;
        HEAP32[$1 + 88 >> 2] = HEAPU8[$1 + 113 | 0] | HEAPU8[$1 + 114 | 0] << 8 | (HEAPU8[$1 + 115 | 0] << 16 | HEAPU8[$1 + 116 | 0] << 24);
        HEAP32[$1 + 84 >> 2] = HEAPU8[$1 + 117 | 0] | HEAPU8[$1 + 118 | 0] << 8 | (HEAPU8[$1 + 119 | 0] << 16 | HEAPU8[$1 + 120 | 0] << 24);
        $0 = HEAPU8[189412] | HEAPU8[189413] << 8;
        HEAP8[$1 + 113 | 0] = $0;
        HEAP8[$1 + 114 | 0] = $0 >>> 8;
        HEAP8[$1 + 115 | 0] = $0 >>> 16;
        HEAP8[$1 + 116 | 0] = $0 >>> 24;
        $0 = HEAPU8[189414] | HEAPU8[189415] << 8;
        HEAP8[$1 + 117 | 0] = $0;
        HEAP8[$1 + 118 | 0] = $0 >>> 8;
        HEAP8[$1 + 119 | 0] = $0 >>> 16;
        HEAP8[$1 + 120 | 0] = $0 >>> 24;
        graphicsDrawChar6x8($1 + 96 | 0, HEAP16[$1 + 94 >> 1], HEAP16[$1 + 92 >> 1], HEAP8[$1 + 175 | 0], 1, 1, 1);
        $0 = HEAP32[$1 + 88 >> 2];
        HEAP8[$1 + 113 | 0] = $0;
        HEAP8[$1 + 114 | 0] = $0 >>> 8;
        HEAP8[$1 + 115 | 0] = $0 >>> 16;
        HEAP8[$1 + 116 | 0] = $0 >>> 24;
        $0 = HEAP32[$1 + 84 >> 2];
        HEAP8[$1 + 117 | 0] = $0;
        HEAP8[$1 + 118 | 0] = $0 >>> 8;
        HEAP8[$1 + 119 | 0] = $0 >>> 16;
        HEAP8[$1 + 120 | 0] = $0 >>> 24;
        terminalSetGFX($1 + 96 | 0);
       }
       if (HEAPU8[343498] < 255) {
        HEAP8[343498] = HEAPU8[343498] + 1;
       }
      }
     }
    }
   }
   break label$1;
  }
  label$17: {
   if (HEAP8[343500] == 27) {
    if (HEAP8[343501] == 91) {
     if (HEAP8[343502] == 63) {
      if (HEAP8[343503] == 55) {
       terminalControlCharsReset();
       break label$17;
      }
      label$22: {
       if (HEAP8[$1 + 175 | 0] == 55) {
        HEAP8[343503] = 55;
        break label$22;
       }
       terminalControlCharsReset();
      }
      break label$17;
     }
     label$24: {
      if (HEAP8[$1 + 175 | 0] == 63) {
       HEAP8[343502] = 63;
       break label$24;
      }
      terminalControlCharsReset();
      label$26: {
       label$27: {
        switch (HEAP8[$1 + 175 | 0] - 65 | 0) {
        case 0:
         if (HEAPU8[153876]) {
          HEAP8[153876] = HEAPU8[153876] - 1;
         }
         break label$26;

        case 1:
         HEAP8[153876] = HEAPU8[153876] + 1;
         while (1) {
          if (HEAPU8[153876] >= 30) {
           terminalScroll();
           continue;
          }
          break;
         }
         ;
         break label$26;

        case 2:
         if (HEAPU8[343498] < 255) {
          HEAP8[343498] = HEAPU8[343498] + 1;
         }
         break label$26;

        case 3:
         if (HEAPU8[343498]) {
          HEAP8[343498] = HEAPU8[343498] - 1;
         }
         break label$26;

        case 9:
         break label$27;

        default:
         break label$26;
        }
       }
       if (terminalGetGFX($1 + 8 | 0) & 1) {
        HEAP16[$1 + 6 >> 1] = Math_imul(HEAPU8[343498], 6);
        HEAP16[$1 + 4 >> 1] = ((HEAPU8[$1 + 22 | 0] | HEAPU8[$1 + 23 | 0] << 8) + (HEAPU8[153876] << 3) | 0) - 240;
        if ((HEAPU8[$1 + 16 | 0] | HEAPU8[$1 + 17 | 0] << 8 | (HEAPU8[$1 + 18 | 0] << 16 | HEAPU8[$1 + 19 | 0] << 24)) & 16) {
         $0 = HEAPU8[$1 + 22 | 0] | HEAPU8[$1 + 23 | 0] << 8;
        } else {
         $0 = HEAPU8[$1 + 20 | 0] | HEAPU8[$1 + 21 | 0] << 8;
        }
        HEAP16[$1 + 2 >> 1] = $0;
        if ((HEAPU8[$1 + 16 | 0] | HEAPU8[$1 + 17 | 0] << 8 | (HEAPU8[$1 + 18 | 0] << 16 | HEAPU8[$1 + 19 | 0] << 24)) & 16) {
         $0 = HEAPU8[$1 + 20 | 0] | HEAPU8[$1 + 21 | 0] << 8;
        } else {
         $0 = HEAPU8[$1 + 22 | 0] | HEAPU8[$1 + 23 | 0] << 8;
        }
        HEAP16[$1 >> 1] = $0;
        graphicsFillRect($1 + 8 | 0, HEAP16[$1 + 6 >> 1], HEAP16[$1 + 4 >> 1], HEAP16[$1 + 2 >> 1] - 1 | 0, HEAP16[$1 + 4 >> 1] + 7 | 0, 0);
        graphicsFillRect($1 + 8 | 0, 0, HEAP16[$1 + 4 >> 1] + 8 | 0, HEAP16[$1 + 2 >> 1] - 1 | 0, HEAP16[$1 >> 1] - 1 | 0, 0);
        terminalSetGFX($1 + 8 | 0);
       }
      }
     }
     break label$17;
    }
    label$42: {
     if (HEAP8[$1 + 175 | 0] == 91) {
      HEAP8[343501] = 91;
      break label$42;
     }
     terminalControlCharsReset();
    }
    break label$17;
   }
   terminalControlCharsReset();
  }
 }
 __stack_pointer = $1 + 176 | 0;
}

function jswrap_storage_open($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 256 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 248 >> 2] = $0;
 HEAP32[$2 + 244 >> 2] = $1;
 HEAP8[$2 + 243 | 0] = 0;
 label$1: {
  label$2: {
   if (jsvIsStringEqual(HEAP32[$2 + 244 >> 2], 101598) & 1) {
    HEAP8[$2 + 243 | 0] = 114;
    break label$2;
   }
   label$4: {
    if (jsvIsStringEqual(HEAP32[$2 + 244 >> 2], 97016) & 1) {
     HEAP8[$2 + 243 | 0] = 119;
     break label$4;
    }
    label$6: {
     if (jsvIsStringEqual(HEAP32[$2 + 244 >> 2], 107912) & 1) {
      HEAP8[$2 + 243 | 0] = 97;
      break label$6;
     }
     HEAP32[$2 + 64 >> 2] = HEAP32[$2 + 244 >> 2];
     jsExceptionHere(1, 103280, $2 - -64 | 0);
     HEAP32[$2 + 252 >> 2] = 0;
     break label$1;
    }
   }
  }
  HEAP32[$2 + 236 >> 2] = jspNewObject(0, 105110);
  if (!HEAP32[$2 + 236 >> 2]) {
   HEAP32[$2 + 252 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 232 >> 2] = 1;
  HEAP32[$2 + 228 >> 2] = jsvNewFromStringVar(HEAP32[$2 + 248 >> 2], 0, 28);
  jsfNameFromVar($2 + 200 | 0, HEAP32[$2 + 228 >> 2]);
  HEAP32[$2 + 196 >> 2] = 27;
  while (1) {
   $0 = 0;
   $0 = HEAP32[$2 + 196 >> 2] ? !HEAP8[(HEAP32[$2 + 196 >> 2] + $2 | 0) + 199 | 0] : $0;
   if ($0) {
    HEAP32[$2 + 196 >> 2] = HEAP32[$2 + 196 >> 2] - 1;
    continue;
   }
   break;
  }
  HEAP8[HEAP32[$2 + 196 >> 2] + ($2 + 200 | 0) | 0] = HEAP32[$2 + 232 >> 2];
  jsvObjectSetChildAndUnLock(HEAP32[$2 + 236 >> 2], 105033, HEAP32[$2 + 228 >> 2]);
  HEAP32[$2 + 192 >> 2] = 0;
  HEAP32[$2 + 56 >> 2] = HEAP32[$2 + 224 >> 2];
  $0 = HEAP32[$2 + 220 >> 2];
  $1 = HEAP32[$2 + 216 >> 2];
  HEAP32[$2 + 48 >> 2] = $1;
  HEAP32[$2 + 52 >> 2] = $0;
  $1 = HEAP32[$2 + 212 >> 2];
  $0 = HEAP32[$2 + 208 >> 2];
  HEAP32[$2 + 40 >> 2] = $0;
  HEAP32[$2 + 44 >> 2] = $1;
  $0 = HEAP32[$2 + 204 >> 2];
  $1 = HEAP32[$2 + 200 >> 2];
  HEAP32[$2 + 32 >> 2] = $1;
  HEAP32[$2 + 36 >> 2] = $0;
  HEAP32[$2 + 156 >> 2] = jsfFindFile($2 + 32 | 0, $2 + 160 | 0);
  if (HEAP32[$2 + 156 >> 2] ? HEAP8[$2 + 243 | 0] == 119 : 0) {
   jswrap_storagefile_erase(HEAP32[$2 + 236 >> 2]);
   HEAP32[$2 + 156 >> 2] = 0;
  }
  label$14: {
   if (HEAP32[$2 + 156 >> 2]) {
    $0 = jsfGetFileSize($2 + 160 | 0);
    break label$14;
   }
   $0 = 0;
  }
  HEAP32[$2 + 152 >> 2] = $0;
  if (HEAP8[$2 + 243 | 0] == 97) {
   HEAP8[$2 + 151 | 0] = 255;
   if (HEAP32[$2 + 156 >> 2]) {
    jshFlashRead($2 + 151 | 0, (HEAP32[$2 + 156 >> 2] + jsfGetFileSize($2 + 160 | 0) | 0) - 1 | 0, 1);
   }
   while (1) {
    $0 = 0;
    label$19: {
     if (!HEAP32[$2 + 156 >> 2]) {
      break label$19;
     }
     $0 = 0;
     if (HEAPU8[$2 + 151 | 0] == 255) {
      break label$19;
     }
     $0 = HEAP32[$2 + 232 >> 2] < 255;
    }
    if ($0) {
     HEAP32[$2 + 232 >> 2] = HEAP32[$2 + 232 >> 2] + 1;
     HEAP8[HEAP32[$2 + 196 >> 2] + ($2 + 200 | 0) | 0] = HEAP32[$2 + 232 >> 2];
     HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 224 >> 2];
     $1 = HEAP32[$2 + 220 >> 2];
     $0 = HEAP32[$2 + 216 >> 2];
     HEAP32[$2 + 16 >> 2] = $0;
     HEAP32[$2 + 20 >> 2] = $1;
     $0 = HEAP32[$2 + 212 >> 2];
     $1 = HEAP32[$2 + 208 >> 2];
     HEAP32[$2 + 8 >> 2] = $1;
     HEAP32[$2 + 12 >> 2] = $0;
     $1 = HEAP32[$2 + 204 >> 2];
     $0 = HEAP32[$2 + 200 >> 2];
     HEAP32[$2 >> 2] = $0;
     HEAP32[$2 + 4 >> 2] = $1;
     HEAP32[$2 + 156 >> 2] = jsfFindFile($2, $2 + 160 | 0);
     label$21: {
      if (HEAP32[$2 + 156 >> 2]) {
       HEAP32[$2 + 152 >> 2] = jsfGetFileSize($2 + 160 | 0);
       jshFlashRead($2 + 151 | 0, (HEAP32[$2 + 156 >> 2] + HEAP32[$2 + 152 >> 2] | 0) - 1 | 0, 1);
       break label$21;
      }
      HEAP32[$2 + 152 >> 2] = 0;
     }
     continue;
    }
    break;
   }
   if (HEAP32[$2 + 156 >> 2]) {
    HEAP8[$2 + 79 | 0] = 0;
    while (1) {
     label$25: {
      if (!((HEAPU8[$2 + 79 | 0] ^ -1) & 1)) {
       break label$25;
      }
      HEAP32[$2 + 72 >> 2] = HEAP32[$2 + 152 >> 2] - HEAP32[$2 + 192 >> 2];
      if (HEAP32[$2 + 72 >> 2] <= 0) {
       HEAP8[$2 + 79 | 0] = 1;
       break label$25;
      }
      if (HEAP32[$2 + 72 >> 2] > 64) {
       HEAP32[$2 + 72 >> 2] = 64;
      }
      jshFlashRead($2 + 80 | 0, HEAP32[$2 + 156 >> 2] + HEAP32[$2 + 192 >> 2] | 0, HEAP32[$2 + 72 >> 2]);
      HEAP32[$2 + 68 >> 2] = 0;
      while (1) {
       if (HEAP32[$2 + 68 >> 2] < HEAP32[$2 + 72 >> 2]) {
        if (HEAP8[HEAP32[$2 + 68 >> 2] + ($2 + 80 | 0) | 0] == -1) {
         HEAP32[$2 + 72 >> 2] = HEAP32[$2 + 68 >> 2];
         HEAP8[$2 + 79 | 0] = 1;
        } else {
         HEAP32[$2 + 68 >> 2] = HEAP32[$2 + 68 >> 2] + 1;
         continue;
        }
       }
       break;
      }
      HEAP32[$2 + 192 >> 2] = HEAP32[$2 + 72 >> 2] + HEAP32[$2 + 192 >> 2];
      continue;
     }
     break;
    }
   }
  }
  label$32: {
   if (HEAP8[$2 + 243 | 0] != 114) {
    break label$32;
   }
  }
  jsvObjectSetChildAndUnLock(HEAP32[$2 + 236 >> 2], 103079, jsvNewFromInteger(HEAP32[$2 + 232 >> 2]));
  jsvObjectSetChildAndUnLock(HEAP32[$2 + 236 >> 2], 98034, jsvNewFromInteger(HEAP32[$2 + 192 >> 2]));
  jsvObjectSetChildAndUnLock(HEAP32[$2 + 236 >> 2], 105433, jsvNewFromInteger(HEAP8[$2 + 243 | 0]));
  HEAP32[$2 + 252 >> 2] = HEAP32[$2 + 236 >> 2];
 }
 __stack_pointer = $2 + 256 | 0;
 return HEAP32[$2 + 252 >> 2];
}

function tflite__reference_ops__MaxPool_28tflite__PoolParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = Math_fround(0);
 $5 = __stack_pointer - 144 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 140 >> 2] = $0;
 HEAP32[$5 + 136 >> 2] = $1;
 HEAP32[$5 + 132 >> 2] = $2;
 HEAP32[$5 + 128 >> 2] = $3;
 HEAP32[$5 + 124 >> 2] = $4;
 label$1: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$5 + 136 >> 2]) | 0) != 4) {
   break label$1;
  }
 }
 label$2: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$5 + 128 >> 2]) | 0) != 4) {
   break label$2;
  }
 }
 HEAP32[$5 + 120 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 136 >> 2], 0, HEAP32[$5 + 128 >> 2], 0);
 HEAP32[$5 + 116 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 136 >> 2], 3, HEAP32[$5 + 128 >> 2], 3);
 HEAP32[$5 + 112 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 136 >> 2], 1);
 HEAP32[$5 + 108 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 136 >> 2], 2);
 HEAP32[$5 + 104 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 128 >> 2], 1);
 HEAP32[$5 + 100 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 128 >> 2], 2);
 HEAP32[$5 + 96 >> 2] = HEAP32[HEAP32[$5 + 140 >> 2] + 12 >> 2];
 HEAP32[$5 + 92 >> 2] = HEAP32[HEAP32[$5 + 140 >> 2] + 16 >> 2];
 HEAP32[$5 + 88 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 88 >> 2] < HEAP32[$5 + 120 >> 2]) {
   HEAP32[$5 + 84 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 84 >> 2] < HEAP32[$5 + 104 >> 2]) {
     HEAP32[$5 + 80 >> 2] = 0;
     while (1) {
      if (HEAP32[$5 + 80 >> 2] < HEAP32[$5 + 100 >> 2]) {
       HEAP32[$5 + 76 >> 2] = 0;
       while (1) {
        if (HEAP32[$5 + 76 >> 2] < HEAP32[$5 + 116 >> 2]) {
         HEAP32[$5 + 72 >> 2] = Math_imul(HEAP32[$5 + 80 >> 2], HEAP32[$5 + 92 >> 2]) - HEAP16[HEAP32[$5 + 140 >> 2] + 2 >> 1];
         HEAP32[$5 + 68 >> 2] = Math_imul(HEAP32[$5 + 84 >> 2], HEAP32[$5 + 96 >> 2]) - HEAP16[HEAP32[$5 + 140 >> 2] + 4 >> 1];
         HEAP32[$5 + 60 >> 2] = 0;
         HEAP32[$5 + 56 >> 2] = 0 - HEAP32[$5 + 72 >> 2];
         HEAP32[$5 + 64 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($5 + 60 | 0, $5 + 56 | 0) >> 2];
         $0 = HEAP32[$5 + 140 >> 2];
         HEAP32[$5 + 48 >> 2] = HEAP32[$5 + 108 >> 2] - HEAP32[$5 + 72 >> 2];
         HEAP32[$5 + 52 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($0 + 24 | 0, $5 + 48 | 0) >> 2];
         HEAP32[$5 + 40 >> 2] = 0;
         HEAP32[$5 + 36 >> 2] = 0 - HEAP32[$5 + 68 >> 2];
         HEAP32[$5 + 44 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($5 + 40 | 0, $5 + 36 | 0) >> 2];
         $0 = HEAP32[$5 + 140 >> 2];
         HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 112 >> 2] - HEAP32[$5 + 68 >> 2];
         HEAP32[$5 + 32 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($0 + 20 | 0, $5 + 28 | 0) >> 2];
         HEAPF32[$5 + 24 >> 2] = std____2__numeric_limits_float___lowest_28_29();
         HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 44 >> 2];
         while (1) {
          if (HEAP32[$5 + 20 >> 2] < HEAP32[$5 + 32 >> 2]) {
           HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 64 >> 2];
           while (1) {
            if (HEAP32[$5 + 16 >> 2] < HEAP32[$5 + 52 >> 2]) {
             HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 72 >> 2] + HEAP32[$5 + 16 >> 2];
             HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 68 >> 2] + HEAP32[$5 + 20 >> 2];
             HEAPF32[$5 + 24 >> 2] = HEAPF32[float_20const__20std____2__max_float__28float_20const__2c_20float_20const__29($5 + 24 | 0, HEAP32[$5 + 132 >> 2] + (tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$5 + 136 >> 2], HEAP32[$5 + 88 >> 2], HEAP32[$5 + 8 >> 2], HEAP32[$5 + 12 >> 2], HEAP32[$5 + 76 >> 2]) << 2) | 0) >> 2];
             HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] + 1;
             continue;
            }
            break;
           }
           HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 20 >> 2] + 1;
           continue;
          }
          break;
         }
         $6 = float_20tflite__ActivationFunctionWithMinMax_float__28float_2c_20float_2c_20float_29(HEAPF32[$5 + 24 >> 2], HEAPF32[HEAP32[$5 + 140 >> 2] + 36 >> 2], HEAPF32[HEAP32[$5 + 140 >> 2] + 40 >> 2]);
         HEAPF32[HEAP32[$5 + 124 >> 2] + (tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$5 + 128 >> 2], HEAP32[$5 + 88 >> 2], HEAP32[$5 + 84 >> 2], HEAP32[$5 + 80 >> 2], HEAP32[$5 + 76 >> 2]) << 2) >> 2] = $6;
         HEAP32[$5 + 76 >> 2] = HEAP32[$5 + 76 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$5 + 80 >> 2] = HEAP32[$5 + 80 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$5 + 84 >> 2] = HEAP32[$5 + 84 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 88 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $5 + 144 | 0;
}

function jspeFactorFunctionCall() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 80 | 0;
 __stack_pointer = $0;
 HEAP8[$0 + 75 | 0] = 0;
 label$1: {
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 184) {
   jslGetNextToken();
   HEAP8[$0 + 75 | 0] = 1;
   if (HEAP16[HEAP32[38615] + 2 >> 1] == 184) {
    jsExceptionHere(1, 105937, 0);
    jspSetError(0);
    HEAP32[$0 + 76 >> 2] = 0;
    break label$1;
   }
  }
  HEAP32[$0 + 68 >> 2] = 0;
  HEAP32[$0 + 64 >> 2] = 0;
  HEAP8[$0 + 63 | 0] = 0;
  label$4: {
   if (HEAP16[HEAP32[38615] + 2 >> 1] == 196) {
    jslGetNextToken();
    label$6: {
     if (jsvIsObject(HEAP32[46753]) & 1) {
      label$8: {
       if (!(!HEAP32[46754] | HEAP16[HEAP32[38615] + 2 >> 1] != 40)) {
        HEAP32[$0 + 56 >> 2] = jsvObjectGetChildIfExists(HEAP32[46754], 104794);
        break label$8;
       }
       HEAP32[$0 + 56 >> 2] = jsvObjectGetChildIfExists(HEAP32[46753], 107914);
      }
      label$10: {
       if (jsvIsObject(HEAP32[$0 + 56 >> 2]) & 1) {
        $1 = jsvObjectGetChildIfExists(HEAP32[$0 + 56 >> 2], 107914);
        break label$10;
       }
       $1 = 0;
      }
      HEAP32[$0 + 52 >> 2] = $1;
      jsvUnLock(HEAP32[$0 + 56 >> 2]);
      if (!HEAP32[$0 + 52 >> 2]) {
       jsExceptionHere(2, 100027, 0);
       HEAP32[$0 + 76 >> 2] = 0;
       break label$1;
      }
      label$13: {
       if (HEAP16[HEAP32[38615] + 2 >> 1] == 40) {
        HEAP32[$0 + 48 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 52 >> 2], 100982);
        jsvUnLock(HEAP32[$0 + 52 >> 2]);
        HEAP32[46754] = HEAP32[$0 + 48 >> 2];
        HEAP8[$0 + 63 | 0] = 1;
        HEAP32[$0 + 64 >> 2] = HEAP32[$0 + 48 >> 2];
        break label$13;
       }
       HEAP32[$0 + 64 >> 2] = HEAP32[$0 + 52 >> 2];
      }
      break label$6;
     }
     label$15: {
      if (jsvIsFunction(HEAP32[46753]) & 1) {
       HEAP32[$0 + 44 >> 2] = jsvObjectGetChildIfExists(HEAP32[46753], 104794);
       label$17: {
        if (jsvIsObject(HEAP32[$0 + 44 >> 2]) & 1) {
         $1 = jsvObjectGetChildIfExists(HEAP32[$0 + 44 >> 2], 107914);
         break label$17;
        }
        $1 = 0;
       }
       HEAP32[$0 + 40 >> 2] = $1;
       jsvUnLock(HEAP32[$0 + 44 >> 2]);
       if (!HEAP32[$0 + 40 >> 2]) {
        jsExceptionHere(2, 100027, 0);
        HEAP32[$0 + 76 >> 2] = 0;
        break label$1;
       }
       HEAP32[$0 + 36 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 40 >> 2], 100982);
       jsvUnLock(HEAP32[$0 + 40 >> 2]);
       HEAP32[$0 + 64 >> 2] = HEAP32[$0 + 36 >> 2];
       break label$15;
      }
      jsExceptionHere(2, 100027, 0);
      HEAP32[$0 + 76 >> 2] = 0;
      break label$1;
     }
    }
    HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 64 >> 2];
    HEAP32[$0 + 64 >> 2] = jspeFactorMember(HEAP32[$0 + 64 >> 2], $0 + 68 | 0);
    if (!(HEAP32[$0 + 68 >> 2] != HEAP32[$0 + 32 >> 2] ? HEAP32[$0 + 68 >> 2] : 0)) {
     jsvUnLock(HEAP32[$0 + 68 >> 2]);
     HEAP32[$0 + 68 >> 2] = jsvLockAgain(HEAP32[46753]);
    }
    break label$4;
   }
   HEAP32[$0 + 64 >> 2] = jspeFactorMember(jspeFactor(), $0 + 68 | 0);
  }
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 133) {
   jsExceptionHere(2, 106116, 0);
   jsvUnLock2(HEAP32[$0 + 64 >> 2], HEAP32[$0 + 68 >> 2]);
   HEAP32[$0 + 76 >> 2] = 0;
   break label$1;
  }
  while (1) {
   label$24: {
    if (HEAP16[HEAP32[38615] + 2 >> 1] != 40) {
     $1 = 0;
     if (!(HEAP8[$0 + 75 | 0] & 1)) {
      break label$24;
     }
     $1 = 0;
     if ((HEAP32[46755] & 63) != 1) {
      break label$24;
     }
    }
    $1 = jspIsInterrupted() ^ -1;
   }
   if ($1 & 1) {
    HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 64 >> 2];
    HEAP32[$0 + 24 >> 2] = jsvSkipName(HEAP32[$0 + 28 >> 2]);
    label$27: {
     if (!(!(HEAP8[$0 + 75 | 0] & 1) | (HEAP32[46755] & 63) != 1)) {
      HEAP8[$0 + 23 | 0] = HEAP16[HEAP32[38615] + 2 >> 1] == 40;
      HEAP32[$0 + 64 >> 2] = jspeConstruct(HEAP32[$0 + 24 >> 2], HEAP32[$0 + 28 >> 2], HEAP8[$0 + 23 | 0] & 1);
      HEAP8[$0 + 75 | 0] = 0;
      break label$27;
     }
     HEAP32[$0 + 64 >> 2] = jspeFunctionCall(HEAP32[$0 + 24 >> 2], HEAP32[$0 + 28 >> 2], HEAP32[$0 + 68 >> 2], 1, 0, 0);
    }
    jsvUnLock3(HEAP32[$0 + 28 >> 2], HEAP32[$0 + 24 >> 2], HEAP32[$0 + 68 >> 2]);
    HEAP32[$0 + 68 >> 2] = 0;
    HEAP32[$0 + 64 >> 2] = jspeFactorMember(HEAP32[$0 + 64 >> 2], $0 + 68 | 0);
    continue;
   }
   break;
  }
  if (HEAP8[$0 + 63 | 0] & 1) {
   HEAP32[46754] = 0;
  }
  label$30: {
   if (!HEAP32[$0 + 68 >> 2]) {
    break label$30;
   }
   if (!(jsvIsBasicName(HEAP32[$0 + 64 >> 2]) & 1)) {
    break label$30;
   }
   if (jsvIsNewChild(HEAP32[$0 + 64 >> 2]) & 1) {
    break label$30;
   }
   HEAP32[$0 + 16 >> 2] = jsvLockSafe(jsvGetFirstChild(HEAP32[$0 + 64 >> 2]) & 65535);
   if (jsvIsGetterOrSetter(HEAP32[$0 + 16 >> 2]) & 1) {
    HEAP32[$0 + 12 >> 2] = jsvCopyNameOnly(HEAP32[$0 + 64 >> 2], 0, 1);
    HEAP32[$0 + 8 >> 2] = jsvCreateNewChild(HEAP32[$0 + 68 >> 2], HEAP32[$0 + 12 >> 2], HEAP32[$0 + 16 >> 2]);
    jsvUnLock2(HEAP32[$0 + 12 >> 2], HEAP32[$0 + 64 >> 2]);
    HEAP32[$0 + 64 >> 2] = HEAP32[$0 + 8 >> 2];
   }
   jsvUnLock(HEAP32[$0 + 16 >> 2]);
  }
  jsvUnLock(HEAP32[$0 + 68 >> 2]);
  HEAP32[$0 + 76 >> 2] = HEAP32[$0 + 64 >> 2];
 }
 __stack_pointer = $0 + 80 | 0;
 return HEAP32[$0 + 76 >> 2];
}

function jsvGarbageCollect() {
 var $0 = 0, $1 = 0, $2 = 0;
 $0 = __stack_pointer - 48 | 0;
 __stack_pointer = $0;
 label$1: {
  if (HEAPU8[154466]) {
   HEAP32[$0 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP8[154466] = 2;
  HEAP16[$0 + 42 >> 1] = 1;
  while (1) {
   if (HEAPU16[$0 + 42 >> 1] <= 2500) {
    HEAP32[$0 + 36 >> 2] = jsvGetAddressOf(HEAPU16[$0 + 42 >> 1]);
    $1 = HEAP32[$0 + 36 >> 2];
    if ((HEAPU8[$1 + 11 | 0] | HEAPU8[$1 + 12 | 0] << 8) & 63) {
     $1 = HEAP32[$0 + 36 >> 2];
     $2 = HEAPU8[$1 + 11 | 0] | HEAPU8[$1 + 12 | 0] << 8 | 256;
     HEAP8[$1 + 11 | 0] = $2;
     HEAP8[$1 + 12 | 0] = $2 >>> 8;
     if (jsvIsFlatString(HEAP32[$0 + 36 >> 2]) & 1) {
      HEAP16[$0 + 42 >> 1] = HEAPU16[$0 + 42 >> 1] + jsvGetFlatStringBlocks(HEAP32[$0 + 36 >> 2]);
     }
    }
    HEAP16[$0 + 42 >> 1] = HEAPU16[$0 + 42 >> 1] + 1;
    continue;
   }
   break;
  }
  HEAP16[$0 + 42 >> 1] = 1;
  while (1) {
   if (HEAPU16[$0 + 42 >> 1] <= 2500) {
    HEAP32[$0 + 32 >> 2] = jsvGetAddressOf(HEAPU16[$0 + 42 >> 1]);
    $1 = HEAP32[$0 + 32 >> 2];
    label$9: {
     if (!((HEAPU8[$1 + 11 | 0] | HEAPU8[$1 + 12 | 0] << 8) & 256)) {
      break label$9;
     }
     if (!(jsvGetLocks(HEAP32[$0 + 32 >> 2]) & 255)) {
      break label$9;
     }
     if (!(jsvGarbageCollectMarkUsed(HEAP32[$0 + 32 >> 2]) & 1)) {
      HEAP8[154466] = 0;
      HEAP32[$0 + 44 >> 2] = 0;
      break label$1;
     }
    }
    if (jsvIsFlatString(HEAP32[$0 + 32 >> 2]) & 1) {
     HEAP16[$0 + 42 >> 1] = HEAPU16[$0 + 42 >> 1] + jsvGetFlatStringBlocks(HEAP32[$0 + 32 >> 2]);
    }
    HEAP16[$0 + 42 >> 1] = HEAPU16[$0 + 42 >> 1] + 1;
    continue;
   }
   break;
  }
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP16[77234] = 0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP16[$0 + 42 >> 1] = 1;
  while (1) {
   if (HEAPU16[$0 + 42 >> 1] <= 2500) {
    HEAP32[$0 + 20 >> 2] = jsvGetAddressOf(HEAPU16[$0 + 42 >> 1]);
    $1 = HEAP32[$0 + 20 >> 2];
    label$14: {
     if ((HEAPU8[$1 + 11 | 0] | HEAPU8[$1 + 12 | 0] << 8) & 256) {
      if (jsvIsFlatString(HEAP32[$0 + 20 >> 2]) & 1) {
       HEAP32[$0 + 16 >> 2] = jsvGetFlatStringBlocks(HEAP32[$0 + 20 >> 2]);
       HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 16 >> 2] + HEAP32[$0 + 28 >> 2];
       $1 = HEAP32[$0 + 20 >> 2];
       HEAP8[$1 + 11 | 0] = 0;
       HEAP8[$1 + 12 | 0] = 0;
       label$17: {
        if (HEAP32[$0 + 24 >> 2]) {
         jsvSetNextSibling(HEAP32[$0 + 24 >> 2], HEAPU16[$0 + 42 >> 1]);
         break label$17;
        }
        HEAP16[77234] = HEAPU16[$0 + 42 >> 1];
       }
       HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 20 >> 2];
       while (1) {
        $1 = HEAP32[$0 + 16 >> 2];
        HEAP32[$0 + 16 >> 2] = $1 - 1;
        if ($1) {
         HEAP16[$0 + 42 >> 1] = HEAPU16[$0 + 42 >> 1] + 1;
         HEAP32[$0 + 20 >> 2] = jsvGetAddressOf(HEAPU16[$0 + 42 >> 1]);
         $1 = HEAP32[$0 + 20 >> 2];
         HEAP8[$1 + 11 | 0] = 0;
         HEAP8[$1 + 12 | 0] = 0;
         label$21: {
          if (HEAP32[$0 + 24 >> 2]) {
           jsvSetNextSibling(HEAP32[$0 + 24 >> 2], HEAPU16[$0 + 42 >> 1]);
           break label$21;
          }
          HEAP16[77234] = HEAPU16[$0 + 42 >> 1];
         }
         HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 20 >> 2];
         continue;
        }
        break;
       }
       break label$14;
      }
      if (jsvHasSingleChild(HEAP32[$0 + 20 >> 2]) & 1) {
       HEAP16[$0 + 14 >> 1] = jsvGetFirstChild(HEAP32[$0 + 20 >> 2]);
       if (HEAPU16[$0 + 14 >> 1]) {
        HEAP32[$0 + 8 >> 2] = jsvGetAddressOf(HEAPU16[$0 + 14 >> 1]);
        $1 = HEAP32[$0 + 8 >> 2];
        label$25: {
         if (!(HEAPU8[$1 + 11 | 0] | HEAPU8[$1 + 12 | 0] << 8)) {
          break label$25;
         }
         $1 = HEAP32[$0 + 8 >> 2];
         if ((HEAPU8[$1 + 11 | 0] | HEAPU8[$1 + 12 | 0] << 8) & 256) {
          break label$25;
         }
         jsvUnRef(HEAP32[$0 + 8 >> 2]);
        }
       }
      }
      $1 = HEAP32[$0 + 20 >> 2];
      HEAP8[$1 + 11 | 0] = 0;
      HEAP8[$1 + 12 | 0] = 0;
      label$26: {
       if (HEAP32[$0 + 24 >> 2]) {
        jsvSetNextSibling(HEAP32[$0 + 24 >> 2], HEAPU16[$0 + 42 >> 1]);
        break label$26;
       }
       HEAP16[77234] = HEAPU16[$0 + 42 >> 1];
      }
      HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 20 >> 2];
      HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 28 >> 2] + 1;
      break label$14;
     }
     label$28: {
      if (jsvIsFlatString(HEAP32[$0 + 20 >> 2]) & 1) {
       HEAP16[$0 + 42 >> 1] = HEAPU16[$0 + 42 >> 1] + jsvGetFlatStringBlocks(HEAP32[$0 + 20 >> 2]);
       break label$28;
      }
      $1 = HEAP32[$0 + 20 >> 2];
      if (!(HEAPU8[$1 + 11 | 0] | HEAPU8[$1 + 12 | 0] << 8)) {
       label$31: {
        if (HEAP32[$0 + 24 >> 2]) {
         jsvSetNextSibling(HEAP32[$0 + 24 >> 2], HEAPU16[$0 + 42 >> 1]);
         break label$31;
        }
        HEAP16[77234] = HEAPU16[$0 + 42 >> 1];
       }
       HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 20 >> 2];
      }
     }
    }
    HEAP16[$0 + 42 >> 1] = HEAPU16[$0 + 42 >> 1] + 1;
    continue;
   }
   break;
  }
  if (HEAP32[$0 + 24 >> 2]) {
   jsvSetNextSibling(HEAP32[$0 + 24 >> 2], 0);
  }
  HEAP8[154466] = 0;
  HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 28 >> 2];
 }
 __stack_pointer = $0 + 48 | 0;
 return HEAP32[$0 + 44 >> 2];
}

function tflite__ops__micro__depthwise_conv__Prepare_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 160 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 152 >> 2] = $0;
 HEAP32[$2 + 148 >> 2] = $1;
 label$1: {
  if (!HEAP32[HEAP32[$2 + 148 >> 2] + 8 >> 2]) {
   break label$1;
  }
 }
 label$2: {
  if (!HEAP32[HEAP32[$2 + 148 >> 2] + 12 >> 2]) {
   break label$2;
  }
 }
 HEAP32[$2 + 144 >> 2] = HEAP32[HEAP32[$2 + 148 >> 2] + 12 >> 2];
 HEAP32[$2 + 140 >> 2] = HEAP32[HEAP32[$2 + 148 >> 2] + 8 >> 2];
 HEAP32[$2 + 136 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 152 >> 2], HEAP32[$2 + 148 >> 2], 0);
 HEAP32[$2 + 132 >> 2] = tflite__GetInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 152 >> 2], HEAP32[$2 + 148 >> 2], 0);
 HEAP32[$2 + 128 >> 2] = tflite__GetInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 152 >> 2], HEAP32[$2 + 148 >> 2], 1);
 HEAP32[$2 + 124 >> 2] = HEAP32[HEAP32[$2 + 132 >> 2] + 28 >> 2];
 HEAP32[$2 + 120 >> 2] = tflite__SizeOfDimension_28TfLiteTensor_20const__2c_20int_29(HEAP32[$2 + 132 >> 2], 2);
 HEAP32[$2 + 116 >> 2] = tflite__SizeOfDimension_28TfLiteTensor_20const__2c_20int_29(HEAP32[$2 + 132 >> 2], 1);
 HEAP32[$2 + 112 >> 2] = tflite__SizeOfDimension_28TfLiteTensor_20const__2c_20int_29(HEAP32[$2 + 128 >> 2], 2);
 HEAP32[$2 + 108 >> 2] = tflite__SizeOfDimension_28TfLiteTensor_20const__2c_20int_29(HEAP32[$2 + 128 >> 2], 1);
 HEAP32[$2 + 104 >> 2] = HEAP32[HEAP32[HEAP32[$2 + 128 >> 2] + 20 >> 2] + 16 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$2 + 152 >> 2] + 56 >> 2]](HEAP32[$2 + 152 >> 2], HEAP32[$2 + 104 >> 2] << 2) | 0;
 HEAP32[HEAP32[$2 + 140 >> 2] + 36 >> 2] = $0;
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$2 + 152 >> 2] + 56 >> 2]](HEAP32[$2 + 152 >> 2], HEAP32[$2 + 104 >> 2] << 2) | 0;
 HEAP32[HEAP32[$2 + 140 >> 2] + 40 >> 2] = $0;
 label$3: {
  if (HEAP32[HEAP32[$2 + 132 >> 2] + 28 >> 2] == 9) {
   if (HEAP32[HEAP32[$2 + 128 >> 2] >> 2] != 1) {
    $0 = HEAP32[HEAP32[$2 + 152 >> 2] + 20 >> 2];
    $1 = HEAP32[$2 + 152 >> 2];
    $3 = HEAP32[HEAP32[$2 + 128 >> 2] >> 2];
    HEAP32[$2 + 12 >> 2] = 1;
    HEAP32[$2 + 8 >> 2] = $3;
    HEAP32[$2 + 4 >> 2] = 102382;
    HEAP32[$2 >> 2] = 104939;
    FUNCTION_TABLE[$0 | 0]($1, 126505, $2);
    HEAP32[$2 + 156 >> 2] = 1;
    break label$3;
   }
   HEAP32[$2 + 100 >> 2] = HEAP32[HEAP32[$2 + 128 >> 2] + 4 >> 2];
   if (!HEAP32[$2 + 100 >> 2]) {
    $0 = HEAP32[HEAP32[$2 + 152 >> 2] + 20 >> 2];
    $1 = HEAP32[$2 + 152 >> 2];
    HEAP32[$2 + 80 >> 2] = 102362;
    FUNCTION_TABLE[$0 | 0]($1, 111890, $2 + 80 | 0);
    HEAP32[$2 + 156 >> 2] = 1;
    break label$3;
   }
   if (!HEAP32[HEAP32[$2 + 100 >> 2] >> 2]) {
    $0 = HEAP32[HEAP32[$2 + 152 >> 2] + 20 >> 2];
    $1 = HEAP32[$2 + 152 >> 2];
    HEAP32[$2 + 64 >> 2] = 105213;
    FUNCTION_TABLE[$0 | 0]($1, 111890, $2 - -64 | 0);
    HEAP32[$2 + 156 >> 2] = 1;
    break label$3;
   }
   if (!HEAP32[HEAP32[$2 + 100 >> 2] + 4 >> 2]) {
    $0 = HEAP32[HEAP32[$2 + 152 >> 2] + 20 >> 2];
    $1 = HEAP32[$2 + 152 >> 2];
    HEAP32[$2 + 48 >> 2] = 97646;
    FUNCTION_TABLE[$0 | 0]($1, 111890, $2 + 48 | 0);
    HEAP32[$2 + 156 >> 2] = 1;
    break label$3;
   }
   if (!(HEAP32[HEAP32[HEAP32[$2 + 100 >> 2] >> 2] >> 2] == 1 | HEAP32[HEAP32[HEAP32[$2 + 100 >> 2] >> 2] >> 2] == HEAP32[HEAP32[HEAP32[$2 + 128 >> 2] + 20 >> 2] + 16 >> 2])) {
    $0 = HEAP32[HEAP32[$2 + 152 >> 2] + 20 >> 2];
    $1 = HEAP32[$2 + 152 >> 2];
    HEAP32[$2 + 32 >> 2] = 108138;
    FUNCTION_TABLE[$0 | 0]($1, 111890, $2 + 32 | 0);
    HEAP32[$2 + 156 >> 2] = 1;
    break label$3;
   }
   if (HEAP32[HEAP32[HEAP32[$2 + 100 >> 2] >> 2] >> 2] != HEAP32[HEAP32[HEAP32[$2 + 100 >> 2] + 4 >> 2] >> 2]) {
    $0 = HEAP32[HEAP32[$2 + 152 >> 2] + 20 >> 2];
    $1 = HEAP32[$2 + 152 >> 2];
    $3 = HEAP32[HEAP32[HEAP32[$2 + 100 >> 2] >> 2] >> 2];
    HEAP32[$2 + 28 >> 2] = HEAP32[HEAP32[HEAP32[$2 + 100 >> 2] + 4 >> 2] >> 2];
    HEAP32[$2 + 24 >> 2] = $3;
    HEAP32[$2 + 20 >> 2] = 104176;
    HEAP32[$2 + 16 >> 2] = 104234;
    FUNCTION_TABLE[$0 | 0]($1, 126505, $2 + 16 | 0);
    HEAP32[$2 + 156 >> 2] = 1;
    break label$3;
   }
  }
  HEAP32[$2 + 96 >> 2] = tflite__ops__micro__depthwise_conv___28anonymous_20namespace_29__CalculateOpData_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteDepthwiseConvParams__2c_20int_2c_20int_2c_20int_2c_20int_2c_20TfLiteType_2c_20tflite__ops__micro__depthwise_conv___28anonymous_20namespace_29__OpData__29(HEAP32[$2 + 152 >> 2], HEAP32[$2 + 148 >> 2], HEAP32[$2 + 144 >> 2], HEAP32[$2 + 120 >> 2], HEAP32[$2 + 116 >> 2], HEAP32[$2 + 112 >> 2], HEAP32[$2 + 108 >> 2], HEAP32[$2 + 124 >> 2], HEAP32[$2 + 140 >> 2]);
  if (HEAP32[$2 + 96 >> 2]) {
   HEAP32[$2 + 156 >> 2] = HEAP32[$2 + 96 >> 2];
   break label$3;
  }
  HEAP32[HEAP32[$2 + 140 >> 2] + 16 >> 2] = HEAP32[HEAP32[$2 + 132 >> 2] + 12 >> 2];
  HEAP32[HEAP32[$2 + 140 >> 2] + 20 >> 2] = HEAP32[HEAP32[$2 + 128 >> 2] + 12 >> 2];
  HEAP32[HEAP32[$2 + 140 >> 2] + 24 >> 2] = HEAP32[HEAP32[$2 + 136 >> 2] + 12 >> 2];
  HEAP32[$2 + 156 >> 2] = 0;
 }
 __stack_pointer = $2 + 160 | 0;
 return HEAP32[$2 + 156 >> 2];
}

function graphicsDrawLineAA($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 112 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 108 >> 2] = $0;
 HEAP32[$5 + 104 >> 2] = $1;
 HEAP32[$5 + 100 >> 2] = $2;
 HEAP32[$5 + 96 >> 2] = $3;
 HEAP32[$5 + 92 >> 2] = $4;
 graphicsToDeviceCoordinates16x(HEAP32[$5 + 108 >> 2], $5 + 104 | 0, $5 + 100 | 0);
 graphicsToDeviceCoordinates16x(HEAP32[$5 + 108 >> 2], $5 + 96 | 0, $5 + 92 | 0);
 HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 104 >> 2] << 4;
 HEAP32[$5 + 84 >> 2] = HEAP32[$5 + 100 >> 2] << 4;
 HEAP32[$5 + 80 >> 2] = HEAP32[$5 + 96 >> 2] << 4;
 HEAP32[$5 + 76 >> 2] = HEAP32[$5 + 92 >> 2] << 4;
 HEAP8[$5 + 75 | 0] = (abs(HEAP32[$5 + 76 >> 2] - HEAP32[$5 + 84 >> 2] | 0) | 0) > (abs(HEAP32[$5 + 80 >> 2] - HEAP32[$5 + 88 >> 2] | 0) | 0);
 if (HEAP8[$5 + 75 | 0] & 1) {
  HEAP32[$5 + 68 >> 2] = HEAP32[$5 + 88 >> 2];
  HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 84 >> 2];
  HEAP32[$5 + 84 >> 2] = HEAP32[$5 + 68 >> 2];
  HEAP32[$5 + 68 >> 2] = HEAP32[$5 + 80 >> 2];
  HEAP32[$5 + 80 >> 2] = HEAP32[$5 + 76 >> 2];
  HEAP32[$5 + 76 >> 2] = HEAP32[$5 + 68 >> 2];
 }
 if (HEAP32[$5 + 88 >> 2] > HEAP32[$5 + 80 >> 2]) {
  HEAP32[$5 + 64 >> 2] = HEAP32[$5 + 88 >> 2];
  HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 80 >> 2];
  HEAP32[$5 + 80 >> 2] = HEAP32[$5 + 64 >> 2];
  HEAP32[$5 + 64 >> 2] = HEAP32[$5 + 84 >> 2];
  HEAP32[$5 + 84 >> 2] = HEAP32[$5 + 76 >> 2];
  HEAP32[$5 + 76 >> 2] = HEAP32[$5 + 64 >> 2];
 }
 HEAP32[$5 + 60 >> 2] = HEAP32[$5 + 80 >> 2] - HEAP32[$5 + 88 >> 2];
 HEAP32[$5 + 56 >> 2] = HEAP32[$5 + 76 >> 2] - HEAP32[$5 + 84 >> 2];
 if (HEAP32[$5 + 60 >> 2]) {
  $0 = (HEAP32[$5 + 56 >> 2] << 8) / HEAP32[$5 + 60 >> 2] | 0;
 } else {
  $0 = 256;
 }
 HEAP32[$5 + 52 >> 2] = $0;
 HEAP32[$5 + 48 >> 2] = HEAP32[$5 + 88 >> 2] & -256;
 HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 84 >> 2] + (Math_imul(HEAP32[$5 + 52 >> 2], HEAP32[$5 + 48 >> 2] - HEAP32[$5 + 88 >> 2] | 0) >> 8);
 HEAP32[$5 + 40 >> 2] = 255 - (HEAP32[$5 + 88 >> 2] & 255);
 HEAP32[$5 + 36 >> 2] = HEAP32[$5 + 48 >> 2] >> 8;
 HEAP32[$5 + 32 >> 2] = HEAP32[$5 + 44 >> 2] >> 8;
 HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 44 >> 2] & 255;
 label$5: {
  if (HEAP8[$5 + 75 | 0] & 1) {
   graphicsSetPixelDeviceBlended(HEAP32[$5 + 108 >> 2], HEAP32[$5 + 32 >> 2], HEAP32[$5 + 36 >> 2], Math_imul(HEAP32[$5 + 40 >> 2], 256 - HEAP32[$5 + 28 >> 2] | 0) >> 8);
   graphicsSetPixelDeviceBlended(HEAP32[$5 + 108 >> 2], HEAP32[$5 + 32 >> 2] + 1 | 0, HEAP32[$5 + 36 >> 2], Math_imul(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 40 >> 2]) >> 8);
   break label$5;
  }
  graphicsSetPixelDeviceBlended(HEAP32[$5 + 108 >> 2], HEAP32[$5 + 36 >> 2], HEAP32[$5 + 32 >> 2], Math_imul(HEAP32[$5 + 40 >> 2], 256 - HEAP32[$5 + 28 >> 2] | 0) >> 8);
  graphicsSetPixelDeviceBlended(HEAP32[$5 + 108 >> 2], HEAP32[$5 + 36 >> 2], HEAP32[$5 + 32 >> 2] + 1 | 0, Math_imul(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 40 >> 2]) >> 8);
 }
 HEAP32[$5 + 24 >> 2] = HEAP32[$5 + 44 >> 2] + HEAP32[$5 + 52 >> 2];
 HEAP32[$5 + 48 >> 2] = HEAP32[$5 + 80 >> 2] + 256 & -256;
 HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 76 >> 2] + (Math_imul(HEAP32[$5 + 52 >> 2], HEAP32[$5 + 48 >> 2] - HEAP32[$5 + 80 >> 2] | 0) >> 8);
 HEAP32[$5 + 40 >> 2] = HEAP32[$5 + 80 >> 2] + 256 & 255;
 HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 48 >> 2] >> 8;
 HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 44 >> 2] >> 8;
 HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 44 >> 2] & 255;
 label$7: {
  if (HEAP8[$5 + 75 | 0] & 1) {
   graphicsSetPixelDeviceBlended(HEAP32[$5 + 108 >> 2], HEAP32[$5 + 16 >> 2], HEAP32[$5 + 20 >> 2], Math_imul(HEAP32[$5 + 40 >> 2], 256 - HEAP32[$5 + 28 >> 2] | 0) >> 8);
   graphicsSetPixelDeviceBlended(HEAP32[$5 + 108 >> 2], HEAP32[$5 + 16 >> 2] + 1 | 0, HEAP32[$5 + 20 >> 2], Math_imul(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 40 >> 2]) >> 8);
   break label$7;
  }
  graphicsSetPixelDeviceBlended(HEAP32[$5 + 108 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], Math_imul(HEAP32[$5 + 40 >> 2], 256 - HEAP32[$5 + 28 >> 2] | 0) >> 8);
  graphicsSetPixelDeviceBlended(HEAP32[$5 + 108 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2] + 1 | 0, Math_imul(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 40 >> 2]) >> 8);
 }
 HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 36 >> 2] + 1;
 while (1) {
  if (HEAP32[$5 + 12 >> 2] < HEAP32[$5 + 20 >> 2]) {
   HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 24 >> 2] >> 8;
   HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 24 >> 2] & 255;
   label$11: {
    if (HEAP8[$5 + 75 | 0] & 1) {
     graphicsSetPixelDeviceBlended(HEAP32[$5 + 108 >> 2], HEAP32[$5 + 8 >> 2], HEAP32[$5 + 12 >> 2], 256 - HEAP32[$5 + 28 >> 2] | 0);
     graphicsSetPixelDeviceBlended(HEAP32[$5 + 108 >> 2], HEAP32[$5 + 8 >> 2] + 1 | 0, HEAP32[$5 + 12 >> 2], HEAP32[$5 + 28 >> 2]);
     break label$11;
    }
    graphicsSetPixelDeviceBlended(HEAP32[$5 + 108 >> 2], HEAP32[$5 + 12 >> 2], HEAP32[$5 + 8 >> 2], 256 - HEAP32[$5 + 28 >> 2] | 0);
    graphicsSetPixelDeviceBlended(HEAP32[$5 + 108 >> 2], HEAP32[$5 + 12 >> 2], HEAP32[$5 + 8 >> 2] + 1 | 0, HEAP32[$5 + 28 >> 2]);
   }
   HEAP32[$5 + 24 >> 2] = HEAP32[$5 + 52 >> 2] + HEAP32[$5 + 24 >> 2];
   HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $5 + 112 | 0;
}

function tflite__ops__micro__conv__Prepare_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 160 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 152 >> 2] = $0;
 HEAP32[$2 + 148 >> 2] = $1;
 label$1: {
  if (!HEAP32[HEAP32[$2 + 148 >> 2] + 8 >> 2]) {
   break label$1;
  }
 }
 label$2: {
  if (!HEAP32[HEAP32[$2 + 148 >> 2] + 12 >> 2]) {
   break label$2;
  }
 }
 HEAP32[$2 + 144 >> 2] = HEAP32[HEAP32[$2 + 148 >> 2] + 8 >> 2];
 HEAP32[$2 + 140 >> 2] = HEAP32[HEAP32[$2 + 148 >> 2] + 12 >> 2];
 HEAP32[$2 + 136 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 152 >> 2], HEAP32[$2 + 148 >> 2], 0);
 HEAP32[$2 + 132 >> 2] = tflite__GetInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 152 >> 2], HEAP32[$2 + 148 >> 2], 0);
 HEAP32[$2 + 128 >> 2] = tflite__GetInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 152 >> 2], HEAP32[$2 + 148 >> 2], 1);
 HEAP32[$2 + 124 >> 2] = HEAP32[HEAP32[HEAP32[$2 + 132 >> 2] + 20 >> 2] + 12 >> 2];
 HEAP32[$2 + 120 >> 2] = HEAP32[HEAP32[HEAP32[$2 + 132 >> 2] + 20 >> 2] + 8 >> 2];
 HEAP32[$2 + 116 >> 2] = HEAP32[HEAP32[HEAP32[$2 + 128 >> 2] + 20 >> 2] + 12 >> 2];
 HEAP32[$2 + 112 >> 2] = HEAP32[HEAP32[HEAP32[$2 + 128 >> 2] + 20 >> 2] + 8 >> 2];
 HEAP32[$2 + 108 >> 2] = HEAP32[HEAP32[HEAP32[$2 + 136 >> 2] + 20 >> 2] + 12 >> 2];
 HEAP32[$2 + 104 >> 2] = HEAP32[HEAP32[HEAP32[$2 + 136 >> 2] + 20 >> 2] + 8 >> 2];
 HEAP32[$2 + 100 >> 2] = HEAP32[HEAP32[HEAP32[$2 + 128 >> 2] + 20 >> 2] + 4 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$2 + 152 >> 2] + 56 >> 2]](HEAP32[$2 + 152 >> 2], HEAP32[$2 + 100 >> 2] << 2) | 0;
 HEAP32[HEAP32[$2 + 144 >> 2] + 36 >> 2] = $0;
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$2 + 152 >> 2] + 56 >> 2]](HEAP32[$2 + 152 >> 2], HEAP32[$2 + 100 >> 2] << 2) | 0;
 HEAP32[HEAP32[$2 + 144 >> 2] + 40 >> 2] = $0;
 label$3: {
  if (HEAP32[HEAP32[$2 + 132 >> 2] + 28 >> 2] == 9) {
   if (HEAP32[HEAP32[$2 + 128 >> 2] >> 2] != 1) {
    $0 = HEAP32[HEAP32[$2 + 152 >> 2] + 20 >> 2];
    $1 = HEAP32[$2 + 152 >> 2];
    $3 = HEAP32[HEAP32[$2 + 128 >> 2] >> 2];
    HEAP32[$2 + 12 >> 2] = 1;
    HEAP32[$2 + 8 >> 2] = $3;
    HEAP32[$2 + 4 >> 2] = 102382;
    HEAP32[$2 >> 2] = 104939;
    FUNCTION_TABLE[$0 | 0]($1, 126505, $2);
    HEAP32[$2 + 156 >> 2] = 1;
    break label$3;
   }
   HEAP32[$2 + 96 >> 2] = HEAP32[HEAP32[$2 + 128 >> 2] + 4 >> 2];
   if (!HEAP32[$2 + 96 >> 2]) {
    $0 = HEAP32[HEAP32[$2 + 152 >> 2] + 20 >> 2];
    $1 = HEAP32[$2 + 152 >> 2];
    HEAP32[$2 + 80 >> 2] = 102362;
    FUNCTION_TABLE[$0 | 0]($1, 111890, $2 + 80 | 0);
    HEAP32[$2 + 156 >> 2] = 1;
    break label$3;
   }
   if (!HEAP32[HEAP32[$2 + 96 >> 2] >> 2]) {
    $0 = HEAP32[HEAP32[$2 + 152 >> 2] + 20 >> 2];
    $1 = HEAP32[$2 + 152 >> 2];
    HEAP32[$2 + 64 >> 2] = 105213;
    FUNCTION_TABLE[$0 | 0]($1, 111890, $2 - -64 | 0);
    HEAP32[$2 + 156 >> 2] = 1;
    break label$3;
   }
   if (!HEAP32[HEAP32[$2 + 96 >> 2] + 4 >> 2]) {
    $0 = HEAP32[HEAP32[$2 + 152 >> 2] + 20 >> 2];
    $1 = HEAP32[$2 + 152 >> 2];
    HEAP32[$2 + 48 >> 2] = 97646;
    FUNCTION_TABLE[$0 | 0]($1, 111890, $2 + 48 | 0);
    HEAP32[$2 + 156 >> 2] = 1;
    break label$3;
   }
   if (!(HEAP32[HEAP32[HEAP32[$2 + 96 >> 2] >> 2] >> 2] == 1 | HEAP32[HEAP32[HEAP32[$2 + 96 >> 2] >> 2] >> 2] == HEAP32[HEAP32[HEAP32[$2 + 128 >> 2] + 20 >> 2] + 4 >> 2])) {
    $0 = HEAP32[HEAP32[$2 + 152 >> 2] + 20 >> 2];
    $1 = HEAP32[$2 + 152 >> 2];
    HEAP32[$2 + 32 >> 2] = 108017;
    FUNCTION_TABLE[$0 | 0]($1, 111890, $2 + 32 | 0);
    HEAP32[$2 + 156 >> 2] = 1;
    break label$3;
   }
   if (HEAP32[HEAP32[HEAP32[$2 + 96 >> 2] >> 2] >> 2] != HEAP32[HEAP32[HEAP32[$2 + 96 >> 2] + 4 >> 2] >> 2]) {
    $0 = HEAP32[HEAP32[$2 + 152 >> 2] + 20 >> 2];
    $1 = HEAP32[$2 + 152 >> 2];
    $3 = HEAP32[HEAP32[HEAP32[$2 + 96 >> 2] >> 2] >> 2];
    HEAP32[$2 + 28 >> 2] = HEAP32[HEAP32[HEAP32[$2 + 96 >> 2] + 4 >> 2] >> 2];
    HEAP32[$2 + 24 >> 2] = $3;
    HEAP32[$2 + 20 >> 2] = 104176;
    HEAP32[$2 + 16 >> 2] = 104234;
    FUNCTION_TABLE[$0 | 0]($1, 126505, $2 + 16 | 0);
    HEAP32[$2 + 156 >> 2] = 1;
    break label$3;
   }
  }
  HEAP32[$2 + 92 >> 2] = tflite__ops__micro__conv__CalculateOpData_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteConvParams_20const__2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20TfLiteType_2c_20tflite__ops__micro__conv__OpData__29(HEAP32[$2 + 152 >> 2], HEAP32[$2 + 148 >> 2], HEAP32[$2 + 140 >> 2], HEAP32[$2 + 124 >> 2], HEAP32[$2 + 120 >> 2], HEAP32[$2 + 116 >> 2], HEAP32[$2 + 112 >> 2], HEAP32[$2 + 108 >> 2], HEAP32[$2 + 104 >> 2], HEAP32[HEAP32[$2 + 132 >> 2] + 28 >> 2], HEAP32[$2 + 144 >> 2]);
  if (HEAP32[$2 + 92 >> 2]) {
   HEAP32[$2 + 156 >> 2] = HEAP32[$2 + 92 >> 2];
   break label$3;
  }
  HEAP32[HEAP32[$2 + 144 >> 2] + 16 >> 2] = HEAP32[HEAP32[$2 + 132 >> 2] + 12 >> 2];
  HEAP32[HEAP32[$2 + 144 >> 2] + 20 >> 2] = HEAP32[HEAP32[$2 + 128 >> 2] + 12 >> 2];
  HEAP32[HEAP32[$2 + 144 >> 2] + 24 >> 2] = HEAP32[HEAP32[$2 + 136 >> 2] + 12 >> 2];
  HEAP32[$2 + 156 >> 2] = 0;
 }
 __stack_pointer = $2 + 160 | 0;
 return HEAP32[$2 + 156 >> 2];
}

function utilTimerInsertTask($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 label$1: {
  if (utilTimerIsFull() & 1) {
   HEAP8[$3 + 31 | 0] = 0;
   break label$1;
  }
  if (!(HEAP8[188996] & 1)) {
   jshInterruptOff();
  }
  if (HEAP32[$3 + 20 >> 2]) {
   $0 = HEAP32[$3 + 24 >> 2];
   $1 = (HEAP32[HEAP32[$3 + 20 >> 2] >> 2] - HEAP32[47352] | 0) + (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) | 0;
   HEAP8[$0 | 0] = $1;
   HEAP8[$0 + 1 | 0] = $1 >>> 8;
   HEAP8[$0 + 2 | 0] = $1 >>> 16;
   HEAP8[$0 + 3 | 0] = $1 >>> 24;
  }
  HEAP8[$3 + 19 | 0] = HEAPU8[188994];
  while (1) {
   $0 = 0;
   if (HEAPU8[$3 + 19 | 0] != HEAPU8[188993]) {
    $0 = Math_imul(HEAPU8[$3 + 19 | 0], 25) + 189008 | 0;
    $1 = HEAP32[$3 + 24 >> 2];
    $0 = (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) < (HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24));
   }
   if ($0) {
    HEAP8[$3 + 19 | 0] = HEAPU8[$3 + 19 | 0] + 1 & 15;
    continue;
   }
   break;
  }
  HEAP8[$3 + 18 | 0] = HEAPU8[$3 + 19 | 0] == HEAPU8[188994];
  HEAP32[$3 + 12 >> 2] = HEAPU8[188993];
  while (1) {
   if (HEAP32[$3 + 12 >> 2] != HEAPU8[$3 + 19 | 0]) {
    HEAP8[$3 + 11 | 0] = HEAP32[$3 + 12 >> 2] + 15 & 15;
    $2 = Math_imul(HEAPU8[$3 + 11 | 0], 25) + 189008 | 0;
    $0 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
    $1 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
    $4 = $0;
    $5 = Math_imul(HEAP32[$3 + 12 >> 2], 25) + 189008 | 0;
    $0 = $5;
    HEAP8[$0 | 0] = $4;
    HEAP8[$0 + 1 | 0] = $4 >>> 8;
    HEAP8[$0 + 2 | 0] = $4 >>> 16;
    HEAP8[$0 + 3 | 0] = $4 >>> 24;
    HEAP8[$0 + 4 | 0] = $1;
    HEAP8[$0 + 5 | 0] = $1 >>> 8;
    HEAP8[$0 + 6 | 0] = $1 >>> 16;
    HEAP8[$0 + 7 | 0] = $1 >>> 24;
    HEAP8[$0 + 24 | 0] = HEAPU8[$2 + 24 | 0];
    $0 = HEAPU8[$2 + 20 | 0] | HEAPU8[$2 + 21 | 0] << 8 | (HEAPU8[$2 + 22 | 0] << 16 | HEAPU8[$2 + 23 | 0] << 24);
    $1 = HEAPU8[$2 + 16 | 0] | HEAPU8[$2 + 17 | 0] << 8 | (HEAPU8[$2 + 18 | 0] << 16 | HEAPU8[$2 + 19 | 0] << 24);
    $4 = $1;
    $1 = $5;
    HEAP8[$1 + 16 | 0] = $4;
    HEAP8[$1 + 17 | 0] = $4 >>> 8;
    HEAP8[$1 + 18 | 0] = $4 >>> 16;
    HEAP8[$1 + 19 | 0] = $4 >>> 24;
    HEAP8[$1 + 20 | 0] = $0;
    HEAP8[$1 + 21 | 0] = $0 >>> 8;
    HEAP8[$1 + 22 | 0] = $0 >>> 16;
    HEAP8[$1 + 23 | 0] = $0 >>> 24;
    $1 = HEAPU8[$2 + 12 | 0] | HEAPU8[$2 + 13 | 0] << 8 | (HEAPU8[$2 + 14 | 0] << 16 | HEAPU8[$2 + 15 | 0] << 24);
    $0 = HEAPU8[$2 + 8 | 0] | HEAPU8[$2 + 9 | 0] << 8 | (HEAPU8[$2 + 10 | 0] << 16 | HEAPU8[$2 + 11 | 0] << 24);
    $4 = $0;
    $0 = $5;
    HEAP8[$0 + 8 | 0] = $4;
    HEAP8[$0 + 9 | 0] = $4 >>> 8;
    HEAP8[$0 + 10 | 0] = $4 >>> 16;
    HEAP8[$0 + 11 | 0] = $4 >>> 24;
    HEAP8[$0 + 12 | 0] = $1;
    HEAP8[$0 + 13 | 0] = $1 >>> 8;
    HEAP8[$0 + 14 | 0] = $1 >>> 16;
    HEAP8[$0 + 15 | 0] = $1 >>> 24;
    HEAP32[$3 + 12 >> 2] = HEAPU8[$3 + 11 | 0];
    continue;
   }
   break;
  }
  $2 = HEAP32[$3 + 24 >> 2];
  $1 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
  $0 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
  $4 = $1;
  $5 = Math_imul(HEAPU8[$3 + 19 | 0], 25) + 189008 | 0;
  $1 = $5;
  HEAP8[$1 | 0] = $4;
  HEAP8[$1 + 1 | 0] = $4 >>> 8;
  HEAP8[$1 + 2 | 0] = $4 >>> 16;
  HEAP8[$1 + 3 | 0] = $4 >>> 24;
  HEAP8[$1 + 4 | 0] = $0;
  HEAP8[$1 + 5 | 0] = $0 >>> 8;
  HEAP8[$1 + 6 | 0] = $0 >>> 16;
  HEAP8[$1 + 7 | 0] = $0 >>> 24;
  HEAP8[$1 + 24 | 0] = HEAPU8[$2 + 24 | 0];
  $1 = HEAPU8[$2 + 20 | 0] | HEAPU8[$2 + 21 | 0] << 8 | (HEAPU8[$2 + 22 | 0] << 16 | HEAPU8[$2 + 23 | 0] << 24);
  $0 = HEAPU8[$2 + 16 | 0] | HEAPU8[$2 + 17 | 0] << 8 | (HEAPU8[$2 + 18 | 0] << 16 | HEAPU8[$2 + 19 | 0] << 24);
  $4 = $0;
  $0 = $5;
  HEAP8[$0 + 16 | 0] = $4;
  HEAP8[$0 + 17 | 0] = $4 >>> 8;
  HEAP8[$0 + 18 | 0] = $4 >>> 16;
  HEAP8[$0 + 19 | 0] = $4 >>> 24;
  HEAP8[$0 + 20 | 0] = $1;
  HEAP8[$0 + 21 | 0] = $1 >>> 8;
  HEAP8[$0 + 22 | 0] = $1 >>> 16;
  HEAP8[$0 + 23 | 0] = $1 >>> 24;
  $0 = HEAPU8[$2 + 12 | 0] | HEAPU8[$2 + 13 | 0] << 8 | (HEAPU8[$2 + 14 | 0] << 16 | HEAPU8[$2 + 15 | 0] << 24);
  $1 = HEAPU8[$2 + 8 | 0] | HEAPU8[$2 + 9 | 0] << 8 | (HEAPU8[$2 + 10 | 0] << 16 | HEAPU8[$2 + 11 | 0] << 24);
  $4 = $1;
  $1 = $5;
  HEAP8[$1 + 8 | 0] = $4;
  HEAP8[$1 + 9 | 0] = $4 >>> 8;
  HEAP8[$1 + 10 | 0] = $4 >>> 16;
  HEAP8[$1 + 11 | 0] = $4 >>> 24;
  HEAP8[$1 + 12 | 0] = $0;
  HEAP8[$1 + 13 | 0] = $0 >>> 8;
  HEAP8[$1 + 14 | 0] = $0 >>> 16;
  HEAP8[$1 + 15 | 0] = $0 >>> 24;
  HEAP8[188993] = HEAPU8[188993] + 1 & 15;
  if (!(HEAP8[$3 + 18 | 0] & 1 ? 0 : HEAP8[188995] & 1)) {
   HEAP8[188995] = 1;
   jstRestartUtilTimer();
  }
  if (!(HEAP8[188996] & 1)) {
   jshInterruptOn();
  }
  HEAP8[$3 + 31 | 0] = 1;
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP8[$3 + 31 | 0] & 1;
}

function _jslNewTokenisedStringFromLexer($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 128 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 124 >> 2] = $0;
 HEAP32[$4 + 120 >> 2] = $1;
 HEAP32[$4 + 116 >> 2] = $2;
 HEAP32[$4 + 112 >> 2] = $3;
 jslSeekToP(HEAP32[$4 + 116 >> 2]);
 HEAP8[$4 + 71 | 0] = HEAPU8[HEAP32[$4 + 116 >> 2] + 36 | 0];
 if (HEAP32[$4 + 124 >> 2]) {
  jsvStringIteratorClone($4 + 72 | 0, HEAP32[$4 + 116 >> 2]);
 }
 HEAP32[$4 + 64 >> 2] = 0;
 HEAP32[$4 + 60 >> 2] = 0;
 HEAP32[$4 + 56 >> 2] = 0;
 while (1) {
  $0 = 0;
  if (HEAP16[HEAP32[38615] + 2 >> 1]) {
   $0 = jsvStringIteratorGetIndex(HEAP32[38615] + 88 | 0) >>> 0 <= HEAP32[$4 + 112 >> 2] + 1 >>> 0;
  }
  if ($0) {
   if (jslPreserveSpaceBetweenTokens(HEAP32[$4 + 60 >> 2], HEAP16[HEAP32[38615] + 2 >> 1]) & 1) {
    HEAP32[$4 + 64 >> 2] = HEAP32[$4 + 64 >> 2] + 1;
    if (HEAP32[$4 + 124 >> 2]) {
     jsvStringIteratorSetCharAndNext(HEAP32[$4 + 124 >> 2], 32);
    }
   }
   label$7: {
    label$8: {
     if (HEAP16[HEAP32[38615] + 2 >> 1] != 131) {
      break label$8;
     }
     $0 = jslGetTokenLength();
     HEAP32[$4 + 52 >> 2] = $0;
     if (!$0) {
      break label$8;
     }
     HEAP32[$4 + 48 >> 2] = 0;
     jslSkipWhiteSpace();
     if (!(HEAP32[$4 + 56 >> 2] != 2 | HEAP8[HEAP32[38615]] != 41)) {
      HEAP32[$4 + 44 >> 2] = jslGetTokenValueAsVar();
      HEAP32[$4 + 48 >> 2] = jswrap_atob(HEAP32[$4 + 44 >> 2]);
      jsvUnLock(HEAP32[$4 + 44 >> 2]);
      HEAP32[$4 + 52 >> 2] = jsvGetStringLength(HEAP32[$4 + 48 >> 2]);
      HEAP32[$4 + 64 >> 2] = HEAP32[$4 + 64 >> 2] - 5;
      if (HEAP32[$4 + 124 >> 2]) {
       jsvStringIteratorGoto(HEAP32[$4 + 124 >> 2], HEAP32[$4 + 120 >> 2], HEAP32[$4 + 64 >> 2]);
      }
      HEAP8[$4 + 71 | 0] = HEAPU8[HEAP32[38615]];
      jslGetNextToken();
     }
     HEAP32[$4 + 56 >> 2] = 0;
     if (HEAP32[$4 + 124 >> 2]) {
      jsvStringIteratorSetCharAndNext(HEAP32[$4 + 124 >> 2], (HEAPU32[$4 + 52 >> 2] < 256 ? 209 : 210) << 24 >> 24);
      jsvStringIteratorSetCharAndNext(HEAP32[$4 + 124 >> 2], (HEAP32[$4 + 52 >> 2] & 255) << 24 >> 24);
      if (HEAPU32[$4 + 52 >> 2] >= 256) {
       jsvStringIteratorSetCharAndNext(HEAP32[$4 + 124 >> 2], HEAP32[$4 + 52 >> 2] >>> 8 << 24 >> 24);
      }
      if (!HEAP32[$4 + 48 >> 2]) {
       HEAP32[$4 + 48 >> 2] = jslGetTokenValueAsVar();
      }
      jsvStringIteratorNew($4 + 8 | 0, HEAP32[$4 + 48 >> 2], 0);
      while (1) {
       if (jsvStringIteratorHasChar($4 + 8 | 0) & 1) {
        jsvStringIteratorSetCharAndNext(HEAP32[$4 + 124 >> 2], jsvStringIteratorGetCharAndNext($4 + 8 | 0) << 24 >> 24);
        continue;
       }
       break;
      }
      jsvStringIteratorFree($4 + 8 | 0);
     }
     jsvUnLock(HEAP32[$4 + 48 >> 2]);
     HEAP32[$4 + 64 >> 2] = HEAP32[$4 + 64 >> 2] + (HEAP32[$4 + 52 >> 2] + (HEAPU32[$4 + 52 >> 2] < 256 ? 2 : 3) | 0);
     break label$7;
    }
    label$16: {
     label$17: {
      label$18: {
       if (HEAP16[HEAP32[38615] + 2 >> 1] == 128 | HEAP16[HEAP32[38615] + 2 >> 1] == 129 | (HEAP16[HEAP32[38615] + 2 >> 1] == 130 | HEAP16[HEAP32[38615] + 2 >> 1] == 131)) {
        break label$18;
       }
       if (HEAP16[HEAP32[38615] + 2 >> 1] == 133) {
        break label$18;
       }
       if (HEAP16[HEAP32[38615] + 2 >> 1] != 135) {
        break label$17;
       }
      }
      label$19: {
       label$20: {
        if (HEAP16[HEAP32[38615] + 2 >> 1] != 128) {
         break label$20;
        }
        if (strcmp(jslGetTokenValueAsString(), 107778)) {
         break label$20;
        }
        HEAP32[$4 + 56 >> 2] = 1;
        break label$19;
       }
       HEAP32[$4 + 56 >> 2] = 0;
      }
      HEAP32[$4 + 64 >> 2] = (jsvStringIteratorGetIndex(HEAP32[38615] + 88 | 0) - (HEAP32[HEAP32[38615] + 4 >> 2] + 1 | 0) | 0) + HEAP32[$4 + 64 >> 2];
      if (HEAP32[$4 + 124 >> 2]) {
       jsvStringIteratorSetCharAndNext(HEAP32[$4 + 124 >> 2], HEAP8[$4 + 71 | 0]);
       while (1) {
        if (jsvStringIteratorGetIndex($4 + 72 | 0) + 1 >>> 0 < jsvStringIteratorGetIndex(HEAP32[38615] + 88 | 0) >>> 0) {
         jsvStringIteratorSetCharAndNext(HEAP32[$4 + 124 >> 2], jsvStringIteratorGetCharAndNext($4 + 72 | 0) << 24 >> 24);
         continue;
        }
        break;
       }
      }
      break label$16;
     }
     label$24: {
      if (!(HEAP32[$4 + 56 >> 2] != 1 | HEAP16[HEAP32[38615] + 2 >> 1] != 40)) {
       HEAP32[$4 + 56 >> 2] = 2;
       break label$24;
      }
      HEAP32[$4 + 56 >> 2] = 0;
     }
     if (HEAP32[$4 + 124 >> 2]) {
      jsvStringIteratorSetCharAndNext(HEAP32[$4 + 124 >> 2], HEAPU16[HEAP32[38615] + 2 >> 1] << 24 >> 24);
     }
     HEAP32[$4 + 64 >> 2] = HEAP32[$4 + 64 >> 2] + 1;
    }
   }
   HEAP32[$4 + 60 >> 2] = HEAP16[HEAP32[38615] + 2 >> 1];
   jslSkipWhiteSpace();
   if (HEAP32[$4 + 124 >> 2]) {
    jsvStringIteratorFree($4 + 72 | 0);
    jsvStringIteratorClone($4 + 72 | 0, HEAP32[38615] + 88 | 0);
   }
   HEAP8[$4 + 71 | 0] = HEAPU8[HEAP32[38615]];
   jslGetNextToken();
   continue;
  }
  break;
 }
 if (HEAP32[$4 + 124 >> 2]) {
  jsvStringIteratorFree($4 + 72 | 0);
 }
 __stack_pointer = $4 + 128 | 0;
 return HEAP32[$4 + 64 >> 2];
}

function jslLexString() {
 var $0 = 0, $1 = 0, $2 = 0;
 $0 = __stack_pointer - 80 | 0;
 __stack_pointer = $0;
 HEAP8[$0 + 79 | 0] = HEAPU8[HEAP32[38615]];
 HEAP32[$0 + 52 >> 2] = 0;
 label$1: {
  if ((HEAP32[46755] & 63) == 1) {
   $1 = jsvNewFromEmptyString();
   HEAP32[HEAP32[38615] + 76 >> 2] = $1;
   if (!HEAP32[HEAP32[38615] + 76 >> 2]) {
    HEAP16[HEAP32[38615] + 2 >> 1] = 0;
    break label$1;
   }
   jsvStringIteratorNew($0 + 40 | 0, HEAP32[HEAP32[38615] + 76 >> 2], 0);
  }
  jslGetNextCh();
  HEAP8[$0 + 39 | 0] = HEAPU8[$0 + 79 | 0];
  HEAP32[$0 + 32 >> 2] = 0;
  while (1) {
   $1 = 0;
   if (HEAP8[HEAP32[38615]]) {
    $1 = 1;
    $1 = HEAP8[HEAP32[38615]] == HEAP8[$0 + 79 | 0] ? HEAP32[$0 + 32 >> 2] != 0 : $1;
   }
   label$7: {
    if (!($1 & 1)) {
     break label$7;
    }
    if (HEAP8[$0 + 79 | 0] == 96) {
     if (!(HEAP8[HEAP32[38615]] != 123 | (HEAP32[$0 + 32 >> 2] ? 0 : HEAP8[$0 + 39 | 0] != 36))) {
      HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 32 >> 2] + 1;
     }
     if (!(!HEAP32[$0 + 32 >> 2] | HEAP8[HEAP32[38615]] != 125)) {
      HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 32 >> 2] - 1;
     }
    }
    label$12: {
     if (HEAP8[HEAP32[38615]] == 92) {
      jslGetNextCh();
      HEAP8[$0 + 31 | 0] = HEAPU8[HEAP32[38615]];
      label$14: {
       label$15: {
        switch (HEAP8[HEAP32[38615]] - 98 | 0) {
        case 12:
         HEAP8[$0 + 31 | 0] = 10;
         jslGetNextCh();
         break label$14;

        case 0:
         HEAP8[$0 + 31 | 0] = 8;
         jslGetNextCh();
         break label$14;

        case 4:
         HEAP8[$0 + 31 | 0] = 12;
         jslGetNextCh();
         break label$14;

        case 16:
         HEAP8[$0 + 31 | 0] = 13;
         jslGetNextCh();
         break label$14;

        case 18:
         HEAP8[$0 + 31 | 0] = 9;
         jslGetNextCh();
         break label$14;

        case 20:
         HEAP8[$0 + 31 | 0] = 11;
         jslGetNextCh();
         break label$14;

        case 19:
        case 22:
         HEAP8[$0 + 25 | 0] = HEAP8[HEAP32[38615]] == 117;
         jslGetNextCh();
         HEAP32[$0 + 20 >> 2] = HEAP8[$0 + 25 | 0] & 1 ? 4 : 2;
         HEAP32[$0 + 16 >> 2] = 0;
         while (1) {
          label$24: {
           $1 = HEAP32[$0 + 20 >> 2];
           HEAP32[$0 + 20 >> 2] = $1 - 1;
           if (!$1) {
            break label$24;
           }
           label$25: {
            if (HEAPU8[HEAP32[38615]]) {
             if (isHexadecimal(HEAP8[HEAP32[38615]]) & 1) {
              break label$25;
             }
            }
            jsExceptionHere(1, 105469, 0);
            break label$24;
           }
           $2 = HEAPU8[HEAP32[38615]];
           $1 = HEAP32[$0 + 16 >> 2];
           HEAP32[$0 + 16 >> 2] = $1 + 1;
           HEAP8[($0 + 26 | 0) + $1 | 0] = $2;
           jslGetNextCh();
           continue;
          }
          break;
         }
         ;
         HEAP8[HEAP32[$0 + 16 >> 2] + ($0 + 26 | 0) | 0] = 0;
         $1 = stringToIntWithRadix($0 + 26 | 0, 16, 0, 0);
         HEAP32[$0 + 12 >> 2] = $1;
         HEAP8[$0 + 31 | 0] = HEAP32[$0 + 12 >> 2];
         break label$14;

        default:
         break label$15;
        }
       }
       label$27: {
        if (!(HEAP8[HEAP32[38615]] < 48 | HEAP8[HEAP32[38615]] > 55)) {
         HEAP8[$0 + 8 | 0] = HEAPU8[129916];
         HEAP32[$0 + 4 >> 2] = HEAPU8[129912] | HEAPU8[129913] << 8 | (HEAPU8[129914] << 16 | HEAPU8[129915] << 24);
         HEAP8[$0 + 5 | 0] = HEAPU8[HEAP32[38615]];
         HEAP32[$0 >> 2] = 2;
         jslGetNextCh();
         if (!(HEAP8[HEAP32[38615]] < 48 | HEAP8[HEAP32[38615]] > 55)) {
          $2 = HEAPU8[HEAP32[38615]];
          $1 = HEAP32[$0 >> 2];
          HEAP32[$0 >> 2] = $1 + 1;
          HEAP8[($0 + 4 | 0) + $1 | 0] = $2;
          jslGetNextCh();
          if (!(HEAP8[HEAP32[38615]] < 48 | HEAP8[HEAP32[38615]] > 55)) {
           $2 = HEAPU8[HEAP32[38615]];
           $1 = HEAP32[$0 >> 2];
           HEAP32[$0 >> 2] = $1 + 1;
           HEAP8[($0 + 4 | 0) + $1 | 0] = $2;
           jslGetNextCh();
          }
         }
         HEAP8[HEAP32[$0 >> 2] + ($0 + 4 | 0) | 0] = 0;
         $1 = stringToInt($0 + 4 | 0);
         HEAP8[$0 + 31 | 0] = $1;
         break label$27;
        }
        jslGetNextCh();
       }
      }
      HEAP8[$0 + 39 | 0] = HEAPU8[$0 + 31 | 0];
      jsvStringIteratorAppend($0 + 40 | 0, HEAP8[$0 + 31 | 0]);
      break label$12;
     }
     if (!(HEAP8[$0 + 79 | 0] == 96 | HEAP8[HEAP32[38615]] != 10)) {
      break label$7;
     }
     jsvStringIteratorAppend($0 + 40 | 0, HEAP8[HEAP32[38615]]);
     HEAP8[$0 + 39 | 0] = HEAPU8[HEAP32[38615]];
     jslGetNextCh();
    }
    continue;
   }
   break;
  }
  jsvStringIteratorFree($0 + 40 | 0);
  label$32: {
   if (HEAP8[$0 + 79 | 0] == 96) {
    HEAP16[HEAP32[38615] + 2 >> 1] = 133;
    break label$32;
   }
   HEAP16[HEAP32[38615] + 2 >> 1] = 131;
  }
  if (HEAP8[HEAP32[38615]] != HEAP8[$0 + 79 | 0]) {
   $1 = HEAP32[38615];
   HEAP16[$1 + 2 >> 1] = HEAPU16[$1 + 2 >> 1] + 1;
  }
  jslGetNextCh();
 }
 __stack_pointer = $0 + 80 | 0;
}

function matchhere($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 1040 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 1032 >> 2] = $0;
 HEAP32[$3 + 1028 >> 2] = $1;
 label$1: {
  if (jspIsInterrupted() & 1) {
   HEAP32[$3 + 1036 >> 2] = 0;
   break label$1;
  }
  if (!(HEAP8[HEAP32[$3 + 1032 >> 2]] != 124 ? HEAP8[HEAP32[$3 + 1032 >> 2]] : 0)) {
   $0 = HEAP32[$3 + 1028 >> 2];
   __memcpy($3, $2, 88);
   HEAP32[$3 + 1036 >> 2] = matchfound($0, $3);
   break label$1;
  }
  if (HEAP8[HEAP32[$3 + 1032 >> 2]] == 94) {
   if (jsvStringIteratorGetIndex_4(HEAP32[$3 + 1028 >> 2])) {
    HEAP32[$3 + 1036 >> 2] = 0;
    break label$1;
   }
   if (!(jspCheckStackPosition() & 1)) {
    HEAP32[$3 + 1036 >> 2] = 0;
    break label$1;
   }
   $0 = HEAP32[$3 + 1032 >> 2];
   $1 = HEAP32[$3 + 1028 >> 2];
   __memcpy($3 + 88 | 0, $2, 88);
   HEAP32[$3 + 1036 >> 2] = matchhere($0 + 1 | 0, $1, $3 + 88 | 0);
   break label$1;
  }
  if (HEAP8[HEAP32[$3 + 1032 >> 2]] == 36) {
   if (!(jsvStringIteratorHasChar_7(HEAP32[$3 + 1028 >> 2]) & 1)) {
    $0 = HEAP32[$3 + 1032 >> 2];
    $1 = HEAP32[$3 + 1028 >> 2];
    __memcpy($3 + 264 | 0, $2, 88);
    HEAP32[$3 + 1036 >> 2] = matchhere($0 + 1 | 0, $1, $3 + 264 | 0);
    break label$1;
   }
   $0 = HEAP32[$3 + 1032 >> 2];
   __memcpy($3 + 176 | 0, $2, 88);
   HEAP32[$3 + 1036 >> 2] = nomatchfound($0 + 1 | 0, $3 + 176 | 0);
   break label$1;
  }
  if (HEAP8[HEAP32[$3 + 1032 >> 2]] == 40) {
   $0 = jsvStringIteratorGetIndex_4(HEAP32[$3 + 1028 >> 2]);
   HEAP32[($2 + 16 | 0) + (HEAP32[$2 + 12 >> 2] << 2) >> 2] = $0;
   HEAP32[($2 + 52 | 0) + (HEAP32[$2 + 12 >> 2] << 2) >> 2] = HEAP32[($2 + 16 | 0) + (HEAP32[$2 + 12 >> 2] << 2) >> 2];
   if (HEAP32[$2 + 12 >> 2] < 9) {
    HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
   }
   if (!(jspCheckStackPosition() & 1)) {
    HEAP32[$3 + 1036 >> 2] = 0;
    break label$1;
   }
   $0 = HEAP32[$3 + 1032 >> 2];
   $1 = HEAP32[$3 + 1028 >> 2];
   __memcpy($3 + 352 | 0, $2, 88);
   HEAP32[$3 + 1036 >> 2] = matchhere($0 + 1 | 0, $1, $3 + 352 | 0);
   break label$1;
  }
  if (HEAP8[HEAP32[$3 + 1032 >> 2]] == 41) {
   if (HEAP32[$2 + 12 >> 2] > 0) {
    $0 = jsvStringIteratorGetIndex_4(HEAP32[$3 + 1028 >> 2]);
    HEAP32[((HEAP32[$2 + 12 >> 2] << 2) + $2 | 0) + 48 >> 2] = $0;
   }
   if (!(jspCheckStackPosition() & 1)) {
    HEAP32[$3 + 1036 >> 2] = 0;
    break label$1;
   }
   $0 = HEAP32[$3 + 1032 >> 2];
   $1 = HEAP32[$3 + 1028 >> 2];
   __memcpy($3 + 440 | 0, $2, 88);
   HEAP32[$3 + 1036 >> 2] = matchhere($0 + 1 | 0, $1, $3 + 440 | 0);
   break label$1;
  }
  HEAP8[$3 + 1023 | 0] = matchcharacter(HEAP32[$3 + 1032 >> 2], HEAP32[$3 + 1028 >> 2], $3 + 1024 | 0, $2) & 1;
  if (!(HEAP8[HEAP32[$3 + 1032 >> 2] + HEAP32[$3 + 1024 >> 2] | 0] != 42 & HEAP8[HEAP32[$3 + 1032 >> 2] + HEAP32[$3 + 1024 >> 2] | 0] != 43)) {
   HEAP8[$3 + 1022 | 0] = HEAPU8[HEAP32[$3 + 1032 >> 2] + HEAP32[$3 + 1024 >> 2] | 0];
   if (!(HEAP8[$3 + 1023 | 0] & 1 | HEAP8[$3 + 1022 | 0] != 43)) {
    $0 = HEAP32[$3 + 1032 >> 2];
    $1 = HEAP32[$3 + 1024 >> 2] + 1 | 0;
    __memcpy($3 + 704 | 0, $2, 88);
    HEAP32[$3 + 1036 >> 2] = nomatchfound($0 + $1 | 0, $3 + 704 | 0);
    break label$1;
   }
   HEAP32[$3 + 1016 >> 2] = (HEAP32[$3 + 1032 >> 2] + HEAP32[$3 + 1024 >> 2] | 0) + 1;
   jsvStringIteratorClone($3 + 976 | 0, HEAP32[$3 + 1028 >> 2]);
   $0 = HEAP32[$3 + 1016 >> 2];
   __memcpy($3 + 616 | 0, $2, 88);
   HEAP32[$3 + 972 >> 2] = matchhere($0, $3 + 976 | 0, $3 + 616 | 0);
   jsvStringIteratorFree_9($3 + 976 | 0);
   while (1) {
    $0 = 0;
    if (jsvStringIteratorHasChar_7(HEAP32[$3 + 1028 >> 2]) & 1) {
     $0 = HEAPU8[$3 + 1023 | 0];
    }
    if ($0 & 1) {
     jsvStringIteratorNext(HEAP32[$3 + 1028 >> 2]);
     HEAP8[$3 + 1023 | 0] = matchcharacter(HEAP32[$3 + 1032 >> 2], HEAP32[$3 + 1028 >> 2], $3 + 1024 | 0, $2) & 1;
     jsvStringIteratorClone($3 + 976 | 0, HEAP32[$3 + 1028 >> 2]);
     $0 = HEAP32[$3 + 1016 >> 2];
     __memcpy($3 + 528 | 0, $2, 88);
     HEAP32[$3 + 968 >> 2] = matchhere($0, $3 + 976 | 0, $3 + 528 | 0);
     jsvStringIteratorFree_9($3 + 976 | 0);
     if (HEAP32[$3 + 968 >> 2]) {
      jsvUnLock(HEAP32[$3 + 972 >> 2]);
      HEAP32[$3 + 972 >> 2] = HEAP32[$3 + 968 >> 2];
     }
     continue;
    }
    break;
   }
   HEAP32[$3 + 1036 >> 2] = HEAP32[$3 + 972 >> 2];
   break label$1;
  }
  if (!(!(jsvStringIteratorHasChar_7(HEAP32[$3 + 1028 >> 2]) & 1) | !(HEAP8[$3 + 1023 | 0] & 1))) {
   jsvStringIteratorNext(HEAP32[$3 + 1028 >> 2]);
   if (!(jspCheckStackPosition() & 1)) {
    HEAP32[$3 + 1036 >> 2] = 0;
    break label$1;
   }
   $0 = HEAP32[$3 + 1032 >> 2];
   $1 = HEAP32[$3 + 1024 >> 2];
   $4 = HEAP32[$3 + 1028 >> 2];
   __memcpy($3 + 792 | 0, $2, 88);
   HEAP32[$3 + 1036 >> 2] = matchhere($0 + $1 | 0, $4, $3 + 792 | 0);
   break label$1;
  }
  $0 = HEAP32[$3 + 1032 >> 2];
  $1 = HEAP32[$3 + 1024 >> 2];
  __memcpy($3 + 880 | 0, $2, 88);
  HEAP32[$3 + 1036 >> 2] = nomatchfound($0 + $1 | 0, $3 + 880 | 0);
 }
 __stack_pointer = $3 + 1040 | 0;
 return HEAP32[$3 + 1036 >> 2];
}

function jsvDefragment() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $0 = __stack_pointer - 560 | 0;
 __stack_pointer = $0;
 jsvGarbageCollect();
 jshInterruptOff();
 HEAP32[$0 + 556 >> 2] = 256;
 HEAP32[$0 + 552 >> 2] = $0;
 memset($0, 0, 512);
 HEAP32[$0 + 548 >> 2] = 0;
 HEAP32[$0 + 544 >> 2] = 0;
 while (1) {
  if (HEAPU32[$0 + 544 >> 2] < jsvGetMemoryTotal() >>> 0) {
   HEAP16[$0 + 542 >> 1] = HEAP32[$0 + 544 >> 2] + 1;
   HEAP32[$0 + 536 >> 2] = _jsvGetAddressOf(HEAPU16[$0 + 542 >> 1]);
   $1 = HEAP32[$0 + 536 >> 2];
   if ((HEAPU8[$1 + 11 | 0] | HEAPU8[$1 + 12 | 0] << 8) & 63) {
    label$4: {
     if (jsvIsFlatString(HEAP32[$0 + 536 >> 2]) & 1) {
      HEAP32[$0 + 544 >> 2] = jsvGetFlatStringBlocks(HEAP32[$0 + 536 >> 2]) + HEAP32[$0 + 544 >> 2];
      break label$4;
     }
     if (!(jsvGetLocks(HEAP32[$0 + 536 >> 2]) & 255)) {
      HEAP16[(HEAP32[$0 + 548 >> 2] << 1) + $0 >> 1] = HEAPU16[$0 + 542 >> 1];
      HEAP32[$0 + 548 >> 2] = HEAP32[$0 + 548 >> 2] + 1 & 255;
     }
    }
   }
   HEAP32[$0 + 544 >> 2] = HEAP32[$0 + 544 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$0 + 548 >> 2] = HEAP32[$0 + 548 >> 2] - 1;
 if (HEAP32[$0 + 548 >> 2] < 0) {
  HEAP32[$0 + 548 >> 2] = HEAP32[$0 + 548 >> 2] + 256;
 }
 while (1) {
  label$9: {
   if (!HEAPU16[(HEAP32[$0 + 548 >> 2] << 1) + $0 >> 1]) {
    break label$9;
   }
   HEAP16[$0 + 534 >> 1] = HEAPU16[(HEAP32[$0 + 548 >> 2] << 1) + $0 >> 1];
   HEAP16[$0 + 532 >> 1] = HEAPU16[77234];
   if (!HEAPU16[$0 + 532 >> 1] | HEAPU16[$0 + 534 >> 1] < HEAPU16[$0 + 532 >> 1]) {
    break label$9;
   }
   HEAP32[$0 + 528 >> 2] = _jsvGetAddressOf(HEAPU16[$0 + 534 >> 1]);
   HEAP32[$0 + 524 >> 2] = _jsvGetAddressOf(HEAPU16[$0 + 532 >> 1]);
   HEAP16[77234] = jsvGetNextSibling(HEAP32[$0 + 524 >> 2]);
   $2 = HEAP32[$0 + 528 >> 2];
   $1 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
   $3 = HEAP32[$0 + 524 >> 2];
   $4 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
   HEAP8[$3 | 0] = $4;
   HEAP8[$3 + 1 | 0] = $4 >>> 8;
   HEAP8[$3 + 2 | 0] = $4 >>> 16;
   HEAP8[$3 + 3 | 0] = $4 >>> 24;
   HEAP8[$3 + 4 | 0] = $1;
   HEAP8[$3 + 5 | 0] = $1 >>> 8;
   HEAP8[$3 + 6 | 0] = $1 >>> 16;
   HEAP8[$3 + 7 | 0] = $1 >>> 24;
   HEAP8[$3 + 12 | 0] = HEAPU8[$2 + 12 | 0];
   $1 = HEAPU8[$2 + 8 | 0] | HEAPU8[$2 + 9 | 0] << 8 | (HEAPU8[$2 + 10 | 0] << 16 | HEAPU8[$2 + 11 | 0] << 24);
   HEAP8[$3 + 8 | 0] = $1;
   HEAP8[$3 + 9 | 0] = $1 >>> 8;
   HEAP8[$3 + 10 | 0] = $1 >>> 16;
   HEAP8[$3 + 11 | 0] = $1 >>> 24;
   $1 = HEAP32[$0 + 528 >> 2];
   HEAP8[$1 + 11 | 0] = 0;
   HEAP8[$1 + 12 | 0] = 0;
   HEAP32[$0 + 520 >> 2] = 0;
   while (1) {
    if (HEAPU32[$0 + 520 >> 2] < jsvGetMemoryTotal() >>> 0) {
     HEAP16[$0 + 518 >> 1] = HEAP32[$0 + 520 >> 2] + 1;
     HEAP32[$0 + 512 >> 2] = _jsvGetAddressOf(HEAPU16[$0 + 518 >> 1]);
     $1 = HEAP32[$0 + 512 >> 2];
     if ((HEAPU8[$1 + 11 | 0] | HEAPU8[$1 + 12 | 0] << 8) & 63) {
      label$14: {
       if (jsvIsFlatString(HEAP32[$0 + 512 >> 2]) & 1) {
        HEAP32[$0 + 520 >> 2] = jsvGetFlatStringBlocks(HEAP32[$0 + 512 >> 2]) + HEAP32[$0 + 520 >> 2];
        break label$14;
       }
       if (jsvHasSingleChild(HEAP32[$0 + 512 >> 2]) & 1) {
        if ((jsvGetFirstChild(HEAP32[$0 + 512 >> 2]) & 65535) == HEAPU16[$0 + 534 >> 1]) {
         jsvSetFirstChild(HEAP32[$0 + 512 >> 2], HEAPU16[$0 + 532 >> 1]);
        }
       }
       if (jsvHasStringExt(HEAP32[$0 + 512 >> 2]) & 1) {
        if ((jsvGetLastChild(HEAP32[$0 + 512 >> 2]) & 65535) == HEAPU16[$0 + 534 >> 1]) {
         jsvSetLastChild(HEAP32[$0 + 512 >> 2], HEAPU16[$0 + 532 >> 1]);
        }
       }
       if (jsvHasChildren(HEAP32[$0 + 512 >> 2]) & 1) {
        if ((jsvGetFirstChild(HEAP32[$0 + 512 >> 2]) & 65535) == HEAPU16[$0 + 534 >> 1]) {
         jsvSetFirstChild(HEAP32[$0 + 512 >> 2], HEAPU16[$0 + 532 >> 1]);
        }
        if ((jsvGetLastChild(HEAP32[$0 + 512 >> 2]) & 65535) == HEAPU16[$0 + 534 >> 1]) {
         jsvSetLastChild(HEAP32[$0 + 512 >> 2], HEAPU16[$0 + 532 >> 1]);
        }
       }
       if (jsvIsName(HEAP32[$0 + 512 >> 2]) & 1) {
        if ((jsvGetNextSibling(HEAP32[$0 + 512 >> 2]) & 65535) == HEAPU16[$0 + 534 >> 1]) {
         jsvSetNextSibling(HEAP32[$0 + 512 >> 2], HEAPU16[$0 + 532 >> 1]);
        }
        if ((jsvGetPrevSibling(HEAP32[$0 + 512 >> 2]) & 65535) == HEAPU16[$0 + 534 >> 1]) {
         jsvSetPrevSibling(HEAP32[$0 + 512 >> 2], HEAPU16[$0 + 532 >> 1]);
        }
       }
      }
     }
     HEAP32[$0 + 520 >> 2] = HEAP32[$0 + 520 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP16[(HEAP32[$0 + 548 >> 2] << 1) + $0 >> 1] = 0;
   HEAP32[$0 + 548 >> 2] = HEAP32[$0 + 548 >> 2] - 1;
   if (HEAP32[$0 + 548 >> 2] < 0) {
    HEAP32[$0 + 548 >> 2] = HEAP32[$0 + 548 >> 2] + 256;
   }
   jshKickWatchDog();
   jshKickSoftWatchDog();
   continue;
  }
  break;
 }
 jsvCreateEmptyVarList();
 jshInterruptOn();
 $0 = HEAP32[$0 + 552 >> 2];
 __stack_pointer = $0 + 560 | 0;
}

function jsvIterateCallback($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 240 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 232 >> 2] = $0;
 HEAP32[$3 + 228 >> 2] = $1;
 HEAP32[$3 + 224 >> 2] = $2;
 HEAP8[$3 + 223 | 0] = 1;
 label$1: {
  label$2: {
   if (jsvIsNumeric(HEAP32[$3 + 232 >> 2]) & 1) {
    $0 = HEAP32[$3 + 228 >> 2];
    FUNCTION_TABLE[$0 | 0](jsvGetInteger(HEAP32[$3 + 232 >> 2]), HEAP32[$3 + 224 >> 2]);
    break label$2;
   }
   label$4: {
    if (jsvIsObject(HEAP32[$3 + 232 >> 2]) & 1) {
     HEAP32[$3 + 216 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 232 >> 2], 103118);
     if (jsvIsFunction(HEAP32[$3 + 216 >> 2]) & 1) {
      HEAP32[$3 + 212 >> 2] = jspExecuteFunction(HEAP32[$3 + 216 >> 2], 0, 0, 0);
      jsvUnLock(HEAP32[$3 + 216 >> 2]);
      if (HEAP32[$3 + 212 >> 2]) {
       HEAP8[$3 + 211 | 0] = jsvIterateCallback(HEAP32[$3 + 212 >> 2], HEAP32[$3 + 228 >> 2], HEAP32[$3 + 224 >> 2]) & 1;
       jsvUnLock(HEAP32[$3 + 212 >> 2]);
       HEAP8[$3 + 239 | 0] = HEAP8[$3 + 211 | 0] & 1;
       break label$1;
      }
      HEAP8[$3 + 239 | 0] = 1;
      break label$1;
     }
     jsvUnLock(HEAP32[$3 + 216 >> 2]);
     HEAP32[$3 + 204 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 232 >> 2], 97544);
     HEAP32[$3 + 200 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 232 >> 2], 107892);
     label$8: {
      label$9: {
       if (!HEAP32[$3 + 204 >> 2] | !HEAP32[$3 + 200 >> 2]) {
        break label$9;
       }
       if (!(jsvIsNumeric(HEAP32[$3 + 204 >> 2]) & 1)) {
        break label$9;
       }
       HEAP32[$3 + 196 >> 2] = jsvGetInteger(HEAP32[$3 + 204 >> 2]);
       while (1) {
        $0 = 0;
        if (HEAP8[$3 + 223 | 0] & 1) {
         $0 = HEAP32[$3 + 196 >> 2];
         HEAP32[$3 + 196 >> 2] = $0 - 1;
         $0 = ($0 | 0) > 0;
        }
        if ($0) {
         HEAP8[$3 + 223 | 0] = jsvIterateCallback(HEAP32[$3 + 200 >> 2], HEAP32[$3 + 228 >> 2], HEAP32[$3 + 224 >> 2]) & 1;
         continue;
        }
        break;
       }
       break label$8;
      }
      HEAP32[$3 >> 2] = HEAP32[$3 + 232 >> 2];
      jsExceptionHere(3, 103142, $3);
      HEAP8[$3 + 223 | 0] = 0;
     }
     jsvUnLock2(HEAP32[$3 + 204 >> 2], HEAP32[$3 + 200 >> 2]);
     break label$4;
    }
    label$13: {
     if (jsvIsString(HEAP32[$3 + 232 >> 2]) & 1) {
      jsvStringIteratorNew($3 + 160 | 0, HEAP32[$3 + 232 >> 2], 0);
      while (1) {
       $0 = 0;
       if (jsvStringIteratorHasChar_2($3 + 160 | 0) & 1) {
        $0 = HEAPU8[$3 + 223 | 0];
       }
       if ($0 & 1) {
        HEAP8[$3 + 159 | 0] = jsvStringIteratorGetCharAndNext($3 + 160 | 0);
        FUNCTION_TABLE[HEAP32[$3 + 228 >> 2]](HEAP8[$3 + 159 | 0], HEAP32[$3 + 224 >> 2]);
        continue;
       }
       break;
      }
      jsvStringIteratorFree_2($3 + 160 | 0);
      break label$13;
     }
     label$18: {
      if (jsvIsArrayBuffer(HEAP32[$3 + 232 >> 2]) & 1) {
       jsvArrayBufferIteratorNew($3 + 96 | 0, HEAP32[$3 + 232 >> 2], 0);
       label$20: {
        if (!(HEAPU8[$3 + 132 | 0] & 16 | (HEAPU8[$3 + 132 | 0] & 15) != 1)) {
         HEAP32[$3 + 92 >> 2] = $3 + 96;
         HEAP32[$3 + 88 >> 2] = jsvGetArrayBufferLength(HEAP32[$3 + 232 >> 2]);
         while (1) {
          $0 = HEAP32[$3 + 88 >> 2];
          HEAP32[$3 + 88 >> 2] = $0 - 1;
          if ($0) {
           $0 = HEAP32[$3 + 228 >> 2];
           FUNCTION_TABLE[$0 | 0](jsvStringIteratorGetChar_2(HEAP32[$3 + 92 >> 2]) & 255, HEAP32[$3 + 224 >> 2]);
           jsvStringIteratorNextInline(HEAP32[$3 + 92 >> 2]);
           continue;
          }
          break;
         }
         break label$20;
        }
        while (1) {
         if (jsvArrayBufferIteratorHasElement($3 + 96 | 0) & 1) {
          $0 = HEAP32[$3 + 228 >> 2];
          FUNCTION_TABLE[$0 | 0](jsvArrayBufferIteratorGetIntegerValue($3 + 96 | 0), HEAP32[$3 + 224 >> 2]);
          jsvArrayBufferIteratorNext($3 + 96 | 0);
          continue;
         }
         break;
        }
       }
       jsvArrayBufferIteratorFree($3 + 96 | 0);
       break label$18;
      }
      label$26: {
       if (jsvIsIterable(HEAP32[$3 + 232 >> 2]) & 1) {
        jsvIteratorNew($3 + 24 | 0, HEAP32[$3 + 232 >> 2], 1);
        while (1) {
         $0 = 0;
         if (jsvIteratorHasElement($3 + 24 | 0) & 1) {
          $0 = HEAPU8[$3 + 223 | 0];
         }
         if ($0 & 1) {
          HEAP32[$3 + 20 >> 2] = jsvIteratorGetValue($3 + 24 | 0);
          HEAP8[$3 + 223 | 0] = jsvIterateCallback(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 228 >> 2], HEAP32[$3 + 224 >> 2]) & 1;
          jsvUnLock(HEAP32[$3 + 20 >> 2]);
          jsvIteratorNext($3 + 24 | 0);
          continue;
         }
         break;
        }
        jsvIteratorFree($3 + 24 | 0);
        break label$26;
       }
       HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 232 >> 2];
       jsExceptionHere(3, 99073, $3 + 16 | 0);
       HEAP8[$3 + 223 | 0] = 0;
      }
     }
    }
   }
  }
  HEAP8[$3 + 239 | 0] = HEAP8[$3 + 223 | 0] & 1;
 }
 __stack_pointer = $3 + 240 | 0;
 return HEAP8[$3 + 239 | 0] & 1;
}

function jswrap_storagefile_read_internal($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 224 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 216 >> 2] = $0;
 HEAP32[$2 + 212 >> 2] = $1;
 HEAP8[$2 + 211 | 0] = HEAP32[$2 + 212 >> 2] < 0;
 HEAP8[$2 + 210 | 0] = jsvObjectGetIntegerChild(HEAP32[$2 + 216 >> 2], 105433);
 label$1: {
  if (HEAP8[$2 + 210 | 0] != 114) {
   jsExceptionHere(1, 105397, 0);
   HEAP32[$2 + 220 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 204 >> 2] = jsvObjectGetIntegerChild(HEAP32[$2 + 216 >> 2], 103079);
  jsfNameFromVarAndUnLock($2 + 176 | 0, jsvObjectGetChildIfExists(HEAP32[$2 + 216 >> 2], 105033));
  HEAP32[$2 + 172 >> 2] = 27;
  while (1) {
   $0 = 0;
   $0 = HEAP32[$2 + 172 >> 2] ? !HEAP8[(HEAP32[$2 + 172 >> 2] + $2 | 0) + 175 | 0] : $0;
   if ($0) {
    HEAP32[$2 + 172 >> 2] = HEAP32[$2 + 172 >> 2] - 1;
    continue;
   }
   break;
  }
  HEAP8[HEAP32[$2 + 172 >> 2] + ($2 + 176 | 0) | 0] = HEAP32[$2 + 204 >> 2];
  HEAP32[$2 + 64 >> 2] = HEAP32[$2 + 200 >> 2];
  $0 = HEAP32[$2 + 196 >> 2];
  $1 = HEAP32[$2 + 192 >> 2];
  HEAP32[$2 + 56 >> 2] = $1;
  HEAP32[$2 + 60 >> 2] = $0;
  $1 = HEAP32[$2 + 188 >> 2];
  $0 = HEAP32[$2 + 184 >> 2];
  HEAP32[$2 + 48 >> 2] = $0;
  HEAP32[$2 + 52 >> 2] = $1;
  $0 = HEAP32[$2 + 180 >> 2];
  $1 = HEAP32[$2 + 176 >> 2];
  HEAP32[$2 + 40 >> 2] = $1;
  HEAP32[$2 + 44 >> 2] = $0;
  HEAP32[$2 + 132 >> 2] = jsfFindFile($2 + 40 | 0, $2 + 136 | 0);
  if (!HEAP32[$2 + 132 >> 2]) {
   HEAP32[$2 + 220 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 128 >> 2] = jsfGetFileSize($2 + 136 | 0);
  HEAP32[$2 + 124 >> 2] = jsvObjectGetIntegerChild(HEAP32[$2 + 216 >> 2], 98034);
  HEAP32[$2 + 120 >> 2] = 0;
  if (HEAP8[$2 + 211 | 0] & 1) {
   HEAP32[$2 + 212 >> 2] = 32;
  }
  while (1) {
   label$9: {
    if (!HEAP32[$2 + 212 >> 2]) {
     break label$9;
    }
    HEAP32[$2 + 76 >> 2] = HEAP32[$2 + 128 >> 2] - HEAP32[$2 + 124 >> 2];
    if (HEAP32[$2 + 76 >> 2] <= 0) {
     HEAP32[$2 + 124 >> 2] = 0;
     label$11: {
      if (HEAP32[$2 + 204 >> 2] == 255) {
       HEAP32[$2 + 132 >> 2] = 0;
       break label$11;
      }
      HEAP32[$2 + 204 >> 2] = HEAP32[$2 + 204 >> 2] + 1;
      HEAP8[HEAP32[$2 + 172 >> 2] + ($2 + 176 | 0) | 0] = HEAP32[$2 + 204 >> 2];
      HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 200 >> 2];
      $1 = HEAP32[$2 + 196 >> 2];
      $0 = HEAP32[$2 + 192 >> 2];
      HEAP32[$2 + 24 >> 2] = $0;
      HEAP32[$2 + 28 >> 2] = $1;
      $0 = HEAP32[$2 + 188 >> 2];
      $1 = HEAP32[$2 + 184 >> 2];
      HEAP32[$2 + 16 >> 2] = $1;
      HEAP32[$2 + 20 >> 2] = $0;
      $1 = HEAP32[$2 + 180 >> 2];
      $0 = HEAP32[$2 + 176 >> 2];
      HEAP32[$2 + 8 >> 2] = $0;
      HEAP32[$2 + 12 >> 2] = $1;
      HEAP32[$2 + 132 >> 2] = jsfFindFile($2 + 8 | 0, $2 + 136 | 0);
      HEAP32[$2 + 128 >> 2] = jsfGetFileSize($2 + 136 | 0);
     }
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 216 >> 2], 98034, jsvNewFromInteger(HEAP32[$2 + 124 >> 2]));
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 216 >> 2], 103079, jsvNewFromInteger(HEAP32[$2 + 204 >> 2]));
     HEAP32[$2 + 76 >> 2] = HEAP32[$2 + 128 >> 2];
     if (!HEAP32[$2 + 132 >> 2]) {
      HEAP32[$2 + 220 >> 2] = HEAP32[$2 + 120 >> 2];
      break label$1;
     }
    }
    HEAP32[$2 + 72 >> 2] = HEAP32[$2 + 212 >> 2];
    if (HEAP32[$2 + 72 >> 2] > 32) {
     HEAP32[$2 + 72 >> 2] = 32;
    }
    if (HEAP32[$2 + 72 >> 2] > HEAP32[$2 + 76 >> 2]) {
     HEAP32[$2 + 72 >> 2] = HEAP32[$2 + 76 >> 2];
    }
    jshFlashRead($2 + 80 | 0, HEAP32[$2 + 132 >> 2] + HEAP32[$2 + 124 >> 2] | 0, HEAP32[$2 + 72 >> 2]);
    HEAP32[$2 + 68 >> 2] = 0;
    while (1) {
     label$17: {
      if (HEAP32[$2 + 68 >> 2] >= HEAP32[$2 + 72 >> 2]) {
       break label$17;
      }
      if (HEAP8[HEAP32[$2 + 68 >> 2] + ($2 + 80 | 0) | 0] == -1) {
       HEAP32[$2 + 72 >> 2] = HEAP32[$2 + 68 >> 2];
       HEAP32[$2 + 212 >> 2] = HEAP32[$2 + 72 >> 2];
       break label$17;
      }
      if (!(HEAP8[$2 + 211 | 0] & 1) | HEAP8[HEAP32[$2 + 68 >> 2] + ($2 + 80 | 0) | 0] != 10) {
       HEAP32[$2 + 68 >> 2] = HEAP32[$2 + 68 >> 2] + 1;
       continue;
      } else {
       HEAP32[$2 + 72 >> 2] = HEAP32[$2 + 68 >> 2] + 1;
       HEAP32[$2 + 212 >> 2] = HEAP32[$2 + 72 >> 2];
       HEAP8[$2 + 211 | 0] = 0;
      }
     }
     break;
    }
    if (!HEAP32[$2 + 72 >> 2]) {
     break label$9;
    }
    if (!HEAP32[$2 + 120 >> 2]) {
     HEAP32[$2 + 120 >> 2] = jsvNewFromEmptyString_11();
    }
    if (HEAP32[$2 + 120 >> 2]) {
     jsvAppendStringBuf(HEAP32[$2 + 120 >> 2], $2 + 80 | 0, HEAP32[$2 + 72 >> 2]);
    }
    HEAP32[$2 + 212 >> 2] = HEAP32[$2 + 212 >> 2] - HEAP32[$2 + 72 >> 2];
    HEAP32[$2 + 124 >> 2] = HEAP32[$2 + 72 >> 2] + HEAP32[$2 + 124 >> 2];
    if (HEAP8[$2 + 211 | 0] & 1) {
     HEAP32[$2 + 212 >> 2] = 32;
    }
    continue;
   }
   break;
  }
  jsvObjectSetChildAndUnLock(HEAP32[$2 + 216 >> 2], 98034, jsvNewFromInteger(HEAP32[$2 + 124 >> 2]));
  HEAP32[$2 + 220 >> 2] = HEAP32[$2 + 120 >> 2];
 }
 __stack_pointer = $2 + 224 | 0;
 return HEAP32[$2 + 220 >> 2];
}

function jspeFunctionDefinitionInternal($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 $2 = __stack_pointer - 112 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 104 >> 2] = $0;
 HEAP8[$2 + 103 | 0] = $1;
 HEAP8[$2 + 55 | 0] = 0;
 label$1: {
  label$2: {
   if (HEAP8[$2 + 103 | 0] & 1) {
    if (HEAP32[$2 + 104 >> 2]) {
     $0 = HEAP32[$2 + 104 >> 2];
     $1 = HEAP32[$2 + 104 >> 2];
     $1 = (HEAPU8[$1 + 11 | 0] | HEAPU8[$1 + 12 | 0] << 8) & -64 | 9;
     HEAP8[$0 + 11 | 0] = $1;
     HEAP8[$0 + 12 | 0] = $1 >>> 8;
    }
    break label$2;
   }
   HEAP32[$2 + 48 >> 2] = HEAP32[46755];
   HEAP32[46755] = 1;
   if (!(jslMatch(123) & 1)) {
    HEAP8[$2 + 111 | 0] = 0;
    break label$1;
   }
   HEAP32[46755] = HEAP32[$2 + 48 >> 2];
   if (HEAP16[HEAP32[38615] + 2 >> 1] == 131) {
    HEAP32[$2 + 44 >> 2] = jslGetTokenValueAsVar();
    label$7: {
     if (jsvIsStringEqual(HEAP32[$2 + 44 >> 2], 106624) & 1) {
      jsWarn(102600, 0);
      break label$7;
     }
     if (jsvIsStringEqual(HEAP32[$2 + 44 >> 2], 102694) & 1) {
      jslGetNextToken();
      if (HEAP16[HEAP32[38615] + 2 >> 1] == 59) {
       jslGetNextToken();
      }
      HEAP8[$2 + 55 | 0] = 1;
     }
    }
    jsvUnLock(HEAP32[$2 + 44 >> 2]);
   }
   if (!(!HEAP32[$2 + 104 >> 2] | HEAP16[HEAP32[38615] + 2 >> 1] != 171)) {
    $0 = HEAP32[$2 + 104 >> 2];
    $1 = HEAP32[$2 + 104 >> 2];
    $1 = (HEAPU8[$1 + 11 | 0] | HEAPU8[$1 + 12 | 0] << 8) & -64 | 9;
    HEAP8[$0 + 11 | 0] = $1;
    HEAP8[$0 + 12 | 0] = $1 >>> 8;
    jslGetNextToken();
   }
  }
  jslSkipWhiteSpace();
  jslCharPosNew($2 + 56 | 0, HEAP32[HEAP32[38615] + 84 >> 2], HEAP32[HEAP32[38615] + 4 >> 2]);
  HEAP32[$2 + 40 >> 2] = -1;
  HEAP8[HEAP32[38615] + 81 | 0] = HEAP16[HEAP32[38615] + 2 >> 1] == 175;
  label$12: {
   if (!(HEAP8[$2 + 103 | 0] & 1)) {
    HEAP32[$2 + 36 >> 2] = 0;
    HEAP32[$2 + 32 >> 2] = HEAP32[46755];
    HEAP32[46755] = 0;
    while (1) {
     $0 = 0;
     if (HEAP16[HEAP32[38615] + 2 >> 1]) {
      $0 = 1;
      $0 = HEAP32[$2 + 36 >> 2] ? $0 : HEAP16[HEAP32[38615] + 2 >> 1] != 125;
     }
     if ($0 & 1) {
      if (HEAP16[HEAP32[38615] + 2 >> 1] == 123) {
       HEAP32[$2 + 36 >> 2] = HEAP32[$2 + 36 >> 2] + 1;
      }
      if (HEAP16[HEAP32[38615] + 2 >> 1] == 125) {
       HEAP32[$2 + 36 >> 2] = HEAP32[$2 + 36 >> 2] - 1;
      }
      HEAP32[$2 + 40 >> 2] = jsvStringIteratorGetIndex_3(HEAP32[38615] + 88 | 0) - 1;
      jslGetNextToken();
      continue;
     }
     break;
    }
    HEAP32[46755] = HEAP32[$2 + 32 >> 2];
    break label$12;
   }
   HEAP32[$2 + 28 >> 2] = HEAP32[46755];
   HEAP32[46755] = 0;
   jsvUnLock(jspeAssignmentExpression());
   HEAP32[46755] = HEAP32[$2 + 28 >> 2];
   HEAP32[$2 + 40 >> 2] = HEAP32[HEAP32[38615] + 4 >> 2];
  }
  HEAP8[$2 + 27 | 0] = HEAP8[HEAP32[38615] + 81 | 0] & 1;
  if (!(!HEAP32[$2 + 104 >> 2] | HEAP32[$2 + 40 >> 2] <= 0)) {
   label$21: {
    label$22: {
     if (HEAP8[$2 + 55 | 0] & 1) {
      break label$22;
     }
     if (!(jsvIsNativeString(HEAP32[HEAP32[38615] + 84 >> 2]) & 1)) {
      break label$22;
     }
     HEAP32[$2 + 16 >> 2] = jsvStringIteratorGetIndex_3($2 + 56 | 0) - 1;
     $0 = HEAP32[HEAP32[38615] + 84 >> 2];
     HEAP32[$2 + 20 >> 2] = jsvNewNativeString(HEAP32[$2 + 16 >> 2] + (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) | 0, HEAP32[$2 + 40 >> 2] - HEAP32[$2 + 16 >> 2] | 0);
     break label$21;
    }
    label$23: {
     label$24: {
      if (HEAP8[$2 + 55 | 0] & 1) {
       break label$24;
      }
      if (!(jsvIsFlashString(HEAP32[HEAP32[38615] + 84 >> 2]) & 1)) {
       break label$24;
      }
      HEAP32[$2 + 12 >> 2] = jsvStringIteratorGetIndex_3($2 + 56 | 0) - 1;
      $0 = HEAP32[HEAP32[38615] + 84 >> 2];
      HEAP32[$2 + 20 >> 2] = jsvNewFlashString(HEAP32[$2 + 12 >> 2] + (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) | 0, HEAP32[$2 + 40 >> 2] - HEAP32[$2 + 12 >> 2] | 0);
      break label$23;
     }
     label$25: {
      if (wasm2js_i32$0 = 1, wasm2js_i32$1 = jsfGetFlag(8) & 1, wasm2js_i32$2 = HEAP8[$2 + 55 | 0] & 1, 
      wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) {
       HEAP32[$2 + 20 >> 2] = jslNewTokenisedStringFromLexer($2 + 56 | 0, HEAP32[$2 + 40 >> 2]);
       break label$25;
      }
      HEAP32[$2 + 20 >> 2] = jslNewStringFromLexer($2 + 56 | 0, HEAP32[$2 + 40 >> 2]);
     }
    }
   }
   jsvAddNamedChildAndUnLock(HEAP32[$2 + 104 >> 2], HEAP32[$2 + 20 >> 2], 105817);
   HEAP32[$2 + 8 >> 2] = jspeiGetScopesAsVar();
   if (HEAP32[$2 + 8 >> 2]) {
    jsvAddNamedChildAndUnLock(HEAP32[$2 + 104 >> 2], HEAP32[$2 + 8 >> 2], 102046);
   }
  }
  jslCharPosFree($2 + 56 | 0);
  if (!(HEAP8[$2 + 103 | 0] & 1)) {
   if (!(jslMatch(125) & 1)) {
    HEAP8[$2 + 111 | 0] = 0;
    break label$1;
   }
  }
  HEAP8[$2 + 111 | 0] = HEAP8[$2 + 27 | 0] & 1;
 }
 __stack_pointer = $2 + 112 | 0;
 return HEAP8[$2 + 111 | 0] & 1;
}

function tflite__ops__micro__fully_connected__EvalQuantized_28TfLiteContext__2c_20TfLiteNode__2c_20tflite__ops__micro__fully_connected___28anonymous_20namespace_29__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0;
 $7 = __stack_pointer - 288 | 0;
 __stack_pointer = $7;
 HEAP32[$7 + 280 >> 2] = $0;
 HEAP32[$7 + 276 >> 2] = $1;
 HEAP32[$7 + 272 >> 2] = $2;
 HEAP32[$7 + 268 >> 2] = $3;
 HEAP32[$7 + 264 >> 2] = $4;
 HEAP32[$7 + 260 >> 2] = $5;
 HEAP32[$7 + 256 >> 2] = $6;
 HEAP32[$7 + 252 >> 2] = 0 - HEAP32[HEAP32[$7 + 272 >> 2] + 20 >> 2];
 HEAP32[$7 + 248 >> 2] = 0 - HEAP32[HEAP32[$7 + 272 >> 2] + 24 >> 2];
 HEAP32[$7 + 244 >> 2] = HEAP32[HEAP32[$7 + 272 >> 2] + 28 >> 2];
 HEAP32[$7 + 200 >> 2] = HEAP32[$7 + 252 >> 2];
 HEAP32[$7 + 204 >> 2] = HEAP32[$7 + 248 >> 2];
 HEAP32[$7 + 208 >> 2] = HEAP32[$7 + 244 >> 2];
 HEAP32[$7 + 212 >> 2] = HEAP32[HEAP32[$7 + 272 >> 2] >> 2];
 HEAP32[$7 + 216 >> 2] = 0 - HEAP32[HEAP32[$7 + 272 >> 2] + 4 >> 2];
 HEAP32[$7 + 220 >> 2] = HEAP32[HEAP32[$7 + 272 >> 2] + 8 >> 2];
 HEAP32[$7 + 224 >> 2] = HEAP32[HEAP32[$7 + 272 >> 2] + 12 >> 2];
 label$1: {
  label$2: {
   label$3: {
    switch (HEAP32[HEAP32[$7 + 256 >> 2] + 8 >> 2] - 3 | 0) {
    case 0:
     tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($7 + 176 | 0, HEAP32[$7 + 268 >> 2]);
     $0 = unsigned_20char_20const__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor_20const__29(HEAP32[$7 + 268 >> 2]);
     tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($7 + 152 | 0, HEAP32[$7 + 264 >> 2]);
     $1 = unsigned_20char_20const__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor_20const__29(HEAP32[$7 + 264 >> 2]);
     tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($7 + 128 | 0, HEAP32[$7 + 260 >> 2]);
     $2 = int_20const__20tflite__micro__GetTensorData_int__28TfLiteEvalTensor_20const__29(HEAP32[$7 + 260 >> 2]);
     tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($7 + 104 | 0, HEAP32[$7 + 256 >> 2]);
     tflite__reference_ops__FullyConnected_28tflite__FullyConnectedParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($7 + 200 | 0, $7 + 176 | 0, $0, $7 + 152 | 0, $1, $7 + 128 | 0, $2, $7 + 104 | 0, unsigned_20char__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor__29(HEAP32[$7 + 256 >> 2]));
     tflite__RuntimeShape___RuntimeShape_28_29($7 + 104 | 0);
     tflite__RuntimeShape___RuntimeShape_28_29($7 + 128 | 0);
     tflite__RuntimeShape___RuntimeShape_28_29($7 + 152 | 0);
     tflite__RuntimeShape___RuntimeShape_28_29($7 + 176 | 0);
     break label$2;

    case 4:
     tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($7 + 80 | 0, HEAP32[$7 + 268 >> 2]);
     $0 = unsigned_20char_20const__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor_20const__29(HEAP32[$7 + 268 >> 2]);
     tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($7 + 56 | 0, HEAP32[$7 + 264 >> 2]);
     $1 = unsigned_20char_20const__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor_20const__29(HEAP32[$7 + 264 >> 2]);
     tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($7 + 32 | 0, HEAP32[$7 + 260 >> 2]);
     $2 = int_20const__20tflite__micro__GetTensorData_int__28TfLiteEvalTensor_20const__29(HEAP32[$7 + 260 >> 2]);
     tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($7 + 8 | 0, HEAP32[$7 + 256 >> 2]);
     tflite__reference_ops__FullyConnected_28tflite__FullyConnectedParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20short__29($7 + 200 | 0, $7 + 80 | 0, $0, $7 + 56 | 0, $1, $7 + 32 | 0, $2, $7 + 8 | 0, short__20tflite__micro__GetTensorData_short__28TfLiteEvalTensor__29(HEAP32[$7 + 256 >> 2]));
     tflite__RuntimeShape___RuntimeShape_28_29($7 + 8 | 0);
     tflite__RuntimeShape___RuntimeShape_28_29($7 + 32 | 0);
     tflite__RuntimeShape___RuntimeShape_28_29($7 + 56 | 0);
     tflite__RuntimeShape___RuntimeShape_28_29($7 + 80 | 0);
     break label$2;

    default:
     break label$3;
    }
   }
   $0 = HEAP32[HEAP32[$7 + 280 >> 2] + 20 >> 2];
   $1 = HEAP32[$7 + 280 >> 2];
   $2 = TfLiteTypeGetName(HEAP32[HEAP32[$7 + 256 >> 2] + 8 >> 2]);
   HEAP32[$7 + 4 >> 2] = HEAP32[HEAP32[$7 + 256 >> 2] + 8 >> 2];
   HEAP32[$7 >> 2] = $2;
   FUNCTION_TABLE[$0 | 0]($1, 112123, $7);
   HEAP32[$7 + 284 >> 2] = 1;
   break label$1;
  }
  HEAP32[$7 + 284 >> 2] = 0;
 }
 __stack_pointer = $7 + 288 | 0;
 return HEAP32[$7 + 284 >> 2];
}

function jswrap_graphics_floodFill($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 128 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 120 >> 2] = $0;
 HEAP32[$4 + 116 >> 2] = $1;
 HEAP32[$4 + 112 >> 2] = $2;
 HEAP32[$4 + 108 >> 2] = $3;
 label$1: {
  if (!(graphicsGetFromVar($4 + 32 | 0, HEAP32[$4 + 120 >> 2]) & 1)) {
   HEAP32[$4 + 124 >> 2] = 0;
   break label$1;
  }
  if ((HEAPU8[$4 + 92 | 0] | HEAPU8[$4 + 93 | 0] << 8 | (HEAPU8[$4 + 94 | 0] << 16 | HEAPU8[$4 + 95 | 0] << 24)) == 559) {
   jsExceptionHere(1, 102742, 0);
   HEAP32[$4 + 124 >> 2] = 0;
   break label$1;
  }
  HEAP32[$4 + 28 >> 2] = HEAPU8[$4 + 49 | 0] | HEAPU8[$4 + 50 | 0] << 8 | (HEAPU8[$4 + 51 | 0] << 16 | HEAPU8[$4 + 52 | 0] << 24);
  if (HEAP32[$4 + 108 >> 2]) {
   HEAP32[$4 + 28 >> 2] = jswrap_graphics_toColor(HEAP32[$4 + 120 >> 2], HEAP32[$4 + 108 >> 2], 0, 0);
  }
  HEAP32[$4 + 24 >> 2] = graphicsGetPixel($4 + 32 | 0, HEAP32[$4 + 116 >> 2], HEAP32[$4 + 112 >> 2]);
  HEAP32[$4 + 20 >> 2] = 64;
  HEAP32[$4 + 16 >> 2] = $4;
  $0 = $4 - 128 | 0;
  __stack_pointer = $0;
  HEAP32[$4 + 12 >> 2] = 0;
  label$5: {
   if (HEAP32[$4 + 12 >> 2] < 64) {
    $2 = HEAP32[$4 + 116 >> 2];
    $1 = HEAP32[$4 + 12 >> 2];
    HEAP32[$4 + 12 >> 2] = $1 + 1;
    HEAP16[($1 << 1) + $0 >> 1] = $2;
    $2 = HEAP32[$4 + 112 >> 2];
    $1 = HEAP32[$4 + 12 >> 2];
    HEAP32[$4 + 12 >> 2] = $1 + 1;
    HEAP16[($1 << 1) + $0 >> 1] = $2;
    break label$5;
   }
   HEAP32[$4 + 12 >> 2] = 65;
  }
  while (1) {
   $1 = 0;
   $1 = HEAP32[$4 + 12 >> 2] > 0 ? HEAP32[$4 + 12 >> 2] <= 64 : $1;
   if ($1) {
    $1 = HEAP32[$4 + 12 >> 2] - 1 | 0;
    HEAP32[$4 + 12 >> 2] = $1;
    HEAP16[$4 + 10 >> 1] = HEAPU16[($1 << 1) + $0 >> 1];
    $1 = HEAP32[$4 + 12 >> 2] - 1 | 0;
    HEAP32[$4 + 12 >> 2] = $1;
    HEAP16[$4 + 8 >> 1] = HEAPU16[($1 << 1) + $0 >> 1];
    HEAP16[$4 + 6 >> 1] = HEAPU16[$4 + 8 >> 1];
    while (1) {
     if (_jswrap_graphics_floodFill_inside($4 + 32 | 0, HEAP16[$4 + 6 >> 1] - 1 | 0, HEAP16[$4 + 10 >> 1], HEAP32[$4 + 24 >> 2]) & 1) {
      $1 = HEAPU16[$4 + 6 >> 1] - 1 | 0;
      HEAP16[$4 + 6 >> 1] = $1;
      graphicsSetPixel($4 + 32 | 0, $1 << 16 >> 16, HEAP16[$4 + 10 >> 1], HEAP32[$4 + 28 >> 2]);
      continue;
     }
     break;
    }
    while (1) {
     if (_jswrap_graphics_floodFill_inside($4 + 32 | 0, HEAP16[$4 + 8 >> 1], HEAP16[$4 + 10 >> 1], HEAP32[$4 + 24 >> 2]) & 1) {
      $1 = HEAPU16[$4 + 8 >> 1];
      HEAP16[$4 + 8 >> 1] = $1 + 1;
      graphicsSetPixel($4 + 32 | 0, $1 << 16 >> 16, HEAP16[$4 + 10 >> 1], HEAP32[$4 + 28 >> 2]);
      continue;
     }
     break;
    }
    HEAP8[$4 + 5 | 0] = 0;
    HEAP16[$4 + 2 >> 1] = HEAPU16[$4 + 6 >> 1];
    while (1) {
     if (HEAP16[$4 + 2 >> 1] < HEAP16[$4 + 8 >> 1]) {
      label$16: {
       if (!(_jswrap_graphics_floodFill_inside($4 + 32 | 0, HEAP16[$4 + 2 >> 1], HEAP16[$4 + 10 >> 1] + 1 | 0, HEAP32[$4 + 24 >> 2]) & 1)) {
        HEAP8[$4 + 5 | 0] = 0;
        break label$16;
       }
       if (!(HEAP8[$4 + 5 | 0] & 1)) {
        label$19: {
         if (HEAP32[$4 + 12 >> 2] < 64) {
          $2 = HEAPU16[$4 + 2 >> 1];
          $1 = HEAP32[$4 + 12 >> 2];
          HEAP32[$4 + 12 >> 2] = $1 + 1;
          HEAP16[($1 << 1) + $0 >> 1] = $2;
          $2 = HEAP16[$4 + 10 >> 1];
          $1 = HEAP32[$4 + 12 >> 2];
          HEAP32[$4 + 12 >> 2] = $1 + 1;
          HEAP16[($1 << 1) + $0 >> 1] = $2 + 1;
          break label$19;
         }
         HEAP32[$4 + 12 >> 2] = 65;
        }
        HEAP8[$4 + 5 | 0] = 1;
       }
      }
      HEAP16[$4 + 2 >> 1] = HEAPU16[$4 + 2 >> 1] + 1;
      continue;
     }
     break;
    }
    HEAP8[$4 + 5 | 0] = 0;
    HEAP16[$4 >> 1] = HEAPU16[$4 + 6 >> 1];
    while (1) {
     if (HEAP16[$4 >> 1] < HEAP16[$4 + 8 >> 1]) {
      label$23: {
       if (!(_jswrap_graphics_floodFill_inside($4 + 32 | 0, HEAP16[$4 >> 1], HEAP16[$4 + 10 >> 1] - 1 | 0, HEAP32[$4 + 24 >> 2]) & 1)) {
        HEAP8[$4 + 5 | 0] = 0;
        break label$23;
       }
       if (!(HEAP8[$4 + 5 | 0] & 1)) {
        label$26: {
         if (HEAP32[$4 + 12 >> 2] < 64) {
          $2 = HEAPU16[$4 >> 1];
          $1 = HEAP32[$4 + 12 >> 2];
          HEAP32[$4 + 12 >> 2] = $1 + 1;
          HEAP16[($1 << 1) + $0 >> 1] = $2;
          $2 = HEAP16[$4 + 10 >> 1];
          $1 = HEAP32[$4 + 12 >> 2];
          HEAP32[$4 + 12 >> 2] = $1 + 1;
          HEAP16[($1 << 1) + $0 >> 1] = $2 - 1;
          break label$26;
         }
         HEAP32[$4 + 12 >> 2] = 65;
        }
        HEAP8[$4 + 5 | 0] = 1;
       }
      }
      HEAP16[$4 >> 1] = HEAPU16[$4 >> 1] + 1;
      continue;
     }
     break;
    }
    continue;
   }
   break;
  }
  if (HEAP32[$4 + 12 >> 2]) {
   jsiConsolePrintf(127852, 0);
  }
  graphicsSetVar($4 + 32 | 0);
  HEAP32[$4 + 124 >> 2] = jsvLockAgain(HEAP32[$4 + 120 >> 2]);
 }
 __stack_pointer = $4 + 128 | 0;
 return HEAP32[$4 + 124 >> 2];
}

function FFT($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 128 | 0;
 __stack_pointer = $4;
 HEAP16[$4 + 126 >> 1] = $0;
 HEAP32[$4 + 120 >> 2] = $1;
 HEAP32[$4 + 116 >> 2] = $2;
 HEAP32[$4 + 112 >> 2] = $3;
 HEAP32[$4 + 108 >> 2] = 1;
 HEAP32[$4 + 104 >> 2] = 0;
 while (1) {
  if (HEAP32[$4 + 104 >> 2] < HEAP32[$4 + 120 >> 2]) {
   HEAP32[$4 + 108 >> 2] = HEAP32[$4 + 108 >> 2] << 1;
   HEAP32[$4 + 104 >> 2] = HEAP32[$4 + 104 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$4 + 88 >> 2] = HEAP32[$4 + 108 >> 2] >> 1;
 HEAP32[$4 + 96 >> 2] = 0;
 HEAP32[$4 + 104 >> 2] = 0;
 while (1) {
  if (HEAP32[$4 + 104 >> 2] < (HEAP32[$4 + 108 >> 2] - 1 | 0)) {
   if (HEAP32[$4 + 104 >> 2] < HEAP32[$4 + 96 >> 2]) {
    HEAPF64[$4 + 48 >> 3] = HEAPF64[HEAP32[$4 + 116 >> 2] + (HEAP32[$4 + 104 >> 2] << 3) >> 3];
    HEAPF64[$4 + 40 >> 3] = HEAPF64[HEAP32[$4 + 112 >> 2] + (HEAP32[$4 + 104 >> 2] << 3) >> 3];
    HEAPF64[HEAP32[$4 + 116 >> 2] + (HEAP32[$4 + 104 >> 2] << 3) >> 3] = HEAPF64[HEAP32[$4 + 116 >> 2] + (HEAP32[$4 + 96 >> 2] << 3) >> 3];
    HEAPF64[HEAP32[$4 + 112 >> 2] + (HEAP32[$4 + 104 >> 2] << 3) >> 3] = HEAPF64[HEAP32[$4 + 112 >> 2] + (HEAP32[$4 + 96 >> 2] << 3) >> 3];
    HEAPF64[HEAP32[$4 + 116 >> 2] + (HEAP32[$4 + 96 >> 2] << 3) >> 3] = HEAPF64[$4 + 48 >> 3];
    HEAPF64[HEAP32[$4 + 112 >> 2] + (HEAP32[$4 + 96 >> 2] << 3) >> 3] = HEAPF64[$4 + 40 >> 3];
   }
   HEAP32[$4 + 92 >> 2] = HEAP32[$4 + 88 >> 2];
   while (1) {
    if (HEAP32[$4 + 92 >> 2] <= HEAP32[$4 + 96 >> 2]) {
     HEAP32[$4 + 96 >> 2] = HEAP32[$4 + 96 >> 2] - HEAP32[$4 + 92 >> 2];
     HEAP32[$4 + 92 >> 2] = HEAP32[$4 + 92 >> 2] >> 1;
     continue;
    }
    break;
   }
   HEAP32[$4 + 96 >> 2] = HEAP32[$4 + 92 >> 2] + HEAP32[$4 + 96 >> 2];
   HEAP32[$4 + 104 >> 2] = HEAP32[$4 + 104 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAPF64[$4 + 64 >> 3] = -1;
 HEAPF64[$4 + 56 >> 3] = 0;
 HEAP32[$4 + 76 >> 2] = 1;
 HEAP32[$4 + 84 >> 2] = 0;
 while (1) {
  if (HEAP32[$4 + 84 >> 2] < HEAP32[$4 + 120 >> 2]) {
   HEAP32[$4 + 80 >> 2] = HEAP32[$4 + 76 >> 2];
   HEAP32[$4 + 76 >> 2] = HEAP32[$4 + 76 >> 2] << 1;
   HEAPF64[$4 + 16 >> 3] = 1;
   HEAPF64[$4 + 8 >> 3] = 0;
   HEAP32[$4 + 96 >> 2] = 0;
   while (1) {
    if (HEAP32[$4 + 96 >> 2] < HEAP32[$4 + 80 >> 2]) {
     HEAP32[$4 + 104 >> 2] = HEAP32[$4 + 96 >> 2];
     while (1) {
      if (HEAP32[$4 + 104 >> 2] < HEAP32[$4 + 108 >> 2]) {
       HEAP32[$4 + 100 >> 2] = HEAP32[$4 + 104 >> 2] + HEAP32[$4 + 80 >> 2];
       HEAPF64[$4 + 32 >> 3] = HEAPF64[$4 + 16 >> 3] * HEAPF64[HEAP32[$4 + 116 >> 2] + (HEAP32[$4 + 100 >> 2] << 3) >> 3] + -(HEAPF64[$4 + 8 >> 3] * HEAPF64[HEAP32[$4 + 112 >> 2] + (HEAP32[$4 + 100 >> 2] << 3) >> 3]);
       HEAPF64[$4 + 24 >> 3] = HEAPF64[$4 + 16 >> 3] * HEAPF64[HEAP32[$4 + 112 >> 2] + (HEAP32[$4 + 100 >> 2] << 3) >> 3] + HEAPF64[$4 + 8 >> 3] * HEAPF64[HEAP32[$4 + 116 >> 2] + (HEAP32[$4 + 100 >> 2] << 3) >> 3];
       HEAPF64[HEAP32[$4 + 116 >> 2] + (HEAP32[$4 + 100 >> 2] << 3) >> 3] = HEAPF64[HEAP32[$4 + 116 >> 2] + (HEAP32[$4 + 104 >> 2] << 3) >> 3] - HEAPF64[$4 + 32 >> 3];
       HEAPF64[HEAP32[$4 + 112 >> 2] + (HEAP32[$4 + 100 >> 2] << 3) >> 3] = HEAPF64[HEAP32[$4 + 112 >> 2] + (HEAP32[$4 + 104 >> 2] << 3) >> 3] - HEAPF64[$4 + 24 >> 3];
       $0 = HEAP32[$4 + 116 >> 2] + (HEAP32[$4 + 104 >> 2] << 3) | 0;
       HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] + HEAPF64[$4 + 32 >> 3];
       $0 = HEAP32[$4 + 112 >> 2] + (HEAP32[$4 + 104 >> 2] << 3) | 0;
       HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] + HEAPF64[$4 + 24 >> 3];
       HEAP32[$4 + 104 >> 2] = HEAP32[$4 + 76 >> 2] + HEAP32[$4 + 104 >> 2];
       continue;
      }
      break;
     }
     HEAPF64[$4 >> 3] = HEAPF64[$4 + 16 >> 3] * HEAPF64[$4 + 64 >> 3] + -(HEAPF64[$4 + 8 >> 3] * HEAPF64[$4 + 56 >> 3]);
     HEAPF64[$4 + 8 >> 3] = HEAPF64[$4 + 16 >> 3] * HEAPF64[$4 + 56 >> 3] + HEAPF64[$4 + 8 >> 3] * HEAPF64[$4 + 64 >> 3];
     HEAPF64[$4 + 16 >> 3] = HEAPF64[$4 >> 3];
     HEAP32[$4 + 96 >> 2] = HEAP32[$4 + 96 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAPF64[$4 + 56 >> 3] = jswrap_math_sqrt((1 - HEAPF64[$4 + 64 >> 3]) * .5);
   if (HEAP16[$4 + 126 >> 1] == 1) {
    HEAPF64[$4 + 56 >> 3] = -HEAPF64[$4 + 56 >> 3];
   }
   HEAPF64[$4 + 64 >> 3] = jswrap_math_sqrt((HEAPF64[$4 + 64 >> 3] + 1) * .5);
   HEAP32[$4 + 84 >> 2] = HEAP32[$4 + 84 >> 2] + 1;
   continue;
  }
  break;
 }
 if (HEAP16[$4 + 126 >> 1] == 1) {
  HEAP32[$4 + 104 >> 2] = 0;
  while (1) {
   if (HEAP32[$4 + 104 >> 2] < HEAP32[$4 + 108 >> 2]) {
    $0 = HEAP32[$4 + 116 >> 2] + (HEAP32[$4 + 104 >> 2] << 3) | 0;
    HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] / +HEAP32[$4 + 108 >> 2];
    $0 = HEAP32[$4 + 112 >> 2] + (HEAP32[$4 + 104 >> 2] << 3) | 0;
    HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] / +HEAP32[$4 + 108 >> 2];
    HEAP32[$4 + 104 >> 2] = HEAP32[$4 + 104 >> 2] + 1;
    continue;
   }
   break;
  }
 }
 __stack_pointer = $4 + 128 | 0;
 return 1;
}

function lcdSetPixels_ArrayBuffer($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 128 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 124 >> 2] = $0;
 HEAP32[$5 + 120 >> 2] = $1;
 HEAP32[$5 + 116 >> 2] = $2;
 HEAP32[$5 + 112 >> 2] = $3;
 HEAP32[$5 + 108 >> 2] = $4;
 $0 = HEAP32[$5 + 124 >> 2];
 HEAP32[$5 + 104 >> 2] = HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24);
 HEAP32[$5 + 100 >> 2] = lcdGetPixelIndex_ArrayBuffer(HEAP32[$5 + 124 >> 2], HEAP32[$5 + 120 >> 2], HEAP32[$5 + 116 >> 2], HEAP32[$5 + 112 >> 2]);
 jsvArrayBufferIteratorNew($5 + 40 | 0, HEAP32[$5 + 104 >> 2], HEAP32[$5 + 100 >> 2] >>> 3 | 0);
 HEAP32[$5 + 36 >> 2] = (1 << HEAPU8[HEAP32[$5 + 124 >> 2] + 16 | 0]) - 1;
 label$1: {
  if (HEAP32[$5 + 108 >> 2]) {
   $0 = 0;
   if (HEAP32[$5 + 36 >> 2] != (HEAP32[$5 + 108 >> 2] & HEAP32[$5 + 36 >> 2])) {
    break label$1;
   }
  }
  $0 = HEAP32[$5 + 124 >> 2];
  $0 = ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 2) != 0 ^ -1;
 }
 HEAP8[$5 + 35 | 0] = $0 & 1;
 HEAP32[$5 + 28 >> 2] = HEAPU8[HEAP32[$5 + 124 >> 2] + 16 | 0];
 $0 = HEAP32[$5 + 124 >> 2];
 if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 8) {
  HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 28 >> 2] << 1;
  HEAP8[$5 + 35 | 0] = 0;
 }
 while (1) {
  label$5: {
   $0 = HEAP32[$5 + 112 >> 2];
   HEAP32[$5 + 112 >> 2] = $0 - 1;
   if (!$0) {
    break label$5;
   }
   label$6: {
    if (HEAPU8[HEAP32[$5 + 124 >> 2] + 16 | 0] & 7) {
     HEAP32[$5 + 100 >> 2] = HEAP32[$5 + 100 >> 2] & 7;
     if (!(HEAP32[$5 + 100 >> 2] | !(HEAP8[$5 + 35 | 0] & 1))) {
      HEAP32[$5 + 24 >> 2] = Math_imul(HEAPU8[HEAP32[$5 + 124 >> 2] + 16 | 0], HEAP32[$5 + 112 >> 2] + 1 | 0) >> 3;
      if (HEAP32[$5 + 24 >> 2]) {
       HEAP8[$5 + 23 | 0] = HEAP32[$5 + 108 >> 2] ? 255 : 0;
       HEAP32[$5 + 112 >> 2] = (HEAP32[$5 + 112 >> 2] + 1 | 0) - ((HEAP32[$5 + 24 >> 2] << 3) / HEAPU8[HEAP32[$5 + 124 >> 2] + 16 | 0] | 0);
       while (1) {
        $0 = HEAP32[$5 + 24 >> 2];
        HEAP32[$5 + 24 >> 2] = $0 - 1;
        if ($0) {
         jsvArrayBufferIteratorSetByteValue($5 + 40 | 0, HEAP8[$5 + 23 | 0]);
         jsvArrayBufferIteratorNext($5 + 40 | 0);
         continue;
        }
        break;
       }
       continue;
      }
     }
     HEAP32[$5 + 16 >> 2] = (1 << HEAPU8[HEAP32[$5 + 124 >> 2] + 16 | 0]) - 1;
     HEAP32[$5 + 12 >> 2] = jsvArrayBufferIteratorGetIntegerValue($5 + 40 | 0);
     $0 = HEAP32[$5 + 124 >> 2];
     if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 4) {
      $0 = 8 - (HEAP32[$5 + 100 >> 2] + HEAPU8[HEAP32[$5 + 124 >> 2] + 16 | 0] | 0) | 0;
     } else {
      $0 = HEAP32[$5 + 100 >> 2];
     }
     HEAP32[$5 + 8 >> 2] = $0;
     jsvArrayBufferIteratorSetByteValue($5 + 40 | 0, (HEAP32[$5 + 12 >> 2] & (HEAP32[$5 + 16 >> 2] << HEAP32[$5 + 8 >> 2] ^ -1) | (HEAP32[$5 + 108 >> 2] & HEAP32[$5 + 16 >> 2]) << HEAP32[$5 + 8 >> 2]) << 24 >> 24);
     $0 = HEAP32[$5 + 124 >> 2];
     label$14: {
      if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 2) {
       jsvArrayBufferIteratorNext($5 + 40 | 0);
       break label$14;
      }
      HEAP32[$5 + 100 >> 2] = HEAP32[$5 + 28 >> 2] + HEAP32[$5 + 100 >> 2];
      if (HEAPU32[$5 + 100 >> 2] >= 8) {
       jsvArrayBufferIteratorNext($5 + 40 | 0);
      }
     }
     break label$6;
    }
    $0 = HEAP32[$5 + 124 >> 2];
    label$17: {
     if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 4) {
      HEAP32[$5 + 4 >> 2] = HEAPU8[HEAP32[$5 + 124 >> 2] + 16 | 0] - 8;
      while (1) {
       if (HEAP32[$5 + 4 >> 2] >= 0) {
        jsvArrayBufferIteratorSetByteValue($5 + 40 | 0, HEAP32[$5 + 108 >> 2] >>> HEAP32[$5 + 4 >> 2] << 24 >> 24);
        jsvArrayBufferIteratorNext($5 + 40 | 0);
        HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] - 8;
        continue;
       }
       break;
      }
      break label$17;
     }
     HEAP32[$5 >> 2] = 0;
     while (1) {
      if (HEAP32[$5 >> 2] < HEAPU8[HEAP32[$5 + 124 >> 2] + 16 | 0]) {
       jsvArrayBufferIteratorSetByteValue($5 + 40 | 0, HEAP32[$5 + 108 >> 2] >>> HEAP32[$5 >> 2] << 24 >> 24);
       jsvArrayBufferIteratorNext($5 + 40 | 0);
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 8;
       continue;
      }
      break;
     }
    }
   }
   continue;
  }
  break;
 }
 jsvArrayBufferIteratorFree($5 + 40 | 0);
 __stack_pointer = $5 + 128 | 0;
}

function tflite__ops__micro__quantize__Prepare_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 160 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 152 >> 2] = $0;
 HEAP32[$2 + 148 >> 2] = $1;
 label$1: {
  if (!HEAP32[HEAP32[$2 + 148 >> 2] + 8 >> 2]) {
   break label$1;
  }
 }
 HEAP32[$2 + 144 >> 2] = HEAP32[HEAP32[$2 + 148 >> 2] + 8 >> 2];
 label$2: {
  if ((tflite__NumInputs_28TfLiteNode_20const__29(HEAP32[$2 + 148 >> 2]) | 0) != 1) {
   $0 = HEAP32[HEAP32[$2 + 152 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 152 >> 2];
   $3 = tflite__NumInputs_28TfLiteNode_20const__29(HEAP32[$2 + 148 >> 2]);
   HEAP32[$2 + 12 >> 2] = 1;
   HEAP32[$2 + 8 >> 2] = $3;
   HEAP32[$2 + 4 >> 2] = 111277;
   HEAP32[$2 >> 2] = 126274;
   FUNCTION_TABLE[$0 | 0]($1, 126505, $2);
   HEAP32[$2 + 156 >> 2] = 1;
   break label$2;
  }
  if ((tflite__NumOutputs_28TfLiteNode_20const__29(HEAP32[$2 + 148 >> 2]) | 0) != 1) {
   $0 = HEAP32[HEAP32[$2 + 152 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 152 >> 2];
   $3 = tflite__NumOutputs_28TfLiteNode_20const__29(HEAP32[$2 + 148 >> 2]);
   HEAP32[$2 + 28 >> 2] = 1;
   HEAP32[$2 + 24 >> 2] = $3;
   HEAP32[$2 + 20 >> 2] = 111277;
   HEAP32[$2 + 16 >> 2] = 126257;
   FUNCTION_TABLE[$0 | 0]($1, 126505, $2 + 16 | 0);
   HEAP32[$2 + 156 >> 2] = 1;
   break label$2;
  }
  HEAP32[$2 + 140 >> 2] = tflite__GetInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 152 >> 2], HEAP32[$2 + 148 >> 2], 0);
  HEAP32[$2 + 136 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 152 >> 2], HEAP32[$2 + 148 >> 2], 0);
  if (HEAP32[HEAP32[$2 + 136 >> 2] >> 2] != 1) {
   $0 = HEAP32[HEAP32[$2 + 152 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 152 >> 2];
   $3 = HEAP32[HEAP32[$2 + 136 >> 2] >> 2];
   HEAP32[$2 + 44 >> 2] = 1;
   HEAP32[$2 + 40 >> 2] = $3;
   HEAP32[$2 + 36 >> 2] = 102382;
   HEAP32[$2 + 32 >> 2] = 104888;
   FUNCTION_TABLE[$0 | 0]($1, 126505, $2 + 32 | 0);
   HEAP32[$2 + 156 >> 2] = 1;
   break label$2;
  }
  HEAP32[$2 + 132 >> 2] = HEAP32[HEAP32[$2 + 136 >> 2] + 4 >> 2];
  if (!HEAP32[$2 + 132 >> 2]) {
   $0 = HEAP32[HEAP32[$2 + 152 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 152 >> 2];
   HEAP32[$2 + 112 >> 2] = 102362;
   FUNCTION_TABLE[$0 | 0]($1, 111890, $2 + 112 | 0);
   HEAP32[$2 + 156 >> 2] = 1;
   break label$2;
  }
  if (!HEAP32[HEAP32[$2 + 132 >> 2] >> 2]) {
   $0 = HEAP32[HEAP32[$2 + 152 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 152 >> 2];
   HEAP32[$2 + 96 >> 2] = 105213;
   FUNCTION_TABLE[$0 | 0]($1, 111890, $2 + 96 | 0);
   HEAP32[$2 + 156 >> 2] = 1;
   break label$2;
  }
  if (HEAP32[HEAP32[HEAP32[$2 + 132 >> 2] >> 2] >> 2] != 1) {
   $0 = HEAP32[HEAP32[$2 + 152 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 152 >> 2];
   HEAP32[$2 + 80 >> 2] = 111241;
   FUNCTION_TABLE[$0 | 0]($1, 111890, $2 + 80 | 0);
   HEAP32[$2 + 156 >> 2] = 1;
   break label$2;
  }
  if (!(HEAP32[HEAP32[$2 + 140 >> 2] + 28 >> 2] == 1 | HEAP32[HEAP32[$2 + 140 >> 2] + 28 >> 2] == 7 | HEAP32[HEAP32[$2 + 140 >> 2] + 28 >> 2] == 9)) {
   $0 = HEAP32[HEAP32[$2 + 152 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 152 >> 2];
   HEAP32[$2 + 64 >> 2] = 110370;
   FUNCTION_TABLE[$0 | 0]($1, 111890, $2 - -64 | 0);
   HEAP32[$2 + 156 >> 2] = 1;
   break label$2;
  }
  if (!(HEAP32[HEAP32[$2 + 136 >> 2] + 28 >> 2] == 3 | HEAP32[HEAP32[$2 + 136 >> 2] + 28 >> 2] == 9 | HEAP32[HEAP32[$2 + 136 >> 2] + 28 >> 2] == 7)) {
   $0 = HEAP32[HEAP32[$2 + 152 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 152 >> 2];
   HEAP32[$2 + 48 >> 2] = 110547;
   FUNCTION_TABLE[$0 | 0]($1, 111890, $2 + 48 | 0);
   HEAP32[$2 + 156 >> 2] = 1;
   break label$2;
  }
  label$11: {
   if (!(!(HEAP32[HEAP32[$2 + 140 >> 2] + 28 >> 2] != 7 & HEAP32[HEAP32[$2 + 140 >> 2] + 28 >> 2] != 9) & HEAP32[HEAP32[$2 + 136 >> 2] + 28 >> 2] == 9)) {
    if (HEAP32[HEAP32[$2 + 140 >> 2] + 28 >> 2] != 7 | HEAP32[HEAP32[$2 + 136 >> 2] + 28 >> 2] != 7) {
     break label$11;
    }
   }
   HEAPF64[$2 + 120 >> 3] = Math_fround(HEAPF32[HEAP32[$2 + 140 >> 2] + 8 >> 2] / HEAPF32[HEAP32[$2 + 136 >> 2] + 8 >> 2]);
   tflite__QuantizeMultiplier_28double_2c_20int__2c_20int__29(HEAPF64[$2 + 120 >> 3], HEAP32[$2 + 144 >> 2] + 16 | 0, HEAP32[$2 + 144 >> 2] + 20 | 0);
  }
  HEAP32[HEAP32[$2 + 144 >> 2] >> 2] = HEAP32[HEAP32[$2 + 136 >> 2] + 12 >> 2];
  HEAPF64[HEAP32[$2 + 144 >> 2] + 8 >> 3] = HEAPF32[HEAP32[$2 + 136 >> 2] + 8 >> 2];
  HEAP32[HEAP32[$2 + 144 >> 2] + 24 >> 2] = HEAP32[HEAP32[$2 + 140 >> 2] + 12 >> 2];
  HEAP32[$2 + 156 >> 2] = 0;
 }
 __stack_pointer = $2 + 160 | 0;
 return HEAP32[$2 + 156 >> 2];
}

function jspeFactorObject() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 112 | 0;
 __stack_pointer = $0;
 label$1: {
  if ((HEAP32[46755] & 63) == 1) {
   HEAP32[$0 + 104 >> 2] = jsvNewObject();
   if (!HEAP32[$0 + 104 >> 2]) {
    jspSetError(0);
    HEAP32[$0 + 108 >> 2] = 0;
    break label$1;
   }
   if (!(jslMatch(123) & 1)) {
    HEAP32[$0 + 108 >> 2] = HEAP32[$0 + 104 >> 2];
    break label$1;
   }
   while (1) {
    $1 = 0;
    $1 = HEAP32[46755] & 80 ? $1 : HEAP16[HEAP32[38615] + 2 >> 1] != 125;
    if ($1) {
     HEAP32[$0 + 100 >> 2] = 0;
     HEAP8[$0 + 99 | 0] = 0;
     label$8: {
      if (jslIsIDOrReservedWord() & 1) {
       HEAP8[$0 + 99 | 0] = HEAP16[HEAP32[38615] + 2 >> 1] == 128;
       if ((HEAP32[46755] & 63) == 1) {
        HEAP32[$0 + 100 >> 2] = jslGetTokenValueAsVar();
       }
       jslGetNextToken();
       break label$8;
      }
      label$11: {
       if (!(!(HEAP16[HEAP32[38615] + 2 >> 1] == 131 | HEAP16[HEAP32[38615] + 2 >> 1] == 130) & HEAP16[HEAP32[38615] + 2 >> 1] != 129)) {
        HEAP32[$0 + 100 >> 2] = jspeFactor();
        break label$11;
       }
       if (!(jslMatch(128) & 1)) {
        HEAP32[$0 + 108 >> 2] = HEAP32[$0 + 104 >> 2];
        break label$1;
       }
      }
     }
     label$15: {
      label$16: {
       if (HEAP16[HEAP32[38615] + 2 >> 1] != 128) {
        break label$16;
       }
       if (!(jsvIsString(HEAP32[$0 + 100 >> 2]) & 1)) {
        break label$16;
       }
       HEAP8[$0 + 98 | 0] = jsvIsStringEqual(HEAP32[$0 + 100 >> 2], 98052) & 1;
       HEAP8[$0 + 97 | 0] = jsvIsStringEqual(HEAP32[$0 + 100 >> 2], 98048) & 1;
       if (HEAP8[$0 + 97 | 0] & 1 ? 1 : HEAP8[$0 + 98 | 0] & 1) {
        jsvUnLock(HEAP32[$0 + 100 >> 2]);
        HEAP32[$0 + 100 >> 2] = jslGetTokenValueAsVar();
        jslGetNextToken();
        HEAP32[$0 + 92 >> 2] = jspeFunctionDefinition(0);
        jsvAddGetterOrSetter(HEAP32[$0 + 104 >> 2], HEAP32[$0 + 100 >> 2], HEAP8[$0 + 98 | 0] & 1, HEAP32[$0 + 92 >> 2]);
        jsvUnLock(HEAP32[$0 + 92 >> 2]);
       }
       break label$15;
      }
      label$19: {
       if (HEAP16[HEAP32[38615] + 2 >> 1] == 40) {
        HEAP32[$0 + 88 >> 2] = jsvFindChildFromVar(HEAP32[$0 + 104 >> 2], HEAP32[$0 + 100 >> 2], 1);
        if (HEAP32[$0 + 88 >> 2]) {
         HEAP32[$0 + 84 >> 2] = jspeFunctionDefinition(0);
         jsvUnLock2(jsvSetValueOfName(HEAP32[$0 + 88 >> 2], HEAP32[$0 + 84 >> 2]), HEAP32[$0 + 84 >> 2]);
        }
        break label$19;
       }
       label$22: {
        label$23: {
         if (!(HEAP8[$0 + 99 | 0] & 1) | HEAP16[HEAP32[38615] + 2 >> 1] != 44 & HEAP16[HEAP32[38615] + 2 >> 1] != 125) {
          break label$23;
         }
         if (!(jsvIsString(HEAP32[$0 + 100 >> 2]) & 1)) {
          break label$23;
         }
         if ((HEAP32[46755] & 63) == 1) {
          HEAP32[$0 + 100 >> 2] = jsvAsArrayIndexAndUnLock(HEAP32[$0 + 100 >> 2]);
          HEAP32[$0 + 80 >> 2] = jsvFindChildFromVar(HEAP32[$0 + 104 >> 2], HEAP32[$0 + 100 >> 2], 1);
          if (HEAP32[$0 + 80 >> 2]) {
           jsvGetString(HEAP32[$0 + 100 >> 2], $0 + 16 | 0, 64);
           HEAP32[$0 + 12 >> 2] = jsvSkipNameAndUnLock(jspGetNamedVariable($0 + 16 | 0));
           jsvUnLock2(jsvSetValueOfName(HEAP32[$0 + 80 >> 2], HEAP32[$0 + 12 >> 2]), HEAP32[$0 + 12 >> 2]);
          }
         }
         break label$22;
        }
        if (!(jslMatch(58) & 1)) {
         jsvUnLock(HEAP32[$0 + 100 >> 2]);
         HEAP32[$0 + 108 >> 2] = HEAP32[$0 + 104 >> 2];
         break label$1;
        }
        if ((HEAP32[46755] & 63) == 1) {
         HEAP32[$0 + 100 >> 2] = jsvAsArrayIndexAndUnLock(HEAP32[$0 + 100 >> 2]);
         HEAP32[$0 + 8 >> 2] = jsvFindChildFromVar(HEAP32[$0 + 104 >> 2], HEAP32[$0 + 100 >> 2], 1);
         if (HEAP32[$0 + 8 >> 2]) {
          HEAP32[$0 + 4 >> 2] = jsvSkipNameAndUnLock(jspeAssignmentExpression());
          jsvUnLock2(jsvSetValueOfName(HEAP32[$0 + 8 >> 2], HEAP32[$0 + 4 >> 2]), HEAP32[$0 + 4 >> 2]);
         }
        }
       }
      }
     }
     jsvUnLock(HEAP32[$0 + 100 >> 2]);
     if (HEAP16[HEAP32[38615] + 2 >> 1] != 125) {
      if (!(jslMatch(44) & 1)) {
       HEAP32[$0 + 108 >> 2] = HEAP32[$0 + 104 >> 2];
       break label$1;
      }
     }
     continue;
    }
    break;
   }
   if (!(jslMatch(125) & 1)) {
    HEAP32[$0 + 108 >> 2] = HEAP32[$0 + 104 >> 2];
    break label$1;
   }
   HEAP32[$0 + 108 >> 2] = HEAP32[$0 + 104 >> 2];
   break label$1;
  }
  jspeBlock();
  HEAP32[$0 + 108 >> 2] = 0;
 }
 __stack_pointer = $0 + 112 | 0;
 return HEAP32[$0 + 108 >> 2];
}

function tflite__ParseDepthwiseConv2D_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 40 >> 2] = $0;
 HEAP32[$4 + 36 >> 2] = $1;
 HEAP32[$4 + 32 >> 2] = $2;
 HEAP32[$4 + 28 >> 2] = $3;
 tflite___28anonymous_20namespace_29__CheckParsePointerParams_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29(HEAP32[$4 + 40 >> 2], HEAP32[$4 + 36 >> 2], HEAP32[$4 + 32 >> 2], HEAP32[$4 + 28 >> 2]);
 tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__SafeBuiltinDataAllocator_28tflite__BuiltinDataAllocator__29($4 + 24 | 0, HEAP32[$4 + 32 >> 2]);
 std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteDepthwiseConvParams__28_29($4 + 16 | 0, $4 + 24 | 0);
 label$1: {
  if (!(bool_20std____2__operator___TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20const__2c_20std__nullptr_t_29($4 + 16 | 0, 0) & 1)) {
   $0 = HEAP32[$4 + 36 >> 2];
   $1 = HEAP32[$4 + 36 >> 2];
   HEAP32[$4 >> 2] = 100842;
   tflite__ErrorReporter__ReportError_28void__2c_20char_20const__2c_20____29($0, $1, 111890, $4);
   HEAP32[$4 + 44 >> 2] = 1;
   break label$1;
  }
  HEAP32[$4 + 8 >> 2] = tflite__Operator__builtin_options_as_DepthwiseConv2DOptions_28_29_20const(HEAP32[$4 + 40 >> 2]);
  if (HEAP32[$4 + 8 >> 2]) {
   $0 = tflite___28anonymous_20namespace_29__ConvertPadding_28tflite__Padding_29(tflite__DepthwiseConv2DOptions__padding_28_29_20const(HEAP32[$4 + 8 >> 2]));
   HEAP32[std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) >> 2] = $0;
   $0 = tflite__DepthwiseConv2DOptions__stride_w_28_29_20const(HEAP32[$4 + 8 >> 2]);
   HEAP32[std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) + 4 >> 2] = $0;
   $0 = tflite__DepthwiseConv2DOptions__stride_h_28_29_20const(HEAP32[$4 + 8 >> 2]);
   HEAP32[std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) + 8 >> 2] = $0;
   $0 = tflite__DepthwiseConv2DOptions__depth_multiplier_28_29_20const(HEAP32[$4 + 8 >> 2]);
   HEAP32[std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) + 12 >> 2] = $0;
   $0 = tflite___28anonymous_20namespace_29__ConvertActivation_28tflite__ActivationFunctionType_29(tflite__DepthwiseConv2DOptions__fused_activation_function_28_29_20const(HEAP32[$4 + 8 >> 2]));
   HEAP32[std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) + 16 >> 2] = $0;
   $0 = tflite__DepthwiseConv2DOptions__dilation_w_factor_28_29_20const(HEAP32[$4 + 8 >> 2]);
   HEAP32[std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) + 20 >> 2] = $0;
   $0 = tflite__DepthwiseConv2DOptions__dilation_h_factor_28_29_20const(HEAP32[$4 + 8 >> 2]);
   HEAP32[std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) + 24 >> 2] = $0;
  }
  $0 = std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($4 + 16 | 0);
  HEAP32[HEAP32[$4 + 28 >> 2] >> 2] = $0;
  HEAP32[$4 + 44 >> 2] = 0;
 }
 HEAP32[$4 + 12 >> 2] = 1;
 std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($4 + 16 | 0);
 __stack_pointer = $4 + 48 | 0;
 return HEAP32[$4 + 44 >> 2];
}

function lcdSetPixels_ArrayBuffer_flat($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 80 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 76 >> 2] = $0;
 HEAP32[$5 + 72 >> 2] = $1;
 HEAP32[$5 + 68 >> 2] = $2;
 HEAP32[$5 + 64 >> 2] = $3;
 HEAP32[$5 + 60 >> 2] = $4;
 $0 = HEAP32[$5 + 76 >> 2];
 HEAP32[$5 + 56 >> 2] = HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24);
 HEAP32[$5 + 52 >> 2] = lcdGetPixelIndex_ArrayBuffer(HEAP32[$5 + 76 >> 2], HEAP32[$5 + 72 >> 2], HEAP32[$5 + 68 >> 2], HEAP32[$5 + 64 >> 2]);
 HEAP32[$5 + 56 >> 2] = HEAP32[$5 + 56 >> 2] + (HEAP32[$5 + 52 >> 2] >>> 3 | 0);
 HEAP32[$5 + 48 >> 2] = (1 << HEAPU8[HEAP32[$5 + 76 >> 2] + 16 | 0]) - 1;
 label$1: {
  if (HEAP32[$5 + 60 >> 2]) {
   $0 = 0;
   if (HEAP32[$5 + 48 >> 2] != (HEAP32[$5 + 60 >> 2] & HEAP32[$5 + 48 >> 2])) {
    break label$1;
   }
  }
  $0 = HEAP32[$5 + 76 >> 2];
  $0 = ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 2) != 0 ^ -1;
 }
 HEAP8[$5 + 47 | 0] = $0 & 1;
 HEAP32[$5 + 40 >> 2] = HEAPU8[HEAP32[$5 + 76 >> 2] + 16 | 0];
 $0 = HEAP32[$5 + 76 >> 2];
 if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 8) {
  HEAP32[$5 + 40 >> 2] = HEAP32[$5 + 40 >> 2] << 1;
  HEAP8[$5 + 47 | 0] = 0;
 }
 while (1) {
  label$5: {
   $0 = HEAP32[$5 + 64 >> 2];
   HEAP32[$5 + 64 >> 2] = $0 - 1;
   if (!$0) {
    break label$5;
   }
   label$6: {
    if (HEAPU8[HEAP32[$5 + 76 >> 2] + 16 | 0] & 7) {
     HEAP32[$5 + 52 >> 2] = HEAP32[$5 + 52 >> 2] & 7;
     if (!(HEAP32[$5 + 52 >> 2] | !(HEAP8[$5 + 47 | 0] & 1))) {
      HEAP32[$5 + 36 >> 2] = Math_imul(HEAPU8[HEAP32[$5 + 76 >> 2] + 16 | 0], HEAP32[$5 + 64 >> 2] + 1 | 0) >> 3;
      if (HEAP32[$5 + 36 >> 2]) {
       HEAP8[$5 + 35 | 0] = HEAP32[$5 + 60 >> 2] ? 255 : 0;
       HEAP32[$5 + 64 >> 2] = (HEAP32[$5 + 64 >> 2] + 1 | 0) - ((HEAP32[$5 + 36 >> 2] << 3) / HEAPU8[HEAP32[$5 + 76 >> 2] + 16 | 0] | 0);
       while (1) {
        $0 = HEAP32[$5 + 36 >> 2];
        HEAP32[$5 + 36 >> 2] = $0 - 1;
        if ($0) {
         HEAP8[HEAP32[$5 + 56 >> 2]] = HEAPU8[$5 + 35 | 0];
         HEAP32[$5 + 56 >> 2] = HEAP32[$5 + 56 >> 2] + 1;
         continue;
        }
        break;
       }
       continue;
      }
     }
     HEAP32[$5 + 28 >> 2] = (1 << HEAPU8[HEAP32[$5 + 76 >> 2] + 16 | 0]) - 1;
     HEAP32[$5 + 24 >> 2] = HEAPU8[HEAP32[$5 + 56 >> 2]];
     $0 = HEAP32[$5 + 76 >> 2];
     if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 4) {
      $0 = 8 - (HEAP32[$5 + 52 >> 2] + HEAPU8[HEAP32[$5 + 76 >> 2] + 16 | 0] | 0) | 0;
     } else {
      $0 = HEAP32[$5 + 52 >> 2];
     }
     HEAP32[$5 + 20 >> 2] = $0;
     HEAP8[HEAP32[$5 + 56 >> 2]] = HEAP32[$5 + 24 >> 2] & (HEAP32[$5 + 28 >> 2] << HEAP32[$5 + 20 >> 2] ^ -1) | (HEAP32[$5 + 60 >> 2] & HEAP32[$5 + 28 >> 2]) << HEAP32[$5 + 20 >> 2];
     $0 = HEAP32[$5 + 76 >> 2];
     label$14: {
      if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 2) {
       HEAP32[$5 + 56 >> 2] = HEAP32[$5 + 56 >> 2] + 1;
       break label$14;
      }
      HEAP32[$5 + 52 >> 2] = HEAP32[$5 + 40 >> 2] + HEAP32[$5 + 52 >> 2];
      if (HEAPU32[$5 + 52 >> 2] >= 8) {
       HEAP32[$5 + 56 >> 2] = HEAP32[$5 + 56 >> 2] + 1;
      }
     }
     break label$6;
    }
    $0 = HEAP32[$5 + 76 >> 2];
    label$17: {
     if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 4) {
      HEAP32[$5 + 16 >> 2] = HEAPU8[HEAP32[$5 + 76 >> 2] + 16 | 0] - 8;
      while (1) {
       if (HEAP32[$5 + 16 >> 2] >= 0) {
        $1 = HEAP32[$5 + 60 >> 2];
        $2 = HEAP32[$5 + 16 >> 2];
        $0 = HEAP32[$5 + 56 >> 2];
        HEAP32[$5 + 56 >> 2] = $0 + 1;
        HEAP8[$0 | 0] = $1 >>> $2;
        HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] - 8;
        continue;
       }
       break;
      }
      break label$17;
     }
     HEAP32[$5 + 12 >> 2] = 0;
     while (1) {
      if (HEAP32[$5 + 12 >> 2] < HEAPU8[HEAP32[$5 + 76 >> 2] + 16 | 0]) {
       $1 = HEAP32[$5 + 60 >> 2];
       $2 = HEAP32[$5 + 12 >> 2];
       $0 = HEAP32[$5 + 56 >> 2];
       HEAP32[$5 + 56 >> 2] = $0 + 1;
       HEAP8[$0 | 0] = $1 >>> $2;
       HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 12 >> 2] + 8;
       continue;
      }
      break;
     }
    }
   }
   continue;
  }
  break;
 }
 __stack_pointer = $5 + 80 | 0;
}

function jswFindBuiltInFunction($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 label$1: {
  label$2: {
   label$3: {
    if (!HEAP32[$2 + 40 >> 2]) {
     break label$3;
    }
    if (jsvIsRoot(HEAP32[$2 + 40 >> 2]) & 1) {
     break label$3;
    }
    if (jsvIsNativeFunction(HEAP32[$2 + 40 >> 2]) & 1) {
     HEAP32[$2 + 28 >> 2] = jswGetSymbolListForObject(HEAP32[$2 + 40 >> 2]);
     if (HEAP32[$2 + 28 >> 2]) {
      HEAP32[$2 + 32 >> 2] = jswBinarySearch(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
      if (HEAP32[$2 + 32 >> 2]) {
       HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
       break label$1;
      }
     }
    }
    if (jsvIsPin(HEAP32[$2 + 40 >> 2]) & 1) {
     HEAP32[$2 + 32 >> 2] = jswBinarySearch(140041, HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
     if (HEAP32[$2 + 32 >> 2]) {
      HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
      break label$1;
     }
    }
    if (jsvIsArray(HEAP32[$2 + 40 >> 2]) & 1) {
     HEAP32[$2 + 32 >> 2] = jswBinarySearch(140095, HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
     if (HEAP32[$2 + 32 >> 2]) {
      HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
      break label$1;
     }
    }
    if (!(!(jsvIsArrayBuffer(HEAP32[$2 + 40 >> 2]) & 1) | HEAPU8[HEAP32[$2 + 40 >> 2] + 5 | 0] != 129)) {
     HEAP32[$2 + 32 >> 2] = jswBinarySearch(140113, HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
     if (HEAP32[$2 + 32 >> 2]) {
      HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
      break label$1;
     }
    }
    if (!(!(jsvIsArrayBuffer(HEAP32[$2 + 40 >> 2]) & 1) | HEAPU8[HEAP32[$2 + 40 >> 2] + 5 | 0] == 129)) {
     HEAP32[$2 + 32 >> 2] = jswBinarySearch(140122, HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
     if (HEAP32[$2 + 32 >> 2]) {
      HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
      break label$1;
     }
    }
    if (jsvIsNumeric(HEAP32[$2 + 40 >> 2]) & 1) {
     HEAP32[$2 + 32 >> 2] = jswBinarySearch(140230, HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
     if (HEAP32[$2 + 32 >> 2]) {
      HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
      break label$1;
     }
    }
    if (jsvIsFunction(HEAP32[$2 + 40 >> 2]) & 1) {
     HEAP32[$2 + 32 >> 2] = jswBinarySearch(140257, HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
     if (HEAP32[$2 + 32 >> 2]) {
      HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
      break label$1;
     }
    }
    if (jsvIsString(HEAP32[$2 + 40 >> 2]) & 1) {
     HEAP32[$2 + 32 >> 2] = jswBinarySearch(140275, HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
     if (HEAP32[$2 + 32 >> 2]) {
      HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
      break label$1;
     }
    }
    label$21: {
     if (jsvIsObject(HEAP32[$2 + 40 >> 2]) & 1) {
      $0 = jsvSkipNameAndUnLock(jsvFindChildFromString(HEAP32[$2 + 40 >> 2], 107914));
      break label$21;
     }
     $0 = 0;
    }
    HEAP32[$2 + 24 >> 2] = $0;
    label$23: {
     if (jsvIsObject(HEAP32[$2 + 24 >> 2]) & 1) {
      $0 = jsvSkipNameAndUnLock(jsvFindChildFromString(HEAP32[$2 + 24 >> 2], 100982));
      break label$23;
     }
     $0 = 0;
    }
    HEAP32[$2 + 20 >> 2] = $0;
    jsvUnLock(HEAP32[$2 + 24 >> 2]);
    label$25: {
     label$26: {
      if (!HEAP32[$2 + 20 >> 2]) {
       break label$26;
      }
      if (!(jsvIsNativeFunction(HEAP32[$2 + 20 >> 2]) & 1)) {
       break label$26;
      }
      HEAP32[$2 + 16 >> 2] = jswGetSymbolListForConstructorProto(HEAP32[$2 + 20 >> 2]);
      jsvUnLock(HEAP32[$2 + 20 >> 2]);
      if (HEAP32[$2 + 16 >> 2]) {
       HEAP32[$2 + 32 >> 2] = jswBinarySearch(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
       if (HEAP32[$2 + 32 >> 2]) {
        HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
        break label$1;
       }
      }
      break label$25;
     }
     jsvUnLock(HEAP32[$2 + 20 >> 2]);
    }
    HEAP32[$2 + 32 >> 2] = jswBinarySearch(140239, HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
    if (HEAP32[$2 + 32 >> 2]) {
     HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
     break label$1;
    }
    break label$2;
   }
   HEAP8[$2 + 15 | 0] = jshGetPinFromString(HEAP32[$2 + 36 >> 2]);
   if (HEAPU8[$2 + 15 | 0] != 255) {
    HEAP32[$2 + 44 >> 2] = jsvNewFromPin(HEAPU8[$2 + 15 | 0]);
    break label$1;
   }
   HEAP32[$2 + 44 >> 2] = jswBinarySearch(140050, HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
   break label$1;
  }
  HEAP32[$2 + 44 >> 2] = 0;
 }
 __stack_pointer = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}

function _jswrap_graphics_fillRect_col($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 176 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 168 >> 2] = $0;
 HEAP32[$6 + 164 >> 2] = $1;
 HEAP32[$6 + 160 >> 2] = $2;
 HEAP32[$6 + 156 >> 2] = $3;
 HEAP32[$6 + 152 >> 2] = $4;
 HEAP8[$6 + 151 | 0] = $5;
 _jswrap_graphics_getRect(HEAP32[$6 + 164 >> 2], $6 + 144 | 0, $6 + 160 | 0, $6 + 156 | 0, $6 + 152 | 0, $6 + 140 | 0);
 label$1: {
  if (!(graphicsGetFromVar($6 - -64 | 0, HEAP32[$6 + 168 >> 2]) & 1)) {
   HEAP32[$6 + 172 >> 2] = 0;
   break label$1;
  }
  if (HEAP8[$6 + 151 | 0] & 1) {
   $0 = HEAPU8[$6 + 81 | 0] | HEAPU8[$6 + 82 | 0] << 8 | (HEAPU8[$6 + 83 | 0] << 16 | HEAPU8[$6 + 84 | 0] << 24);
  } else {
   $0 = HEAPU8[$6 + 85 | 0] | HEAPU8[$6 + 86 | 0] << 8 | (HEAPU8[$6 + 87 | 0] << 16 | HEAPU8[$6 + 88 | 0] << 24);
  }
  HEAP32[$6 + 60 >> 2] = $0;
  label$5: {
   if (HEAP32[$6 + 140 >> 2] > 0) {
    graphicsToDeviceCoordinates($6 - -64 | 0, $6 + 144 | 0, $6 + 160 | 0);
    graphicsToDeviceCoordinates($6 - -64 | 0, $6 + 156 | 0, $6 + 152 | 0);
    if (HEAP32[$6 + 144 >> 2] > HEAP32[$6 + 156 >> 2]) {
     HEAP32[$6 + 56 >> 2] = HEAP32[$6 + 144 >> 2];
     HEAP32[$6 + 144 >> 2] = HEAP32[$6 + 156 >> 2];
     HEAP32[$6 + 156 >> 2] = HEAP32[$6 + 56 >> 2];
    }
    if (HEAP32[$6 + 160 >> 2] > HEAP32[$6 + 152 >> 2]) {
     HEAP32[$6 + 52 >> 2] = HEAP32[$6 + 160 >> 2];
     HEAP32[$6 + 160 >> 2] = HEAP32[$6 + 152 >> 2];
     HEAP32[$6 + 152 >> 2] = HEAP32[$6 + 52 >> 2];
    }
    HEAP32[$6 + 56 >> 2] = (HEAP32[$6 + 156 >> 2] - HEAP32[$6 + 144 >> 2] | 0) / 2;
    HEAP32[$6 + 52 >> 2] = (HEAP32[$6 + 152 >> 2] - HEAP32[$6 + 160 >> 2] | 0) / 2;
    if (HEAP32[$6 + 56 >> 2] < HEAP32[$6 + 140 >> 2]) {
     HEAP32[$6 + 140 >> 2] = HEAP32[$6 + 56 >> 2];
    }
    if (HEAP32[$6 + 52 >> 2] < HEAP32[$6 + 140 >> 2]) {
     HEAP32[$6 + 140 >> 2] = HEAP32[$6 + 52 >> 2];
    }
    HEAP32[$6 + 48 >> 2] = HEAP32[$6 + 144 >> 2] + HEAP32[$6 + 140 >> 2];
    HEAP32[$6 + 44 >> 2] = HEAP32[$6 + 156 >> 2] - HEAP32[$6 + 140 >> 2];
    HEAP32[$6 + 40 >> 2] = HEAP32[$6 + 160 >> 2] + HEAP32[$6 + 140 >> 2];
    HEAP32[$6 + 36 >> 2] = HEAP32[$6 + 152 >> 2] - HEAP32[$6 + 140 >> 2];
    graphicsFillRectDevice($6 - -64 | 0, HEAP32[$6 + 144 >> 2], HEAP32[$6 + 40 >> 2], HEAP32[$6 + 156 >> 2], HEAP32[$6 + 36 >> 2], HEAP32[$6 + 60 >> 2]);
    HEAP32[$6 + 32 >> 2] = 0;
    HEAP32[$6 + 28 >> 2] = HEAP32[$6 + 140 >> 2];
    HEAP32[$6 + 24 >> 2] = Math_imul(HEAP32[$6 + 140 >> 2], HEAP32[$6 + 140 >> 2]);
    HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 24 >> 2] - Math_imul(HEAP32[$6 + 24 >> 2], (HEAP32[$6 + 140 >> 2] << 1) - 1 | 0);
    HEAP8[$6 + 15 | 0] = 0;
    while (1) {
     HEAP8[$6 + 15 | 0] = 0;
     HEAP32[$6 + 16 >> 2] = HEAP32[$6 + 20 >> 2] << 1;
     if (HEAP32[$6 + 16 >> 2] < (Math_imul(HEAP32[$6 + 24 >> 2], (HEAP32[$6 + 32 >> 2] << 1) + 1 | 0) | 0)) {
      HEAP32[$6 + 32 >> 2] = HEAP32[$6 + 32 >> 2] + 1;
      HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 20 >> 2] + Math_imul(HEAP32[$6 + 24 >> 2], (HEAP32[$6 + 32 >> 2] << 1) + 1 | 0);
      HEAP8[$6 + 15 | 0] = 1;
     }
     if (HEAP32[$6 + 16 >> 2] > (Math_imul(HEAP32[$6 + 24 >> 2], 1 - (HEAP32[$6 + 28 >> 2] << 1) | 0) | 0)) {
      graphicsFillRectDevice($6 - -64 | 0, HEAP32[$6 + 48 >> 2] - HEAP32[$6 + 32 >> 2] | 0, HEAP32[$6 + 36 >> 2] + HEAP32[$6 + 28 >> 2] | 0, HEAP32[$6 + 44 >> 2] + HEAP32[$6 + 32 >> 2] | 0, HEAP32[$6 + 36 >> 2] + HEAP32[$6 + 28 >> 2] | 0, HEAP32[$6 + 60 >> 2]);
      graphicsFillRectDevice($6 - -64 | 0, HEAP32[$6 + 48 >> 2] - HEAP32[$6 + 32 >> 2] | 0, HEAP32[$6 + 40 >> 2] - HEAP32[$6 + 28 >> 2] | 0, HEAP32[$6 + 44 >> 2] + HEAP32[$6 + 32 >> 2] | 0, HEAP32[$6 + 40 >> 2] - HEAP32[$6 + 28 >> 2] | 0, HEAP32[$6 + 60 >> 2]);
      HEAP32[$6 + 28 >> 2] = HEAP32[$6 + 28 >> 2] - 1;
      HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 20 >> 2] - Math_imul(HEAP32[$6 + 24 >> 2], (HEAP32[$6 + 28 >> 2] << 1) - 1 | 0);
      HEAP8[$6 + 15 | 0] = 1;
     }
     $0 = 0;
     $0 = HEAP8[$6 + 15 | 0] & 1 ? HEAP32[$6 + 28 >> 2] >= 0 : $0;
     if ($0) {
      continue;
     }
     break;
    }
    break label$5;
   }
   graphicsFillRect($6 - -64 | 0, HEAP32[$6 + 144 >> 2], HEAP32[$6 + 160 >> 2], HEAP32[$6 + 156 >> 2], HEAP32[$6 + 152 >> 2], HEAP32[$6 + 60 >> 2]);
  }
  graphicsSetVar($6 - -64 | 0);
  HEAP32[$6 + 172 >> 2] = jsvLockAgain(HEAP32[$6 + 168 >> 2]);
 }
 __stack_pointer = $6 + 176 | 0;
 return HEAP32[$6 + 172 >> 2];
}

function lcdST7789_blit8Bit($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0;
 $7 = __stack_pointer - 128 | 0;
 __stack_pointer = $7;
 HEAP32[$7 + 124 >> 2] = $0;
 HEAP32[$7 + 120 >> 2] = $1;
 HEAP32[$7 + 116 >> 2] = $2;
 HEAP32[$7 + 112 >> 2] = $3;
 HEAP32[$7 + 108 >> 2] = $4;
 HEAP32[$7 + 104 >> 2] = $5;
 HEAP32[$7 + 100 >> 2] = $6;
 HEAP32[$7 + 96 >> 2] = HEAP32[$7 + 120 >> 2] + HEAP32[85780];
 HEAP32[$7 + 92 >> 2] = HEAP32[85780] + (HEAP32[$7 + 120 >> 2] + Math_imul(HEAP32[$7 + 112 >> 2], HEAP32[$7 + 108 >> 2]) | 0);
 if (HEAP32[$7 + 96 >> 2] >= 320) {
  HEAP32[$7 + 96 >> 2] = HEAP32[$7 + 96 >> 2] - 320;
 }
 if (HEAP32[$7 + 92 >> 2] >= 320) {
  HEAP32[$7 + 92 >> 2] = HEAP32[$7 + 92 >> 2] - 320;
 }
 $1 = HEAP32[$7 + 124 >> 2];
 $2 = HEAP32[$7 + 96 >> 2];
 $3 = (HEAP32[$7 + 124 >> 2] + Math_imul(HEAP32[$7 + 116 >> 2], HEAP32[$7 + 108 >> 2]) | 0) - 1 | 0;
 if (HEAP32[$7 + 92 >> 2] > HEAP32[$7 + 96 >> 2]) {
  $0 = HEAP32[$7 + 92 >> 2];
 } else {
  $0 = 239;
 }
 lcdST7789_blitStartRaw($1, $2, $3, $0);
 HEAP32[$7 + 88 >> 2] = 0;
 while (1) {
  if (HEAP32[$7 + 88 >> 2] < HEAP32[$7 + 112 >> 2]) {
   jsvStringIteratorClone($7 + 48 | 0, HEAP32[$7 + 104 >> 2]);
   HEAP32[$7 + 44 >> 2] = 1;
   while (1) {
    if (HEAP32[$7 + 44 >> 2] <= HEAP32[$7 + 108 >> 2]) {
     HEAP32[$7 + 96 >> 2] = HEAP32[$7 + 96 >> 2] + 1;
     if (HEAP32[$7 + 96 >> 2] >= 320) {
      lcdST7789_blitEnd();
      lcdST7789_blitStartRaw(HEAP32[$7 + 124 >> 2], 0, (HEAP32[$7 + 124 >> 2] + Math_imul(HEAP32[$7 + 116 >> 2], HEAP32[$7 + 108 >> 2]) | 0) - 1 | 0, HEAP32[$7 + 92 >> 2]);
     }
     label$10: {
      if (HEAP32[$7 + 108 >> 2] == 1) {
       HEAP32[$7 + 40 >> 2] = 0;
       while (1) {
        if (HEAP32[$7 + 40 >> 2] < HEAP32[$7 + 116 >> 2]) {
         lcdST7789_blitPixel(HEAPU16[HEAP32[$7 + 100 >> 2] + ((jsvStringIteratorGetCharAndNext(HEAP32[$7 + 104 >> 2]) & 255) << 1) >> 1]);
         HEAP32[$7 + 40 >> 2] = HEAP32[$7 + 40 >> 2] + 1;
         continue;
        }
        break;
       }
       break label$10;
      }
      label$14: {
       if (HEAP32[$7 + 108 >> 2] == 2) {
        HEAP32[$7 + 36 >> 2] = 0;
        while (1) {
         if (HEAP32[$7 + 36 >> 2] < HEAP32[$7 + 116 >> 2]) {
          HEAP16[$7 + 34 >> 1] = HEAPU16[HEAP32[$7 + 100 >> 2] + ((jsvStringIteratorGetCharAndNext(HEAP32[$7 + 104 >> 2]) & 255) << 1) >> 1];
          lcdST7789_blitPixel(HEAPU16[$7 + 34 >> 1]);
          lcdST7789_blitPixel(HEAPU16[$7 + 34 >> 1]);
          HEAP32[$7 + 36 >> 2] = HEAP32[$7 + 36 >> 2] + 1;
          continue;
         }
         break;
        }
        break label$14;
       }
       label$18: {
        if (HEAP32[$7 + 108 >> 2] == 3) {
         HEAP32[$7 + 28 >> 2] = 0;
         while (1) {
          if (HEAP32[$7 + 28 >> 2] < HEAP32[$7 + 116 >> 2]) {
           HEAP16[$7 + 26 >> 1] = HEAPU16[HEAP32[$7 + 100 >> 2] + ((jsvStringIteratorGetCharAndNext(HEAP32[$7 + 104 >> 2]) & 255) << 1) >> 1];
           lcdST7789_blitPixel(HEAPU16[$7 + 26 >> 1]);
           lcdST7789_blitPixel(HEAPU16[$7 + 26 >> 1]);
           lcdST7789_blitPixel(HEAPU16[$7 + 26 >> 1]);
           HEAP32[$7 + 28 >> 2] = HEAP32[$7 + 28 >> 2] + 1;
           continue;
          }
          break;
         }
         break label$18;
        }
        HEAP32[$7 + 20 >> 2] = 0;
        while (1) {
         if (HEAP32[$7 + 20 >> 2] < HEAP32[$7 + 116 >> 2]) {
          HEAP16[$7 + 18 >> 1] = HEAPU16[HEAP32[$7 + 100 >> 2] + ((jsvStringIteratorGetCharAndNext(HEAP32[$7 + 104 >> 2]) & 255) << 1) >> 1];
          HEAP32[$7 + 12 >> 2] = 0;
          while (1) {
           if (HEAP32[$7 + 12 >> 2] < HEAP32[$7 + 108 >> 2]) {
            lcdST7789_blitPixel(HEAPU16[$7 + 18 >> 1]);
            HEAP32[$7 + 12 >> 2] = HEAP32[$7 + 12 >> 2] + 1;
            continue;
           }
           break;
          }
          HEAP32[$7 + 20 >> 2] = HEAP32[$7 + 20 >> 2] + 1;
          continue;
         }
         break;
        }
       }
      }
     }
     if (HEAP32[$7 + 44 >> 2] < HEAP32[$7 + 108 >> 2]) {
      jsvStringIteratorFree_6(HEAP32[$7 + 104 >> 2]);
      jsvStringIteratorClone(HEAP32[$7 + 104 >> 2], $7 + 48 | 0);
     }
     HEAP32[$7 + 44 >> 2] = HEAP32[$7 + 44 >> 2] + 1;
     continue;
    }
    break;
   }
   jsvStringIteratorFree_6($7 + 48 | 0);
   HEAP32[$7 + 88 >> 2] = HEAP32[$7 + 88 >> 2] + 1;
   continue;
  }
  break;
 }
 lcdST7789_blitEnd();
 __stack_pointer = $7 + 128 | 0;
}

function graphicsScroll($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP32[$3 + 36 >> 2] = $2;
 HEAP32[$3 + 32 >> 2] = 0;
 HEAP32[$3 + 28 >> 2] = 0;
 HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 40 >> 2];
 HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 36 >> 2];
 graphicsToDeviceCoordinates(HEAP32[$3 + 44 >> 2], $3 + 32 | 0, $3 + 28 | 0);
 graphicsToDeviceCoordinates(HEAP32[$3 + 44 >> 2], $3 + 24 | 0, $3 + 20 | 0);
 HEAP32[$3 + 40 >> 2] = HEAP32[$3 + 24 >> 2] - HEAP32[$3 + 32 >> 2];
 HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 20 >> 2] - HEAP32[$3 + 28 >> 2];
 $0 = HEAP32[$3 + 44 >> 2];
 HEAP32[$3 + 32 >> 2] = HEAPU8[$0 + 32 | 0] | HEAPU8[$0 + 33 | 0] << 8;
 $0 = HEAP32[$3 + 44 >> 2];
 HEAP32[$3 + 28 >> 2] = HEAPU8[$0 + 34 | 0] | HEAPU8[$0 + 35 | 0] << 8;
 $0 = HEAP32[$3 + 44 >> 2];
 HEAP32[$3 + 24 >> 2] = HEAPU8[$0 + 36 | 0] | HEAPU8[$0 + 37 | 0] << 8;
 $0 = HEAP32[$3 + 44 >> 2];
 HEAP32[$3 + 20 >> 2] = HEAPU8[$0 + 38 | 0] | HEAPU8[$0 + 39 | 0] << 8;
 HEAP8[$3 + 19 | 0] = 1;
 HEAP32[$3 + 12 >> 2] = (HEAP32[$3 + 24 >> 2] + 1 | 0) - HEAP32[$3 + 32 >> 2];
 HEAP32[$3 + 8 >> 2] = (HEAP32[$3 + 20 >> 2] + 1 | 0) - HEAP32[$3 + 28 >> 2];
 if (HEAP32[$3 + 40 >> 2] >= HEAP32[$3 + 12 >> 2]) {
  HEAP32[$3 + 40 >> 2] = HEAP32[$3 + 12 >> 2];
  HEAP8[$3 + 19 | 0] = 0;
 }
 if (HEAP32[$3 + 40 >> 2] <= (0 - HEAP32[$3 + 12 >> 2] | 0)) {
  HEAP32[$3 + 40 >> 2] = 0 - HEAP32[$3 + 12 >> 2];
  HEAP8[$3 + 19 | 0] = 0;
 }
 if (HEAP32[$3 + 36 >> 2] >= HEAP32[$3 + 8 >> 2]) {
  HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 8 >> 2];
  HEAP8[$3 + 19 | 0] = 0;
 }
 if (HEAP32[$3 + 36 >> 2] <= (0 - HEAP32[$3 + 8 >> 2] | 0)) {
  HEAP32[$3 + 36 >> 2] = 0 - HEAP32[$3 + 8 >> 2];
  HEAP8[$3 + 19 | 0] = 0;
 }
 if (HEAP8[$3 + 19 | 0] & 1) {
  $0 = HEAP32[$3 + 44 >> 2];
  FUNCTION_TABLE[HEAPU8[$0 + 68 | 0] | HEAPU8[$0 + 69 | 0] << 8 | (HEAPU8[$0 + 70 | 0] << 16 | HEAPU8[$0 + 71 | 0] << 24)](HEAP32[$3 + 44 >> 2], HEAP32[$3 + 40 >> 2], HEAP32[$3 + 36 >> 2], HEAP32[$3 + 32 >> 2], HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
 }
 graphicsSetModified(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 32 >> 2], HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
 label$6: {
  if (HEAP32[$3 + 40 >> 2] > 0) {
   $0 = HEAP32[$3 + 44 >> 2];
   $1 = HEAP32[$3 + 44 >> 2];
   FUNCTION_TABLE[HEAPU8[$1 + 56 | 0] | HEAPU8[$1 + 57 | 0] << 8 | (HEAPU8[$1 + 58 | 0] << 16 | HEAPU8[$1 + 59 | 0] << 24)](HEAP32[$3 + 44 >> 2], HEAP32[$3 + 32 >> 2], HEAP32[$3 + 28 >> 2], (HEAP32[$3 + 32 >> 2] + HEAP32[$3 + 40 >> 2] | 0) - 1 | 0, HEAP32[$3 + 20 >> 2], HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24));
   break label$6;
  }
  if (HEAP32[$3 + 40 >> 2] < 0) {
   $0 = HEAP32[$3 + 44 >> 2];
   $1 = HEAP32[$3 + 44 >> 2];
   FUNCTION_TABLE[HEAPU8[$1 + 56 | 0] | HEAPU8[$1 + 57 | 0] << 8 | (HEAPU8[$1 + 58 | 0] << 16 | HEAPU8[$1 + 59 | 0] << 24)](HEAP32[$3 + 44 >> 2], HEAP32[$3 + 40 >> 2] + (HEAP32[$3 + 24 >> 2] + 1 | 0) | 0, HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24));
  }
 }
 label$9: {
  if (HEAP32[$3 + 36 >> 2] > 0) {
   $0 = HEAP32[$3 + 44 >> 2];
   $1 = HEAP32[$3 + 44 >> 2];
   FUNCTION_TABLE[HEAPU8[$1 + 56 | 0] | HEAPU8[$1 + 57 | 0] << 8 | (HEAPU8[$1 + 58 | 0] << 16 | HEAPU8[$1 + 59 | 0] << 24)](HEAP32[$3 + 44 >> 2], HEAP32[$3 + 32 >> 2], HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2], (HEAP32[$3 + 28 >> 2] + HEAP32[$3 + 36 >> 2] | 0) - 1 | 0, HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24));
   break label$9;
  }
  if (HEAP32[$3 + 36 >> 2] < 0) {
   $0 = HEAP32[$3 + 44 >> 2];
   $1 = HEAP32[$3 + 44 >> 2];
   FUNCTION_TABLE[HEAPU8[$1 + 56 | 0] | HEAPU8[$1 + 57 | 0] << 8 | (HEAPU8[$1 + 58 | 0] << 16 | HEAPU8[$1 + 59 | 0] << 24)](HEAP32[$3 + 44 >> 2], HEAP32[$3 + 32 >> 2], HEAP32[$3 + 36 >> 2] + (HEAP32[$3 + 20 >> 2] + 1 | 0) | 0, HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24));
  }
 }
 __stack_pointer = $3 + 48 | 0;
}

function gemmlowp__FixedPoint_int_2c_200__20gemmlowp__exp_on_interval_between_negative_one_quarter_and_0_excl_int__28gemmlowp__FixedPoint_int_2c_200__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 256 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 240 >> 2] = $0;
 HEAP32[$1 + 232 >> 2] = gemmlowp__FixedPoint_int_2c_200___FromScalarRaw_28int_29(gemmlowp__FixedPoint_int_2c_200___ScalarRawType_20gemmlowp__RescaleConstantInitializer_gemmlowp__FixedPoint_int_2c_200___28int_29(1895147668));
 HEAP32[$1 + 224 >> 2] = gemmlowp__FixedPoint_int_2c_200___FromScalarRaw_28int_29(gemmlowp__FixedPoint_int_2c_200___ScalarRawType_20gemmlowp__RescaleConstantInitializer_gemmlowp__FixedPoint_int_2c_200___28int_29(715827883));
 HEAP32[$1 + 208 >> 2] = HEAP32[$1 + 240 >> 2];
 HEAP32[$1 + 200 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__FixedPoint_int_2c_200___ConstantPOT__3__28_29();
 HEAP32[$1 + 216 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__operator__int_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 208 >> 2], HEAP32[$1 + 200 >> 2]);
 HEAP32[$1 + 184 >> 2] = HEAP32[$1 + 216 >> 2];
 HEAP32[$1 + 176 >> 2] = HEAP32[$1 + 216 >> 2];
 HEAP32[$1 + 192 >> 2] = gemmlowp__FixedPoint_int_2c_200_20__200__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 184 >> 2], HEAP32[$1 + 176 >> 2]);
 HEAP32[$1 + 160 >> 2] = HEAP32[$1 + 192 >> 2];
 HEAP32[$1 + 152 >> 2] = HEAP32[$1 + 216 >> 2];
 HEAP32[$1 + 168 >> 2] = gemmlowp__FixedPoint_int_2c_200_20__200__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 160 >> 2], HEAP32[$1 + 152 >> 2]);
 HEAP32[$1 + 136 >> 2] = HEAP32[$1 + 192 >> 2];
 HEAP32[$1 + 128 >> 2] = HEAP32[$1 + 192 >> 2];
 HEAP32[$1 + 144 >> 2] = gemmlowp__FixedPoint_int_2c_200_20__200__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 136 >> 2], HEAP32[$1 + 128 >> 2]);
 HEAP32[$1 + 112 >> 2] = HEAP32[$1 + 144 >> 2];
 HEAP32[$1 + 120 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__SaturatingRoundingMultiplyByPOT__2_2c_20int_2c_200__28gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 112 >> 2]);
 HEAP32[$1 + 72 >> 2] = HEAP32[$1 + 120 >> 2];
 HEAP32[$1 + 64 >> 2] = HEAP32[$1 + 168 >> 2];
 HEAP32[$1 + 80 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__operator__int_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 72 >> 2], HEAP32[$1 + 64 >> 2]);
 HEAP32[$1 + 56 >> 2] = HEAP32[$1 + 224 >> 2];
 HEAP32[$1 + 88 >> 2] = gemmlowp__FixedPoint_int_2c_200_20__200__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 80 >> 2], HEAP32[$1 + 56 >> 2]);
 HEAP32[$1 + 48 >> 2] = HEAP32[$1 + 192 >> 2];
 HEAP32[$1 + 96 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__operator__int_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 88 >> 2], HEAP32[$1 + 48 >> 2]);
 HEAP32[$1 + 104 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__SaturatingRoundingMultiplyByPOT__1_2c_20int_2c_200__28gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 96 >> 2]);
 HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 232 >> 2];
 HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 232 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 216 >> 2];
 HEAP32[$1 >> 2] = HEAP32[$1 + 104 >> 2];
 HEAP32[$1 + 16 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__operator__int_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 8 >> 2], HEAP32[$1 >> 2]);
 HEAP32[$1 + 32 >> 2] = gemmlowp__FixedPoint_int_2c_200_20__200__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 24 >> 2], HEAP32[$1 + 16 >> 2]);
 HEAP32[$1 + 248 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__AddSaturatingIf16Bit_int_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 40 >> 2], HEAP32[$1 + 32 >> 2]);
 __stack_pointer = $1 + 256 | 0;
 return HEAP32[$1 + 248 >> 2];
}

function tflite__MicroInterpreter__AllocateTensors_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer + -64 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 56 >> 2] = $0;
 $0 = HEAP32[$1 + 56 >> 2];
 label$1: {
  if (tflite__MicroAllocator__StartModelAllocation_28tflite__Model_20const__2c_20tflite__MicroOpResolver_20const__2c_20tflite__NodeAndRegistration___2c_20TfLiteEvalTensor___29(HEAP32[$0 + 104 >> 2], HEAP32[$0 + 4 >> 2], HEAP32[$0 + 8 >> 2], $0, $0 + 120 | 0)) {
   tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$0 + 12 >> 2], 128940, 0);
   HEAP32[$0 + 112 >> 2] = 1;
   HEAP32[$1 + 60 >> 2] = 1;
   break label$1;
  }
  tflite__internal__ContextHelper__SetTfLiteEvalTensors_28TfLiteEvalTensor__29($0 + 124 | 0, HEAP32[$0 + 120 >> 2]);
  HEAP32[$0 + 72 >> 2] = 646;
  HEAP32[$0 + 80 >> 2] = 0;
  HEAP32[$0 + 84 >> 2] = 0;
  HEAP32[$1 + 52 >> 2] = 0;
  while (1) {
   if (HEAPU32[$1 + 52 >> 2] < flatbuffers__Vector_flatbuffers__Offset_tflite__Operator____size_28_29_20const(tflite__SubGraph__operators_28_29_20const(HEAP32[$0 + 116 >> 2])) >>> 0) {
    tflite__internal__ContextHelper__SetNodeIndex_28int_29($0 + 124 | 0, HEAP32[$1 + 52 >> 2]);
    HEAP32[$1 + 48 >> 2] = HEAP32[$0 >> 2] + Math_imul(HEAP32[$1 + 52 >> 2], 28);
    HEAP32[$1 + 44 >> 2] = HEAP32[(HEAP32[$0 >> 2] + Math_imul(HEAP32[$1 + 52 >> 2], 28) | 0) + 24 >> 2];
    label$5: {
     if (HEAP32[HEAP32[$1 + 44 >> 2] + 20 >> 2] == 32) {
      HEAP32[$1 + 36 >> 2] = HEAP32[HEAP32[$1 + 48 >> 2] + 16 >> 2];
      HEAP32[$1 + 40 >> 2] = HEAP32[HEAP32[$1 + 48 >> 2] + 20 >> 2];
      break label$5;
     }
     HEAP32[$1 + 36 >> 2] = HEAP32[HEAP32[$1 + 48 >> 2] + 12 >> 2];
     HEAP32[$1 + 40 >> 2] = 0;
    }
    if (HEAP32[HEAP32[$1 + 44 >> 2] >> 2]) {
     $2 = FUNCTION_TABLE[HEAP32[HEAP32[$1 + 44 >> 2] >> 2]]($0 + 16 | 0, HEAP32[$1 + 36 >> 2], HEAP32[$1 + 40 >> 2]) | 0;
     HEAP32[HEAP32[$1 + 48 >> 2] + 8 >> 2] = $2;
    }
    HEAP32[$1 + 52 >> 2] = HEAP32[$1 + 52 >> 2] + 1;
    continue;
   }
   break;
  }
  tflite__internal__ContextHelper__SetNodeIndex_28int_29($0 + 124 | 0, -1);
  HEAP32[$0 + 80 >> 2] = 647;
  HEAP32[$1 + 32 >> 2] = 0;
  while (1) {
   if (HEAPU32[$1 + 32 >> 2] < flatbuffers__Vector_flatbuffers__Offset_tflite__Operator____size_28_29_20const(tflite__SubGraph__operators_28_29_20const(HEAP32[$0 + 116 >> 2])) >>> 0) {
    tflite__internal__ContextHelper__SetNodeIndex_28int_29($0 + 124 | 0, HEAP32[$1 + 32 >> 2]);
    HEAP32[$1 + 28 >> 2] = HEAP32[$0 >> 2] + Math_imul(HEAP32[$1 + 32 >> 2], 28);
    HEAP32[$1 + 24 >> 2] = HEAP32[(HEAP32[$0 >> 2] + Math_imul(HEAP32[$1 + 32 >> 2], 28) | 0) + 24 >> 2];
    if (HEAP32[HEAP32[$1 + 24 >> 2] + 8 >> 2]) {
     HEAP32[$1 + 20 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$1 + 24 >> 2] + 8 >> 2]]($0 + 16 | 0, HEAP32[$1 + 28 >> 2]);
     if (HEAP32[$1 + 20 >> 2]) {
      $0 = HEAP32[$0 + 12 >> 2];
      $2 = tflite___28anonymous_20namespace_29__OpNameFromRegistration_28TfLiteRegistration_20const__29(HEAP32[$1 + 24 >> 2]);
      $3 = HEAP32[$1 + 32 >> 2];
      HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 20 >> 2];
      HEAP32[$1 + 4 >> 2] = $3;
      HEAP32[$1 >> 2] = $2;
      tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 107256, $1);
      HEAP32[$1 + 60 >> 2] = 1;
      break label$1;
     }
    }
    $2 = HEAP32[$0 + 104 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2);
    HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 32 >> 2] + 1;
    continue;
   }
   break;
  }
  tflite__internal__ContextHelper__SetNodeIndex_28int_29($0 + 124 | 0, -1);
  HEAP32[$0 + 72 >> 2] = 0;
  HEAP32[$0 + 80 >> 2] = 0;
  HEAP32[$0 + 84 >> 2] = 648;
  HEAP32[$1 + 16 >> 2] = tflite__MicroAllocator__FinishModelAllocation_28tflite__Model_20const__2c_20TfLiteEvalTensor__29(HEAP32[$0 + 104 >> 2], HEAP32[$0 + 4 >> 2], HEAP32[$0 + 120 >> 2]);
  if (HEAP32[$1 + 16 >> 2]) {
   HEAP32[$1 + 60 >> 2] = HEAP32[$1 + 16 >> 2];
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = tflite__MicroInterpreter__ResetVariableTensors_28_29($0);
  if (HEAP32[$1 + 12 >> 2]) {
   HEAP32[$1 + 60 >> 2] = HEAP32[$1 + 12 >> 2];
   break label$1;
  }
  HEAP8[$0 + 108 | 0] = 1;
  HEAP32[$1 + 60 >> 2] = 0;
 }
 __stack_pointer = $1 - -64 | 0;
 return HEAP32[$1 + 60 >> 2];
}

function jswrap_object_keys_or_property_names_cb($0, $1, $2, $3) {
 var $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 $4 = __stack_pointer - 144 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 140 >> 2] = $0;
 HEAP32[$4 + 136 >> 2] = $1;
 HEAP32[$4 + 132 >> 2] = $2;
 HEAP32[$4 + 128 >> 2] = $3;
 label$1: {
  if (!(jsvIsIterable(HEAP32[$4 + 140 >> 2]) & 1)) {
   break label$1;
  }
  if (wasm2js_i32$0 = jsvIsArrayBuffer(HEAP32[$4 + 140 >> 2]) & 1, wasm2js_i32$1 = 0, 
  wasm2js_i32$2 = HEAP32[$4 + 136 >> 2] & 4, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) {
   break label$1;
  }
  HEAP32[$4 + 124 >> 2] = jsvGetInternalFunctionCheckerFor(HEAP32[$4 + 140 >> 2]);
  jsvIteratorNew($4 - -64 | 0, HEAP32[$4 + 140 >> 2], 0);
  while (1) {
   if (jsvIteratorHasElement($4 - -64 | 0) & 1) {
    HEAP32[$4 + 60 >> 2] = jsvIteratorGetKey($4 - -64 | 0);
    label$5: {
     label$6: {
      if (!HEAP32[$4 + 124 >> 2]) {
       break label$6;
      }
      if (!(FUNCTION_TABLE[HEAP32[$4 + 124 >> 2]](HEAP32[$4 + 60 >> 2]) & 1)) {
       break label$6;
      }
      if (!(jsvIsStringEqual(HEAP32[$4 + 60 >> 2], 100982) & 1)) {
       break label$5;
      }
     }
     HEAP32[$4 + 56 >> 2] = jsvAsStringAndUnLock(jsvCopyNameOnly(HEAP32[$4 + 60 >> 2], 0, 0));
     if (HEAP32[$4 + 56 >> 2]) {
      FUNCTION_TABLE[HEAP32[$4 + 132 >> 2]](HEAP32[$4 + 128 >> 2], HEAP32[$4 + 56 >> 2]);
      jsvUnLock(HEAP32[$4 + 56 >> 2]);
     }
    }
    jsvUnLock(HEAP32[$4 + 60 >> 2]);
    jsvIteratorNext($4 - -64 | 0);
    continue;
   }
   break;
  }
  jsvIteratorFree($4 - -64 | 0);
 }
 if (HEAP32[$4 + 136 >> 2] & 1) {
  HEAP32[$4 + 52 >> 2] = jswGetSymbolListForObjectProto(0);
  HEAP32[$4 + 48 >> 2] = jspGetPrototypeOwner(HEAP32[$4 + 140 >> 2]);
  label$9: {
   if (HEAP32[$4 + 48 >> 2]) {
    HEAP32[$4 + 44 >> 2] = jswGetSymbolListForObjectProto(HEAP32[$4 + 48 >> 2]);
    jsvUnLock(HEAP32[$4 + 48 >> 2]);
    _jswrap_object_keys_or_property_names_iterator(HEAP32[$4 + 44 >> 2], HEAP32[$4 + 132 >> 2], HEAP32[$4 + 128 >> 2]);
    break label$9;
   }
   label$11: {
    if (jsvIsObject(HEAP32[$4 + 140 >> 2]) & 1) {
     if (!(jsvIsRoot(HEAP32[$4 + 140 >> 2]) & 1)) {
      break label$11;
     }
    }
    HEAP32[$4 + 40 >> 2] = jswGetSymbolListForObject(HEAP32[$4 + 140 >> 2]);
    _jswrap_object_keys_or_property_names_iterator(HEAP32[$4 + 40 >> 2], HEAP32[$4 + 132 >> 2], HEAP32[$4 + 128 >> 2]);
   }
  }
  if (HEAP32[$4 + 136 >> 2] & 2) {
   HEAP32[$4 + 36 >> 2] = 0;
   label$14: {
    if (!(jsvIsObject(HEAP32[$4 + 140 >> 2]) & 1)) {
     if (!(jsvIsFunction(HEAP32[$4 + 140 >> 2]) & 1)) {
      break label$14;
     }
    }
    HEAP32[$4 + 36 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 140 >> 2], 107914);
   }
   label$16: {
    if (jsvIsObject(HEAP32[$4 + 36 >> 2]) & 1) {
     jswrap_object_keys_or_property_names_cb(HEAP32[$4 + 36 >> 2], HEAP32[$4 + 136 >> 2], HEAP32[$4 + 132 >> 2], HEAP32[$4 + 128 >> 2]);
     break label$16;
    }
    HEAP32[$4 + 32 >> 2] = jswGetSymbolListForObjectProto(HEAP32[$4 + 140 >> 2]);
    _jswrap_object_keys_or_property_names_iterator(HEAP32[$4 + 32 >> 2], HEAP32[$4 + 132 >> 2], HEAP32[$4 + 128 >> 2]);
    if (HEAP32[$4 + 52 >> 2] != HEAP32[$4 + 32 >> 2]) {
     _jswrap_object_keys_or_property_names_iterator(HEAP32[$4 + 52 >> 2], HEAP32[$4 + 132 >> 2], HEAP32[$4 + 128 >> 2]);
    }
   }
   jsvUnLock(HEAP32[$4 + 36 >> 2]);
  }
  label$19: {
   if (!(jsvIsArray(HEAP32[$4 + 140 >> 2]) & 1)) {
    if (!(jsvIsString(HEAP32[$4 + 140 >> 2]) & 1)) {
     break label$19;
    }
   }
   HEAP32[$4 + 28 >> 2] = jsvNewFromString(103358);
   FUNCTION_TABLE[HEAP32[$4 + 132 >> 2]](HEAP32[$4 + 128 >> 2], HEAP32[$4 + 28 >> 2]);
   jsvUnLock(HEAP32[$4 + 28 >> 2]);
  }
 }
 if (jsvIsRoot(HEAP32[$4 + 140 >> 2]) & 1) {
  HEAP32[$4 + 24 >> 2] = 0;
  while (1) {
   if (HEAP32[$4 + 24 >> 2] < 32) {
    jshGetPinString($4 + 14 | 0, HEAP32[$4 + 24 >> 2] & 255);
    HEAP32[$4 + 8 >> 2] = jsvNewFromString($4 + 14 | 0);
    FUNCTION_TABLE[HEAP32[$4 + 132 >> 2]](HEAP32[$4 + 128 >> 2], HEAP32[$4 + 8 >> 2]);
    jsvUnLock(HEAP32[$4 + 8 >> 2]);
    HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 24 >> 2] + 1;
    continue;
   }
   break;
  }
 }
 __stack_pointer = $4 + 144 | 0;
}

function jsfWriteFile($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0;
 $6 = __stack_pointer - 128 | 0;
 $5 = $6;
 __stack_pointer = $5;
 HEAP32[$5 + 120 >> 2] = $1;
 HEAP32[$5 + 116 >> 2] = $2;
 HEAP32[$5 + 112 >> 2] = $3;
 HEAP32[$5 + 108 >> 2] = $4;
 label$1: {
  if ((HEAP32[$5 + 112 >> 2] | HEAP32[$5 + 108 >> 2]) < 0) {
   HEAP8[$5 + 127 | 0] = 0;
   break label$1;
  }
  HEAP32[$5 + 104 >> 2] = HEAP32[$5 + 108 >> 2];
  HEAP32[$5 + 100 >> 2] = 0;
  HEAP32[$5 + 96 >> 2] = jsvGetDataPointer(HEAP32[$5 + 120 >> 2], $5 + 100 | 0);
  if (!(HEAP32[$5 + 96 >> 2] | !HEAP32[$5 + 120 >> 2])) {
   HEAP32[$5 + 100 >> 2] = jsvIterateCallbackCount(HEAP32[$5 + 120 >> 2]);
   label$5: {
    if (HEAP32[$5 + 100 >> 2] + 256 >>> 0 > jsuGetFreeStack() >>> 0) {
     jsExceptionHere(1, 107864, 0);
     break label$5;
    }
    $6 = $6 - (HEAP32[$5 + 100 >> 2] + 15 & -16) | 0;
    __stack_pointer = $6;
    HEAP32[$5 + 96 >> 2] = $6;
    jsvIterateCallbackToBytes(HEAP32[$5 + 120 >> 2], HEAP32[$5 + 96 >> 2], HEAP32[$5 + 100 >> 2]);
   }
  }
  if (!HEAP32[$5 + 96 >> 2]) {
   jsExceptionHere(1, 104575, 0);
   HEAP8[$5 + 127 | 0] = 0;
   break label$1;
  }
  if (!HEAP32[$5 + 104 >> 2]) {
   HEAP32[$5 + 104 >> 2] = HEAP32[$5 + 100 >> 2];
  }
  if (!HEAP32[$5 + 104 >> 2]) {
   jsExceptionHere(1, 105050, 0);
   HEAP8[$5 + 127 | 0] = 0;
   break label$1;
  }
  HEAP32[$5 + 56 >> 2] = HEAP32[$0 + 24 >> 2];
  $1 = HEAP32[$0 + 16 >> 2];
  $2 = HEAP32[$0 + 20 >> 2];
  HEAP32[$5 + 48 >> 2] = $1;
  HEAP32[$5 + 52 >> 2] = $2;
  $1 = HEAP32[$0 + 12 >> 2];
  $2 = HEAP32[$0 + 8 >> 2];
  HEAP32[$5 + 40 >> 2] = $2;
  HEAP32[$5 + 44 >> 2] = $1;
  $2 = HEAP32[$0 + 4 >> 2];
  $1 = HEAP32[$0 >> 2];
  HEAP32[$5 + 32 >> 2] = $1;
  HEAP32[$5 + 36 >> 2] = $2;
  HEAP32[$5 + 60 >> 2] = jsfFindFile($5 + 32 | 0, $5 - -64 | 0);
  label$10: {
   label$11: {
    if (!(HEAP32[$5 + 112 >> 2] ? 1 : HEAP32[$5 + 60 >> 2])) {
     break label$11;
    }
    if (HEAP32[$5 + 112 >> 2] | !HEAP32[$5 + 60 >> 2]) {
     break label$10;
    }
    if (HEAP32[$5 + 116 >> 2] != (jsfGetFileFlags($5 - -64 | 0) | 0)) {
     break label$11;
    }
    if (HEAP32[$5 + 104 >> 2] != (jsfGetFileSize($5 - -64 | 0) | 0)) {
     break label$11;
    }
    if (jsfIsErased(HEAP32[$5 + 60 >> 2], HEAP32[$5 + 104 >> 2]) & 1) {
     break label$10;
    }
   }
   label$13: {
    if (HEAP32[$5 + 112 >> 2] | !HEAP32[$5 + 60 >> 2]) {
     break label$13;
    }
    if (HEAP32[$5 + 104 >> 2] != (jsfGetFileSize($5 - -64 | 0) | 0)) {
     break label$13;
    }
    if (HEAP32[$5 + 116 >> 2] != (jsfGetFileFlags($5 - -64 | 0) | 0) | HEAP32[$5 + 100 >> 2] != HEAP32[$5 + 104 >> 2]) {
     break label$13;
    }
    if (!(jsfIsEqual(HEAP32[$5 + 60 >> 2], HEAP32[$5 + 96 >> 2], HEAP32[$5 + 100 >> 2]) & 1)) {
     break label$13;
    }
    HEAP8[$5 + 127 | 0] = 1;
    break label$1;
   }
   if (HEAP32[$5 + 60 >> 2]) {
    jsfEraseFileInternal(HEAP32[$5 + 60 >> 2], $5 - -64 | 0, 1);
   }
   $3 = HEAP32[$5 + 104 >> 2];
   $4 = HEAP32[$5 + 116 >> 2];
   HEAP32[$5 + 24 >> 2] = HEAP32[$0 + 24 >> 2];
   $2 = HEAP32[$0 + 16 >> 2];
   $1 = HEAP32[$0 + 20 >> 2];
   HEAP32[$5 + 16 >> 2] = $2;
   HEAP32[$5 + 20 >> 2] = $1;
   $2 = HEAP32[$0 + 12 >> 2];
   $1 = HEAP32[$0 + 8 >> 2];
   HEAP32[$5 + 8 >> 2] = $1;
   HEAP32[$5 + 12 >> 2] = $2;
   $1 = HEAP32[$0 + 4 >> 2];
   $2 = HEAP32[$0 >> 2];
   HEAP32[$5 >> 2] = $2;
   HEAP32[$5 + 4 >> 2] = $1;
   HEAP32[$5 + 60 >> 2] = jsfCreateFile($5, $3, $4, $5 - -64 | 0);
  }
  if (!HEAP32[$5 + 60 >> 2]) {
   jsExceptionHere(1, 105080, 0);
   HEAP8[$5 + 127 | 0] = 0;
   break label$1;
  }
  if (HEAP32[$5 + 112 >> 2] + HEAP32[$5 + 100 >> 2] >>> 0 > jsfGetFileSize($5 - -64 | 0) >>> 0) {
   jsExceptionHere(1, 104267, 0);
   HEAP8[$5 + 127 | 0] = 0;
   break label$1;
  }
  HEAP32[$5 + 60 >> 2] = HEAP32[$5 + 112 >> 2] + HEAP32[$5 + 60 >> 2];
  if (!(jsfIsErased(HEAP32[$5 + 60 >> 2], HEAP32[$5 + 100 >> 2]) & 1)) {
   jsExceptionHere(1, 107823, 0);
   HEAP8[$5 + 127 | 0] = 0;
   break label$1;
  }
  jshFlashWriteAligned(HEAP32[$5 + 96 >> 2], HEAP32[$5 + 60 >> 2], HEAP32[$5 + 100 >> 2]);
  HEAP8[$5 + 127 | 0] = 1;
 }
 __stack_pointer = $5 + 128 | 0;
 return HEAP8[$5 + 127 | 0] & 1;
}

function jswrap_espruino_mapInPlace($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 176 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 172 >> 2] = $0;
 HEAP32[$4 + 168 >> 2] = $1;
 HEAP32[$4 + 164 >> 2] = $2;
 HEAP32[$4 + 160 >> 2] = $3;
 label$1: {
  label$2: {
   if (jsvIsArrayBuffer(HEAP32[$4 + 172 >> 2]) & 1) {
    if (jsvIsArrayBuffer(HEAP32[$4 + 168 >> 2]) & 1) {
     break label$2;
    }
   }
   jsExceptionHere(1, 100107, 0);
   break label$1;
  }
  label$4: {
   if (!HEAP32[$4 + 164 >> 2]) {
    break label$4;
   }
   if (jsvIsArray(HEAP32[$4 + 164 >> 2]) & 1) {
    break label$4;
   }
   if (jsvIsArrayBuffer(HEAP32[$4 + 164 >> 2]) & 1) {
    break label$4;
   }
   if (jsvIsFunction(HEAP32[$4 + 164 >> 2]) & 1) {
    break label$4;
   }
   jsExceptionHere(1, 96506, 0);
   break label$1;
  }
  HEAP8[$4 + 159 | 0] = jsvIsFunction(HEAP32[$4 + 164 >> 2]) & 1;
  HEAP32[$4 + 152 >> 2] = (HEAPU8[HEAP32[$4 + 172 >> 2] + 5 | 0] & 15) << 3;
  HEAP8[$4 + 151 | 0] = 1;
  if (HEAP32[$4 + 160 >> 2] < 0) {
   HEAP32[$4 + 160 >> 2] = 0 - HEAP32[$4 + 160 >> 2];
   HEAP8[$4 + 151 | 0] = 0;
  }
  if (!HEAP32[$4 + 160 >> 2]) {
   HEAP32[$4 + 160 >> 2] = HEAP32[$4 + 152 >> 2];
  }
  jsvArrayBufferIteratorNew($4 + 88 | 0, HEAP32[$4 + 172 >> 2], 0);
  HEAP32[$4 + 28 >> 2] = 0;
  HEAP32[$4 + 24 >> 2] = 0;
  jsvArrayBufferIteratorNew($4 + 32 | 0, HEAP32[$4 + 168 >> 2], 0);
  while (1) {
   label$8: {
    if (!(jsvArrayBufferIteratorHasElement($4 + 88 | 0) & 1)) {
     $0 = 0;
     if (HEAP32[$4 + 24 >> 2] < HEAP32[$4 + 160 >> 2]) {
      break label$8;
     }
    }
    $0 = jsvArrayBufferIteratorHasElement($4 + 32 | 0);
   }
   if ($0 & 1) {
    label$11: {
     if (HEAP8[$4 + 159 | 0] & 1) {
      $0 = jsvArrayBufferIteratorGetIndex($4 + 88 | 0);
      break label$11;
     }
     $0 = 0;
    }
    HEAP32[$4 + 20 >> 2] = $0;
    while (1) {
     if (HEAP32[$4 + 24 >> 2] < HEAP32[$4 + 160 >> 2]) {
      label$15: {
       if (HEAP8[$4 + 151 | 0] & 1) {
        HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 28 >> 2] << HEAP32[$4 + 152 >> 2] | jsvArrayBufferIteratorGetIntegerValue($4 + 88 | 0);
        break label$15;
       }
       HEAP32[$4 + 28 >> 2] = jsvArrayBufferIteratorGetIntegerValue($4 + 88 | 0) << HEAP32[$4 + 24 >> 2] | HEAP32[$4 + 28 >> 2];
      }
      jsvArrayBufferIteratorNext($4 + 88 | 0);
      HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 152 >> 2] + HEAP32[$4 + 24 >> 2];
      continue;
     }
     break;
    }
    label$17: {
     if (HEAP8[$4 + 151 | 0] & 1) {
      HEAP32[$4 + 16 >> 2] = (1 << HEAP32[$4 + 160 >> 2]) - 1 & HEAP32[$4 + 28 >> 2] >> HEAP32[$4 + 24 >> 2] - HEAP32[$4 + 160 >> 2];
      break label$17;
     }
     HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 28 >> 2] & (1 << HEAP32[$4 + 160 >> 2]) - 1;
     HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 28 >> 2] >> HEAP32[$4 + 160 >> 2];
    }
    HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 24 >> 2] - HEAP32[$4 + 160 >> 2];
    label$19: {
     if (HEAP32[$4 + 164 >> 2]) {
      HEAP32[$4 + 12 >> 2] = 0;
      label$21: {
       if (HEAP8[$4 + 159 | 0] & 1) {
        HEAP32[$4 + 4 >> 2] = jsvNewFromInteger(HEAP32[$4 + 16 >> 2]);
        HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 20 >> 2];
        HEAP32[$4 + 12 >> 2] = jspeFunctionCall(HEAP32[$4 + 164 >> 2], 0, 0, 0, 2, $4 + 4 | 0);
        jsvUnLock(HEAP32[$4 + 4 >> 2]);
        break label$21;
       }
       label$23: {
        if (jsvIsArray(HEAP32[$4 + 164 >> 2]) & 1) {
         HEAP32[$4 + 12 >> 2] = jsvGetArrayItem(HEAP32[$4 + 164 >> 2], HEAP32[$4 + 16 >> 2]);
         break label$23;
        }
        HEAP32[$4 + 12 >> 2] = jsvArrayBufferGet(HEAP32[$4 + 164 >> 2], HEAP32[$4 + 16 >> 2]);
       }
      }
      jsvArrayBufferIteratorSetValue($4 + 32 | 0, HEAP32[$4 + 12 >> 2], 0);
      jsvUnLock(HEAP32[$4 + 12 >> 2]);
      break label$19;
     }
     jsvArrayBufferIteratorSetIntegerValue($4 + 32 | 0, HEAP32[$4 + 16 >> 2]);
    }
    jsvUnLock(HEAP32[$4 + 20 >> 2]);
    jsvArrayBufferIteratorNext($4 + 32 | 0);
    continue;
   }
   break;
  }
  jsvArrayBufferIteratorFree($4 + 88 | 0);
  jsvArrayBufferIteratorFree($4 + 32 | 0);
 }
 __stack_pointer = $4 + 176 | 0;
}

function jspeStatement() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 label$1: {
  label$2: {
   label$3: {
    if (HEAP16[HEAP32[38615] + 2 >> 1] == 128 | HEAP16[HEAP32[38615] + 2 >> 1] == 129 | (HEAP16[HEAP32[38615] + 2 >> 1] == 130 | HEAP16[HEAP32[38615] + 2 >> 1] == 131)) {
     break label$3;
    }
    if (HEAP16[HEAP32[38615] + 2 >> 1] == 133 | HEAP16[HEAP32[38615] + 2 >> 1] == 135 | (HEAP16[HEAP32[38615] + 2 >> 1] == 184 | HEAP16[HEAP32[38615] + 2 >> 1] == 182)) {
     break label$3;
    }
    if (HEAP16[HEAP32[38615] + 2 >> 1] == 183 | HEAP16[HEAP32[38615] + 2 >> 1] == 180 | (HEAP16[HEAP32[38615] + 2 >> 1] == 181 | HEAP16[HEAP32[38615] + 2 >> 1] == 175)) {
     break label$3;
    }
    if (HEAP16[HEAP32[38615] + 2 >> 1] == 190 | HEAP16[HEAP32[38615] + 2 >> 1] == 191 | (HEAP16[HEAP32[38615] + 2 >> 1] == 192 | HEAP16[HEAP32[38615] + 2 >> 1] == 196)) {
     break label$3;
    }
    if (HEAP16[HEAP32[38615] + 2 >> 1] == 152 | HEAP16[HEAP32[38615] + 2 >> 1] == 153 | (HEAP16[HEAP32[38615] + 2 >> 1] == 33 | HEAP16[HEAP32[38615] + 2 >> 1] == 45)) {
     break label$3;
    }
    if (HEAP16[HEAP32[38615] + 2 >> 1] == 43 | HEAP16[HEAP32[38615] + 2 >> 1] == 126 | HEAP16[HEAP32[38615] + 2 >> 1] == 91) {
     break label$3;
    }
    if (HEAP16[HEAP32[38615] + 2 >> 1] != 40) {
     break label$2;
    }
   }
   HEAP32[$0 + 12 >> 2] = jspeExpression();
   break label$1;
  }
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 123) {
   if (!(jspCheckStackPosition() & 1)) {
    HEAP32[$0 + 12 >> 2] = 0;
    break label$1;
   }
   jspeBlock();
   HEAP32[$0 + 12 >> 2] = 0;
   break label$1;
  }
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 59) {
   jslGetNextToken();
   HEAP32[$0 + 12 >> 2] = 0;
   break label$1;
  }
  if (!(!(HEAP16[HEAP32[38615] + 2 >> 1] == 172 | HEAP16[HEAP32[38615] + 2 >> 1] == 173) & HEAP16[HEAP32[38615] + 2 >> 1] != 174)) {
   HEAP32[$0 + 12 >> 2] = jspeStatementVar();
   break label$1;
  }
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 163) {
   HEAP32[$0 + 12 >> 2] = jspeStatementIf();
   break label$1;
  }
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 165) {
   HEAP32[$0 + 12 >> 2] = jspeStatementDoOrWhile(0);
   break label$1;
  }
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 166) {
   HEAP32[$0 + 12 >> 2] = jspeStatementDoOrWhile(1);
   break label$1;
  }
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 167) {
   HEAP32[$0 + 12 >> 2] = jspeStatementFor();
   break label$1;
  }
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 177) {
   HEAP32[$0 + 12 >> 2] = jspeStatementTry();
   break label$1;
  }
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 171) {
   HEAP32[$0 + 12 >> 2] = jspeStatementReturn();
   break label$1;
  }
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 176) {
   HEAP32[$0 + 12 >> 2] = jspeStatementThrow();
   break label$1;
  }
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 170) {
   HEAP32[$0 + 12 >> 2] = jspeStatementFunctionDecl(0);
   break label$1;
  }
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 194) {
   HEAP32[$0 + 12 >> 2] = jspeStatementFunctionDecl(1);
   break label$1;
  }
  label$18: {
   if (HEAP16[HEAP32[38615] + 2 >> 1] == 169) {
    jslGetNextToken();
    if ((HEAP32[46755] & 63) == 1) {
     label$21: {
      if (!(HEAP32[46755] & 512)) {
       jsExceptionHere(2, 101852, 0);
       break label$21;
      }
      HEAP32[46755] = HEAP32[46755] & -64 | 4;
     }
    }
    break label$18;
   }
   label$23: {
    if (HEAP16[HEAP32[38615] + 2 >> 1] == 168) {
     jslGetNextToken();
     if ((HEAP32[46755] & 63) == 1) {
      label$26: {
       if (!(HEAP32[46755] & 1536)) {
        jsExceptionHere(2, 101900, 0);
        break label$26;
       }
       HEAP32[46755] = HEAP32[46755] & -64 | 2;
      }
     }
     break label$23;
    }
    if (HEAP16[HEAP32[38615] + 2 >> 1] == 187) {
     HEAP32[$0 + 12 >> 2] = jspeStatementSwitch();
     break label$1;
    }
    label$29: {
     if (HEAP16[HEAP32[38615] + 2 >> 1] == 193) {
      jslGetNextToken();
      break label$29;
     }
     if (!(jslMatch(0) & 1)) {
      HEAP32[$0 + 12 >> 2] = 0;
      break label$1;
     }
    }
   }
  }
  HEAP32[$0 + 12 >> 2] = 0;
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function graphicsDrawEllipse($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 80 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 76 >> 2] = $0;
 HEAP32[$5 + 72 >> 2] = $1;
 HEAP32[$5 + 68 >> 2] = $2;
 HEAP32[$5 + 64 >> 2] = $3;
 HEAP32[$5 + 60 >> 2] = $4;
 graphicsToDeviceCoordinates(HEAP32[$5 + 76 >> 2], $5 + 72 | 0, $5 + 68 | 0);
 graphicsToDeviceCoordinates(HEAP32[$5 + 76 >> 2], $5 - -64 | 0, $5 + 60 | 0);
 if (HEAP32[$5 + 72 >> 2] > HEAP32[$5 + 64 >> 2]) {
  HEAP32[$5 + 56 >> 2] = HEAP32[$5 + 72 >> 2];
  HEAP32[$5 + 72 >> 2] = HEAP32[$5 + 64 >> 2];
  HEAP32[$5 + 64 >> 2] = HEAP32[$5 + 56 >> 2];
 }
 if (HEAP32[$5 + 68 >> 2] > HEAP32[$5 + 60 >> 2]) {
  HEAP32[$5 + 52 >> 2] = HEAP32[$5 + 68 >> 2];
  HEAP32[$5 + 68 >> 2] = HEAP32[$5 + 60 >> 2];
  HEAP32[$5 + 60 >> 2] = HEAP32[$5 + 52 >> 2];
 }
 HEAP32[$5 + 48 >> 2] = (HEAP32[$5 + 72 >> 2] + HEAP32[$5 + 64 >> 2] | 0) / 2;
 HEAP32[$5 + 44 >> 2] = (HEAP32[$5 + 68 >> 2] + HEAP32[$5 + 60 >> 2] | 0) / 2;
 HEAP32[$5 + 40 >> 2] = (HEAP32[$5 + 64 >> 2] - HEAP32[$5 + 72 >> 2] | 0) / 2;
 HEAP32[$5 + 36 >> 2] = (HEAP32[$5 + 60 >> 2] - HEAP32[$5 + 68 >> 2] | 0) / 2;
 HEAP32[$5 + 32 >> 2] = 0;
 HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 36 >> 2];
 HEAP32[$5 + 24 >> 2] = Math_imul(HEAP32[$5 + 40 >> 2], HEAP32[$5 + 40 >> 2]);
 HEAP32[$5 + 20 >> 2] = Math_imul(HEAP32[$5 + 36 >> 2], HEAP32[$5 + 36 >> 2]);
 HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 20 >> 2] - Math_imul(HEAP32[$5 + 24 >> 2], (HEAP32[$5 + 36 >> 2] << 1) - 1 | 0);
 HEAP8[$5 + 11 | 0] = 0;
 while (1) {
  HEAP8[$5 + 11 | 0] = 0;
  $0 = HEAP32[$5 + 76 >> 2];
  graphicsSetPixelDevice(HEAP32[$5 + 76 >> 2], HEAP32[$5 + 48 >> 2] + HEAP32[$5 + 32 >> 2] | 0, HEAP32[$5 + 44 >> 2] + HEAP32[$5 + 28 >> 2] | 0, HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
  $0 = HEAP32[$5 + 76 >> 2];
  graphicsSetPixelDevice(HEAP32[$5 + 76 >> 2], HEAP32[$5 + 48 >> 2] - HEAP32[$5 + 32 >> 2] | 0, HEAP32[$5 + 44 >> 2] + HEAP32[$5 + 28 >> 2] | 0, HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
  $0 = HEAP32[$5 + 76 >> 2];
  graphicsSetPixelDevice(HEAP32[$5 + 76 >> 2], HEAP32[$5 + 48 >> 2] + HEAP32[$5 + 32 >> 2] | 0, HEAP32[$5 + 44 >> 2] - HEAP32[$5 + 28 >> 2] | 0, HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
  $0 = HEAP32[$5 + 76 >> 2];
  graphicsSetPixelDevice(HEAP32[$5 + 76 >> 2], HEAP32[$5 + 48 >> 2] - HEAP32[$5 + 32 >> 2] | 0, HEAP32[$5 + 44 >> 2] - HEAP32[$5 + 28 >> 2] | 0, HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
  HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 16 >> 2] << 1;
  if (HEAP32[$5 + 12 >> 2] < (Math_imul(HEAP32[$5 + 20 >> 2], (HEAP32[$5 + 32 >> 2] << 1) + 1 | 0) | 0)) {
   HEAP32[$5 + 32 >> 2] = HEAP32[$5 + 32 >> 2] + 1;
   HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] + Math_imul(HEAP32[$5 + 20 >> 2], (HEAP32[$5 + 32 >> 2] << 1) + 1 | 0);
   HEAP8[$5 + 11 | 0] = 1;
  }
  if (HEAP32[$5 + 12 >> 2] > (Math_imul(HEAP32[$5 + 24 >> 2], 1 - (HEAP32[$5 + 28 >> 2] << 1) | 0) | 0)) {
   HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 28 >> 2] - 1;
   HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] - Math_imul(HEAP32[$5 + 24 >> 2], (HEAP32[$5 + 28 >> 2] << 1) - 1 | 0);
   HEAP8[$5 + 11 | 0] = 1;
  }
  $0 = 0;
  $0 = HEAP8[$5 + 11 | 0] & 1 ? HEAP32[$5 + 28 >> 2] >= 0 : $0;
  if ($0) {
   continue;
  }
  break;
 }
 while (1) {
  $0 = HEAP32[$5 + 32 >> 2];
  HEAP32[$5 + 32 >> 2] = $0 + 1;
  if (($0 | 0) < HEAP32[$5 + 40 >> 2]) {
   $0 = HEAP32[$5 + 76 >> 2];
   graphicsSetPixelDevice(HEAP32[$5 + 76 >> 2], HEAP32[$5 + 48 >> 2] + HEAP32[$5 + 32 >> 2] | 0, HEAP32[$5 + 44 >> 2], HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
   $0 = HEAP32[$5 + 76 >> 2];
   graphicsSetPixelDevice(HEAP32[$5 + 76 >> 2], HEAP32[$5 + 48 >> 2] - HEAP32[$5 + 32 >> 2] | 0, HEAP32[$5 + 44 >> 2], HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
   continue;
  }
  break;
 }
 __stack_pointer = $5 + 80 | 0;
}

function jswrap_onewire_search($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 96 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 88 >> 2] = $0;
 HEAP32[$2 + 84 >> 2] = $1;
 HEAP8[$2 + 83 | 0] = onewire_getpin(HEAP32[$2 + 88 >> 2]);
 label$1: {
  if (!(jshIsPinValid(HEAPU8[$2 + 83 | 0]) & 1)) {
   HEAP32[$2 + 92 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 76 >> 2] = jsvNewEmptyArray();
  if (!HEAP32[$2 + 76 >> 2]) {
   HEAP32[$2 + 92 >> 2] = 0;
   break label$1;
  }
  if (!(HEAP32[$2 + 84 >> 2] <= 255 & HEAP32[$2 + 84 >> 2] > 0)) {
   HEAP32[$2 + 84 >> 2] = 240;
  }
  HEAP32[$2 + 64 >> 2] = 0;
  HEAP32[$2 + 56 >> 2] = 0;
  HEAP32[$2 + 60 >> 2] = 0;
  HEAP32[$2 + 52 >> 2] = 1;
  while (1) {
   if (HEAP32[$2 + 52 >> 2]) {
    HEAP32[$2 + 48 >> 2] = 1;
    HEAP32[$2 + 44 >> 2] = 0;
    HEAP32[$2 + 40 >> 2] = 0;
    HEAP8[$2 + 37 | 0] = 1;
    HEAP32[$2 + 52 >> 2] = 0;
    if (!HEAP32[$2 + 56 >> 2]) {
     if (!(OneWireReset(HEAPU8[$2 + 83 | 0]) & 1)) {
      HEAP32[$2 + 64 >> 2] = 0;
      HEAP32[$2 + 56 >> 2] = 0;
      HEAP32[$2 + 60 >> 2] = 0;
      HEAP32[$2 + 92 >> 2] = HEAP32[$2 + 76 >> 2];
      break label$1;
     }
     $0 = HEAP32[$2 + 84 >> 2];
     $1 = $0 >> 31;
     OneWireWrite(HEAPU8[$2 + 83 | 0], 8, $0, $1);
     while (1) {
      label$11: {
       HEAP8[$2 + 39 | 0] = OneWireRead(HEAPU8[$2 + 83 | 0], 1);
       HEAP8[$2 + 38 | 0] = OneWireRead(HEAPU8[$2 + 83 | 0], 1);
       if (!(HEAPU8[$2 + 39 | 0] != 1 | HEAPU8[$2 + 38 | 0] != 1)) {
        break label$11;
       }
       label$13: {
        if (HEAPU8[$2 + 39 | 0] != HEAPU8[$2 + 38 | 0]) {
         HEAP8[$2 + 36 | 0] = HEAPU8[$2 + 39 | 0];
         break label$13;
        }
        label$15: {
         if (HEAP32[$2 + 48 >> 2] < HEAP32[$2 + 64 >> 2]) {
          HEAP8[$2 + 36 | 0] = (HEAPU8[HEAP32[$2 + 40 >> 2] + ($2 + 68 | 0) | 0] & HEAPU8[$2 + 37 | 0]) != 0;
          break label$15;
         }
         HEAP8[$2 + 36 | 0] = HEAP32[$2 + 48 >> 2] == HEAP32[$2 + 64 >> 2];
        }
        if (!HEAPU8[$2 + 36 | 0]) {
         HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 48 >> 2];
         if (HEAP32[$2 + 44 >> 2] < 9) {
          HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 44 >> 2];
         }
        }
       }
       label$19: {
        if (HEAPU8[$2 + 36 | 0] == 1) {
         $0 = HEAP32[$2 + 40 >> 2] + ($2 + 68 | 0) | 0;
         HEAP8[$0 | 0] = HEAPU8[$2 + 37 | 0] | HEAPU8[$0 | 0];
         break label$19;
        }
        $0 = HEAP32[$2 + 40 >> 2] + ($2 + 68 | 0) | 0;
        HEAP8[$0 | 0] = HEAPU8[$0 | 0] & ((HEAPU8[$2 + 37 | 0] ^ -1) & 255);
       }
       $1 = HEAPU8[$2 + 36 | 0];
       OneWireWrite(HEAPU8[$2 + 83 | 0], 1, $1, 0);
       HEAP32[$2 + 48 >> 2] = HEAP32[$2 + 48 >> 2] + 1;
       HEAP8[$2 + 37 | 0] = HEAPU8[$2 + 37 | 0] << 1;
       if (!HEAPU8[$2 + 37 | 0]) {
        HEAP32[$2 + 40 >> 2] = HEAP32[$2 + 40 >> 2] + 1;
        HEAP8[$2 + 37 | 0] = 1;
       }
       if (HEAP32[$2 + 40 >> 2] < 8) {
        continue;
       }
      }
      break;
     }
     if (HEAP32[$2 + 48 >> 2] >= 65) {
      HEAP32[$2 + 64 >> 2] = HEAP32[$2 + 44 >> 2];
      if (!HEAP32[$2 + 64 >> 2]) {
       HEAP32[$2 + 56 >> 2] = 1;
      }
      HEAP32[$2 + 52 >> 2] = 1;
     }
    }
    if (!(HEAPU8[$2 + 68 | 0] ? HEAP32[$2 + 52 >> 2] : 0)) {
     HEAP32[$2 + 64 >> 2] = 0;
     HEAP32[$2 + 56 >> 2] = 0;
     HEAP32[$2 + 60 >> 2] = 0;
     HEAP32[$2 + 52 >> 2] = 0;
    }
    if (HEAP32[$2 + 52 >> 2]) {
     HEAP32[$2 + 32 >> 2] = 0;
     while (1) {
      if (HEAP32[$2 + 32 >> 2] < 8) {
       $0 = itoch(HEAPU8[HEAP32[$2 + 32 >> 2] + ($2 + 68 | 0) | 0] >>> 4 | 0);
       HEAP8[(HEAP32[$2 + 32 >> 2] << 1) + $2 | 0] = $0;
       $0 = itoch(HEAPU8[HEAP32[$2 + 32 >> 2] + ($2 + 68 | 0) | 0] & 15);
       HEAP8[((HEAP32[$2 + 32 >> 2] << 1) + 1 | 0) + $2 | 0] = $0;
       HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 32 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP8[$2 + 16 | 0] = 0;
     jsvArrayPushString(HEAP32[$2 + 76 >> 2], $2);
    }
    continue;
   }
   break;
  }
  HEAP32[$2 + 92 >> 2] = HEAP32[$2 + 76 >> 2];
 }
 __stack_pointer = $2 + 96 | 0;
 return HEAP32[$2 + 92 >> 2];
}

function tflite__ParseFullyConnected_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 40 >> 2] = $0;
 HEAP32[$4 + 36 >> 2] = $1;
 HEAP32[$4 + 32 >> 2] = $2;
 HEAP32[$4 + 28 >> 2] = $3;
 tflite___28anonymous_20namespace_29__CheckParsePointerParams_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29(HEAP32[$4 + 40 >> 2], HEAP32[$4 + 36 >> 2], HEAP32[$4 + 32 >> 2], HEAP32[$4 + 28 >> 2]);
 tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__SafeBuiltinDataAllocator_28tflite__BuiltinDataAllocator__29($4 + 24 | 0, HEAP32[$4 + 32 >> 2]);
 std____2__unique_ptr_TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteFullyConnectedParams__28_29($4 + 16 | 0, $4 + 24 | 0);
 label$1: {
  if (!(bool_20std____2__operator___TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28std____2__unique_ptr_TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20const__2c_20std__nullptr_t_29($4 + 16 | 0, 0) & 1)) {
   $0 = HEAP32[$4 + 36 >> 2];
   $1 = HEAP32[$4 + 36 >> 2];
   HEAP32[$4 >> 2] = 100842;
   tflite__ErrorReporter__ReportError_28void__2c_20char_20const__2c_20____29($0, $1, 111890, $4);
   HEAP32[$4 + 44 >> 2] = 1;
   break label$1;
  }
  HEAP32[$4 + 8 >> 2] = tflite__Operator__builtin_options_as_FullyConnectedOptions_28_29_20const(HEAP32[$4 + 40 >> 2]);
  if (HEAP32[$4 + 8 >> 2]) {
   $0 = tflite___28anonymous_20namespace_29__ConvertActivation_28tflite__ActivationFunctionType_29(tflite__FullyConnectedOptions__fused_activation_function_28_29_20const(HEAP32[$4 + 8 >> 2]));
   HEAP32[std____2__unique_ptr_TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) >> 2] = $0;
   $0 = tflite__FullyConnectedOptions__keep_num_dims_28_29_20const(HEAP32[$4 + 8 >> 2]);
   HEAP8[std____2__unique_ptr_TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) + 8 | 0] = $0;
   $0 = tflite__FullyConnectedOptions__asymmetric_quantize_inputs_28_29_20const(HEAP32[$4 + 8 >> 2]);
   HEAP8[std____2__unique_ptr_TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) + 9 | 0] = $0;
   label$4: {
    label$5: {
     switch (tflite__FullyConnectedOptions__weights_format_28_29_20const(HEAP32[$4 + 8 >> 2]) | 0) {
     case 0:
      HEAP32[std____2__unique_ptr_TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) + 4 >> 2] = 0;
      break label$4;

     case 1:
      HEAP32[std____2__unique_ptr_TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) + 4 >> 2] = 1;
      break label$4;

     default:
      break label$5;
     }
    }
    tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$4 + 36 >> 2], 111537, 0);
    HEAP32[$4 + 44 >> 2] = 1;
    break label$1;
   }
  }
  $0 = std____2__unique_ptr_TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($4 + 16 | 0);
  HEAP32[HEAP32[$4 + 28 >> 2] >> 2] = $0;
  HEAP32[$4 + 44 >> 2] = 0;
 }
 HEAP32[$4 + 12 >> 2] = 1;
 std____2__unique_ptr_TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($4 + 16 | 0);
 __stack_pointer = $4 + 48 | 0;
 return HEAP32[$4 + 44 >> 2];
}

function tflite__reference_ops__FullyConnected_28tflite__FullyConnectedParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0;
 $9 = __stack_pointer - 112 | 0;
 __stack_pointer = $9;
 HEAP32[$9 + 108 >> 2] = $0;
 HEAP32[$9 + 104 >> 2] = $1;
 HEAP32[$9 + 100 >> 2] = $2;
 HEAP32[$9 + 96 >> 2] = $3;
 HEAP32[$9 + 92 >> 2] = $4;
 HEAP32[$9 + 88 >> 2] = $5;
 HEAP32[$9 + 84 >> 2] = $6;
 HEAP32[$9 + 80 >> 2] = $7;
 HEAP32[$9 + 76 >> 2] = $8;
 HEAP32[$9 + 72 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] >> 2];
 HEAP32[$9 + 68 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 4 >> 2];
 HEAP32[$9 + 64 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 8 >> 2];
 HEAP32[$9 + 60 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 12 >> 2];
 HEAP32[$9 + 56 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 16 >> 2];
 HEAP32[$9 + 52 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 20 >> 2];
 HEAP32[$9 + 48 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 24 >> 2];
 label$1: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$9 + 96 >> 2]) | 0) < 2) {
   break label$1;
  }
 }
 label$2: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$9 + 80 >> 2]) | 0) <= 0) {
   break label$2;
  }
 }
 label$3: {
  if (HEAP32[$9 + 52 >> 2] > HEAP32[$9 + 48 >> 2]) {
   break label$3;
  }
 }
 HEAP32[$9 + 44 >> 2] = tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$9 + 80 >> 2]);
 HEAP32[$9 + 40 >> 2] = tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$9 + 96 >> 2]);
 HEAP32[$9 + 36 >> 2] = tflite__FlatSizeSkipDim_28tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$9 + 80 >> 2], HEAP32[$9 + 44 >> 2] - 1 | 0);
 HEAP32[$9 + 32 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$9 + 96 >> 2], HEAP32[$9 + 40 >> 2] - 2 | 0, HEAP32[$9 + 80 >> 2], HEAP32[$9 + 44 >> 2] - 1 | 0);
 HEAP32[$9 + 28 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 96 >> 2], HEAP32[$9 + 40 >> 2] - 1 | 0);
 HEAP32[$9 + 24 >> 2] = 0;
 while (1) {
  if (HEAP32[$9 + 24 >> 2] < HEAP32[$9 + 36 >> 2]) {
   HEAP32[$9 + 20 >> 2] = 0;
   while (1) {
    if (HEAP32[$9 + 20 >> 2] < HEAP32[$9 + 32 >> 2]) {
     HEAP32[$9 + 16 >> 2] = 0;
     HEAP32[$9 + 12 >> 2] = 0;
     while (1) {
      if (HEAP32[$9 + 12 >> 2] < HEAP32[$9 + 28 >> 2]) {
       HEAP32[$9 + 8 >> 2] = HEAPU8[HEAP32[$9 + 100 >> 2] + (HEAP32[$9 + 12 >> 2] + Math_imul(HEAP32[$9 + 24 >> 2], HEAP32[$9 + 28 >> 2]) | 0) | 0];
       HEAP32[$9 + 4 >> 2] = HEAPU8[HEAP32[$9 + 92 >> 2] + (HEAP32[$9 + 12 >> 2] + Math_imul(HEAP32[$9 + 20 >> 2], HEAP32[$9 + 28 >> 2]) | 0) | 0];
       HEAP32[$9 + 16 >> 2] = HEAP32[$9 + 16 >> 2] + Math_imul(HEAP32[$9 + 4 >> 2] + HEAP32[$9 + 68 >> 2] | 0, HEAP32[$9 + 8 >> 2] + HEAP32[$9 + 72 >> 2] | 0);
       HEAP32[$9 + 12 >> 2] = HEAP32[$9 + 12 >> 2] + 1;
       continue;
      }
      break;
     }
     if (HEAP32[$9 + 84 >> 2]) {
      HEAP32[$9 + 16 >> 2] = HEAP32[HEAP32[$9 + 84 >> 2] + (HEAP32[$9 + 20 >> 2] << 2) >> 2] + HEAP32[$9 + 16 >> 2];
     }
     HEAP32[$9 + 16 >> 2] = tflite__MultiplyByQuantizedMultiplier_28int_2c_20int_2c_20int_29(HEAP32[$9 + 16 >> 2], HEAP32[$9 + 60 >> 2], HEAP32[$9 + 56 >> 2]);
     HEAP32[$9 + 16 >> 2] = HEAP32[$9 + 64 >> 2] + HEAP32[$9 + 16 >> 2];
     HEAP32[$9 + 16 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($9 + 16 | 0, $9 + 52 | 0) >> 2];
     HEAP32[$9 + 16 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($9 + 16 | 0, $9 + 48 | 0) >> 2];
     HEAP8[HEAP32[$9 + 76 >> 2] + (HEAP32[$9 + 20 >> 2] + Math_imul(HEAP32[$9 + 32 >> 2], HEAP32[$9 + 24 >> 2]) | 0) | 0] = HEAP32[$9 + 16 >> 2];
     HEAP32[$9 + 20 >> 2] = HEAP32[$9 + 20 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$9 + 24 >> 2] = HEAP32[$9 + 24 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $9 + 112 | 0;
}

function lcdSetCallbacks_ArrayBuffer($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = jsvObjectGetChildIfExists(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 101361);
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 >> 2] = jsvGetDataPointer(HEAP32[$1 + 8 >> 2], $1 + 4 | 0);
 jsvUnLock(HEAP32[$1 + 8 >> 2]);
 label$1: {
  label$2: {
   if (!HEAP32[$1 >> 2]) {
    break label$2;
   }
   if (HEAPU32[$1 + 4 >> 2] < graphicsGetMemoryRequired(HEAP32[$1 + 12 >> 2]) >>> 0) {
    break label$2;
   }
   $0 = HEAP32[$1 + 12 >> 2];
   if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 1) {
    break label$2;
   }
   $0 = HEAP32[$1 + 12 >> 2];
   $2 = HEAP32[$1 >> 2];
   HEAP8[$0 + 48 | 0] = $2;
   HEAP8[$0 + 49 | 0] = $2 >>> 8;
   HEAP8[$0 + 50 | 0] = $2 >>> 16;
   HEAP8[$0 + 51 | 0] = $2 >>> 24;
   label$3: {
    label$4: {
     if (HEAPU8[HEAP32[$1 + 12 >> 2] + 16 | 0] != 1) {
      break label$4;
     }
     $0 = HEAP32[$1 + 12 >> 2];
     if (!((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 4)) {
      break label$4;
     }
     $0 = HEAP32[$1 + 12 >> 2];
     if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 11) {
      break label$4;
     }
     $0 = HEAP32[$1 + 12 >> 2];
     HEAP8[$0 + 52 | 0] = 52;
     HEAP8[$0 + 53 | 0] = 2;
     HEAP8[$0 + 54 | 0] = 0;
     HEAP8[$0 + 55 | 0] = 0;
     $0 = HEAP32[$1 + 12 >> 2];
     HEAP8[$0 + 60 | 0] = 53;
     HEAP8[$0 + 61 | 0] = 2;
     HEAP8[$0 + 62 | 0] = 0;
     HEAP8[$0 + 63 | 0] = 0;
     $0 = HEAP32[$1 + 12 >> 2];
     HEAP8[$0 + 56 | 0] = 54;
     HEAP8[$0 + 57 | 0] = 2;
     HEAP8[$0 + 58 | 0] = 0;
     HEAP8[$0 + 59 | 0] = 0;
     break label$3;
    }
    label$5: {
     label$6: {
      if (HEAPU8[HEAP32[$1 + 12 >> 2] + 16 | 0] != 8) {
       break label$6;
      }
      $0 = HEAP32[$1 + 12 >> 2];
      if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 11) {
       break label$6;
      }
      $0 = HEAP32[$1 + 12 >> 2];
      HEAP8[$0 + 52 | 0] = 55;
      HEAP8[$0 + 53 | 0] = 2;
      HEAP8[$0 + 54 | 0] = 0;
      HEAP8[$0 + 55 | 0] = 0;
      $0 = HEAP32[$1 + 12 >> 2];
      HEAP8[$0 + 60 | 0] = 56;
      HEAP8[$0 + 61 | 0] = 2;
      HEAP8[$0 + 62 | 0] = 0;
      HEAP8[$0 + 63 | 0] = 0;
      $0 = HEAP32[$1 + 12 >> 2];
      HEAP8[$0 + 56 | 0] = 57;
      HEAP8[$0 + 57 | 0] = 2;
      HEAP8[$0 + 58 | 0] = 0;
      HEAP8[$0 + 59 | 0] = 0;
      $0 = HEAP32[$1 + 12 >> 2];
      HEAP8[$0 + 68 | 0] = 58;
      HEAP8[$0 + 69 | 0] = 2;
      HEAP8[$0 + 70 | 0] = 0;
      HEAP8[$0 + 71 | 0] = 0;
      break label$5;
     }
     $0 = HEAP32[$1 + 12 >> 2];
     HEAP8[$0 + 52 | 0] = 59;
     HEAP8[$0 + 53 | 0] = 2;
     HEAP8[$0 + 54 | 0] = 0;
     HEAP8[$0 + 55 | 0] = 0;
     $0 = HEAP32[$1 + 12 >> 2];
     HEAP8[$0 + 60 | 0] = 53;
     HEAP8[$0 + 61 | 0] = 2;
     HEAP8[$0 + 62 | 0] = 0;
     HEAP8[$0 + 63 | 0] = 0;
     $0 = HEAP32[$1 + 12 >> 2];
     HEAP8[$0 + 56 | 0] = 60;
     HEAP8[$0 + 57 | 0] = 2;
     HEAP8[$0 + 58 | 0] = 0;
     HEAP8[$0 + 59 | 0] = 0;
    }
   }
   break label$1;
  }
  if (jsvIsArrayBuffer(HEAP32[$1 + 8 >> 2]) & 1) {
   $0 = HEAP32[$1 + 12 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   HEAP8[$0 + 48 | 0] = $2;
   HEAP8[$0 + 49 | 0] = $2 >>> 8;
   HEAP8[$0 + 50 | 0] = $2 >>> 16;
   HEAP8[$0 + 51 | 0] = $2 >>> 24;
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP8[$0 + 52 | 0] = 61;
   HEAP8[$0 + 53 | 0] = 2;
   HEAP8[$0 + 54 | 0] = 0;
   HEAP8[$0 + 55 | 0] = 0;
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP8[$0 + 60 | 0] = 62;
   HEAP8[$0 + 61 | 0] = 2;
   HEAP8[$0 + 62 | 0] = 0;
   HEAP8[$0 + 63 | 0] = 0;
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP8[$0 + 56 | 0] = 63;
   HEAP8[$0 + 57 | 0] = 2;
   HEAP8[$0 + 58 | 0] = 0;
   HEAP8[$0 + 59 | 0] = 0;
  }
 }
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_graphics_blit($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 224 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 216 >> 2] = $0;
 HEAP32[$2 + 212 >> 2] = $1;
 label$1: {
  if (!(graphicsGetFromVar($2 + 136 | 0, HEAP32[$2 + 216 >> 2]) & 1)) {
   HEAP32[$2 + 220 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 132 >> 2] = HEAPU8[$2 + 148 | 0] | HEAPU8[$2 + 149 | 0] << 8;
  HEAP32[$2 + 128 >> 2] = HEAPU8[$2 + 150 | 0] | HEAPU8[$2 + 151 | 0] << 8;
  HEAP32[$2 + 124 >> 2] = 0;
  HEAP32[$2 + 120 >> 2] = 0;
  HEAP32[$2 + 116 >> 2] = 0;
  HEAP32[$2 + 112 >> 2] = 0;
  HEAP32[$2 + 108 >> 2] = 0;
  HEAP32[$2 + 104 >> 2] = 0;
  HEAP8[$2 + 103 | 0] = 0;
  HEAP32[$2 + 16 >> 2] = 111158;
  HEAP16[$2 + 20 >> 1] = 10;
  HEAP32[$2 + 24 >> 2] = $2 + 124;
  HEAP32[$2 + 28 >> 2] = 111155;
  HEAP16[$2 + 32 >> 1] = 10;
  HEAP32[$2 + 36 >> 2] = $2 + 120;
  HEAP32[$2 + 40 >> 2] = 97016;
  HEAP16[$2 + 44 >> 1] = 10;
  HEAP32[$2 + 48 >> 2] = $2 + 116;
  HEAP32[$2 + 52 >> 2] = 103644;
  HEAP16[$2 + 56 >> 1] = 10;
  HEAP32[$2 + 60 >> 2] = $2 + 112;
  HEAP32[$2 + 64 >> 2] = 110879;
  HEAP16[$2 + 68 >> 1] = 10;
  HEAP32[$2 + 72 >> 2] = $2 + 108;
  HEAP32[$2 + 76 >> 2] = 110876;
  HEAP16[$2 + 80 >> 1] = 10;
  HEAP32[$2 + 84 >> 2] = $2 + 104;
  HEAP32[$2 + 88 >> 2] = 106713;
  HEAP16[$2 + 92 >> 1] = 12;
  HEAP32[$2 + 96 >> 2] = $2 + 103;
  label$3: {
   if (jsvIsObject(HEAP32[$2 + 212 >> 2]) & 1) {
    if (jsvReadConfigObject(HEAP32[$2 + 212 >> 2], $2 + 16 | 0, 7) & 1) {
     break label$3;
    }
   }
   jsExceptionHere(1, 100229, 0);
   HEAP32[$2 + 220 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$2 + 124 >> 2] < 0) {
   HEAP32[$2 + 108 >> 2] = HEAP32[$2 + 108 >> 2] - HEAP32[$2 + 124 >> 2];
   HEAP32[$2 + 116 >> 2] = HEAP32[$2 + 124 >> 2] + HEAP32[$2 + 116 >> 2];
   HEAP32[$2 + 124 >> 2] = 0;
  }
  if (HEAP32[$2 + 120 >> 2] < 0) {
   HEAP32[$2 + 104 >> 2] = HEAP32[$2 + 104 >> 2] - HEAP32[$2 + 120 >> 2];
   HEAP32[$2 + 112 >> 2] = HEAP32[$2 + 120 >> 2] + HEAP32[$2 + 112 >> 2];
   HEAP32[$2 + 120 >> 2] = 0;
  }
  HEAP32[$2 + 12 >> 2] = (HEAP32[$2 + 124 >> 2] + HEAP32[$2 + 116 >> 2] | 0) - HEAP32[$2 + 132 >> 2];
  if (HEAP32[$2 + 12 >> 2] > 0) {
   HEAP32[$2 + 116 >> 2] = HEAP32[$2 + 116 >> 2] - HEAP32[$2 + 12 >> 2];
  }
  HEAP32[$2 + 12 >> 2] = (HEAP32[$2 + 120 >> 2] + HEAP32[$2 + 112 >> 2] | 0) - HEAP32[$2 + 128 >> 2];
  if (HEAP32[$2 + 12 >> 2] > 0) {
   HEAP32[$2 + 112 >> 2] = HEAP32[$2 + 112 >> 2] - HEAP32[$2 + 12 >> 2];
  }
  if (HEAP32[$2 + 108 >> 2] < 0) {
   HEAP32[$2 + 124 >> 2] = HEAP32[$2 + 124 >> 2] - HEAP32[$2 + 108 >> 2];
   HEAP32[$2 + 116 >> 2] = HEAP32[$2 + 108 >> 2] + HEAP32[$2 + 116 >> 2];
   HEAP32[$2 + 108 >> 2] = 0;
  }
  if (HEAP32[$2 + 104 >> 2] < 0) {
   HEAP32[$2 + 120 >> 2] = HEAP32[$2 + 120 >> 2] - HEAP32[$2 + 104 >> 2];
   HEAP32[$2 + 112 >> 2] = HEAP32[$2 + 104 >> 2] + HEAP32[$2 + 112 >> 2];
   HEAP32[$2 + 104 >> 2] = 0;
  }
  HEAP32[$2 + 12 >> 2] = (HEAP32[$2 + 108 >> 2] + HEAP32[$2 + 116 >> 2] | 0) - HEAP32[$2 + 132 >> 2];
  if (HEAP32[$2 + 12 >> 2] > 0) {
   HEAP32[$2 + 116 >> 2] = HEAP32[$2 + 116 >> 2] - HEAP32[$2 + 12 >> 2];
  }
  HEAP32[$2 + 12 >> 2] = (HEAP32[$2 + 104 >> 2] + HEAP32[$2 + 112 >> 2] | 0) - HEAP32[$2 + 128 >> 2];
  if (HEAP32[$2 + 12 >> 2] > 0) {
   HEAP32[$2 + 112 >> 2] = HEAP32[$2 + 112 >> 2] - HEAP32[$2 + 12 >> 2];
  }
  if (!(HEAP32[$2 + 116 >> 2] <= 0 & HEAP32[$2 + 112 >> 2] <= 0)) {
   FUNCTION_TABLE[HEAPU8[$2 + 200 | 0] | HEAPU8[$2 + 201 | 0] << 8 | (HEAPU8[$2 + 202 | 0] << 16 | HEAPU8[$2 + 203 | 0] << 24)]($2 + 136 | 0, HEAP32[$2 + 124 >> 2], HEAP32[$2 + 120 >> 2], HEAP32[$2 + 116 >> 2], HEAP32[$2 + 112 >> 2], HEAP32[$2 + 108 >> 2], HEAP32[$2 + 104 >> 2]);
   if (HEAP8[$2 + 103 | 0] & 1) {
    graphicsSetModified($2 + 136 | 0, HEAP32[$2 + 108 >> 2], HEAP32[$2 + 104 >> 2], HEAP32[$2 + 108 >> 2] + HEAP32[$2 + 116 >> 2] | 0, HEAP32[$2 + 104 >> 2] + HEAP32[$2 + 112 >> 2] | 0);
    graphicsSetVar($2 + 136 | 0);
   }
  }
  HEAP32[$2 + 220 >> 2] = jsvLockAgain(HEAP32[$2 + 216 >> 2]);
 }
 __stack_pointer = $2 + 224 | 0;
 return HEAP32[$2 + 220 >> 2];
}

function tflite__ParseConv2D_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 40 >> 2] = $0;
 HEAP32[$4 + 36 >> 2] = $1;
 HEAP32[$4 + 32 >> 2] = $2;
 HEAP32[$4 + 28 >> 2] = $3;
 tflite___28anonymous_20namespace_29__CheckParsePointerParams_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29(HEAP32[$4 + 40 >> 2], HEAP32[$4 + 36 >> 2], HEAP32[$4 + 32 >> 2], HEAP32[$4 + 28 >> 2]);
 tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__SafeBuiltinDataAllocator_28tflite__BuiltinDataAllocator__29($4 + 24 | 0, HEAP32[$4 + 32 >> 2]);
 std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteConvParams__28_29($4 + 16 | 0, $4 + 24 | 0);
 label$1: {
  if (!(bool_20std____2__operator___TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20const__2c_20std__nullptr_t_29($4 + 16 | 0, 0) & 1)) {
   $0 = HEAP32[$4 + 36 >> 2];
   $1 = HEAP32[$4 + 36 >> 2];
   HEAP32[$4 >> 2] = 100842;
   tflite__ErrorReporter__ReportError_28void__2c_20char_20const__2c_20____29($0, $1, 111890, $4);
   HEAP32[$4 + 44 >> 2] = 1;
   break label$1;
  }
  HEAP32[$4 + 8 >> 2] = tflite__Operator__builtin_options_as_Conv2DOptions_28_29_20const(HEAP32[$4 + 40 >> 2]);
  if (HEAP32[$4 + 8 >> 2]) {
   $0 = tflite___28anonymous_20namespace_29__ConvertPadding_28tflite__Padding_29(tflite__Conv2DOptions__padding_28_29_20const(HEAP32[$4 + 8 >> 2]));
   HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) >> 2] = $0;
   $0 = tflite__Conv2DOptions__stride_w_28_29_20const(HEAP32[$4 + 8 >> 2]);
   HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) + 4 >> 2] = $0;
   $0 = tflite__Conv2DOptions__stride_h_28_29_20const(HEAP32[$4 + 8 >> 2]);
   HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) + 8 >> 2] = $0;
   $0 = tflite___28anonymous_20namespace_29__ConvertActivation_28tflite__ActivationFunctionType_29(tflite__Conv2DOptions__fused_activation_function_28_29_20const(HEAP32[$4 + 8 >> 2]));
   HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) + 12 >> 2] = $0;
   $0 = tflite__Conv2DOptions__dilation_w_factor_28_29_20const(HEAP32[$4 + 8 >> 2]);
   HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) + 16 >> 2] = $0;
   $0 = tflite__Conv2DOptions__dilation_h_factor_28_29_20const(HEAP32[$4 + 8 >> 2]);
   HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) + 20 >> 2] = $0;
  }
  $0 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($4 + 16 | 0);
  HEAP32[HEAP32[$4 + 28 >> 2] >> 2] = $0;
  HEAP32[$4 + 44 >> 2] = 0;
 }
 HEAP32[$4 + 12 >> 2] = 1;
 std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($4 + 16 | 0);
 __stack_pointer = $4 + 48 | 0;
 return HEAP32[$4 + 44 >> 2];
}

function tflite__ParsePool_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 40 >> 2] = $0;
 HEAP32[$4 + 36 >> 2] = $1;
 HEAP32[$4 + 32 >> 2] = $2;
 HEAP32[$4 + 28 >> 2] = $3;
 tflite___28anonymous_20namespace_29__CheckParsePointerParams_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29(HEAP32[$4 + 40 >> 2], HEAP32[$4 + 36 >> 2], HEAP32[$4 + 32 >> 2], HEAP32[$4 + 28 >> 2]);
 tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__SafeBuiltinDataAllocator_28tflite__BuiltinDataAllocator__29($4 + 24 | 0, HEAP32[$4 + 32 >> 2]);
 std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLitePoolParams__28_29($4 + 16 | 0, $4 + 24 | 0);
 label$1: {
  if (!(bool_20std____2__operator___TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20const__2c_20std__nullptr_t_29($4 + 16 | 0, 0) & 1)) {
   $0 = HEAP32[$4 + 36 >> 2];
   $1 = HEAP32[$4 + 36 >> 2];
   HEAP32[$4 >> 2] = 100842;
   tflite__ErrorReporter__ReportError_28void__2c_20char_20const__2c_20____29($0, $1, 111890, $4);
   HEAP32[$4 + 44 >> 2] = 1;
   break label$1;
  }
  HEAP32[$4 + 8 >> 2] = tflite__Operator__builtin_options_as_Pool2DOptions_28_29_20const(HEAP32[$4 + 40 >> 2]);
  if (HEAP32[$4 + 8 >> 2]) {
   $0 = tflite___28anonymous_20namespace_29__ConvertPadding_28tflite__Padding_29(tflite__Pool2DOptions__padding_28_29_20const(HEAP32[$4 + 8 >> 2]));
   HEAP32[std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) >> 2] = $0;
   $0 = tflite__Pool2DOptions__stride_w_28_29_20const(HEAP32[$4 + 8 >> 2]);
   HEAP32[std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) + 4 >> 2] = $0;
   $0 = tflite__Pool2DOptions__stride_h_28_29_20const(HEAP32[$4 + 8 >> 2]);
   HEAP32[std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) + 8 >> 2] = $0;
   $0 = tflite__Pool2DOptions__filter_width_28_29_20const(HEAP32[$4 + 8 >> 2]);
   HEAP32[std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) + 12 >> 2] = $0;
   $0 = tflite__Pool2DOptions__filter_height_28_29_20const(HEAP32[$4 + 8 >> 2]);
   HEAP32[std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) + 16 >> 2] = $0;
   $0 = tflite___28anonymous_20namespace_29__ConvertActivation_28tflite__ActivationFunctionType_29(tflite__Pool2DOptions__fused_activation_function_28_29_20const(HEAP32[$4 + 8 >> 2]));
   HEAP32[std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) + 20 >> 2] = $0;
  }
  $0 = std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($4 + 16 | 0);
  HEAP32[HEAP32[$4 + 28 >> 2] >> 2] = $0;
  HEAP32[$4 + 44 >> 2] = 0;
 }
 HEAP32[$4 + 12 >> 2] = 1;
 std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($4 + 16 | 0);
 __stack_pointer = $4 + 48 | 0;
 return HEAP32[$4 + 44 >> 2];
}

function jswrap_e_dumpVariables() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0;
 $0 = __stack_pointer - 128 | 0;
 __stack_pointer = $0;
 jsiConsolePrintf(129187, 0);
 HEAP32[$0 + 124 >> 2] = 0;
 while (1) {
  if (HEAPU32[$0 + 124 >> 2] < jsvGetMemoryTotal() >>> 0) {
   HEAP16[$0 + 122 >> 1] = HEAP32[$0 + 124 >> 2] + 1;
   HEAP32[$0 + 116 >> 2] = _jsvGetAddressOf(HEAPU16[$0 + 122 >> 1]);
   $1 = HEAP32[$0 + 116 >> 2];
   label$3: {
    if (!((HEAPU8[$1 + 11 | 0] | HEAPU8[$1 + 12 | 0] << 8) & 63)) {
     break label$3;
    }
    if (jsvIsStringExt(HEAP32[$0 + 116 >> 2]) & 1) {
     break label$3;
    }
    HEAP32[$0 + 112 >> 2] = 1;
    label$4: {
     if (jsvIsFlatString(HEAP32[$0 + 116 >> 2]) & 1) {
      HEAP32[$0 + 108 >> 2] = jsvGetFlatStringBlocks(HEAP32[$0 + 116 >> 2]);
      HEAP32[$0 + 124 >> 2] = HEAP32[$0 + 108 >> 2] + HEAP32[$0 + 124 >> 2];
      HEAP32[$0 + 112 >> 2] = HEAP32[$0 + 108 >> 2] + HEAP32[$0 + 112 >> 2];
      break label$4;
     }
     if (jsvHasCharacterData(HEAP32[$0 + 116 >> 2]) & 1) {
      HEAP16[$0 + 106 >> 1] = jsvGetLastChild(HEAP32[$0 + 116 >> 2]);
      while (1) {
       if (HEAPU16[$0 + 106 >> 1]) {
        HEAP32[$0 + 100 >> 2] = jsvLock(HEAPU16[$0 + 106 >> 1]);
        HEAP32[$0 + 112 >> 2] = HEAP32[$0 + 112 >> 2] + 1;
        HEAP16[$0 + 106 >> 1] = jsvGetLastChild(HEAP32[$0 + 100 >> 2]);
        jsvUnLock(HEAP32[$0 + 100 >> 2]);
        continue;
       }
       break;
      }
     }
    }
    $2 = HEAPU16[$0 + 122 >> 1];
    $3 = HEAP32[$0 + 112 >> 2];
    $1 = HEAP32[$0 + 116 >> 2];
    HEAP32[$0 + 72 >> 2] = (HEAPU8[$1 + 11 | 0] | HEAPU8[$1 + 12 | 0] << 8) & 63;
    HEAP32[$0 + 68 >> 2] = $3;
    HEAP32[$0 + 64 >> 2] = $2;
    jsiConsolePrintf(112617, $0 - -64 | 0);
    label$9: {
     if (jsvIsName(HEAP32[$0 + 116 >> 2]) & 1) {
      HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 116 >> 2];
      jsiConsolePrintf(112584, $0 + 16 | 0);
      break label$9;
     }
     label$11: {
      if (jsvIsNumeric(HEAP32[$0 + 116 >> 2]) & 1) {
       HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 116 >> 2];
       jsiConsolePrintf(112588, $0 + 32 | 0);
       break label$11;
      }
      label$13: {
       if (jsvIsString(HEAP32[$0 + 116 >> 2]) & 1) {
        label$15: {
         if (jsvGetStringLength(HEAP32[$0 + 116 >> 2]) >>> 0 > 20) {
          HEAP32[$0 + 96 >> 2] = jsvNewWritableStringFromStringVar(HEAP32[$0 + 116 >> 2], 0, 17);
          jsvAppendString(HEAP32[$0 + 96 >> 2], 112336);
          break label$15;
         }
         HEAP32[$0 + 96 >> 2] = jsvLockAgain(HEAP32[$0 + 116 >> 2]);
        }
        HEAP32[$0 + 48 >> 2] = HEAP32[$0 + 96 >> 2];
        jsiConsolePrintf(112599, $0 + 48 | 0);
        jsvUnLock(HEAP32[$0 + 96 >> 2]);
        break label$13;
       }
       label$17: {
        if (jsvIsObject(HEAP32[$0 + 116 >> 2]) & 1) {
         jsiConsolePrintf(112576, 0);
         break label$17;
        }
        label$19: {
         if (jsvIsArray(HEAP32[$0 + 116 >> 2]) & 1) {
          jsiConsolePrintf(112569, 0);
          break label$19;
         }
         jsiConsolePrintf(112648, 0);
        }
       }
      }
     }
    }
    label$21: {
     if (!(jsvHasSingleChild(HEAP32[$0 + 116 >> 2]) & 1)) {
      if (!(jsvHasChildren(HEAP32[$0 + 116 >> 2]) & 1)) {
       break label$21;
      }
     }
     HEAP16[$0 + 94 >> 1] = jsvGetFirstChild(HEAP32[$0 + 116 >> 2]);
     while (1) {
      if (HEAPU16[$0 + 94 >> 1]) {
       HEAP32[$0 + 88 >> 2] = jsvLock(HEAPU16[$0 + 94 >> 1]);
       HEAP32[$0 >> 2] = HEAPU16[$0 + 94 >> 1];
       jsiConsolePrintf(112623, $0);
       label$25: {
        if (jsvHasChildren(HEAP32[$0 + 116 >> 2]) & 1) {
         HEAP16[$0 + 94 >> 1] = jsvGetNextSibling(HEAP32[$0 + 88 >> 2]);
         break label$25;
        }
        HEAP16[$0 + 94 >> 1] = 0;
       }
       jsvUnLock(HEAP32[$0 + 88 >> 2]);
       continue;
      }
      break;
     }
    }
    jsiConsolePrintString(129587);
   }
   HEAP32[$0 + 124 >> 2] = HEAP32[$0 + 124 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $0 + 128 | 0;
}

function tflite__ops__micro__conv__CalculateOpData_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteConvParams_20const__2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20TfLiteType_2c_20tflite__ops__micro__conv__OpData__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 var $11 = 0;
 $11 = __stack_pointer - 128 | 0;
 __stack_pointer = $11;
 HEAP32[$11 + 120 >> 2] = $0;
 HEAP32[$11 + 116 >> 2] = $1;
 HEAP32[$11 + 112 >> 2] = $2;
 HEAP32[$11 + 108 >> 2] = $3;
 HEAP32[$11 + 104 >> 2] = $4;
 HEAP32[$11 + 100 >> 2] = $5;
 HEAP32[$11 + 96 >> 2] = $6;
 HEAP32[$11 + 92 >> 2] = $7;
 HEAP32[$11 + 88 >> 2] = $8;
 HEAP32[$11 + 84 >> 2] = $9;
 HEAP32[$11 + 80 >> 2] = $10;
 HEAP8[$11 + 79 | 0] = HEAP32[HEAP32[HEAP32[$11 + 116 >> 2] >> 2] >> 2] == 3;
 label$1: {
  if (!(HEAP8[$11 + 79 | 0] & 1 | HEAP32[HEAP32[HEAP32[$11 + 116 >> 2] >> 2] >> 2] == 2)) {
   $0 = HEAP32[HEAP32[$11 + 120 >> 2] + 20 >> 2];
   $1 = HEAP32[$11 + 120 >> 2];
   HEAP32[$11 + 16 >> 2] = 111074;
   FUNCTION_TABLE[$0 | 0]($1, 111890, $11 + 16 | 0);
   HEAP32[$11 + 124 >> 2] = 1;
   break label$1;
  }
  if (HEAP32[HEAP32[HEAP32[$11 + 116 >> 2] + 4 >> 2] >> 2] != 1) {
   $0 = HEAP32[HEAP32[$11 + 120 >> 2] + 20 >> 2];
   $1 = HEAP32[$11 + 120 >> 2];
   $2 = HEAP32[HEAP32[HEAP32[$11 + 116 >> 2] + 4 >> 2] >> 2];
   HEAP32[$11 + 12 >> 2] = 1;
   HEAP32[$11 + 8 >> 2] = $2;
   HEAP32[$11 + 4 >> 2] = 111277;
   HEAP32[$11 >> 2] = 104214;
   FUNCTION_TABLE[$0 | 0]($1, 126505, $11);
   HEAP32[$11 + 124 >> 2] = 1;
   break label$1;
  }
  HEAP32[$11 + 72 >> 2] = HEAP32[HEAP32[$11 + 112 >> 2] >> 2];
  tflite__ComputePaddingHeightWidth_28int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20TfLitePadding_2c_20int__2c_20int__29($11 + 56 | 0, HEAP32[HEAP32[$11 + 112 >> 2] + 8 >> 2], HEAP32[HEAP32[$11 + 112 >> 2] + 4 >> 2], HEAP32[HEAP32[$11 + 112 >> 2] + 20 >> 2], HEAP32[HEAP32[$11 + 112 >> 2] + 16 >> 2], HEAP32[$11 + 104 >> 2], HEAP32[$11 + 108 >> 2], HEAP32[$11 + 96 >> 2], HEAP32[$11 + 100 >> 2], HEAP32[$11 + 72 >> 2], $11 + 88 | 0, $11 + 92 | 0);
  $0 = HEAP32[$11 + 60 >> 2];
  $1 = HEAP32[$11 + 56 >> 2];
  $3 = $1;
  $2 = HEAP32[$11 + 80 >> 2];
  $1 = $2;
  HEAP32[$1 >> 2] = $3;
  HEAP32[$1 + 4 >> 2] = $0;
  $1 = HEAP32[$11 + 68 >> 2];
  $0 = HEAP32[$11 + 64 >> 2];
  $3 = $0;
  $0 = $2;
  HEAP32[$0 + 8 >> 2] = $3;
  HEAP32[$0 + 12 >> 2] = $1;
  if (HEAP32[$11 + 84 >> 2] != 1) {
   HEAP32[$11 + 52 >> 2] = tflite__GetInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$11 + 120 >> 2], HEAP32[$11 + 116 >> 2], 0);
   HEAP32[$11 + 48 >> 2] = tflite__GetInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$11 + 120 >> 2], HEAP32[$11 + 116 >> 2], 1);
   HEAP32[$11 + 44 >> 2] = tflite__GetOptionalInputTensor_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$11 + 120 >> 2], HEAP32[$11 + 116 >> 2], 2);
   HEAP32[$11 + 40 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$11 + 120 >> 2], HEAP32[$11 + 116 >> 2], 0);
   HEAP32[$11 + 36 >> 2] = HEAP32[HEAP32[HEAP32[$11 + 48 >> 2] + 20 >> 2] + 4 >> 2];
   HEAP32[$11 + 32 >> 2] = tflite__PopulateConvolutionQuantizationParams_28TfLiteContext__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20TfLiteFusedActivation_20const__2c_20int__2c_20int__2c_20int__2c_20int__2c_20int__2c_20int__2c_20int_29(HEAP32[$11 + 120 >> 2], HEAP32[$11 + 52 >> 2], HEAP32[$11 + 48 >> 2], HEAP32[$11 + 44 >> 2], HEAP32[$11 + 40 >> 2], HEAP32[$11 + 112 >> 2] + 12 | 0, HEAP32[$11 + 80 >> 2] + 28 | 0, HEAP32[$11 + 80 >> 2] + 32 | 0, HEAP32[$11 + 80 >> 2] + 44 | 0, HEAP32[$11 + 80 >> 2] + 48 | 0, HEAP32[HEAP32[$11 + 80 >> 2] + 36 >> 2], HEAP32[HEAP32[$11 + 80 >> 2] + 40 >> 2], HEAP32[$11 + 36 >> 2]);
   if (HEAP32[$11 + 32 >> 2]) {
    HEAP32[$11 + 124 >> 2] = HEAP32[$11 + 32 >> 2];
    break label$1;
   }
  }
  HEAP32[$11 + 124 >> 2] = 0;
 }
 __stack_pointer = $11 + 128 | 0;
 return HEAP32[$11 + 124 >> 2];
}

function __jspeAssignmentExpression($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 label$1: {
  label$2: {
   if (HEAP16[HEAP32[38615] + 2 >> 1] == 61 | HEAP16[HEAP32[38615] + 2 >> 1] == 150 | (HEAP16[HEAP32[38615] + 2 >> 1] == 151 | HEAP16[HEAP32[38615] + 2 >> 1] == 154)) {
    break label$2;
   }
   if (HEAP16[HEAP32[38615] + 2 >> 1] == 155 | HEAP16[HEAP32[38615] + 2 >> 1] == 156 | (HEAP16[HEAP32[38615] + 2 >> 1] == 157 | HEAP16[HEAP32[38615] + 2 >> 1] == 159)) {
    break label$2;
   }
   if (HEAP16[HEAP32[38615] + 2 >> 1] == 161 | HEAP16[HEAP32[38615] + 2 >> 1] == 148 | HEAP16[HEAP32[38615] + 2 >> 1] == 144) {
    break label$2;
   }
   if (HEAP16[HEAP32[38615] + 2 >> 1] != 149) {
    break label$1;
   }
  }
  HEAP32[$1 + 20 >> 2] = HEAP16[HEAP32[38615] + 2 >> 1];
  jslGetNextToken();
  HEAP32[$1 + 24 >> 2] = jspeAssignmentExpression();
  HEAP32[$1 + 24 >> 2] = jsvSkipNameAndUnLock(HEAP32[$1 + 24 >> 2]);
  if (!(!HEAP32[$1 + 28 >> 2] | (HEAP32[46755] & 63) != 1)) {
   label$4: {
    if (HEAP32[$1 + 20 >> 2] == 61) {
     jsvReplaceWithOrAddToRoot(HEAP32[$1 + 28 >> 2], HEAP32[$1 + 24 >> 2]);
     break label$4;
    }
    label$6: {
     if (HEAP32[$1 + 20 >> 2] == 150) {
      HEAP32[$1 + 20 >> 2] = 43;
      break label$6;
     }
     label$8: {
      if (HEAP32[$1 + 20 >> 2] == 151) {
       HEAP32[$1 + 20 >> 2] = 45;
       break label$8;
      }
      label$10: {
       if (HEAP32[$1 + 20 >> 2] == 154) {
        HEAP32[$1 + 20 >> 2] = 42;
        break label$10;
       }
       label$12: {
        if (HEAP32[$1 + 20 >> 2] == 155) {
         HEAP32[$1 + 20 >> 2] = 47;
         break label$12;
        }
        label$14: {
         if (HEAP32[$1 + 20 >> 2] == 156) {
          HEAP32[$1 + 20 >> 2] = 37;
          break label$14;
         }
         label$16: {
          if (HEAP32[$1 + 20 >> 2] == 157) {
           HEAP32[$1 + 20 >> 2] = 38;
           break label$16;
          }
          label$18: {
           if (HEAP32[$1 + 20 >> 2] == 159) {
            HEAP32[$1 + 20 >> 2] = 124;
            break label$18;
           }
           label$20: {
            if (HEAP32[$1 + 20 >> 2] == 161) {
             HEAP32[$1 + 20 >> 2] = 94;
             break label$20;
            }
            label$22: {
             if (HEAP32[$1 + 20 >> 2] == 148) {
              HEAP32[$1 + 20 >> 2] = 146;
              break label$22;
             }
             label$24: {
              if (HEAP32[$1 + 20 >> 2] == 144) {
               HEAP32[$1 + 20 >> 2] = 143;
               break label$24;
              }
              if (HEAP32[$1 + 20 >> 2] == 149) {
               HEAP32[$1 + 20 >> 2] = 147;
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
    label$27: {
     if (HEAP32[$1 + 20 >> 2] != 43) {
      break label$27;
     }
     if (!(jsvIsName(HEAP32[$1 + 28 >> 2]) & 1)) {
      break label$27;
     }
     HEAP32[$1 + 16 >> 2] = jsvSkipName(HEAP32[$1 + 28 >> 2]);
     label$28: {
      if (!(jsvIsBasicString(HEAP32[$1 + 16 >> 2]) & 1)) {
       break label$28;
      }
      if ((jsvGetRefs(HEAP32[$1 + 16 >> 2]) & 65535) != 1 | HEAP32[$1 + 24 >> 2] == HEAP32[$1 + 16 >> 2]) {
       break label$28;
      }
      HEAP32[$1 + 12 >> 2] = jsvAsString(HEAP32[$1 + 24 >> 2]);
      jsvAppendStringVarComplete(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 12 >> 2]);
      jsvUnLock(HEAP32[$1 + 12 >> 2]);
      HEAP32[$1 + 20 >> 2] = 0;
     }
     jsvUnLock(HEAP32[$1 + 16 >> 2]);
    }
    if (HEAP32[$1 + 20 >> 2]) {
     HEAP32[$1 + 8 >> 2] = jsvMathsOpSkipNames(HEAP32[$1 + 28 >> 2], HEAP32[$1 + 24 >> 2], HEAP32[$1 + 20 >> 2]);
     jsvReplaceWith(HEAP32[$1 + 28 >> 2], HEAP32[$1 + 8 >> 2]);
     jsvUnLock(HEAP32[$1 + 8 >> 2]);
    }
   }
  }
  jsvUnLock(HEAP32[$1 + 24 >> 2]);
  HEAP32[$1 + 28 >> 2] = jsvSkipNameAndUnLock(HEAP32[$1 + 28 >> 2]);
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function tflite__reference_integer_ops__FullyConnected_28tflite__FullyConnectedParams_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0;
 $9 = __stack_pointer - 112 | 0;
 __stack_pointer = $9;
 HEAP32[$9 + 108 >> 2] = $0;
 HEAP32[$9 + 104 >> 2] = $1;
 HEAP32[$9 + 100 >> 2] = $2;
 HEAP32[$9 + 96 >> 2] = $3;
 HEAP32[$9 + 92 >> 2] = $4;
 HEAP32[$9 + 88 >> 2] = $5;
 HEAP32[$9 + 84 >> 2] = $6;
 HEAP32[$9 + 80 >> 2] = $7;
 HEAP32[$9 + 76 >> 2] = $8;
 HEAP32[$9 + 72 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] >> 2];
 HEAP32[$9 + 68 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 4 >> 2];
 HEAP32[$9 + 64 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 8 >> 2];
 HEAP32[$9 + 60 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 12 >> 2];
 HEAP32[$9 + 56 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 16 >> 2];
 HEAP32[$9 + 52 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 20 >> 2];
 HEAP32[$9 + 48 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 24 >> 2];
 label$1: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$9 + 96 >> 2]) | 0) < 2) {
   break label$1;
  }
 }
 label$2: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$9 + 80 >> 2]) | 0) != 2) {
   break label$2;
  }
 }
 label$3: {
  if (HEAP32[$9 + 52 >> 2] > HEAP32[$9 + 48 >> 2]) {
   break label$3;
  }
 }
 HEAP32[$9 + 44 >> 2] = tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$9 + 96 >> 2]);
 HEAP32[$9 + 40 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 80 >> 2], 0);
 HEAP32[$9 + 36 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 80 >> 2], 1);
 label$4: {
  if (HEAP32[$9 + 36 >> 2] > (tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 96 >> 2], HEAP32[$9 + 44 >> 2] - 2 | 0) | 0)) {
   break label$4;
  }
 }
 HEAP32[$9 + 32 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 96 >> 2], HEAP32[$9 + 44 >> 2] - 1 | 0);
 HEAP32[$9 + 28 >> 2] = 0;
 while (1) {
  if (HEAP32[$9 + 28 >> 2] < HEAP32[$9 + 40 >> 2]) {
   HEAP32[$9 + 24 >> 2] = 0;
   while (1) {
    if (HEAP32[$9 + 24 >> 2] < HEAP32[$9 + 36 >> 2]) {
     HEAP32[$9 + 20 >> 2] = 0;
     HEAP32[$9 + 16 >> 2] = 0;
     while (1) {
      if (HEAP32[$9 + 16 >> 2] < HEAP32[$9 + 32 >> 2]) {
       HEAP32[$9 + 12 >> 2] = HEAP8[HEAP32[$9 + 100 >> 2] + (HEAP32[$9 + 16 >> 2] + Math_imul(HEAP32[$9 + 28 >> 2], HEAP32[$9 + 32 >> 2]) | 0) | 0];
       HEAP32[$9 + 8 >> 2] = HEAP8[HEAP32[$9 + 92 >> 2] + (HEAP32[$9 + 16 >> 2] + Math_imul(HEAP32[$9 + 24 >> 2], HEAP32[$9 + 32 >> 2]) | 0) | 0];
       HEAP32[$9 + 20 >> 2] = HEAP32[$9 + 20 >> 2] + Math_imul(HEAP32[$9 + 8 >> 2] + HEAP32[$9 + 68 >> 2] | 0, HEAP32[$9 + 12 >> 2] + HEAP32[$9 + 72 >> 2] | 0);
       HEAP32[$9 + 16 >> 2] = HEAP32[$9 + 16 >> 2] + 1;
       continue;
      }
      break;
     }
     if (HEAP32[$9 + 84 >> 2]) {
      HEAP32[$9 + 20 >> 2] = HEAP32[HEAP32[$9 + 84 >> 2] + (HEAP32[$9 + 24 >> 2] << 2) >> 2] + HEAP32[$9 + 20 >> 2];
     }
     HEAP32[$9 + 20 >> 2] = tflite__MultiplyByQuantizedMultiplier_28int_2c_20int_2c_20int_29(HEAP32[$9 + 20 >> 2], HEAP32[$9 + 60 >> 2], HEAP32[$9 + 56 >> 2]);
     HEAP32[$9 + 20 >> 2] = HEAP32[$9 + 64 >> 2] + HEAP32[$9 + 20 >> 2];
     HEAP32[$9 + 20 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($9 + 20 | 0, $9 + 52 | 0) >> 2];
     HEAP32[$9 + 20 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($9 + 20 | 0, $9 + 48 | 0) >> 2];
     HEAP8[HEAP32[$9 + 76 >> 2] + (HEAP32[$9 + 24 >> 2] + Math_imul(HEAP32[$9 + 36 >> 2], HEAP32[$9 + 28 >> 2]) | 0) | 0] = HEAP32[$9 + 20 >> 2];
     HEAP32[$9 + 24 >> 2] = HEAP32[$9 + 24 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$9 + 28 >> 2] = HEAP32[$9 + 28 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $9 + 112 | 0;
}

function _jswrap_array_iterate_with_callback($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 144 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 136 >> 2] = $0;
 HEAP32[$6 + 132 >> 2] = $1;
 HEAP32[$6 + 128 >> 2] = $2;
 HEAP32[$6 + 124 >> 2] = $3;
 HEAP8[$6 + 123 | 0] = $4;
 HEAP8[$6 + 122 | 0] = $5;
 label$1: {
  if (!(jsvIsIterable(HEAP32[$6 + 136 >> 2]) & 1)) {
   jsExceptionHere(1, 105165, 0);
   HEAP32[$6 + 140 >> 2] = 0;
   break label$1;
  }
  if (!(jsvIsFunction(HEAP32[$6 + 132 >> 2]) & 1)) {
   jsExceptionHere(1, 102289, 0);
   HEAP32[$6 + 140 >> 2] = 0;
   break label$1;
  }
  label$4: {
   if (jsvIsUndefined(HEAP32[$6 + 128 >> 2]) & 1) {
    break label$4;
   }
   if (jsvIsObject(HEAP32[$6 + 128 >> 2]) & 1) {
    break label$4;
   }
   jsExceptionHere(1, 106457, 0);
   HEAP32[$6 + 140 >> 2] = 0;
   break label$1;
  }
  HEAP32[$6 + 116 >> 2] = 0;
  if (HEAP32[$6 + 124 >> 2] == 1) {
   HEAP32[$6 + 116 >> 2] = jsvNewEmptyArray();
  }
  HEAP8[$6 + 115 | 0] = 0;
  if (!(!HEAP32[$6 + 116 >> 2] & HEAP32[$6 + 124 >> 2] == 1)) {
   jsvIteratorNew($6 + 48 | 0, HEAP32[$6 + 136 >> 2], 0);
   while (1) {
    $0 = 0;
    if (jsvIteratorHasElement($6 + 48 | 0) & 1) {
     $0 = HEAPU8[$6 + 115 | 0] ^ -1;
    }
    if ($0 & 1) {
     HEAP32[$6 + 44 >> 2] = jsvIteratorGetKey($6 + 48 | 0);
     label$11: {
      if (jsvIsInt(HEAP32[$6 + 44 >> 2]) & 1) {
       HEAP32[$6 + 40 >> 2] = jsvGetInteger(HEAP32[$6 + 44 >> 2]);
       HEAP32[$6 + 36 >> 2] = jsvIteratorGetValue($6 + 48 | 0);
       HEAP32[$6 + 24 >> 2] = HEAP32[$6 + 36 >> 2];
       HEAP32[$6 + 28 >> 2] = jsvNewFromInteger(HEAP32[$6 + 40 >> 2]);
       HEAP32[$6 + 32 >> 2] = HEAP32[$6 + 136 >> 2];
       jsvIteratorNext($6 + 48 | 0);
       HEAP32[$6 + 20 >> 2] = jspeFunctionCall(HEAP32[$6 + 132 >> 2], 0, HEAP32[$6 + 128 >> 2], 0, 3, $6 + 24 | 0);
       jsvUnLock(HEAP32[$6 + 28 >> 2]);
       if (HEAP32[$6 + 20 >> 2]) {
        if (HEAP8[$6 + 123 | 0] & 1) {
         HEAP8[$6 + 19 | 0] = (jsvGetBool(HEAP32[$6 + 20 >> 2]) & 1) == (HEAP8[$6 + 122 | 0] & 1);
        }
        label$15: {
         if (HEAP32[$6 + 124 >> 2] == 1) {
          if (HEAP8[$6 + 123 | 0] & 1) {
           if (HEAP8[$6 + 19 | 0] & 1) {
            jsvArrayPush(HEAP32[$6 + 116 >> 2], HEAP32[$6 + 36 >> 2]);
           }
           break label$15;
          }
          HEAP32[$6 + 12 >> 2] = jsvNewFromInteger(HEAP32[$6 + 40 >> 2]);
          if (HEAP32[$6 + 12 >> 2]) {
           HEAP32[$6 + 12 >> 2] = jsvMakeIntoVariableName(HEAP32[$6 + 12 >> 2], HEAP32[$6 + 20 >> 2]);
           jsvAddName(HEAP32[$6 + 116 >> 2], HEAP32[$6 + 12 >> 2]);
           jsvUnLock(HEAP32[$6 + 12 >> 2]);
          }
          break label$15;
         }
         if (HEAP8[$6 + 123 | 0] & 1) {
          label$21: {
           if (!(HEAP32[$6 + 124 >> 2] != 2 & HEAP32[$6 + 124 >> 2] != 3)) {
            if (HEAP8[$6 + 19 | 0] & 1) {
             label$25: {
              if (HEAP32[$6 + 124 >> 2] == 2) {
               $0 = jsvLockAgain(HEAP32[$6 + 36 >> 2]);
               break label$25;
              }
              $0 = jsvNewFromInteger(jsvGetInteger(HEAP32[$6 + 44 >> 2]));
             }
             HEAP32[$6 + 116 >> 2] = $0;
             HEAP8[$6 + 115 | 0] = 1;
            }
            break label$21;
           }
           if (!(HEAP8[$6 + 19 | 0] & 1)) {
            HEAP8[$6 + 115 | 0] = 1;
           }
          }
         }
        }
        jsvUnLock(HEAP32[$6 + 20 >> 2]);
       }
       jsvUnLock(HEAP32[$6 + 36 >> 2]);
       break label$11;
      }
      jsvIteratorNext($6 + 48 | 0);
     }
     jsvUnLock(HEAP32[$6 + 44 >> 2]);
     continue;
    }
    break;
   }
   jsvIteratorFree($6 + 48 | 0);
  }
  if (!(HEAP32[$6 + 124 >> 2] | !(HEAP8[$6 + 123 | 0] & 1))) {
   HEAP32[$6 + 116 >> 2] = jsvNewFromBool((HEAP8[$6 + 115 | 0] & 1) != (HEAP8[$6 + 122 | 0] & 1));
  }
  HEAP32[$6 + 140 >> 2] = HEAP32[$6 + 116 >> 2];
 }
 __stack_pointer = $6 + 144 | 0;
 return HEAP32[$6 + 140 >> 2];
}

function jswrap_graphics_setFont($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 160 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 152 >> 2] = $0;
 HEAP32[$3 + 148 >> 2] = $1;
 HEAP32[$3 + 144 >> 2] = $2;
 label$1: {
  if (!(jsvIsString(HEAP32[$3 + 148 >> 2]) & 1)) {
   HEAP32[$3 + 156 >> 2] = 0;
   break label$1;
  }
  HEAP8[$3 + 143 | 0] = 0;
  HEAP32[$3 + 136 >> 2] = -1;
  if (jsvIsStringEqualOrStartsWith(HEAP32[$3 + 148 >> 2], 100994, 1) & 1) {
   if (jsvGetStringLength(HEAP32[$3 + 148 >> 2]) >>> 0 > 6) {
    HEAP32[$3 + 136 >> 2] = 6;
   }
   HEAP8[$3 + 143 | 0] = 1;
  }
  HEAP32[$3 + 132 >> 2] = jsvGetStringIndexOf(HEAP32[$3 + 148 >> 2], 58);
  if (HEAP32[$3 + 132 >> 2] >= 0) {
   HEAP32[$3 + 136 >> 2] = HEAP32[$3 + 132 >> 2] + 1;
  }
  label$6: {
   if (HEAP32[$3 + 136 >> 2] >= 0) {
    HEAP32[$3 + 124 >> 2] = jsvNewFromStringVar(HEAP32[$3 + 148 >> 2], HEAP32[$3 + 136 >> 2], 2147483647);
    HEAP32[$3 + 120 >> 2] = jsvGetStringIndexOf(HEAP32[$3 + 124 >> 2], 120);
    label$8: {
     if (HEAP32[$3 + 120 >> 2] >= 0) {
      HEAP32[$3 + 116 >> 2] = jsvGetIntegerAndUnLock(jsvNewFromStringVar(HEAP32[$3 + 124 >> 2], 0, HEAP32[$3 + 120 >> 2]));
      HEAP32[$3 + 112 >> 2] = jsvGetIntegerAndUnLock(jsvNewFromStringVar(HEAP32[$3 + 124 >> 2], HEAP32[$3 + 120 >> 2] + 1 | 0, 2147483647));
      if (HEAP32[$3 + 116 >> 2] < 0) {
       HEAP32[$3 + 116 >> 2] = 0;
      }
      if (HEAP32[$3 + 112 >> 2] < 0) {
       HEAP32[$3 + 112 >> 2] = 0;
      }
      if (HEAP32[$3 + 116 >> 2] > 63) {
       HEAP32[$3 + 116 >> 2] = 63;
      }
      if (HEAP32[$3 + 112 >> 2] > 63) {
       HEAP32[$3 + 112 >> 2] = 63;
      }
      HEAP32[$3 + 144 >> 2] = HEAP32[$3 + 116 >> 2] | HEAP32[$3 + 112 >> 2] << 6 | 4096;
      break label$8;
     }
     HEAP32[$3 + 144 >> 2] = jsvGetInteger(HEAP32[$3 + 124 >> 2]);
    }
    jsvUnLock(HEAP32[$3 + 124 >> 2]);
    $1 = HEAP32[$3 + 148 >> 2];
    if (HEAP32[$3 + 136 >> 2] > 0) {
     $0 = HEAP32[$3 + 136 >> 2] - 1 | 0;
    } else {
     $0 = 0;
    }
    HEAP32[$3 + 128 >> 2] = jsvNewFromStringVar($1, 0, $0);
    break label$6;
   }
   HEAP32[$3 + 128 >> 2] = jsvLockAgain(HEAP32[$3 + 148 >> 2]);
  }
  if (HEAP32[$3 + 144 >> 2] <= 0) {
   HEAP32[$3 + 144 >> 2] = 1;
  }
  if (HEAP32[$3 + 144 >> 2] > 8191) {
   HEAP32[$3 + 144 >> 2] = 8191;
  }
  HEAP16[$3 + 110 >> 1] = 65535;
  label$18: {
   if (HEAP8[$3 + 143 | 0] & 1) {
    HEAP16[$3 + 110 >> 1] = HEAP32[$3 + 144 >> 2];
    break label$18;
   }
   label$20: {
    label$21: {
     if (jsvIsUndefined(HEAP32[$3 + 128 >> 2]) & 1) {
      break label$21;
     }
     if (!jsvGetStringLength(HEAP32[$3 + 128 >> 2])) {
      break label$21;
     }
     if (!(jsvIsStringEqual(HEAP32[$3 + 128 >> 2], 110503) & 1)) {
      break label$20;
     }
    }
    HEAP16[$3 + 110 >> 1] = HEAP32[$3 + 144 >> 2] - -8192;
   }
  }
  if (jsvIsStringEqual(HEAP32[$3 + 128 >> 2], 110366) & 1) {
   HEAP16[$3 + 110 >> 1] = HEAP32[$3 + 144 >> 2] + 16384;
  }
  if (HEAPU16[$3 + 110 >> 1] == 65535) {
   HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 128 >> 2];
   HEAP32[$3 + 104 >> 2] = jsvVarPrintf(97032, $3 + 16 | 0);
   HEAP32[$3 + 100 >> 2] = jspGetVarNamedField(HEAP32[$3 + 152 >> 2], HEAP32[$3 + 104 >> 2], 0);
   if (HEAP32[$3 + 100 >> 2]) {
    jsvUnLock(jspExecuteFunction(HEAP32[$3 + 100 >> 2], HEAP32[$3 + 152 >> 2], 0, 0));
    graphicsGetFromVar($3 + 24 | 0, HEAP32[$3 + 152 >> 2]);
    HEAP16[$3 + 110 >> 1] = HEAP32[$3 + 144 >> 2] | (HEAPU8[$3 + 49 | 0] | HEAPU8[$3 + 50 | 0] << 8) & 57344;
   }
   jsvUnLock2(HEAP32[$3 + 100 >> 2], HEAP32[$3 + 104 >> 2]);
  }
  if (HEAPU16[$3 + 110 >> 1] == 65535) {
   HEAP32[$3 >> 2] = HEAP32[$3 + 128 >> 2];
   jsExceptionHere(1, 103242, $3);
  }
  jsvUnLock(HEAP32[$3 + 128 >> 2]);
  HEAP32[$3 + 156 >> 2] = jswrap_graphics_setFontSizeX(HEAP32[$3 + 152 >> 2], HEAPU16[$3 + 110 >> 1], HEAP8[$3 + 143 | 0] & 1);
 }
 __stack_pointer = $3 + 160 | 0;
 return HEAP32[$3 + 156 >> 2];
}

function jsvIsBasicVarEqual($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 96 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 88 >> 2] = $0;
 HEAP32[$2 + 84 >> 2] = $1;
 label$1: {
  if (HEAP32[$2 + 88 >> 2] == HEAP32[$2 + 84 >> 2]) {
   HEAP8[$2 + 95 | 0] = 1;
   break label$1;
  }
  if (!(HEAP32[$2 + 84 >> 2] ? HEAP32[$2 + 88 >> 2] : 0)) {
   HEAP8[$2 + 95 | 0] = 0;
   break label$1;
  }
  label$5: {
   if (!(jsvIsNumeric(HEAP32[$2 + 88 >> 2]) & 1)) {
    break label$5;
   }
   if (!(jsvIsNumeric(HEAP32[$2 + 84 >> 2]) & 1)) {
    break label$5;
   }
   if (jsvIsIntegerish(HEAP32[$2 + 88 >> 2]) & 1) {
    if (jsvIsIntegerish(HEAP32[$2 + 84 >> 2]) & 1) {
     $0 = HEAP32[$2 + 88 >> 2];
     $1 = HEAP32[$2 + 84 >> 2];
     HEAP8[$2 + 95 | 0] = (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == (HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24));
     break label$1;
    }
    $0 = HEAP32[$2 + 84 >> 2];
    $1 = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
    $3 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
    wasm2js_scratch_store_i32(0, $1 | 0);
    wasm2js_scratch_store_i32(1, $3 | 0);
    $4 = +wasm2js_scratch_load_f64();
    $0 = HEAP32[$2 + 88 >> 2];
    HEAP8[$2 + 95 | 0] = $4 == +(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24));
    break label$1;
   }
   if (jsvIsIntegerish(HEAP32[$2 + 84 >> 2]) & 1) {
    $0 = HEAP32[$2 + 88 >> 2];
    $3 = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
    $1 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
    wasm2js_scratch_store_i32(0, $3 | 0);
    wasm2js_scratch_store_i32(1, $1 | 0);
    $4 = +wasm2js_scratch_load_f64();
    $0 = HEAP32[$2 + 84 >> 2];
    HEAP8[$2 + 95 | 0] = $4 == +(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24));
    break label$1;
   }
   $0 = HEAP32[$2 + 88 >> 2];
   $1 = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
   $3 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
   wasm2js_scratch_store_i32(0, $1 | 0);
   wasm2js_scratch_store_i32(1, $3 | 0);
   $4 = +wasm2js_scratch_load_f64();
   $0 = HEAP32[$2 + 84 >> 2];
   $3 = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
   $1 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
   wasm2js_scratch_store_i32(0, $3 | 0);
   wasm2js_scratch_store_i32(1, $1 | 0);
   HEAP8[$2 + 95 | 0] = $4 == +wasm2js_scratch_load_f64();
   break label$1;
  }
  label$9: {
   if (!(jsvIsString(HEAP32[$2 + 88 >> 2]) & 1)) {
    break label$9;
   }
   if (!(jsvIsString(HEAP32[$2 + 84 >> 2]) & 1)) {
    break label$9;
   }
   jsvStringIteratorNew($2 + 48 | 0, HEAP32[$2 + 88 >> 2], 0);
   jsvStringIteratorNew($2 + 8 | 0, HEAP32[$2 + 84 >> 2], 0);
   while (1) {
    HEAP32[$2 + 4 >> 2] = jsvStringIteratorGetCharOrMinusOne($2 + 48 | 0);
    jsvStringIteratorNext($2 + 48 | 0);
    HEAP32[$2 >> 2] = jsvStringIteratorGetCharOrMinusOne($2 + 8 | 0);
    jsvStringIteratorNext($2 + 8 | 0);
    if (HEAP32[$2 + 4 >> 2] != HEAP32[$2 >> 2]) {
     jsvStringIteratorFree_1($2 + 48 | 0);
     jsvStringIteratorFree_1($2 + 8 | 0);
     HEAP8[$2 + 95 | 0] = 0;
     break label$1;
    }
    if (HEAP32[$2 + 4 >> 2] >= 0) {
     continue;
    }
    break;
   }
   jsvStringIteratorFree_1($2 + 48 | 0);
   jsvStringIteratorFree_1($2 + 8 | 0);
   HEAP8[$2 + 95 | 0] = 1;
   break label$1;
  }
  HEAP8[$2 + 95 | 0] = 0;
 }
 __stack_pointer = $2 + 96 | 0;
 return HEAP8[$2 + 95 | 0] & 1;
}

function jswrap_io_digitalPulse($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0;
 $3 = __stack_pointer - 176 | 0;
 __stack_pointer = $3;
 HEAP8[$3 + 175 | 0] = $0;
 HEAP8[$3 + 174 | 0] = $1;
 HEAP32[$3 + 168 >> 2] = $2;
 label$1: {
  if (!(jshIsPinValid(HEAPU8[$3 + 175 | 0]) & 1)) {
   jsExceptionHere(1, 102474, 0);
   break label$1;
  }
  HEAP32[$3 + 132 >> 2] = jstGetUtilTimerOffset();
  HEAP8[$3 + 131 | 0] = jstGetLastPinTimerTask(HEAPU8[$3 + 175 | 0], $3 + 136 | 0) & 1;
  if (!(HEAP8[$3 + 131 | 0] & 1)) {
   HEAP8[$3 + 136 | 0] = 0;
   HEAP8[$3 + 137 | 0] = 0;
   HEAP8[$3 + 138 | 0] = 0;
   HEAP8[$3 + 139 | 0] = 0;
  }
  if (jsvIsNumeric(HEAP32[$3 + 168 >> 2]) & 1) {
   HEAPF64[$3 + 120 >> 3] = jsvGetFloat(HEAP32[$3 + 168 >> 2]);
   label$5: {
    label$6: {
     label$7: {
      if (HEAPF64[$3 + 120 >> 3] < 0) {
       break label$7;
      }
      $4 = __DOUBLE_BITS_9(HEAPF64[$3 + 120 >> 3]);
      $1 = $4;
      $0 = i64toi32_i32$HIGH_BITS;
      $4 = $0 & 2147483647;
      $0 = $1;
      if (($4 | 0) == 2146435072 & ($0 | 0) != 0 | $4 >>> 0 > 2146435072) {
       break label$7;
      }
      break label$6;
     }
     jsExceptionHere(1, 101533, 0);
     break label$5;
    }
    label$8: {
     if (HEAPF64[$3 + 120 >> 3] > 0) {
      if (!(HEAP8[$3 + 131 | 0] & 1)) {
       jshPinOutput(HEAPU8[$3 + 175 | 0], HEAP8[$3 + 174 | 0] & 1);
      }
      $0 = jshGetTimeFromMilliseconds(HEAPF64[$3 + 120 >> 3]);
      $2 = $0;
      $4 = i64toi32_i32$HIGH_BITS;
      $1 = $4;
      $4 = HEAPU8[$3 + 136 | 0] | HEAPU8[$3 + 137 | 0] << 8 | (HEAPU8[$3 + 138 | 0] << 16 | HEAPU8[$3 + 139 | 0] << 24);
      $0 = $4 >> 31;
      $2 = $4 + $2 | 0;
      $4 = $0;
      $0 = $1;
      HEAP8[$3 + 136 | 0] = $2;
      HEAP8[$3 + 137 | 0] = $2 >>> 8;
      HEAP8[$3 + 138 | 0] = $2 >>> 16;
      HEAP8[$3 + 139 | 0] = $2 >>> 24;
      $1 = HEAPU8[$3 + 136 | 0] | HEAPU8[$3 + 137 | 0] << 8 | (HEAPU8[$3 + 138 | 0] << 16 | HEAPU8[$3 + 139 | 0] << 24);
      $2 = $1 >> 31;
      jstPinOutputAtTime($1, $2, $3 + 132 | 0, $3 + 175 | 0, 1, (HEAPU8[$3 + 174 | 0] ^ -1) & 1);
      break label$8;
     }
     jstUtilTimerWaitEmpty();
    }
   }
   break label$1;
  }
  label$11: {
   if (jsvIsIterable(HEAP32[$3 + 168 >> 2]) & 1) {
    if (!(HEAP8[$3 + 131 | 0] & 1)) {
     jshPinOutput(HEAPU8[$3 + 175 | 0], HEAP8[$3 + 174 | 0] & 1);
    }
    jsvIteratorNew($3 + 56 | 0, HEAP32[$3 + 168 >> 2], 1);
    while (1) {
     if (jsvIteratorHasElement($3 + 56 | 0) & 1) {
      HEAPF64[$3 + 48 >> 3] = jsvIteratorGetFloatValue($3 + 56 | 0);
      $2 = __DOUBLE_BITS_9(HEAPF64[$3 + 48 >> 3]);
      $0 = $2;
      $1 = i64toi32_i32$HIGH_BITS;
      $2 = $1 & 2147483647;
      $1 = $0;
      if ((!$1 & ($2 | 0) == 2146435072 | $2 >>> 0 < 2146435072) & HEAPF64[$3 + 48 >> 3] > 0) {
       $1 = jshGetTimeFromMilliseconds(HEAPF64[$3 + 48 >> 3]);
       $5 = $1;
       $2 = i64toi32_i32$HIGH_BITS;
       $4 = $2;
       $2 = HEAPU8[$3 + 136 | 0] | HEAPU8[$3 + 137 | 0] << 8 | (HEAPU8[$3 + 138 | 0] << 16 | HEAPU8[$3 + 139 | 0] << 24);
       $1 = $2 >> 31;
       $0 = $2;
       $2 = $1;
       $1 = $4;
       $2 = $2 + $1 | 0;
       $1 = $5;
       $4 = $0 + $1 | 0;
       HEAP8[$3 + 136 | 0] = $4;
       HEAP8[$3 + 137 | 0] = $4 >>> 8;
       HEAP8[$3 + 138 | 0] = $4 >>> 16;
       HEAP8[$3 + 139 | 0] = $4 >>> 24;
       $2 = HEAPU8[$3 + 136 | 0] | HEAPU8[$3 + 137 | 0] << 8 | (HEAPU8[$3 + 138 | 0] << 16 | HEAPU8[$3 + 139 | 0] << 24);
       $1 = $2 >> 31;
       jstPinOutputAtTime($2, $1, $3 + 132 | 0, $3 + 175 | 0, 1, (HEAPU8[$3 + 174 | 0] ^ -1) & 1);
      }
      HEAP8[$3 + 174 | 0] = (HEAPU8[$3 + 174 | 0] ^ -1) & 1;
      jsvIteratorNext($3 + 56 | 0);
      continue;
     }
     break;
    }
    jsvIteratorFree($3 + 56 | 0);
    break label$11;
   }
   HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 168 >> 2];
   jsExceptionHere(1, 98419, $3 + 32 | 0);
  }
 }
 __stack_pointer = $3 + 176 | 0;
}

function jswrap_string_split($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer + -64 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 56 >> 2] = $0;
 HEAP32[$2 + 52 >> 2] = $1;
 label$1: {
  if (!(jsvIsString(HEAP32[$2 + 56 >> 2]) & 1)) {
   HEAP32[$2 + 60 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 48 >> 2] = jsvNewEmptyArray();
  if (!HEAP32[$2 + 48 >> 2]) {
   HEAP32[$2 + 60 >> 2] = 0;
   break label$1;
  }
  if (jsvIsUndefined(HEAP32[$2 + 52 >> 2]) & 1) {
   jsvArrayPush(HEAP32[$2 + 48 >> 2], HEAP32[$2 + 56 >> 2]);
   HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 48 >> 2];
   break label$1;
  }
  if (jsvIsInstanceOf(HEAP32[$2 + 52 >> 2], 101806) & 1) {
   HEAP32[$2 + 44 >> 2] = 0;
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 52 >> 2], 96707, jsvNewFromInteger(0));
   HEAP32[$2 + 40 >> 2] = jswrap_regexp_exec(HEAP32[$2 + 52 >> 2], HEAP32[$2 + 56 >> 2]);
   while (1) {
    $0 = 0;
    if (HEAP32[$2 + 40 >> 2]) {
     $0 = jsvIsNull(HEAP32[$2 + 40 >> 2]) ^ -1;
    }
    if ($0 & 1) {
     HEAP32[$2 + 36 >> 2] = jsvGetArrayItem(HEAP32[$2 + 40 >> 2], 0);
     HEAP32[$2 + 32 >> 2] = jsvObjectGetIntegerChild(HEAP32[$2 + 40 >> 2], 96701);
     HEAP32[$2 + 28 >> 2] = jsvGetStringLength(HEAP32[$2 + 36 >> 2]);
     jsvUnLock(HEAP32[$2 + 36 >> 2]);
     jsvArrayPushAndUnLock(HEAP32[$2 + 48 >> 2], jsvNewFromStringVar(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 44 >> 2], HEAP32[$2 + 32 >> 2] - HEAP32[$2 + 44 >> 2] | 0));
     HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2] + HEAP32[$2 + 28 >> 2];
     jsvUnLock(HEAP32[$2 + 40 >> 2]);
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 52 >> 2], 96707, jsvNewFromInteger(HEAP32[$2 + 44 >> 2]));
     HEAP32[$2 + 40 >> 2] = jswrap_regexp_exec(HEAP32[$2 + 52 >> 2], HEAP32[$2 + 56 >> 2]);
     continue;
    }
    break;
   }
   jsvUnLock(HEAP32[$2 + 40 >> 2]);
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 52 >> 2], 96707, jsvNewFromInteger(0));
   if (HEAP32[$2 + 44 >> 2] <= (jsvGetStringLength(HEAP32[$2 + 56 >> 2]) | 0)) {
    jsvArrayPushAndUnLock(HEAP32[$2 + 48 >> 2], jsvNewFromStringVar(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 44 >> 2], 2147483647));
   }
   HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 48 >> 2];
   break label$1;
  }
  HEAP32[$2 + 52 >> 2] = jsvAsString(HEAP32[$2 + 52 >> 2]);
  HEAP32[$2 + 20 >> 2] = 0;
  if (jsvIsUndefined(HEAP32[$2 + 52 >> 2]) & 1) {
   $0 = 0;
  } else {
   $0 = jsvGetStringLength(HEAP32[$2 + 52 >> 2]);
  }
  HEAP32[$2 + 16 >> 2] = $0;
  HEAP32[$2 + 12 >> 2] = (jsvGetStringLength(HEAP32[$2 + 56 >> 2]) + 1 | 0) - HEAP32[$2 + 16 >> 2];
  HEAP32[$2 + 24 >> 2] = 0;
  while (1) {
   label$13: {
    if (HEAP32[$2 + 24 >> 2] > HEAP32[$2 + 12 >> 2]) {
     break label$13;
    }
    if (HEAP32[$2 + 16 >> 2] | HEAP32[$2 + 24 >> 2]) {
     label$16: {
      if (!(!HEAP32[$2 + 16 >> 2] | HEAP32[$2 + 24 >> 2] == HEAP32[$2 + 12 >> 2])) {
       if (jsvCompareString(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2], HEAP32[$2 + 24 >> 2], 0, 1)) {
        break label$16;
       }
      }
      if (HEAP32[$2 + 24 >> 2] == HEAP32[$2 + 12 >> 2]) {
       HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 12 >> 2] + HEAP32[$2 + 16 >> 2];
       if (!HEAP32[$2 + 16 >> 2]) {
        break label$13;
       }
      }
      HEAP32[$2 + 8 >> 2] = jsvNewFromStringVar(HEAP32[$2 + 56 >> 2], jsvConvertFromUTF8Index(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 20 >> 2]), jsvConvertFromUTF8Index(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 24 >> 2]) - jsvConvertFromUTF8Index(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 20 >> 2]) | 0);
      if (!HEAP32[$2 + 8 >> 2]) {
       break label$13;
      }
      jsvArrayPush(HEAP32[$2 + 48 >> 2], HEAP32[$2 + 8 >> 2]);
      jsvUnLock(HEAP32[$2 + 8 >> 2]);
      HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 24 >> 2] + HEAP32[$2 + 16 >> 2];
     }
    }
    HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 24 >> 2] + 1;
    continue;
   }
   break;
  }
  jsvUnLock(HEAP32[$2 + 52 >> 2]);
  HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 48 >> 2];
 }
 __stack_pointer = $2 - -64 | 0;
 return HEAP32[$2 + 60 >> 2];
}

function jswrap_array_splice($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 96 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 88 >> 2] = $0;
 HEAP32[$4 + 84 >> 2] = $1;
 HEAP32[$4 + 80 >> 2] = $2;
 HEAP32[$4 + 76 >> 2] = $3;
 label$1: {
  if (!(jsvIsArray(HEAP32[$4 + 88 >> 2]) & 1)) {
   HEAP32[$4 + 92 >> 2] = 0;
   break label$1;
  }
  HEAP32[$4 + 72 >> 2] = jsvGetArrayLength(HEAP32[$4 + 88 >> 2]);
  if (HEAP32[$4 + 84 >> 2] < 0) {
   HEAP32[$4 + 84 >> 2] = HEAP32[$4 + 72 >> 2] + HEAP32[$4 + 84 >> 2];
  }
  if (HEAP32[$4 + 84 >> 2] < 0) {
   HEAP32[$4 + 84 >> 2] = 0;
  }
  if (HEAP32[$4 + 84 >> 2] > HEAP32[$4 + 72 >> 2]) {
   HEAP32[$4 + 84 >> 2] = HEAP32[$4 + 72 >> 2];
  }
  HEAP32[$4 + 68 >> 2] = HEAP32[$4 + 72 >> 2];
  if (jsvIsNumeric(HEAP32[$4 + 80 >> 2]) & 1) {
   HEAP32[$4 + 68 >> 2] = jsvGetInteger(HEAP32[$4 + 80 >> 2]);
  }
  if (HEAP32[$4 + 68 >> 2] > (HEAP32[$4 + 72 >> 2] - HEAP32[$4 + 84 >> 2] | 0)) {
   HEAP32[$4 + 68 >> 2] = HEAP32[$4 + 72 >> 2] - HEAP32[$4 + 84 >> 2];
  }
  HEAP32[$4 + 64 >> 2] = jsvGetArrayLength(HEAP32[$4 + 76 >> 2]);
  HEAP32[$4 + 60 >> 2] = HEAP32[$4 + 64 >> 2] - HEAP32[$4 + 68 >> 2];
  HEAP8[$4 + 59 | 0] = 0;
  HEAP32[$4 + 52 >> 2] = jsvNewEmptyArray();
  jsvObjectIteratorNew($4 + 48 | 0, HEAP32[$4 + 88 >> 2]);
  while (1) {
   $0 = 0;
   if (jsvObjectIteratorHasValue_6($4 + 48 | 0) & 1) {
    $0 = HEAPU8[$4 + 59 | 0] ^ -1;
   }
   if ($0 & 1) {
    HEAP8[$4 + 47 | 0] = 1;
    HEAP32[$4 + 40 >> 2] = jsvObjectIteratorGetKey_4($4 + 48 | 0);
    label$11: {
     if (!HEAP32[$4 + 40 >> 2]) {
      break label$11;
     }
     if (!(jsvIsInt(HEAP32[$4 + 40 >> 2]) & 1)) {
      break label$11;
     }
     HEAP32[$4 + 36 >> 2] = jsvGetInteger(HEAP32[$4 + 40 >> 2]);
     if (HEAP32[$4 + 36 >> 2] >= HEAP32[$4 + 84 >> 2]) {
      label$13: {
       if (HEAP32[$4 + 36 >> 2] < (HEAP32[$4 + 84 >> 2] + HEAP32[$4 + 68 >> 2] | 0)) {
        if (HEAP32[$4 + 52 >> 2]) {
         HEAP32[$4 + 32 >> 2] = jsvObjectIteratorGetValue_6($4 + 48 | 0);
         jsvArrayPushAndUnLock(HEAP32[$4 + 52 >> 2], HEAP32[$4 + 32 >> 2]);
        }
        HEAP8[$4 + 47 | 0] = 0;
        HEAP32[$4 + 28 >> 2] = jsvObjectIteratorGetKey_4($4 + 48 | 0);
        jsvObjectIteratorNext($4 + 48 | 0);
        jsvRemoveChildAndUnLock(HEAP32[$4 + 88 >> 2], HEAP32[$4 + 28 >> 2]);
        break label$13;
       }
       HEAP8[$4 + 59 | 0] = 1;
       HEAP8[$4 + 47 | 0] = 0;
      }
     }
    }
    jsvUnLock(HEAP32[$4 + 40 >> 2]);
    if (HEAP8[$4 + 47 | 0] & 1) {
     jsvObjectIteratorNext($4 + 48 | 0);
    }
    continue;
   }
   break;
  }
  HEAP32[$4 + 24 >> 2] = jsvObjectIteratorGetKey_4($4 + 48 | 0);
  jsvObjectIteratorNew($4 + 16 | 0, HEAP32[$4 + 76 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_6($4 + 16 | 0) & 1) {
    HEAP32[$4 + 12 >> 2] = jsvObjectIteratorGetValue_6($4 + 16 | 0);
    jsvArrayInsertBefore(HEAP32[$4 + 88 >> 2], HEAP32[$4 + 24 >> 2], HEAP32[$4 + 12 >> 2]);
    jsvUnLock(HEAP32[$4 + 12 >> 2]);
    jsvObjectIteratorNext($4 + 16 | 0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree_6($4 + 16 | 0);
  jsvUnLock(HEAP32[$4 + 24 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_6($4 + 48 | 0) & 1) {
    HEAP32[$4 + 8 >> 2] = jsvObjectIteratorGetKey_4($4 + 48 | 0);
    label$21: {
     if (!HEAP32[$4 + 8 >> 2]) {
      break label$21;
     }
     if (!(jsvIsInt(HEAP32[$4 + 8 >> 2]) & 1)) {
      break label$21;
     }
     jsvSetInteger(HEAP32[$4 + 8 >> 2], jsvGetInteger(HEAP32[$4 + 8 >> 2]) + HEAP32[$4 + 60 >> 2] | 0);
    }
    jsvUnLock(HEAP32[$4 + 8 >> 2]);
    jsvObjectIteratorNext($4 + 48 | 0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree_6($4 + 48 | 0);
  jsvSetArrayLength(HEAP32[$4 + 88 >> 2], HEAP32[$4 + 72 >> 2] + HEAP32[$4 + 60 >> 2] | 0, 0);
  HEAP32[$4 + 92 >> 2] = HEAP32[$4 + 52 >> 2];
 }
 __stack_pointer = $4 + 96 | 0;
 return HEAP32[$4 + 92 >> 2];
}

function jsiDumpHardwareInitialisation($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 96 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 92 >> 2] = $0;
 HEAP32[$3 + 88 >> 2] = $1;
 HEAP8[$3 + 87 | 0] = $2;
 if (HEAP16[93524] & 1) {
  FUNCTION_TABLE[HEAP32[$3 + 92 >> 2]](110337, HEAP32[$3 + 88 >> 2]);
 }
 if (HEAPU8[153825] != 255) {
  $0 = HEAP32[$3 + 92 >> 2];
  $1 = HEAP32[$3 + 88 >> 2];
  HEAP32[$3 + 64 >> 2] = HEAPU8[153825];
  cbprintf($0, $1, 128691, $3 - -64 | 0);
 }
 if (HEAPU8[153826] != 255) {
  $0 = HEAP32[$3 + 92 >> 2];
  $1 = HEAP32[$3 + 88 >> 2];
  HEAP32[$3 + 48 >> 2] = HEAPU8[153826];
  cbprintf($0, $1, 128714, $3 + 48 | 0);
 }
 if (!(!(HEAP8[$3 + 87 | 0] & 1) | !HEAPU8[154464])) {
  HEAP32[$3 + 80 >> 2] = jsfGetFlags();
  $0 = HEAP32[$3 + 92 >> 2];
  $1 = HEAP32[$3 + 88 >> 2];
  HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 80 >> 2];
  cbprintf($0, $1, 128738, $3 + 32 | 0);
  jsvUnLock(HEAP32[$3 + 80 >> 2]);
 }
 jsiDumpSerialInitialisation(HEAP32[$3 + 92 >> 2], HEAP32[$3 + 88 >> 2], 110149, HEAP8[$3 + 87 | 0] & 1);
 HEAP32[$3 + 76 >> 2] = 0;
 while (1) {
  if (HEAP32[$3 + 76 >> 2] <= 0) {
   jsiDumpSerialInitialisation(HEAP32[$3 + 92 >> 2], HEAP32[$3 + 88 >> 2], jshGetDeviceString(HEAP32[$3 + 76 >> 2] + 22 & 255), HEAP8[$3 + 87 | 0] & 1);
   HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$3 + 76 >> 2] = 0;
 while (1) {
  if (HEAP32[$3 + 76 >> 2] <= 0) {
   jsiDumpDeviceInitialisation(HEAP32[$3 + 92 >> 2], HEAP32[$3 + 88 >> 2], jshGetDeviceString(HEAP32[$3 + 76 >> 2] + 25 & 255));
   HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$3 + 76 >> 2] = 0;
 while (1) {
  if (HEAP32[$3 + 76 >> 2] <= 0) {
   jsiDumpDeviceInitialisation(HEAP32[$3 + 92 >> 2], HEAP32[$3 + 88 >> 2], jshGetDeviceString(HEAP32[$3 + 76 >> 2] + 26 & 255));
   HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP8[$3 + 75 | 0] = 0;
 while (1) {
  $0 = 0;
  if (jshIsPinValid(HEAPU8[$3 + 75 | 0]) & 1) {
   $0 = HEAPU8[$3 + 75 | 0] < 32;
  }
  if ($0) {
   label$14: {
    if (HEAPU8[$3 + 75 | 0] == 12 | HEAPU8[$3 + 75 | 0] == 30 | HEAPU8[$3 + 75 | 0] == 13) {
     break label$14;
    }
    HEAP8[$3 + 74 | 0] = jshPinGetState(HEAPU8[$3 + 75 | 0]);
    HEAP8[$3 + 73 | 0] = HEAPU8[$3 + 74 | 0] & 15;
    label$16: {
     label$17: {
      if (HEAPU8[$3 + 73 | 0] != 1) {
       break label$17;
      }
      if (jshGetPinStateIsManual(HEAPU8[$3 + 75 | 0]) & 1) {
       break label$17;
      }
      HEAP8[$3 + 72 | 0] = (HEAPU8[$3 + 74 | 0] & 16) != 0;
      label$18: {
       if (HEAP8[$3 + 72 | 0] & 1) {
        break label$18;
       }
      }
      $0 = HEAP32[$3 + 92 >> 2];
      $1 = HEAP32[$3 + 88 >> 2];
      $2 = HEAPU8[$3 + 75 | 0];
      HEAP32[$3 + 20 >> 2] = HEAP8[$3 + 72 | 0] & 1;
      HEAP32[$3 + 16 >> 2] = $2;
      cbprintf($0, $1, 128755, $3 + 16 | 0);
      break label$16;
     }
     if (!(HEAPU8[$3 + 75 | 0] != 24 | HEAPU8[$3 + 73 | 0] != 6) | !(HEAPU8[$3 + 75 | 0] != 22 | HEAPU8[$3 + 73 | 0] != 6)) {
      break label$14;
     }
     if (!(HEAPU8[$3 + 75 | 0] != 23 | HEAPU8[$3 + 73 | 0] != 6) | !(HEAPU8[$3 + 75 | 0] != 11 | HEAPU8[$3 + 73 | 0] != 6)) {
      break label$14;
     }
     if (!(jshIsPinStateDefault(HEAPU8[$3 + 75 | 0], HEAPU8[$3 + 73 | 0]) & 1)) {
      HEAP32[$3 + 68 >> 2] = jswrap_io_getPinMode(HEAPU8[$3 + 75 | 0]);
      if (HEAP32[$3 + 68 >> 2]) {
       $0 = HEAP32[$3 + 92 >> 2];
       $1 = HEAP32[$3 + 88 >> 2];
       $2 = HEAPU8[$3 + 75 | 0];
       $4 = HEAP32[$3 + 68 >> 2];
       HEAP32[$3 + 8 >> 2] = jshGetPinStateIsManual(HEAPU8[$3 + 75 | 0]) & 1 ? 129588 : 104394;
       HEAP32[$3 + 4 >> 2] = $4;
       HEAP32[$3 >> 2] = $2;
       cbprintf($0, $1, 128671, $3);
      }
      jsvUnLock(HEAP32[$3 + 68 >> 2]);
     }
    }
   }
   HEAP8[$3 + 75 | 0] = HEAPU8[$3 + 75 | 0] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $3 + 96 | 0;
}

function tflite__reference_ops__FullyConnected_28tflite__FullyConnectedParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20short__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0;
 $9 = __stack_pointer - 112 | 0;
 __stack_pointer = $9;
 HEAP32[$9 + 108 >> 2] = $0;
 HEAP32[$9 + 104 >> 2] = $1;
 HEAP32[$9 + 100 >> 2] = $2;
 HEAP32[$9 + 96 >> 2] = $3;
 HEAP32[$9 + 92 >> 2] = $4;
 HEAP32[$9 + 88 >> 2] = $5;
 HEAP32[$9 + 84 >> 2] = $6;
 HEAP32[$9 + 80 >> 2] = $7;
 HEAP32[$9 + 76 >> 2] = $8;
 HEAP32[$9 + 72 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] >> 2];
 HEAP32[$9 + 68 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 4 >> 2];
 HEAP32[$9 + 64 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 8 >> 2];
 HEAP32[$9 + 60 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 12 >> 2];
 HEAP32[$9 + 56 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 16 >> 2];
 HEAP32[$9 + 52 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 20 >> 2];
 HEAP32[$9 + 48 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 24 >> 2];
 label$1: {
  if (HEAP32[$9 + 52 >> 2] > HEAP32[$9 + 48 >> 2]) {
   break label$1;
  }
 }
 label$2: {
  if (HEAP32[$9 + 64 >> 2]) {
   break label$2;
  }
 }
 HEAP32[$9 + 44 >> 2] = tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$9 + 80 >> 2]);
 HEAP32[$9 + 40 >> 2] = tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$9 + 96 >> 2]);
 HEAP32[$9 + 36 >> 2] = tflite__FlatSizeSkipDim_28tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$9 + 80 >> 2], HEAP32[$9 + 44 >> 2] - 1 | 0);
 HEAP32[$9 + 32 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$9 + 96 >> 2], HEAP32[$9 + 40 >> 2] - 2 | 0, HEAP32[$9 + 80 >> 2], HEAP32[$9 + 44 >> 2] - 1 | 0);
 HEAP32[$9 + 28 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 96 >> 2], HEAP32[$9 + 40 >> 2] - 1 | 0);
 HEAP32[$9 + 24 >> 2] = 0;
 while (1) {
  if (HEAP32[$9 + 24 >> 2] < HEAP32[$9 + 36 >> 2]) {
   HEAP32[$9 + 20 >> 2] = 0;
   while (1) {
    if (HEAP32[$9 + 20 >> 2] < HEAP32[$9 + 32 >> 2]) {
     HEAP32[$9 + 16 >> 2] = HEAP32[HEAP32[$9 + 84 >> 2] + (HEAP32[$9 + 20 >> 2] << 2) >> 2];
     HEAP32[$9 + 12 >> 2] = 0;
     while (1) {
      if (HEAP32[$9 + 12 >> 2] < HEAP32[$9 + 28 >> 2]) {
       HEAP16[$9 + 10 >> 1] = HEAPU8[HEAP32[$9 + 100 >> 2] + (HEAP32[$9 + 12 >> 2] + Math_imul(HEAP32[$9 + 24 >> 2], HEAP32[$9 + 28 >> 2]) | 0) | 0] + HEAP32[$9 + 72 >> 2];
       HEAP16[$9 + 8 >> 1] = HEAPU8[HEAP32[$9 + 92 >> 2] + (HEAP32[$9 + 12 >> 2] + Math_imul(HEAP32[$9 + 20 >> 2], HEAP32[$9 + 28 >> 2]) | 0) | 0] + HEAP32[$9 + 68 >> 2];
       HEAP32[$9 + 16 >> 2] = HEAP32[$9 + 16 >> 2] + Math_imul(HEAP16[$9 + 8 >> 1], HEAP16[$9 + 10 >> 1]);
       HEAP32[$9 + 12 >> 2] = HEAP32[$9 + 12 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$9 + 16 >> 2] = tflite__MultiplyByQuantizedMultiplier_28int_2c_20int_2c_20int_29(HEAP32[$9 + 16 >> 2], HEAP32[$9 + 60 >> 2], HEAP32[$9 + 56 >> 2]);
     HEAP32[$9 + 4 >> 2] = HEAP32[$9 + 52 >> 2] - HEAP32[$9 + 64 >> 2];
     HEAP32[$9 + 16 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($9 + 16 | 0, $9 + 4 | 0) >> 2];
     HEAP32[$9 >> 2] = HEAP32[$9 + 48 >> 2] - HEAP32[$9 + 64 >> 2];
     HEAP32[$9 + 16 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($9 + 16 | 0, $9) >> 2];
     HEAP32[$9 + 16 >> 2] = HEAP32[$9 + 64 >> 2] + HEAP32[$9 + 16 >> 2];
     HEAP16[HEAP32[$9 + 76 >> 2] + (HEAP32[$9 + 20 >> 2] + Math_imul(HEAP32[$9 + 32 >> 2], HEAP32[$9 + 24 >> 2]) << 1) >> 1] = HEAP32[$9 + 16 >> 2];
     HEAP32[$9 + 20 >> 2] = HEAP32[$9 + 20 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$9 + 24 >> 2] = HEAP32[$9 + 24 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $9 + 112 | 0;
}

function jsserialPopulateUSARTInfo($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 192 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 188 >> 2] = $0;
 HEAP32[$3 + 184 >> 2] = $1;
 HEAP32[$3 + 180 >> 2] = $2;
 jshUSARTInitInfo(HEAP32[$3 + 188 >> 2]);
 HEAP32[$3 + 176 >> 2] = 0;
 HEAP32[$3 + 172 >> 2] = 0;
 HEAP32[$3 + 168 >> 2] = HEAPU8[HEAP32[$3 + 188 >> 2] + 8 | 0];
 HEAP32[$3 + 164 >> 2] = HEAPU8[HEAP32[$3 + 188 >> 2] + 10 | 0];
 HEAP32[$3 + 48 >> 2] = 96681;
 HEAP16[$3 + 52 >> 1] = 13;
 HEAP32[$3 + 56 >> 2] = HEAP32[$3 + 188 >> 2] + 4;
 HEAP32[$3 + 60 >> 2] = 96678;
 HEAP16[$3 + 64 >> 1] = 13;
 HEAP32[$3 + 68 >> 2] = HEAP32[$3 + 188 >> 2] + 5;
 HEAP32[$3 + 72 >> 2] = 103124;
 HEAP16[$3 + 76 >> 1] = 13;
 HEAP32[$3 + 80 >> 2] = HEAP32[$3 + 188 >> 2] + 6;
 HEAP32[$3 + 84 >> 2] = 99999;
 HEAP16[$3 + 88 >> 1] = 13;
 HEAP32[$3 + 92 >> 2] = HEAP32[$3 + 188 >> 2] + 7;
 HEAP32[$3 + 96 >> 2] = 104167;
 HEAP16[$3 + 100 >> 1] = 10;
 HEAP32[$3 + 104 >> 2] = $3 + 168;
 HEAP32[$3 + 108 >> 2] = 99967;
 HEAP16[$3 + 112 >> 1] = 10;
 HEAP32[$3 + 116 >> 2] = $3 + 164;
 HEAP32[$3 + 120 >> 2] = 96411;
 HEAP16[$3 + 124 >> 1] = 5;
 HEAP32[$3 + 128 >> 2] = $3 + 176;
 HEAP32[$3 + 132 >> 2] = 96828;
 HEAP16[$3 + 136 >> 1] = 5;
 HEAP32[$3 + 140 >> 2] = $3 + 172;
 HEAP32[$3 + 144 >> 2] = 100060;
 HEAP16[$3 + 148 >> 1] = 12;
 HEAP32[$3 + 152 >> 2] = HEAP32[$3 + 188 >> 2] + 12;
 if (!(jsvIsUndefined(HEAP32[$3 + 184 >> 2]) & 1)) {
  HEAP32[$3 + 44 >> 2] = jsvGetInteger(HEAP32[$3 + 184 >> 2]);
  label$2: {
   if (!(HEAP32[$3 + 44 >> 2] <= 1e7 & HEAP32[$3 + 44 >> 2] > 100)) {
    HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 44 >> 2];
    jsExceptionHere(1, 107555, $3 + 32 | 0);
    break label$2;
   }
   $0 = HEAP32[$3 + 188 >> 2];
   $1 = HEAP32[$3 + 44 >> 2];
   HEAP8[$0 | 0] = $1;
   HEAP8[$0 + 1 | 0] = $1 >>> 8;
   HEAP8[$0 + 2 | 0] = $1 >>> 16;
   HEAP8[$0 + 3 | 0] = $1 >>> 24;
  }
 }
 HEAP8[$3 + 43 | 0] = 1;
 if (jsvReadConfigObject(HEAP32[$3 + 180 >> 2], $3 + 48 | 0, 9) & 1) {
  HEAP8[HEAP32[$3 + 188 >> 2] + 8 | 0] = HEAP32[$3 + 168 >> 2];
  HEAP8[HEAP32[$3 + 188 >> 2] + 10 | 0] = HEAP32[$3 + 164 >> 2];
  HEAP8[HEAP32[$3 + 188 >> 2] + 9 | 0] = 0;
  label$6: {
   if (jsvIsString(HEAP32[$3 + 176 >> 2]) & 1) {
    label$8: {
     if (!(jsvIsStringEqual(HEAP32[$3 + 176 >> 2], 102055) & 1)) {
      if (!(jsvIsStringEqual(HEAP32[$3 + 176 >> 2], 106733) & 1)) {
       break label$8;
      }
     }
     HEAP8[HEAP32[$3 + 188 >> 2] + 9 | 0] = 1;
     break label$6;
    }
    label$10: {
     if (!(jsvIsStringEqual(HEAP32[$3 + 176 >> 2], 105505) & 1)) {
      if (!(jsvIsStringEqual(HEAP32[$3 + 176 >> 2], 102527) & 1)) {
       break label$10;
      }
     }
     HEAP8[HEAP32[$3 + 188 >> 2] + 9 | 0] = 2;
    }
    break label$6;
   }
   if (jsvIsInt(HEAP32[$3 + 176 >> 2]) & 1) {
    $0 = jsvGetInteger(HEAP32[$3 + 176 >> 2]);
    HEAP8[HEAP32[$3 + 188 >> 2] + 9 | 0] = $0;
   }
  }
  if (HEAPU8[HEAP32[$3 + 188 >> 2] + 9 | 0] > 2) {
   HEAP32[$3 + 16 >> 2] = HEAPU8[HEAP32[$3 + 188 >> 2] + 9 | 0];
   jsExceptionHere(1, 107165, $3 + 16 | 0);
   HEAP8[$3 + 43 | 0] = 0;
  }
  if (HEAP8[$3 + 43 | 0] & 1) {
   label$15: {
    label$16: {
     label$17: {
      if (jsvIsUndefined(HEAP32[$3 + 172 >> 2]) & 1) {
       break label$17;
      }
      if (jsvIsNull(HEAP32[$3 + 172 >> 2]) & 1) {
       break label$17;
      }
      if (!(jsvIsStringEqual(HEAP32[$3 + 172 >> 2], 105e3) & 1)) {
       break label$16;
      }
     }
     HEAP8[HEAP32[$3 + 188 >> 2] + 11 | 0] = 0;
     break label$15;
    }
    label$18: {
     if (jsvIsStringEqual(HEAP32[$3 + 172 >> 2], 102086) & 1) {
      HEAP8[HEAP32[$3 + 188 >> 2] + 11 | 0] = 1;
      break label$18;
     }
     HEAP32[$3 >> 2] = HEAP32[$3 + 172 >> 2];
     jsExceptionHere(1, 101781, $3);
     HEAP8[$3 + 43 | 0] = 0;
    }
   }
  }
 }
 jsvUnLock2(HEAP32[$3 + 176 >> 2], HEAP32[$3 + 172 >> 2]);
 __stack_pointer = $3 + 192 | 0;
 return HEAP8[$3 + 43 | 0] & 1;
}

function jsfCompactInternal($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 96 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 88 >> 2] = $0;
 HEAP32[$3 + 84 >> 2] = $1;
 HEAP32[$3 + 80 >> 2] = $2;
 HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 88 >> 2];
 jsiConsolePrintf(127759, 0);
 HEAP32[$3 + 72 >> 2] = 0;
 HEAP32[$3 + 68 >> 2] = 0;
 HEAP32[$3 + 64 >> 2] = 0;
 HEAP32[$3 + 56 >> 2] = 0;
 HEAP32[$3 + 60 >> 2] = 0;
 HEAP32[$3 + 48 >> 2] = 0;
 HEAP32[$3 + 52 >> 2] = 0;
 HEAP32[$3 + 40 >> 2] = 0;
 HEAP32[$3 + 44 >> 2] = 0;
 HEAP32[$3 + 32 >> 2] = 0;
 HEAP32[$3 + 36 >> 2] = 0;
 HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 88 >> 2];
 HEAP32[$3 + 24 >> 2] = 0;
 label$1: {
  if (jsfGetFileHeader(HEAP32[$3 + 28 >> 2], $3 + 32 | 0, 1) & 1) {
   while (1) {
    if (jsfIsRealFile($3 + 32 | 0) & 1) {
     HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 76 >> 2] + HEAP32[$3 + 64 >> 2];
     if (HEAP32[$3 + 28 >> 2] != HEAP32[$3 + 20 >> 2]) {
      jsvUpdateMemoryAddress(HEAP32[$3 + 28 >> 2], jsfGetFileSize($3 + 32 | 0) + 32 | 0, HEAP32[$3 + 20 >> 2]);
     }
     memcpy_circular(HEAP32[$3 + 84 >> 2], $3 + 72 | 0, HEAP32[$3 + 80 >> 2], $3 + 32 | 0, 32);
     HEAP32[$3 + 64 >> 2] = HEAP32[$3 + 64 >> 2] + 32;
     HEAP32[$3 + 16 >> 2] = jsfAlignAddress(jsfGetFileSize($3 + 32 | 0));
     HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 28 >> 2] + 32;
     jsfCompactWriteBuffer($3 + 76 | 0, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 84 >> 2], HEAP32[$3 + 80 >> 2], $3 - -64 | 0, $3 + 68 | 0);
     while (1) {
      if (HEAP32[$3 + 16 >> 2]) {
       HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 80 >> 2] - HEAP32[$3 + 64 >> 2];
       if (HEAPU32[$3 + 8 >> 2] > HEAP32[$3 + 80 >> 2] - HEAP32[$3 + 72 >> 2] >>> 0) {
        HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 80 >> 2] - HEAP32[$3 + 72 >> 2];
       }
       if (!(HEAPU32[$3 + 68 >> 2] <= HEAPU32[$3 + 72 >> 2] | HEAPU32[$3 + 8 >> 2] <= HEAP32[$3 + 68 >> 2] - HEAP32[$3 + 72 >> 2] >>> 0)) {
        HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 68 >> 2] - HEAP32[$3 + 72 >> 2];
       }
       if (!HEAP32[$3 + 8 >> 2]) {
        HEAP8[$3 + 95 | 0] = 0;
        break label$1;
       }
       if (HEAPU32[$3 + 8 >> 2] > HEAPU32[$3 + 16 >> 2]) {
        HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 16 >> 2];
       }
       jshFlashRead(HEAP32[$3 + 84 >> 2] + HEAP32[$3 + 72 >> 2] | 0, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
       HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 16 >> 2] - HEAP32[$3 + 8 >> 2];
       HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 8 >> 2] + HEAP32[$3 + 12 >> 2];
       HEAP32[$3 + 64 >> 2] = HEAP32[$3 + 8 >> 2] + HEAP32[$3 + 64 >> 2];
       HEAP32[$3 + 72 >> 2] = (HEAP32[$3 + 72 >> 2] + HEAP32[$3 + 8 >> 2] >>> 0) % HEAPU32[$3 + 80 >> 2];
       jsfCompactWriteBuffer($3 + 76 | 0, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 84 >> 2], HEAP32[$3 + 80 >> 2], $3 - -64 | 0, $3 + 68 | 0);
       continue;
      }
      break;
     }
     HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 28 >> 2] - HEAP32[$3 + 88 >> 2] >>> 14;
     if (HEAP32[$3 + 4 >> 2] != HEAP32[$3 + 24 >> 2]) {
      HEAP32[$3 >> 2] = HEAP8[(HEAP32[$3 + 4 >> 2] & 3) + 96366 | 0];
      jsiConsolePrintf(107762, $3);
      HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 4 >> 2];
     }
    }
    jshKickWatchDog();
    jshKickSoftWatchDog();
    if (jsfGetNextFileHeader($3 + 28 | 0, $3 + 32 | 0, 1) & 1) {
     continue;
    }
    break;
   }
  }
  jsfCompactWriteBuffer($3 + 76 | 0, jsfGetBankEndAddress(HEAP32[$3 + 76 >> 2]), HEAP32[$3 + 84 >> 2], HEAP32[$3 + 80 >> 2], $3 - -64 | 0, $3 + 68 | 0);
  if (HEAP32[$3 + 76 >> 2] != HEAP32[$3 + 88 >> 2]) {
   HEAP32[$3 + 76 >> 2] = jsfGetAddressOfNextPage(HEAP32[$3 + 76 >> 2] - 1 | 0);
  }
  if (HEAP32[$3 + 76 >> 2]) {
   if (!HEAP32[$3 + 28 >> 2]) {
    HEAP32[$3 + 28 >> 2] = jsfGetBankEndAddress(HEAP32[$3 + 76 >> 2]);
   }
   jshFlashErasePages(HEAP32[$3 + 76 >> 2], HEAP32[$3 + 28 >> 2] - HEAP32[$3 + 76 >> 2] | 0);
  }
  jsiConsolePrintf(129587, 0);
  HEAP8[$3 + 95 | 0] = 1;
 }
 __stack_pointer = $3 + 96 | 0;
 return HEAP8[$3 + 95 | 0] & 1;
}

function jswrap_function_bind($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 80 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 72 >> 2] = $0;
 HEAP32[$3 + 68 >> 2] = $1;
 HEAP32[$3 + 64 >> 2] = $2;
 label$1: {
  if (!(jsvIsFunction(HEAP32[$3 + 72 >> 2]) & 1)) {
   HEAP32[$3 >> 2] = HEAP32[$3 + 72 >> 2];
   jsExceptionHere(3, 98838, $3);
   HEAP32[$3 + 76 >> 2] = 0;
   break label$1;
  }
  label$3: {
   if (jsvIsNativeFunction(HEAP32[$3 + 72 >> 2]) & 1) {
    $0 = HEAP32[$3 + 72 >> 2];
    $1 = HEAP32[$3 + 72 >> 2];
    HEAP32[$3 + 60 >> 2] = jsvNewNativeFunction(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8);
    break label$3;
   }
   HEAP32[$3 + 60 >> 2] = jsvNewWithFlags((jsvIsFunctionReturn(HEAP32[$3 + 72 >> 2]) & 1 ? 9 : 7) & 65535);
  }
  if (!HEAP32[$3 + 60 >> 2]) {
   HEAP32[$3 + 76 >> 2] = 0;
   break label$1;
  }
  jsvObjectIteratorNew($3 + 56 | 0, HEAP32[$3 + 72 >> 2]);
  while (1) {
   label$7: {
    if (!(jsvObjectIteratorHasValue_9($3 + 56 | 0) & 1)) {
     break label$7;
    }
    HEAP32[$3 + 52 >> 2] = jsvObjectIteratorGetKey_6($3 + 56 | 0);
    HEAP32[$3 + 48 >> 2] = jsvObjectIteratorGetValue_9($3 + 56 | 0);
    $0 = 0;
    if (jsvIsFunctionParameter(HEAP32[$3 + 52 >> 2]) & 1) {
     $0 = HEAP32[$3 + 48 >> 2] != 0;
    }
    HEAP8[$3 + 47 | 0] = $0;
    if (HEAP8[$3 + 47 | 0] & 1) {
     HEAP32[$3 + 40 >> 2] = jsvCopy(HEAP32[$3 + 52 >> 2], 1);
     if (HEAP32[$3 + 40 >> 2]) {
      jsvAddName(HEAP32[$3 + 60 >> 2], HEAP32[$3 + 40 >> 2]);
      jsvUnLock(HEAP32[$3 + 40 >> 2]);
     }
    }
    jsvUnLock2(HEAP32[$3 + 52 >> 2], HEAP32[$3 + 48 >> 2]);
    if (!(HEAP8[$3 + 47 | 0] & 1)) {
     break label$7;
    }
    jsvObjectIteratorNext($3 + 56 | 0);
    continue;
   }
   break;
  }
  if (HEAP32[$3 + 64 >> 2]) {
   jsvObjectIteratorNew($3 + 32 | 0, HEAP32[$3 + 64 >> 2]);
   while (1) {
    if (jsvObjectIteratorHasValue_9($3 + 32 | 0) & 1) {
     HEAP32[$3 + 28 >> 2] = jsvObjectIteratorGetValue_9($3 + 32 | 0);
     HEAP8[$3 + 27 | 0] = 0;
     while (1) {
      $0 = 0;
      if (!(HEAP8[$3 + 27 | 0] & 1)) {
       $0 = jsvObjectIteratorHasValue_9($3 + 56 | 0);
      }
      label$16: {
       if (!($0 & 1)) {
        break label$16;
       }
       HEAP32[$3 + 20 >> 2] = jsvObjectIteratorGetKey_6($3 + 56 | 0);
       if (!(jsvIsFunctionParameter(HEAP32[$3 + 20 >> 2]) & 1)) {
        jsvUnLock(HEAP32[$3 + 20 >> 2]);
        break label$16;
       }
       HEAP32[$3 + 16 >> 2] = jsvCopyNameOnly(HEAP32[$3 + 20 >> 2], 0, 1);
       jsvSetValueOfName(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 28 >> 2]);
       jsvAddName(HEAP32[$3 + 60 >> 2], HEAP32[$3 + 16 >> 2]);
       HEAP8[$3 + 27 | 0] = 1;
       jsvUnLock2(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 16 >> 2]);
       jsvObjectIteratorNext($3 + 56 | 0);
       continue;
      }
      break;
     }
     if (!(HEAP8[$3 + 27 | 0] & 1)) {
      jsvAddFunctionParameter(HEAP32[$3 + 60 >> 2], 0, HEAP32[$3 + 28 >> 2]);
     }
     jsvUnLock(HEAP32[$3 + 28 >> 2]);
     jsvObjectIteratorNext($3 + 32 | 0);
     continue;
    }
    break;
   }
   jsvObjectIteratorFree_9($3 + 32 | 0);
  }
  while (1) {
   if (jsvObjectIteratorHasValue_9($3 + 56 | 0) & 1) {
    HEAP32[$3 + 12 >> 2] = jsvObjectIteratorGetKey_6($3 + 56 | 0);
    HEAP32[$3 + 8 >> 2] = jsvCopyNameOnly(HEAP32[$3 + 12 >> 2], 1, 1);
    if (HEAP32[$3 + 8 >> 2]) {
     jsvAddName(HEAP32[$3 + 60 >> 2], HEAP32[$3 + 8 >> 2]);
     jsvUnLock(HEAP32[$3 + 8 >> 2]);
    }
    jsvUnLock(HEAP32[$3 + 12 >> 2]);
    jsvObjectIteratorNext($3 + 56 | 0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree_9($3 + 56 | 0);
  jsvObjectSetChild(HEAP32[$3 + 60 >> 2], 100302, HEAP32[$3 + 68 >> 2]);
  HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 60 >> 2];
 }
 __stack_pointer = $3 + 80 | 0;
 return HEAP32[$3 + 76 >> 2];
}

function jswrap_function_replaceWith($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 44 >> 2] = $0;
 HEAP32[$2 + 40 >> 2] = $1;
 label$1: {
  label$2: {
   if (jsvIsFunction(HEAP32[$2 + 44 >> 2]) & 1) {
    if (jsvIsFunction(HEAP32[$2 + 40 >> 2]) & 1) {
     break label$2;
    }
   }
   jsExceptionHere(3, 102323, 0);
   break label$1;
  }
  if ((jsvIsNativeFunction(HEAP32[$2 + 44 >> 2]) & 1) != (jsvIsNativeFunction(HEAP32[$2 + 40 >> 2]) & 1)) {
   label$5: {
    if (jsvIsNativeFunction(HEAP32[$2 + 40 >> 2]) & 1) {
     $0 = HEAP32[$2 + 44 >> 2];
     $1 = HEAP32[$2 + 44 >> 2];
     $1 = (HEAPU8[$1 + 11 | 0] | HEAPU8[$1 + 12 | 0] << 8) & -64 | 8;
     HEAP8[$0 + 11 | 0] = $1;
     HEAP8[$0 + 12 | 0] = $1 >>> 8;
     $0 = HEAP32[$2 + 44 >> 2];
     $1 = HEAP32[$2 + 40 >> 2];
     $3 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
     HEAP8[$0 | 0] = $3;
     HEAP8[$0 + 1 | 0] = $3 >>> 8;
     HEAP8[$0 + 2 | 0] = $3 >>> 16;
     HEAP8[$0 + 3 | 0] = $3 >>> 24;
     $1 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8;
     HEAP8[$0 + 4 | 0] = $1;
     HEAP8[$0 + 5 | 0] = $1 >>> 8;
     break label$5;
    }
    $0 = HEAP32[$2 + 44 >> 2];
    HEAP8[$0 | 0] = 0;
    HEAP8[$0 + 1 | 0] = 0;
    HEAP8[$0 + 2 | 0] = 0;
    HEAP8[$0 + 3 | 0] = 0;
    HEAP8[$0 + 4 | 0] = 0;
    HEAP8[$0 + 5 | 0] = 0;
    $0 = HEAP32[$2 + 44 >> 2];
    $1 = HEAP32[$2 + 44 >> 2];
    $1 = (HEAPU8[$1 + 11 | 0] | HEAPU8[$1 + 12 | 0] << 8) & -64 | 7;
    HEAP8[$0 + 11 | 0] = $1;
    HEAP8[$0 + 12 | 0] = $1 >>> 8;
   }
  }
  if ((jsvIsFunctionReturn(HEAP32[$2 + 44 >> 2]) & 1) != (jsvIsFunctionReturn(HEAP32[$2 + 40 >> 2]) & 1)) {
   label$8: {
    if (jsvIsFunctionReturn(HEAP32[$2 + 40 >> 2]) & 1) {
     $0 = HEAP32[$2 + 44 >> 2];
     $1 = HEAP32[$2 + 44 >> 2];
     $1 = (HEAPU8[$1 + 11 | 0] | HEAPU8[$1 + 12 | 0] << 8) & -64 | 9;
     HEAP8[$0 + 11 | 0] = $1;
     HEAP8[$0 + 12 | 0] = $1 >>> 8;
     break label$8;
    }
    $0 = HEAP32[$2 + 44 >> 2];
    $1 = HEAP32[$2 + 44 >> 2];
    $1 = (HEAPU8[$1 + 11 | 0] | HEAPU8[$1 + 12 | 0] << 8) & -64 | 7;
    HEAP8[$0 + 11 | 0] = $1;
    HEAP8[$0 + 12 | 0] = $1 >>> 8;
   }
  }
  HEAP32[$2 + 36 >> 2] = jsvFindChildFromString(HEAP32[$2 + 44 >> 2], 102046);
  HEAP32[$2 + 32 >> 2] = jsvFindChildFromString(HEAP32[$2 + 44 >> 2], 104794);
  jsvRemoveAllChildren(HEAP32[$2 + 44 >> 2]);
  jsvObjectIteratorNew($2 + 24 | 0, HEAP32[$2 + 40 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_9($2 + 24 | 0) & 1) {
    HEAP32[$2 + 20 >> 2] = jsvObjectIteratorGetKey_6($2 + 24 | 0);
    jsvObjectIteratorNext($2 + 24 | 0);
    label$12: {
     if (jsvIsStringEqual(HEAP32[$2 + 20 >> 2], 102046) & 1) {
      break label$12;
     }
     if (jsvIsStringEqual(HEAP32[$2 + 20 >> 2], 104794) & 1) {
      break label$12;
     }
     label$13: {
      if (jsvIsStringEqual(HEAP32[$2 + 20 >> 2], 105817) & 1) {
       HEAP32[$2 + 12 >> 2] = jsvSkipName(HEAP32[$2 + 20 >> 2]);
       HEAP32[$2 + 16 >> 2] = jsvMakeIntoVariableName(jsvNewFromStringVarComplete(HEAP32[$2 + 20 >> 2]), HEAP32[$2 + 12 >> 2]);
       jsvUnLock(HEAP32[$2 + 12 >> 2]);
       break label$13;
      }
      HEAP32[$2 + 16 >> 2] = jsvCopy(HEAP32[$2 + 20 >> 2], 1);
     }
     if (HEAP32[$2 + 16 >> 2]) {
      jsvAddName(HEAP32[$2 + 44 >> 2], HEAP32[$2 + 16 >> 2]);
      jsvUnLock(HEAP32[$2 + 16 >> 2]);
     }
    }
    jsvUnLock(HEAP32[$2 + 20 >> 2]);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree_9($2 + 24 | 0);
  if (HEAP32[$2 + 36 >> 2]) {
   jsvAddName(HEAP32[$2 + 44 >> 2], HEAP32[$2 + 36 >> 2]);
  }
  jsvUnLock(HEAP32[$2 + 36 >> 2]);
  if (HEAP32[$2 + 32 >> 2]) {
   jsvAddName(HEAP32[$2 + 44 >> 2], HEAP32[$2 + 32 >> 2]);
  }
  jsvUnLock(HEAP32[$2 + 32 >> 2]);
 }
 __stack_pointer = $2 + 48 | 0;
}
function graphicsDrawCircleAA($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 44 >> 2] = $0;
 HEAP32[$4 + 40 >> 2] = $1;
 HEAP32[$4 + 36 >> 2] = $2;
 HEAP32[$4 + 32 >> 2] = $3;
 graphicsToDeviceCoordinates(HEAP32[$4 + 44 >> 2], $4 + 40 | 0, $4 + 36 | 0);
 HEAP32[$4 + 28 >> 2] = 0 - HEAP32[$4 + 32 >> 2];
 HEAP32[$4 + 24 >> 2] = 0;
 HEAP32[$4 + 20 >> 2] = 2 - (HEAP32[$4 + 32 >> 2] << 1);
 HEAP32[$4 + 32 >> 2] = 1 - HEAP32[$4 + 20 >> 2];
 while (1) {
  HEAP32[$4 + 16 >> 2] = 255 - ((Math_imul(abs((HEAP32[$4 + 20 >> 2] - (HEAP32[$4 + 28 >> 2] + HEAP32[$4 + 24 >> 2] << 1) | 0) - 2 | 0), 255) | 0) / HEAP32[$4 + 32 >> 2] | 0);
  graphicsSetPixelDeviceBlended(HEAP32[$4 + 44 >> 2], HEAP32[$4 + 40 >> 2] - HEAP32[$4 + 28 >> 2] | 0, HEAP32[$4 + 36 >> 2] + HEAP32[$4 + 24 >> 2] | 0, HEAP32[$4 + 16 >> 2]);
  graphicsSetPixelDeviceBlended(HEAP32[$4 + 44 >> 2], HEAP32[$4 + 40 >> 2] - HEAP32[$4 + 24 >> 2] | 0, HEAP32[$4 + 36 >> 2] - HEAP32[$4 + 28 >> 2] | 0, HEAP32[$4 + 16 >> 2]);
  graphicsSetPixelDeviceBlended(HEAP32[$4 + 44 >> 2], HEAP32[$4 + 40 >> 2] + HEAP32[$4 + 28 >> 2] | 0, HEAP32[$4 + 36 >> 2] - HEAP32[$4 + 24 >> 2] | 0, HEAP32[$4 + 16 >> 2]);
  graphicsSetPixelDeviceBlended(HEAP32[$4 + 44 >> 2], HEAP32[$4 + 40 >> 2] + HEAP32[$4 + 24 >> 2] | 0, HEAP32[$4 + 36 >> 2] + HEAP32[$4 + 28 >> 2] | 0, HEAP32[$4 + 16 >> 2]);
  HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 20 >> 2];
  HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 28 >> 2];
  if ((HEAP32[$4 + 20 >> 2] + HEAP32[$4 + 24 >> 2] | 0) > 0) {
   HEAP32[$4 + 16 >> 2] = 255 - ((Math_imul((HEAP32[$4 + 20 >> 2] - (HEAP32[$4 + 28 >> 2] << 1) | 0) - 1 | 0, 255) | 0) / HEAP32[$4 + 32 >> 2] | 0);
   if (HEAP32[$4 + 16 >> 2] > 0) {
    graphicsSetPixelDeviceBlended(HEAP32[$4 + 44 >> 2], HEAP32[$4 + 40 >> 2] - HEAP32[$4 + 28 >> 2] | 0, (HEAP32[$4 + 36 >> 2] + HEAP32[$4 + 24 >> 2] | 0) + 1 | 0, HEAP32[$4 + 16 >> 2]);
    graphicsSetPixelDeviceBlended(HEAP32[$4 + 44 >> 2], (HEAP32[$4 + 40 >> 2] - HEAP32[$4 + 24 >> 2] | 0) - 1 | 0, HEAP32[$4 + 36 >> 2] - HEAP32[$4 + 28 >> 2] | 0, HEAP32[$4 + 16 >> 2]);
    graphicsSetPixelDeviceBlended(HEAP32[$4 + 44 >> 2], HEAP32[$4 + 40 >> 2] + HEAP32[$4 + 28 >> 2] | 0, (HEAP32[$4 + 36 >> 2] - HEAP32[$4 + 24 >> 2] | 0) - 1 | 0, HEAP32[$4 + 16 >> 2]);
    graphicsSetPixelDeviceBlended(HEAP32[$4 + 44 >> 2], (HEAP32[$4 + 40 >> 2] + HEAP32[$4 + 24 >> 2] | 0) + 1 | 0, HEAP32[$4 + 36 >> 2] + HEAP32[$4 + 28 >> 2] | 0, HEAP32[$4 + 16 >> 2]);
   }
   $0 = HEAP32[$4 + 28 >> 2] + 1 | 0;
   HEAP32[$4 + 28 >> 2] = $0;
   HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 20 >> 2] + (($0 << 1) + 1 | 0);
  }
  if ((HEAP32[$4 + 8 >> 2] + HEAP32[$4 + 12 >> 2] | 0) <= 0) {
   HEAP32[$4 + 16 >> 2] = 255 - ((Math_imul(((HEAP32[$4 + 24 >> 2] << 1) + 3 | 0) - HEAP32[$4 + 8 >> 2] | 0, 255) | 0) / HEAP32[$4 + 32 >> 2] | 0);
   if (HEAP32[$4 + 16 >> 2] > 0) {
    graphicsSetPixelDeviceBlended(HEAP32[$4 + 44 >> 2], (HEAP32[$4 + 40 >> 2] - HEAP32[$4 + 12 >> 2] | 0) - 1 | 0, HEAP32[$4 + 36 >> 2] + HEAP32[$4 + 24 >> 2] | 0, HEAP32[$4 + 16 >> 2]);
    graphicsSetPixelDeviceBlended(HEAP32[$4 + 44 >> 2], HEAP32[$4 + 40 >> 2] - HEAP32[$4 + 24 >> 2] | 0, (HEAP32[$4 + 36 >> 2] - HEAP32[$4 + 12 >> 2] | 0) - 1 | 0, HEAP32[$4 + 16 >> 2]);
    graphicsSetPixelDeviceBlended(HEAP32[$4 + 44 >> 2], (HEAP32[$4 + 40 >> 2] + HEAP32[$4 + 12 >> 2] | 0) + 1 | 0, HEAP32[$4 + 36 >> 2] - HEAP32[$4 + 24 >> 2] | 0, HEAP32[$4 + 16 >> 2]);
    graphicsSetPixelDeviceBlended(HEAP32[$4 + 44 >> 2], HEAP32[$4 + 40 >> 2] + HEAP32[$4 + 24 >> 2] | 0, (HEAP32[$4 + 36 >> 2] + HEAP32[$4 + 12 >> 2] | 0) + 1 | 0, HEAP32[$4 + 16 >> 2]);
   }
   $0 = HEAP32[$4 + 24 >> 2] + 1 | 0;
   HEAP32[$4 + 24 >> 2] = $0;
   HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 20 >> 2] + (($0 << 1) + 1 | 0);
  }
  if (HEAP32[$4 + 28 >> 2] < 0) {
   continue;
  }
  break;
 }
 __stack_pointer = $4 + 48 | 0;
}

function _jswrap_banglejs_setOptions($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 288 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 280 >> 2] = $0;
 HEAP8[$2 + 279 | 0] = $1;
 HEAP8[$2 + 278 | 0] = (HEAP32[85796] & 2) != 0;
 HEAP8[$2 + 277 | 0] = (HEAP32[85796] & 4) != 0;
 HEAP8[$2 + 276 | 0] = (HEAP32[85796] & 8) != 0;
 HEAP8[$2 + 275 | 0] = HEAP32[85796] & 1;
 HEAP8[$2 + 274 | 0] = (HEAP32[85796] & 16) != 0;
 HEAP8[$2 + 273 | 0] = (HEAP32[85796] & 32) != 0;
 HEAP8[$2 + 272 | 0] = (HEAP32[85796] & 64) != 0;
 HEAP8[$2 + 271 | 0] = (HEAP32[85796] & 2048) != 0;
 HEAP32[$2 + 256 >> 2] = Math_imul(HEAPU16[76919], HEAPU16[76919]);
 HEAP32[$2 + 252 >> 2] = Math_imul(HEAPU16[76920], HEAPU16[76920]);
 HEAP32[$2 >> 2] = 103409;
 HEAP16[$2 + 4 >> 1] = 10;
 HEAP32[$2 + 8 >> 2] = $2 + 256;
 HEAP32[$2 + 12 >> 2] = 103428;
 HEAP16[$2 + 16 >> 1] = 10;
 HEAP32[$2 + 20 >> 2] = $2 + 252;
 HEAP32[$2 + 24 >> 2] = 97561;
 HEAP16[$2 + 28 >> 1] = 10;
 HEAP32[$2 + 32 >> 2] = 153844;
 HEAP32[$2 + 36 >> 2] = 103365;
 HEAP16[$2 + 40 >> 1] = 10;
 HEAP32[$2 + 44 >> 2] = 153848;
 HEAP32[$2 + 48 >> 2] = 96878;
 HEAP16[$2 + 52 >> 1] = 10;
 HEAP32[$2 + 56 >> 2] = $2 + 264;
 HEAP32[$2 + 60 >> 2] = 103459;
 HEAP16[$2 + 64 >> 1] = 10;
 HEAP32[$2 + 68 >> 2] = $2 + 260;
 HEAP32[$2 + 72 >> 2] = 105846;
 HEAP16[$2 + 76 >> 1] = 10;
 HEAP32[$2 + 80 >> 2] = 153852;
 HEAP32[$2 + 84 >> 2] = 97415;
 HEAP16[$2 + 88 >> 1] = 10;
 HEAP32[$2 + 92 >> 2] = 153860;
 HEAP32[$2 + 96 >> 2] = 108349;
 HEAP16[$2 + 100 >> 1] = 10;
 HEAP32[$2 + 104 >> 2] = 153856;
 HEAP32[$2 + 108 >> 2] = 111187;
 HEAP16[$2 + 112 >> 1] = 12;
 HEAP32[$2 + 116 >> 2] = $2 + 278;
 HEAP32[$2 + 120 >> 2] = 110933;
 HEAP16[$2 + 124 >> 1] = 12;
 HEAP32[$2 + 128 >> 2] = $2 + 277;
 HEAP32[$2 + 132 >> 2] = 110865;
 HEAP16[$2 + 136 >> 1] = 12;
 HEAP32[$2 + 140 >> 2] = $2 + 276;
 HEAP32[$2 + 144 >> 2] = 102018;
 HEAP16[$2 + 148 >> 1] = 12;
 HEAP32[$2 + 152 >> 2] = $2 + 275;
 HEAP32[$2 + 156 >> 2] = 103493;
 HEAP16[$2 + 160 >> 1] = 12;
 HEAP32[$2 + 164 >> 2] = $2 + 274;
 HEAP32[$2 + 168 >> 2] = 101992;
 HEAP16[$2 + 172 >> 1] = 12;
 HEAP32[$2 + 176 >> 2] = $2 + 273;
 HEAP32[$2 + 180 >> 2] = 97511;
 HEAP16[$2 + 184 >> 1] = 12;
 HEAP32[$2 + 188 >> 2] = $2 + 272;
 HEAP32[$2 + 192 >> 2] = 104349;
 HEAP16[$2 + 196 >> 1] = 12;
 HEAP32[$2 + 200 >> 2] = $2 + 271;
 HEAP32[$2 + 204 >> 2] = 97461;
 HEAP16[$2 + 208 >> 1] = 10;
 HEAP32[$2 + 212 >> 2] = 343204;
 HEAP32[$2 + 216 >> 2] = 97445;
 HEAP16[$2 + 220 >> 1] = 10;
 HEAP32[$2 + 224 >> 2] = 343192;
 HEAP32[$2 + 228 >> 2] = 97428;
 HEAP16[$2 + 232 >> 1] = 10;
 HEAP32[$2 + 236 >> 2] = 343200;
 HEAP32[$2 + 240 >> 2] = 97473;
 HEAP16[$2 + 244 >> 1] = 10;
 HEAP32[$2 + 248 >> 2] = 343248;
 label$1: {
  if (HEAP8[$2 + 279 | 0] & 1) {
   HEAP32[$2 + 284 >> 2] = jsvCreateConfigObject($2, 21);
   break label$1;
  }
  if (jsvReadConfigObject(HEAP32[$2 + 280 >> 2], $2, 21) & 1) {
   HEAP32[85796] = HEAP32[85796] & -3 | (HEAP8[$2 + 278 | 0] & 1 ? 2 : 0);
   HEAP32[85796] = HEAP32[85796] & -5 | (HEAP8[$2 + 277 | 0] & 1 ? 4 : 0);
   HEAP32[85796] = HEAP32[85796] & -9 | (HEAP8[$2 + 276 | 0] & 1 ? 8 : 0);
   HEAP32[85796] = HEAP32[85796] & -2 | HEAP8[$2 + 275 | 0] & 1;
   HEAP32[85796] = HEAP32[85796] & -17 | (HEAP8[$2 + 274 | 0] & 1 ? 16 : 0);
   HEAP32[85796] = HEAP32[85796] & -33 | (HEAP8[$2 + 273 | 0] & 1 ? 32 : 0);
   HEAP32[85796] = HEAP32[85796] & -65 | (HEAP8[$2 + 272 | 0] & 1 ? 64 : 0);
   HEAP32[85796] = HEAP32[85796] & -2049 | (HEAP8[$2 + 271 | 0] & 1 ? 2048 : 0);
   if (HEAP32[85801] < 0) {
    HEAP32[85801] = 0;
   }
   if (HEAP32[85798] < 0) {
    HEAP32[85798] = 0;
   }
   if (HEAP32[85800] < 0) {
    HEAP32[85800] = 0;
   }
   HEAP16[76919] = int_sqrt32(HEAP32[$2 + 256 >> 2]);
   HEAP16[76920] = int_sqrt32(HEAP32[$2 + 252 >> 2]);
  }
  HEAP32[$2 + 284 >> 2] = 0;
 }
 __stack_pointer = $2 + 288 | 0;
 return HEAP32[$2 + 284 >> 2];
}

function _jswrap_drawImageLayerInit($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 44 >> 2] = $0;
 HEAP32[HEAP32[$1 + 44 >> 2] + 156 >> 2] = HEAP32[HEAP32[$1 + 44 >> 2] + 36 >> 2] << 8;
 HEAP32[HEAP32[$1 + 44 >> 2] + 160 >> 2] = HEAP32[HEAP32[$1 + 44 >> 2] + 40 >> 2] << 8;
 HEAPF64[$1 + 32 >> 3] = jswrap_math_cos(HEAPF64[HEAP32[$1 + 44 >> 2] + 16 >> 3]);
 HEAPF64[$1 + 24 >> 3] = jswrap_math_sin(HEAPF64[HEAP32[$1 + 44 >> 2] + 16 >> 3]);
 $3 = HEAP32[$1 + 44 >> 2];
 $2 = HEAPF64[$1 + 32 >> 3] / HEAPF64[HEAP32[$1 + 44 >> 2] + 24 >> 3] * 256 + .5;
 label$1: {
  if (Math_abs($2) < 2147483648) {
   $0 = ~~$2;
   break label$1;
  }
  $0 = -2147483648;
 }
 HEAP32[$3 + 164 >> 2] = $0;
 $3 = HEAP32[$1 + 44 >> 2];
 $2 = HEAPF64[$1 + 24 >> 3] / HEAPF64[HEAP32[$1 + 44 >> 2] + 24 >> 3] * 256 + .5;
 label$3: {
  if (Math_abs($2) < 2147483648) {
   $0 = ~~$2;
   break label$3;
  }
  $0 = -2147483648;
 }
 HEAP32[$3 + 168 >> 2] = $0;
 $2 = HEAPF64[HEAP32[$1 + 44 >> 2] + 24 >> 3] * (+HEAP32[HEAP32[$1 + 44 >> 2] + 36 >> 2] * Math_abs(HEAPF64[$1 + 32 >> 3]) + +HEAP32[HEAP32[$1 + 44 >> 2] + 40 >> 2] * Math_abs(HEAPF64[$1 + 24 >> 3])) + .5;
 label$5: {
  if (Math_abs($2) < 2147483648) {
   $0 = ~~$2;
   break label$5;
  }
  $0 = -2147483648;
 }
 HEAP32[$1 + 20 >> 2] = $0;
 $2 = HEAPF64[HEAP32[$1 + 44 >> 2] + 24 >> 3] * (+HEAP32[HEAP32[$1 + 44 >> 2] + 36 >> 2] * Math_abs(HEAPF64[$1 + 24 >> 3]) + +HEAP32[HEAP32[$1 + 44 >> 2] + 40 >> 2] * Math_abs(HEAPF64[$1 + 32 >> 3])) + .5;
 label$7: {
  if (Math_abs($2) < 2147483648) {
   $0 = ~~$2;
   break label$7;
  }
  $0 = -2147483648;
 }
 HEAP32[$1 + 16 >> 2] = $0;
 if (HEAP8[HEAP32[$1 + 44 >> 2] + 32 | 0] & 1) {
  $0 = HEAP32[$1 + 44 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] - (HEAP32[$1 + 20 >> 2] << 7);
  $0 = HEAP32[$1 + 44 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] - (HEAP32[$1 + 16 >> 2] << 7);
 }
 HEAP32[HEAP32[$1 + 44 >> 2] + 8 >> 2] = HEAP32[HEAP32[$1 + 44 >> 2] >> 2] + (HEAP32[$1 + 20 >> 2] << 8);
 HEAP32[HEAP32[$1 + 44 >> 2] + 12 >> 2] = HEAP32[HEAP32[$1 + 44 >> 2] + 4 >> 2] + (HEAP32[$1 + 16 >> 2] << 8);
 HEAP32[$1 + 12 >> 2] = HEAP32[HEAP32[$1 + 44 >> 2] + 36 >> 2] << 7;
 HEAP32[$1 + 8 >> 2] = HEAP32[HEAP32[$1 + 44 >> 2] + 40 >> 2] << 7;
 HEAP32[HEAP32[$1 + 44 >> 2] + 172 >> 2] = HEAP32[$1 + 12 >> 2] - (((Math_imul(HEAP32[HEAP32[$1 + 44 >> 2] + 164 >> 2], HEAP32[$1 + 20 >> 2]) + 1 | 0) + Math_imul(HEAP32[HEAP32[$1 + 44 >> 2] + 168 >> 2], HEAP32[$1 + 16 >> 2]) | 0) / 2 | 0);
 HEAP32[HEAP32[$1 + 44 >> 2] + 176 >> 2] = HEAP32[$1 + 8 >> 2] - (((Math_imul(HEAP32[HEAP32[$1 + 44 >> 2] + 164 >> 2], HEAP32[$1 + 16 >> 2]) + 1 | 0) - Math_imul(HEAP32[HEAP32[$1 + 44 >> 2] + 168 >> 2], HEAP32[$1 + 20 >> 2]) | 0) / 2 | 0);
 if (HEAP8[HEAP32[$1 + 44 >> 2] + 33 | 0] & 1) {
  while (1) {
   if (HEAP32[HEAP32[$1 + 44 >> 2] + 172 >> 2] < 0) {
    $0 = HEAP32[$1 + 44 >> 2];
    HEAP32[$0 + 172 >> 2] = HEAP32[HEAP32[$1 + 44 >> 2] + 156 >> 2] + HEAP32[$0 + 172 >> 2];
    continue;
   }
   break;
  }
  while (1) {
   if (HEAP32[HEAP32[$1 + 44 >> 2] + 172 >> 2] >= HEAP32[HEAP32[$1 + 44 >> 2] + 156 >> 2]) {
    $0 = HEAP32[$1 + 44 >> 2];
    HEAP32[$0 + 172 >> 2] = HEAP32[$0 + 172 >> 2] - HEAP32[HEAP32[$1 + 44 >> 2] + 156 >> 2];
    continue;
   }
   break;
  }
  while (1) {
   if (HEAP32[HEAP32[$1 + 44 >> 2] + 176 >> 2] < 0) {
    $0 = HEAP32[$1 + 44 >> 2];
    HEAP32[$0 + 176 >> 2] = HEAP32[HEAP32[$1 + 44 >> 2] + 160 >> 2] + HEAP32[$0 + 176 >> 2];
    continue;
   }
   break;
  }
  while (1) {
   if (HEAP32[HEAP32[$1 + 44 >> 2] + 176 >> 2] >= HEAP32[HEAP32[$1 + 44 >> 2] + 160 >> 2]) {
    $0 = HEAP32[$1 + 44 >> 2];
    HEAP32[$0 + 176 >> 2] = HEAP32[$0 + 176 >> 2] - HEAP32[HEAP32[$1 + 44 >> 2] + 160 >> 2];
    continue;
   }
   break;
  }
 }
 __stack_pointer = $1 + 48 | 0;
}

function tflite__ops__micro__conv__EvalQuantized_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteConvParams__2c_20tflite__ops__micro__conv__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__2c_20TfLiteEvalTensor__2c_20TfLiteEvalTensor__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 var $10 = 0;
 $10 = __stack_pointer - 240 | 0;
 __stack_pointer = $10;
 HEAP32[$10 + 236 >> 2] = $0;
 HEAP32[$10 + 232 >> 2] = $1;
 HEAP32[$10 + 228 >> 2] = $2;
 HEAP32[$10 + 224 >> 2] = $3;
 HEAP32[$10 + 220 >> 2] = $4;
 HEAP32[$10 + 216 >> 2] = $5;
 HEAP32[$10 + 212 >> 2] = $6;
 HEAP32[$10 + 208 >> 2] = $7;
 HEAP32[$10 + 204 >> 2] = $8;
 HEAP32[$10 + 200 >> 2] = $9;
 HEAP32[$10 + 196 >> 2] = 0 - HEAP32[HEAP32[$10 + 224 >> 2] + 16 >> 2];
 HEAP32[$10 + 192 >> 2] = 0 - HEAP32[HEAP32[$10 + 224 >> 2] + 20 >> 2];
 HEAP32[$10 + 188 >> 2] = HEAP32[HEAP32[$10 + 224 >> 2] + 24 >> 2];
 HEAP8[$10 + 128 | 0] = tflite__ops__micro__conv__RuntimePaddingType_28TfLitePadding_29(HEAP32[HEAP32[$10 + 228 >> 2] >> 2]);
 HEAP16[$10 + 130 >> 1] = HEAP32[HEAP32[$10 + 224 >> 2] >> 2];
 HEAP16[$10 + 132 >> 1] = HEAP32[HEAP32[$10 + 224 >> 2] + 4 >> 2];
 HEAP16[$10 + 138 >> 1] = HEAP32[HEAP32[$10 + 228 >> 2] + 4 >> 2];
 HEAP16[$10 + 140 >> 1] = HEAP32[HEAP32[$10 + 228 >> 2] + 8 >> 2];
 HEAP16[$10 + 142 >> 1] = HEAP32[HEAP32[$10 + 228 >> 2] + 16 >> 2];
 HEAP16[$10 + 144 >> 1] = HEAP32[HEAP32[$10 + 228 >> 2] + 20 >> 2];
 HEAP32[$10 + 148 >> 2] = HEAP32[$10 + 196 >> 2];
 HEAP32[$10 + 152 >> 2] = HEAP32[$10 + 192 >> 2];
 HEAP32[$10 + 156 >> 2] = HEAP32[$10 + 188 >> 2];
 HEAP32[$10 + 160 >> 2] = HEAP32[HEAP32[$10 + 224 >> 2] + 28 >> 2];
 HEAP32[$10 + 164 >> 2] = 0 - HEAP32[HEAP32[$10 + 224 >> 2] + 32 >> 2];
 HEAP32[$10 + 168 >> 2] = HEAP32[HEAP32[$10 + 224 >> 2] + 44 >> 2];
 HEAP32[$10 + 172 >> 2] = HEAP32[HEAP32[$10 + 224 >> 2] + 48 >> 2];
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($10 + 104 | 0, HEAP32[$10 + 220 >> 2]);
 $0 = unsigned_20char_20const__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor_20const__29(HEAP32[$10 + 220 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($10 + 80 | 0, HEAP32[$10 + 216 >> 2]);
 $1 = unsigned_20char_20const__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor_20const__29(HEAP32[$10 + 216 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($10 + 56 | 0, HEAP32[$10 + 212 >> 2]);
 $2 = int_20const__20tflite__micro__GetTensorData_int__28TfLiteEvalTensor_20const__29(HEAP32[$10 + 212 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($10 + 32 | 0, HEAP32[$10 + 200 >> 2]);
 $3 = unsigned_20char__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor__29(HEAP32[$10 + 200 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($10 + 8 | 0, HEAP32[$10 + 208 >> 2]);
 tflite__reference_ops__Conv_28tflite__ConvParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__2c_20void__29($10 + 128 | 0, $10 + 104 | 0, $0, $10 + 80 | 0, $1, $10 + 56 | 0, $2, $10 + 32 | 0, $3, $10 + 8 | 0, unsigned_20char__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor__29(HEAP32[$10 + 208 >> 2]), 0);
 tflite__RuntimeShape___RuntimeShape_28_29($10 + 8 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($10 + 32 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($10 + 56 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($10 + 80 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($10 + 104 | 0);
 __stack_pointer = $10 + 240 | 0;
}

function stringToFloatWithRadix($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer + -64 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 52 >> 2] = $0;
 HEAP32[$3 + 48 >> 2] = $1;
 HEAP32[$3 + 44 >> 2] = $2;
 while (1) {
  if (isWhitespace(HEAP8[HEAP32[$3 + 52 >> 2]]) & 1) {
   HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 52 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP8[$3 + 43 | 0] = 0;
 label$3: {
  if (HEAP8[HEAP32[$3 + 52 >> 2]] == 45) {
   HEAP8[$3 + 43 | 0] = 1;
   HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 52 >> 2] + 1;
   break label$3;
  }
  if (HEAP8[HEAP32[$3 + 52 >> 2]] == 43) {
   HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 52 >> 2] + 1;
  }
 }
 HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 52 >> 2];
 if (HEAP32[$3 + 44 >> 2]) {
  HEAP32[HEAP32[$3 + 44 >> 2] >> 2] = HEAP32[$3 + 52 >> 2];
 }
 if (HEAP32[$3 + 48 >> 2]) {
  $0 = HEAP32[$3 + 48 >> 2];
 } else {
  $0 = getRadix($3 + 52 | 0);
 }
 HEAP32[$3 + 32 >> 2] = $0;
 label$9: {
  if (!HEAP32[$3 + 32 >> 2]) {
   HEAPF64[$3 + 56 >> 3] = nan;
   break label$9;
  }
  HEAPF64[$3 + 24 >> 3] = 0;
  HEAPF64[$3 + 16 >> 3] = .1;
  while (1) {
   label$12: {
    if (!HEAPU8[HEAP32[$3 + 52 >> 2]]) {
     break label$12;
    }
    HEAP32[$3 + 12 >> 2] = chtod(HEAP8[HEAP32[$3 + 52 >> 2]]);
    if (HEAP32[$3 + 12 >> 2] < 0 | HEAP32[$3 + 12 >> 2] >= HEAP32[$3 + 32 >> 2]) {
     break label$12;
    }
    HEAPF64[$3 + 24 >> 3] = HEAPF64[$3 + 24 >> 3] * +HEAP32[$3 + 32 >> 2] + +HEAP32[$3 + 12 >> 2];
    HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 52 >> 2] + 1;
    continue;
   }
   break;
  }
  if (HEAP32[$3 + 32 >> 2] == 10) {
   if (HEAP8[HEAP32[$3 + 52 >> 2]] == 46) {
    HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 52 >> 2] + 1;
    while (1) {
     if (!(!HEAPU8[HEAP32[$3 + 52 >> 2]] | HEAP8[HEAP32[$3 + 52 >> 2]] < 48 | HEAP8[HEAP32[$3 + 52 >> 2]] > 57)) {
      HEAPF64[$3 + 24 >> 3] = HEAPF64[$3 + 16 >> 3] * +(HEAP8[HEAP32[$3 + 52 >> 2]] - 48 | 0) + HEAPF64[$3 + 24 >> 3];
      HEAPF64[$3 + 16 >> 3] = HEAPF64[$3 + 16 >> 3] / 10;
      HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 52 >> 2] + 1;
      continue;
     }
     break;
    }
   }
   if (!(HEAP8[HEAP32[$3 + 52 >> 2]] != 101 & HEAP8[HEAP32[$3 + 52 >> 2]] != 69)) {
    HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 52 >> 2] + 1;
    HEAP8[$3 + 11 | 0] = 0;
    if (!(HEAP8[HEAP32[$3 + 52 >> 2]] != 45 & HEAP8[HEAP32[$3 + 52 >> 2]] != 43)) {
     HEAP8[$3 + 11 | 0] = HEAP8[HEAP32[$3 + 52 >> 2]] == 45;
     HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 52 >> 2] + 1;
    }
    HEAP32[$3 + 4 >> 2] = 0;
    while (1) {
     if (!(!HEAPU8[HEAP32[$3 + 52 >> 2]] | HEAP8[HEAP32[$3 + 52 >> 2]] < 48 | HEAP8[HEAP32[$3 + 52 >> 2]] > 57)) {
      HEAP32[$3 + 4 >> 2] = (HEAP8[HEAP32[$3 + 52 >> 2]] - 48 | 0) + Math_imul(HEAP32[$3 + 4 >> 2], 10);
      HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 52 >> 2] + 1;
      continue;
     }
     break;
    }
    if (HEAP8[$3 + 11 | 0] & 1) {
     HEAP32[$3 + 4 >> 2] = 0 - HEAP32[$3 + 4 >> 2];
    }
    while (1) {
     if (HEAP32[$3 + 4 >> 2] > 0) {
      HEAPF64[$3 + 24 >> 3] = HEAPF64[$3 + 24 >> 3] * 10;
      HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] - 1;
      continue;
     }
     break;
    }
    while (1) {
     if (HEAP32[$3 + 4 >> 2] < 0) {
      HEAPF64[$3 + 24 >> 3] = HEAPF64[$3 + 24 >> 3] / 10;
      HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
      continue;
     }
     break;
    }
   }
  }
  if (HEAP32[$3 + 44 >> 2]) {
   HEAP32[HEAP32[$3 + 44 >> 2] >> 2] = HEAP32[$3 + 52 >> 2];
  }
  if (!((HEAP8[HEAP32[$3 + 36 >> 2]] != 46 | HEAP32[$3 + 52 >> 2] != (HEAP32[$3 + 36 >> 2] + 1 | 0)) & HEAP32[$3 + 36 >> 2] != HEAP32[$3 + 52 >> 2])) {
   HEAPF64[$3 + 56 >> 3] = nan;
   break label$9;
  }
  if (HEAP8[$3 + 43 | 0] & 1) {
   HEAPF64[$3 + 56 >> 3] = -HEAPF64[$3 + 24 >> 3];
   break label$9;
  }
  HEAPF64[$3 + 56 >> 3] = HEAPF64[$3 + 24 >> 3];
 }
 __stack_pointer = $3 - -64 | 0;
 return HEAPF64[$3 + 56 >> 3];
}

function jshPinFunctionToString($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP16[$4 + 46 >> 1] = $0;
 HEAP32[$4 + 40 >> 2] = $1;
 HEAP32[$4 + 36 >> 2] = $2;
 HEAP32[$4 + 32 >> 2] = $3;
 HEAP32[$4 + 28 >> 2] = 129588;
 HEAP16[$4 + 26 >> 1] = HEAPU16[$4 + 46 >> 1] & 61440;
 HEAP16[$4 + 24 >> 1] = 0;
 HEAP32[$4 + 20 >> 2] = 0;
 HEAP8[HEAP32[$4 + 36 >> 2]] = 0;
 label$1: {
  if (!((HEAPU16[$4 + 46 >> 1] & 4080) >>> 0 < 768 | (HEAPU16[$4 + 46 >> 1] & 4080) >>> 0 > 848)) {
   HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 40 >> 2] & 16 ? 103067 : 108627;
   HEAP16[$4 + 24 >> 1] = 768;
   label$3: {
    if (!HEAPU16[$4 + 26 >> 1]) {
     HEAP32[$4 + 20 >> 2] = 108492;
     break label$3;
    }
    label$5: {
     if (HEAPU16[$4 + 26 >> 1] == 4096) {
      HEAP32[$4 + 20 >> 2] = 108408;
      break label$5;
     }
     if (HEAPU16[$4 + 26 >> 1] == 8192) {
      HEAP32[$4 + 20 >> 2] = 109447;
     }
    }
   }
   break label$1;
  }
  label$8: {
   if (!((HEAPU16[$4 + 46 >> 1] & 4080) >>> 0 < 512 | (HEAPU16[$4 + 46 >> 1] & 4080) >>> 0 > 544)) {
    HEAP32[$4 + 28 >> 2] = 109547;
    HEAP16[$4 + 24 >> 1] = 512;
    label$10: {
     if (!HEAPU16[$4 + 26 >> 1]) {
      HEAP32[$4 + 20 >> 2] = 108985;
      break label$10;
     }
     label$12: {
      if (HEAPU16[$4 + 26 >> 1] == 4096) {
       HEAP32[$4 + 20 >> 2] = 109454;
       break label$12;
      }
      if (HEAPU16[$4 + 26 >> 1] == 8192) {
       HEAP32[$4 + 20 >> 2] = 109430;
      }
     }
    }
    break label$8;
   }
   label$15: {
    if (!((HEAPU16[$4 + 46 >> 1] & 4080) >>> 0 < 640 | (HEAPU16[$4 + 46 >> 1] & 4080) >>> 0 > 688)) {
     HEAP32[$4 + 28 >> 2] = 110122;
     HEAP16[$4 + 24 >> 1] = 640;
     label$17: {
      if (!HEAPU16[$4 + 26 >> 1]) {
       HEAP32[$4 + 20 >> 2] = 109351;
       break label$17;
      }
      if (HEAPU16[$4 + 26 >> 1] == 4096) {
       HEAP32[$4 + 20 >> 2] = 110167;
      }
     }
     break label$15;
    }
    label$20: {
     if ((HEAPU16[$4 + 46 >> 1] & 4080) == 384) {
      HEAP32[$4 + 28 >> 2] = 110118;
      HEAP16[$4 + 24 >> 1] = 384;
      label$22: {
       if (!HEAPU16[$4 + 26 >> 1]) {
        HEAP32[$4 + 20 >> 2] = 111203;
        break label$22;
       }
       if (HEAPU16[$4 + 26 >> 1] == 4096) {
        HEAP32[$4 + 20 >> 2] = 110944;
       }
      }
      break label$20;
     }
     if (!((HEAPU16[$4 + 46 >> 1] & 4080) >>> 0 < 16 | (HEAPU16[$4 + 46 >> 1] & 4080) >>> 0 > 288)) {
      HEAP32[$4 + 28 >> 2] = 109282;
      HEAP16[$4 + 24 >> 1] = 16;
      HEAP32[$4 + 20 >> 2] = $4 + 15;
      HEAP8[$4 + 15 | 0] = 67;
      HEAP8[$4 + 16 | 0] = 72;
      HEAP8[$4 + 17 | 0] = ((HEAPU16[$4 + 26 >> 1] & 28672) >>> 12 | 0) + 49;
      label$26: {
       if (HEAPU16[$4 + 26 >> 1] & 32768) {
        HEAP8[$4 + 18 | 0] = 78;
        HEAP8[$4 + 19 | 0] = 0;
        break label$26;
       }
       HEAP8[$4 + 18 | 0] = 0;
      }
     }
    }
   }
  }
 }
 HEAP32[$4 + 8 >> 2] = ((HEAPU16[$4 + 46 >> 1] & 4080) - HEAPU16[$4 + 24 >> 1] >> 4) + 1;
 label$28: {
  if (!HEAP32[$4 + 28 >> 2]) {
   HEAP32[$4 >> 2] = HEAPU16[$4 + 46 >> 1];
   jsiConsolePrintf(128513, $4);
   break label$28;
  }
  if (HEAP32[$4 + 40 >> 2] & 1) {
   strncat(HEAP32[$4 + 36 >> 2], HEAP32[$4 + 28 >> 2], HEAP32[$4 + 32 >> 2] - 1 | 0);
  }
  if (HEAP32[$4 + 40 >> 2] & 2) {
   itostr_2(HEAP32[$4 + 8 >> 2], HEAP32[$4 + 36 >> 2] + strlen(HEAP32[$4 + 36 >> 2]) | 0, 10);
  }
  if (HEAP32[$4 + 40 >> 2] & 4) {
   strncat(HEAP32[$4 + 36 >> 2], 127850, HEAP32[$4 + 32 >> 2] - (strlen(HEAP32[$4 + 36 >> 2]) + 1 | 0) | 0);
  }
  if (!HEAP32[$4 + 20 >> 2] | !(HEAP32[$4 + 40 >> 2] & 8)) {
   break label$28;
  }
  strncat(HEAP32[$4 + 36 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 32 >> 2] - (strlen(HEAP32[$4 + 36 >> 2]) + 1 | 0) | 0);
 }
 __stack_pointer = $4 + 48 | 0;
}

function jsvAsString($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 112 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 108 >> 2] = $0;
 HEAP32[$1 + 104 >> 2] = 0;
 label$1: {
  label$2: {
   if (!(jsvHasCharacterData(HEAP32[$1 + 108 >> 2]) & 1)) {
    break label$2;
   }
   if (!(jsvIsName(HEAP32[$1 + 108 >> 2]) & 1)) {
    break label$2;
   }
   HEAP32[$1 + 104 >> 2] = jsvNewFromStringVarComplete(HEAP32[$1 + 108 >> 2]);
   break label$1;
  }
  label$3: {
   if (jsvIsString(HEAP32[$1 + 108 >> 2]) & 1) {
    HEAP32[$1 + 104 >> 2] = jsvLockAgain(HEAP32[$1 + 108 >> 2]);
    break label$3;
   }
   label$5: {
    if (jsvIsObject(HEAP32[$1 + 108 >> 2]) & 1) {
     HEAP32[$1 + 100 >> 2] = jspGetNamedField(HEAP32[$1 + 108 >> 2], 103729, 0);
     label$7: {
      label$8: {
       if (!HEAP32[$1 + 100 >> 2]) {
        break label$8;
       }
       $0 = HEAP32[$1 + 100 >> 2];
       if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 1) {
        break label$8;
       }
       HEAP32[$1 + 96 >> 2] = jspExecuteFunction(HEAP32[$1 + 100 >> 2], HEAP32[$1 + 108 >> 2], 0, 0);
       jsvUnLock(HEAP32[$1 + 100 >> 2]);
       HEAP32[$1 + 104 >> 2] = jsvAsStringAndUnLock(HEAP32[$1 + 96 >> 2]);
       break label$7;
      }
      jsvUnLock(HEAP32[$1 + 100 >> 2]);
      HEAP32[$1 + 104 >> 2] = jsvNewFromString(107933);
     }
     break label$5;
    }
    HEAP32[$1 + 92 >> 2] = jsvGetConstString(HEAP32[$1 + 108 >> 2]);
    label$9: {
     if (HEAP32[$1 + 92 >> 2]) {
      HEAP32[$1 + 104 >> 2] = jsvNewFromString(HEAP32[$1 + 92 >> 2]);
      break label$9;
     }
     label$11: {
      if (jsvIsPin(HEAP32[$1 + 108 >> 2]) & 1) {
       $0 = HEAP32[$1 + 108 >> 2];
       jshGetPinString($1 + 16 | 0, (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) & 255);
       HEAP32[$1 + 104 >> 2] = jsvNewFromString($1 + 16 | 0);
       break label$11;
      }
      label$13: {
       if (jsvIsInt(HEAP32[$1 + 108 >> 2]) & 1) {
        $0 = HEAP32[$1 + 108 >> 2];
        itostr(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), $1 + 16 | 0, 10);
        HEAP32[$1 + 104 >> 2] = jsvNewFromString($1 + 16 | 0);
        break label$13;
       }
       label$15: {
        if (jsvIsFloat(HEAP32[$1 + 108 >> 2]) & 1) {
         $0 = HEAP32[$1 + 108 >> 2];
         $2 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
         wasm2js_scratch_store_i32(0, HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24));
         wasm2js_scratch_store_i32(1, $2 | 0);
         ftoa_bounded(+wasm2js_scratch_load_f64(), $1 + 16 | 0, 70);
         HEAP32[$1 + 104 >> 2] = jsvNewFromString($1 + 16 | 0);
         break label$15;
        }
        label$17: {
         label$18: {
          if (!(jsvIsArray(HEAP32[$1 + 108 >> 2]) & 1)) {
           if (!(jsvIsArrayBuffer(HEAP32[$1 + 108 >> 2]) & 1)) {
            break label$18;
           }
          }
          HEAP32[$1 + 12 >> 2] = jsvNewFromString(112648);
          HEAP32[$1 + 104 >> 2] = jsvArrayJoin(HEAP32[$1 + 108 >> 2], HEAP32[$1 + 12 >> 2], 1);
          jsvUnLock(HEAP32[$1 + 12 >> 2]);
          break label$17;
         }
         label$20: {
          if (jsvIsFunction(HEAP32[$1 + 108 >> 2]) & 1) {
           HEAP32[$1 + 104 >> 2] = jsvNewFromEmptyString_1();
           if (HEAP32[$1 + 104 >> 2]) {
            jsfGetJSON(HEAP32[$1 + 108 >> 2], HEAP32[$1 + 104 >> 2], 0);
           }
           break label$20;
          }
          jsExceptionHere(4, 103685, 0);
         }
        }
       }
      }
     }
    }
   }
  }
 }
 __stack_pointer = $1 + 112 | 0;
 return HEAP32[$1 + 104 >> 2];
}

function jspeStatementSwitch() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 48 | 0;
 __stack_pointer = $0;
 jslGetNextToken();
 label$1: {
  if (!(jslMatch(40) & 1)) {
   break label$1;
  }
  HEAP32[$0 + 40 >> 2] = jspeExpression();
  HEAP32[$0 + 36 >> 2] = HEAP32[46755] & 512;
  HEAP32[$0 + 32 >> 2] = HEAP32[46755];
  HEAP8[$0 + 31 | 0] = (HEAP32[46755] & 63) == 1;
  if (!(jslMatch(41) & 1)) {
   jsvUnLock(HEAP32[$0 + 40 >> 2]);
   break label$1;
  }
  if (!(HEAP8[$0 + 31 | 0] & 1)) {
   jsvUnLock(HEAP32[$0 + 40 >> 2]);
   jspeBlock();
   break label$1;
  }
  if (!(jslMatch(123) & 1)) {
   jsvUnLock(HEAP32[$0 + 40 >> 2]);
   break label$1;
  }
  HEAP8[$0 + 30 | 0] = 1;
  if (HEAP8[$0 + 31 | 0] & 1) {
   HEAP32[46755] = HEAP32[$0 + 36 >> 2] | 1024;
  }
  while (1) {
   if (HEAP16[HEAP32[38615] + 2 >> 1] == 188) {
    HEAP32[$0 + 24 >> 2] = HEAP32[46755];
    if (HEAP8[$0 + 31 | 0] & 1) {
     HEAP32[46755] = HEAP32[$0 + 36 >> 2] | 1025;
    }
    if (!(jslMatch(188) & 1)) {
     jsvUnLock(HEAP32[$0 + 40 >> 2]);
     break label$1;
    }
    HEAP32[$0 + 20 >> 2] = jspeAssignmentExpression();
    HEAP32[46755] = HEAP32[$0 + 24 >> 2] | 1024;
    if (!(jslMatch(58) & 1)) {
     jsvUnLock2(HEAP32[$0 + 40 >> 2], HEAP32[$0 + 20 >> 2]);
     break label$1;
    }
    HEAP8[$0 + 19 | 0] = 0;
    if (HEAP8[$0 + 31 | 0] & 1) {
     HEAP8[$0 + 19 | 0] = jsvGetBoolAndUnLock(jsvMathsOpSkipNames(HEAP32[$0 + 40 >> 2], HEAP32[$0 + 20 >> 2], 139)) & 1;
    }
    if (HEAP8[$0 + 19 | 0] & 1) {
     HEAP8[$0 + 30 | 0] = 0;
    }
    jsvUnLock(HEAP32[$0 + 20 >> 2]);
    if (!(!(HEAP8[$0 + 19 | 0] & 1) | HEAP32[46755] & 63)) {
     HEAP32[46755] = HEAP32[$0 + 36 >> 2] | 1025;
    }
    while (1) {
     $1 = 0;
     label$16: {
      if (HEAP32[46755] & 80) {
       break label$16;
      }
      $1 = 0;
      if (!HEAP16[HEAP32[38615] + 2 >> 1]) {
       break label$16;
      }
      $1 = 0;
      if (HEAP16[HEAP32[38615] + 2 >> 1] == 188) {
       break label$16;
      }
      $1 = 0;
      if (HEAP16[HEAP32[38615] + 2 >> 1] == 189) {
       break label$16;
      }
      $1 = HEAP16[HEAP32[38615] + 2 >> 1] != 125;
     }
     if ($1) {
      jsvUnLock(jspeBlockOrStatement());
      continue;
     }
     break;
    }
    HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 32 >> 2] | HEAP32[46755] & 124;
    continue;
   }
   break;
  }
  jsvUnLock(HEAP32[$0 + 40 >> 2]);
  label$18: {
   if (!(!(HEAP8[$0 + 31 | 0] & 1) | (HEAP32[46755] & 63) != 2)) {
    HEAP32[46755] = HEAP32[$0 + 36 >> 2] | 1025;
    break label$18;
   }
   HEAP8[$0 + 30 | 0] = 1;
  }
  HEAP32[46755] = HEAP32[46755] & -1664 | HEAP32[$0 + 32 >> 2] & 1663;
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 189) {
   jslGetNextToken();
   if (!(jslMatch(58) & 1)) {
    break label$1;
   }
   HEAP32[$0 + 12 >> 2] = HEAP32[46755];
   label$22: {
    if (!(HEAP8[$0 + 30 | 0] & 1)) {
     jspSetNoExecute();
     break label$22;
    }
    HEAP32[46755] = HEAP32[46755] | 1024;
   }
   while (1) {
    $1 = 0;
    label$25: {
     if (HEAP32[46755] & 80) {
      break label$25;
     }
     $1 = 0;
     if (!HEAP16[HEAP32[38615] + 2 >> 1]) {
      break label$25;
     }
     $1 = 0;
     if (HEAP16[HEAP32[38615] + 2 >> 1] == 125) {
      break label$25;
     }
     $1 = HEAP16[HEAP32[38615] + 2 >> 1] != 188;
    }
    if ($1) {
     jsvUnLock(jspeBlockOrStatement());
     continue;
    }
    break;
   }
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] | HEAP32[46755] & 124;
   HEAP32[46755] = HEAP32[46755] & -3;
   HEAP32[46755] = HEAP32[46755] & -1664 | HEAP32[$0 + 12 >> 2] & 1663;
  }
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 188) {
   jsExceptionHere(2, 105976, 0);
   break label$1;
  }
  jslMatch(125);
 }
 HEAP32[$0 + 44 >> 2] = 0;
 __stack_pointer = $0 + 48 | 0;
 return HEAP32[$0 + 44 >> 2];
}

function _jswrap_drawImageSimple($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer + -64 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 60 >> 2] = $0;
 HEAP32[$6 + 56 >> 2] = $1;
 HEAP32[$6 + 52 >> 2] = $2;
 HEAP32[$6 + 48 >> 2] = $3;
 HEAP32[$6 + 44 >> 2] = $4;
 HEAP8[$6 + 43 | 0] = $5;
 HEAP32[$6 + 36 >> 2] = 0;
 HEAP32[$6 + 32 >> 2] = 0;
 HEAP32[$6 + 28 >> 2] = HEAP32[$6 + 56 >> 2];
 HEAP32[$6 + 24 >> 2] = HEAP32[$6 + 52 >> 2];
 HEAP32[$6 + 20 >> 2] = (HEAP32[$6 + 56 >> 2] + HEAP32[HEAP32[$6 + 48 >> 2] >> 2] | 0) - 1;
 HEAP32[$6 + 16 >> 2] = (HEAP32[$6 + 52 >> 2] + HEAP32[HEAP32[$6 + 48 >> 2] + 4 >> 2] | 0) - 1;
 label$1: {
  if (!(jsvStringIteratorHasChar_12(HEAP32[$6 + 44 >> 2]) & 1)) {
   break label$1;
  }
  graphicsSetModifiedAndClip(HEAP32[$6 + 60 >> 2], $6 + 28 | 0, $6 + 24 | 0, $6 + 20 | 0, $6 + 16 | 0, 1);
  if (!(HEAP32[$6 + 16 >> 2] >= HEAP32[$6 + 24 >> 2] & HEAP32[$6 + 20 >> 2] >= HEAP32[$6 + 28 >> 2])) {
   if (HEAP8[$6 + 43 | 0] & 1) {
    HEAP32[$6 + 36 >> 2] = 0 - Math_imul(HEAP32[HEAP32[$6 + 48 >> 2] + 4 >> 2], Math_imul(HEAP32[HEAP32[$6 + 48 >> 2] >> 2], HEAP32[HEAP32[$6 + 48 >> 2] + 8 >> 2]));
    while (1) {
     if (HEAP32[$6 + 36 >> 2] < 0) {
      jsvStringIteratorNextUTF8(HEAP32[$6 + 44 >> 2]);
      HEAP32[$6 + 36 >> 2] = HEAP32[$6 + 36 >> 2] + 8;
      continue;
     }
     break;
    }
   }
   break label$1;
  }
  HEAP32[$6 + 36 >> 2] = 0 - Math_imul(HEAP32[HEAP32[$6 + 48 >> 2] >> 2], Math_imul(HEAP32[HEAP32[$6 + 48 >> 2] + 8 >> 2], HEAP32[$6 + 24 >> 2] - HEAP32[$6 + 52 >> 2] | 0));
  HEAP32[$6 + 12 >> 2] = graphicsGetSetPixelUnclippedFn(HEAP32[$6 + 60 >> 2], HEAP32[$6 + 56 >> 2], HEAP32[$6 + 24 >> 2], (HEAP32[$6 + 56 >> 2] + HEAP32[HEAP32[$6 + 48 >> 2] >> 2] | 0) - 1 | 0, HEAP32[$6 + 16 >> 2], 1);
  HEAP32[$6 + 8 >> 2] = HEAP32[$6 + 24 >> 2];
  while (1) {
   if (HEAP32[$6 + 8 >> 2] <= HEAP32[$6 + 16 >> 2]) {
    HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 56 >> 2];
    while (1) {
     if (HEAP32[$6 + 4 >> 2] < (HEAP32[$6 + 56 >> 2] + HEAP32[HEAP32[$6 + 48 >> 2] >> 2] | 0)) {
      while (1) {
       if (HEAP32[$6 + 36 >> 2] < HEAP32[HEAP32[$6 + 48 >> 2] + 8 >> 2]) {
        HEAP32[$6 + 32 >> 2] = HEAP32[$6 + 32 >> 2] << 8 | jsvStringIteratorGetUTF8CharAndNext(HEAP32[$6 + 44 >> 2]) & 255;
        HEAP32[$6 + 36 >> 2] = HEAP32[$6 + 36 >> 2] + 8;
        continue;
       }
       break;
      }
      HEAP32[$6 >> 2] = HEAP32[HEAP32[$6 + 48 >> 2] + 36 >> 2] & HEAP32[$6 + 32 >> 2] >>> HEAP32[$6 + 36 >> 2] - HEAP32[HEAP32[$6 + 48 >> 2] + 8 >> 2];
      HEAP32[$6 + 36 >> 2] = HEAP32[$6 + 36 >> 2] - HEAP32[HEAP32[$6 + 48 >> 2] + 8 >> 2];
      if (HEAP32[HEAP32[$6 + 48 >> 2] + 16 >> 2] != HEAP32[$6 >> 2]) {
       if (HEAP32[HEAP32[$6 + 48 >> 2] + 28 >> 2]) {
        HEAP32[$6 >> 2] = HEAPU16[HEAP32[HEAP32[$6 + 48 >> 2] + 28 >> 2] + ((HEAP32[$6 >> 2] & HEAP32[HEAP32[$6 + 48 >> 2] + 32 >> 2]) << 1) >> 1];
       }
       FUNCTION_TABLE[HEAP32[$6 + 12 >> 2]](HEAP32[$6 + 60 >> 2], HEAP32[$6 + 4 >> 2], HEAP32[$6 + 8 >> 2], HEAP32[$6 >> 2]);
      }
      HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 4 >> 2] + 1;
      continue;
     }
     break;
    }
    HEAP32[$6 + 8 >> 2] = HEAP32[$6 + 8 >> 2] + 1;
    continue;
   }
   break;
  }
  if (!(HEAP8[$6 + 43 | 0] & 1)) {
   break label$1;
  }
  HEAP32[$6 + 36 >> 2] = HEAP32[$6 + 36 >> 2] + (HEAP32[HEAP32[$6 + 48 >> 2] + 8 >> 2] - Math_imul(HEAP32[HEAP32[$6 + 48 >> 2] >> 2], Math_imul(HEAP32[HEAP32[$6 + 48 >> 2] + 8 >> 2], HEAP32[$6 + 52 >> 2] + HEAP32[HEAP32[$6 + 48 >> 2] + 4 >> 2] - (HEAP32[$6 + 16 >> 2] + 1) | 0)) | 0);
  while (1) {
   if (HEAP32[$6 + 36 >> 2] < 0) {
    jsvStringIteratorNextUTF8(HEAP32[$6 + 44 >> 2]);
    HEAP32[$6 + 36 >> 2] = HEAP32[$6 + 36 >> 2] + 8;
    continue;
   }
   break;
  }
 }
 __stack_pointer = $6 - -64 | 0;
}

function jswrap_graphics_transformVertices($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 320 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 312 >> 2] = $0;
 HEAP32[$3 + 308 >> 2] = $1;
 HEAP32[$3 + 304 >> 2] = $2;
 HEAP32[$3 + 300 >> 2] = jsvNewEmptyArray();
 label$1: {
  if (!HEAP32[$3 + 300 >> 2]) {
   HEAP32[$3 + 316 >> 2] = 0;
   break label$1;
  }
  if (!(jsvIsIterable(HEAP32[$3 + 308 >> 2]) & 1)) {
   HEAP32[$3 + 316 >> 2] = HEAP32[$3 + 300 >> 2];
   break label$1;
  }
  label$4: {
   if (jsvIsObject(HEAP32[$3 + 304 >> 2]) & 1) {
    HEAPF64[$3 + 232 >> 3] = 0;
    HEAPF64[$3 + 224 >> 3] = 0;
    HEAPF64[$3 + 216 >> 3] = 1;
    HEAPF64[$3 + 208 >> 3] = 0;
    HEAP32[$3 + 160 >> 2] = 96763;
    HEAP16[$3 + 164 >> 1] = 11;
    HEAP32[$3 + 168 >> 2] = $3 + 232;
    HEAP32[$3 + 172 >> 2] = 96676;
    HEAP16[$3 + 176 >> 1] = 11;
    HEAP32[$3 + 180 >> 2] = $3 + 224;
    HEAP32[$3 + 184 >> 2] = 105234;
    HEAP16[$3 + 188 >> 1] = 11;
    HEAP32[$3 + 192 >> 2] = $3 + 216;
    HEAP32[$3 + 196 >> 2] = 104634;
    HEAP16[$3 + 200 >> 1] = 11;
    HEAP32[$3 + 204 >> 2] = $3 + 208;
    if (!(jsvReadConfigObject(HEAP32[$3 + 304 >> 2], $3 + 160 | 0, 4) & 1)) {
     HEAP32[$3 + 316 >> 2] = HEAP32[$3 + 300 >> 2];
     break label$1;
    }
    HEAPF64[$3 + 152 >> 3] = 1;
    HEAPF64[$3 + 144 >> 3] = 0;
    if (HEAPF64[$3 + 208 >> 3] != 0) {
     HEAPF64[$3 + 152 >> 3] = jswrap_math_cos(HEAPF64[$3 + 208 >> 3]);
     HEAPF64[$3 + 144 >> 3] = jswrap_math_sin(HEAPF64[$3 + 208 >> 3]);
    }
    HEAPF64[$3 + 240 >> 3] = HEAPF64[$3 + 152 >> 3] * HEAPF64[$3 + 216 >> 3];
    HEAPF64[$3 + 256 >> 3] = -HEAPF64[$3 + 144 >> 3] * HEAPF64[$3 + 216 >> 3];
    HEAPF64[$3 + 272 >> 3] = HEAPF64[$3 + 232 >> 3];
    HEAPF64[$3 + 248 >> 3] = HEAPF64[$3 + 144 >> 3] * HEAPF64[$3 + 216 >> 3];
    HEAPF64[$3 + 264 >> 3] = HEAPF64[$3 + 152 >> 3] * HEAPF64[$3 + 216 >> 3];
    HEAPF64[$3 + 280 >> 3] = HEAPF64[$3 + 224 >> 3];
    break label$4;
   }
   label$8: {
    label$9: {
     if (!(jsvIsIterable(HEAP32[$3 + 304 >> 2]) & 1)) {
      break label$9;
     }
     if ((jsvGetLength(HEAP32[$3 + 304 >> 2]) | 0) != 6) {
      break label$9;
     }
     jsvIteratorNew($3 + 80 | 0, HEAP32[$3 + 304 >> 2], 1);
     HEAP32[$3 + 76 >> 2] = 0;
     while (1) {
      if (HEAP32[$3 + 76 >> 2] < 6) {
       $4 = jsvIteratorGetFloatValue($3 + 80 | 0);
       HEAPF64[($3 + 240 | 0) + (HEAP32[$3 + 76 >> 2] << 3) >> 3] = $4;
       jsvIteratorNext($3 + 80 | 0);
       HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] + 1;
       continue;
      }
      break;
     }
     jsvIteratorFree($3 + 80 | 0);
     break label$8;
    }
    jsExceptionHere(3, 97716, 0);
    HEAP32[$3 + 316 >> 2] = 0;
    break label$1;
   }
  }
  jsvIteratorNew($3 + 16 | 0, HEAP32[$3 + 308 >> 2], 1);
  while (1) {
   label$13: {
    if (!(jsvIteratorHasElement($3 + 16 | 0) & 1)) {
     break label$13;
    }
    HEAPF64[$3 + 8 >> 3] = jsvIteratorGetFloatValue($3 + 16 | 0);
    jsvIteratorNext($3 + 16 | 0);
    if (!(jsvIteratorHasElement($3 + 16 | 0) & 1)) {
     break label$13;
    }
    HEAPF64[$3 >> 3] = jsvIteratorGetFloatValue($3 + 16 | 0);
    jsvIteratorNext($3 + 16 | 0);
    jsvArrayPushAndUnLock(HEAP32[$3 + 300 >> 2], jsvNewFromFloat(HEAPF64[$3 + 240 >> 3] * HEAPF64[$3 + 8 >> 3] + HEAPF64[$3 + 256 >> 3] * HEAPF64[$3 >> 3] + HEAPF64[$3 + 272 >> 3]));
    jsvArrayPushAndUnLock(HEAP32[$3 + 300 >> 2], jsvNewFromFloat(HEAPF64[$3 + 248 >> 3] * HEAPF64[$3 + 8 >> 3] + HEAPF64[$3 + 264 >> 3] * HEAPF64[$3 >> 3] + HEAPF64[$3 + 280 >> 3]));
    continue;
   }
   break;
  }
  jsvIteratorFree($3 + 16 | 0);
  HEAP32[$3 + 316 >> 2] = HEAP32[$3 + 300 >> 2];
 }
 __stack_pointer = $3 + 320 | 0;
 return HEAP32[$3 + 316 >> 2];
}
function jspeFactorMember($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 80 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 72 >> 2] = $0;
 HEAP32[$2 + 68 >> 2] = $1;
 HEAP32[$2 + 64 >> 2] = 0;
 label$1: {
  while (1) {
   $0 = 1;
   $0 = HEAP16[HEAP32[38615] + 2 >> 1] != 46 ? HEAP16[HEAP32[38615] + 2 >> 1] == 91 : $0;
   if ($0) {
    if (HEAP16[HEAP32[38615] + 2 >> 1] == 46) {
     jslGetNextToken();
     label$6: {
      if (jslIsIDOrReservedWord() & 1) {
       if ((HEAP32[46755] & 63) == 1) {
        HEAP32[$2 + 60 >> 2] = jslGetTokenValueAsString();
        HEAP32[$2 + 56 >> 2] = jsvSkipNameWithParent(HEAP32[$2 + 72 >> 2], 1, HEAP32[$2 + 64 >> 2]);
        HEAP32[$2 + 52 >> 2] = 0;
        if (HEAP32[$2 + 56 >> 2]) {
         HEAP32[$2 + 52 >> 2] = jspGetNamedField(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 60 >> 2], 1);
        }
        if (!HEAP32[$2 + 52 >> 2]) {
         label$11: {
          if (!(jsvIsNullish(HEAP32[$2 + 56 >> 2]) & 1)) {
           HEAP32[$2 + 48 >> 2] = jsvNewNameFromString(jslGetTokenValueAsString());
           HEAP32[$2 + 52 >> 2] = jsvCreateNewChild(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 48 >> 2], 0);
           jsvUnLock(HEAP32[$2 + 48 >> 2]);
           break label$11;
          }
          $0 = HEAP32[$2 + 60 >> 2];
          HEAP32[$2 + 4 >> 2] = jsvIsUndefined(HEAP32[$2 + 56 >> 2]) & 1 ? 106576 : 102720;
          HEAP32[$2 >> 2] = $0;
          jsExceptionHere(1, 100719, $2);
         }
        }
        jsvUnLock(HEAP32[$2 + 64 >> 2]);
        HEAP32[$2 + 64 >> 2] = HEAP32[$2 + 56 >> 2];
        jsvUnLock(HEAP32[$2 + 72 >> 2]);
        HEAP32[$2 + 72 >> 2] = HEAP32[$2 + 52 >> 2];
       }
       jslGetNextToken();
       break label$6;
      }
      if (!(jslMatch(128) & 1)) {
       HEAP32[$2 + 76 >> 2] = HEAP32[$2 + 72 >> 2];
       break label$1;
      }
     }
     continue;
    }
    if (HEAP16[HEAP32[38615] + 2 >> 1] == 91) {
     jslGetNextToken();
     if (!(jspCheckStackPosition() & 1)) {
      HEAP32[$2 + 76 >> 2] = HEAP32[$2 + 64 >> 2];
      break label$1;
     }
     HEAP32[$2 + 44 >> 2] = jsvSkipNameAndUnLock(jspeAssignmentExpression());
     if (!(jslMatch(93) & 1)) {
      jsvUnLock2(HEAP32[$2 + 64 >> 2], HEAP32[$2 + 44 >> 2]);
      HEAP32[$2 + 76 >> 2] = HEAP32[$2 + 72 >> 2];
      break label$1;
     }
     if ((HEAP32[46755] & 63) == 1) {
      HEAP32[$2 + 44 >> 2] = jsvAsArrayIndexAndUnLock(HEAP32[$2 + 44 >> 2]);
      HEAP32[$2 + 40 >> 2] = jsvSkipNameWithParent(HEAP32[$2 + 72 >> 2], 1, HEAP32[$2 + 64 >> 2]);
      HEAP32[$2 + 36 >> 2] = 0;
      if (HEAP32[$2 + 40 >> 2]) {
       HEAP32[$2 + 36 >> 2] = jspGetVarNamedField(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 44 >> 2], 1);
      }
      if (!HEAP32[$2 + 36 >> 2]) {
       label$20: {
        if (jsvHasChildren(HEAP32[$2 + 40 >> 2]) & 1) {
         HEAP32[$2 + 36 >> 2] = jsvCreateNewChild(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 44 >> 2], 0);
         break label$20;
        }
        $0 = HEAP32[$2 + 44 >> 2];
        HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 40 >> 2];
        HEAP32[$2 + 16 >> 2] = $0;
        jsExceptionHere(1, 99322, $2 + 16 | 0);
       }
      }
      jsvUnLock(HEAP32[$2 + 64 >> 2]);
      HEAP32[$2 + 64 >> 2] = jsvLockAgainSafe(HEAP32[$2 + 40 >> 2]);
      jsvUnLock(HEAP32[$2 + 72 >> 2]);
      HEAP32[$2 + 72 >> 2] = HEAP32[$2 + 36 >> 2];
      jsvUnLock(HEAP32[$2 + 40 >> 2]);
     }
     jsvUnLock(HEAP32[$2 + 44 >> 2]);
    }
    continue;
   }
   break;
  }
  label$22: {
   if (HEAP32[$2 + 68 >> 2]) {
    HEAP32[HEAP32[$2 + 68 >> 2] >> 2] = HEAP32[$2 + 64 >> 2];
    break label$22;
   }
   jsvUnLock(HEAP32[$2 + 64 >> 2]);
  }
  HEAP32[$2 + 76 >> 2] = HEAP32[$2 + 72 >> 2];
 }
 __stack_pointer = $2 + 80 | 0;
 return HEAP32[$2 + 76 >> 2];
}

function tflite__ops__micro__depthwise_conv___28anonymous_20namespace_29__CalculateOpData_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteDepthwiseConvParams__2c_20int_2c_20int_2c_20int_2c_20int_2c_20TfLiteType_2c_20tflite__ops__micro__depthwise_conv___28anonymous_20namespace_29__OpData__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0;
 $9 = __stack_pointer - 112 | 0;
 __stack_pointer = $9;
 HEAP32[$9 + 104 >> 2] = $0;
 HEAP32[$9 + 100 >> 2] = $1;
 HEAP32[$9 + 96 >> 2] = $2;
 HEAP32[$9 + 92 >> 2] = $3;
 HEAP32[$9 + 88 >> 2] = $4;
 HEAP32[$9 + 84 >> 2] = $5;
 HEAP32[$9 + 80 >> 2] = $6;
 HEAP32[$9 + 76 >> 2] = $7;
 HEAP32[$9 + 72 >> 2] = $8;
 HEAP8[$9 + 71 | 0] = HEAP32[HEAP32[HEAP32[$9 + 100 >> 2] >> 2] >> 2] == 3;
 label$1: {
  if (!(HEAP8[$9 + 71 | 0] & 1 | HEAP32[HEAP32[HEAP32[$9 + 100 >> 2] >> 2] >> 2] == 2)) {
   $0 = HEAP32[HEAP32[$9 + 104 >> 2] + 20 >> 2];
   $1 = HEAP32[$9 + 104 >> 2];
   HEAP32[$9 + 16 >> 2] = 111074;
   FUNCTION_TABLE[$0 | 0]($1, 111890, $9 + 16 | 0);
   HEAP32[$9 + 108 >> 2] = 1;
   break label$1;
  }
  if (HEAP32[HEAP32[HEAP32[$9 + 100 >> 2] + 4 >> 2] >> 2] != 1) {
   $0 = HEAP32[HEAP32[$9 + 104 >> 2] + 20 >> 2];
   $1 = HEAP32[$9 + 104 >> 2];
   $2 = HEAP32[HEAP32[HEAP32[$9 + 100 >> 2] + 4 >> 2] >> 2];
   HEAP32[$9 + 12 >> 2] = 1;
   HEAP32[$9 + 8 >> 2] = $2;
   HEAP32[$9 + 4 >> 2] = 111277;
   HEAP32[$9 >> 2] = 104214;
   FUNCTION_TABLE[$0 | 0]($1, 126505, $9);
   HEAP32[$9 + 108 >> 2] = 1;
   break label$1;
  }
  tflite__ComputePaddingHeightWidth_28int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20TfLitePadding_2c_20int__2c_20int__29($9 + 40 | 0, HEAP32[HEAP32[$9 + 96 >> 2] + 8 >> 2], HEAP32[HEAP32[$9 + 96 >> 2] + 4 >> 2], 1, 1, HEAP32[$9 + 88 >> 2], HEAP32[$9 + 92 >> 2], HEAP32[$9 + 80 >> 2], HEAP32[$9 + 84 >> 2], HEAP32[HEAP32[$9 + 96 >> 2] >> 2], $9 - -64 | 0, $9 + 60 | 0);
  $0 = HEAP32[$9 + 44 >> 2];
  $1 = HEAP32[$9 + 40 >> 2];
  $3 = $1;
  $2 = HEAP32[$9 + 72 >> 2];
  $1 = $2;
  HEAP32[$1 >> 2] = $3;
  HEAP32[$1 + 4 >> 2] = $0;
  $1 = HEAP32[$9 + 52 >> 2];
  $0 = HEAP32[$9 + 48 >> 2];
  $3 = $0;
  $0 = $2;
  HEAP32[$0 + 8 >> 2] = $3;
  HEAP32[$0 + 12 >> 2] = $1;
  if (HEAP32[$9 + 76 >> 2] != 1) {
   HEAP32[$9 + 36 >> 2] = tflite__GetInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$9 + 104 >> 2], HEAP32[$9 + 100 >> 2], 0);
   HEAP32[$9 + 32 >> 2] = tflite__GetInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$9 + 104 >> 2], HEAP32[$9 + 100 >> 2], 1);
   HEAP32[$9 + 28 >> 2] = tflite__GetOptionalInputTensor_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$9 + 104 >> 2], HEAP32[$9 + 100 >> 2], 2);
   HEAP32[$9 + 24 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$9 + 104 >> 2], HEAP32[$9 + 100 >> 2], 0);
   HEAP32[$9 + 20 >> 2] = HEAP32[HEAP32[HEAP32[$9 + 32 >> 2] + 20 >> 2] + 16 >> 2];
   HEAP32[$9 + 108 >> 2] = tflite__PopulateConvolutionQuantizationParams_28TfLiteContext__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20TfLiteFusedActivation_20const__2c_20int__2c_20int__2c_20int__2c_20int__2c_20int__2c_20int__2c_20int_29(HEAP32[$9 + 104 >> 2], HEAP32[$9 + 36 >> 2], HEAP32[$9 + 32 >> 2], HEAP32[$9 + 28 >> 2], HEAP32[$9 + 24 >> 2], HEAP32[$9 + 96 >> 2] + 16 | 0, HEAP32[$9 + 72 >> 2] + 28 | 0, HEAP32[$9 + 72 >> 2] + 32 | 0, HEAP32[$9 + 72 >> 2] + 44 | 0, HEAP32[$9 + 72 >> 2] + 48 | 0, HEAP32[HEAP32[$9 + 72 >> 2] + 36 >> 2], HEAP32[HEAP32[$9 + 72 >> 2] + 40 >> 2], HEAP32[$9 + 20 >> 2]);
   break label$1;
  }
  HEAP32[$9 + 108 >> 2] = 0;
 }
 __stack_pointer = $9 + 112 | 0;
 return HEAP32[$9 + 108 >> 2];
}

function gemmlowp__FixedPoint_int_2c_200__20gemmlowp__one_over_one_plus_x_for_x_in_0_1_int__28gemmlowp__FixedPoint_int_2c_200__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 208 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 192 >> 2] = $0;
 HEAP32[$1 + 176 >> 2] = HEAP32[$1 + 192 >> 2];
 HEAP32[$1 + 168 >> 2] = gemmlowp__FixedPoint_int_2c_200___One_28_29();
 HEAP32[$1 + 184 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__RoundingHalfSum_int_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 176 >> 2], HEAP32[$1 + 168 >> 2]);
 HEAP32[$1 + 160 >> 2] = gemmlowp__FixedPoint_int_2c_202___FromScalarRaw_28int_29(gemmlowp__FixedPoint_int_2c_202___ScalarRawType_20gemmlowp__RescaleConstantInitializer_gemmlowp__FixedPoint_int_2c_202___28int_29(1515870810));
 HEAP32[$1 + 152 >> 2] = gemmlowp__FixedPoint_int_2c_202___FromScalarRaw_28int_29(gemmlowp__FixedPoint_int_2c_202___ScalarRawType_20gemmlowp__RescaleConstantInitializer_gemmlowp__FixedPoint_int_2c_202___28int_29(-1010580540));
 HEAP32[$1 + 136 >> 2] = HEAP32[$1 + 160 >> 2];
 HEAP32[$1 + 120 >> 2] = HEAP32[$1 + 184 >> 2];
 HEAP32[$1 + 112 >> 2] = HEAP32[$1 + 152 >> 2];
 HEAP32[$1 + 128 >> 2] = gemmlowp__FixedPoint_int_2c_200_20__202__20gemmlowp__operator__int_2c_200_2c_202__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_202__29(HEAP32[$1 + 120 >> 2], HEAP32[$1 + 112 >> 2]);
 HEAP32[$1 + 144 >> 2] = gemmlowp__FixedPoint_int_2c_202__20gemmlowp__operator__int_2c_202__28gemmlowp__FixedPoint_int_2c_202__2c_20gemmlowp__FixedPoint_int_2c_202__29(HEAP32[$1 + 136 >> 2], HEAP32[$1 + 128 >> 2]);
 HEAP32[$1 + 108 >> 2] = 0;
 while (1) {
  if (HEAP32[$1 + 108 >> 2] < 3) {
   HEAP32[$1 + 96 >> 2] = HEAP32[$1 + 184 >> 2];
   HEAP32[$1 + 88 >> 2] = HEAP32[$1 + 144 >> 2];
   HEAP32[$1 + 104 >> 2] = gemmlowp__FixedPoint_int_2c_200_20__202__20gemmlowp__operator__int_2c_200_2c_202__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_202__29(HEAP32[$1 + 96 >> 2], HEAP32[$1 + 88 >> 2]);
   HEAP32[$1 + 72 >> 2] = gemmlowp__FixedPoint_int_2c_202___One_28_29();
   HEAP32[$1 + 64 >> 2] = HEAP32[$1 + 104 >> 2];
   HEAP32[$1 + 80 >> 2] = gemmlowp__FixedPoint_int_2c_202__20gemmlowp__operator__int_2c_202__28gemmlowp__FixedPoint_int_2c_202__2c_20gemmlowp__FixedPoint_int_2c_202__29_1(HEAP32[$1 + 72 >> 2], HEAP32[$1 + 64 >> 2]);
   HEAP32[$1 + 48 >> 2] = HEAP32[$1 + 144 >> 2];
   HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 144 >> 2];
   HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 80 >> 2];
   HEAP32[$1 + 32 >> 2] = gemmlowp__FixedPoint_int_2c_202_20__202__20gemmlowp__operator__int_2c_202_2c_202__28gemmlowp__FixedPoint_int_2c_202__2c_20gemmlowp__FixedPoint_int_2c_202__29(HEAP32[$1 + 24 >> 2], HEAP32[$1 + 16 >> 2]);
   HEAP32[$1 + 40 >> 2] = gemmlowp__FixedPoint_int_2c_202__20gemmlowp__Rescale_2_2c_20int_2c_204__28gemmlowp__FixedPoint_int_2c_204__29(HEAP32[$1 + 32 >> 2]);
   HEAP32[$1 + 56 >> 2] = gemmlowp__FixedPoint_int_2c_202__20gemmlowp__operator__int_2c_202__28gemmlowp__FixedPoint_int_2c_202__2c_20gemmlowp__FixedPoint_int_2c_202__29(HEAP32[$1 + 48 >> 2], HEAP32[$1 + 40 >> 2]);
   HEAP32[$1 + 144 >> 2] = HEAP32[$1 + 56 >> 2];
   HEAP32[$1 + 108 >> 2] = HEAP32[$1 + 108 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$1 >> 2] = HEAP32[$1 + 144 >> 2];
 HEAP32[$1 + 8 >> 2] = gemmlowp__FixedPoint_int_2c_20_1_20__202__20gemmlowp__ExactMulByPot__1_2c_20int_2c_202__28gemmlowp__FixedPoint_int_2c_202__29(HEAP32[$1 >> 2]);
 HEAP32[$1 + 200 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__Rescale_0_2c_20int_2c_201__28gemmlowp__FixedPoint_int_2c_201__29(HEAP32[$1 + 8 >> 2]);
 __stack_pointer = $1 + 208 | 0;
 return HEAP32[$1 + 200 >> 2];
}

function jswrap_espruino_HSBtoRGB_int($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 80 | 0;
 HEAPF64[$3 + 64 >> 3] = $0;
 HEAPF64[$3 + 56 >> 3] = $1;
 HEAPF64[$3 + 48 >> 3] = $2;
 label$1: {
  if (HEAPF64[$3 + 48 >> 3] == 0) {
   HEAP32[$3 + 76 >> 2] = 0;
   break label$1;
  }
  if (HEAPF64[$3 + 56 >> 3] == 0) {
   $0 = HEAPF64[$3 + 48 >> 3] * 255;
   label$4: {
    if (Math_abs($0) < 2147483648) {
     $4 = ~~$0;
     break label$4;
    }
    $4 = -2147483648;
   }
   HEAP32[$3 + 44 >> 2] = $4;
   HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 44 >> 2] | (HEAP32[$3 + 44 >> 2] << 16 | HEAP32[$3 + 44 >> 2] << 8);
   break label$1;
  }
  HEAPF64[$3 + 64 >> 3] = (HEAPF64[$3 + 64 >> 3] - Math_floor(HEAPF64[$3 + 64 >> 3])) * 6;
  $0 = HEAPF64[$3 + 64 >> 3];
  label$6: {
   if (Math_abs($0) < 2147483648) {
    $4 = ~~$0;
    break label$6;
   }
   $4 = -2147483648;
  }
  HEAP32[$3 + 32 >> 2] = $4;
  HEAPF64[$3 + 8 >> 3] = HEAPF64[$3 + 64 >> 3] - +HEAP32[$3 + 32 >> 2];
  HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 32 >> 2] % 6;
  HEAPF64[$3 + 48 >> 3] = HEAPF64[$3 + 48 >> 3] * 255;
  $0 = HEAPF64[$3 + 48 >> 3];
  label$8: {
   if (Math_abs($0) < 2147483648) {
    $4 = ~~$0;
    break label$8;
   }
   $4 = -2147483648;
  }
  HEAP32[$3 + 28 >> 2] = $4;
  $0 = (1 - HEAPF64[$3 + 56 >> 3]) * HEAPF64[$3 + 48 >> 3];
  label$10: {
   if (Math_abs($0) < 2147483648) {
    $4 = ~~$0;
    break label$10;
   }
   $4 = -2147483648;
  }
  HEAP32[$3 + 24 >> 2] = $4;
  $0 = (-HEAPF64[$3 + 56 >> 3] * HEAPF64[$3 + 8 >> 3] + 1) * HEAPF64[$3 + 48 >> 3];
  label$12: {
   if (Math_abs($0) < 2147483648) {
    $4 = ~~$0;
    break label$12;
   }
   $4 = -2147483648;
  }
  HEAP32[$3 + 20 >> 2] = $4;
  $0 = (-HEAPF64[$3 + 56 >> 3] * (1 - HEAPF64[$3 + 8 >> 3]) + 1) * HEAPF64[$3 + 48 >> 3];
  label$14: {
   if (Math_abs($0) < 2147483648) {
    $4 = ~~$0;
    break label$14;
   }
   $4 = -2147483648;
  }
  HEAP32[$3 + 16 >> 2] = $4;
  label$16: {
   if (!HEAP32[$3 + 32 >> 2]) {
    HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 28 >> 2];
    HEAP32[$3 + 40 >> 2] = HEAP32[$3 + 16 >> 2];
    HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 24 >> 2];
    break label$16;
   }
   label$18: {
    if (HEAP32[$3 + 32 >> 2] == 1) {
     HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 20 >> 2];
     HEAP32[$3 + 40 >> 2] = HEAP32[$3 + 28 >> 2];
     HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 24 >> 2];
     break label$18;
    }
    label$20: {
     if (HEAP32[$3 + 32 >> 2] == 2) {
      HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 24 >> 2];
      HEAP32[$3 + 40 >> 2] = HEAP32[$3 + 28 >> 2];
      HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 16 >> 2];
      break label$20;
     }
     label$22: {
      if (HEAP32[$3 + 32 >> 2] == 3) {
       HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 24 >> 2];
       HEAP32[$3 + 40 >> 2] = HEAP32[$3 + 20 >> 2];
       HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 28 >> 2];
       break label$22;
      }
      label$24: {
       if (HEAP32[$3 + 32 >> 2] == 4) {
        HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 16 >> 2];
        HEAP32[$3 + 40 >> 2] = HEAP32[$3 + 24 >> 2];
        HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 28 >> 2];
        break label$24;
       }
       label$26: {
        if (HEAP32[$3 + 32 >> 2] == 5) {
         HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 28 >> 2];
         HEAP32[$3 + 40 >> 2] = HEAP32[$3 + 24 >> 2];
         HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 20 >> 2];
         break label$26;
        }
        HEAP32[$3 + 44 >> 2] = 0;
        HEAP32[$3 + 40 >> 2] = 0;
        HEAP32[$3 + 36 >> 2] = 0;
       }
      }
     }
    }
   }
  }
  HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 44 >> 2] | (HEAP32[$3 + 36 >> 2] << 16 | HEAP32[$3 + 40 >> 2] << 8);
 }
 return HEAP32[$3 + 76 >> 2];
}

function jswrap_date_parse($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 208 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 196 >> 2] = $0;
 label$1: {
  if (!(jsvIsString(HEAP32[$1 + 196 >> 2]) & 1)) {
   HEAPF64[$1 + 200 >> 3] = 0;
   break label$1;
  }
  HEAP32[$1 + 168 >> 2] = 0;
  HEAP32[$1 + 184 >> 2] = 0;
  HEAP32[$1 + 180 >> 2] = 0;
  HEAP32[$1 + 176 >> 2] = 0;
  HEAP32[$1 + 172 >> 2] = 0;
  HEAP32[$1 + 188 >> 2] = 0;
  HEAP8[$1 + 192 | 0] = 0;
  getCalendarDate($1 + 144 | 0, 0);
  HEAP8[$1 + 143 | 0] = 0;
  HEAP32[$1 + 12 >> 2] = jslSetLex($1 + 16 | 0);
  jslInit(HEAP32[$1 + 196 >> 2]);
  label$3: {
   if (HEAP16[$1 + 18 >> 1] == 128) {
    HEAP32[$1 + 152 >> 2] = getMonth(jslGetTokenValueAsString());
    HEAP32[$1 + 160 >> 2] = getDay(jslGetTokenValueAsString());
    label$5: {
     if (HEAP32[$1 + 152 >> 2] >= 0) {
      jslGetNextToken();
      if (HEAP16[$1 + 18 >> 1] == 129) {
       HEAP32[$1 + 148 >> 2] = _parse_int();
       jslGetNextToken();
       if (HEAP16[$1 + 18 >> 1] == 44) {
        jslGetNextToken();
        if (HEAP16[$1 + 18 >> 1] == 129) {
         HEAP32[$1 + 156 >> 2] = _parse_int();
         HEAP32[$1 + 168 >> 2] = fromCalendarDate($1 + 144 | 0);
         jslGetNextToken();
         if (HEAP16[$1 + 18 >> 1] == 129) {
          _parse_time($1 + 168 | 0, 0);
          HEAP8[$1 + 143 | 0] = 1;
         }
        }
       }
      }
      break label$5;
     }
     label$11: {
      if (HEAP32[$1 + 160 >> 2] >= 0) {
       HEAP32[$1 + 152 >> 2] = 0;
       jslGetNextToken();
       if (HEAP16[$1 + 18 >> 1] == 44) {
        jslGetNextToken();
        if (HEAP16[$1 + 18 >> 1] == 129) {
         HEAP32[$1 + 148 >> 2] = _parse_int();
         jslGetNextToken();
         label$15: {
          if (HEAP16[$1 + 18 >> 1] != 128) {
           break label$15;
          }
          if ((getMonth(jslGetTokenValueAsString()) | 0) < 0) {
           break label$15;
          }
          HEAP32[$1 + 152 >> 2] = getMonth(jslGetTokenValueAsString());
          jslGetNextToken();
          if (HEAP16[$1 + 18 >> 1] == 129) {
           HEAP32[$1 + 156 >> 2] = _parse_int();
           HEAP32[$1 + 168 >> 2] = fromCalendarDate($1 + 144 | 0);
           jslGetNextToken();
           if (HEAP16[$1 + 18 >> 1] == 129) {
            _parse_time($1 + 168 | 0, 0);
            HEAP8[$1 + 143 | 0] = 1;
           }
          }
         }
        }
       }
       break label$11;
      }
      HEAP32[$1 + 160 >> 2] = 0;
      HEAP32[$1 + 152 >> 2] = 0;
     }
    }
    break label$3;
   }
   if (HEAP16[$1 + 18 >> 1] == 129) {
    HEAP32[$1 + 156 >> 2] = _parse_int();
    jslGetNextToken();
    if (HEAP16[$1 + 18 >> 1] == 45) {
     jslGetNextToken();
     if (HEAP16[$1 + 18 >> 1] == 129) {
      HEAP32[$1 + 152 >> 2] = _parse_int() - 1;
      jslGetNextToken();
      if (HEAP16[$1 + 18 >> 1] == 45) {
       jslGetNextToken();
       if (HEAP16[$1 + 18 >> 1] == 129) {
        HEAP32[$1 + 148 >> 2] = _parse_int();
        HEAP32[$1 + 168 >> 2] = fromCalendarDate($1 + 144 | 0);
        jslGetNextToken();
        label$23: {
         if (HEAP16[$1 + 18 >> 1] != 128) {
          break label$23;
         }
         if (HEAP8[jslGetTokenValueAsString() | 0] != 84) {
          break label$23;
         }
         _parse_time($1 + 168 | 0, 1);
         HEAP8[$1 + 143 | 0] = 1;
        }
       }
      }
     }
    }
   }
  }
  if (!(HEAP8[$1 + 143 | 0] & 1)) {
   setCorrectTimeZone($1 + 168 | 0);
  }
  jslKill();
  jslSetLex(HEAP32[$1 + 12 >> 2]);
  HEAPF64[$1 + 200 >> 3] = fromTimeInDay($1 + 168 | 0);
 }
 __stack_pointer = $1 + 208 | 0;
 return +HEAPF64[$1 + 200 >> 3];
}

function jsiTabComplete() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 320 | 0;
 __stack_pointer = $0;
 label$1: {
  if (!(jsvIsString(HEAP32[46763]) & 1)) {
   break label$1;
  }
  HEAP32[$0 + 316 >> 2] = 0;
  HEAP32[$0 + 300 >> 2] = 0;
  HEAP32[$0 + 292 >> 2] = 0;
  HEAP32[$0 + 164 >> 2] = jslSetLex($0 + 168 | 0);
  jslInit(HEAP32[46763]);
  while (1) {
   $1 = 0;
   $1 = HEAP16[$0 + 170 >> 1] ? HEAPU32[46765] >= HEAP32[$0 + 172 >> 2] + 1 >>> 0 : $1;
   if ($1) {
    label$5: {
     if (HEAP16[$0 + 170 >> 1] == 46) {
      jsvUnLock(HEAP32[$0 + 316 >> 2]);
      HEAP32[$0 + 316 >> 2] = HEAP32[$0 + 300 >> 2];
      HEAP32[$0 + 300 >> 2] = 0;
      break label$5;
     }
     label$7: {
      if (HEAP16[$0 + 170 >> 1] == 128) {
       jsvUnLock(HEAP32[$0 + 300 >> 2]);
       HEAP32[$0 + 300 >> 2] = jslGetTokenValueAsVar();
       HEAP32[$0 + 292 >> 2] = HEAP32[$0 + 172 >> 2] + 1;
       break label$7;
      }
      jsvUnLock(HEAP32[$0 + 316 >> 2]);
      HEAP32[$0 + 316 >> 2] = 0;
      jsvUnLock(HEAP32[$0 + 300 >> 2]);
      HEAP32[$0 + 300 >> 2] = 0;
     }
    }
    jslGetNextToken();
    continue;
   }
   break;
  }
  jslKill();
  jslSetLex(HEAP32[$0 + 164 >> 2]);
  if (!(HEAP32[$0 + 316 >> 2] | HEAP32[$0 + 300 >> 2])) {
   break label$1;
  }
  label$10: {
   if (HEAP32[$0 + 300 >> 2]) {
    HEAP32[$0 + 296 >> 2] = jsvGetStringLength(HEAP32[$0 + 300 >> 2]);
    HEAP32[$0 + 160 >> 2] = (HEAP32[46765] + 1 | 0) - HEAP32[$0 + 292 >> 2];
    if (HEAPU32[$0 + 160 >> 2] > HEAPU32[$0 + 296 >> 2]) {
     jsvUnLock2(HEAP32[$0 + 316 >> 2], HEAP32[$0 + 300 >> 2]);
     break label$1;
    }
    if (HEAPU32[$0 + 160 >> 2] < HEAPU32[$0 + 296 >> 2]) {
     HEAP32[$0 + 156 >> 2] = jsvNewFromStringVar(HEAP32[$0 + 300 >> 2], 0, HEAP32[$0 + 160 >> 2]);
     jsvUnLock(HEAP32[$0 + 300 >> 2]);
     HEAP32[$0 + 300 >> 2] = HEAP32[$0 + 156 >> 2];
     HEAP32[$0 + 296 >> 2] = HEAP32[$0 + 160 >> 2];
    }
    break label$10;
   }
   HEAP32[$0 + 300 >> 2] = jsvNewFromEmptyString_5();
   HEAP32[$0 + 296 >> 2] = 0;
  }
  if (HEAP32[$0 + 316 >> 2]) {
   jsvGetString(HEAP32[$0 + 316 >> 2], $0 + 80 | 0, 64);
   HEAP32[$0 + 76 >> 2] = jspGetNamedVariable($0 + 80 | 0);
   label$15: {
    if (jsvIsVariableDefined(HEAP32[$0 + 76 >> 2]) & 1) {
     HEAP32[$0 + 76 >> 2] = jsvSkipNameAndUnLock(HEAP32[$0 + 76 >> 2]);
     break label$15;
    }
    jsvUnLock(HEAP32[$0 + 76 >> 2]);
    HEAP32[$0 + 76 >> 2] = 0;
   }
   jsvUnLock(HEAP32[$0 + 316 >> 2]);
   HEAP32[$0 + 316 >> 2] = HEAP32[$0 + 76 >> 2];
   if (!HEAP32[$0 + 76 >> 2]) {
    jsvUnLock(HEAP32[$0 + 300 >> 2]);
    break label$1;
   }
  }
  if (!HEAP32[$0 + 316 >> 2]) {
   HEAP32[$0 + 316 >> 2] = jsvLockAgain(HEAP32[46747]);
  }
  HEAP32[$0 + 304 >> 2] = 0;
  HEAP32[$0 + 308 >> 2] = 0;
  jswrap_object_keys_or_property_names_cb(HEAP32[$0 + 316 >> 2], 7, 547, $0 + 296 | 0);
  if (HEAP32[$0 + 308 >> 2] > 1) {
   jsiMoveCursorChar(HEAP32[46763], HEAP32[46765], HEAP32[38457]);
   HEAP8[187056] = 1;
   jsiConsolePrintString(129586);
   HEAP32[$0 + 312 >> 2] = 0;
   jswrap_object_keys_or_property_names_cb(HEAP32[$0 + 316 >> 2], 7, 548, $0 + 296 | 0);
   if (HEAP32[$0 + 312 >> 2]) {
    jsiConsolePrintString(129587);
   }
   jsiConsolePrintString(129587);
   jsiConsoleReturnInputLine();
  }
  jsvUnLock2(HEAP32[$0 + 316 >> 2], HEAP32[$0 + 300 >> 2]);
  if (!HEAP32[$0 + 304 >> 2]) {
   break label$1;
  }
  jsvGetString(HEAP32[$0 + 304 >> 2], $0, 64);
  if (HEAPU32[$0 + 296 >> 2] < strlen($0) >>> 0) {
   jsiAppendStringToInputLine(HEAP32[$0 + 296 >> 2] + $0 | 0);
  }
  jsvUnLock(HEAP32[$0 + 304 >> 2]);
 }
 __stack_pointer = $0 + 320 | 0;
}

function jsfCreateFile($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = __stack_pointer - 112 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 104 >> 2] = $1;
 HEAP32[$4 + 100 >> 2] = $2;
 HEAP32[$4 + 96 >> 2] = $3;
 HEAP8[$4 + 95 | 0] = jsfStripDriveFromName($0, 0);
 HEAP32[$4 + 32 >> 2] = HEAP32[$0 + 24 >> 2];
 $3 = $0;
 $2 = HEAP32[$3 + 16 >> 2];
 $1 = HEAP32[$3 + 20 >> 2];
 HEAP32[$4 + 24 >> 2] = $2;
 HEAP32[$4 + 28 >> 2] = $1;
 $2 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$3 + 8 >> 2];
 HEAP32[$4 + 16 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 $1 = HEAP32[$3 + 4 >> 2];
 $2 = HEAP32[$3 >> 2];
 HEAP32[$4 + 8 >> 2] = $2;
 HEAP32[$4 + 12 >> 2] = $1;
 jsfCacheClearFile($4 + 8 | 0);
 jsfGetDriveBankAddress(HEAP8[$4 + 95 | 0], $4 + 88 | 0, $4 + 84 | 0);
 HEAP32[$4 + 80 >> 2] = jsfAlignAddress(HEAP32[$4 + 104 >> 2]) + 32;
 HEAP8[$4 + 79 | 0] = 0;
 HEAP32[$4 + 72 >> 2] = 0;
 HEAP32[$4 + 36 >> 2] = 0;
 label$1: {
  while (1) {
   if ((HEAP32[$4 + 36 >> 2] != 0 ^ -1) & 1) {
    HEAP32[$4 + 72 >> 2] = HEAP32[$4 + 88 >> 2];
    HEAP32[$4 + 36 >> 2] = 0;
    while (1) {
     if (jsfGetFileHeader(HEAP32[$4 + 72 >> 2], $4 + 40 | 0, 0) & 1) {
      while (1) {
       if (jsfGetNextFileHeader($4 + 72 | 0, $4 + 40 | 0, 0) & 1) {
        continue;
       }
       break;
      }
     }
     label$7: {
      if (jsfGetSpaceLeftInPage(HEAP32[$4 + 72 >> 2]) >>> 0 < HEAPU32[$4 + 80 >> 2]) {
       HEAP32[$4 + 72 >> 2] = jsfGetAddressOfNextPage(HEAP32[$4 + 72 >> 2]);
       break label$7;
      }
      HEAP32[$4 + 36 >> 2] = HEAP32[$4 + 72 >> 2];
     }
     $1 = 0;
     $1 = HEAP32[$4 + 72 >> 2] ? HEAP32[$4 + 36 >> 2] != 0 ^ -1 : $1;
     if ($1 & 1) {
      continue;
     }
     break;
    }
    if (!HEAP32[$4 + 36 >> 2]) {
     label$11: {
      if (!(HEAP8[$4 + 79 | 0] & 1)) {
       HEAP8[$4 + 79 | 0] = 1;
       if (!(jsfCompact(1) & 1)) {
        HEAP32[$4 + 108 >> 2] = 0;
        break label$1;
       }
       HEAP32[$4 + 72 >> 2] = HEAP32[$4 + 88 >> 2];
       break label$11;
      }
      HEAP32[$4 + 108 >> 2] = 0;
      break label$1;
     }
    }
    continue;
   }
   break;
  }
  HEAP32[$4 + 72 >> 2] = HEAP32[$4 + 36 >> 2];
  HEAP32[$4 + 40 >> 2] = HEAP32[$4 + 104 >> 2] | HEAP32[$4 + 100 >> 2] << 24;
  $1 = HEAP32[$0 >> 2];
  $2 = HEAP32[$3 + 4 >> 2];
  $5 = $1;
  $0 = $4 + 40 | 0;
  $1 = $0;
  HEAP32[$1 + 4 >> 2] = $5;
  HEAP32[$1 + 8 >> 2] = $2;
  HEAP32[$1 + 28 >> 2] = HEAP32[$3 + 24 >> 2];
  $1 = HEAP32[$3 + 20 >> 2];
  $2 = HEAP32[$3 + 16 >> 2];
  $5 = $2;
  $2 = $0;
  HEAP32[$2 + 20 >> 2] = $5;
  HEAP32[$2 + 24 >> 2] = $1;
  $2 = HEAP32[$3 + 12 >> 2];
  $1 = HEAP32[$3 + 8 >> 2];
  $3 = $1;
  $1 = $0;
  HEAP32[$1 + 12 >> 2] = $3;
  HEAP32[$1 + 16 >> 2] = $2;
  jshFlashWrite($4 + 40 | 0, HEAP32[$4 + 72 >> 2], 32);
  if (HEAP32[$4 + 96 >> 2]) {
   $1 = HEAP32[$4 + 44 >> 2];
   $2 = HEAP32[$4 + 40 >> 2];
   $3 = $2;
   $0 = HEAP32[$4 + 96 >> 2];
   $2 = $0;
   HEAP32[$2 >> 2] = $3;
   HEAP32[$2 + 4 >> 2] = $1;
   $2 = HEAP32[$4 + 68 >> 2];
   $1 = HEAP32[$4 + 64 >> 2];
   $3 = $1;
   $1 = $0;
   HEAP32[$1 + 24 >> 2] = $3;
   HEAP32[$1 + 28 >> 2] = $2;
   $1 = HEAP32[$4 + 60 >> 2];
   $2 = HEAP32[$4 + 56 >> 2];
   $3 = $2;
   $2 = $0;
   HEAP32[$2 + 16 >> 2] = $3;
   HEAP32[$2 + 20 >> 2] = $1;
   $2 = HEAP32[$4 + 52 >> 2];
   $1 = HEAP32[$4 + 48 >> 2];
   $3 = $1;
   $1 = $0;
   HEAP32[$1 + 8 >> 2] = $3;
   HEAP32[$1 + 12 >> 2] = $2;
  }
  HEAP32[$4 + 72 >> 2] = HEAP32[$4 + 72 >> 2] + 32;
  jsfCachePut($4 + 40 | 0, HEAP32[$4 + 72 >> 2]);
  HEAP32[$4 + 108 >> 2] = HEAP32[$4 + 72 >> 2];
 }
 __stack_pointer = $4 + 112 | 0;
 return HEAP32[$4 + 108 >> 2];
}

function graphicsFillEllipse($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 80 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 76 >> 2] = $0;
 HEAP32[$5 + 72 >> 2] = $1;
 HEAP32[$5 + 68 >> 2] = $2;
 HEAP32[$5 + 64 >> 2] = $3;
 HEAP32[$5 + 60 >> 2] = $4;
 graphicsToDeviceCoordinates(HEAP32[$5 + 76 >> 2], $5 + 72 | 0, $5 + 68 | 0);
 graphicsToDeviceCoordinates(HEAP32[$5 + 76 >> 2], $5 - -64 | 0, $5 + 60 | 0);
 if (HEAP32[$5 + 72 >> 2] > HEAP32[$5 + 64 >> 2]) {
  HEAP32[$5 + 56 >> 2] = HEAP32[$5 + 72 >> 2];
  HEAP32[$5 + 72 >> 2] = HEAP32[$5 + 64 >> 2];
  HEAP32[$5 + 64 >> 2] = HEAP32[$5 + 56 >> 2];
 }
 if (HEAP32[$5 + 68 >> 2] > HEAP32[$5 + 60 >> 2]) {
  HEAP32[$5 + 52 >> 2] = HEAP32[$5 + 68 >> 2];
  HEAP32[$5 + 68 >> 2] = HEAP32[$5 + 60 >> 2];
  HEAP32[$5 + 60 >> 2] = HEAP32[$5 + 52 >> 2];
 }
 HEAP32[$5 + 48 >> 2] = (HEAP32[$5 + 72 >> 2] + HEAP32[$5 + 64 >> 2] | 0) / 2;
 HEAP32[$5 + 44 >> 2] = (HEAP32[$5 + 68 >> 2] + HEAP32[$5 + 60 >> 2] | 0) / 2;
 HEAP32[$5 + 40 >> 2] = (HEAP32[$5 + 64 >> 2] - HEAP32[$5 + 72 >> 2] | 0) / 2;
 HEAP32[$5 + 36 >> 2] = (HEAP32[$5 + 60 >> 2] - HEAP32[$5 + 68 >> 2] | 0) / 2;
 HEAP32[$5 + 32 >> 2] = 0;
 HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 36 >> 2];
 HEAP32[$5 + 24 >> 2] = Math_imul(HEAP32[$5 + 40 >> 2], HEAP32[$5 + 40 >> 2]);
 HEAP32[$5 + 20 >> 2] = Math_imul(HEAP32[$5 + 36 >> 2], HEAP32[$5 + 36 >> 2]);
 HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 20 >> 2] - Math_imul(HEAP32[$5 + 24 >> 2], (HEAP32[$5 + 36 >> 2] << 1) - 1 | 0);
 HEAP8[$5 + 11 | 0] = 0;
 while (1) {
  HEAP8[$5 + 11 | 0] = 0;
  HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 16 >> 2] << 1;
  if (HEAP32[$5 + 12 >> 2] < (Math_imul(HEAP32[$5 + 20 >> 2], (HEAP32[$5 + 32 >> 2] << 1) + 1 | 0) | 0)) {
   HEAP32[$5 + 32 >> 2] = HEAP32[$5 + 32 >> 2] + 1;
   HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] + Math_imul(HEAP32[$5 + 20 >> 2], (HEAP32[$5 + 32 >> 2] << 1) + 1 | 0);
   HEAP8[$5 + 11 | 0] = 1;
  }
  if (HEAP32[$5 + 12 >> 2] > (Math_imul(HEAP32[$5 + 24 >> 2], 1 - (HEAP32[$5 + 28 >> 2] << 1) | 0) | 0)) {
   $0 = HEAP32[$5 + 76 >> 2];
   graphicsFillRectDevice(HEAP32[$5 + 76 >> 2], HEAP32[$5 + 48 >> 2] + HEAP32[$5 + 32 >> 2] | 0, HEAP32[$5 + 44 >> 2] + HEAP32[$5 + 28 >> 2] | 0, HEAP32[$5 + 48 >> 2] - HEAP32[$5 + 32 >> 2] | 0, HEAP32[$5 + 44 >> 2] + HEAP32[$5 + 28 >> 2] | 0, HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
   $0 = HEAP32[$5 + 76 >> 2];
   graphicsFillRectDevice(HEAP32[$5 + 76 >> 2], HEAP32[$5 + 48 >> 2] + HEAP32[$5 + 32 >> 2] | 0, HEAP32[$5 + 44 >> 2] - HEAP32[$5 + 28 >> 2] | 0, HEAP32[$5 + 48 >> 2] - HEAP32[$5 + 32 >> 2] | 0, HEAP32[$5 + 44 >> 2] - HEAP32[$5 + 28 >> 2] | 0, HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
   HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 28 >> 2] - 1;
   HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] - Math_imul(HEAP32[$5 + 24 >> 2], (HEAP32[$5 + 28 >> 2] << 1) - 1 | 0);
   HEAP8[$5 + 11 | 0] = 1;
  }
  $0 = 0;
  $0 = HEAP8[$5 + 11 | 0] & 1 ? HEAP32[$5 + 28 >> 2] >= 0 : $0;
  if ($0) {
   continue;
  }
  break;
 }
 while (1) {
  $0 = HEAP32[$5 + 32 >> 2];
  HEAP32[$5 + 32 >> 2] = $0 + 1;
  if (($0 | 0) < HEAP32[$5 + 40 >> 2]) {
   $0 = HEAP32[$5 + 76 >> 2];
   graphicsFillRectDevice(HEAP32[$5 + 76 >> 2], HEAP32[$5 + 48 >> 2] + HEAP32[$5 + 32 >> 2] | 0, HEAP32[$5 + 44 >> 2], HEAP32[$5 + 48 >> 2] - HEAP32[$5 + 32 >> 2] | 0, HEAP32[$5 + 44 >> 2], HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
   continue;
  }
  break;
 }
 __stack_pointer = $5 + 80 | 0;
}

function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 label$1: {
  label$2: {
   label$3: {
    label$4: {
     label$5: {
      label$6: {
       label$7: {
        label$8: {
         label$9: {
          label$11: {
           $5 = $1;
           if ($5) {
            $7 = $2;
            if (!$7) {
             break label$11;
            }
            $4 = $3;
            if (!$4) {
             break label$9;
            }
            $5 = Math_clz32($4) - Math_clz32($5) | 0;
            if ($5 >>> 0 <= 31) {
             break label$8;
            }
            break label$2;
           }
           $4 = $3;
           if (($4 | 0) == 1 | $4 >>> 0 > 1) {
            break label$2;
           }
           $5 = $0;
           $7 = $2;
           $5 = ($5 >>> 0) / ($7 >>> 0) | 0;
           i64toi32_i32$HIGH_BITS = 0;
           return $5;
          }
          $7 = $3;
          if (!$0) {
           break label$7;
          }
          if (!$7) {
           break label$6;
          }
          $4 = $7 - 1 | 0;
          if ($4 & $7) {
           break label$6;
          }
          $1 = $5 >>> __wasm_ctz_i32($7) | 0;
          i64toi32_i32$HIGH_BITS = 0;
          return $1;
         }
         if (!($7 - 1 & $7)) {
          break label$5;
         }
         $5 = (Math_clz32($7) + 33 | 0) - Math_clz32($5) | 0;
         $7 = 0 - $5 | 0;
         break label$3;
        }
        $7 = 63 - $5 | 0;
        $5 = $5 + 1 | 0;
        break label$3;
       }
       $4 = ($5 >>> 0) / ($7 >>> 0) | 0;
       i64toi32_i32$HIGH_BITS = 0;
       return $4;
      }
      $5 = Math_clz32($7) - Math_clz32($5) | 0;
      if ($5 >>> 0 < 31) {
       break label$4;
      }
      break label$2;
     }
     if (($7 | 0) == 1) {
      break label$1;
     }
     $4 = $1;
     $1 = $0;
     $9 = 0;
     $8 = __wasm_ctz_i32($7);
     $6 = $8 & 31;
     if (($8 & 63) >>> 0 >= 32) {
      $1 = $4 >>> $6 | 0;
     } else {
      $9 = $4 >>> $6 | 0;
      $1 = ((1 << $6) - 1 & $4) << 32 - $6 | $1 >>> $6;
     }
     i64toi32_i32$HIGH_BITS = $9;
     return $1;
    }
    $7 = 63 - $5 | 0;
    $5 = $5 + 1 | 0;
   }
   $4 = $0;
   $9 = 0;
   $8 = $5 & 63;
   $6 = $8 & 31;
   if (($8 & 63) >>> 0 >= 32) {
    $10 = $1 >>> $6 | 0;
   } else {
    $9 = $1 >>> $6 | 0;
    $10 = ((1 << $6) - 1 & $1) << 32 - $6 | $4 >>> $6;
   }
   $12 = $9;
   $9 = $1;
   $1 = $0;
   $8 = $7 & 63;
   $6 = $8 & 31;
   if (($8 & 63) >>> 0 >= 32) {
    $4 = $1 << $6;
    $0 = 0;
   } else {
    $4 = (1 << $6) - 1 & $1 >>> 32 - $6 | $9 << $6;
    $0 = $1 << $6;
   }
   $1 = $4;
   if ($5) {
    $4 = $3 - 1 | 0;
    $6 = $2 - 1 | 0;
    $4 = ($6 | 0) != -1 ? $4 + 1 | 0 : $4;
    $13 = $6;
    $7 = $4;
    while (1) {
     $4 = $10;
     $8 = $4 << 1;
     $4 = $12 << 1 | $4 >>> 31;
     $10 = $8 | $1 >>> 31;
     $9 = $4;
     $4 = $13;
     $8 = $10;
     $6 = $7 - (($4 >>> 0 < $8 >>> 0) + $9 | 0) | 0;
     $12 = $3 & $6 >> 31;
     $4 = $8;
     $11 = $6 >> 31;
     $8 = $11 & $2;
     $10 = $4 - $8 | 0;
     $12 = $9 - (($4 >>> 0 < $8 >>> 0) + $12 | 0) | 0;
     $4 = $1 << 1 | $0 >>> 31;
     $0 = $0 << 1 | $14;
     $1 = $4 | $16;
     $15 = 0;
     $11 = $11 & 1;
     $14 = $11;
     $5 = $5 - 1 | 0;
     if ($5) {
      continue;
     }
     break;
    }
   }
   i64toi32_i32$HIGH_BITS = $15 | ($1 << 1 | $0 >>> 31);
   return $0 << 1 | $11;
  }
  $0 = 0;
  $1 = 0;
 }
 i64toi32_i32$HIGH_BITS = $1;
 return $0;
}

function jswrap_storagefile_getLength($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 240 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 236 >> 2] = $0;
 HEAP32[$1 + 232 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 236 >> 2], 105033);
 jsfNameFromVar($1 + 200 | 0, HEAP32[$1 + 232 >> 2]);
 jsvUnLock(HEAP32[$1 + 232 >> 2]);
 HEAP32[$1 + 196 >> 2] = 27;
 while (1) {
  $0 = 0;
  $0 = HEAP32[$1 + 196 >> 2] ? !HEAP8[(HEAP32[$1 + 196 >> 2] + $1 | 0) + 199 | 0] : $0;
  if ($0) {
   HEAP32[$1 + 196 >> 2] = HEAP32[$1 + 196 >> 2] - 1;
   continue;
  }
  break;
 }
 HEAP32[$1 + 192 >> 2] = 1;
 HEAP8[HEAP32[$1 + 196 >> 2] + ($1 + 200 | 0) | 0] = HEAP32[$1 + 192 >> 2];
 HEAP32[$1 + 188 >> 2] = 0;
 HEAP32[$1 + 184 >> 2] = 0;
 HEAP32[$1 + 64 >> 2] = HEAP32[$1 + 224 >> 2];
 $2 = HEAP32[$1 + 220 >> 2];
 $0 = HEAP32[$1 + 216 >> 2];
 HEAP32[$1 + 56 >> 2] = $0;
 HEAP32[$1 + 60 >> 2] = $2;
 $0 = HEAP32[$1 + 212 >> 2];
 $2 = HEAP32[$1 + 208 >> 2];
 HEAP32[$1 + 48 >> 2] = $2;
 HEAP32[$1 + 52 >> 2] = $0;
 $2 = HEAP32[$1 + 204 >> 2];
 $0 = HEAP32[$1 + 200 >> 2];
 HEAP32[$1 + 40 >> 2] = $0;
 HEAP32[$1 + 44 >> 2] = $2;
 HEAP32[$1 + 148 >> 2] = jsfFindFile($1 + 40 | 0, $1 + 152 | 0);
 HEAP8[$1 + 147 | 0] = 255;
 if (HEAP32[$1 + 148 >> 2]) {
  jshFlashRead($1 + 147 | 0, (HEAP32[$1 + 148 >> 2] + jsfGetFileSize($1 + 152 | 0) | 0) - 1 | 0, 1);
 }
 while (1) {
  $0 = 0;
  label$6: {
   if (!HEAP32[$1 + 148 >> 2]) {
    break label$6;
   }
   $0 = 0;
   if (HEAPU8[$1 + 147 | 0] == 255) {
    break label$6;
   }
   $0 = HEAP32[$1 + 192 >> 2] < 255;
  }
  if ($0) {
   HEAP32[$1 + 188 >> 2] = jsfGetFileSize($1 + 152 | 0) + HEAP32[$1 + 188 >> 2];
   HEAP32[$1 + 192 >> 2] = HEAP32[$1 + 192 >> 2] + 1;
   HEAP8[HEAP32[$1 + 196 >> 2] + ($1 + 200 | 0) | 0] = HEAP32[$1 + 192 >> 2];
   HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 224 >> 2];
   $0 = HEAP32[$1 + 220 >> 2];
   $2 = HEAP32[$1 + 216 >> 2];
   HEAP32[$1 + 24 >> 2] = $2;
   HEAP32[$1 + 28 >> 2] = $0;
   $2 = HEAP32[$1 + 212 >> 2];
   $0 = HEAP32[$1 + 208 >> 2];
   HEAP32[$1 + 16 >> 2] = $0;
   HEAP32[$1 + 20 >> 2] = $2;
   $0 = HEAP32[$1 + 204 >> 2];
   $2 = HEAP32[$1 + 200 >> 2];
   HEAP32[$1 + 8 >> 2] = $2;
   HEAP32[$1 + 12 >> 2] = $0;
   HEAP32[$1 + 148 >> 2] = jsfFindFile($1 + 8 | 0, $1 + 152 | 0);
   if (HEAP32[$1 + 148 >> 2]) {
    jshFlashRead($1 + 147 | 0, (HEAP32[$1 + 148 >> 2] + jsfGetFileSize($1 + 152 | 0) | 0) - 1 | 0, 1);
   }
   continue;
  }
  break;
 }
 if (HEAP32[$1 + 148 >> 2]) {
  HEAP8[$1 + 79 | 0] = 0;
  while (1) {
   label$11: {
    if (!((HEAPU8[$1 + 79 | 0] ^ -1) & 1)) {
     break label$11;
    }
    HEAP32[$1 + 72 >> 2] = jsfGetFileSize($1 + 152 | 0) - HEAP32[$1 + 184 >> 2];
    if (HEAP32[$1 + 72 >> 2] <= 0) {
     HEAP8[$1 + 79 | 0] = 1;
     break label$11;
    }
    if (HEAP32[$1 + 72 >> 2] > 64) {
     HEAP32[$1 + 72 >> 2] = 64;
    }
    jshFlashRead($1 + 80 | 0, HEAP32[$1 + 148 >> 2] + HEAP32[$1 + 184 >> 2] | 0, HEAP32[$1 + 72 >> 2]);
    HEAP32[$1 + 68 >> 2] = 0;
    while (1) {
     if (HEAP32[$1 + 68 >> 2] < HEAP32[$1 + 72 >> 2]) {
      if (HEAP8[HEAP32[$1 + 68 >> 2] + ($1 + 80 | 0) | 0] == -1) {
       HEAP32[$1 + 72 >> 2] = HEAP32[$1 + 68 >> 2];
       HEAP8[$1 + 79 | 0] = 1;
      } else {
       HEAP32[$1 + 68 >> 2] = HEAP32[$1 + 68 >> 2] + 1;
       continue;
      }
     }
     break;
    }
    HEAP32[$1 + 184 >> 2] = HEAP32[$1 + 72 >> 2] + HEAP32[$1 + 184 >> 2];
    continue;
   }
   break;
  }
 }
 HEAP32[$1 + 188 >> 2] = HEAP32[$1 + 184 >> 2] + HEAP32[$1 + 188 >> 2];
 __stack_pointer = $1 + 240 | 0;
 return HEAP32[$1 + 188 >> 2];
}

function tflite__ops__micro__depthwise_conv__Eval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 label$1: {
  if (!HEAP32[HEAP32[$2 + 36 >> 2] + 8 >> 2]) {
   break label$1;
  }
 }
 label$2: {
  if (!HEAP32[HEAP32[$2 + 36 >> 2] + 12 >> 2]) {
   break label$2;
  }
 }
 HEAP32[$2 + 32 >> 2] = HEAP32[HEAP32[$2 + 36 >> 2] + 12 >> 2];
 HEAP32[$2 + 28 >> 2] = HEAP32[HEAP32[$2 + 36 >> 2] + 8 >> 2];
 HEAP32[$2 + 24 >> 2] = tflite__micro__GetEvalOutput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], 0);
 HEAP32[$2 + 20 >> 2] = tflite__micro__GetEvalInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], 0);
 HEAP32[$2 + 16 >> 2] = tflite__micro__GetEvalInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], 1);
 label$3: {
  if ((tflite__NumInputs_28TfLiteNode_20const__29(HEAP32[$2 + 36 >> 2]) | 0) == 3) {
   $0 = tflite__micro__GetEvalInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], 2);
   break label$3;
  }
  $0 = 0;
 }
 HEAP32[$2 + 12 >> 2] = $0;
 label$5: {
  label$6: {
   label$7: {
    switch (HEAP32[HEAP32[$2 + 20 >> 2] + 8 >> 2] - 1 | 0) {
    case 0:
     tflite__ops__micro__depthwise_conv__EvalFloat_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteDepthwiseConvParams__2c_20tflite__ops__micro__depthwise_conv___28anonymous_20namespace_29__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], HEAP32[$2 + 32 >> 2], HEAP32[$2 + 28 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 16 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[$2 + 24 >> 2]);
     break label$6;

    case 8:
     tflite__ops__micro__depthwise_conv__EvalQuantizedPerChannel_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteDepthwiseConvParams__2c_20tflite__ops__micro__depthwise_conv___28anonymous_20namespace_29__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], HEAP32[$2 + 32 >> 2], HEAP32[$2 + 28 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 16 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[$2 + 24 >> 2]);
     break label$6;

    case 2:
     tflite__ops__micro__depthwise_conv__EvalQuantized_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteDepthwiseConvParams__2c_20tflite__ops__micro__depthwise_conv___28anonymous_20namespace_29__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], HEAP32[$2 + 32 >> 2], HEAP32[$2 + 28 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 16 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[$2 + 24 >> 2]);
     break label$6;

    default:
     break label$7;
    }
   }
   $0 = HEAP32[HEAP32[$2 + 40 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 40 >> 2];
   $3 = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 20 >> 2] + 8 >> 2]);
   HEAP32[$2 + 4 >> 2] = HEAP32[HEAP32[$2 + 20 >> 2] + 8 >> 2];
   HEAP32[$2 >> 2] = $3;
   FUNCTION_TABLE[$0 | 0]($1, 112123, $2);
   HEAP32[$2 + 44 >> 2] = 1;
   break label$5;
  }
  HEAP32[$2 + 44 >> 2] = 0;
 }
 __stack_pointer = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}

function jsfGetJSONForObjectItWithCallback($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0;
 $7 = __stack_pointer - 128 | 0;
 __stack_pointer = $7;
 HEAP32[$7 + 124 >> 2] = $0;
 HEAP32[$7 + 120 >> 2] = $1;
 HEAP32[$7 + 116 >> 2] = $2;
 HEAP32[$7 + 112 >> 2] = $3;
 HEAP32[$7 + 108 >> 2] = $4;
 HEAP32[$7 + 104 >> 2] = $5;
 HEAP8[$7 + 103 | 0] = $6;
 HEAP8[$7 + 102 | 0] = 0;
 HEAP32[$7 + 96 >> 2] = 0;
 while (1) {
  $0 = 0;
  if (jsvObjectIteratorHasValue_8(HEAP32[$7 + 124 >> 2]) & 1) {
   $0 = jspIsInterrupted() ^ -1;
  }
  if ($0 & 1) {
   HEAP32[$7 + 92 >> 2] = jsvObjectIteratorGetKey_5(HEAP32[$7 + 124 >> 2]);
   HEAP32[$7 + 88 >> 2] = jsvGetValueOfName(HEAP32[$7 + 92 >> 2]);
   $0 = 1;
   label$4: {
    if (jsvIsInternalObjectKey(HEAP32[$7 + 92 >> 2]) & 1) {
     break label$4;
    }
    if (HEAP32[$7 + 120 >> 2] & 16) {
     $0 = 1;
     if (jsvIsFunction(HEAP32[$7 + 88 >> 2]) & 1) {
      break label$4;
     }
    }
    if (HEAP32[$7 + 120 >> 2] & 64) {
     $0 = 1;
     if (jsvIsUndefined(HEAP32[$7 + 88 >> 2]) & 1) {
      break label$4;
     }
    }
    $0 = jsvIsGetterOrSetter(HEAP32[$7 + 88 >> 2]);
   }
   HEAP8[$7 + 87 | 0] = $0 & 1;
   if (!(HEAP8[$7 + 87 | 0] & 1)) {
    HEAP32[$7 + 96 >> 2] = HEAP32[$7 + 96 >> 2] + 1;
    if (!(HEAP8[$7 + 103 | 0] & 1)) {
     cbprintf(HEAP32[$7 + 108 >> 2], HEAP32[$7 + 104 >> 2], HEAP32[$7 + 120 >> 2] & 4 ? 127788 : 112648, 0);
    }
    $0 = 0;
    if (HEAP32[$7 + 120 >> 2] & 1) {
     $0 = jsonNeedsNewLine(HEAP32[$7 + 88 >> 2]);
    }
    HEAP8[$7 + 86 | 0] = $0 & 1;
    if (!(!(HEAP32[$7 + 120 >> 2] & 1) | HEAPU32[$7 + 96 >> 2] <= 4)) {
     HEAP8[$7 + 102 | 0] = 1;
    }
    if (HEAP32[$7 + 120 >> 2] & 2) {
     HEAP8[$7 + 102 | 0] = 1;
     HEAP8[$7 + 86 | 0] = 1;
    }
    if (HEAP8[$7 + 86 | 0] & 1 ? 1 : HEAP8[$7 + 102 | 0] & 1) {
     jsonNewLine(HEAP32[$7 + 112 >> 2], HEAP32[$7 + 116 >> 2], HEAP32[$7 + 108 >> 2], HEAP32[$7 + 104 >> 2]);
     HEAP8[$7 + 102 | 0] = 0;
     HEAP32[$7 + 96 >> 2] = 0;
    }
    HEAP8[$7 + 85 | 0] = 1;
    if (HEAP32[$7 + 120 >> 2] & 512) {
     label$15: {
      if (jsvIsIntegerish(HEAP32[$7 + 92 >> 2]) & 1) {
       HEAP8[$7 + 85 | 0] = 0;
       break label$15;
      }
      label$17: {
       if (!(jsvIsString(HEAP32[$7 + 92 >> 2]) & 1)) {
        break label$17;
       }
       if (jsvGetStringLength(HEAP32[$7 + 92 >> 2]) >>> 0 >= 63) {
        break label$17;
       }
       jsvGetString(HEAP32[$7 + 92 >> 2], $7 + 16 | 0, 64);
       if (isIDString($7 + 16 | 0) & 1) {
        HEAP8[$7 + 85 | 0] = 0;
       }
      }
     }
    }
    $1 = HEAP32[$7 + 108 >> 2];
    $2 = HEAP32[$7 + 104 >> 2];
    if (HEAP8[$7 + 85 | 0] & 1) {
     $0 = HEAP32[$7 + 120 >> 2] & 2048 ? 100641 : 100636;
    } else {
     $0 = 100631;
    }
    $3 = HEAP32[$7 + 92 >> 2];
    HEAP32[$7 + 4 >> 2] = HEAP32[$7 + 120 >> 2] & 4 ? 127719 : 110364;
    HEAP32[$7 >> 2] = $3;
    cbprintf($1, $2, $0, $7);
    if (HEAP8[$7 + 103 | 0] & 1) {
     HEAP8[$7 + 103 | 0] = 0;
    }
    jsfGetJSONWithCallback(HEAP32[$7 + 88 >> 2], HEAP32[$7 + 92 >> 2], HEAP32[$7 + 112 >> 2], HEAP32[$7 + 116 >> 2], HEAP32[$7 + 108 >> 2], HEAP32[$7 + 104 >> 2]);
    HEAP8[$7 + 102 | 0] = HEAP8[$7 + 86 | 0] & 1;
   }
   jsvUnLock2(HEAP32[$7 + 92 >> 2], HEAP32[$7 + 88 >> 2]);
   jsvObjectIteratorNext(HEAP32[$7 + 124 >> 2]);
   continue;
  }
  break;
 }
 __stack_pointer = $7 + 128 | 0;
 return HEAP8[$7 + 102 | 0] & 1;
}

function jswrap_espruino_decodeUTF8($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 128 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 120 >> 2] = $0;
 HEAP32[$3 + 116 >> 2] = $1;
 HEAP32[$3 + 112 >> 2] = $2;
 label$1: {
  if (!(jsvIsString(HEAP32[$3 + 120 >> 2]) & 1)) {
   jsExceptionHere(1, 103795, 0);
   HEAP32[$3 + 124 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 28 >> 2] = jsvNewFromEmptyString_9();
  jsvStringIteratorNew($3 + 72 | 0, HEAP32[$3 + 120 >> 2], 0);
  jsvStringIteratorNew($3 + 32 | 0, HEAP32[$3 + 28 >> 2], 0);
  while (1) {
   if (jsvStringIteratorHasChar_9($3 + 72 | 0) & 1) {
    HEAP8[$3 + 27 | 0] = jsvStringIteratorGetCharAndNext($3 + 72 | 0);
    HEAP32[$3 + 20 >> 2] = HEAPU8[$3 + 27 | 0];
    HEAP32[$3 + 16 >> 2] = 0;
    if (HEAPU8[$3 + 27 | 0] > 127) {
     label$6: {
      if ((HEAPU8[$3 + 27 | 0] & 224) == 192) {
       HEAP32[$3 + 20 >> 2] = HEAPU8[$3 + 27 | 0] & 31;
       HEAP32[$3 + 16 >> 2] = 1;
       break label$6;
      }
      label$8: {
       if ((HEAPU8[$3 + 27 | 0] & 240) == 224) {
        HEAP32[$3 + 20 >> 2] = HEAPU8[$3 + 27 | 0] & 15;
        HEAP32[$3 + 16 >> 2] = 2;
        break label$8;
       }
       if ((HEAPU8[$3 + 27 | 0] & 248) == 240) {
        HEAP32[$3 + 20 >> 2] = HEAPU8[$3 + 27 | 0] & 7;
        HEAP32[$3 + 16 >> 2] = 3;
       }
      }
     }
     while (1) {
      $0 = HEAP32[$3 + 16 >> 2];
      HEAP32[$3 + 16 >> 2] = $0 - 1;
      if ($0) {
       HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 20 >> 2] << 6 | jsvStringIteratorGetCharAndNext($3 + 72 | 0) & 63;
       continue;
      }
      break;
     }
    }
    label$13: {
     if (HEAP32[$3 + 20 >> 2] <= 255) {
      jsvStringIteratorAppend($3 + 32 | 0, HEAP32[$3 + 20 >> 2] << 24 >> 24);
      break label$13;
     }
     HEAP32[$3 + 12 >> 2] = 0;
     label$15: {
      if (jsvIsArray(HEAP32[$3 + 116 >> 2]) & 1) {
       HEAP32[$3 + 12 >> 2] = jsvGetArrayItem(HEAP32[$3 + 116 >> 2], HEAP32[$3 + 20 >> 2]);
       break label$15;
      }
      if (jsvIsObject(HEAP32[$3 + 116 >> 2]) & 1) {
       HEAP32[$3 + 8 >> 2] = jsvNewFromInteger(HEAP32[$3 + 20 >> 2]);
       HEAP32[$3 + 12 >> 2] = jsvSkipNameAndUnLock(jsvFindChildFromVar(HEAP32[$3 + 116 >> 2], HEAP32[$3 + 8 >> 2], 0));
       jsvUnLock(HEAP32[$3 + 8 >> 2]);
      }
     }
     label$18: {
      if (HEAP32[$3 + 12 >> 2]) {
       break label$18;
      }
      if (!(jsvIsFunction(HEAP32[$3 + 112 >> 2]) & 1)) {
       break label$18;
      }
      HEAP32[$3 + 4 >> 2] = jsvNewFromInteger(HEAP32[$3 + 20 >> 2]);
      HEAP32[$3 + 12 >> 2] = jspExecuteFunction(HEAP32[$3 + 112 >> 2], 0, 1, $3 + 4 | 0);
      jsvUnLock(HEAP32[$3 + 4 >> 2]);
     }
     label$19: {
      if (HEAP32[$3 + 12 >> 2]) {
       break label$19;
      }
      if (!(jsvIsString(HEAP32[$3 + 112 >> 2]) & 1)) {
       break label$19;
      }
      HEAP32[$3 + 12 >> 2] = jsvLockAgain(HEAP32[$3 + 112 >> 2]);
     }
     if (HEAP32[$3 + 12 >> 2]) {
      HEAP32[$3 + 12 >> 2] = jsvAsStringAndUnLock(HEAP32[$3 + 12 >> 2]);
      jsvStringIteratorAppendString($3 + 32 | 0, HEAP32[$3 + 12 >> 2], 0, 2147483647);
      jsvUnLock(HEAP32[$3 + 12 >> 2]);
     }
    }
    continue;
   }
   break;
  }
  jsvStringIteratorFree_11($3 + 72 | 0);
  jsvStringIteratorFree_11($3 + 32 | 0);
  HEAP32[$3 + 124 >> 2] = HEAP32[$3 + 28 >> 2];
 }
 __stack_pointer = $3 + 128 | 0;
 return HEAP32[$3 + 124 >> 2];
}

function tflite__ops__micro__conv__Eval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 HEAP32[$2 + 32 >> 2] = HEAP32[HEAP32[$2 + 36 >> 2] + 12 >> 2];
 HEAP32[$2 + 28 >> 2] = tflite__micro__GetEvalInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], 0);
 HEAP32[$2 + 24 >> 2] = tflite__micro__GetEvalInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], 1);
 label$1: {
  if ((tflite__NumInputs_28TfLiteNode_20const__29(HEAP32[$2 + 36 >> 2]) | 0) == 3) {
   $0 = tflite__micro__GetEvalInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], 2);
   break label$1;
  }
  $0 = 0;
 }
 HEAP32[$2 + 20 >> 2] = $0;
 HEAP32[$2 + 16 >> 2] = tflite__micro__GetEvalOutput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], 0);
 label$3: {
  if (!HEAP32[HEAP32[$2 + 36 >> 2] + 8 >> 2]) {
   break label$3;
  }
 }
 HEAP32[$2 + 12 >> 2] = HEAP32[HEAP32[$2 + 36 >> 2] + 8 >> 2];
 label$4: {
  label$5: {
   label$6: {
    switch (HEAP32[HEAP32[$2 + 28 >> 2] + 8 >> 2] - 1 | 0) {
    case 0:
     tflite__ops__micro__conv__EvalFloat_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteConvParams__2c_20tflite__ops__micro__conv__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__2c_20TfLiteEvalTensor__2c_20TfLiteEvalTensor__29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], HEAP32[$2 + 32 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[$2 + 28 >> 2], HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], 0, 0, HEAP32[$2 + 16 >> 2]);
     break label$5;

    case 8:
     tflite__ops__micro__conv__EvalQuantizedPerChannel_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteConvParams__2c_20tflite__ops__micro__conv__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__2c_20TfLiteEvalTensor__29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], HEAP32[$2 + 32 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[$2 + 28 >> 2], HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 16 >> 2], 0);
     break label$5;

    case 2:
     tflite__ops__micro__conv__EvalQuantized_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteConvParams__2c_20tflite__ops__micro__conv__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__2c_20TfLiteEvalTensor__2c_20TfLiteEvalTensor__29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], HEAP32[$2 + 32 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[$2 + 28 >> 2], HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], 0, 0, HEAP32[$2 + 16 >> 2]);
     break label$5;

    default:
     break label$6;
    }
   }
   $0 = HEAP32[HEAP32[$2 + 40 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 40 >> 2];
   $3 = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 28 >> 2] + 8 >> 2]);
   HEAP32[$2 + 4 >> 2] = HEAP32[HEAP32[$2 + 28 >> 2] + 8 >> 2];
   HEAP32[$2 >> 2] = $3;
   FUNCTION_TABLE[$0 | 0]($1, 112123, $2);
   HEAP32[$2 + 44 >> 2] = 1;
   break label$4;
  }
  HEAP32[$2 + 44 >> 2] = 0;
 }
 __stack_pointer = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}

function jsfBankCreateFileTable($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 192 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 184 >> 2] = $0;
 HEAP32[$1 + 176 >> 2] = 0;
 HEAP32[$1 + 180 >> 2] = 0;
 HEAP32[$1 + 168 >> 2] = 0;
 HEAP32[$1 + 172 >> 2] = 0;
 HEAP32[$1 + 160 >> 2] = 0;
 HEAP32[$1 + 164 >> 2] = 0;
 HEAP32[$1 + 152 >> 2] = 0;
 HEAP32[$1 + 156 >> 2] = 0;
 HEAP32[$1 + 148 >> 2] = 0;
 HEAP32[$1 + 144 >> 2] = HEAP32[$1 + 184 >> 2];
 if (jsfGetFileHeader(HEAP32[$1 + 144 >> 2], $1 + 152 | 0, 0) & 1) {
  while (1) {
   if (jsfIsRealFile($1 + 152 | 0) & 1) {
    HEAP32[$1 + 148 >> 2] = HEAP32[$1 + 148 >> 2] + 1;
   }
   if (jsfGetNextFileHeader($1 + 144 | 0, $1 + 152 | 0, 1) & 1) {
    continue;
   }
   break;
  }
 }
 jsfNameFromString($1 + 112 | 0, 108274);
 HEAP32[$1 + 56 >> 2] = HEAP32[$1 + 136 >> 2];
 $0 = HEAP32[$1 + 132 >> 2];
 $2 = HEAP32[$1 + 128 >> 2];
 HEAP32[$1 + 48 >> 2] = $2;
 HEAP32[$1 + 52 >> 2] = $0;
 $2 = HEAP32[$1 + 124 >> 2];
 $0 = HEAP32[$1 + 120 >> 2];
 HEAP32[$1 + 40 >> 2] = $0;
 HEAP32[$1 + 44 >> 2] = $2;
 $0 = HEAP32[$1 + 116 >> 2];
 $2 = HEAP32[$1 + 112 >> 2];
 HEAP32[$1 + 32 >> 2] = $2;
 HEAP32[$1 + 36 >> 2] = $0;
 HEAP32[$1 + 108 >> 2] = jsfFindFile($1 + 32 | 0, $1 + 152 | 0);
 if (HEAP32[$1 + 108 >> 2]) {
  jsfEraseFileInternal(HEAP32[$1 + 108 >> 2], $1 + 152 | 0, 0);
 }
 HEAP32[$1 + 104 >> 2] = HEAP32[$1 + 148 >> 2] << 5;
 label$5: {
  if (!HEAP32[$1 + 104 >> 2]) {
   HEAP32[$1 + 188 >> 2] = 0;
   break label$5;
  }
  $3 = HEAP32[$1 + 104 >> 2];
  HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 136 >> 2];
  $2 = HEAP32[$1 + 132 >> 2];
  $0 = HEAP32[$1 + 128 >> 2];
  HEAP32[$1 + 16 >> 2] = $0;
  HEAP32[$1 + 20 >> 2] = $2;
  $0 = HEAP32[$1 + 124 >> 2];
  $2 = HEAP32[$1 + 120 >> 2];
  HEAP32[$1 + 8 >> 2] = $2;
  HEAP32[$1 + 12 >> 2] = $0;
  $2 = HEAP32[$1 + 116 >> 2];
  $0 = HEAP32[$1 + 112 >> 2];
  HEAP32[$1 >> 2] = $0;
  HEAP32[$1 + 4 >> 2] = $2;
  HEAP32[$1 + 108 >> 2] = jsfCreateFile($1, $3, 32, $1 + 152 | 0);
  if (!HEAP32[$1 + 108 >> 2]) {
   HEAP32[$1 + 188 >> 2] = 0;
   break label$5;
  }
  HEAP32[$1 + 144 >> 2] = HEAP32[$1 + 184 >> 2];
  HEAP32[$1 + 100 >> 2] = HEAP32[$1 + 108 >> 2];
  if (jsfGetFileHeader(HEAP32[$1 + 144 >> 2], $1 + 152 | 0, 1) & 1) {
   while (1) {
    if (jsfIsRealFile($1 + 152 | 0) & 1) {
     $0 = HEAP32[$1 + 180 >> 2];
     $2 = HEAP32[$1 + 176 >> 2];
     HEAP32[$1 + 88 >> 2] = $2;
     HEAP32[$1 + 92 >> 2] = $0;
     $2 = HEAP32[$1 + 172 >> 2];
     $0 = HEAP32[$1 + 168 >> 2];
     HEAP32[$1 + 80 >> 2] = $0;
     HEAP32[$1 + 84 >> 2] = $2;
     $0 = HEAP32[$1 + 164 >> 2];
     $2 = HEAP32[$1 + 160 >> 2];
     HEAP32[$1 + 72 >> 2] = $2;
     HEAP32[$1 + 76 >> 2] = $0;
     $2 = HEAP32[$1 + 156 >> 2];
     $0 = HEAP32[$1 + 152 >> 2];
     HEAP32[$1 + 64 >> 2] = $0;
     HEAP32[$1 + 68 >> 2] = $2;
     HEAP32[$1 + 64 >> 2] = HEAP32[$1 + 144 >> 2] - HEAP32[$1 + 184 >> 2];
     jshFlashWriteAligned($1 - -64 | 0, HEAP32[$1 + 100 >> 2], 32);
     HEAP32[$1 + 100 >> 2] = HEAP32[$1 + 100 >> 2] + 32;
    }
    if (jsfGetNextFileHeader($1 + 144 | 0, $1 + 152 | 0, 1) & 1) {
     continue;
    }
    break;
   }
  }
  if (HEAP32[$1 + 184 >> 2] == 134217728) {
   HEAP32[46756] = HEAP32[$1 + 108 >> 2];
   HEAP32[46757] = HEAP32[$1 + 104 >> 2];
  }
  HEAP32[$1 + 188 >> 2] = HEAP32[$1 + 108 >> 2];
 }
 __stack_pointer = $1 + 192 | 0;
 return HEAP32[$1 + 188 >> 2];
}

function jsvNewFlatStringOfLength($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 40 >> 2] = $0;
 HEAP8[$1 + 39 | 0] = 1;
 HEAP32[$1 + 32 >> 2] = ((HEAP32[$1 + 40 >> 2] + 12 >>> 0) / 13 | 0) + 1;
 HEAP32[$1 + 28 >> 2] = 0;
 label$1: {
  if (HEAPU8[154466]) {
   HEAP8[186986] = HEAPU8[186986] | 32;
   HEAP32[$1 + 44 >> 2] = 0;
   break label$1;
  }
  while (1) {
   HEAP8[$1 + 27 | 0] = 1;
   while (1) {
    if (HEAP8[$1 + 27 | 0] & 1) {
     HEAP8[$1 + 27 | 0] = 0;
     HEAP8[154465] = 0;
     HEAP16[$1 + 24 >> 1] = 0;
     HEAP16[$1 + 22 >> 1] = HEAPU16[77234];
     HEAP16[$1 + 20 >> 1] = HEAPU16[$1 + 22 >> 1];
     HEAP32[$1 + 16 >> 2] = 0;
     while (1) {
      $0 = 0;
      label$8: {
       $0 = HEAPU16[$1 + 22 >> 1] ? HEAPU8[154465] ^ -1 : $0;
       if (!($0 & 1)) {
        break label$8;
       }
       HEAP32[$1 + 12 >> 2] = jsvGetAddressOf(HEAPU16[$1 + 22 >> 1]);
       HEAP16[$1 + 10 >> 1] = jsvGetNextSibling(HEAP32[$1 + 12 >> 2]);
       label$9: {
        if (!(!HEAP32[$1 + 16 >> 2] | HEAPU16[$1 + 10 >> 1] != (HEAPU16[$1 + 22 >> 1] + 1 | 0))) {
         HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 16 >> 2] + 1;
         if (HEAPU32[$1 + 16 >> 2] >= HEAPU32[$1 + 32 >> 2]) {
          HEAP32[$1 + 4 >> 2] = jsvGetAddressOf(HEAPU16[$1 + 10 >> 1]);
          HEAP16[$1 + 2 >> 1] = jsvGetNextSibling(HEAP32[$1 + 4 >> 2]);
          jshInterruptOff();
          if (!(HEAP8[154465] & 1)) {
           label$13: {
            if (HEAPU16[$1 + 24 >> 1]) {
             jsvSetNextSibling(jsvGetAddressOf(HEAPU16[$1 + 24 >> 1]), HEAPU16[$1 + 2 >> 1]);
             break label$13;
            }
            HEAP16[77234] = HEAPU16[$1 + 2 >> 1];
           }
           HEAP32[$1 + 28 >> 2] = jsvGetAddressOf(HEAPU16[$1 + 20 >> 1]);
           jsvResetVariable(HEAP32[$1 + 28 >> 2], 37);
           $0 = HEAP32[$1 + 28 >> 2];
           $2 = HEAP32[$1 + 40 >> 2];
           HEAP8[$0 | 0] = $2;
           HEAP8[$0 + 1 | 0] = $2 >>> 8;
           HEAP8[$0 + 2 | 0] = $2 >>> 16;
           HEAP8[$0 + 3 | 0] = $2 >>> 24;
          }
          jshInterruptOn();
          if (HEAP32[$1 + 28 >> 2]) {
           break label$8;
          }
         }
         break label$9;
        }
        HEAP16[$1 + 24 >> 1] = HEAPU16[$1 + 22 >> 1];
        HEAP16[$1 + 20 >> 1] = HEAPU16[$1 + 10 >> 1];
        label$15: {
         label$16: {
          if (HEAPU16[$1 + 20 >> 1] != 2500) {
           if (!(jsvGetAddressOf(HEAPU16[$1 + 20 >> 1] + 1 & 65535) & 3)) {
            break label$16;
           }
          }
          HEAP32[$1 + 16 >> 2] = 0;
          break label$15;
         }
         HEAP32[$1 + 16 >> 2] = 1;
        }
       }
       HEAP16[$1 + 22 >> 1] = HEAPU16[$1 + 10 >> 1];
       continue;
      }
      break;
     }
     if (HEAP8[154465] & 1) {
      HEAP8[$1 + 27 | 0] = 1;
     }
     continue;
    }
    break;
   }
   if (!(HEAP32[$1 + 28 >> 2] | !(HEAP8[$1 + 39 | 0] & 1))) {
    HEAP8[$1 + 39 | 0] = 0;
    jsvGarbageCollect();
    continue;
   }
   break;
  }
  if (!HEAP32[$1 + 28 >> 2]) {
   HEAP32[$1 + 44 >> 2] = 0;
   break label$1;
  }
  memset(HEAP32[$1 + 28 >> 2] + 13 | 0, 0, Math_imul(HEAP32[$1 + 32 >> 2] - 1 | 0, 13));
  HEAP8[154465] = 1;
  HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 28 >> 2];
 }
 __stack_pointer = $1 + 48 | 0;
 return HEAP32[$1 + 44 >> 2];
}

function jswrap_waveform_start($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $5 = __stack_pointer - 112 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 108 >> 2] = $0;
 HEAP8[$5 + 107 | 0] = $1;
 HEAPF64[$5 + 96 >> 3] = $2;
 HEAP32[$5 + 92 >> 2] = $3;
 HEAP8[$5 + 91 | 0] = $4;
 HEAP8[$5 + 90 | 0] = jsvObjectGetBoolChild(HEAP32[$5 + 108 >> 2], 103945) & 1;
 label$1: {
  if (HEAP8[$5 + 90 | 0] & 1) {
   jsExceptionHere(1, 103901, 0);
   break label$1;
  }
  if (!(jshIsPinValid(HEAPU8[$5 + 107 | 0]) & 1)) {
   jsExceptionHere(1, 102474, 0);
   break label$1;
  }
  $1 = __DOUBLE_BITS_10(HEAPF64[$5 + 96 >> 3]);
  $0 = $1;
  $1 = i64toi32_i32$HIGH_BITS;
  $1 = $1 & 2147483647;
  if (HEAPF64[$5 + 96 >> 3] < .001 ? 1 : ($1 | 0) == 2146435072 | $1 >>> 0 > 2146435072) {
   jsExceptionHere(1, 96376, 0);
   break label$1;
  }
  HEAP32[$5 + 80 >> 2] = 0;
  HEAP32[$5 + 84 >> 2] = 0;
  HEAP8[$5 + 79 | 0] = 0;
  label$7: {
   if (jsvIsObject(HEAP32[$5 + 92 >> 2]) & 1) {
    HEAPF64[$5 + 64 >> 3] = jsvObjectGetFloatChild(HEAP32[$5 + 92 >> 2], 105007);
    $1 = __DOUBLE_BITS_10(HEAPF64[$5 + 64 >> 3]);
    $4 = $1;
    $1 = i64toi32_i32$HIGH_BITS;
    $1 = $1 & 2147483647;
    if (!(!(HEAPF64[$5 + 64 >> 3] > 0) | (($1 | 0) == 2146435072 | $1 >>> 0 > 2146435072))) {
     $1 = jshGetTimeFromMilliseconds(HEAPF64[$5 + 64 >> 3] * 1e3);
     $0 = $1;
     $1 = i64toi32_i32$HIGH_BITS;
     $6 = $1;
     $1 = jshGetSystemTime();
     $4 = $1;
     $1 = i64toi32_i32$HIGH_BITS;
     $3 = $1 + ($0 >>> 0 < $4 >>> 0) | 0;
     HEAP32[$5 + 80 >> 2] = $0 - $4;
     $1 = $6;
     $3 = $1 - $3 | 0;
     HEAP32[$5 + 84 >> 2] = $3;
    }
    HEAP8[$5 + 79 | 0] = jsvObjectGetBoolChild(HEAP32[$5 + 92 >> 2], 98107) & 1;
    break label$7;
   }
   if (!(jsvIsUndefined(HEAP32[$5 + 92 >> 2]) & 1)) {
    HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 92 >> 2];
    jsExceptionHere(1, 98159, $5 + 16 | 0);
   }
  }
  HEAP8[$5 + 63 | 0] = 0;
  HEAP32[$5 + 56 >> 2] = jswrap_waveform_getBuffer(HEAP32[$5 + 108 >> 2], 0, $5 + 63 | 0);
  HEAP32[$5 + 52 >> 2] = jswrap_waveform_getBuffer(HEAP32[$5 + 108 >> 2], 1, 0);
  label$12: {
   if (HEAP8[$5 + 63 | 0] & 1) {
    HEAP8[$5 + 51 | 0] = HEAP8[$5 + 91 | 0] & 1 ? 6 : 7;
    break label$12;
   }
   HEAP8[$5 + 51 | 0] = HEAP8[$5 + 91 | 0] & 1 ? 4 : 5;
  }
  $3 = HEAP32[$5 + 80 >> 2];
  $1 = $3;
  $0 = HEAP32[$5 + 84 >> 2];
  $4 = $0;
  $0 = jshGetTimeFromMilliseconds(1e3 / HEAPF64[$5 + 96 >> 3]);
  $3 = i64toi32_i32$HIGH_BITS;
  $6 = $3;
  $3 = $4;
  $4 = $0;
  $0 = $6;
  $6 = $0;
  $7 = HEAPU8[$5 + 107 | 0];
  $8 = HEAP32[$5 + 56 >> 2];
  if (HEAP8[$5 + 79 | 0] & 1) {
   if (HEAP32[$5 + 52 >> 2]) {
    $0 = HEAP32[$5 + 52 >> 2];
   } else {
    $0 = HEAP32[$5 + 56 >> 2];
   }
  } else {
   $0 = 0;
  }
  if (!(jstStartSignal($1, $3, $4, $6, $7, $8, $0, HEAPU8[$5 + 51 | 0]) & 1)) {
   jsWarn(101164, 0);
  }
  jsvUnLock2(HEAP32[$5 + 56 >> 2], HEAP32[$5 + 52 >> 2]);
  jsvObjectSetChildAndUnLock(HEAP32[$5 + 108 >> 2], 103945, jsvNewFromBool(1));
  jsvObjectSetChildAndUnLock(HEAP32[$5 + 108 >> 2], 101604, jsvNewFromFloat(HEAPF64[$5 + 96 >> 3]));
  HEAP32[$5 + 44 >> 2] = jsvObjectGetChild(HEAP32[46748], 104344, 3);
  if (!HEAP32[$5 + 44 >> 2]) {
   break label$1;
  }
  jsvArrayPush(HEAP32[$5 + 44 >> 2], HEAP32[$5 + 108 >> 2]);
  jsvUnLock(HEAP32[$5 + 44 >> 2]);
 }
 __stack_pointer = $5 + 112 | 0;
}

function graphicsFillRectDevice($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 32 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 28 >> 2] = $0;
 HEAP32[$6 + 24 >> 2] = $1;
 HEAP32[$6 + 20 >> 2] = $2;
 HEAP32[$6 + 16 >> 2] = $3;
 HEAP32[$6 + 12 >> 2] = $4;
 HEAP32[$6 + 8 >> 2] = $5;
 if (HEAP32[$6 + 24 >> 2] > HEAP32[$6 + 16 >> 2]) {
  HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 24 >> 2];
  HEAP32[$6 + 24 >> 2] = HEAP32[$6 + 16 >> 2];
  HEAP32[$6 + 16 >> 2] = HEAP32[$6 + 4 >> 2];
 }
 if (HEAP32[$6 + 20 >> 2] > HEAP32[$6 + 12 >> 2]) {
  HEAP32[$6 >> 2] = HEAP32[$6 + 20 >> 2];
  HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 12 >> 2];
  HEAP32[$6 + 12 >> 2] = HEAP32[$6 >> 2];
 }
 $0 = HEAP32[$6 + 28 >> 2];
 if (HEAP32[$6 + 24 >> 2] < (HEAPU8[$0 + 32 | 0] | HEAPU8[$0 + 33 | 0] << 8)) {
  $0 = HEAP32[$6 + 28 >> 2];
  HEAP32[$6 + 24 >> 2] = HEAPU8[$0 + 32 | 0] | HEAPU8[$0 + 33 | 0] << 8;
 }
 $0 = HEAP32[$6 + 28 >> 2];
 if (HEAP32[$6 + 20 >> 2] < (HEAPU8[$0 + 34 | 0] | HEAPU8[$0 + 35 | 0] << 8)) {
  $0 = HEAP32[$6 + 28 >> 2];
  HEAP32[$6 + 20 >> 2] = HEAPU8[$0 + 34 | 0] | HEAPU8[$0 + 35 | 0] << 8;
 }
 $0 = HEAP32[$6 + 28 >> 2];
 if (HEAP32[$6 + 16 >> 2] > (HEAPU8[$0 + 36 | 0] | HEAPU8[$0 + 37 | 0] << 8)) {
  $0 = HEAP32[$6 + 28 >> 2];
  HEAP32[$6 + 16 >> 2] = HEAPU8[$0 + 36 | 0] | HEAPU8[$0 + 37 | 0] << 8;
 }
 $0 = HEAP32[$6 + 28 >> 2];
 if (HEAP32[$6 + 12 >> 2] > (HEAPU8[$0 + 38 | 0] | HEAPU8[$0 + 39 | 0] << 8)) {
  $0 = HEAP32[$6 + 28 >> 2];
  HEAP32[$6 + 12 >> 2] = HEAPU8[$0 + 38 | 0] | HEAPU8[$0 + 39 | 0] << 8;
 }
 label$7: {
  if (HEAP32[$6 + 16 >> 2] < HEAP32[$6 + 24 >> 2] | HEAP32[$6 + 12 >> 2] < HEAP32[$6 + 20 >> 2]) {
   break label$7;
  }
  $0 = HEAP32[$6 + 28 >> 2];
  if (HEAP32[$6 + 24 >> 2] < (HEAPU8[$0 + 40 | 0] | HEAPU8[$0 + 41 | 0] << 8) << 16 >> 16) {
   $0 = HEAP32[$6 + 28 >> 2];
   $1 = HEAP32[$6 + 24 >> 2];
   HEAP8[$0 + 40 | 0] = $1;
   HEAP8[$0 + 41 | 0] = $1 >>> 8;
  }
  $0 = HEAP32[$6 + 28 >> 2];
  if (HEAP32[$6 + 16 >> 2] > (HEAPU8[$0 + 44 | 0] | HEAPU8[$0 + 45 | 0] << 8) << 16 >> 16) {
   $0 = HEAP32[$6 + 28 >> 2];
   $1 = HEAP32[$6 + 16 >> 2];
   HEAP8[$0 + 44 | 0] = $1;
   HEAP8[$0 + 45 | 0] = $1 >>> 8;
  }
  $0 = HEAP32[$6 + 28 >> 2];
  if (HEAP32[$6 + 20 >> 2] < (HEAPU8[$0 + 42 | 0] | HEAPU8[$0 + 43 | 0] << 8) << 16 >> 16) {
   $0 = HEAP32[$6 + 28 >> 2];
   $1 = HEAP32[$6 + 20 >> 2];
   HEAP8[$0 + 42 | 0] = $1;
   HEAP8[$0 + 43 | 0] = $1 >>> 8;
  }
  $0 = HEAP32[$6 + 28 >> 2];
  if (HEAP32[$6 + 12 >> 2] > (HEAPU8[$0 + 46 | 0] | HEAPU8[$0 + 47 | 0] << 8) << 16 >> 16) {
   $0 = HEAP32[$6 + 28 >> 2];
   $1 = HEAP32[$6 + 12 >> 2];
   HEAP8[$0 + 46 | 0] = $1;
   HEAP8[$0 + 47 | 0] = $1 >>> 8;
  }
  if (!(HEAP32[$6 + 24 >> 2] != HEAP32[$6 + 16 >> 2] | HEAP32[$6 + 20 >> 2] != HEAP32[$6 + 12 >> 2])) {
   $0 = HEAP32[$6 + 28 >> 2];
   FUNCTION_TABLE[HEAPU8[$0 + 52 | 0] | HEAPU8[$0 + 53 | 0] << 8 | (HEAPU8[$0 + 54 | 0] << 16 | HEAPU8[$0 + 55 | 0] << 24)](HEAP32[$6 + 28 >> 2], HEAP32[$6 + 24 >> 2], HEAP32[$6 + 20 >> 2], HEAP32[$6 + 8 >> 2]);
   break label$7;
  }
  $0 = HEAP32[$6 + 28 >> 2];
  FUNCTION_TABLE[HEAPU8[$0 + 56 | 0] | HEAPU8[$0 + 57 | 0] << 8 | (HEAPU8[$0 + 58 | 0] << 16 | HEAPU8[$0 + 59 | 0] << 24)](HEAP32[$6 + 28 >> 2], HEAP32[$6 + 24 >> 2], HEAP32[$6 + 20 >> 2], HEAP32[$6 + 16 >> 2], HEAP32[$6 + 12 >> 2], HEAP32[$6 + 8 >> 2]);
 }
 __stack_pointer = $6 + 32 | 0;
}

function jsvGetInteger($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = __stack_pointer + -64 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 56 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 56 >> 2]) {
   HEAP32[$1 + 60 >> 2] = 0;
   break label$1;
  }
  if (jsvIsNull(HEAP32[$1 + 56 >> 2]) & 1) {
   HEAP32[$1 + 60 >> 2] = 0;
   break label$1;
  }
  if (jsvIsUndefined(HEAP32[$1 + 56 >> 2]) & 1) {
   HEAP32[$1 + 60 >> 2] = 0;
   break label$1;
  }
  label$5: {
   if (!(jsvIsIntegerish(HEAP32[$1 + 56 >> 2]) & 1)) {
    if (!(jsvIsArrayBufferName(HEAP32[$1 + 56 >> 2]) & 1)) {
     break label$5;
    }
   }
   $0 = HEAP32[$1 + 56 >> 2];
   HEAP32[$1 + 60 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
   break label$1;
  }
  label$7: {
   if (!(jsvIsArray(HEAP32[$1 + 56 >> 2]) & 1)) {
    if (!(jsvIsArrayBuffer(HEAP32[$1 + 56 >> 2]) & 1)) {
     break label$7;
    }
   }
   HEAP32[$1 + 52 >> 2] = jsvGetLength(HEAP32[$1 + 56 >> 2]);
   if (!HEAP32[$1 + 52 >> 2]) {
    HEAP32[$1 + 60 >> 2] = 0;
    break label$1;
   }
   if (HEAP32[$1 + 52 >> 2] == 1) {
    if (jsvIsArrayBuffer(HEAP32[$1 + 56 >> 2]) & 1) {
     HEAP32[$1 + 60 >> 2] = jsvGetIntegerAndUnLock(jsvArrayBufferGet(HEAP32[$1 + 56 >> 2], 0));
     break label$1;
    }
    HEAP32[$1 + 60 >> 2] = jsvGetIntegerAndUnLock(jsvSkipNameAndUnLock(jsvGetArrayItem(HEAP32[$1 + 56 >> 2], 0)));
    break label$1;
   }
  }
  if (jsvIsFloat(HEAP32[$1 + 56 >> 2]) & 1) {
   $2 = HEAP32[$1 + 56 >> 2];
   $4 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
   $0 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
   wasm2js_scratch_store_i32(0, $4 | 0);
   wasm2js_scratch_store_i32(1, $0 | 0);
   $0 = __DOUBLE_BITS(+wasm2js_scratch_load_f64());
   $2 = $0;
   $4 = i64toi32_i32$HIGH_BITS;
   $0 = $4 & 2147483647;
   if (!(($0 | 0) == 2146435072 | $0 >>> 0 > 2146435072)) {
    $0 = HEAP32[$1 + 56 >> 2];
    $4 = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
    $0 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
    wasm2js_scratch_store_i32(0, $4 | 0);
    wasm2js_scratch_store_i32(1, $0 | 0);
    $3 = +wasm2js_scratch_load_f64();
    label$15: {
     if (Math_abs($3) < 0x8000000000000000) {
      $0 = Math_abs($3) >= 1 ? ~~($3 > 0 ? Math_min(Math_floor($3 * 2.3283064365386963e-10), 4294967295) : Math_ceil(($3 - +(~~$3 >>> 0 >>> 0)) * 2.3283064365386963e-10)) >>> 0 : 0;
      $5 = ~~$3 >>> 0;
      break label$15;
     }
     $0 = -2147483648;
    }
    HEAP32[$1 + 60 >> 2] = $5;
    break label$1;
   }
   HEAP32[$1 + 60 >> 2] = 0;
   break label$1;
  }
  label$17: {
   if (!(jsvIsString(HEAP32[$1 + 56 >> 2]) & 1)) {
    break label$17;
   }
   if (!(jsvIsStringNumericInt(HEAP32[$1 + 56 >> 2], 1) & 1)) {
    break label$17;
   }
   label$18: {
    if ((jsvGetString(HEAP32[$1 + 56 >> 2], $1 + 16 | 0, 32) | 0) == 32) {
     jsExceptionHere(1, 101497, 0);
     break label$18;
    }
    $0 = stringToInt($1 + 16 | 0);
    HEAP32[$1 + 60 >> 2] = $0;
    break label$1;
   }
  }
  HEAP32[$1 + 60 >> 2] = 0;
 }
 __stack_pointer = $1 - -64 | 0;
 return HEAP32[$1 + 60 >> 2];
}

function jspeStatementDoOrWhile($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 160 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 155 | 0] = $0;
 HEAP8[$1 + 147 | 0] = 1;
 HEAP8[$1 + 146 | 0] = 0;
 HEAP8[$1 + 103 | 0] = (HEAP32[46755] & 512) != 0;
 label$1: {
  label$2: {
   if (HEAP8[$1 + 155 | 0] & 1) {
    jslGetNextToken();
    jslCharPosFromLex($1 + 104 | 0);
    if (!(jslMatch(40) & 1)) {
     jslCharPosFree($1 + 104 | 0);
     break label$1;
    }
    HEAP32[$1 + 148 >> 2] = jspeExpression();
    if ((HEAP32[46755] & 63) == 1) {
     $2 = jsvGetBoolAndUnLock(jsvSkipName(HEAP32[$1 + 148 >> 2]));
    }
    HEAP8[$1 + 147 | 0] = $2 & 1;
    jsvUnLock(HEAP32[$1 + 148 >> 2]);
    jslCharPosFromLex($1 + 56 | 0);
    if (!(jslMatch(41) & 1)) {
     jslCharPosFree($1 + 56 | 0);
     jslCharPosFree($1 + 104 | 0);
     break label$1;
    }
    break label$2;
   }
   jslCharPosFromLex($1 + 56 | 0);
   if (!(jslMatch(165) & 1)) {
    jslCharPosFree($1 + 56 | 0);
    break label$1;
   }
  }
  HEAP32[$1 + 52 >> 2] = HEAP32[46755];
  if (!(HEAP8[$1 + 147 | 0] & 1)) {
   jspSetNoExecute();
  }
  HEAP32[46755] = HEAP32[46755] | 512;
  jsvUnLock(jspeBlockOrStatement());
  if (!(HEAP8[$1 + 103 | 0] & 1)) {
   HEAP32[46755] = HEAP32[46755] & -513;
  }
  HEAP8[$1 + 146 | 0] = jspeCheckBreakContinue() & 1 | HEAP8[$1 + 146 | 0] & 1;
  if (!(HEAP8[$1 + 147 | 0] & 1)) {
   HEAP32[46755] = HEAP32[46755] & -1664 | HEAP32[$1 + 52 >> 2] & 1663;
  }
  if (!(HEAP8[$1 + 155 | 0] & 1)) {
   if (!(jslMatch(166) & 1)) {
    jslCharPosFree($1 + 56 | 0);
    break label$1;
   }
   jslCharPosFromLex($1 + 104 | 0);
   if (!(jslMatch(40) & 1)) {
    jslCharPosFree($1 + 56 | 0);
    jslCharPosFree($1 + 104 | 0);
    break label$1;
   }
   HEAP32[$1 + 148 >> 2] = jspeExpression();
   if ((HEAP32[46755] & 63) == 1) {
    $3 = jsvGetBoolAndUnLock(jsvSkipName(HEAP32[$1 + 148 >> 2]));
   }
   HEAP8[$1 + 147 | 0] = $3 & 1;
   jsvUnLock(HEAP32[$1 + 148 >> 2]);
   if (!(jslMatch(41) & 1)) {
    jslCharPosFree($1 + 56 | 0);
    jslCharPosFree($1 + 104 | 0);
    break label$1;
   }
  }
  jslCharPosNew($1 + 8 | 0, HEAP32[HEAP32[38615] + 84 >> 2], HEAP32[HEAP32[38615] + 4 >> 2]);
  HEAP32[$1 + 4 >> 2] = 0;
  while (1) {
   $0 = 0;
   $0 = HEAP8[$1 + 146 | 0] & 1 ? $0 : HEAPU8[$1 + 147 | 0];
   if ($0 & 1) {
    if (HEAP32[$1 + 4 >> 2] ? 1 : HEAP8[$1 + 155 | 0] & 1) {
     jslSeekToP($1 + 104 | 0);
     HEAP32[$1 + 148 >> 2] = jspeExpression();
     $0 = 0;
     if ((HEAP32[46755] & 63) == 1) {
      $0 = jsvGetBoolAndUnLock(jsvSkipName(HEAP32[$1 + 148 >> 2]));
     }
     HEAP8[$1 + 147 | 0] = $0 & 1;
     jsvUnLock(HEAP32[$1 + 148 >> 2]);
    }
    if (HEAP8[$1 + 147 | 0] & 1) {
     jslSeekToP($1 + 56 | 0);
     HEAP32[46755] = HEAP32[46755] | 512;
     jspDebuggerLoopIfCtrlC();
     jsvUnLock(jspeBlockOrStatement());
     if (!(HEAP8[$1 + 103 | 0] & 1)) {
      HEAP32[46755] = HEAP32[46755] & -513;
     }
     HEAP8[$1 + 146 | 0] = jspeCheckBreakContinue() & 1 | HEAP8[$1 + 146 | 0] & 1;
    }
    HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
    continue;
   }
   break;
  }
  jslSeekToP($1 + 8 | 0);
  jslCharPosFree($1 + 104 | 0);
  jslCharPosFree($1 + 56 | 0);
  jslCharPosFree($1 + 8 | 0);
 }
 HEAP32[$1 + 156 >> 2] = 0;
 __stack_pointer = $1 + 160 | 0;
 return HEAP32[$1 + 156 >> 2];
}

function tflite__ops__micro__conv__EvalFloat_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteConvParams__2c_20tflite__ops__micro__conv__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__2c_20TfLiteEvalTensor__2c_20TfLiteEvalTensor__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 var $10 = 0;
 $10 = __stack_pointer - 224 | 0;
 __stack_pointer = $10;
 HEAP32[$10 + 220 >> 2] = $0;
 HEAP32[$10 + 216 >> 2] = $1;
 HEAP32[$10 + 212 >> 2] = $2;
 HEAP32[$10 + 208 >> 2] = $3;
 HEAP32[$10 + 204 >> 2] = $4;
 HEAP32[$10 + 200 >> 2] = $5;
 HEAP32[$10 + 196 >> 2] = $6;
 HEAP32[$10 + 192 >> 2] = $7;
 HEAP32[$10 + 188 >> 2] = $8;
 HEAP32[$10 + 184 >> 2] = $9;
 void_20tflite__CalculateActivationRange_float__28TfLiteFusedActivation_2c_20float__2c_20float__29(HEAP32[HEAP32[$10 + 212 >> 2] + 12 >> 2], $10 + 180 | 0, $10 + 176 | 0);
 HEAP8[$10 + 120 | 0] = tflite__ops__micro__conv__RuntimePaddingType_28TfLitePadding_29(HEAP32[HEAP32[$10 + 212 >> 2] >> 2]);
 HEAP16[$10 + 122 >> 1] = HEAP32[HEAP32[$10 + 208 >> 2] >> 2];
 HEAP16[$10 + 124 >> 1] = HEAP32[HEAP32[$10 + 208 >> 2] + 4 >> 2];
 HEAP16[$10 + 130 >> 1] = HEAP32[HEAP32[$10 + 212 >> 2] + 4 >> 2];
 HEAP16[$10 + 132 >> 1] = HEAP32[HEAP32[$10 + 212 >> 2] + 8 >> 2];
 HEAP16[$10 + 134 >> 1] = HEAP32[HEAP32[$10 + 212 >> 2] + 16 >> 2];
 HEAP16[$10 + 136 >> 1] = HEAP32[HEAP32[$10 + 212 >> 2] + 20 >> 2];
 HEAPF32[$10 + 168 >> 2] = HEAPF32[$10 + 180 >> 2];
 HEAPF32[$10 + 172 >> 2] = HEAPF32[$10 + 176 >> 2];
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($10 + 96 | 0, HEAP32[$10 + 204 >> 2]);
 $0 = float_20const__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor_20const__29(HEAP32[$10 + 204 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($10 + 72 | 0, HEAP32[$10 + 200 >> 2]);
 $1 = float_20const__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor_20const__29(HEAP32[$10 + 200 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($10 + 48 | 0, HEAP32[$10 + 196 >> 2]);
 $2 = float_20const__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor_20const__29(HEAP32[$10 + 196 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($10 + 24 | 0, HEAP32[$10 + 184 >> 2]);
 $3 = float__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor__29(HEAP32[$10 + 184 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($10, HEAP32[$10 + 192 >> 2]);
 tflite__reference_ops__Conv_28tflite__ConvParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__2c_20tflite__RuntimeShape_20const__2c_20float__29($10 + 120 | 0, $10 + 96 | 0, $0, $10 + 72 | 0, $1, $10 + 48 | 0, $2, $10 + 24 | 0, $3, $10, float__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor__29(HEAP32[$10 + 192 >> 2]));
 tflite__RuntimeShape___RuntimeShape_28_29($10);
 tflite__RuntimeShape___RuntimeShape_28_29($10 + 24 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($10 + 48 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($10 + 72 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($10 + 96 | 0);
 __stack_pointer = $10 + 224 | 0;
}

function tflite__ops__micro__depthwise_conv__EvalQuantized_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteDepthwiseConvParams__2c_20tflite__ops__micro__depthwise_conv___28anonymous_20namespace_29__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__29($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0;
 $8 = __stack_pointer - 208 | 0;
 __stack_pointer = $8;
 HEAP32[$8 + 204 >> 2] = $0;
 HEAP32[$8 + 200 >> 2] = $1;
 HEAP32[$8 + 196 >> 2] = $2;
 HEAP32[$8 + 192 >> 2] = $3;
 HEAP32[$8 + 188 >> 2] = $4;
 HEAP32[$8 + 184 >> 2] = $5;
 HEAP32[$8 + 180 >> 2] = $6;
 HEAP32[$8 + 176 >> 2] = $7;
 HEAP32[$8 + 172 >> 2] = 0 - HEAP32[HEAP32[$8 + 192 >> 2] + 16 >> 2];
 HEAP32[$8 + 168 >> 2] = 0 - HEAP32[HEAP32[$8 + 192 >> 2] + 20 >> 2];
 HEAP32[$8 + 164 >> 2] = HEAP32[HEAP32[$8 + 192 >> 2] + 24 >> 2];
 HEAP8[$8 + 96 | 0] = 1;
 HEAP16[$8 + 98 >> 1] = HEAP32[HEAP32[$8 + 192 >> 2] >> 2];
 HEAP16[$8 + 100 >> 1] = HEAP32[HEAP32[$8 + 192 >> 2] + 4 >> 2];
 HEAP16[$8 + 106 >> 1] = HEAP32[HEAP32[$8 + 196 >> 2] + 4 >> 2];
 HEAP16[$8 + 108 >> 1] = HEAP32[HEAP32[$8 + 196 >> 2] + 8 >> 2];
 HEAP16[$8 + 110 >> 1] = HEAP32[HEAP32[$8 + 196 >> 2] + 20 >> 2];
 HEAP16[$8 + 112 >> 1] = HEAP32[HEAP32[$8 + 196 >> 2] + 24 >> 2];
 HEAP16[$8 + 114 >> 1] = HEAP32[HEAP32[$8 + 196 >> 2] + 12 >> 2];
 HEAP32[$8 + 136 >> 2] = HEAP32[HEAP32[$8 + 192 >> 2] + 44 >> 2];
 HEAP32[$8 + 140 >> 2] = HEAP32[HEAP32[$8 + 192 >> 2] + 48 >> 2];
 HEAP32[$8 + 116 >> 2] = HEAP32[$8 + 172 >> 2];
 HEAP32[$8 + 120 >> 2] = HEAP32[$8 + 168 >> 2];
 HEAP32[$8 + 124 >> 2] = HEAP32[$8 + 164 >> 2];
 HEAP32[$8 + 128 >> 2] = HEAP32[HEAP32[$8 + 192 >> 2] + 28 >> 2];
 HEAP32[$8 + 132 >> 2] = 0 - HEAP32[HEAP32[$8 + 192 >> 2] + 32 >> 2];
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($8 + 72 | 0, HEAP32[$8 + 188 >> 2]);
 $0 = unsigned_20char_20const__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor_20const__29(HEAP32[$8 + 188 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($8 + 48 | 0, HEAP32[$8 + 184 >> 2]);
 $1 = unsigned_20char_20const__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor_20const__29(HEAP32[$8 + 184 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($8 + 24 | 0, HEAP32[$8 + 180 >> 2]);
 $2 = int_20const__20tflite__micro__GetTensorData_int__28TfLiteEvalTensor_20const__29(HEAP32[$8 + 180 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($8, HEAP32[$8 + 176 >> 2]);
 tflite__reference_ops__DepthwiseConv_28tflite__DepthwiseParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($8 + 96 | 0, $8 + 72 | 0, $0, $8 + 48 | 0, $1, $8 + 24 | 0, $2, $8, unsigned_20char__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor__29(HEAP32[$8 + 176 >> 2]));
 tflite__RuntimeShape___RuntimeShape_28_29($8);
 tflite__RuntimeShape___RuntimeShape_28_29($8 + 24 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($8 + 48 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($8 + 72 | 0);
 __stack_pointer = $8 + 208 | 0;
}

function jswrap_graphics_quadraticBezier($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 160 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 152 >> 2] = $0;
 HEAP32[$3 + 148 >> 2] = $1;
 HEAP32[$3 + 144 >> 2] = $2;
 HEAP32[$3 + 140 >> 2] = jsvNewEmptyArray();
 label$1: {
  if (!HEAP32[$3 + 140 >> 2]) {
   HEAP32[$3 + 156 >> 2] = 0;
   break label$1;
  }
  if ((jsvGetArrayLength(HEAP32[$3 + 148 >> 2]) | 0) != 6) {
   HEAP32[$3 + 156 >> 2] = HEAP32[$3 + 140 >> 2];
   break label$1;
  }
  HEAP32[$3 + 136 >> 2] = 5;
  HEAP32[$3 + 108 >> 2] = 0;
  jsvIteratorNew($3 + 48 | 0, HEAP32[$3 + 148 >> 2], 1);
  HEAP32[$3 + 44 >> 2] = 0;
  while (1) {
   if (HEAP32[$3 + 44 >> 2] < 6) {
    $0 = jsvIteratorGetIntegerValue($3 + 48 | 0);
    HEAP32[($3 + 112 | 0) + (HEAP32[$3 + 44 >> 2] << 2) >> 2] = $0;
    jsvIteratorNext($3 + 48 | 0);
    HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 44 >> 2] + 1;
    continue;
   }
   break;
  }
  jsvIteratorFree($3 + 48 | 0);
  if (jsvIsObject(HEAP32[$3 + 144 >> 2]) & 1) {
   HEAP32[$3 + 108 >> 2] = jsvObjectGetIntegerChild(HEAP32[$3 + 144 >> 2], 97544);
  }
  HEAP32[$3 + 40 >> 2] = 4096;
  HEAP32[$3 + 36 >> 2] = 12;
  HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 112 >> 2] - HEAP32[$3 + 128 >> 2];
  if (HEAP32[$3 + 32 >> 2] < 0) {
   HEAP32[$3 + 32 >> 2] = 0 - HEAP32[$3 + 32 >> 2];
  }
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 116 >> 2] - HEAP32[$3 + 132 >> 2];
  if (HEAP32[$3 + 28 >> 2] < 0) {
   HEAP32[$3 + 28 >> 2] = 0 - HEAP32[$3 + 28 >> 2];
  }
  if (HEAP32[$3 + 32 >> 2] < HEAP32[$3 + 28 >> 2]) {
   $0 = HEAP32[$3 + 32 >> 2];
  } else {
   $0 = HEAP32[$3 + 28 >> 2];
  }
  HEAP32[$3 + 24 >> 2] = $0;
  if (!HEAP32[$3 + 24 >> 2]) {
   HEAP32[$3 + 24 >> 2] = 1;
  }
  HEAP32[$3 + 20 >> 2] = (HEAP32[$3 + 136 >> 2] << 12) / HEAP32[$3 + 24 >> 2];
  if (HEAP32[$3 + 20 >> 2] >= 4096) {
   HEAP32[$3 + 20 >> 2] = 1365;
  }
  if (HEAP32[$3 + 20 >> 2] < 409) {
   HEAP32[$3 + 20 >> 2] = 409;
  }
  if (HEAP32[$3 + 108 >> 2] > 0) {
   HEAP32[$3 + 20 >> 2] = 4096 / HEAP32[$3 + 108 >> 2];
  }
  jsvArrayPush2Int(HEAP32[$3 + 140 >> 2], HEAP32[$3 + 112 >> 2], HEAP32[$3 + 116 >> 2]);
  HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 20 >> 2];
  while (1) {
   if (HEAP32[$3 + 16 >> 2] <= 4096) {
    HEAP32[$3 + 12 >> 2] = Math_imul(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 16 >> 2]) >> 12;
    HEAP32[$3 + 8 >> 2] = Math_imul(4096 - HEAP32[$3 + 16 >> 2] | 0, 4096 - HEAP32[$3 + 16 >> 2] | 0) >> 12;
    HEAP32[$3 + 4 >> 2] = Math_imul(HEAP32[$3 + 16 >> 2], 4096 - HEAP32[$3 + 16 >> 2] << 1) >> 12;
    jsvArrayPush2Int(HEAP32[$3 + 140 >> 2], ((Math_imul(HEAP32[$3 + 112 >> 2], HEAP32[$3 + 8 >> 2]) + Math_imul(HEAP32[$3 + 120 >> 2], HEAP32[$3 + 4 >> 2]) | 0) + Math_imul(HEAP32[$3 + 128 >> 2], HEAP32[$3 + 12 >> 2]) | 0) + 2048 >> 12, ((Math_imul(HEAP32[$3 + 116 >> 2], HEAP32[$3 + 8 >> 2]) + Math_imul(HEAP32[$3 + 124 >> 2], HEAP32[$3 + 4 >> 2]) | 0) + Math_imul(HEAP32[$3 + 132 >> 2], HEAP32[$3 + 12 >> 2]) | 0) + 2048 >> 12);
    HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 20 >> 2] + HEAP32[$3 + 16 >> 2];
    continue;
   }
   break;
  }
  jsvArrayPush2Int(HEAP32[$3 + 140 >> 2], HEAP32[$3 + 128 >> 2], HEAP32[$3 + 132 >> 2]);
  HEAP32[$3 + 156 >> 2] = HEAP32[$3 + 140 >> 2];
 }
 __stack_pointer = $3 + 160 | 0;
 return HEAP32[$3 + 156 >> 2];
}

function jswrap_pipe($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP32[$3 + 36 >> 2] = $2;
 if (!(!HEAP32[$3 + 44 >> 2] | !HEAP32[$3 + 40 >> 2])) {
  jsvLockAgain(HEAP32[$3 + 44 >> 2]);
  HEAP32[$3 + 32 >> 2] = jspNewObject(0, 104987);
  HEAP32[$3 + 28 >> 2] = pipeGetArray(1);
  if (!(!HEAP32[$3 + 32 >> 2] | !HEAP32[$3 + 28 >> 2])) {
   if (jsvIsString(HEAP32[$3 + 44 >> 2]) & 1) {
    HEAP32[$3 + 24 >> 2] = jspExecuteJSFunction(112650, 0, 1, $3 + 44 | 0);
    jsvUnLock(HEAP32[$3 + 44 >> 2]);
    HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 24 >> 2];
   }
   HEAP32[$3 + 20 >> 2] = jspGetNamedField(HEAP32[$3 + 44 >> 2], 107017, 0);
   HEAP32[$3 + 16 >> 2] = jspGetNamedField(HEAP32[$3 + 40 >> 2], 104604, 0);
   label$5: {
    if (jsvIsFunction(HEAP32[$3 + 20 >> 2]) & 1) {
     if (jsvIsFunction(HEAP32[$3 + 16 >> 2]) & 1) {
      HEAP32[$3 + 12 >> 2] = 64;
      HEAP8[$3 + 11 | 0] = 1;
      label$8: {
       if (jsvIsObject(HEAP32[$3 + 36 >> 2]) & 1) {
        HEAP32[$3 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 36 >> 2], 104613);
        if (HEAP32[$3 + 4 >> 2]) {
         jsvObjectSetChild(HEAP32[$3 + 32 >> 2], 104610, HEAP32[$3 + 4 >> 2]);
         jsvUnLock(HEAP32[$3 + 4 >> 2]);
        }
        HEAP32[$3 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 36 >> 2], 105842);
        if (HEAP32[$3 + 4 >> 2]) {
         HEAP8[$3 + 11 | 0] = jsvGetBoolAndUnLock(HEAP32[$3 + 4 >> 2]) & 1;
        }
        HEAP32[$3 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 36 >> 2], 104295);
        if (HEAP32[$3 + 4 >> 2]) {
         label$13: {
          label$14: {
           if (!(jsvIsNumeric(HEAP32[$3 + 4 >> 2]) & 1)) {
            break label$14;
           }
           if ((jsvGetInteger(HEAP32[$3 + 4 >> 2]) | 0) <= 0) {
            break label$14;
           }
           HEAP32[$3 + 12 >> 2] = jsvGetInteger(HEAP32[$3 + 4 >> 2]);
           break label$13;
          }
          jsExceptionHere(3, 111334, 0);
         }
         jsvUnLock(HEAP32[$3 + 4 >> 2]);
        }
        break label$8;
       }
       if (!(jsvIsUndefined(HEAP32[$3 + 36 >> 2]) & 1)) {
        jsExceptionHere(3, 106544, 0);
       }
      }
      jswrap_object_addEventListener(HEAP32[$3 + 44 >> 2], 104714, 597, 32768);
      jswrap_object_addEventListener(HEAP32[$3 + 40 >> 2], 102499, 598, 8);
      jswrap_object_addEventListener(HEAP32[$3 + 40 >> 2], 104714, 599, 32768);
      jsvObjectSetChildAndUnLock(HEAP32[$3 + 32 >> 2], 104295, jsvNewFromInteger(HEAP32[$3 + 12 >> 2]));
      jsvObjectSetChildAndUnLock(HEAP32[$3 + 32 >> 2], 105842, jsvNewFromBool(HEAP8[$3 + 11 | 0] & 1));
      jsvUnLock2(jsvAddNamedChild(HEAP32[$3 + 32 >> 2], HEAP32[$3 + 44 >> 2], 105447), jsvAddNamedChild(HEAP32[$3 + 32 >> 2], HEAP32[$3 + 40 >> 2], 102458));
      jsvArrayPush(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 32 >> 2]);
      break label$5;
     }
     jsExceptionHere(1, 105663, 0);
     break label$5;
    }
    jsExceptionHere(1, 105743, 0);
   }
   jsvUnLock2(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 16 >> 2]);
  }
  jsvUnLock3(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 32 >> 2], HEAP32[$3 + 44 >> 2]);
 }
 __stack_pointer = $3 + 48 | 0;
}

function jsvSetValueOfName($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1: {
  if (jsvIsNameWithValue(HEAP32[$2 + 24 >> 2]) & 1) {
   label$3: {
    if (jsvIsString(HEAP32[$2 + 24 >> 2]) & 1) {
     $0 = HEAP32[$2 + 24 >> 2];
     $1 = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 65472;
     $3 = jsvGetCharactersInVar(HEAP32[$2 + 24 >> 2]) + 23 | 0;
     $0 = HEAP32[$2 + 24 >> 2];
     $1 = $1 | $3;
     HEAP8[$0 + 11 | 0] = $1;
     HEAP8[$0 + 12 | 0] = $1 >>> 8;
     break label$3;
    }
    $0 = HEAP32[$2 + 24 >> 2];
    $1 = HEAP32[$2 + 24 >> 2];
    $1 = (HEAPU8[$1 + 11 | 0] | HEAPU8[$1 + 12 | 0] << 8) & 65472 | 15;
    HEAP8[$0 + 11 | 0] = $1;
    HEAP8[$0 + 12 | 0] = $1 >>> 8;
   }
   jsvSetFirstChild(HEAP32[$2 + 24 >> 2], 0);
   break label$1;
  }
  if (jsvGetFirstChild(HEAP32[$2 + 24 >> 2]) & 65535) {
   jsvUnRefRef(jsvGetFirstChild(HEAP32[$2 + 24 >> 2]) & 65535);
  }
 }
 label$6: {
  if (HEAP32[$2 + 20 >> 2]) {
   label$8: {
    if (jsvIsInt(HEAP32[$2 + 24 >> 2]) & 1) {
     if (!(jsvIsInt(HEAP32[$2 + 20 >> 2]) & 1)) {
      if (!(jsvIsBoolean(HEAP32[$2 + 20 >> 2]) & 1)) {
       break label$8;
      }
     }
     if (jsvIsPin(HEAP32[$2 + 20 >> 2]) & 1) {
      break label$8;
     }
     $0 = HEAP32[$2 + 20 >> 2];
     HEAP32[$2 + 16 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
     if (!(HEAP32[$2 + 16 >> 2] < -2048 | HEAP32[$2 + 16 >> 2] > 2047)) {
      $0 = HEAP32[$2 + 24 >> 2];
      $1 = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 65472;
      $3 = jsvIsInt(HEAP32[$2 + 20 >> 2]) & 1 ? 16 : 17;
      $0 = HEAP32[$2 + 24 >> 2];
      $1 = $1 | $3;
      HEAP8[$0 + 11 | 0] = $1;
      HEAP8[$0 + 12 | 0] = $1 >>> 8;
      jsvSetFirstChild(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 16 >> 2] & 65535);
      break label$6;
     }
     break label$8;
    }
    label$12: {
     if (!(jsvIsString(HEAP32[$2 + 24 >> 2]) & 1)) {
      break label$12;
     }
     if (jsvIsUTF8String(HEAP32[$2 + 24 >> 2]) & 1) {
      break label$12;
     }
     label$13: {
      if (!(jsvIsInt(HEAP32[$2 + 20 >> 2]) & 1)) {
       break label$13;
      }
      if (jsvIsPin(HEAP32[$2 + 20 >> 2]) & 1) {
       break label$13;
      }
      $0 = HEAP32[$2 + 20 >> 2];
      HEAP32[$2 + 12 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
      if (!(HEAP32[$2 + 12 >> 2] < -2048 | HEAP32[$2 + 12 >> 2] > 2047)) {
       $0 = HEAP32[$2 + 24 >> 2];
       $1 = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 65472;
       $3 = jsvGetCharactersInVar(HEAP32[$2 + 24 >> 2]) + 18 | 0;
       $0 = HEAP32[$2 + 24 >> 2];
       $1 = $1 | $3;
       HEAP8[$0 + 11 | 0] = $1;
       HEAP8[$0 + 12 | 0] = $1 >>> 8;
       jsvSetFirstChild(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 12 >> 2] & 65535);
       break label$6;
      }
     }
    }
   }
   jsvSetFirstChild(HEAP32[$2 + 24 >> 2], jsvGetRef(jsvRef(HEAP32[$2 + 20 >> 2])) & 65535);
   break label$6;
  }
  jsvSetFirstChild(HEAP32[$2 + 24 >> 2], 0);
 }
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 24 >> 2];
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jsserialSoftwareFunc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $2 = __stack_pointer - 80 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 76 >> 2] = $0;
 HEAP32[$2 + 72 >> 2] = $1;
 HEAP32[$2 + 68 >> 2] = HEAP32[$2 + 72 >> 2];
 if (jshIsPinValid(HEAPU8[HEAP32[$2 + 68 >> 2] + 5 | 0]) & 1) {
  HEAP32[$2 + 64 >> 2] = (1 << HEAPU8[HEAP32[$2 + 68 >> 2] + 10 | 0]) - 1;
  HEAP32[$2 + 60 >> 2] = HEAPU8[HEAP32[$2 + 68 >> 2] + 10 | 0];
  HEAP32[$2 + 64 >> 2] = HEAP32[$2 + 76 >> 2] & (1 << HEAPU8[HEAP32[$2 + 68 >> 2] + 8 | 0]) - 1 | HEAP32[$2 + 64 >> 2] << HEAPU8[HEAP32[$2 + 68 >> 2] + 8 | 0];
  HEAP32[$2 + 60 >> 2] = HEAPU8[HEAP32[$2 + 68 >> 2] + 8 | 0] + HEAP32[$2 + 60 >> 2];
  HEAP32[$2 + 64 >> 2] = HEAP32[$2 + 64 >> 2] << 1;
  HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 60 >> 2] + 1;
  HEAP32[$2 + 56 >> 2] = jstGetUtilTimerOffset();
  $0 = HEAP32[$2 + 68 >> 2];
  $3 = jshGetTimeFromMilliseconds(1e3 / +(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)));
  HEAP32[$2 + 48 >> 2] = $3;
  $0 = i64toi32_i32$HIGH_BITS;
  HEAP32[$2 + 52 >> 2] = $0;
  label$2: {
   if (jstGetLastPinTimerTask(HEAPU8[HEAP32[$2 + 68 >> 2] + 5 | 0], $2 + 8 | 0) & 1) {
    $0 = HEAPU8[$2 + 8 | 0] | HEAPU8[$2 + 9 | 0] << 8 | (HEAPU8[$2 + 10 | 0] << 16 | HEAPU8[$2 + 11 | 0] << 24);
    $3 = $0 >> 31;
    $5 = $3;
    $3 = HEAP32[$2 + 48 >> 2];
    $4 = $3;
    $1 = $0 + $3 | 0;
    $0 = HEAP32[$2 + 52 >> 2];
    $3 = $0;
    $0 = $5;
    $0 = $3 + $0 | 0;
    HEAP32[$2 + 40 >> 2] = $1;
    $0 = $1 >>> 0 < $4 >>> 0 ? $0 + 1 | 0 : $0;
    HEAP32[$2 + 44 >> 2] = $0;
    break label$2;
   }
   $0 = jshGetTimeFromMilliseconds(1);
   HEAP32[$2 + 40 >> 2] = $0;
   $1 = i64toi32_i32$HIGH_BITS;
   HEAP32[$2 + 44 >> 2] = $1;
  }
  HEAP32[$2 + 4 >> 2] = 0;
  while (1) {
   if (HEAP32[$2 + 60 >> 2]) {
    HEAP8[$2 + 3 | 0] = HEAP32[$2 + 64 >> 2] & 1;
    HEAP32[$2 + 64 >> 2] = HEAP32[$2 + 64 >> 2] >> 1;
    HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 60 >> 2] - 1;
    $1 = HEAP32[$2 + 40 >> 2];
    $0 = HEAP32[$2 + 44 >> 2];
    jstPinOutputAtTime($1, $0, $2 + 56 | 0, HEAP32[$2 + 68 >> 2] + 5 | 0, 1, HEAP8[$2 + 3 | 0] & 1);
    $1 = HEAP32[$2 + 52 >> 2];
    $5 = $1;
    $0 = HEAP32[$2 + 48 >> 2];
    $1 = HEAP32[$2 + 40 >> 2];
    $4 = $1;
    $3 = $0 + $1 | 0;
    $0 = HEAP32[$2 + 44 >> 2];
    $1 = $0;
    $0 = $5;
    $1 = $1 + $0 | 0;
    HEAP32[$2 + 40 >> 2] = $3;
    $1 = $3 >>> 0 < $4 >>> 0 ? $1 + 1 | 0 : $1;
    HEAP32[$2 + 44 >> 2] = $1;
    continue;
   }
   break;
  }
  $1 = HEAP32[$2 + 40 >> 2];
  $5 = $1;
  $0 = HEAP32[$2 + 44 >> 2];
  $3 = $0;
  $0 = HEAP32[$2 + 48 >> 2];
  $6 = $0;
  $1 = HEAP32[$2 + 52 >> 2];
  $4 = $1;
  $1 = HEAP32[$2 + 4 >> 2];
  $0 = $1 >> 31;
  $7 = $0;
  $0 = $4;
  $4 = $1;
  $1 = $7;
  $1 = __wasm_i64_mul($6, $0, $4, $1);
  $4 = $1;
  $0 = i64toi32_i32$HIGH_BITS;
  $1 = $0;
  $0 = $3;
  $3 = $0 + $1 | 0;
  $0 = $5;
  $1 = $4 + $0 | 0;
  $3 = $1 >>> 0 < $4 >>> 0 ? $3 + 1 | 0 : $3;
  HEAP32[$2 + 40 >> 2] = $1;
  HEAP32[$2 + 44 >> 2] = $3;
  $3 = HEAP32[$2 + 40 >> 2];
  $0 = HEAP32[$2 + 44 >> 2];
  jstPinOutputAtTime($3, $0, $2 + 56 | 0, HEAP32[$2 + 68 >> 2] + 5 | 0, 1, 1);
 }
 __stack_pointer = $2 + 80 | 0;
}

function tflite__ParseReshape_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer + -64 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 56 >> 2] = $0;
 HEAP32[$4 + 52 >> 2] = $1;
 HEAP32[$4 + 48 >> 2] = $2;
 HEAP32[$4 + 44 >> 2] = $3;
 tflite___28anonymous_20namespace_29__CheckParsePointerParams_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29(HEAP32[$4 + 56 >> 2], HEAP32[$4 + 52 >> 2], HEAP32[$4 + 48 >> 2], HEAP32[$4 + 44 >> 2]);
 tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__SafeBuiltinDataAllocator_28tflite__BuiltinDataAllocator__29($4 + 40 | 0, HEAP32[$4 + 48 >> 2]);
 std____2__unique_ptr_TfLiteReshapeParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteReshapeParams__28_29($4 + 32 | 0, $4 + 40 | 0);
 label$1: {
  if (!(bool_20std____2__operator___TfLiteReshapeParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28std____2__unique_ptr_TfLiteReshapeParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20const__2c_20std__nullptr_t_29($4 + 32 | 0, 0) & 1)) {
   $0 = HEAP32[$4 + 52 >> 2];
   $1 = HEAP32[$4 + 52 >> 2];
   HEAP32[$4 >> 2] = 100842;
   tflite__ErrorReporter__ReportError_28void__2c_20char_20const__2c_20____29($0, $1, 111890, $4);
   HEAP32[$4 + 60 >> 2] = 1;
   break label$1;
  }
  HEAP32[$4 + 24 >> 2] = tflite__Operator__builtin_options_as_ReshapeOptions_28_29_20const(HEAP32[$4 + 56 >> 2]);
  if (HEAP32[$4 + 24 >> 2]) {
   HEAP32[$4 + 20 >> 2] = tflite__ReshapeOptions__new_shape_28_29_20const(HEAP32[$4 + 24 >> 2]);
   if (HEAP32[$4 + 20 >> 2]) {
    HEAP32[$4 + 16 >> 2] = tflite___28anonymous_20namespace_29__FlatBufferIntVectorToArray_28int_2c_20flatbuffers__Vector_int__20const__2c_20int__2c_20tflite__ErrorReporter__2c_20char_20const__29(32, HEAP32[$4 + 20 >> 2], std____2__unique_ptr_TfLiteReshapeParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 32 | 0), HEAP32[$4 + 52 >> 2], 104992);
    if (HEAP32[$4 + 16 >> 2]) {
     HEAP32[$4 + 60 >> 2] = HEAP32[$4 + 16 >> 2];
     break label$1;
    }
    $0 = flatbuffers__Vector_int___size_28_29_20const(HEAP32[$4 + 20 >> 2]);
    HEAP32[std____2__unique_ptr_TfLiteReshapeParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 32 | 0) + 32 >> 2] = $0;
   }
  }
  $0 = std____2__unique_ptr_TfLiteReshapeParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($4 + 32 | 0);
  HEAP32[HEAP32[$4 + 44 >> 2] >> 2] = $0;
  HEAP32[$4 + 60 >> 2] = 0;
 }
 HEAP32[$4 + 28 >> 2] = 1;
 std____2__unique_ptr_TfLiteReshapeParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($4 + 32 | 0);
 __stack_pointer = $4 - -64 | 0;
 return HEAP32[$4 + 60 >> 2];
}

function tflite__ops__micro__reshape__ReshapeOutput_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 96 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 88 >> 2] = $0;
 HEAP32[$2 + 84 >> 2] = $1;
 HEAP32[$2 + 80 >> 2] = tflite__GetInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 88 >> 2], HEAP32[$2 + 84 >> 2], 0);
 HEAP32[$2 + 76 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 88 >> 2], HEAP32[$2 + 84 >> 2], 0);
 HEAP32[$2 + 72 >> 2] = tflite__NumElements_28TfLiteTensor_20const__29(HEAP32[$2 + 80 >> 2]);
 HEAP32[$2 + 68 >> 2] = HEAP32[HEAP32[$2 + 76 >> 2] + 20 >> 2];
 if (!((tflite__NumInputs_28TfLiteNode_20const__29(HEAP32[$2 + 84 >> 2]) | 0) != 1 | HEAP32[HEAP32[$2 + 68 >> 2] >> 2] != 1 | HEAP32[HEAP32[$2 + 68 >> 2] + 4 >> 2])) {
  HEAP32[HEAP32[$2 + 68 >> 2] >> 2] = 0;
 }
 HEAP32[$2 + 64 >> 2] = 1;
 HEAP32[$2 + 60 >> 2] = -1;
 HEAP32[$2 + 56 >> 2] = 0;
 label$2: {
  while (1) {
   if (HEAP32[$2 + 56 >> 2] < HEAP32[HEAP32[$2 + 68 >> 2] >> 2]) {
    HEAP32[$2 + 52 >> 2] = HEAP32[(HEAP32[$2 + 68 >> 2] + 4 | 0) + (HEAP32[$2 + 56 >> 2] << 2) >> 2];
    label$5: {
     if (HEAP32[$2 + 52 >> 2] == -1) {
      if (HEAP32[$2 + 60 >> 2] != -1) {
       $0 = HEAP32[HEAP32[$2 + 88 >> 2] + 20 >> 2];
       $1 = HEAP32[$2 + 88 >> 2];
       $3 = HEAP32[$2 + 60 >> 2];
       HEAP32[$2 + 12 >> 2] = -1;
       HEAP32[$2 + 8 >> 2] = $3;
       HEAP32[$2 + 4 >> 2] = 111212;
       HEAP32[$2 >> 2] = 102682;
       FUNCTION_TABLE[$0 | 0]($1, 126505, $2);
       HEAP32[$2 + 92 >> 2] = 1;
       break label$2;
      }
      HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 56 >> 2];
      break label$5;
     }
     HEAP32[$2 + 64 >> 2] = Math_imul(HEAP32[$2 + 52 >> 2], HEAP32[$2 + 64 >> 2]);
    }
    HEAP32[$2 + 56 >> 2] = HEAP32[$2 + 56 >> 2] + 1;
    continue;
   }
   break;
  }
  if (HEAP32[$2 + 60 >> 2] != -1) {
   HEAP32[(HEAP32[$2 + 68 >> 2] + 4 | 0) + (HEAP32[$2 + 60 >> 2] << 2) >> 2] = HEAP32[$2 + 72 >> 2] / HEAP32[$2 + 64 >> 2];
   HEAP32[$2 + 64 >> 2] = Math_imul(HEAP32[(HEAP32[$2 + 68 >> 2] + 4 | 0) + (HEAP32[$2 + 60 >> 2] << 2) >> 2], HEAP32[$2 + 64 >> 2]);
  }
  if (HEAP32[HEAP32[$2 + 80 >> 2] + 28 >> 2] != HEAP32[HEAP32[$2 + 76 >> 2] + 28 >> 2]) {
   $0 = HEAP32[HEAP32[$2 + 88 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 88 >> 2];
   $3 = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 80 >> 2] + 28 >> 2]);
   HEAP32[$2 + 28 >> 2] = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 76 >> 2] + 28 >> 2]);
   HEAP32[$2 + 24 >> 2] = $3;
   HEAP32[$2 + 20 >> 2] = 104850;
   HEAP32[$2 + 16 >> 2] = 104863;
   FUNCTION_TABLE[$0 | 0]($1, 126107, $2 + 16 | 0);
   HEAP32[$2 + 92 >> 2] = 1;
   break label$2;
  }
  if (HEAP32[$2 + 72 >> 2] != HEAP32[$2 + 64 >> 2]) {
   $0 = HEAP32[HEAP32[$2 + 88 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 88 >> 2];
   $3 = HEAP32[$2 + 72 >> 2];
   HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 64 >> 2];
   HEAP32[$2 + 40 >> 2] = $3;
   HEAP32[$2 + 36 >> 2] = 99853;
   HEAP32[$2 + 32 >> 2] = 99873;
   FUNCTION_TABLE[$0 | 0]($1, 126505, $2 + 32 | 0);
   HEAP32[$2 + 92 >> 2] = 1;
   break label$2;
  }
  HEAP32[$2 + 92 >> 2] = 0;
 }
 __stack_pointer = $2 + 96 | 0;
 return HEAP32[$2 + 92 >> 2];
}

function tflite___28anonymous_20namespace_29__CalculateActivationRangeQuantizedImpl_28TfLiteFusedActivation_2c_20int_2c_20int_2c_20TfLiteTensor__2c_20int__2c_20int__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer + -64 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 60 >> 2] = $0;
 HEAP32[$6 + 56 >> 2] = $1;
 HEAP32[$6 + 52 >> 2] = $2;
 HEAP32[$6 + 48 >> 2] = $3;
 HEAP32[$6 + 44 >> 2] = $4;
 HEAP32[$6 + 40 >> 2] = $5;
 HEAPF32[$6 + 36 >> 2] = HEAPF32[HEAP32[$6 + 48 >> 2] + 8 >> 2];
 HEAP32[$6 + 32 >> 2] = HEAP32[HEAP32[$6 + 48 >> 2] + 12 >> 2];
 HEAPF32[$6 + 24 >> 2] = HEAPF32[$6 + 36 >> 2];
 HEAP32[$6 + 28 >> 2] = HEAP32[$6 + 32 >> 2];
 label$1: {
  if (HEAP32[$6 + 60 >> 2] == 1) {
   HEAP32[$6 + 20 >> 2] = tflite___28anonymous_20namespace_29__CalculateActivationRangeQuantizedImpl_28TfLiteFusedActivation_2c_20int_2c_20int_2c_20TfLiteTensor__2c_20int__2c_20int__29__$_0__operator_28_29_28float_29_20const($6 + 24 | 0, Math_fround(0));
   $0 = int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($6 + 56 | 0, $6 + 20 | 0);
   HEAP32[HEAP32[$6 + 44 >> 2] >> 2] = HEAP32[$0 >> 2];
   HEAP32[HEAP32[$6 + 40 >> 2] >> 2] = HEAP32[$6 + 52 >> 2];
   break label$1;
  }
  label$3: {
   if (HEAP32[$6 + 60 >> 2] == 3) {
    HEAP32[$6 + 16 >> 2] = tflite___28anonymous_20namespace_29__CalculateActivationRangeQuantizedImpl_28TfLiteFusedActivation_2c_20int_2c_20int_2c_20TfLiteTensor__2c_20int__2c_20int__29__$_0__operator_28_29_28float_29_20const($6 + 24 | 0, Math_fround(0));
    $0 = int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($6 + 56 | 0, $6 + 16 | 0);
    HEAP32[HEAP32[$6 + 44 >> 2] >> 2] = HEAP32[$0 >> 2];
    HEAP32[$6 + 12 >> 2] = tflite___28anonymous_20namespace_29__CalculateActivationRangeQuantizedImpl_28TfLiteFusedActivation_2c_20int_2c_20int_2c_20TfLiteTensor__2c_20int__2c_20int__29__$_0__operator_28_29_28float_29_20const($6 + 24 | 0, Math_fround(6));
    $0 = int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($6 + 52 | 0, $6 + 12 | 0);
    HEAP32[HEAP32[$6 + 40 >> 2] >> 2] = HEAP32[$0 >> 2];
    break label$3;
   }
   label$5: {
    if (HEAP32[$6 + 60 >> 2] == 2) {
     HEAP32[$6 + 8 >> 2] = tflite___28anonymous_20namespace_29__CalculateActivationRangeQuantizedImpl_28TfLiteFusedActivation_2c_20int_2c_20int_2c_20TfLiteTensor__2c_20int__2c_20int__29__$_0__operator_28_29_28float_29_20const($6 + 24 | 0, Math_fround(-1));
     $0 = int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($6 + 56 | 0, $6 + 8 | 0);
     HEAP32[HEAP32[$6 + 44 >> 2] >> 2] = HEAP32[$0 >> 2];
     HEAP32[$6 + 4 >> 2] = tflite___28anonymous_20namespace_29__CalculateActivationRangeQuantizedImpl_28TfLiteFusedActivation_2c_20int_2c_20int_2c_20TfLiteTensor__2c_20int__2c_20int__29__$_0__operator_28_29_28float_29_20const($6 + 24 | 0, Math_fround(1));
     $0 = int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($6 + 52 | 0, $6 + 4 | 0);
     HEAP32[HEAP32[$6 + 40 >> 2] >> 2] = HEAP32[$0 >> 2];
     break label$5;
    }
    HEAP32[HEAP32[$6 + 44 >> 2] >> 2] = HEAP32[$6 + 56 >> 2];
    HEAP32[HEAP32[$6 + 40 >> 2] >> 2] = HEAP32[$6 + 52 >> 2];
   }
  }
 }
 __stack_pointer = $6 - -64 | 0;
}

function jswrap_pin_getInfo($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer + -64 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 56 >> 2] = $0;
 HEAP8[$1 + 55 | 0] = jshGetPinFromVar(HEAP32[$1 + 56 >> 2]);
 label$1: {
  if (!(jshIsPinValid(HEAPU8[$1 + 55 | 0]) & 1)) {
   HEAP32[$1 + 60 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 48 >> 2] = Math_imul(HEAPU8[$1 + 55 | 0], 3) + 145056;
  HEAP32[$1 + 44 >> 2] = jsvNewObject();
  if (!HEAP32[$1 + 44 >> 2]) {
   HEAP32[$1 + 60 >> 2] = 0;
   break label$1;
  }
  HEAP8[$1 + 42 | 0] = HEAPU8[HEAP32[$1 + 48 >> 2]] - -64;
  HEAP8[$1 + 43 | 0] = 0;
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 44 >> 2], 97532, jsvNewFromString($1 + 42 | 0));
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 44 >> 2], 102561, jsvNewFromInteger(HEAPU8[HEAP32[$1 + 48 >> 2] + 1 | 0]));
  if (HEAPU8[HEAP32[$1 + 48 >> 2] + 2 | 0]) {
   HEAP32[$1 + 36 >> 2] = jsvNewObject();
   if (HEAP32[$1 + 36 >> 2]) {
    HEAP32[$1 + 32 >> 2] = jsvNewEmptyArray();
    if (HEAP32[$1 + 32 >> 2]) {
     HEAP32[$1 + 28 >> 2] = 0;
     while (1) {
      if (HEAP32[$1 + 28 >> 2] < 0) {
       if (HEAPU8[HEAP32[$1 + 48 >> 2] + 2 | 0] & 32 << HEAP32[$1 + 28 >> 2]) {
        jsvArrayPushAndUnLock(HEAP32[$1 + 32 >> 2], jsvNewFromInteger(HEAP32[$1 + 28 >> 2] + 1 | 0));
       }
       HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 28 >> 2] + 1;
       continue;
      }
      break;
     }
     jsvObjectSetChildAndUnLock(HEAP32[$1 + 36 >> 2], 100626, HEAP32[$1 + 32 >> 2]);
    }
    jsvObjectSetChildAndUnLock(HEAP32[$1 + 36 >> 2], 102801, jsvNewFromInteger(HEAPU8[HEAP32[$1 + 48 >> 2] + 2 | 0] & 31));
    jsvObjectSetChildAndUnLock(HEAP32[$1 + 44 >> 2], 102801, jsvNewFromInteger(HEAPU8[HEAP32[$1 + 48 >> 2] + 2 | 0] & 31));
    jsvObjectSetChildAndUnLock(HEAP32[$1 + 44 >> 2], 103650, HEAP32[$1 + 36 >> 2]);
   }
  }
  HEAP32[$1 + 24 >> 2] = jsvNewObject();
  if (HEAP32[$1 + 24 >> 2]) {
   HEAP32[$1 + 20 >> 2] = 0;
   while (1) {
    if (HEAP32[$1 + 20 >> 2] < 0) {
     $0 = (HEAP32[$1 + 48 >> 2] + 3 | 0) + (HEAP32[$1 + 20 >> 2] << 1) | 0;
     if (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8) {
      HEAP32[$1 + 16 >> 2] = jsvNewObject();
      if (HEAP32[$1 + 16 >> 2]) {
       $0 = (HEAP32[$1 + 48 >> 2] + 3 | 0) + (HEAP32[$1 + 20 >> 2] << 1) | 0;
       jshPinFunctionToString(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8, 8, $1, 16);
       jsvObjectSetChildAndUnLock(HEAP32[$1 + 16 >> 2], 104973, jsvNewFromString($1));
       $0 = (HEAP32[$1 + 48 >> 2] + 3 | 0) + (HEAP32[$1 + 20 >> 2] << 1) | 0;
       jsvObjectSetChildAndUnLock(HEAP32[$1 + 16 >> 2], 104086, jsvNewFromInteger((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8) & 15));
       $0 = (HEAP32[$1 + 48 >> 2] + 3 | 0) + (HEAP32[$1 + 20 >> 2] << 1) | 0;
       jshPinFunctionToString(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8, 3, $1, 16);
       jsvObjectSetChildAndUnLock(HEAP32[$1 + 24 >> 2], $1, HEAP32[$1 + 16 >> 2]);
      }
     }
     HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 20 >> 2] + 1;
     continue;
    }
    break;
   }
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 44 >> 2], 100245, HEAP32[$1 + 24 >> 2]);
  }
  HEAP32[$1 + 60 >> 2] = HEAP32[$1 + 44 >> 2];
 }
 __stack_pointer = $1 - -64 | 0;
 return HEAP32[$1 + 60 >> 2];
}

function lcdST7789_blit1Bit($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0;
 $7 = __stack_pointer - 112 | 0;
 __stack_pointer = $7;
 HEAP32[$7 + 108 >> 2] = $0;
 HEAP32[$7 + 104 >> 2] = $1;
 HEAP32[$7 + 100 >> 2] = $2;
 HEAP32[$7 + 96 >> 2] = $3;
 HEAP32[$7 + 92 >> 2] = $4;
 HEAP32[$7 + 88 >> 2] = $5;
 HEAP32[$7 + 84 >> 2] = $6;
 HEAP32[$7 + 80 >> 2] = HEAP32[$7 + 104 >> 2] + HEAP32[85780];
 HEAP32[$7 + 76 >> 2] = HEAP32[85780] + (HEAP32[$7 + 104 >> 2] + Math_imul(HEAP32[$7 + 96 >> 2], HEAP32[$7 + 92 >> 2]) | 0);
 if (HEAP32[$7 + 80 >> 2] >= 320) {
  HEAP32[$7 + 80 >> 2] = HEAP32[$7 + 80 >> 2] - 320;
 }
 if (HEAP32[$7 + 76 >> 2] >= 320) {
  HEAP32[$7 + 76 >> 2] = HEAP32[$7 + 76 >> 2] - 320;
 }
 $1 = HEAP32[$7 + 108 >> 2];
 $2 = HEAP32[$7 + 80 >> 2];
 $3 = (HEAP32[$7 + 108 >> 2] + Math_imul(HEAP32[$7 + 100 >> 2], HEAP32[$7 + 92 >> 2]) | 0) - 1 | 0;
 if (HEAP32[$7 + 76 >> 2] > HEAP32[$7 + 80 >> 2]) {
  $0 = HEAP32[$7 + 76 >> 2];
 } else {
  $0 = 239;
 }
 lcdST7789_blitStartRaw($1, $2, $3, $0);
 HEAP32[$7 + 72 >> 2] = jsvStringIteratorGetCharAndNext(HEAP32[$7 + 88 >> 2]) << 24 >> 24;
 HEAP32[$7 + 68 >> 2] = 8;
 HEAP32[$7 + 64 >> 2] = 0;
 while (1) {
  if (HEAP32[$7 + 64 >> 2] < HEAP32[$7 + 96 >> 2]) {
   jsvStringIteratorClone($7 + 24 | 0, HEAP32[$7 + 88 >> 2]);
   HEAP32[$7 + 20 >> 2] = HEAP32[$7 + 72 >> 2];
   HEAP32[$7 + 16 >> 2] = HEAP32[$7 + 68 >> 2];
   HEAP32[$7 + 12 >> 2] = 1;
   while (1) {
    if (HEAP32[$7 + 12 >> 2] <= HEAP32[$7 + 92 >> 2]) {
     HEAP32[$7 + 80 >> 2] = HEAP32[$7 + 80 >> 2] + 1;
     if (HEAP32[$7 + 80 >> 2] >= 320) {
      lcdST7789_blitEnd();
      lcdST7789_blitStartRaw(HEAP32[$7 + 108 >> 2], 0, (HEAP32[$7 + 108 >> 2] + Math_imul(HEAP32[$7 + 100 >> 2], HEAP32[$7 + 92 >> 2]) | 0) - 1 | 0, HEAP32[$7 + 76 >> 2]);
     }
     HEAP32[$7 + 8 >> 2] = 0;
     while (1) {
      if (HEAP32[$7 + 8 >> 2] < HEAP32[$7 + 100 >> 2]) {
       HEAP16[$7 + 6 >> 1] = HEAPU16[HEAP32[$7 + 84 >> 2] + ((HEAP32[$7 + 72 >> 2] >> 7 & 1) << 1) >> 1];
       HEAP32[$7 + 72 >> 2] = HEAP32[$7 + 72 >> 2] << 1;
       HEAP32[$7 + 68 >> 2] = HEAP32[$7 + 68 >> 2] - 1;
       if (!HEAP32[$7 + 68 >> 2]) {
        HEAP32[$7 + 72 >> 2] = jsvStringIteratorGetCharAndNext(HEAP32[$7 + 88 >> 2]) << 24 >> 24;
        HEAP32[$7 + 68 >> 2] = 8;
       }
       HEAP32[$7 >> 2] = 0;
       while (1) {
        if (HEAP32[$7 >> 2] < HEAP32[$7 + 92 >> 2]) {
         lcdST7789_blitPixel(HEAPU16[$7 + 6 >> 1]);
         HEAP32[$7 >> 2] = HEAP32[$7 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$7 + 8 >> 2] = HEAP32[$7 + 8 >> 2] + 1;
       continue;
      }
      break;
     }
     if (HEAP32[$7 + 12 >> 2] < HEAP32[$7 + 92 >> 2]) {
      jsvStringIteratorFree_6(HEAP32[$7 + 88 >> 2]);
      jsvStringIteratorClone(HEAP32[$7 + 88 >> 2], $7 + 24 | 0);
      HEAP32[$7 + 72 >> 2] = HEAP32[$7 + 20 >> 2];
      HEAP32[$7 + 68 >> 2] = HEAP32[$7 + 16 >> 2];
     }
     HEAP32[$7 + 12 >> 2] = HEAP32[$7 + 12 >> 2] + 1;
     continue;
    }
    break;
   }
   jsvStringIteratorFree_6($7 + 24 | 0);
   HEAP32[$7 + 64 >> 2] = HEAP32[$7 + 64 >> 2] + 1;
   continue;
  }
  break;
 }
 lcdST7789_blitEnd();
 __stack_pointer = $7 + 112 | 0;
}

function graphicsDrawLine($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer + -64 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 60 >> 2] = $0;
 HEAP32[$5 + 56 >> 2] = $1;
 HEAP32[$5 + 52 >> 2] = $2;
 HEAP32[$5 + 48 >> 2] = $3;
 HEAP32[$5 + 44 >> 2] = $4;
 graphicsToDeviceCoordinates(HEAP32[$5 + 60 >> 2], $5 + 56 | 0, $5 + 52 | 0);
 graphicsToDeviceCoordinates(HEAP32[$5 + 60 >> 2], $5 + 48 | 0, $5 + 44 | 0);
 HEAP32[$5 + 40 >> 2] = HEAP32[$5 + 48 >> 2] - HEAP32[$5 + 56 >> 2];
 HEAP32[$5 + 36 >> 2] = HEAP32[$5 + 44 >> 2] - HEAP32[$5 + 52 >> 2];
 label$1: {
  if (HEAP32[$5 + 40 >> 2] < 0) {
   HEAP32[$5 + 40 >> 2] = 0 - HEAP32[$5 + 40 >> 2];
   break label$1;
  }
  if (!HEAP32[$5 + 40 >> 2]) {
   HEAP32[$5 + 40 >> 2] = 1;
  }
 }
 label$4: {
  if (HEAP32[$5 + 36 >> 2] < 0) {
   HEAP32[$5 + 36 >> 2] = 0 - HEAP32[$5 + 36 >> 2];
   break label$4;
  }
  if (!HEAP32[$5 + 36 >> 2]) {
   HEAP32[$5 + 36 >> 2] = 1;
  }
 }
 label$7: {
  if (HEAP32[$5 + 40 >> 2] > HEAP32[$5 + 36 >> 2]) {
   if (HEAP32[$5 + 56 >> 2] > HEAP32[$5 + 48 >> 2]) {
    HEAP32[$5 + 32 >> 2] = HEAP32[$5 + 56 >> 2];
    HEAP32[$5 + 56 >> 2] = HEAP32[$5 + 48 >> 2];
    HEAP32[$5 + 48 >> 2] = HEAP32[$5 + 32 >> 2];
    HEAP32[$5 + 32 >> 2] = HEAP32[$5 + 52 >> 2];
    HEAP32[$5 + 52 >> 2] = HEAP32[$5 + 44 >> 2];
    HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 32 >> 2];
   }
   HEAP32[$5 + 28 >> 2] = (HEAP32[$5 + 52 >> 2] << 8) + 128;
   HEAP32[$5 + 24 >> 2] = (HEAP32[$5 + 44 >> 2] - HEAP32[$5 + 52 >> 2] << 8) / HEAP32[$5 + 40 >> 2];
   HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 56 >> 2];
   while (1) {
    if (HEAP32[$5 + 20 >> 2] <= HEAP32[$5 + 48 >> 2]) {
     $0 = HEAP32[$5 + 60 >> 2];
     graphicsSetPixelDevice(HEAP32[$5 + 60 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 28 >> 2] >> 8, HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
     HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 24 >> 2] + HEAP32[$5 + 28 >> 2];
     HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 20 >> 2] + 1;
     continue;
    }
    break;
   }
   break label$7;
  }
  if (HEAP32[$5 + 52 >> 2] > HEAP32[$5 + 44 >> 2]) {
   HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 56 >> 2];
   HEAP32[$5 + 56 >> 2] = HEAP32[$5 + 48 >> 2];
   HEAP32[$5 + 48 >> 2] = HEAP32[$5 + 16 >> 2];
   HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 52 >> 2];
   HEAP32[$5 + 52 >> 2] = HEAP32[$5 + 44 >> 2];
   HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 16 >> 2];
  }
  HEAP32[$5 + 12 >> 2] = (HEAP32[$5 + 56 >> 2] << 8) + 128;
  HEAP32[$5 + 8 >> 2] = (HEAP32[$5 + 48 >> 2] - HEAP32[$5 + 56 >> 2] << 8) / HEAP32[$5 + 36 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 52 >> 2];
  while (1) {
   if (HEAP32[$5 + 4 >> 2] <= HEAP32[$5 + 44 >> 2]) {
    $0 = HEAP32[$5 + 60 >> 2];
    graphicsSetPixelDevice(HEAP32[$5 + 60 >> 2], HEAP32[$5 + 12 >> 2] >> 8, HEAP32[$5 + 4 >> 2], HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
    HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 8 >> 2] + HEAP32[$5 + 12 >> 2];
    HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] + 1;
    continue;
   }
   break;
  }
 }
 __stack_pointer = $5 - -64 | 0;
}

function tflite__ops__micro__fully_connected__Eval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 label$1: {
  if (!HEAP32[HEAP32[$2 + 36 >> 2] + 12 >> 2]) {
   break label$1;
  }
 }
 HEAP32[$2 + 32 >> 2] = HEAP32[HEAP32[$2 + 36 >> 2] + 12 >> 2];
 HEAP32[$2 + 28 >> 2] = tflite__micro__GetEvalInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], 0);
 HEAP32[$2 + 24 >> 2] = tflite__micro__GetEvalInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], 1);
 HEAP32[$2 + 20 >> 2] = tflite__micro__GetEvalInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], 2);
 HEAP32[$2 + 16 >> 2] = tflite__micro__GetEvalOutput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], 0);
 label$2: {
  if (!HEAP32[HEAP32[$2 + 36 >> 2] + 8 >> 2]) {
   break label$2;
  }
 }
 HEAP32[$2 + 12 >> 2] = HEAP32[HEAP32[$2 + 36 >> 2] + 8 >> 2];
 label$3: {
  label$4: {
   switch (HEAP32[HEAP32[$2 + 28 >> 2] + 8 >> 2] - 1 | 0) {
   case 0:
    HEAP32[$2 + 44 >> 2] = tflite__ops__micro__fully_connected__EvalFloat_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteFusedActivation_2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], HEAP32[HEAP32[$2 + 32 >> 2] >> 2], HEAP32[$2 + 28 >> 2], HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 16 >> 2]);
    break label$3;

   case 8:
    HEAP32[$2 + 44 >> 2] = tflite__ops__micro__fully_connected__EvalQuantizedInt8_28TfLiteContext__2c_20TfLiteNode__2c_20tflite__ops__micro__fully_connected___28anonymous_20namespace_29__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[$2 + 28 >> 2], HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 16 >> 2]);
    break label$3;

   case 2:
    HEAP32[$2 + 44 >> 2] = tflite__ops__micro__fully_connected__EvalQuantized_28TfLiteContext__2c_20TfLiteNode__2c_20tflite__ops__micro__fully_connected___28anonymous_20namespace_29__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[$2 + 28 >> 2], HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 16 >> 2]);
    break label$3;

   default:
    break label$4;
   }
  }
  $0 = HEAP32[HEAP32[$2 + 40 >> 2] + 20 >> 2];
  $1 = HEAP32[$2 + 40 >> 2];
  $3 = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 28 >> 2] + 8 >> 2]);
  HEAP32[$2 + 4 >> 2] = HEAP32[HEAP32[$2 + 28 >> 2] + 8 >> 2];
  HEAP32[$2 >> 2] = $3;
  FUNCTION_TABLE[$0 | 0]($1, 112123, $2);
  HEAP32[$2 + 44 >> 2] = 1;
 }
 __stack_pointer = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}

function tflite__ops__micro__depthwise_conv__EvalQuantizedPerChannel_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteDepthwiseConvParams__2c_20tflite__ops__micro__depthwise_conv___28anonymous_20namespace_29__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__29($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0;
 $8 = __stack_pointer - 192 | 0;
 __stack_pointer = $8;
 HEAP32[$8 + 188 >> 2] = $0;
 HEAP32[$8 + 184 >> 2] = $1;
 HEAP32[$8 + 180 >> 2] = $2;
 HEAP32[$8 + 176 >> 2] = $3;
 HEAP32[$8 + 172 >> 2] = $4;
 HEAP32[$8 + 168 >> 2] = $5;
 HEAP32[$8 + 164 >> 2] = $6;
 HEAP32[$8 + 160 >> 2] = $7;
 HEAP8[$8 + 96 | 0] = 1;
 HEAP16[$8 + 98 >> 1] = HEAP32[HEAP32[$8 + 176 >> 2] >> 2];
 HEAP16[$8 + 100 >> 1] = HEAP32[HEAP32[$8 + 176 >> 2] + 4 >> 2];
 HEAP16[$8 + 106 >> 1] = HEAP32[HEAP32[$8 + 180 >> 2] + 4 >> 2];
 HEAP16[$8 + 108 >> 1] = HEAP32[HEAP32[$8 + 180 >> 2] + 8 >> 2];
 HEAP16[$8 + 110 >> 1] = HEAP32[HEAP32[$8 + 180 >> 2] + 20 >> 2];
 HEAP16[$8 + 112 >> 1] = HEAP32[HEAP32[$8 + 180 >> 2] + 24 >> 2];
 HEAP16[$8 + 114 >> 1] = HEAP32[HEAP32[$8 + 180 >> 2] + 12 >> 2];
 HEAP32[$8 + 116 >> 2] = 0 - HEAP32[HEAP32[$8 + 176 >> 2] + 16 >> 2];
 HEAP32[$8 + 120 >> 2] = 0;
 HEAP32[$8 + 124 >> 2] = HEAP32[HEAP32[$8 + 176 >> 2] + 24 >> 2];
 HEAP32[$8 + 136 >> 2] = std____2__numeric_limits_signed_20char___min_28_29() << 24 >> 24;
 HEAP32[$8 + 140 >> 2] = std____2__numeric_limits_signed_20char___max_28_29() << 24 >> 24;
 $0 = HEAP32[HEAP32[$8 + 176 >> 2] + 36 >> 2];
 $1 = HEAP32[HEAP32[$8 + 176 >> 2] + 40 >> 2];
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($8 + 72 | 0, HEAP32[$8 + 172 >> 2]);
 $2 = signed_20char_20const__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor_20const__29(HEAP32[$8 + 172 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($8 + 48 | 0, HEAP32[$8 + 168 >> 2]);
 $3 = signed_20char_20const__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor_20const__29(HEAP32[$8 + 168 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($8 + 24 | 0, HEAP32[$8 + 164 >> 2]);
 $4 = int_20const__20tflite__micro__GetTensorData_int__28TfLiteEvalTensor_20const__29(HEAP32[$8 + 164 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($8, HEAP32[$8 + 160 >> 2]);
 tflite__reference_integer_ops__DepthwiseConvPerChannel_28tflite__DepthwiseParams_20const__2c_20int_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($8 + 96 | 0, $0, $1, $8 + 72 | 0, $2, $8 + 48 | 0, $3, $8 + 24 | 0, $4, $8, signed_20char__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor__29(HEAP32[$8 + 160 >> 2]));
 tflite__RuntimeShape___RuntimeShape_28_29($8);
 tflite__RuntimeShape___RuntimeShape_28_29($8 + 24 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($8 + 48 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($8 + 72 | 0);
 __stack_pointer = $8 + 192 | 0;
}

function graphicsSetModifiedAndClip($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 48 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 44 >> 2] = $0;
 HEAP32[$6 + 40 >> 2] = $1;
 HEAP32[$6 + 36 >> 2] = $2;
 HEAP32[$6 + 32 >> 2] = $3;
 HEAP32[$6 + 28 >> 2] = $4;
 HEAP8[$6 + 27 | 0] = $5;
 HEAP8[$6 + 26 | 0] = 0;
 $0 = HEAP32[$6 + 44 >> 2];
 HEAP32[$6 + 20 >> 2] = HEAPU8[$0 + 32 | 0] | HEAPU8[$0 + 33 | 0] << 8;
 $0 = HEAP32[$6 + 44 >> 2];
 HEAP32[$6 + 16 >> 2] = HEAPU8[$0 + 34 | 0] | HEAPU8[$0 + 35 | 0] << 8;
 $0 = HEAP32[$6 + 44 >> 2];
 HEAP32[$6 + 12 >> 2] = HEAPU8[$0 + 36 | 0] | HEAPU8[$0 + 37 | 0] << 8;
 $0 = HEAP32[$6 + 44 >> 2];
 HEAP32[$6 + 8 >> 2] = HEAPU8[$0 + 38 | 0] | HEAPU8[$0 + 39 | 0] << 8;
 if (HEAP8[$6 + 27 | 0] & 1) {
  graphicsToDeviceCoordinates(HEAP32[$6 + 44 >> 2], $6 + 20 | 0, $6 + 16 | 0);
  graphicsToDeviceCoordinates(HEAP32[$6 + 44 >> 2], $6 + 12 | 0, $6 + 8 | 0);
  if (HEAP32[$6 + 12 >> 2] < HEAP32[$6 + 20 >> 2]) {
   HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 20 >> 2];
   HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 12 >> 2];
   HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 4 >> 2];
  }
  if (HEAP32[$6 + 8 >> 2] < HEAP32[$6 + 16 >> 2]) {
   HEAP32[$6 >> 2] = HEAP32[$6 + 16 >> 2];
   HEAP32[$6 + 16 >> 2] = HEAP32[$6 + 8 >> 2];
   HEAP32[$6 + 8 >> 2] = HEAP32[$6 >> 2];
  }
 }
 if (HEAP32[HEAP32[$6 + 40 >> 2] >> 2] < HEAP32[$6 + 20 >> 2]) {
  HEAP32[HEAP32[$6 + 40 >> 2] >> 2] = HEAP32[$6 + 20 >> 2];
  HEAP8[$6 + 26 | 0] = 1;
 }
 if (HEAP32[HEAP32[$6 + 36 >> 2] >> 2] < HEAP32[$6 + 16 >> 2]) {
  HEAP32[HEAP32[$6 + 36 >> 2] >> 2] = HEAP32[$6 + 16 >> 2];
  HEAP8[$6 + 26 | 0] = 1;
 }
 if (HEAP32[HEAP32[$6 + 32 >> 2] >> 2] > HEAP32[$6 + 12 >> 2]) {
  HEAP32[HEAP32[$6 + 32 >> 2] >> 2] = HEAP32[$6 + 12 >> 2];
  HEAP8[$6 + 26 | 0] = 1;
 }
 if (HEAP32[HEAP32[$6 + 28 >> 2] >> 2] > HEAP32[$6 + 8 >> 2]) {
  HEAP32[HEAP32[$6 + 28 >> 2] >> 2] = HEAP32[$6 + 8 >> 2];
  HEAP8[$6 + 26 | 0] = 1;
 }
 $0 = HEAP32[$6 + 44 >> 2];
 if (HEAP32[HEAP32[$6 + 40 >> 2] >> 2] < (HEAPU8[$0 + 40 | 0] | HEAPU8[$0 + 41 | 0] << 8) << 16 >> 16) {
  $0 = HEAP32[$6 + 44 >> 2];
  $1 = HEAP32[HEAP32[$6 + 40 >> 2] >> 2];
  HEAP8[$0 + 40 | 0] = $1;
  HEAP8[$0 + 41 | 0] = $1 >>> 8;
  HEAP8[$6 + 26 | 0] = 1;
 }
 $0 = HEAP32[$6 + 44 >> 2];
 if (HEAP32[HEAP32[$6 + 32 >> 2] >> 2] > (HEAPU8[$0 + 44 | 0] | HEAPU8[$0 + 45 | 0] << 8) << 16 >> 16) {
  $0 = HEAP32[$6 + 44 >> 2];
  $1 = HEAP32[HEAP32[$6 + 32 >> 2] >> 2];
  HEAP8[$0 + 44 | 0] = $1;
  HEAP8[$0 + 45 | 0] = $1 >>> 8;
  HEAP8[$6 + 26 | 0] = 1;
 }
 $0 = HEAP32[$6 + 44 >> 2];
 if (HEAP32[HEAP32[$6 + 36 >> 2] >> 2] < (HEAPU8[$0 + 42 | 0] | HEAPU8[$0 + 43 | 0] << 8) << 16 >> 16) {
  $0 = HEAP32[$6 + 44 >> 2];
  $1 = HEAP32[HEAP32[$6 + 36 >> 2] >> 2];
  HEAP8[$0 + 42 | 0] = $1;
  HEAP8[$0 + 43 | 0] = $1 >>> 8;
  HEAP8[$6 + 26 | 0] = 1;
 }
 $0 = HEAP32[$6 + 44 >> 2];
 if (HEAP32[HEAP32[$6 + 28 >> 2] >> 2] > (HEAPU8[$0 + 46 | 0] | HEAPU8[$0 + 47 | 0] << 8) << 16 >> 16) {
  $0 = HEAP32[$6 + 44 >> 2];
  $1 = HEAP32[HEAP32[$6 + 28 >> 2] >> 2];
  HEAP8[$0 + 46 | 0] = $1;
  HEAP8[$0 + 47 | 0] = $1 >>> 8;
  HEAP8[$6 + 26 | 0] = 1;
 }
 __stack_pointer = $6 + 48 | 0;
 return HEAP8[$6 + 26 | 0] & 1;
}

function jsvReadConfigObject($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer + -64 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 56 >> 2] = $0;
 HEAP32[$3 + 52 >> 2] = $1;
 HEAP32[$3 + 48 >> 2] = $2;
 label$1: {
  if (jsvIsUndefined(HEAP32[$3 + 56 >> 2]) & 1) {
   HEAP8[$3 + 63 | 0] = 1;
   break label$1;
  }
  if (!(jsvIsObject(HEAP32[$3 + 56 >> 2]) & 1)) {
   HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 56 >> 2];
   jsExceptionHere(1, 99206, $3 + 16 | 0);
   HEAP8[$3 + 63 | 0] = 0;
   break label$1;
  }
  jsvObjectIteratorNew($3 + 40 | 0, HEAP32[$3 + 56 >> 2]);
  HEAP8[$3 + 39 | 0] = 1;
  while (1) {
   $0 = 0;
   if (HEAP8[$3 + 39 | 0] & 1) {
    $0 = jsvObjectIteratorHasValue($3 + 40 | 0);
   }
   if ($0 & 1) {
    HEAP32[$3 + 32 >> 2] = jsvObjectIteratorGetKey($3 + 40 | 0);
    HEAP8[$3 + 31 | 0] = 0;
    HEAP32[$3 + 24 >> 2] = 0;
    while (1) {
     if (HEAP32[$3 + 24 >> 2] < HEAP32[$3 + 48 >> 2]) {
      if (jsvIsStringEqual(HEAP32[$3 + 32 >> 2], HEAP32[HEAP32[$3 + 52 >> 2] + Math_imul(HEAP32[$3 + 24 >> 2], 12) >> 2]) & 1) {
       HEAP8[$3 + 31 | 0] = 1;
       if (HEAP32[(HEAP32[$3 + 52 >> 2] + Math_imul(HEAP32[$3 + 24 >> 2], 12) | 0) + 8 >> 2]) {
        HEAP32[$3 + 20 >> 2] = jsvObjectIteratorGetValue($3 + 40 | 0);
        label$11: {
         label$12: {
          switch (HEAPU16[(HEAP32[$3 + 52 >> 2] + Math_imul(HEAP32[$3 + 24 >> 2], 12) | 0) + 4 >> 1] - 3 | 0) {
          case 0:
          case 2:
          case 4:
          case 25:
           $0 = jsvLockAgain(HEAP32[$3 + 20 >> 2]);
           HEAP32[HEAP32[(HEAP32[$3 + 52 >> 2] + Math_imul(HEAP32[$3 + 24 >> 2], 12) | 0) + 8 >> 2] >> 2] = $0;
           break label$11;

          case 10:
           $0 = jshGetPinFromVar(HEAP32[$3 + 20 >> 2]);
           HEAP8[HEAP32[(HEAP32[$3 + 52 >> 2] + Math_imul(HEAP32[$3 + 24 >> 2], 12) | 0) + 8 >> 2]] = $0;
           break label$11;

          case 9:
           $0 = jsvGetBool(HEAP32[$3 + 20 >> 2]);
           HEAP8[HEAP32[(HEAP32[$3 + 52 >> 2] + Math_imul(HEAP32[$3 + 24 >> 2], 12) | 0) + 8 >> 2]] = $0 & 1;
           break label$11;

          case 7:
           $0 = jsvGetInteger(HEAP32[$3 + 20 >> 2]);
           HEAP32[HEAP32[(HEAP32[$3 + 52 >> 2] + Math_imul(HEAP32[$3 + 24 >> 2], 12) | 0) + 8 >> 2] >> 2] = $0;
           break label$11;

          case 8:
           break label$12;

          default:
           break label$11;
          }
         }
         $4 = jsvGetFloat(HEAP32[$3 + 20 >> 2]);
         HEAPF64[HEAP32[(HEAP32[$3 + 52 >> 2] + Math_imul(HEAP32[$3 + 24 >> 2], 12) | 0) + 8 >> 2] >> 3] = $4;
        }
        jsvUnLock(HEAP32[$3 + 20 >> 2]);
       }
      }
      HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 24 >> 2] + 1;
      continue;
     }
     break;
    }
    if (!(HEAP8[$3 + 31 | 0] & 1)) {
     HEAP32[$3 >> 2] = HEAP32[$3 + 32 >> 2];
     jsExceptionHere(1, 101650, $3);
     HEAP8[$3 + 39 | 0] = 0;
    }
    jsvUnLock(HEAP32[$3 + 32 >> 2]);
    jsvObjectIteratorNext($3 + 40 | 0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree($3 + 40 | 0);
  HEAP8[$3 + 63 | 0] = HEAP8[$3 + 39 | 0] & 1;
 }
 __stack_pointer = $3 - -64 | 0;
 return HEAP8[$3 + 63 | 0] & 1;
}

function jswrap_graphics_createImage($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 96 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 88 >> 2] = $0;
 label$1: {
  if (!(jsvIsString(HEAP32[$1 + 88 >> 2]) & 1)) {
   jsExceptionHere(3, 103778, 0);
   HEAP32[$1 + 92 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 84 >> 2] = 0;
  HEAP32[$1 + 80 >> 2] = 0;
  HEAP32[$1 + 76 >> 2] = 0;
  HEAP32[$1 + 72 >> 2] = 0;
  HEAP32[$1 + 68 >> 2] = 0;
  jsvStringIteratorNew($1 + 32 | 0, HEAP32[$1 + 88 >> 2], 0);
  while (1) {
   if (jsvStringIteratorHasChar_12($1 + 32 | 0) & 1) {
    HEAP8[$1 + 31 | 0] = jsvStringIteratorGetCharAndNext($1 + 32 | 0);
    label$5: {
     if (HEAP8[$1 + 31 | 0] == 10) {
      if (!(HEAP32[$1 + 68 >> 2] | (HEAP32[$1 + 84 >> 2] | HEAP32[$1 + 80 >> 2]))) {
       HEAP32[$1 + 68 >> 2] = 1;
       break label$5;
      }
      HEAP32[$1 + 84 >> 2] = 0;
      HEAP32[$1 + 80 >> 2] = HEAP32[$1 + 80 >> 2] + 1;
      if (HEAP32[$1 + 72 >> 2] < (HEAP32[$1 + 80 >> 2] + 1 | 0)) {
       HEAP32[$1 + 72 >> 2] = HEAP32[$1 + 80 >> 2] + 1;
      }
      break label$5;
     }
     HEAP32[$1 + 84 >> 2] = HEAP32[$1 + 84 >> 2] + 1;
     if (HEAP32[$1 + 84 >> 2] > HEAP32[$1 + 76 >> 2]) {
      HEAP32[$1 + 76 >> 2] = HEAP32[$1 + 84 >> 2];
     }
    }
    continue;
   }
   break;
  }
  if (!(!HEAP32[$1 + 72 >> 2] | HEAP8[$1 + 31 | 0] != 10)) {
   HEAP32[$1 + 72 >> 2] = HEAP32[$1 + 72 >> 2] - 1;
  }
  jsvStringIteratorFree_16($1 + 32 | 0);
  HEAP32[$1 + 24 >> 2] = jsvNewObject();
  if (!HEAP32[$1 + 24 >> 2]) {
   HEAP32[$1 + 92 >> 2] = 0;
   break label$1;
  }
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 24 >> 2], 103393, jsvNewFromInteger(HEAP32[$1 + 76 >> 2]));
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 24 >> 2], 97915, jsvNewFromInteger(HEAP32[$1 + 72 >> 2]));
  HEAP32[$1 + 20 >> 2] = Math_imul(HEAP32[$1 + 76 >> 2], HEAP32[$1 + 72 >> 2]) + 7 >> 3;
  HEAP32[$1 + 16 >> 2] = jsvNewStringOfLength(HEAP32[$1 + 20 >> 2], 0);
  if (!HEAP32[$1 + 16 >> 2]) {
   jsvUnLock(HEAP32[$1 + 24 >> 2]);
   HEAP32[$1 + 92 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 84 >> 2] = 0;
  HEAP32[$1 + 80 >> 2] = 0;
  jsvStringIteratorNew($1 + 32 | 0, HEAP32[$1 + 88 >> 2], HEAP32[$1 + 68 >> 2]);
  while (1) {
   if (jsvStringIteratorHasChar_12($1 + 32 | 0) & 1) {
    HEAP8[$1 + 15 | 0] = jsvStringIteratorGetCharAndNext($1 + 32 | 0);
    label$15: {
     if (HEAP8[$1 + 15 | 0] == 10) {
      HEAP32[$1 + 84 >> 2] = 0;
      HEAP32[$1 + 80 >> 2] = HEAP32[$1 + 80 >> 2] + 1;
      break label$15;
     }
     if (!(HEAP8[$1 + 15 | 0] == 32 | HEAP8[$1 + 15 | 0] == 46)) {
      HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 84 >> 2] + Math_imul(HEAP32[$1 + 80 >> 2], HEAP32[$1 + 76 >> 2]);
      jsvSetCharInString(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 8 >> 2] >>> 3 | 0, 128 >> (HEAP32[$1 + 8 >> 2] & 7) << 24 >> 24, 1);
     }
     HEAP32[$1 + 84 >> 2] = HEAP32[$1 + 84 >> 2] + 1;
    }
    continue;
   }
   break;
  }
  jsvStringIteratorFree_16($1 + 32 | 0);
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 24 >> 2], 101361, HEAP32[$1 + 16 >> 2]);
  HEAP32[$1 + 92 >> 2] = HEAP32[$1 + 24 >> 2];
 }
 __stack_pointer = $1 + 96 | 0;
 return HEAP32[$1 + 92 >> 2];
}

function jswGetSymbolListForObjectProto($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (jsvIsNativeFunction(HEAP32[$1 + 8 >> 2]) & 1) {
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 27) {
    HEAP32[$1 + 12 >> 2] = 140041;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 32) {
    HEAP32[$1 + 12 >> 2] = 140095;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 46) {
    HEAP32[$1 + 12 >> 2] = 140113;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 47) {
    HEAP32[$1 + 12 >> 2] = 140122;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 35) {
    HEAP32[$1 + 12 >> 2] = 140230;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 48) {
    HEAP32[$1 + 12 >> 2] = 140257;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 37) {
    HEAP32[$1 + 12 >> 2] = 140275;
    break label$1;
   }
  }
  label$10: {
   if (jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1) {
    $0 = jsvSkipNameAndUnLock(jsvFindChildFromString(HEAP32[$1 + 8 >> 2], 100982));
    break label$10;
   }
   $0 = 0;
  }
  HEAP32[$1 + 4 >> 2] = $0;
  label$12: {
   if (!HEAP32[$1 + 4 >> 2]) {
    break label$12;
   }
   if (!(jsvIsNativeFunction(HEAP32[$1 + 4 >> 2]) & 1)) {
    break label$12;
   }
   HEAP32[$1 >> 2] = jswGetSymbolListForConstructorProto(HEAP32[$1 + 4 >> 2]);
   jsvUnLock(HEAP32[$1 + 4 >> 2]);
   if (HEAP32[$1 >> 2]) {
    HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
    break label$1;
   }
  }
  if (jsvIsPin(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 140041;
   break label$1;
  }
  if (jsvIsArray(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 140095;
   break label$1;
  }
  if (!(!(jsvIsArrayBuffer(HEAP32[$1 + 8 >> 2]) & 1) | HEAPU8[HEAP32[$1 + 8 >> 2] + 5 | 0] != 129)) {
   HEAP32[$1 + 12 >> 2] = 140113;
   break label$1;
  }
  if (!(!(jsvIsArrayBuffer(HEAP32[$1 + 8 >> 2]) & 1) | HEAPU8[HEAP32[$1 + 8 >> 2] + 5 | 0] == 129)) {
   HEAP32[$1 + 12 >> 2] = 140122;
   break label$1;
  }
  if (jsvIsNumeric(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 140230;
   break label$1;
  }
  if (jsvIsFunction(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 140257;
   break label$1;
  }
  if (jsvIsString(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 140275;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 140239;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jswrap_atob($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 128 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 120 >> 2] = $0;
 label$1: {
  if (!(jsvIsString(HEAP32[$1 + 120 >> 2]) & 1)) {
   HEAP32[$1 >> 2] = HEAP32[$1 + 120 >> 2];
   jsExceptionHere(1, 99048, $1);
   HEAP32[$1 + 124 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 116 >> 2] = 0;
  jsvStringIteratorNew($1 + 80 | 0, HEAP32[$1 + 120 >> 2], 0);
  HEAP8[$1 + 79 | 0] = 0;
  HEAP8[$1 + 78 | 0] = 0;
  while (1) {
   if (jsvStringIteratorHasChar_6($1 + 80 | 0) & 1) {
    HEAP8[$1 + 77 | 0] = jsvStringIteratorGetChar_4($1 + 80 | 0);
    if (!(isWhitespace(HEAP8[$1 + 77 | 0]) & 1)) {
     HEAP8[$1 + 78 | 0] = HEAPU8[$1 + 79 | 0];
     HEAP8[$1 + 79 | 0] = HEAPU8[$1 + 77 | 0];
     HEAP32[$1 + 116 >> 2] = HEAP32[$1 + 116 >> 2] + 1;
    }
    jsvStringIteratorNext($1 + 80 | 0);
    continue;
   }
   break;
  }
  jsvStringIteratorFree_7($1 + 80 | 0);
  HEAP32[$1 + 72 >> 2] = Math_imul(HEAP32[$1 + 116 >> 2], 3) >>> 2;
  if (HEAP8[$1 + 79 | 0] == 61) {
   HEAP32[$1 + 72 >> 2] = HEAP32[$1 + 72 >> 2] - 1;
  }
  if (HEAP8[$1 + 78 | 0] == 61) {
   HEAP32[$1 + 72 >> 2] = HEAP32[$1 + 72 >> 2] - 1;
  }
  HEAP32[$1 + 68 >> 2] = jsvNewStringOfLength(HEAP32[$1 + 72 >> 2], 0);
  if (!HEAP32[$1 + 68 >> 2]) {
   HEAP32[$1 + 124 >> 2] = 0;
   break label$1;
  }
  jsvStringIteratorNew($1 + 80 | 0, HEAP32[$1 + 120 >> 2], 0);
  jsvStringIteratorNew($1 + 32 | 0, HEAP32[$1 + 68 >> 2], 0);
  while (1) {
   $0 = 0;
   if (jsvStringIteratorHasChar_6($1 + 80 | 0) & 1) {
    $0 = jspIsInterrupted() ^ -1;
   }
   if ($0 & 1) {
    HEAP32[$1 + 28 >> 2] = 0;
    HEAP32[$1 + 20 >> 2] = 0;
    HEAP32[$1 + 24 >> 2] = 0;
    while (1) {
     if (HEAP32[$1 + 24 >> 2] < 4) {
      if (jsvStringIteratorHasChar_6($1 + 80 | 0) & 1) {
       HEAP8[$1 + 19 | 0] = 32;
       while (1) {
        $0 = 0;
        if (HEAP8[$1 + 19 | 0]) {
         $0 = isWhitespace(HEAP8[$1 + 19 | 0]);
        }
        if ($0 & 1) {
         HEAP8[$1 + 19 | 0] = jsvStringIteratorGetCharAndNext($1 + 80 | 0);
         continue;
        }
        break;
       }
       HEAP32[$1 + 12 >> 2] = jswrap_atob_decode(HEAP8[$1 + 19 | 0]);
       if (HEAP32[$1 + 12 >> 2] >= 0) {
        HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 28 >> 2] | HEAP32[$1 + 12 >> 2] << Math_imul(3 - HEAP32[$1 + 24 >> 2] | 0, 6);
        HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 24 >> 2];
       }
      }
      HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 24 >> 2] + 1;
      continue;
     }
     break;
    }
    if (HEAP32[$1 + 20 >> 2] > 0) {
     jsvStringIteratorSetCharAndNext($1 + 32 | 0, HEAP32[$1 + 28 >> 2] >>> 16 << 24 >> 24);
    }
    if (HEAP32[$1 + 20 >> 2] > 1) {
     jsvStringIteratorSetCharAndNext($1 + 32 | 0, HEAP32[$1 + 28 >> 2] >>> 8 << 24 >> 24);
    }
    if (HEAP32[$1 + 20 >> 2] > 2) {
     jsvStringIteratorSetCharAndNext($1 + 32 | 0, HEAP32[$1 + 28 >> 2] << 24 >> 24);
    }
    continue;
   }
   break;
  }
  jsvStringIteratorFree_7($1 + 80 | 0);
  jsvStringIteratorFree_7($1 + 32 | 0);
  HEAP32[$1 + 124 >> 2] = HEAP32[$1 + 68 >> 2];
 }
 __stack_pointer = $1 + 128 | 0;
 return HEAP32[$1 + 124 >> 2];
}

function jsspiSoftwareFunc($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 44 >> 2] = $0;
 HEAP32[$4 + 40 >> 2] = $1;
 HEAP32[$4 + 36 >> 2] = $2;
 HEAP32[$4 + 32 >> 2] = $3;
 HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 32 >> 2];
 HEAP8[$4 + 27 | 0] = HEAP8[HEAP32[$4 + 28 >> 2] + 8 | 0] & 1;
 HEAP8[$4 + 26 | 0] = (HEAPU8[HEAP32[$4 + 28 >> 2] + 8 | 0] & 2) != 0;
 HEAP32[$4 + 20 >> 2] = HEAP8[HEAP32[$4 + 28 >> 2] + 9 | 0] & 1 ? -1 : 1;
 if (HEAP8[HEAP32[$4 + 28 >> 2] + 9 | 0] & 1) {
  $0 = -1;
 } else {
  $0 = HEAP32[$4 + 28 >> 2];
  $0 = HEAPU8[$0 + 10 | 0] | HEAPU8[$0 + 11 | 0] << 8 | (HEAPU8[$0 + 12 | 0] << 16 | HEAPU8[$0 + 13 | 0] << 24);
 }
 HEAP32[$4 + 16 >> 2] = $0;
 HEAP32[$4 + 12 >> 2] = 0;
 while (1) {
  if (HEAPU32[$4 + 12 >> 2] < HEAPU32[$4 + 36 >> 2]) {
   HEAP32[$4 + 8 >> 2] = HEAPU8[HEAP32[$4 + 44 >> 2] + HEAP32[$4 + 12 >> 2] | 0];
   HEAP32[$4 + 4 >> 2] = 0;
   label$5: {
    if (HEAP8[HEAP32[$4 + 28 >> 2] + 9 | 0] & 1) {
     $0 = HEAP32[$4 + 28 >> 2];
     $0 = (HEAPU8[$0 + 10 | 0] | HEAPU8[$0 + 11 | 0] << 8 | (HEAPU8[$0 + 12 | 0] << 16 | HEAPU8[$0 + 13 | 0] << 24)) - 1 | 0;
     break label$5;
    }
    $0 = 0;
   }
   HEAP32[$4 >> 2] = $0;
   while (1) {
    if (HEAP32[$4 >> 2] != HEAP32[$4 + 16 >> 2]) {
     label$9: {
      if (!(HEAP8[$4 + 27 | 0] & 1)) {
       if (HEAPU8[HEAP32[$4 + 28 >> 2] + 7 | 0] != 255) {
        jshPinSetValue(HEAPU8[HEAP32[$4 + 28 >> 2] + 7 | 0], HEAP32[$4 + 8 >> 2] >> HEAP32[$4 >> 2] & 1);
       }
       if (HEAPU8[HEAP32[$4 + 28 >> 2] + 5 | 0] != 255) {
        jshPinSetValue(HEAPU8[HEAP32[$4 + 28 >> 2] + 5 | 0], (HEAPU8[$4 + 26 | 0] ^ -1) & 1);
       }
       if (HEAPU8[HEAP32[$4 + 28 >> 2] + 6 | 0] != 255) {
        HEAP32[$4 + 4 >> 2] = (jshPinGetValue(HEAPU8[HEAP32[$4 + 28 >> 2] + 6 | 0]) & 1) << HEAP32[$4 >> 2] | HEAP32[$4 + 4 >> 2];
       }
       if (HEAPU8[HEAP32[$4 + 28 >> 2] + 5 | 0] != 255) {
        jshPinSetValue(HEAPU8[HEAP32[$4 + 28 >> 2] + 5 | 0], HEAP8[$4 + 26 | 0] & 1);
       }
       break label$9;
      }
      if (HEAPU8[HEAP32[$4 + 28 >> 2] + 5 | 0] != 255) {
       jshPinSetValue(HEAPU8[HEAP32[$4 + 28 >> 2] + 5 | 0], (HEAPU8[$4 + 26 | 0] ^ -1) & 1);
      }
      if (HEAPU8[HEAP32[$4 + 28 >> 2] + 7 | 0] != 255) {
       jshPinSetValue(HEAPU8[HEAP32[$4 + 28 >> 2] + 7 | 0], HEAP32[$4 + 8 >> 2] >> HEAP32[$4 >> 2] & 1);
      }
      if (HEAPU8[HEAP32[$4 + 28 >> 2] + 5 | 0] != 255) {
       jshPinSetValue(HEAPU8[HEAP32[$4 + 28 >> 2] + 5 | 0], HEAP8[$4 + 26 | 0] & 1);
      }
      if (HEAPU8[HEAP32[$4 + 28 >> 2] + 6 | 0] != 255) {
       HEAP32[$4 + 4 >> 2] = (jshPinGetValue(HEAPU8[HEAP32[$4 + 28 >> 2] + 6 | 0]) & 1) << HEAP32[$4 >> 2] | HEAP32[$4 + 4 >> 2];
      }
     }
     HEAP32[$4 >> 2] = HEAP32[$4 + 20 >> 2] + HEAP32[$4 >> 2];
     continue;
    }
    break;
   }
   if (HEAP32[$4 + 40 >> 2]) {
    HEAP8[HEAP32[$4 + 40 >> 2] + HEAP32[$4 + 12 >> 2] | 0] = HEAP32[$4 + 4 >> 2];
   }
   HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $4 + 48 | 0;
}

function utilTimerRemoveTask($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 jshInterruptOff();
 HEAP8[$2 + 3 | 0] = HEAPU8[188993];
 label$1: {
  if (HEAPU8[$2 + 3 | 0] != HEAPU8[188994]) {
   HEAP8[$2 + 2 | 0] = HEAPU8[188994] + 15 & 15;
   HEAP8[$2 + 3 | 0] = HEAPU8[$2 + 3 | 0] + 15 & 15;
   while (1) {
    if (HEAPU8[$2 + 3 | 0] != HEAPU8[$2 + 2 | 0]) {
     if (FUNCTION_TABLE[HEAP32[$2 + 8 >> 2]](Math_imul(HEAPU8[$2 + 3 | 0], 25) + 189008 | 0, HEAP32[$2 + 4 >> 2]) & 1) {
      HEAP8[$2 + 1 | 0] = HEAPU8[$2 + 3 | 0] + 15 & 15;
      while (1) {
       if (HEAPU8[$2 + 1 | 0] != HEAPU8[$2 + 2 | 0]) {
        $3 = Math_imul(HEAPU8[$2 + 1 | 0], 25) + 189008 | 0;
        $0 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
        $4 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
        $5 = $0;
        $1 = Math_imul(HEAPU8[$2 + 3 | 0], 25) + 189008 | 0;
        $0 = $1;
        HEAP8[$0 | 0] = $5;
        HEAP8[$0 + 1 | 0] = $5 >>> 8;
        HEAP8[$0 + 2 | 0] = $5 >>> 16;
        HEAP8[$0 + 3 | 0] = $5 >>> 24;
        HEAP8[$0 + 4 | 0] = $4;
        HEAP8[$0 + 5 | 0] = $4 >>> 8;
        HEAP8[$0 + 6 | 0] = $4 >>> 16;
        HEAP8[$0 + 7 | 0] = $4 >>> 24;
        HEAP8[$0 + 24 | 0] = HEAPU8[$3 + 24 | 0];
        $0 = HEAPU8[$3 + 20 | 0] | HEAPU8[$3 + 21 | 0] << 8 | (HEAPU8[$3 + 22 | 0] << 16 | HEAPU8[$3 + 23 | 0] << 24);
        $4 = HEAPU8[$3 + 16 | 0] | HEAPU8[$3 + 17 | 0] << 8 | (HEAPU8[$3 + 18 | 0] << 16 | HEAPU8[$3 + 19 | 0] << 24);
        $5 = $4;
        $4 = $1;
        HEAP8[$4 + 16 | 0] = $5;
        HEAP8[$4 + 17 | 0] = $5 >>> 8;
        HEAP8[$4 + 18 | 0] = $5 >>> 16;
        HEAP8[$4 + 19 | 0] = $5 >>> 24;
        HEAP8[$4 + 20 | 0] = $0;
        HEAP8[$4 + 21 | 0] = $0 >>> 8;
        HEAP8[$4 + 22 | 0] = $0 >>> 16;
        HEAP8[$4 + 23 | 0] = $0 >>> 24;
        $4 = HEAPU8[$3 + 12 | 0] | HEAPU8[$3 + 13 | 0] << 8 | (HEAPU8[$3 + 14 | 0] << 16 | HEAPU8[$3 + 15 | 0] << 24);
        $0 = HEAPU8[$3 + 8 | 0] | HEAPU8[$3 + 9 | 0] << 8 | (HEAPU8[$3 + 10 | 0] << 16 | HEAPU8[$3 + 11 | 0] << 24);
        $5 = $0;
        $0 = $1;
        HEAP8[$0 + 8 | 0] = $5;
        HEAP8[$0 + 9 | 0] = $5 >>> 8;
        HEAP8[$0 + 10 | 0] = $5 >>> 16;
        HEAP8[$0 + 11 | 0] = $5 >>> 24;
        HEAP8[$0 + 12 | 0] = $4;
        HEAP8[$0 + 13 | 0] = $4 >>> 8;
        HEAP8[$0 + 14 | 0] = $4 >>> 16;
        HEAP8[$0 + 15 | 0] = $4 >>> 24;
        HEAP8[$2 + 3 | 0] = HEAPU8[$2 + 1 | 0];
        HEAP8[$2 + 1 | 0] = HEAPU8[$2 + 3 | 0] + 15 & 15;
        continue;
       }
       break;
      }
      HEAP8[188994] = HEAPU8[188994] + 1 & 15;
      jshInterruptOn();
      HEAP8[$2 + 15 | 0] = 1;
      break label$1;
     } else {
      HEAP8[$2 + 3 | 0] = HEAPU8[$2 + 3 | 0] + 15 & 15;
      continue;
     }
    }
    break;
   }
  }
  jshInterruptOn();
  HEAP8[$2 + 15 | 0] = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP8[$2 + 15 | 0] & 1;
}

function jswrap_typedarray_constructor($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 112 | 0;
 __stack_pointer = $4;
 HEAP8[$4 + 107 | 0] = $0;
 HEAP32[$4 + 100 >> 2] = $1;
 HEAP32[$4 + 96 >> 2] = $2;
 HEAP32[$4 + 92 >> 2] = $3;
 HEAP32[$4 + 88 >> 2] = 0;
 HEAP8[$4 + 87 | 0] = 0;
 label$1: {
  if (!(HEAP32[$4 + 96 >> 2] <= 65535 & HEAP32[$4 + 96 >> 2] >= 0)) {
   jsExceptionHere(1, 126222, 0);
   HEAP32[$4 + 108 >> 2] = 0;
   break label$1;
  }
  label$4: {
   if (!(!(jsvIsArrayBuffer(HEAP32[$4 + 100 >> 2]) & 1) | HEAPU8[HEAP32[$4 + 100 >> 2] + 5 | 0] != 129)) {
    HEAP32[$4 + 88 >> 2] = jsvLockAgain(HEAP32[$4 + 100 >> 2]);
    break label$4;
   }
   label$6: {
    if (jsvIsNumeric(HEAP32[$4 + 100 >> 2]) & 1) {
     HEAP32[$4 + 92 >> 2] = jsvGetInteger(HEAP32[$4 + 100 >> 2]);
     HEAP32[$4 + 96 >> 2] = 0;
     HEAP32[$4 + 88 >> 2] = jswrap_arraybuffer_constructor(Math_imul(HEAP32[$4 + 92 >> 2], HEAPU8[$4 + 107 | 0] & 15));
     break label$6;
    }
    label$8: {
     if (!(jsvIsArray(HEAP32[$4 + 100 >> 2]) & 1)) {
      if (!(jsvIsArrayBuffer(HEAP32[$4 + 100 >> 2]) & 1)) {
       break label$8;
      }
     }
     HEAP32[$4 + 92 >> 2] = jsvGetLength(HEAP32[$4 + 100 >> 2]);
     HEAP32[$4 + 96 >> 2] = 0;
     HEAP32[$4 + 88 >> 2] = jswrap_arraybuffer_constructor(Math_imul(HEAP32[$4 + 92 >> 2], HEAPU8[$4 + 107 | 0] & 15));
     HEAP8[$4 + 87 | 0] = 1;
    }
   }
  }
  if (!HEAP32[$4 + 88 >> 2]) {
   HEAP32[$4 >> 2] = HEAP32[$4 + 100 >> 2];
   jsExceptionHere(1, 99391, $4);
   HEAP32[$4 + 108 >> 2] = 0;
   break label$1;
  }
  if (!HEAP32[$4 + 92 >> 2]) {
   HEAP32[$4 + 92 >> 2] = (jsvGetArrayBufferLength(HEAP32[$4 + 88 >> 2]) - HEAP32[$4 + 96 >> 2] | 0) / (HEAPU8[$4 + 107 | 0] & 15);
   if (HEAP32[$4 + 92 >> 2] < 0) {
    HEAP32[$4 + 92 >> 2] = 0;
   }
  }
  HEAP32[$4 + 80 >> 2] = jsvNewWithFlags(4);
  if (HEAP32[$4 + 80 >> 2]) {
   HEAP8[HEAP32[$4 + 80 >> 2] + 5 | 0] = HEAPU8[$4 + 107 | 0];
   $0 = HEAP32[$4 + 80 >> 2];
   $1 = HEAP32[$4 + 96 >> 2];
   HEAP8[$0 | 0] = $1;
   HEAP8[$0 + 1 | 0] = $1 >>> 8;
   $0 = HEAP32[$4 + 80 >> 2];
   $1 = HEAP32[$4 + 92 >> 2];
   HEAP8[$0 + 2 | 0] = $1;
   HEAP8[$0 + 3 | 0] = $1 >>> 8;
   HEAP8[$0 + 4 | 0] = $1 >>> 16;
   jsvSetFirstChild(HEAP32[$4 + 80 >> 2], jsvGetRef(jsvRef(HEAP32[$4 + 88 >> 2])) & 65535);
   if (HEAP8[$4 + 87 | 0] & 1) {
    jsvIteratorNew($4 + 16 | 0, HEAP32[$4 + 100 >> 2], 0);
    while (1) {
     if (jsvIteratorHasElement($4 + 16 | 0) & 1) {
      HEAP32[$4 + 12 >> 2] = jsvIteratorGetKey($4 + 16 | 0);
      if (jsvIsInt(HEAP32[$4 + 12 >> 2]) & 1) {
       HEAP32[$4 + 8 >> 2] = jsvIteratorGetValue($4 + 16 | 0);
       jsvArrayBufferSet(HEAP32[$4 + 80 >> 2], jsvGetInteger(HEAP32[$4 + 12 >> 2]), HEAP32[$4 + 8 >> 2]);
       jsvUnLock(HEAP32[$4 + 8 >> 2]);
      }
      jsvUnLock(HEAP32[$4 + 12 >> 2]);
      jsvIteratorNext($4 + 16 | 0);
      continue;
     }
     break;
    }
    jsvIteratorFree($4 + 16 | 0);
   }
  }
  jsvUnLock(HEAP32[$4 + 88 >> 2]);
  HEAP32[$4 + 108 >> 2] = HEAP32[$4 + 80 >> 2];
 }
 __stack_pointer = $4 + 112 | 0;
 return HEAP32[$4 + 108 >> 2];
}

function graphicsBlendColor($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 112 | 0;
 HEAP32[$4 + 104 >> 2] = $0;
 HEAP32[$4 + 100 >> 2] = $1;
 HEAP32[$4 + 96 >> 2] = $2;
 HEAP32[$4 + 92 >> 2] = $3;
 if (HEAP32[$4 + 92 >> 2] > 0) {
  $0 = HEAP32[$4 + 92 >> 2];
 } else {
  $0 = 0;
 }
 HEAP32[$4 + 88 >> 2] = $0;
 if (HEAPU32[$4 + 88 >> 2] > 256) {
  HEAP32[$4 + 88 >> 2] = 256;
 }
 label$4: {
  if (!(!(HEAPU8[HEAP32[$4 + 104 >> 2] + 16 | 0] == 2 | HEAPU8[HEAP32[$4 + 104 >> 2] + 16 | 0] == 4) & HEAPU8[HEAP32[$4 + 104 >> 2] + 16 | 0] != 8)) {
   HEAP32[$4 + 108 >> 2] = (Math_imul(HEAP32[$4 + 96 >> 2], 256 - HEAP32[$4 + 88 >> 2] | 0) + Math_imul(HEAP32[$4 + 100 >> 2], HEAP32[$4 + 88 >> 2]) | 0) + 127 >>> 8;
   break label$4;
  }
  if (HEAPU8[HEAP32[$4 + 104 >> 2] + 16 | 0] == 16) {
   HEAP32[$4 + 84 >> 2] = HEAP32[$4 + 96 >> 2];
   HEAP32[$4 + 80 >> 2] = HEAP32[$4 + 84 >> 2] >>> 11 & 31;
   HEAP32[$4 + 76 >> 2] = HEAP32[$4 + 84 >> 2] >>> 5 & 63;
   HEAP32[$4 + 72 >> 2] = HEAP32[$4 + 84 >> 2] & 31;
   HEAP32[$4 + 68 >> 2] = HEAP32[$4 + 100 >> 2];
   HEAP32[$4 + 64 >> 2] = HEAP32[$4 + 68 >> 2] >>> 11 & 31;
   HEAP32[$4 + 60 >> 2] = HEAP32[$4 + 68 >> 2] >>> 5 & 63;
   HEAP32[$4 + 56 >> 2] = HEAP32[$4 + 68 >> 2] & 31;
   HEAP32[$4 + 52 >> 2] = Math_imul(HEAP32[$4 + 80 >> 2], 256 - HEAP32[$4 + 88 >> 2] | 0) + Math_imul(HEAP32[$4 + 64 >> 2], HEAP32[$4 + 88 >> 2]) >>> 8;
   HEAP32[$4 + 48 >> 2] = Math_imul(HEAP32[$4 + 76 >> 2], 256 - HEAP32[$4 + 88 >> 2] | 0) + Math_imul(HEAP32[$4 + 60 >> 2], HEAP32[$4 + 88 >> 2]) >>> 8;
   HEAP32[$4 + 44 >> 2] = Math_imul(HEAP32[$4 + 72 >> 2], 256 - HEAP32[$4 + 88 >> 2] | 0) + Math_imul(HEAP32[$4 + 56 >> 2], HEAP32[$4 + 88 >> 2]) >>> 8;
   HEAP32[$4 + 108 >> 2] = HEAP32[$4 + 44 >> 2] | HEAP32[$4 + 48 >> 2] << 5 | HEAP32[$4 + 52 >> 2] << 11;
   break label$4;
  }
  if (HEAPU8[HEAP32[$4 + 104 >> 2] + 16 | 0] == 24) {
   HEAP32[$4 + 40 >> 2] = HEAP32[$4 + 96 >> 2];
   HEAP32[$4 + 36 >> 2] = HEAP32[$4 + 40 >> 2] >>> 16 & 255;
   HEAP32[$4 + 32 >> 2] = HEAP32[$4 + 40 >> 2] >>> 8 & 255;
   HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 40 >> 2] & 255;
   HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 100 >> 2];
   HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 24 >> 2] >>> 16 & 255;
   HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 24 >> 2] >>> 8 & 255;
   HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 24 >> 2] & 255;
   HEAP32[$4 + 8 >> 2] = Math_imul(HEAP32[$4 + 36 >> 2], 256 - HEAP32[$4 + 88 >> 2] | 0) + Math_imul(HEAP32[$4 + 20 >> 2], HEAP32[$4 + 88 >> 2]) >>> 8;
   HEAP32[$4 + 4 >> 2] = Math_imul(HEAP32[$4 + 32 >> 2], 256 - HEAP32[$4 + 88 >> 2] | 0) + Math_imul(HEAP32[$4 + 16 >> 2], HEAP32[$4 + 88 >> 2]) >>> 8;
   HEAP32[$4 >> 2] = Math_imul(HEAP32[$4 + 28 >> 2], 256 - HEAP32[$4 + 88 >> 2] | 0) + Math_imul(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 88 >> 2]) >>> 8;
   HEAP32[$4 + 108 >> 2] = HEAP32[$4 >> 2] | HEAP32[$4 + 4 >> 2] << 8 | HEAP32[$4 + 8 >> 2] << 16;
   break label$4;
  }
  if (HEAPU32[$4 + 88 >> 2] >= 128) {
   $0 = HEAP32[$4 + 100 >> 2];
  } else {
   $0 = HEAP32[$4 + 96 >> 2];
  }
  HEAP32[$4 + 108 >> 2] = $0;
 }
 return HEAP32[$4 + 108 >> 2];
}

function tflite__ops__micro__activations__SoftmaxQuantized_28TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__2c_20tflite__SoftmaxParams_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 160 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 156 >> 2] = $0;
 HEAP32[$3 + 152 >> 2] = $1;
 HEAP32[$3 + 148 >> 2] = $2;
 label$1: {
  if (HEAP32[HEAP32[$3 + 156 >> 2] + 8 >> 2] == 3) {
   $0 = HEAP32[$3 + 148 >> 2];
   tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($3 + 120 | 0, HEAP32[$3 + 156 >> 2]);
   $1 = unsigned_20char_20const__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor_20const__29(HEAP32[$3 + 156 >> 2]);
   tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($3 + 96 | 0, HEAP32[$3 + 152 >> 2]);
   void_20tflite__reference_ops__Softmax_unsigned_20char_2c_20unsigned_20char__28tflite__SoftmaxParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($0, $3 + 120 | 0, $1, $3 + 96 | 0, unsigned_20char__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor__29(HEAP32[$3 + 152 >> 2]));
   tflite__RuntimeShape___RuntimeShape_28_29($3 + 96 | 0);
   tflite__RuntimeShape___RuntimeShape_28_29($3 + 120 | 0);
   break label$1;
  }
  label$3: {
   if (HEAP32[HEAP32[$3 + 152 >> 2] + 8 >> 2] == 7) {
    $0 = HEAP32[$3 + 148 >> 2];
    tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($3 + 72 | 0, HEAP32[$3 + 156 >> 2]);
    $1 = signed_20char_20const__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor_20const__29(HEAP32[$3 + 156 >> 2]);
    tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($3 + 48 | 0, HEAP32[$3 + 152 >> 2]);
    void_20tflite__reference_ops__Softmax_signed_20char_2c_20short__28tflite__SoftmaxParams_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20short__29($0, $3 + 72 | 0, $1, $3 + 48 | 0, short__20tflite__micro__GetTensorData_short__28TfLiteEvalTensor__29(HEAP32[$3 + 152 >> 2]));
    tflite__RuntimeShape___RuntimeShape_28_29($3 + 48 | 0);
    tflite__RuntimeShape___RuntimeShape_28_29($3 + 72 | 0);
    break label$3;
   }
   $0 = HEAP32[$3 + 148 >> 2];
   tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($3 + 24 | 0, HEAP32[$3 + 156 >> 2]);
   $1 = signed_20char_20const__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor_20const__29(HEAP32[$3 + 156 >> 2]);
   tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($3, HEAP32[$3 + 152 >> 2]);
   void_20tflite__reference_ops__Softmax_signed_20char_2c_20signed_20char__28tflite__SoftmaxParams_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($0, $3 + 24 | 0, $1, $3, signed_20char__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor__29(HEAP32[$3 + 152 >> 2]));
   tflite__RuntimeShape___RuntimeShape_28_29($3);
   tflite__RuntimeShape___RuntimeShape_28_29($3 + 24 | 0);
  }
 }
 __stack_pointer = $3 + 160 | 0;
}

function jsvGetString($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 80 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 72 >> 2] = $0;
 HEAP32[$3 + 68 >> 2] = $1;
 HEAP32[$3 + 64 >> 2] = $2;
 HEAP32[$3 + 60 >> 2] = jsvGetConstString(HEAP32[$3 + 72 >> 2]);
 label$1: {
  if (HEAP32[$3 + 60 >> 2]) {
   HEAP32[$3 + 64 >> 2] = HEAP32[$3 + 64 >> 2] - 1;
   HEAP32[$3 + 56 >> 2] = 0;
   while (1) {
    $0 = 0;
    $0 = HEAP8[HEAP32[$3 + 60 >> 2] + HEAP32[$3 + 56 >> 2] | 0] ? HEAPU32[$3 + 56 >> 2] < HEAPU32[$3 + 64 >> 2] : $0;
    if ($0) {
     HEAP8[HEAP32[$3 + 68 >> 2] + HEAP32[$3 + 56 >> 2] | 0] = HEAPU8[HEAP32[$3 + 60 >> 2] + HEAP32[$3 + 56 >> 2] | 0];
     HEAP32[$3 + 56 >> 2] = HEAP32[$3 + 56 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP8[HEAP32[$3 + 68 >> 2] + HEAP32[$3 + 56 >> 2] | 0] = 0;
   HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 56 >> 2];
   break label$1;
  }
  if (jsvIsInt(HEAP32[$3 + 72 >> 2]) & 1) {
   $0 = HEAP32[$3 + 72 >> 2];
   itostr(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), HEAP32[$3 + 68 >> 2], 10);
   HEAP32[$3 + 76 >> 2] = strlen(HEAP32[$3 + 68 >> 2]);
   break label$1;
  }
  if (jsvIsFloat(HEAP32[$3 + 72 >> 2]) & 1) {
   $0 = HEAP32[$3 + 72 >> 2];
   $1 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
   wasm2js_scratch_store_i32(0, HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24));
   wasm2js_scratch_store_i32(1, $1 | 0);
   ftoa_bounded(+wasm2js_scratch_load_f64(), HEAP32[$3 + 68 >> 2], HEAP32[$3 + 64 >> 2]);
   HEAP32[$3 + 76 >> 2] = strlen(HEAP32[$3 + 68 >> 2]);
   break label$1;
  }
  if (jsvHasCharacterData(HEAP32[$3 + 72 >> 2]) & 1) {
   HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 64 >> 2];
   jsvStringIteratorNew($3 + 16 | 0, HEAP32[$3 + 72 >> 2], 0);
   while (1) {
    if (jsvStringIteratorHasChar_1($3 + 16 | 0) & 1) {
     $0 = HEAP32[$3 + 52 >> 2];
     HEAP32[$3 + 52 >> 2] = $0 - 1;
     if ($0 >>> 0 <= 1) {
      HEAP8[HEAP32[$3 + 68 >> 2]] = 0;
      jsvStringIteratorFree_1($3 + 16 | 0);
      HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 64 >> 2];
      break label$1;
     } else {
      $1 = jsvStringIteratorGetChar_1($3 + 16 | 0);
      $0 = HEAP32[$3 + 68 >> 2];
      HEAP32[$3 + 68 >> 2] = $0 + 1;
      HEAP8[$0 | 0] = $1;
      jsvStringIteratorNext($3 + 16 | 0);
      continue;
     }
    }
    break;
   }
   jsvStringIteratorFree_1($3 + 16 | 0);
   HEAP8[HEAP32[$3 + 68 >> 2]] = 0;
   HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 64 >> 2] - HEAP32[$3 + 52 >> 2];
   break label$1;
  }
  HEAP32[$3 + 12 >> 2] = jsvAsString(HEAP32[$3 + 72 >> 2]);
  if (HEAP32[$3 + 12 >> 2]) {
   HEAP32[$3 + 8 >> 2] = jsvGetStringChars(HEAP32[$3 + 12 >> 2], 0, HEAP32[$3 + 68 >> 2], HEAP32[$3 + 64 >> 2]);
   jsvUnLock(HEAP32[$3 + 12 >> 2]);
   HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 8 >> 2];
   break label$1;
  }
  HEAP8[HEAP32[$3 + 68 >> 2]] = 0;
  jsExceptionHere(4, 103685, 0);
  HEAP32[$3 + 76 >> 2] = 0;
 }
 __stack_pointer = $3 + 80 | 0;
 return HEAP32[$3 + 76 >> 2];
}

function jslTokenAsString($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 label$1: {
  if (!(HEAP32[$3 + 12 >> 2] <= 32 | HEAP32[$3 + 12 >> 2] >= 128)) {
   HEAP8[HEAP32[$3 + 8 >> 2]] = 39;
   HEAP8[HEAP32[$3 + 8 >> 2] + 1 | 0] = HEAP32[$3 + 12 >> 2];
   HEAP8[HEAP32[$3 + 8 >> 2] + 2 | 0] = 39;
   HEAP8[HEAP32[$3 + 8 >> 2] + 3 | 0] = 0;
   break label$1;
  }
  label$3: {
   label$4: {
    label$5: {
     label$6: {
      label$7: {
       label$8: {
        label$9: {
         label$10: {
          label$11: {
           label$12: {
            label$13: {
             label$14: {
              $0 = HEAP32[$3 + 12 >> 2];
              if ($0) {
               if (($0 | 0) == 128) {
                break label$14;
               }
               if (($0 | 0) == 129) {
                break label$13;
               }
               if (($0 | 0) == 130) {
                break label$12;
               }
               if (($0 | 0) == 131) {
                break label$11;
               }
               if (($0 | 0) == 132) {
                break label$10;
               }
               if (($0 | 0) == 133) {
                break label$9;
               }
               if (($0 | 0) == 134) {
                break label$8;
               }
               if (($0 | 0) == 135) {
                break label$7;
               }
               if (($0 | 0) == 136) {
                break label$6;
               }
               if (($0 | 0) == 137) {
                break label$5;
               }
               if (($0 | 0) == 255) {
                break label$4;
               }
               break label$3;
              }
              strcpy(HEAP32[$3 + 8 >> 2], 109658);
              break label$1;
             }
             strcpy(HEAP32[$3 + 8 >> 2], 110010);
             break label$1;
            }
            strcpy(HEAP32[$3 + 8 >> 2], 108658);
            break label$1;
           }
           strcpy(HEAP32[$3 + 8 >> 2], 108785);
           break label$1;
          }
          strcpy(HEAP32[$3 + 8 >> 2], 109619);
          break label$1;
         }
         strcpy(HEAP32[$3 + 8 >> 2], 109608);
         break label$1;
        }
        strcpy(HEAP32[$3 + 8 >> 2], 109401);
        break label$1;
       }
       strcpy(HEAP32[$3 + 8 >> 2], 109390);
       break label$1;
      }
      strcpy(HEAP32[$3 + 8 >> 2], 108506);
      break label$1;
     }
     strcpy(HEAP32[$3 + 8 >> 2], 108495);
     break label$1;
    }
    strcpy(HEAP32[$3 + 8 >> 2], 108662);
    break label$1;
   }
   strcpy(HEAP32[$3 + 8 >> 2], 108291);
   break label$1;
  }
  if (!(HEAP32[$3 + 12 >> 2] < 138 | HEAP32[$3 + 12 >> 2] > 208)) {
   strcpy(HEAP32[$3 + 8 >> 2], jslReservedWordAsString(HEAP32[$3 + 12 >> 2]));
   break label$1;
  }
  $0 = HEAP32[$3 + 8 >> 2];
  $1 = HEAP32[$3 + 4 >> 2];
  HEAP32[$3 >> 2] = HEAP32[$3 + 12 >> 2];
  espruino_snprintf($0, $1, 108268, $3);
 }
 __stack_pointer = $3 + 16 | 0;
}

function jsvFreePtr($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 if (!(jsvIsNameWithValue(HEAP32[$1 + 28 >> 2]) & 1)) {
  if (jsvHasSingleChild(HEAP32[$1 + 28 >> 2]) & 1) {
   if (jsvGetFirstChild(HEAP32[$1 + 28 >> 2]) & 65535) {
    if (jsuGetFreeStack() >>> 0 > 256) {
     HEAP32[$1 + 24 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$1 + 28 >> 2]) & 65535);
     jsvUnRef(HEAP32[$1 + 24 >> 2]);
     jsvUnLock(HEAP32[$1 + 24 >> 2]);
    }
   }
  }
 }
 label$5: {
  if (jsvIsUTF8String(HEAP32[$1 + 28 >> 2]) & 1) {
   jsvUnRefRef(jsvGetLastChild(HEAP32[$1 + 28 >> 2]) & 65535);
   jsvSetLastChild(HEAP32[$1 + 28 >> 2], 0);
   break label$5;
  }
  label$7: {
   if (jsvHasStringExt(HEAP32[$1 + 28 >> 2]) & 1) {
    jsvFreePtrStringExt(HEAP32[$1 + 28 >> 2]);
    break label$7;
   }
   if (jsvIsFlatString(HEAP32[$1 + 28 >> 2]) & 1) {
    HEAP32[$1 + 20 >> 2] = jsvGetFlatStringBlocks(HEAP32[$1 + 28 >> 2]);
    HEAP16[$1 + 18 >> 1] = (jsvGetRef(HEAP32[$1 + 28 >> 2]) & 65535) + HEAP32[$1 + 20 >> 2];
    jshInterruptOff();
    HEAP16[$1 + 16 >> 1] = HEAPU16[77234];
    HEAP16[$1 + 14 >> 1] = 0;
    while (1) {
     $0 = 0;
     $0 = HEAPU16[$1 + 16 >> 1] ? HEAPU16[$1 + 16 >> 1] < HEAPU16[$1 + 18 >> 1] : $0;
     if ($0) {
      HEAP16[$1 + 14 >> 1] = HEAPU16[$1 + 16 >> 1];
      HEAP16[$1 + 16 >> 1] = jsvGetNextSibling(jsvGetAddressOf(HEAPU16[$1 + 16 >> 1]));
      continue;
     }
     break;
    }
    while (1) {
     $0 = HEAP32[$1 + 20 >> 2];
     HEAP32[$1 + 20 >> 2] = $0 - 1;
     if ($0) {
      $0 = HEAPU16[$1 + 18 >> 1];
      HEAP16[$1 + 18 >> 1] = $0 - 1;
      HEAP32[$1 + 8 >> 2] = jsvGetAddressOf($0);
      $0 = HEAP32[$1 + 8 >> 2];
      HEAP8[$0 + 11 | 0] = 0;
      HEAP8[$0 + 12 | 0] = 0;
      jsvSetNextSibling(HEAP32[$1 + 8 >> 2], HEAPU16[$1 + 16 >> 1]);
      HEAP16[$1 + 16 >> 1] = jsvGetRef(HEAP32[$1 + 8 >> 2]);
      continue;
     }
     break;
    }
    label$15: {
     if (HEAPU16[$1 + 14 >> 1]) {
      jsvSetNextSibling(jsvGetAddressOf(HEAPU16[$1 + 14 >> 1]), HEAPU16[$1 + 16 >> 1]);
      break label$15;
     }
     HEAP16[77234] = HEAPU16[$1 + 16 >> 1];
    }
    HEAP8[154465] = 1;
    jshInterruptOn();
   }
  }
 }
 label$17: {
  if (jsvHasChildren(HEAP32[$1 + 28 >> 2]) & 1) {
   HEAP16[$1 + 6 >> 1] = jsvGetLastChild(HEAP32[$1 + 28 >> 2]);
   while (1) {
    if (HEAPU16[$1 + 6 >> 1]) {
     HEAP32[$1 >> 2] = jsvLock(HEAPU16[$1 + 6 >> 1]);
     HEAP16[$1 + 6 >> 1] = jsvGetPrevSibling(HEAP32[$1 >> 2]);
     jsvSetPrevSibling(HEAP32[$1 >> 2], 0);
     jsvSetNextSibling(HEAP32[$1 >> 2], 0);
     jsvUnRef(HEAP32[$1 >> 2]);
     jsvUnLock(HEAP32[$1 >> 2]);
     continue;
    }
    break;
   }
   break label$17;
  }
  if (jsvIsName(HEAP32[$1 + 28 >> 2]) & 1) {
   if (jsvGetNextSibling(HEAP32[$1 + 28 >> 2]) & 65535) {
    jsvUnRefRef(jsvGetNextSibling(HEAP32[$1 + 28 >> 2]) & 65535);
    jsvUnRefRef(jsvGetPrevSibling(HEAP32[$1 + 28 >> 2]) & 65535);
   }
  }
 }
 jsvFreePtrInternal(HEAP32[$1 + 28 >> 2]);
 __stack_pointer = $1 + 32 | 0;
}

function graphicsDrawChar4x6($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0;
 $7 = __stack_pointer - 48 | 0;
 __stack_pointer = $7;
 HEAP32[$7 + 44 >> 2] = $0;
 HEAP32[$7 + 40 >> 2] = $1;
 HEAP32[$7 + 36 >> 2] = $2;
 HEAP8[$7 + 35 | 0] = $3;
 HEAP16[$7 + 32 >> 1] = $4;
 HEAP16[$7 + 30 >> 1] = $5;
 HEAP8[$7 + 29 | 0] = $6;
 HEAP32[$7 + 24 >> 2] = HEAPU8[$7 + 35 | 0] - 33;
 label$1: {
  if (!(HEAP32[$7 + 24 >> 2] < 100 & HEAP32[$7 + 24 >> 2] >= 0)) {
   if (HEAP8[$7 + 29 | 0] & 1) {
    $0 = HEAP32[$7 + 44 >> 2];
    graphicsFillRect(HEAP32[$7 + 44 >> 2], HEAP32[$7 + 40 >> 2], HEAP32[$7 + 36 >> 2], HEAP32[$7 + 40 >> 2] + (HEAPU16[$7 + 32 >> 1] << 1) | 0, HEAP32[$7 + 36 >> 2] + Math_imul(HEAPU16[$7 + 30 >> 1], 5) | 0, HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24));
   }
   break label$1;
  }
  HEAP32[$7 + 20 >> 2] = HEAP32[$7 + 24 >> 2] % 5;
  HEAP32[$7 + 24 >> 2] = Math_imul(HEAP32[$7 + 24 >> 2] / 5 | 0, 6);
  HEAP32[$7 + 16 >> 2] = 0;
  while (1) {
   if (HEAP32[$7 + 16 >> 2] < 6) {
    HEAP32[$7 + 12 >> 2] = HEAPU16[(HEAP32[$7 + 24 >> 2] + HEAP32[$7 + 16 >> 2] << 1) + 140912 >> 1] >> Math_imul(HEAP32[$7 + 20 >> 2], 3);
    HEAP32[$7 + 8 >> 2] = HEAP32[$7 + 36 >> 2] + Math_imul(HEAP32[$7 + 16 >> 2], HEAPU16[$7 + 30 >> 1]);
    HEAP32[$7 + 4 >> 2] = 0;
    while (1) {
     if (HEAP32[$7 + 4 >> 2] < 3) {
      HEAP8[$7 + 3 | 0] = (HEAP32[$7 + 12 >> 2] & 4) != 0;
      if (HEAP8[$7 + 3 | 0] & 1 ? 1 : HEAP8[$7 + 29 | 0] & 1) {
       $1 = HEAP32[$7 + 44 >> 2];
       $2 = HEAP32[$7 + 40 >> 2] + Math_imul(HEAP32[$7 + 4 >> 2], HEAPU16[$7 + 32 >> 1]) | 0;
       $3 = HEAP32[$7 + 8 >> 2];
       $4 = (HEAP32[$7 + 40 >> 2] + Math_imul(HEAPU16[$7 + 32 >> 1], HEAP32[$7 + 4 >> 2] + 1 | 0) | 0) - 1 | 0;
       $5 = (HEAP32[$7 + 8 >> 2] + HEAPU16[$7 + 30 >> 1] | 0) - 1 | 0;
       label$11: {
        if (HEAP8[$7 + 3 | 0] & 1) {
         $0 = HEAP32[$7 + 44 >> 2];
         $0 = HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24);
         break label$11;
        }
        $0 = HEAP32[$7 + 44 >> 2];
        $0 = HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24);
       }
       graphicsFillRect($1, $2, $3, $4, $5, $0);
      }
      HEAP32[$7 + 12 >> 2] = HEAP32[$7 + 12 >> 2] << 1;
      HEAP32[$7 + 4 >> 2] = HEAP32[$7 + 4 >> 2] + 1;
      continue;
     }
     break;
    }
    HEAP32[$7 + 16 >> 2] = HEAP32[$7 + 16 >> 2] + 1;
    continue;
   }
   break;
  }
  if (!(HEAP8[$7 + 29 | 0] & 1)) {
   break label$1;
  }
  $0 = HEAP32[$7 + 44 >> 2];
  graphicsFillRect(HEAP32[$7 + 44 >> 2], HEAP32[$7 + 40 >> 2] + Math_imul(HEAPU16[$7 + 32 >> 1], 3) | 0, HEAP32[$7 + 36 >> 2], (HEAP32[$7 + 40 >> 2] + (HEAPU16[$7 + 32 >> 1] << 2) | 0) - 1 | 0, (HEAP32[$7 + 36 >> 2] + Math_imul(HEAPU16[$7 + 30 >> 1], 6) | 0) - 1 | 0, HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24));
 }
 __stack_pointer = $7 + 48 | 0;
}

function graphicsDrawChar6x8($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0;
 $7 = __stack_pointer - 48 | 0;
 __stack_pointer = $7;
 HEAP32[$7 + 44 >> 2] = $0;
 HEAP32[$7 + 40 >> 2] = $1;
 HEAP32[$7 + 36 >> 2] = $2;
 HEAP8[$7 + 35 | 0] = $3;
 HEAP16[$7 + 32 >> 1] = $4;
 HEAP16[$7 + 30 >> 1] = $5;
 HEAP8[$7 + 29 | 0] = $6;
 HEAP32[$7 + 24 >> 2] = HEAPU8[$7 + 35 | 0] - 33;
 label$1: {
  if (!(HEAP32[$7 + 24 >> 2] < 223 & HEAP32[$7 + 24 >> 2] >= 0)) {
   if (HEAP8[$7 + 29 | 0] & 1) {
    $0 = HEAP32[$7 + 44 >> 2];
    graphicsFillRect(HEAP32[$7 + 44 >> 2], HEAP32[$7 + 40 >> 2], HEAP32[$7 + 36 >> 2], HEAP32[$7 + 40 >> 2] + Math_imul(HEAPU16[$7 + 32 >> 1], 5) | 0, HEAP32[$7 + 36 >> 2] + Math_imul(HEAPU16[$7 + 30 >> 1], 7) | 0, HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24));
   }
   break label$1;
  }
  HEAP32[$7 + 20 >> 2] = HEAP32[$7 + 24 >> 2] % 6;
  HEAP32[$7 + 24 >> 2] = HEAP32[$7 + 24 >> 2] / 6 << 3;
  HEAP32[$7 + 16 >> 2] = 0;
  while (1) {
   if (HEAP32[$7 + 16 >> 2] < 8) {
    HEAP32[$7 + 12 >> 2] = HEAP32[(HEAP32[$7 + 24 >> 2] + HEAP32[$7 + 16 >> 2] << 2) + 141152 >> 2] >>> Math_imul(HEAP32[$7 + 20 >> 2], 5);
    HEAP32[$7 + 8 >> 2] = HEAP32[$7 + 36 >> 2] + Math_imul(HEAP32[$7 + 16 >> 2], HEAPU16[$7 + 30 >> 1]);
    HEAP32[$7 + 4 >> 2] = 0;
    while (1) {
     if (HEAP32[$7 + 4 >> 2] < 5) {
      HEAP8[$7 + 3 | 0] = (HEAP32[$7 + 12 >> 2] & 16) != 0;
      if (HEAP8[$7 + 3 | 0] & 1 ? 1 : HEAP8[$7 + 29 | 0] & 1) {
       $1 = HEAP32[$7 + 44 >> 2];
       $2 = HEAP32[$7 + 40 >> 2] + Math_imul(HEAP32[$7 + 4 >> 2], HEAPU16[$7 + 32 >> 1]) | 0;
       $3 = HEAP32[$7 + 8 >> 2];
       $4 = (HEAP32[$7 + 40 >> 2] + Math_imul(HEAPU16[$7 + 32 >> 1], HEAP32[$7 + 4 >> 2] + 1 | 0) | 0) - 1 | 0;
       $5 = (HEAP32[$7 + 8 >> 2] + HEAPU16[$7 + 30 >> 1] | 0) - 1 | 0;
       label$11: {
        if (HEAP8[$7 + 3 | 0] & 1) {
         $0 = HEAP32[$7 + 44 >> 2];
         $0 = HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24);
         break label$11;
        }
        $0 = HEAP32[$7 + 44 >> 2];
        $0 = HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24);
       }
       graphicsFillRect($1, $2, $3, $4, $5, $0);
      }
      HEAP32[$7 + 12 >> 2] = HEAP32[$7 + 12 >> 2] << 1;
      HEAP32[$7 + 4 >> 2] = HEAP32[$7 + 4 >> 2] + 1;
      continue;
     }
     break;
    }
    HEAP32[$7 + 16 >> 2] = HEAP32[$7 + 16 >> 2] + 1;
    continue;
   }
   break;
  }
  if (!(HEAP8[$7 + 29 | 0] & 1)) {
   break label$1;
  }
  $0 = HEAP32[$7 + 44 >> 2];
  graphicsFillRect(HEAP32[$7 + 44 >> 2], HEAP32[$7 + 40 >> 2] + Math_imul(HEAPU16[$7 + 32 >> 1], 5) | 0, HEAP32[$7 + 36 >> 2], (HEAP32[$7 + 40 >> 2] + Math_imul(HEAPU16[$7 + 32 >> 1], 6) | 0) - 1 | 0, (HEAP32[$7 + 36 >> 2] + (HEAPU16[$7 + 30 >> 1] << 3) | 0) - 1 | 0, HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24));
 }
 __stack_pointer = $7 + 48 | 0;
}

function _jsvCountJsVarsUsedRecursive($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP8[$2 + 39 | 0] = $1;
 label$1: {
  if (!HEAP32[$2 + 40 >> 2]) {
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  label$3: {
   if (HEAP8[$2 + 39 | 0] & 1) {
    $0 = HEAP32[$2 + 40 >> 2];
    if (!((HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 512)) {
     HEAP32[$2 + 44 >> 2] = 0;
     break label$1;
    }
    $0 = HEAP32[$2 + 40 >> 2];
    $1 = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & -513;
    HEAP8[$0 + 11 | 0] = $1;
    HEAP8[$0 + 12 | 0] = $1 >>> 8;
    break label$3;
   }
   $0 = HEAP32[$2 + 40 >> 2];
   if ((HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 512) {
    HEAP32[$2 + 44 >> 2] = 0;
    break label$1;
   }
   $0 = HEAP32[$2 + 40 >> 2];
   $1 = HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8 | 512;
   HEAP8[$0 + 11 | 0] = $1;
   HEAP8[$0 + 12 | 0] = $1 >>> 8;
  }
  HEAP32[$2 + 32 >> 2] = 1;
  label$7: {
   label$8: {
    if (!(jsvHasSingleChild(HEAP32[$2 + 40 >> 2]) & 1)) {
     if (!(jsvHasChildren(HEAP32[$2 + 40 >> 2]) & 1)) {
      break label$8;
     }
    }
    HEAP16[$2 + 30 >> 1] = jsvGetFirstChild(HEAP32[$2 + 40 >> 2]);
    while (1) {
     if (HEAPU16[$2 + 30 >> 1]) {
      HEAP32[$2 + 24 >> 2] = jsvLock(HEAPU16[$2 + 30 >> 1]);
      HEAP32[$2 + 32 >> 2] = _jsvCountJsVarsUsedRecursive(HEAP32[$2 + 24 >> 2], HEAP8[$2 + 39 | 0] & 1) + HEAP32[$2 + 32 >> 2];
      label$12: {
       if (jsvHasChildren(HEAP32[$2 + 40 >> 2]) & 1) {
        HEAP16[$2 + 30 >> 1] = jsvGetNextSibling(HEAP32[$2 + 24 >> 2]);
        break label$12;
       }
       HEAP16[$2 + 30 >> 1] = 0;
      }
      jsvUnLock(HEAP32[$2 + 24 >> 2]);
      continue;
     }
     break;
    }
    break label$7;
   }
   if (jsvIsFlatString(HEAP32[$2 + 40 >> 2]) & 1) {
    HEAP32[$2 + 32 >> 2] = jsvGetFlatStringBlocks(HEAP32[$2 + 40 >> 2]) + HEAP32[$2 + 32 >> 2];
   }
  }
  if (jsvHasCharacterData(HEAP32[$2 + 40 >> 2]) & 1) {
   HEAP16[$2 + 22 >> 1] = jsvGetLastChild(HEAP32[$2 + 40 >> 2]);
   while (1) {
    if (HEAPU16[$2 + 22 >> 1]) {
     HEAP32[$2 + 16 >> 2] = jsvLock(HEAPU16[$2 + 22 >> 1]);
     HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 32 >> 2] + 1;
     HEAP16[$2 + 22 >> 1] = jsvGetLastChild(HEAP32[$2 + 16 >> 2]);
     jsvUnLock(HEAP32[$2 + 16 >> 2]);
     continue;
    }
    break;
   }
  }
  label$18: {
   if (!(jsvIsName(HEAP32[$2 + 40 >> 2]) & 1)) {
    break label$18;
   }
   if (jsvIsNameWithValue(HEAP32[$2 + 40 >> 2]) & 1) {
    break label$18;
   }
   if (!(jsvGetFirstChild(HEAP32[$2 + 40 >> 2]) & 65535)) {
    break label$18;
   }
   HEAP32[$2 + 12 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$2 + 40 >> 2]) & 65535);
   HEAP32[$2 + 32 >> 2] = _jsvCountJsVarsUsedRecursive(HEAP32[$2 + 12 >> 2], HEAP8[$2 + 39 | 0] & 1) + HEAP32[$2 + 32 >> 2];
   jsvUnLock(HEAP32[$2 + 12 >> 2]);
  }
  HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
 }
 __stack_pointer = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}

function tflite__reference_ops__FullyConnected_28tflite__FullyConnectedParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0, $10 = Math_fround(0);
 $9 = __stack_pointer - 96 | 0;
 __stack_pointer = $9;
 HEAP32[$9 + 92 >> 2] = $0;
 HEAP32[$9 + 88 >> 2] = $1;
 HEAP32[$9 + 84 >> 2] = $2;
 HEAP32[$9 + 80 >> 2] = $3;
 HEAP32[$9 + 76 >> 2] = $4;
 HEAP32[$9 + 72 >> 2] = $5;
 HEAP32[$9 + 68 >> 2] = $6;
 HEAP32[$9 + 64 >> 2] = $7;
 HEAP32[$9 + 60 >> 2] = $8;
 HEAPF32[$9 + 56 >> 2] = HEAPF32[HEAP32[$9 + 92 >> 2] + 28 >> 2];
 HEAPF32[$9 + 52 >> 2] = HEAPF32[HEAP32[$9 + 92 >> 2] + 32 >> 2];
 HEAP32[$9 + 48 >> 2] = tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$9 + 64 >> 2]);
 HEAP32[$9 + 44 >> 2] = tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$9 + 80 >> 2]);
 HEAP32[$9 + 40 >> 2] = tflite__FlatSizeSkipDim_28tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$9 + 64 >> 2], HEAP32[$9 + 48 >> 2] - 1 | 0);
 HEAP32[$9 + 36 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$9 + 80 >> 2], HEAP32[$9 + 44 >> 2] - 2 | 0, HEAP32[$9 + 64 >> 2], HEAP32[$9 + 48 >> 2] - 1 | 0);
 HEAP32[$9 + 32 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 80 >> 2], HEAP32[$9 + 44 >> 2] - 1 | 0);
 HEAP32[$9 + 28 >> 2] = 0;
 while (1) {
  if (HEAP32[$9 + 28 >> 2] < HEAP32[$9 + 40 >> 2]) {
   HEAP32[$9 + 24 >> 2] = 0;
   while (1) {
    if (HEAP32[$9 + 24 >> 2] < HEAP32[$9 + 36 >> 2]) {
     HEAPF32[$9 + 20 >> 2] = 0;
     HEAP32[$9 + 16 >> 2] = 0;
     while (1) {
      if (HEAP32[$9 + 16 >> 2] < HEAP32[$9 + 32 >> 2]) {
       HEAPF32[$9 + 20 >> 2] = Math_fround(HEAPF32[HEAP32[$9 + 84 >> 2] + (HEAP32[$9 + 16 >> 2] + Math_imul(HEAP32[$9 + 28 >> 2], HEAP32[$9 + 32 >> 2]) << 2) >> 2] * HEAPF32[HEAP32[$9 + 76 >> 2] + (HEAP32[$9 + 16 >> 2] + Math_imul(HEAP32[$9 + 24 >> 2], HEAP32[$9 + 32 >> 2]) << 2) >> 2]) + HEAPF32[$9 + 20 >> 2];
       HEAP32[$9 + 16 >> 2] = HEAP32[$9 + 16 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAPF32[$9 + 12 >> 2] = 0;
     if (HEAP32[$9 + 68 >> 2]) {
      HEAPF32[$9 + 12 >> 2] = HEAPF32[HEAP32[$9 + 68 >> 2] + (HEAP32[$9 + 24 >> 2] << 2) >> 2];
     }
     $10 = float_20tflite__ActivationFunctionWithMinMax_float__28float_2c_20float_2c_20float_29(Math_fround(HEAPF32[$9 + 20 >> 2] + HEAPF32[$9 + 12 >> 2]), HEAPF32[$9 + 56 >> 2], HEAPF32[$9 + 52 >> 2]);
     HEAPF32[HEAP32[$9 + 60 >> 2] + (HEAP32[$9 + 24 >> 2] + Math_imul(HEAP32[$9 + 36 >> 2], HEAP32[$9 + 28 >> 2]) << 2) >> 2] = $10;
     HEAP32[$9 + 24 >> 2] = HEAP32[$9 + 24 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$9 + 28 >> 2] = HEAP32[$9 + 28 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $9 + 96 | 0;
}

function tflite__ops__micro__conv__EvalQuantizedPerChannel_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteConvParams__2c_20tflite__ops__micro__conv__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__2c_20TfLiteEvalTensor__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0;
 $9 = __stack_pointer - 192 | 0;
 __stack_pointer = $9;
 HEAP32[$9 + 188 >> 2] = $0;
 HEAP32[$9 + 184 >> 2] = $1;
 HEAP32[$9 + 180 >> 2] = $2;
 HEAP32[$9 + 176 >> 2] = $3;
 HEAP32[$9 + 172 >> 2] = $4;
 HEAP32[$9 + 168 >> 2] = $5;
 HEAP32[$9 + 164 >> 2] = $6;
 HEAP32[$9 + 160 >> 2] = $7;
 HEAP32[$9 + 156 >> 2] = $8;
 HEAP32[$9 + 116 >> 2] = 0 - HEAP32[HEAP32[$9 + 176 >> 2] + 16 >> 2];
 HEAP32[$9 + 124 >> 2] = HEAP32[HEAP32[$9 + 176 >> 2] + 24 >> 2];
 HEAP16[$9 + 108 >> 1] = HEAP32[HEAP32[$9 + 180 >> 2] + 8 >> 2];
 HEAP16[$9 + 106 >> 1] = HEAP32[HEAP32[$9 + 180 >> 2] + 4 >> 2];
 HEAP16[$9 + 112 >> 1] = HEAP32[HEAP32[$9 + 180 >> 2] + 20 >> 2];
 HEAP16[$9 + 110 >> 1] = HEAP32[HEAP32[$9 + 180 >> 2] + 16 >> 2];
 HEAP16[$9 + 100 >> 1] = HEAP32[HEAP32[$9 + 176 >> 2] + 4 >> 2];
 HEAP16[$9 + 98 >> 1] = HEAP32[HEAP32[$9 + 176 >> 2] >> 2];
 HEAP32[$9 + 136 >> 2] = HEAP32[HEAP32[$9 + 176 >> 2] + 44 >> 2];
 HEAP32[$9 + 140 >> 2] = HEAP32[HEAP32[$9 + 176 >> 2] + 48 >> 2];
 $0 = HEAP32[HEAP32[$9 + 176 >> 2] + 36 >> 2];
 $1 = HEAP32[HEAP32[$9 + 176 >> 2] + 40 >> 2];
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($9 + 72 | 0, HEAP32[$9 + 172 >> 2]);
 $2 = signed_20char_20const__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor_20const__29(HEAP32[$9 + 172 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($9 + 48 | 0, HEAP32[$9 + 168 >> 2]);
 $3 = signed_20char_20const__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor_20const__29(HEAP32[$9 + 168 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($9 + 24 | 0, HEAP32[$9 + 164 >> 2]);
 $4 = int_20const__20tflite__micro__GetTensorData_int__28TfLiteEvalTensor_20const__29(HEAP32[$9 + 164 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($9, HEAP32[$9 + 160 >> 2]);
 tflite__reference_integer_ops__ConvPerChannel_28tflite__ConvParams_20const__2c_20int_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($9 + 96 | 0, $0, $1, $9 + 72 | 0, $2, $9 + 48 | 0, $3, $9 + 24 | 0, $4, $9, signed_20char__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor__29(HEAP32[$9 + 160 >> 2]));
 tflite__RuntimeShape___RuntimeShape_28_29($9);
 tflite__RuntimeShape___RuntimeShape_28_29($9 + 24 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($9 + 48 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($9 + 72 | 0);
 __stack_pointer = $9 + 192 | 0;
}

function tflite__ops__micro__dequantize__Prepare_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 96 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 88 >> 2] = $0;
 HEAP32[$2 + 84 >> 2] = $1;
 label$1: {
  if (!HEAP32[HEAP32[$2 + 84 >> 2] + 8 >> 2]) {
   break label$1;
  }
 }
 HEAP32[$2 + 80 >> 2] = HEAP32[HEAP32[$2 + 84 >> 2] + 8 >> 2];
 label$2: {
  if ((tflite__NumInputs_28TfLiteNode_20const__29(HEAP32[$2 + 84 >> 2]) | 0) != 1) {
   $0 = HEAP32[HEAP32[$2 + 88 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 88 >> 2];
   $3 = tflite__NumInputs_28TfLiteNode_20const__29(HEAP32[$2 + 84 >> 2]);
   HEAP32[$2 + 12 >> 2] = 1;
   HEAP32[$2 + 8 >> 2] = $3;
   HEAP32[$2 + 4 >> 2] = 111277;
   HEAP32[$2 >> 2] = 126274;
   FUNCTION_TABLE[$0 | 0]($1, 126505, $2);
   HEAP32[$2 + 92 >> 2] = 1;
   break label$2;
  }
  if ((tflite__NumOutputs_28TfLiteNode_20const__29(HEAP32[$2 + 84 >> 2]) | 0) != 1) {
   $0 = HEAP32[HEAP32[$2 + 88 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 88 >> 2];
   $3 = tflite__NumOutputs_28TfLiteNode_20const__29(HEAP32[$2 + 84 >> 2]);
   HEAP32[$2 + 28 >> 2] = 1;
   HEAP32[$2 + 24 >> 2] = $3;
   HEAP32[$2 + 20 >> 2] = 111277;
   HEAP32[$2 + 16 >> 2] = 126257;
   FUNCTION_TABLE[$0 | 0]($1, 126505, $2 + 16 | 0);
   HEAP32[$2 + 92 >> 2] = 1;
   break label$2;
  }
  HEAP32[$2 + 76 >> 2] = tflite__GetInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 88 >> 2], HEAP32[$2 + 84 >> 2], 0);
  HEAP32[$2 + 72 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 88 >> 2], HEAP32[$2 + 84 >> 2], 0);
  if (!(HEAP32[HEAP32[$2 + 76 >> 2] + 28 >> 2] == 3 | HEAP32[HEAP32[$2 + 76 >> 2] + 28 >> 2] == 9 | HEAP32[HEAP32[$2 + 76 >> 2] + 28 >> 2] == 7)) {
   $0 = HEAP32[HEAP32[$2 + 88 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 88 >> 2];
   HEAP32[$2 + 48 >> 2] = 110639;
   FUNCTION_TABLE[$0 | 0]($1, 111890, $2 + 48 | 0);
   HEAP32[$2 + 92 >> 2] = 1;
   break label$2;
  }
  if (!(HEAP32[HEAP32[$2 + 72 >> 2] + 28 >> 2] == 1 | HEAP32[HEAP32[$2 + 72 >> 2] + 28 >> 2] == 2)) {
   $0 = HEAP32[HEAP32[$2 + 88 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 88 >> 2];
   HEAP32[$2 + 32 >> 2] = 110948;
   FUNCTION_TABLE[$0 | 0]($1, 111890, $2 + 32 | 0);
   HEAP32[$2 + 92 >> 2] = 1;
   break label$2;
  }
  if (HEAP32[HEAP32[$2 + 72 >> 2] + 28 >> 2] == 2) {
   HEAPF64[$2 + 64 >> 3] = +HEAPF32[HEAP32[$2 + 76 >> 2] + 8 >> 2] / +HEAPF32[HEAP32[$2 + 72 >> 2] + 8 >> 2];
   tflite__QuantizeMultiplier_28double_2c_20int__2c_20int__29(HEAPF64[$2 + 64 >> 3], HEAP32[$2 + 80 >> 2] + 16 | 0, HEAP32[$2 + 80 >> 2] + 20 | 0);
  }
  HEAP32[HEAP32[$2 + 80 >> 2] + 8 >> 2] = HEAP32[HEAP32[$2 + 76 >> 2] + 12 >> 2];
  HEAPF64[HEAP32[$2 + 80 >> 2] >> 3] = HEAPF32[HEAP32[$2 + 76 >> 2] + 8 >> 2];
  HEAP32[HEAP32[$2 + 80 >> 2] + 24 >> 2] = HEAP32[HEAP32[$2 + 72 >> 2] + 12 >> 2];
  HEAP32[$2 + 92 >> 2] = 0;
 }
 __stack_pointer = $2 + 96 | 0;
 return HEAP32[$2 + 92 >> 2];
}

function atan2($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $2 = __DOUBLE_BITS_13($1);
 $4 = $2;
 $3 = i64toi32_i32$HIGH_BITS;
 $2 = $3 & 2147483647;
 $3 = $4;
 label$1: {
  if (!$3 & ($2 | 0) == 2146435072 | $2 >>> 0 < 2146435072) {
   $3 = __DOUBLE_BITS_13($0);
   $5 = $3;
   $2 = i64toi32_i32$HIGH_BITS;
   $3 = $2 & 2147483647;
   $2 = $5;
   if (!$2 & ($3 | 0) == 2146435072 | $3 >>> 0 < 2146435072) {
    break label$1;
   }
  }
  return $0 + $1;
 }
 wasm2js_scratch_store_f64(+$1);
 $2 = wasm2js_scratch_load_i32(1) | 0;
 $5 = wasm2js_scratch_load_i32(0) | 0;
 $4 = $5;
 $6 = $2;
 $10 = $4;
 if (!($4 | $2 - 1072693248)) {
  return atan($0);
 }
 wasm2js_scratch_store_f64(+$0);
 $3 = wasm2js_scratch_load_i32(1) | 0;
 $5 = wasm2js_scratch_load_i32(0) | 0;
 $9 = $6 >>> 30 & 2;
 $7 = $9 | $3 >>> 31;
 $4 = $3;
 $3 = $5;
 $2 = $4;
 $4 = $2 & 2147483647;
 label$4: {
  if (!($3 | $4)) {
   label$6: {
    switch ($7 - 2 | 0) {
    case 0:
     return 3.141592653589793;

    case 1:
     break label$6;

    default:
     break label$4;
    }
   }
   return -3.141592653589793;
  }
  $6 = $6 & 2147483647;
  if (!($10 | $6)) {
   wasm2js_scratch_store_f64(1.5707963267948966);
   $2 = wasm2js_scratch_load_i32(1) | 0;
   $4 = wasm2js_scratch_load_i32(0) | 0;
   $5 = $4;
   $3 = $2 & 2147483647;
   $6 = $3;
   wasm2js_scratch_store_f64(+$0);
   $3 = wasm2js_scratch_load_i32(1) | 0;
   wasm2js_scratch_load_i32(0) | 0;
   $4 = $3 & -2147483648;
   $3 = $5;
   $5 = $11;
   wasm2js_scratch_store_i32(0, $3 | $5);
   $2 = $4;
   $4 = $6;
   $2 = $2 | $4;
   wasm2js_scratch_store_i32(1, $2 | 0);
   return +wasm2js_scratch_load_f64();
  }
  label$9: {
   if (($6 | 0) == 2146435072) {
    if (($4 | 0) != 2146435072) {
     break label$9;
    }
    return HEAPF64[($7 << 3) + 148400 >> 3];
   }
   if (!(($4 | 0) != 2146435072 & $6 + 67108864 >>> 0 >= $4 >>> 0)) {
    wasm2js_scratch_store_f64(1.5707963267948966);
    $2 = wasm2js_scratch_load_i32(1) | 0;
    $4 = wasm2js_scratch_load_i32(0) | 0;
    $5 = $4;
    $3 = $2 & 2147483647;
    $6 = $3;
    wasm2js_scratch_store_f64(+$0);
    $3 = wasm2js_scratch_load_i32(1) | 0;
    wasm2js_scratch_load_i32(0) | 0;
    $4 = $3 & -2147483648;
    $3 = $5;
    $5 = $11;
    wasm2js_scratch_store_i32(0, $3 | $5);
    $2 = $4;
    $4 = $6;
    $2 = $2 | $4;
    wasm2js_scratch_store_i32(1, $2 | 0);
    return +wasm2js_scratch_load_f64();
   }
   label$12: {
    if ($9) {
     $8 = 0;
     if ($4 + 67108864 >>> 0 < $6 >>> 0) {
      break label$12;
     }
    }
    $8 = atan(fabs($0 / $1));
   }
   $0 = $8;
   label$14: {
    switch ($7 | 0) {
    case 1:
     return -$0;

    case 2:
     return 3.141592653589793 - ($0 + -12246467991473532e-32);

    case 0:
     break label$4;

    default:
     break label$14;
    }
   }
   return $0 + -12246467991473532e-32 + -3.141592653589793;
  }
  $0 = HEAPF64[($7 << 3) + 148432 >> 3];
 }
 return $0;
}

function jswrap_arraybufferview_set($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 176 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 172 >> 2] = $0;
 HEAP32[$3 + 168 >> 2] = $1;
 HEAP32[$3 + 164 >> 2] = $2;
 label$1: {
  label$2: {
   if (jsvIsString(HEAP32[$3 + 168 >> 2]) & 1) {
    break label$2;
   }
   if (jsvIsArray(HEAP32[$3 + 168 >> 2]) & 1) {
    break label$2;
   }
   if (jsvIsArrayBuffer(HEAP32[$3 + 168 >> 2]) & 1) {
    break label$2;
   }
   HEAP32[$3 >> 2] = HEAP32[$3 + 168 >> 2];
   jsExceptionHere(1, 98122, $3);
   break label$1;
  }
  label$3: {
   if (!(jsvIsArrayBuffer(HEAP32[$3 + 172 >> 2]) & 1)) {
    break label$3;
   }
   if (!(jsvIsArrayBuffer(HEAP32[$3 + 168 >> 2]) & 1)) {
    break label$3;
   }
   HEAP32[$3 + 160 >> 2] = jsvGetArrayBufferBackingString(HEAP32[$3 + 172 >> 2], 0);
   HEAP32[$3 + 156 >> 2] = jsvGetArrayBufferBackingString(HEAP32[$3 + 168 >> 2], 0);
   if (HEAP32[$3 + 160 >> 2] == HEAP32[$3 + 156 >> 2]) {
    $0 = HEAP32[$3 + 172 >> 2];
    $1 = HEAP32[$3 + 168 >> 2];
    $4 = (Math_imul(HEAP32[$3 + 164 >> 2], HEAPU8[HEAP32[$3 + 172 >> 2] + 5 | 0] & 15) + (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8) | 0) >= (HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8);
   }
   HEAP8[$3 + 155 | 0] = $4;
   jsvUnLock2(HEAP32[$3 + 160 >> 2], HEAP32[$3 + 156 >> 2]);
   if (HEAP8[$3 + 155 | 0] & 1) {
    HEAP32[$3 + 148 >> 2] = jsvGetArrayBufferLength(HEAP32[$3 + 168 >> 2]);
    HEAP32[$3 + 144 >> 2] = HEAP32[$3 + 148 >> 2] - 1;
    while (1) {
     if (HEAP32[$3 + 144 >> 2] >= 0) {
      HEAP32[$3 + 140 >> 2] = jsvArrayBufferGet(HEAP32[$3 + 168 >> 2], HEAP32[$3 + 144 >> 2]);
      jsvArrayBufferSet(HEAP32[$3 + 172 >> 2], HEAP32[$3 + 164 >> 2] + HEAP32[$3 + 144 >> 2] | 0, HEAP32[$3 + 140 >> 2]);
      jsvUnLock(HEAP32[$3 + 140 >> 2]);
      HEAP32[$3 + 144 >> 2] = HEAP32[$3 + 144 >> 2] - 1;
      continue;
     }
     break;
    }
    break label$1;
   }
  }
  jsvIteratorNew($3 + 80 | 0, HEAP32[$3 + 168 >> 2], 1);
  jsvArrayBufferIteratorNew($3 + 24 | 0, HEAP32[$3 + 172 >> 2], HEAP32[$3 + 164 >> 2]);
  $0 = 1;
  if (HEAPU8[$3 + 60 | 0] & 32) {
   $0 = jsvIsString(HEAP32[$3 + 168 >> 2]);
  }
  HEAP8[$3 + 23 | 0] = $0 & 1;
  while (1) {
   $0 = 0;
   if (jsvIteratorHasElement($3 + 80 | 0) & 1) {
    $0 = jsvArrayBufferIteratorHasElement($3 + 24 | 0);
   }
   if ($0 & 1) {
    label$12: {
     if (HEAP8[$3 + 23 | 0] & 1) {
      jsvArrayBufferIteratorSetIntegerValue($3 + 24 | 0, jsvIteratorGetIntegerValue($3 + 80 | 0));
      break label$12;
     }
     HEAP32[$3 + 16 >> 2] = jsvIteratorGetValue($3 + 80 | 0);
     jsvArrayBufferIteratorSetValue($3 + 24 | 0, HEAP32[$3 + 16 >> 2], 0);
     jsvUnLock(HEAP32[$3 + 16 >> 2]);
    }
    jsvArrayBufferIteratorNext($3 + 24 | 0);
    jsvIteratorNext($3 + 80 | 0);
    continue;
   }
   break;
  }
  jsvArrayBufferIteratorFree($3 + 24 | 0);
  jsvIteratorFree($3 + 80 | 0);
 }
 __stack_pointer = $3 + 176 | 0;
}

function jsdGetEffectiveTimeZone($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 176 | 0;
 __stack_pointer = $3;
 HEAPF64[$3 + 160 >> 3] = $0;
 HEAP8[$3 + 159 | 0] = $1;
 HEAP32[$3 + 152 >> 2] = $2;
 HEAP32[$3 + 148 >> 2] = jsvObjectGetChildIfExists(HEAP32[46748], 97523);
 label$1: {
  label$2: {
   label$3: {
    if (!HEAP32[$3 + 148 >> 2]) {
     break label$3;
    }
    if (!(jsvIsArrayBuffer(HEAP32[$3 + 148 >> 2]) & 1)) {
     break label$3;
    }
    if ((jsvGetLength(HEAP32[$3 + 148 >> 2]) | 0) != 12 | HEAPU8[HEAP32[$3 + 148 >> 2] + 5 | 0] != 18) {
     break label$3;
    }
    jsvArrayBufferIteratorNew($3 + 40 | 0, HEAP32[$3 + 148 >> 2], 0);
    HEAP32[$3 + 144 >> 2] = 0;
    while (1) {
     if (HEAP32[$3 + 144 >> 2] < 12) {
      $2 = jsvArrayBufferIteratorGetIntegerValue($3 + 40 | 0);
      $1 = HEAP32[$3 + 144 >> 2];
      HEAP32[$3 + 144 >> 2] = $1 + 1;
      HEAP32[($3 + 96 | 0) + ($1 << 2) >> 2] = $2;
      jsvArrayBufferIteratorNext($3 + 40 | 0);
      continue;
     }
     break;
    }
    jsvArrayBufferIteratorFree($3 + 40 | 0);
    jsvUnLock(HEAP32[$3 + 148 >> 2]);
    if (HEAP32[$3 + 96 >> 2]) {
     HEAPF64[$3 + 32 >> 3] = HEAPF64[$3 + 160 >> 3] / 1e3;
     $0 = HEAPF64[$3 + 32 >> 3] / 86400;
     label$7: {
      if (Math_abs($0) < 2147483648) {
       $1 = ~~$0;
       break label$7;
      }
      $1 = -2147483648;
     }
     getDateFromDayNumber($1, $3 + 144 | 0, 0, 0);
     HEAPF64[$3 + 24 >> 3] = getDstChangeTime(HEAP32[$3 + 144 >> 2], HEAP32[$3 + 104 >> 2], HEAP32[$3 + 108 >> 2], HEAP32[$3 + 112 >> 2], HEAP32[$3 + 116 >> 2], HEAP32[$3 + 120 >> 2], 1, HEAP32[$3 + 96 >> 2], HEAP32[$3 + 100 >> 2], HEAP8[$3 + 159 | 0] & 1);
     HEAPF64[$3 + 16 >> 3] = getDstChangeTime(HEAP32[$3 + 144 >> 2], HEAP32[$3 + 124 >> 2], HEAP32[$3 + 128 >> 2], HEAP32[$3 + 132 >> 2], HEAP32[$3 + 136 >> 2], HEAP32[$3 + 140 >> 2], 0, HEAP32[$3 + 96 >> 2], HEAP32[$3 + 100 >> 2], HEAP8[$3 + 159 | 0] & 1);
     label$9: {
      if (HEAPF64[$3 + 24 >> 3] < HEAPF64[$3 + 16 >> 3]) {
       $4 = HEAPF64[$3 + 32 >> 3] >= HEAPF64[$3 + 24 >> 3] ? HEAPF64[$3 + 32 >> 3] < HEAPF64[$3 + 16 >> 3] : $4;
       HEAP8[$3 + 15 | 0] = $4;
       break label$9;
      }
      $1 = 1;
      $1 = HEAPF64[$3 + 32 >> 3] < HEAPF64[$3 + 16 >> 3] ? $1 : HEAPF64[$3 + 32 >> 3] >= HEAPF64[$3 + 24 >> 3];
      HEAP8[$3 + 15 | 0] = $1;
     }
     if (HEAP32[$3 + 152 >> 2]) {
      HEAP8[HEAP32[$3 + 152 >> 2]] = HEAP8[$3 + 15 | 0] & 1;
     }
     if (HEAP8[$3 + 15 | 0] & 1) {
      $1 = HEAP32[$3 + 96 >> 2] + HEAP32[$3 + 100 >> 2] | 0;
     } else {
      $1 = HEAP32[$3 + 100 >> 2];
     }
     HEAP32[$3 + 172 >> 2] = $1;
     break label$1;
    }
    break label$2;
   }
   jsvUnLock(HEAP32[$3 + 148 >> 2]);
  }
  if (HEAP32[$3 + 152 >> 2]) {
   HEAP8[HEAP32[$3 + 152 >> 2]] = 0;
  }
  HEAP32[$3 + 172 >> 2] = jsvObjectGetIntegerChild(HEAP32[46748], 96373);
 }
 __stack_pointer = $3 + 176 | 0;
 return HEAP32[$3 + 172 >> 2];
}

function jswrap_string_removeAccents($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 112 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 104 >> 2] = $0;
 HEAP32[$1 + 96 >> 2] = jsvNewFromEmptyString_8();
 label$1: {
  if (!HEAP32[$1 + 96 >> 2]) {
   HEAP32[$1 + 108 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 92 >> 2] = jsvAsString(HEAP32[$1 + 104 >> 2]);
  jsvStringIteratorNew($1 + 56 | 0, HEAP32[$1 + 92 >> 2], 0);
  jsvStringIteratorNew($1 + 16 | 0, HEAP32[$1 + 96 >> 2], 0);
  while (1) {
   if (jsvStringIteratorHasChar_8($1 + 56 | 0) & 1) {
    HEAP8[$1 + 15 | 0] = jsvStringIteratorGetCharAndNext($1 + 56 | 0);
    label$5: {
     if (HEAPU8[$1 + 15 | 0] >= 224) {
      HEAP8[$1 + 103 | 0] = 1;
      HEAP8[$1 + 15 | 0] = HEAPU8[$1 + 15 | 0] - 32;
      break label$5;
     }
     HEAP8[$1 + 103 | 0] = 0;
    }
    if (HEAPU8[$1 + 15 | 0] >= 192) {
     label$8: {
      label$9: {
       switch (HEAPU8[$1 + 15 | 0] - 192 | 0) {
       case 0:
       case 1:
       case 2:
       case 3:
       case 4:
       case 5:
        HEAP8[$1 + 15 | 0] = 65;
        break label$8;

       case 6:
        jsvStringIteratorAppend($1 + 16 | 0, (HEAP8[$1 + 103 | 0] & 1 ? 97 : 65) << 24 >> 24);
        HEAP8[$1 + 15 | 0] = 69;
        break label$8;

       case 7:
        HEAP8[$1 + 15 | 0] = 67;
        break label$8;

       case 8:
       case 9:
       case 10:
       case 11:
        HEAP8[$1 + 15 | 0] = 69;
        break label$8;

       case 12:
       case 13:
       case 14:
       case 15:
        HEAP8[$1 + 15 | 0] = 73;
        break label$8;

       case 16:
        HEAP8[$1 + 15 | 0] = 68;
        break label$8;

       case 17:
        HEAP8[$1 + 15 | 0] = 78;
        break label$8;

       case 18:
       case 19:
       case 20:
       case 21:
       case 22:
       case 24:
        HEAP8[$1 + 15 | 0] = 79;
        break label$8;

       case 25:
       case 26:
       case 27:
       case 28:
        HEAP8[$1 + 15 | 0] = 85;
        break label$8;

       case 29:
        HEAP8[$1 + 15 | 0] = 89;
        break label$8;

       case 30:
        HEAP8[$1 + 15 | 0] = 80;
        break label$8;

       case 31:
        break label$9;

       default:
        break label$8;
       }
      }
      label$21: {
       if (HEAP8[$1 + 103 | 0] & 1) {
        HEAP8[$1 + 15 | 0] = 89;
        break label$21;
       }
       jsvStringIteratorAppend($1 + 16 | 0, 83);
       HEAP8[$1 + 15 | 0] = 83;
      }
     }
    }
    $2 = $1 + 16 | 0;
    if (HEAP8[$1 + 103 | 0] & 1) {
     $0 = HEAPU8[$1 + 15 | 0] + 32 | 0;
    } else {
     $0 = HEAPU8[$1 + 15 | 0];
    }
    jsvStringIteratorAppend($2, $0 << 24 >> 24);
    continue;
   }
   break;
  }
  jsvStringIteratorFree_10($1 + 56 | 0);
  jsvStringIteratorFree_10($1 + 16 | 0);
  jsvUnLock(HEAP32[$1 + 92 >> 2]);
  HEAP32[$1 + 108 >> 2] = HEAP32[$1 + 96 >> 2];
 }
 __stack_pointer = $1 + 112 | 0;
 return HEAP32[$1 + 108 >> 2];
}

function _parse_time($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 $0 = stringToIntWithRadix(jslGetTokenValueAsString() + HEAP32[$2 + 36 >> 2] | 0, 10, 0, 0);
 HEAP32[HEAP32[$2 + 40 >> 2] + 16 >> 2] = $0;
 jslGetNextToken();
 label$1: {
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 58) {
   jslGetNextToken();
   if (HEAP16[HEAP32[38615] + 2 >> 1] == 129) {
    $0 = _parse_int();
    HEAP32[HEAP32[$2 + 40 >> 2] + 12 >> 2] = $0;
    jslGetNextToken();
    if (HEAP16[HEAP32[38615] + 2 >> 1] == 58) {
     jslGetNextToken();
     if (!(HEAP16[HEAP32[38615] + 2 >> 1] != 129 & HEAP16[HEAP32[38615] + 2 >> 1] != 130)) {
      HEAPF64[$2 + 24 >> 3] = stringToFloat(jslGetTokenValueAsString());
      $1 = HEAP32[$2 + 40 >> 2];
      $3 = HEAPF64[$2 + 24 >> 3];
      label$7: {
       if (Math_abs($3) < 2147483648) {
        $0 = ~~$3;
        break label$7;
       }
       $0 = -2147483648;
      }
      HEAP32[$1 + 8 >> 2] = $0;
      $1 = HEAP32[$2 + 40 >> 2];
      $3 = HEAPF64[$2 + 24 >> 3] * 1e3;
      label$9: {
       if (Math_abs($3) < 2147483648) {
        $0 = ~~$3;
        break label$9;
       }
       $0 = -2147483648;
      }
      HEAP32[$1 + 4 >> 2] = ($0 | 0) % 1e3;
      jslGetNextToken();
      if (HEAP16[HEAP32[38615] + 2 >> 1] == 128) {
       HEAP32[$2 + 20 >> 2] = jslGetTokenValueAsString();
       label$12: {
        label$13: {
         if (strcmp(HEAP32[$2 + 20 >> 2], 108720)) {
          if (strcmp(HEAP32[$2 + 20 >> 2], 108347)) {
           break label$13;
          }
         }
         HEAP32[HEAP32[$2 + 40 >> 2] + 20 >> 2] = 0;
         jslGetNextToken();
         if (!HEAP16[HEAP32[38615] + 2 >> 1]) {
          HEAP8[$2 + 47 | 0] = 1;
          break label$1;
         }
         break label$12;
        }
        setCorrectTimeZone(HEAP32[$2 + 40 >> 2]);
       }
      }
      label$16: {
       if (!(HEAP16[HEAP32[38615] + 2 >> 1] != 43 & HEAP16[HEAP32[38615] + 2 >> 1] != 45)) {
        HEAP32[$2 + 16 >> 2] = HEAP16[HEAP32[38615] + 2 >> 1] == 43 ? 1 : -1;
        jslGetNextToken();
        label$19: {
         if (HEAP16[HEAP32[38615] + 2 >> 1] == 129) {
          HEAP32[$2 + 12 >> 2] = _parse_int();
          HEAP32[$2 + 12 >> 2] = Math_imul(HEAP32[$2 + 12 >> 2] / 100 | 0, 60) + (HEAP32[$2 + 12 >> 2] % 100 | 0);
          HEAP32[HEAP32[$2 + 40 >> 2] + 20 >> 2] = Math_imul(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 16 >> 2]);
          jslGetNextToken();
          break label$19;
         }
         setCorrectTimeZone(HEAP32[$2 + 40 >> 2]);
        }
        break label$16;
       }
       setCorrectTimeZone(HEAP32[$2 + 40 >> 2]);
      }
      HEAP8[$2 + 47 | 0] = 1;
      break label$1;
     }
    }
   }
  }
  setCorrectTimeZone(HEAP32[$2 + 40 >> 2]);
  HEAP8[$2 + 47 | 0] = 0;
 }
 __stack_pointer = $2 + 48 | 0;
 return HEAP8[$2 + 47 | 0] & 1;
}

function jsvFindChildFromString($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = 0;
 HEAP8[$2 + 15 | 0] = 1;
 HEAP8[$2 + 16 | 0] = HEAPU8[HEAP32[$2 + 20 >> 2]];
 if (HEAPU8[HEAP32[$2 + 20 >> 2]]) {
  HEAP8[$2 + 17 | 0] = HEAPU8[HEAP32[$2 + 20 >> 2] + 1 | 0];
  if (HEAPU8[HEAP32[$2 + 20 >> 2] + 1 | 0]) {
   HEAP8[$2 + 18 | 0] = HEAPU8[HEAP32[$2 + 20 >> 2] + 2 | 0];
   if (HEAPU8[HEAP32[$2 + 20 >> 2] + 2 | 0]) {
    HEAP8[$2 + 19 | 0] = HEAPU8[HEAP32[$2 + 20 >> 2] + 3 | 0];
    if (HEAPU8[HEAP32[$2 + 20 >> 2] + 3 | 0]) {
     HEAP8[$2 + 15 | 0] = !HEAP8[HEAP32[$2 + 20 >> 2] + 4 | 0];
    }
   }
  }
 }
 HEAP16[$2 + 12 >> 1] = jsvGetFirstChild(HEAP32[$2 + 24 >> 2]);
 label$5: {
  label$6: {
   if (!(HEAP8[$2 + 15 | 0] & 1)) {
    while (1) {
     if (HEAPU16[$2 + 12 >> 1]) {
      HEAP32[$2 + 8 >> 2] = jsvGetAddressOf(HEAPU16[$2 + 12 >> 1]);
      label$10: {
       $0 = HEAP32[$2 + 8 >> 2];
       if ((HEAPU8[$2 + 16 | 0] | HEAPU8[$2 + 17 | 0] << 8 | (HEAPU8[$2 + 18 | 0] << 16 | HEAPU8[$2 + 19 | 0] << 24)) != (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24))) {
        break label$10;
       }
       if (!(jsvIsStringEqual(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 20 >> 2]) & 1)) {
        break label$10;
       }
       HEAP32[$2 + 28 >> 2] = jsvLockAgain(HEAP32[$2 + 8 >> 2]);
       break label$5;
      }
      HEAP16[$2 + 12 >> 1] = jsvGetNextSibling(HEAP32[$2 + 8 >> 2]);
      continue;
     }
     break;
    }
    break label$6;
   }
   HEAP32[$2 + 4 >> 2] = 0;
   while (1) {
    if (HEAPU8[HEAP32[$2 + 20 >> 2] + HEAP32[$2 + 4 >> 2] | 0]) {
     HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
     continue;
    }
    break;
   }
   while (1) {
    if (HEAPU16[$2 + 12 >> 1]) {
     HEAP32[$2 >> 2] = jsvGetAddressOf(HEAPU16[$2 + 12 >> 1]);
     label$15: {
      $0 = HEAP32[$2 >> 2];
      if ((HEAPU8[$2 + 16 | 0] | HEAPU8[$2 + 17 | 0] << 8 | (HEAPU8[$2 + 18 | 0] << 16 | HEAPU8[$2 + 19 | 0] << 24)) != (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24))) {
       break label$15;
      }
      $1 = HEAP32[$2 >> 2];
      $0 = $1;
      $0 = HEAPU8[$0 + 10 | 0];
      $3 = HEAPU8[$1 + 8 | 0] | HEAPU8[$1 + 9 | 0] << 8;
      $1 = $0 << 16;
      $0 = $3 | $1;
      $1 = $0;
      if ($1 >>> 12 | 0) {
       break label$15;
      }
      if ((jsvGetCharactersInVar(HEAP32[$2 >> 2]) | 0) != HEAP32[$2 + 4 >> 2]) {
       break label$15;
      }
      HEAP32[$2 + 28 >> 2] = jsvLockAgain(HEAP32[$2 >> 2]);
      break label$5;
     }
     HEAP16[$2 + 12 >> 1] = jsvGetNextSibling(HEAP32[$2 >> 2]);
     continue;
    }
    break;
   }
  }
  HEAP32[$2 + 28 >> 2] = 0;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jslNewStringFromLexer($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 128 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 120 >> 2] = $0;
 HEAP32[$2 + 116 >> 2] = $1;
 HEAP32[$2 + 112 >> 2] = (HEAP32[$2 + 116 >> 2] + 1 | 0) - jsvStringIteratorGetIndex(HEAP32[$2 + 120 >> 2]);
 HEAP32[$2 + 108 >> 2] = 0;
 label$1: {
  if (HEAPU32[$2 + 112 >> 2] > 17) {
   HEAP32[$2 + 108 >> 2] = jsvNewFlatStringOfLength(HEAP32[$2 + 112 >> 2]);
   if (HEAP32[$2 + 108 >> 2]) {
    HEAP32[$2 + 104 >> 2] = jsvGetFlatStringPointer(HEAP32[$2 + 108 >> 2]);
    $1 = HEAPU8[HEAP32[$2 + 120 >> 2] + 36 | 0];
    $0 = HEAP32[$2 + 104 >> 2];
    HEAP32[$2 + 104 >> 2] = $0 + 1;
    HEAP8[$0 | 0] = $1;
    jsvStringIteratorClone($2 - -64 | 0, HEAP32[$2 + 120 >> 2]);
    while (1) {
     $0 = 0;
     if (jsvStringIteratorHasChar($2 - -64 | 0) & 1) {
      $0 = HEAP32[$2 + 112 >> 2] - 1 | 0;
      HEAP32[$2 + 112 >> 2] = $0;
      $0 = ($0 | 0) != 0;
     }
     if ($0) {
      $1 = jsvStringIteratorGetCharAndNext($2 - -64 | 0);
      $0 = HEAP32[$2 + 104 >> 2];
      HEAP32[$2 + 104 >> 2] = $0 + 1;
      HEAP8[$0 | 0] = $1;
      continue;
     }
     break;
    }
    jsvStringIteratorFree($2 - -64 | 0);
    HEAP32[$2 + 124 >> 2] = HEAP32[$2 + 108 >> 2];
    break label$1;
   }
  }
  HEAP32[$2 + 108 >> 2] = jsvNewFromEmptyString();
  if (!HEAP32[$2 + 108 >> 2]) {
   HEAP32[$2 + 124 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 60 >> 2] = jsvLockAgain(HEAP32[$2 + 108 >> 2]);
  HEAP8[HEAP32[$2 + 60 >> 2]] = HEAPU8[HEAP32[$2 + 120 >> 2] + 36 | 0];
  HEAP32[$2 + 56 >> 2] = 1;
  jsvStringIteratorClone($2 + 16 | 0, HEAP32[$2 + 120 >> 2]);
  while (1) {
   $0 = 0;
   if (jsvStringIteratorHasChar($2 + 16 | 0) & 1) {
    $0 = HEAP32[$2 + 112 >> 2] - 1 | 0;
    HEAP32[$2 + 112 >> 2] = $0;
    $0 = ($0 | 0) != 0;
   }
   label$10: {
    if (!$0) {
     break label$10;
    }
    HEAP8[$2 + 15 | 0] = jsvStringIteratorGetCharAndNext($2 + 16 | 0);
    if (HEAPU32[$2 + 56 >> 2] >= jsvGetMaxCharactersInVar(HEAP32[$2 + 60 >> 2]) >>> 0) {
     jsvSetCharactersInVar(HEAP32[$2 + 60 >> 2], HEAP32[$2 + 56 >> 2]);
     HEAP32[$2 + 8 >> 2] = jsvNewWithFlags(40);
     if (!HEAP32[$2 + 8 >> 2]) {
      break label$10;
     }
     jsvSetLastChild(HEAP32[$2 + 60 >> 2], jsvGetRef(HEAP32[$2 + 8 >> 2]) & 65535);
     jsvUnLock(HEAP32[$2 + 60 >> 2]);
     HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 8 >> 2];
     HEAP32[$2 + 56 >> 2] = 0;
    }
    $1 = HEAPU8[$2 + 15 | 0];
    $3 = HEAP32[$2 + 60 >> 2];
    $0 = HEAP32[$2 + 56 >> 2];
    HEAP32[$2 + 56 >> 2] = $0 + 1;
    HEAP8[$3 + $0 | 0] = $1;
    continue;
   }
   break;
  }
  jsvSetCharactersInVar(HEAP32[$2 + 60 >> 2], HEAP32[$2 + 56 >> 2]);
  jsvUnLock(HEAP32[$2 + 60 >> 2]);
  jsvStringIteratorFree($2 + 16 | 0);
  HEAP32[$2 + 124 >> 2] = HEAP32[$2 + 108 >> 2];
 }
 __stack_pointer = $2 + 128 | 0;
 return HEAP32[$2 + 124 >> 2];
}

function tflite__ops__micro__depthwise_conv__EvalFloat_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteDepthwiseConvParams__2c_20tflite__ops__micro__depthwise_conv___28anonymous_20namespace_29__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__29($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0;
 $8 = __stack_pointer - 208 | 0;
 __stack_pointer = $8;
 HEAP32[$8 + 204 >> 2] = $0;
 HEAP32[$8 + 200 >> 2] = $1;
 HEAP32[$8 + 196 >> 2] = $2;
 HEAP32[$8 + 192 >> 2] = $3;
 HEAP32[$8 + 188 >> 2] = $4;
 HEAP32[$8 + 184 >> 2] = $5;
 HEAP32[$8 + 180 >> 2] = $6;
 HEAP32[$8 + 176 >> 2] = $7;
 void_20tflite__CalculateActivationRange_float__28TfLiteFusedActivation_2c_20float__2c_20float__29(HEAP32[HEAP32[$8 + 196 >> 2] + 16 >> 2], $8 + 172 | 0, $8 + 168 | 0);
 HEAP8[$8 + 104 | 0] = 1;
 HEAP16[$8 + 106 >> 1] = HEAP32[HEAP32[$8 + 192 >> 2] >> 2];
 HEAP16[$8 + 108 >> 1] = HEAP32[HEAP32[$8 + 192 >> 2] + 4 >> 2];
 HEAP16[$8 + 114 >> 1] = HEAP32[HEAP32[$8 + 196 >> 2] + 4 >> 2];
 HEAP16[$8 + 116 >> 1] = HEAP32[HEAP32[$8 + 196 >> 2] + 8 >> 2];
 HEAP16[$8 + 118 >> 1] = HEAP32[HEAP32[$8 + 196 >> 2] + 20 >> 2];
 HEAP16[$8 + 120 >> 1] = HEAP32[HEAP32[$8 + 196 >> 2] + 24 >> 2];
 HEAP16[$8 + 122 >> 1] = HEAP32[HEAP32[$8 + 196 >> 2] + 12 >> 2];
 HEAPF32[$8 + 152 >> 2] = HEAPF32[$8 + 172 >> 2];
 HEAPF32[$8 + 156 >> 2] = HEAPF32[$8 + 168 >> 2];
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($8 + 80 | 0, HEAP32[$8 + 188 >> 2]);
 $0 = float_20const__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor_20const__29(HEAP32[$8 + 188 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($8 + 56 | 0, HEAP32[$8 + 184 >> 2]);
 $1 = float_20const__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor_20const__29(HEAP32[$8 + 184 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($8 + 32 | 0, HEAP32[$8 + 180 >> 2]);
 $2 = float_20const__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor_20const__29(HEAP32[$8 + 180 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($8 + 8 | 0, HEAP32[$8 + 176 >> 2]);
 tflite__reference_ops__DepthwiseConv_28tflite__DepthwiseParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($8 + 104 | 0, $8 + 80 | 0, $0, $8 + 56 | 0, $1, $8 + 32 | 0, $2, $8 + 8 | 0, float__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor__29(HEAP32[$8 + 176 >> 2]));
 tflite__RuntimeShape___RuntimeShape_28_29($8 + 8 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($8 + 32 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($8 + 56 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($8 + 80 | 0);
 __stack_pointer = $8 + 208 | 0;
}

function _jswrap_graphics_stringMetrics($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 208 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 204 >> 2] = $0;
 HEAP32[$4 + 200 >> 2] = $1;
 HEAP32[$4 + 196 >> 2] = $2;
 HEAP32[$4 + 192 >> 2] = $3;
 _jswrap_graphics_getFontInfo(HEAP32[$4 + 204 >> 2], $4 + 168 | 0);
 $0 = HEAP32[$4 + 192 >> 2];
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$4 + 164 >> 2] = _jswrap_graphics_getFontHeightInternal(HEAP32[$4 + 204 >> 2], $4 + 168 | 0);
 HEAP32[$4 + 160 >> 2] = jsvAsString(HEAP32[$4 + 200 >> 2]);
 jsvStringIteratorNewUTF8($4 + 120 | 0, HEAP32[$4 + 160 >> 2], HEAP32[$4 + 196 >> 2] < 0 ? 0 : HEAP32[$4 + 196 >> 2]);
 HEAP32[$4 + 116 >> 2] = 0;
 HEAP32[$4 + 112 >> 2] = HEAP32[$4 + 164 >> 2];
 HEAP32[$4 + 108 >> 2] = 0;
 while (1) {
  label$4: {
   if (!(jsvStringIteratorHasChar_12($4 + 120 | 0) & 1)) {
    break label$4;
   }
   HEAP32[$4 + 104 >> 2] = jsvStringIteratorGetUTF8CharAndNext($4 + 120 | 0);
   if (HEAP32[$4 + 104 >> 2] == 10) {
    if (HEAP32[$4 + 116 >> 2] > HEAP32[$4 + 108 >> 2]) {
     HEAP32[$4 + 108 >> 2] = HEAP32[$4 + 116 >> 2];
    }
    HEAP32[$4 + 116 >> 2] = 0;
    HEAP32[$4 + 112 >> 2] = HEAP32[$4 + 164 >> 2] + HEAP32[$4 + 112 >> 2];
    if (HEAP32[$4 + 196 >> 2] >= 0) {
     break label$4;
    }
   }
   if (!HEAP32[$4 + 104 >> 2]) {
    $0 = HEAP32[$4 + 192 >> 2];
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
    HEAP32[$4 + 12 >> 2] = jsvConvertToUTF8Index(HEAP32[$4 + 160 >> 2], jsvStringIteratorGetIndex_6($4 + 120 | 0));
    if (_jswrap_graphics_parseImage(HEAP32[$4 + 204 >> 2], HEAP32[$4 + 160 >> 2], HEAP32[$4 + 12 >> 2], $4 + 16 | 0) & 1) {
     jsvStringIteratorGotoUTF8($4 + 120 | 0, HEAP32[$4 + 160 >> 2], HEAPU16[$4 + 66 >> 1] + (HEAP32[$4 + 12 >> 2] + HEAPU16[$4 + 64 >> 1] | 0) | 0);
     _jswrap_graphics_freeImageInfo($4 + 16 | 0);
     HEAP32[$4 + 116 >> 2] = HEAP32[$4 + 16 >> 2] + HEAP32[$4 + 116 >> 2];
     if (HEAP32[$4 + 20 >> 2] > HEAP32[HEAP32[$4 + 192 >> 2] + 16 >> 2]) {
      HEAP32[HEAP32[$4 + 192 >> 2] + 16 >> 2] = HEAP32[$4 + 20 >> 2];
     }
    }
    continue;
   }
   HEAP32[$4 + 8 >> 2] = _jswrap_graphics_getCharWidth($4 + 168 | 0, HEAP32[$4 + 104 >> 2]);
   HEAP32[$4 + 116 >> 2] = HEAP32[$4 + 8 >> 2] + HEAP32[$4 + 116 >> 2];
   if (!HEAP32[$4 + 8 >> 2]) {
    HEAP8[HEAP32[$4 + 192 >> 2] + 8 | 0] = 1;
   }
   continue;
  }
  break;
 }
 jsvStringIteratorFree_16($4 + 120 | 0);
 jsvUnLock(HEAP32[$4 + 160 >> 2]);
 $1 = HEAP32[$4 + 192 >> 2];
 if (HEAP32[$4 + 116 >> 2] > HEAP32[$4 + 108 >> 2]) {
  $0 = HEAP32[$4 + 116 >> 2];
 } else {
  $0 = HEAP32[$4 + 108 >> 2];
 }
 HEAP32[$1 >> 2] = $0;
 HEAP32[HEAP32[$4 + 192 >> 2] + 4 >> 2] = HEAP32[$4 + 112 >> 2];
 _jswrap_graphics_freeFontInfo($4 + 168 | 0);
 __stack_pointer = $4 + 208 | 0;
}

function jswrap_spi_send($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 304 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 296 >> 2] = $0;
 HEAP32[$3 + 292 >> 2] = $1;
 HEAP8[$3 + 291 | 0] = $2;
 label$1: {
  if (!(jsvIsObject(HEAP32[$3 + 296 >> 2]) & 1)) {
   HEAP32[$3 + 300 >> 2] = 0;
   break label$1;
  }
  HEAP8[$3 + 290 | 0] = jsiGetDeviceFromClass(HEAP32[$3 + 296 >> 2]);
  if (!(jsspiGetSendFunction(HEAP32[$3 + 296 >> 2], $3 + 200 | 0, $3 + 204 | 0) & 1)) {
   HEAP32[$3 + 300 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 196 >> 2] = 0;
  if (!(HEAPU8[$3 + 290 | 0] < 25 | HEAPU8[$3 + 290 | 0] > 25)) {
   jshSPISetReceive(HEAPU8[$3 + 290 | 0], 1);
  }
  if (HEAPU8[$3 + 291 | 0] != 255) {
   jshPinOutput(HEAPU8[$3 + 291 | 0], 0);
  }
  label$6: {
   if (jsvIsNumeric(HEAP32[$3 + 292 >> 2]) & 1) {
    HEAP8[$3 + 195 | 0] = jsvGetInteger(HEAP32[$3 + 292 >> 2]);
    $0 = $3 + 195 | 0;
    FUNCTION_TABLE[HEAP32[$3 + 200 >> 2]]($0, $0, 1, $3 + 204 | 0);
    HEAP32[$3 + 196 >> 2] = jsvNewFromInteger(HEAPU8[$3 + 195 | 0]);
    break label$6;
   }
   label$8: {
    if (jsvIsString(HEAP32[$3 + 292 >> 2]) & 1) {
     HEAP32[$3 + 196 >> 2] = jsvNewFromEmptyString_12();
     jsvStringIteratorNew($3 + 24 | 0, HEAP32[$3 + 292 >> 2], 0);
     while (1) {
      $0 = 0;
      if (jsvStringIteratorHasChar_11($3 + 24 | 0) & 1) {
       $0 = jspIsInterrupted() ^ -1;
      }
      if ($0 & 1) {
       jsvStringIteratorGetPtrAndNext($3 + 24 | 0, $3 + 20 | 0, $3 + 16 | 0);
       while (1) {
        if (HEAP32[$3 + 16 >> 2]) {
         HEAP32[$3 + 12 >> 2] = HEAPU32[$3 + 16 >> 2] > 128 ? 128 : HEAP32[$3 + 16 >> 2];
         FUNCTION_TABLE[HEAP32[$3 + 200 >> 2]](HEAP32[$3 + 20 >> 2], $3 - -64 | 0, HEAP32[$3 + 12 >> 2], $3 + 204 | 0);
         jsvAppendStringBuf(HEAP32[$3 + 196 >> 2], $3 - -64 | 0, HEAP32[$3 + 12 >> 2]);
         HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 16 >> 2] - HEAP32[$3 + 12 >> 2];
         HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 12 >> 2] + HEAP32[$3 + 20 >> 2];
         continue;
        }
        break;
       }
       continue;
      }
      break;
     }
     jsvStringIteratorFree_14($3 + 24 | 0);
     break label$8;
    }
    HEAP32[$3 + 8 >> 2] = jsvIterateCallbackCount(HEAP32[$3 + 292 >> 2]);
    HEAP32[$3 + 196 >> 2] = jsvNewTypedArray(1, HEAP32[$3 + 8 >> 2]);
    if (HEAP32[$3 + 196 >> 2]) {
     HEAP32[$3 + 224 >> 2] = 0;
     HEAP32[$3 + 220 >> 2] = 0;
     jsvArrayBufferIteratorNew($3 + 228 | 0, HEAP32[$3 + 196 >> 2], 0);
     jsvIterateBufferCallback(HEAP32[$3 + 292 >> 2], 626, $3 + 200 | 0);
     jsvArrayBufferIteratorFree($3 + 228 | 0);
    }
   }
  }
  if (HEAPU8[$3 + 291 | 0] != 255) {
   jshPinOutput(HEAPU8[$3 + 291 | 0], 1);
  }
  HEAP32[$3 + 300 >> 2] = HEAP32[$3 + 196 >> 2];
 }
 __stack_pointer = $3 + 304 | 0;
 return HEAP32[$3 + 300 >> 2];
}

function jswrap_banglejs_setLCDMode($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 HEAP32[$1 + 24 >> 2] = 1;
 label$1: {
  label$2: {
   if (!(jsvIsUndefined(HEAP32[$1 + 28 >> 2]) & 1)) {
    if (!(jsvIsStringEqual(HEAP32[$1 + 28 >> 2], 98056) & 1)) {
     break label$2;
    }
   }
   HEAP32[$1 + 24 >> 2] = 1;
   break label$1;
  }
  label$4: {
   if (jsvIsStringEqual(HEAP32[$1 + 28 >> 2], 102720) & 1) {
    HEAP32[$1 + 24 >> 2] = 0;
    break label$4;
   }
   label$6: {
    if (jsvIsStringEqual(HEAP32[$1 + 28 >> 2], 106413) & 1) {
     HEAP32[$1 + 24 >> 2] = 2;
     break label$6;
    }
    label$8: {
     if (jsvIsStringEqual(HEAP32[$1 + 28 >> 2], 111295) & 1) {
      HEAP32[$1 + 24 >> 2] = 3;
      break label$8;
     }
     label$10: {
      if (jsvIsStringEqual(HEAP32[$1 + 28 >> 2], 111279) & 1) {
       HEAP32[$1 + 24 >> 2] = 4;
       break label$10;
      }
      HEAP32[$1 >> 2] = HEAP32[$1 + 28 >> 2];
      jsExceptionHere(1, 103296, $1);
     }
    }
   }
  }
 }
 HEAP32[$1 + 20 >> 2] = jsvObjectGetChildIfExists(HEAP32[46748], 96685);
 label$12: {
  if (!HEAP32[$1 + 20 >> 2]) {
   break label$12;
  }
  jswrap_graphics_setFont(HEAP32[$1 + 20 >> 2], 0, 1);
  jsvObjectSetOrRemoveChild(HEAP32[$1 + 20 >> 2], 101361, 0);
  HEAP32[$1 + 16 >> 2] = 0;
  label$13: {
   label$14: {
    switch (HEAP32[$1 + 24 >> 2]) {
    case 0:
    case 1:
     HEAP8[189440] = 240;
     HEAP8[189441] = 0;
     HEAP8[189442] = 240;
     HEAP8[189443] = 0;
     HEAP8[189444] = 16;
     break label$13;

    case 2:
     HEAP8[189440] = 240;
     HEAP8[189441] = 0;
     HEAP8[189442] = 160;
     HEAP8[189443] = 0;
     HEAP8[189444] = 16;
     break label$13;

    case 3:
     HEAP8[189440] = 120;
     HEAP8[189441] = 0;
     HEAP8[189442] = 120;
     HEAP8[189443] = 0;
     HEAP8[189444] = 8;
     HEAP32[$1 + 16 >> 2] = 14400;
     break label$13;

    case 4:
     break label$14;

    default:
     break label$13;
    }
   }
   HEAP8[189440] = 80;
   HEAP8[189441] = 0;
   HEAP8[189442] = 80;
   HEAP8[189443] = 0;
   HEAP8[189444] = 8;
   HEAP32[$1 + 16 >> 2] = 6400;
  }
  if (HEAP32[$1 + 16 >> 2]) {
   jsvGarbageCollect();
   jsvDefragment();
   HEAP32[$1 + 12 >> 2] = jsvNewFlatStringOfLength(HEAP32[$1 + 16 >> 2]);
   label$19: {
    if (HEAP32[$1 + 12 >> 2]) {
     jsvObjectSetChildAndUnLock(HEAP32[$1 + 20 >> 2], 101361, jsvNewArrayBufferFromString(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 16 >> 2]));
     break label$19;
    }
    jsExceptionHere(1, 101321, 0);
    jswrap_banglejs_setLCDMode(0);
    break label$12;
   }
   jsvUnLock(HEAP32[$1 + 12 >> 2]);
  }
  graphicsStructResetState(189428);
  jsvUnLock(HEAP32[$1 + 20 >> 2]);
  lcdST7789_setMode(HEAP32[$1 + 24 >> 2]);
  graphicsSetCallbacks(189428);
 }
 __stack_pointer = $1 + 32 | 0;
}

function _jswrap_prombox_resolve_or_reject($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer + -64 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 60 >> 2] = $0;
 HEAP32[$3 + 56 >> 2] = $1;
 HEAP8[$3 + 55 | 0] = $2;
 HEAP8[$3 + 54 | 0] = jsvObjectGetBoolChild(HEAP32[$3 + 60 >> 2], 102703) & 1;
 label$1: {
  if (HEAP8[$3 + 54 | 0] & 1) {
   break label$1;
  }
  jsvObjectSetChildAndUnLock(HEAP32[$3 + 60 >> 2], 102703, jsvNewFromBool(1));
  HEAP32[$3 + 48 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 60 >> 2], 102677);
  if (!HEAP32[$3 + 48 >> 2]) {
   break label$1;
  }
  if (jsvIsEqual(HEAP32[$3 + 56 >> 2], HEAP32[$3 + 48 >> 2]) & 1) {
   jsExceptionHere(1, 104051, 0);
   jsvUnLock(HEAP32[$3 + 48 >> 2]);
   break label$1;
  }
  jsvObjectSetChild(HEAP32[$3 + 48 >> 2], 102991, HEAP32[$3 + 56 >> 2]);
  label$3: {
   if (HEAP8[$3 + 55 | 0] & 1) {
    if (jsvIsObject(HEAP32[$3 + 56 >> 2]) & 1) {
     break label$3;
    }
   }
   _jswrap_promise_seal(HEAP32[$3 + 48 >> 2], HEAP32[$3 + 56 >> 2], HEAP8[$3 + 55 | 0] & 1);
   jsvUnLock(HEAP32[$3 + 48 >> 2]);
   break label$1;
  }
  HEAP8[$3 + 47 | 0] = _jswrap_promise_is_promise(HEAP32[$3 + 56 >> 2]) & 1;
  HEAP8[$3 + 46 | 0] = 0;
  HEAP32[$3 + 40 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 56 >> 2], 102532);
  if (jsvIsFunction(HEAP32[$3 + 40 >> 2]) & 1) {
   HEAP8[$3 + 46 | 0] = 1;
  }
  if (!(HEAP8[$3 + 46 | 0] & 1 | HEAP8[$3 + 47 | 0] & 1)) {
   _jswrap_promise_seal(HEAP32[$3 + 48 >> 2], HEAP32[$3 + 56 >> 2], HEAP8[$3 + 55 | 0] & 1);
   jsvUnLock2(HEAP32[$3 + 48 >> 2], HEAP32[$3 + 40 >> 2]);
   break label$1;
  }
  HEAP32[$3 + 36 >> 2] = jsvNewObject();
  HEAP32[$3 + 32 >> 2] = _jswrap_promise_native_with_prombox(618, HEAP32[$3 + 36 >> 2]);
  HEAP32[$3 + 28 >> 2] = _jswrap_promise_native_with_prombox(619, HEAP32[$3 + 36 >> 2]);
  if (HEAP32[$3 + 36 >> 2]) {
   jsvObjectSetChild(HEAP32[$3 + 36 >> 2], 102677, HEAP32[$3 + 48 >> 2]);
   jsvObjectSetChildAndUnLock(HEAP32[$3 + 36 >> 2], 102703, jsvNewFromBool(0));
   label$8: {
    if (HEAP8[$3 + 46 | 0] & 1) {
     HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 32 >> 2];
     HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 28 >> 2];
     HEAP32[$3 + 16 >> 2] = HEAP32[46755];
     jsvUnLock(jspeFunctionCall(HEAP32[$3 + 40 >> 2], 0, HEAP32[$3 + 56 >> 2], 0, 2, $3 + 20 | 0));
     HEAP32[46755] = HEAP32[$3 + 16 >> 2];
     HEAP32[$3 + 12 >> 2] = jspGetException();
     if (HEAP32[$3 + 12 >> 2]) {
      _jswrap_prombox_reject(HEAP32[$3 + 36 >> 2], HEAP32[$3 + 12 >> 2]);
      jsvUnLock(HEAP32[$3 + 12 >> 2]);
     }
     break label$8;
    }
    jsvUnLock(jswrap_promise_then(HEAP32[$3 + 56 >> 2], HEAP32[$3 + 32 >> 2], HEAP32[$3 + 28 >> 2]));
   }
   jsvUnLock3(HEAP32[$3 + 32 >> 2], HEAP32[$3 + 28 >> 2], HEAP32[$3 + 36 >> 2]);
  }
  jsvUnLock2(HEAP32[$3 + 48 >> 2], HEAP32[$3 + 40 >> 2]);
 }
 __stack_pointer = $3 - -64 | 0;
}

function tflite__ops__micro__pooling___28anonymous_20namespace_29__AverageEvalQuantized_28TfLiteContext__2c_20TfLiteNode_20const__2c_20TfLitePoolParams_20const__2c_20tflite__ops__micro__pooling___28anonymous_20namespace_29__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 176 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 172 >> 2] = $0;
 HEAP32[$6 + 168 >> 2] = $1;
 HEAP32[$6 + 164 >> 2] = $2;
 HEAP32[$6 + 160 >> 2] = $3;
 HEAP32[$6 + 156 >> 2] = $4;
 HEAP32[$6 + 152 >> 2] = $5;
 HEAP32[$6 + 116 >> 2] = HEAP32[HEAP32[$6 + 164 >> 2] + 8 >> 2];
 HEAP32[$6 + 120 >> 2] = HEAP32[HEAP32[$6 + 164 >> 2] + 4 >> 2];
 HEAP32[$6 + 124 >> 2] = HEAP32[HEAP32[$6 + 164 >> 2] + 16 >> 2];
 HEAP32[$6 + 128 >> 2] = HEAP32[HEAP32[$6 + 164 >> 2] + 12 >> 2];
 HEAP16[$6 + 108 >> 1] = HEAP32[HEAP32[$6 + 160 >> 2] + 4 >> 2];
 HEAP16[$6 + 106 >> 1] = HEAP32[HEAP32[$6 + 160 >> 2] >> 2];
 HEAP32[$6 + 132 >> 2] = HEAP32[HEAP32[$6 + 160 >> 2] + 16 >> 2];
 HEAP32[$6 + 136 >> 2] = HEAP32[HEAP32[$6 + 160 >> 2] + 20 >> 2];
 label$2: {
  if (HEAP32[HEAP32[$6 + 156 >> 2] + 8 >> 2] == 3) {
   tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($6 + 80 | 0, HEAP32[$6 + 156 >> 2]);
   $0 = unsigned_20char_20const__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor_20const__29(HEAP32[$6 + 156 >> 2]);
   tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($6 + 56 | 0, HEAP32[$6 + 152 >> 2]);
   tflite__reference_ops__AveragePool_28tflite__PoolParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($6 + 104 | 0, $6 + 80 | 0, $0, $6 + 56 | 0, unsigned_20char__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor__29(HEAP32[$6 + 152 >> 2]));
   tflite__RuntimeShape___RuntimeShape_28_29($6 + 56 | 0);
   tflite__RuntimeShape___RuntimeShape_28_29($6 + 80 | 0);
   break label$2;
  }
  tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($6 + 32 | 0, HEAP32[$6 + 156 >> 2]);
  $0 = signed_20char_20const__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor_20const__29(HEAP32[$6 + 156 >> 2]);
  tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($6 + 8 | 0, HEAP32[$6 + 152 >> 2]);
  tflite__reference_integer_ops__AveragePool_28tflite__PoolParams_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($6 + 104 | 0, $6 + 32 | 0, $0, $6 + 8 | 0, signed_20char__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor__29(HEAP32[$6 + 152 >> 2]));
  tflite__RuntimeShape___RuntimeShape_28_29($6 + 8 | 0);
  tflite__RuntimeShape___RuntimeShape_28_29($6 + 32 | 0);
 }
 __stack_pointer = $6 + 176 | 0;
}

function tflite__reference_ops__Softmax_28tflite__SoftmaxParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = Math_fround(0);
 $5 = __stack_pointer + -64 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 60 >> 2] = $0;
 HEAP32[$5 + 56 >> 2] = $1;
 HEAP32[$5 + 52 >> 2] = $2;
 HEAP32[$5 + 48 >> 2] = $3;
 HEAP32[$5 + 44 >> 2] = $4;
 HEAP32[$5 + 40 >> 2] = tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$5 + 56 >> 2]) - 1;
 HEAP32[$5 + 36 >> 2] = tflite__MatchingFlatSizeSkipDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__29(HEAP32[$5 + 56 >> 2], HEAP32[$5 + 40 >> 2], HEAP32[$5 + 48 >> 2]);
 HEAP32[$5 + 32 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 56 >> 2], HEAP32[$5 + 40 >> 2], HEAP32[$5 + 48 >> 2], HEAP32[$5 + 40 >> 2]);
 HEAP32[$5 + 28 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 28 >> 2] < HEAP32[$5 + 36 >> 2]) {
   HEAPF32[$5 + 24 >> 2] = std____2__numeric_limits_float___lowest_28_29();
   HEAP32[$5 + 20 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 20 >> 2] < HEAP32[$5 + 32 >> 2]) {
     HEAPF32[$5 + 24 >> 2] = HEAPF32[float_20const__20std____2__max_float__28float_20const__2c_20float_20const__29($5 + 24 | 0, HEAP32[$5 + 52 >> 2] + (HEAP32[$5 + 20 >> 2] + Math_imul(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 32 >> 2]) << 2) | 0) >> 2];
     HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 20 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAPF32[$5 + 16 >> 2] = 0;
   HEAP32[$5 + 12 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 12 >> 2] < HEAP32[$5 + 32 >> 2]) {
     $6 = exp_28float_29(Math_fround(Math_fround(HEAPF32[HEAP32[$5 + 52 >> 2] + (HEAP32[$5 + 12 >> 2] + Math_imul(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 32 >> 2]) << 2) >> 2] - HEAPF32[$5 + 24 >> 2]) * Math_fround(HEAPF64[HEAP32[$5 + 60 >> 2] >> 3])));
     HEAPF32[$5 + 16 >> 2] = HEAPF32[$5 + 16 >> 2] + $6;
     HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 12 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 8 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 8 >> 2] < HEAP32[$5 + 32 >> 2]) {
     $6 = exp_28float_29(Math_fround(Math_fround(HEAPF32[HEAP32[$5 + 52 >> 2] + (HEAP32[$5 + 8 >> 2] + Math_imul(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 32 >> 2]) << 2) >> 2] - HEAPF32[$5 + 24 >> 2]) * Math_fround(HEAPF64[HEAP32[$5 + 60 >> 2] >> 3])));
     HEAPF32[HEAP32[$5 + 44 >> 2] + (HEAP32[$5 + 8 >> 2] + Math_imul(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 32 >> 2]) << 2) >> 2] = $6 / HEAPF32[$5 + 16 >> 2];
     HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 8 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 28 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $5 - -64 | 0;
}

function tflite__ops__micro__pooling___28anonymous_20namespace_29__MaxEvalQuantized_28TfLiteContext__2c_20TfLiteNode__2c_20TfLitePoolParams__2c_20tflite__ops__micro__pooling___28anonymous_20namespace_29__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 176 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 172 >> 2] = $0;
 HEAP32[$6 + 168 >> 2] = $1;
 HEAP32[$6 + 164 >> 2] = $2;
 HEAP32[$6 + 160 >> 2] = $3;
 HEAP32[$6 + 156 >> 2] = $4;
 HEAP32[$6 + 152 >> 2] = $5;
 HEAP32[$6 + 116 >> 2] = HEAP32[HEAP32[$6 + 164 >> 2] + 8 >> 2];
 HEAP32[$6 + 120 >> 2] = HEAP32[HEAP32[$6 + 164 >> 2] + 4 >> 2];
 HEAP32[$6 + 124 >> 2] = HEAP32[HEAP32[$6 + 164 >> 2] + 16 >> 2];
 HEAP32[$6 + 128 >> 2] = HEAP32[HEAP32[$6 + 164 >> 2] + 12 >> 2];
 HEAP16[$6 + 108 >> 1] = HEAP32[HEAP32[$6 + 160 >> 2] + 4 >> 2];
 HEAP16[$6 + 106 >> 1] = HEAP32[HEAP32[$6 + 160 >> 2] >> 2];
 HEAP32[$6 + 132 >> 2] = HEAP32[HEAP32[$6 + 160 >> 2] + 16 >> 2];
 HEAP32[$6 + 136 >> 2] = HEAP32[HEAP32[$6 + 160 >> 2] + 20 >> 2];
 label$1: {
  if (HEAP32[HEAP32[$6 + 156 >> 2] + 8 >> 2] == 3) {
   tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($6 + 80 | 0, HEAP32[$6 + 156 >> 2]);
   $0 = unsigned_20char_20const__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor_20const__29(HEAP32[$6 + 156 >> 2]);
   tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($6 + 56 | 0, HEAP32[$6 + 152 >> 2]);
   tflite__reference_ops__MaxPool_28tflite__PoolParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($6 + 104 | 0, $6 + 80 | 0, $0, $6 + 56 | 0, unsigned_20char__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor__29(HEAP32[$6 + 152 >> 2]));
   tflite__RuntimeShape___RuntimeShape_28_29($6 + 56 | 0);
   tflite__RuntimeShape___RuntimeShape_28_29($6 + 80 | 0);
   break label$1;
  }
  tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($6 + 32 | 0, HEAP32[$6 + 156 >> 2]);
  $0 = signed_20char_20const__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor_20const__29(HEAP32[$6 + 156 >> 2]);
  tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($6 + 8 | 0, HEAP32[$6 + 152 >> 2]);
  tflite__reference_integer_ops__MaxPool_28tflite__PoolParams_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($6 + 104 | 0, $6 + 32 | 0, $0, $6 + 8 | 0, signed_20char__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor__29(HEAP32[$6 + 152 >> 2]));
  tflite__RuntimeShape___RuntimeShape_28_29($6 + 8 | 0);
  tflite__RuntimeShape___RuntimeShape_28_29($6 + 32 | 0);
 }
 __stack_pointer = $6 + 176 | 0;
}

function stringToIntWithRadix($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $4 = __stack_pointer + -64 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 52 >> 2] = $0;
 HEAP32[$4 + 48 >> 2] = $1;
 HEAP32[$4 + 44 >> 2] = $2;
 HEAP32[$4 + 40 >> 2] = $3;
 while (1) {
  if (isWhitespace(HEAP8[HEAP32[$4 + 52 >> 2]]) & 1) {
   HEAP32[$4 + 52 >> 2] = HEAP32[$4 + 52 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP8[$4 + 39 | 0] = 0;
 HEAP32[$4 + 24 >> 2] = 0;
 HEAP32[$4 + 28 >> 2] = 0;
 label$3: {
  if (HEAP8[HEAP32[$4 + 52 >> 2]] == 45) {
   HEAP8[$4 + 39 | 0] = 1;
   HEAP32[$4 + 52 >> 2] = HEAP32[$4 + 52 >> 2] + 1;
   break label$3;
  }
  if (HEAP8[HEAP32[$4 + 52 >> 2]] == 43) {
   HEAP32[$4 + 52 >> 2] = HEAP32[$4 + 52 >> 2] + 1;
  }
 }
 HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 52 >> 2];
 if (HEAP32[$4 + 40 >> 2]) {
  HEAP32[HEAP32[$4 + 40 >> 2] >> 2] = HEAP32[$4 + 52 >> 2];
 }
 if (HEAP32[$4 + 48 >> 2]) {
  $0 = HEAP32[$4 + 48 >> 2];
 } else {
  $0 = getRadix($4 + 52 | 0);
 }
 HEAP32[$4 + 16 >> 2] = $0;
 label$9: {
  if (!HEAP32[$4 + 16 >> 2]) {
   HEAP32[$4 + 56 >> 2] = 0;
   HEAP32[$4 + 60 >> 2] = 0;
   break label$9;
  }
  while (1) {
   label$12: {
    if (!HEAPU8[HEAP32[$4 + 52 >> 2]]) {
     break label$12;
    }
    HEAP32[$4 + 12 >> 2] = chtod(HEAP8[HEAP32[$4 + 52 >> 2]]);
    if (HEAP32[$4 + 12 >> 2] < 0 | HEAP32[$4 + 12 >> 2] >= HEAP32[$4 + 16 >> 2]) {
     break label$12;
    }
    $1 = HEAP32[$4 + 12 >> 2];
    $0 = $1 >> 31;
    $6 = $1;
    $2 = $0;
    $0 = HEAP32[$4 + 24 >> 2];
    $7 = $0;
    $1 = HEAP32[$4 + 28 >> 2];
    $3 = $1;
    $1 = HEAP32[$4 + 16 >> 2];
    $0 = $1 >> 31;
    $5 = $0;
    $0 = $3;
    $3 = $1;
    $1 = $5;
    $1 = __wasm_i64_mul($7, $0, $3, $1);
    $3 = $1;
    $5 = $1 + $6 | 0;
    $0 = i64toi32_i32$HIGH_BITS;
    $1 = $0;
    $0 = $2;
    $0 = $1 + $0 | 0;
    HEAP32[$4 + 24 >> 2] = $5;
    $0 = $5 >>> 0 < $3 >>> 0 ? $0 + 1 | 0 : $0;
    HEAP32[$4 + 28 >> 2] = $0;
    HEAP32[$4 + 52 >> 2] = HEAP32[$4 + 52 >> 2] + 1;
    continue;
   }
   break;
  }
  if (HEAP32[$4 + 44 >> 2]) {
   HEAP8[HEAP32[$4 + 44 >> 2]] = HEAP32[$4 + 52 >> 2] == HEAP32[$4 + 20 >> 2];
  }
  if (HEAP32[$4 + 40 >> 2]) {
   HEAP32[HEAP32[$4 + 40 >> 2] >> 2] = HEAP32[$4 + 52 >> 2];
  }
  if (HEAP8[$4 + 39 | 0] & 1) {
   $2 = HEAP32[$4 + 28 >> 2];
   $0 = HEAP32[$4 + 24 >> 2];
   $3 = $0;
   $1 = 0 - $0 | 0;
   HEAP32[$4 + 56 >> 2] = $1;
   $0 = $2;
   $5 = $0 + (($3 | 0) != 0) | 0;
   $5 = 0 - $5 | 0;
   HEAP32[$4 + 60 >> 2] = $5;
   break label$9;
  }
  $0 = HEAP32[$4 + 28 >> 2];
  $5 = HEAP32[$4 + 24 >> 2];
  HEAP32[$4 + 56 >> 2] = $5;
  HEAP32[$4 + 60 >> 2] = $0;
 }
 __stack_pointer = $4 - -64 | 0;
 $5 = HEAP32[$4 + 60 >> 2];
 i64toi32_i32$HIGH_BITS = $5;
 $0 = HEAP32[$4 + 56 >> 2];
 return $0;
}

function jswrap_require($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 256 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 248 >> 2] = $0;
 label$1: {
  if (!(jsvIsString(HEAP32[$1 + 248 >> 2]) & 1)) {
   HEAP32[$1 + 48 >> 2] = HEAP32[$1 + 248 >> 2];
   jsExceptionHere(3, 99006, $1 + 48 | 0);
   HEAP32[$1 + 252 >> 2] = 0;
   break label$1;
  }
  if (jsvGetString(HEAP32[$1 + 248 >> 2], $1 + 112 | 0, 128) >>> 0 >= 128) {
   jsExceptionHere(3, 126036, 0);
   HEAP32[$1 + 252 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 108 >> 2] = jswrap_modules_getModuleList();
  if (!HEAP32[$1 + 108 >> 2]) {
   HEAP32[$1 + 252 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 104 >> 2] = jsvSkipNameAndUnLock(jsvFindChildFromString(HEAP32[$1 + 108 >> 2], $1 + 112 | 0));
  jsvUnLock(HEAP32[$1 + 108 >> 2]);
  if (HEAP32[$1 + 104 >> 2]) {
   HEAP32[$1 + 252 >> 2] = HEAP32[$1 + 104 >> 2];
   break label$1;
  }
  HEAP32[$1 + 100 >> 2] = jswGetBuiltInLibrary($1 + 112 | 0);
  if (HEAP32[$1 + 100 >> 2]) {
   HEAP32[$1 + 104 >> 2] = jsvNewNativeFunction(HEAP32[$1 + 100 >> 2], 0);
  }
  label$7: {
   if (HEAP32[$1 + 104 >> 2]) {
    break label$7;
   }
   if (strlen($1 + 112 | 0) >>> 0 > 28) {
    break label$7;
   }
   jsfNameFromString($1 + 72 | 0, $1 + 112 | 0);
   HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 96 >> 2];
   $2 = HEAP32[$1 + 92 >> 2];
   $0 = HEAP32[$1 + 88 >> 2];
   HEAP32[$1 + 32 >> 2] = $0;
   HEAP32[$1 + 36 >> 2] = $2;
   $0 = HEAP32[$1 + 84 >> 2];
   $2 = HEAP32[$1 + 80 >> 2];
   HEAP32[$1 + 24 >> 2] = $2;
   HEAP32[$1 + 28 >> 2] = $0;
   $2 = HEAP32[$1 + 76 >> 2];
   $0 = HEAP32[$1 + 72 >> 2];
   HEAP32[$1 + 16 >> 2] = $0;
   HEAP32[$1 + 20 >> 2] = $2;
   HEAP32[$1 + 68 >> 2] = jsfReadFile($1 + 16 | 0, 0, 0);
   if (HEAP32[$1 + 68 >> 2]) {
    HEAP32[$1 + 104 >> 2] = jspEvaluateModule(HEAP32[$1 + 68 >> 2]);
    jsvUnLock(HEAP32[$1 + 68 >> 2]);
   }
  }
  if (!HEAP32[$1 + 104 >> 2]) {
   HEAP32[$1 + 64 >> 2] = jswGetBuiltInJSLibrary($1 + 112 | 0);
   if (HEAP32[$1 + 64 >> 2]) {
    HEAP32[$1 + 60 >> 2] = jsvNewNativeString(HEAP32[$1 + 64 >> 2], strlen(HEAP32[$1 + 64 >> 2]));
    if (HEAP32[$1 + 60 >> 2]) {
     HEAP32[$1 + 104 >> 2] = jspEvaluateModule(HEAP32[$1 + 60 >> 2]);
     jsvUnLock(HEAP32[$1 + 60 >> 2]);
    }
   }
  }
  label$12: {
   if (HEAP32[$1 + 104 >> 2]) {
    HEAP32[$1 + 56 >> 2] = jswrap_modules_getModuleList();
    if (HEAP32[$1 + 56 >> 2]) {
     jsvObjectSetChild(HEAP32[$1 + 56 >> 2], $1 + 112 | 0, HEAP32[$1 + 104 >> 2]);
    }
    jsvUnLock(HEAP32[$1 + 56 >> 2]);
    break label$12;
   }
   HEAP32[$1 >> 2] = HEAP32[$1 + 248 >> 2];
   jsExceptionHere(1, 105822, $1);
  }
  HEAP32[$1 + 252 >> 2] = HEAP32[$1 + 104 >> 2];
 }
 __stack_pointer = $1 + 256 | 0;
 return HEAP32[$1 + 252 >> 2];
}

function jspGetVarNamedField($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 112 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 104 >> 2] = $0;
 HEAP32[$3 + 100 >> 2] = $1;
 HEAP8[$3 + 99 | 0] = $2;
 HEAP32[$3 + 92 >> 2] = 0;
 if (jsvHasChildren(HEAP32[$3 + 104 >> 2]) & 1) {
  HEAP32[$3 + 92 >> 2] = jsvFindChildFromVar(HEAP32[$3 + 104 >> 2], HEAP32[$3 + 100 >> 2], 0);
 }
 label$2: {
  if (!HEAP32[$3 + 92 >> 2]) {
   label$4: {
    label$5: {
     if (!(jsvIsArrayBuffer(HEAP32[$3 + 104 >> 2]) & 1)) {
      break label$5;
     }
     if (!(jsvIsInt(HEAP32[$3 + 100 >> 2]) & 1)) {
      break label$5;
     }
     HEAP32[$3 + 92 >> 2] = jsvMakeIntoVariableName(jsvNewFromInteger(jsvGetInteger(HEAP32[$3 + 100 >> 2])), HEAP32[$3 + 104 >> 2]);
     if (HEAP32[$3 + 92 >> 2]) {
      $0 = HEAP32[$3 + 92 >> 2];
      $1 = HEAP32[$3 + 92 >> 2];
      $1 = (HEAPU8[$1 + 11 | 0] | HEAPU8[$1 + 12 | 0] << 8) & -64 | 14;
      HEAP8[$0 + 11 | 0] = $1;
      HEAP8[$0 + 12 | 0] = $1 >>> 8;
     }
     break label$4;
    }
    label$7: {
     label$8: {
      if (!(jsvIsString(HEAP32[$3 + 104 >> 2]) & 1)) {
       break label$8;
      }
      if (!(jsvIsInt(HEAP32[$3 + 100 >> 2]) & 1)) {
       break label$8;
      }
      HEAP32[$3 + 88 >> 2] = jsvGetInteger(HEAP32[$3 + 100 >> 2]);
      label$9: {
       if (HEAP32[$3 + 88 >> 2] < 0) {
        break label$9;
       }
       if (HEAP32[$3 + 88 >> 2] >= (jsvGetStringLength(HEAP32[$3 + 104 >> 2]) | 0)) {
        break label$9;
       }
       HEAP32[$3 + 108 >> 2] = jswrap_string_charAt_undefined(HEAP32[$3 + 104 >> 2], HEAP32[$3 + 88 >> 2]);
       break label$2;
      }
      if (HEAP8[$3 + 99 | 0] & 1) {
       HEAP32[$3 + 92 >> 2] = jsvCreateNewChild(HEAP32[$3 + 104 >> 2], HEAP32[$3 + 100 >> 2], 0);
      }
      break label$7;
     }
     jsvGetString(HEAP32[$3 + 100 >> 2], $3 + 16 | 0, 64);
     HEAP32[$3 + 92 >> 2] = jspGetNamedFieldInParents(HEAP32[$3 + 104 >> 2], $3 + 16 | 0, HEAP8[$3 + 99 | 0] & 1);
     label$11: {
      if (HEAP32[$3 + 92 >> 2]) {
       break label$11;
      }
      if (!(jsvIsFunction(HEAP32[$3 + 104 >> 2]) & 1)) {
       break label$11;
      }
      if (!(jsvIsStringEqual(HEAP32[$3 + 100 >> 2], 104794) & 1)) {
       break label$11;
      }
      HEAP32[$3 + 12 >> 2] = jsvNewObject();
      HEAP32[$3 + 92 >> 2] = jsvAddNamedChild(HEAP32[$3 + 104 >> 2], HEAP32[$3 + 12 >> 2], 104794);
      jsvUnLock(HEAP32[$3 + 12 >> 2]);
     }
    }
   }
  }
  if (HEAP8[$3 + 99 | 0] & 1) {
   HEAP32[$3 + 108 >> 2] = HEAP32[$3 + 92 >> 2];
   break label$2;
  }
  HEAP32[$3 + 108 >> 2] = jsvSkipNameAndUnLock(HEAP32[$3 + 92 >> 2]);
 }
 __stack_pointer = $3 + 112 | 0;
 return HEAP32[$3 + 108 >> 2];
}

function jswrap_espruino_nativeCall($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 176 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 168 >> 2] = $0;
 HEAP32[$3 + 164 >> 2] = $1;
 HEAP32[$3 + 160 >> 2] = $2;
 HEAP32[$3 + 156 >> 2] = 0;
 label$1: {
  if (!(jsvIsUndefined(HEAP32[$3 + 164 >> 2]) & 1)) {
   label$3: {
    if (jsvIsString(HEAP32[$3 + 164 >> 2]) & 1) {
     HEAP32[$3 + 28 >> 2] = jslSetLex($3 + 32 | 0);
     jslInit(HEAP32[$3 + 164 >> 2]);
     HEAP8[$3 + 23 | 0] = 1;
     HEAP32[$3 + 16 >> 2] = 0;
     HEAP32[$3 + 24 >> 2] = nativeCallGetCType();
     label$5: {
      if (HEAP32[$3 + 24 >> 2] >= 0) {
       $1 = HEAP32[$3 + 24 >> 2];
       $0 = HEAP32[$3 + 16 >> 2];
       HEAP32[$3 + 16 >> 2] = $0 + 1;
       HEAP32[$3 + 156 >> 2] = HEAP32[$3 + 156 >> 2] | $1 << Math_imul($0, 3);
       break label$5;
      }
      HEAP8[$3 + 23 | 0] = 0;
     }
     if (HEAP8[$3 + 23 | 0] & 1) {
      HEAP8[$3 + 23 | 0] = jslMatch(40) & 1;
     }
     while (1) {
      $0 = 0;
      label$9: {
       if (!(HEAP8[$3 + 23 | 0] & 1)) {
        break label$9;
       }
       $0 = 0;
       if (!HEAP16[$3 + 34 >> 1]) {
        break label$9;
       }
       $0 = HEAP16[$3 + 34 >> 1] != 41;
      }
      if ($0) {
       HEAP32[$3 + 24 >> 2] = nativeCallGetCType();
       label$11: {
        if (HEAP32[$3 + 24 >> 2] >= 0) {
         $1 = HEAP32[$3 + 24 >> 2];
         $0 = HEAP32[$3 + 16 >> 2];
         HEAP32[$3 + 16 >> 2] = $0 + 1;
         HEAP32[$3 + 156 >> 2] = HEAP32[$3 + 156 >> 2] | $1 << Math_imul($0, 3);
         if (HEAP16[$3 + 34 >> 1] != 41) {
          HEAP8[$3 + 23 | 0] = jslMatch(44) & 1;
         }
         break label$11;
        }
        HEAP8[$3 + 23 | 0] = 0;
       }
       continue;
      }
      break;
     }
     if (HEAP8[$3 + 23 | 0] & 1) {
      HEAP8[$3 + 23 | 0] = jslMatch(41) & 1;
     }
     jslKill();
     jslSetLex(HEAP32[$3 + 28 >> 2]);
     if (HEAP32[$3 + 156 >> 2] & -65536) {
      HEAP8[$3 + 23 | 0] = 0;
     }
     if (!(HEAP8[$3 + 23 | 0] & 1)) {
      HEAP32[$3 >> 2] = HEAP32[$3 + 16 >> 2];
      jsExceptionHere(1, 107404, $3);
      HEAP32[$3 + 172 >> 2] = 0;
      break label$1;
     }
     break label$3;
    }
    jsExceptionHere(1, 104762, 0);
    HEAP32[$3 + 172 >> 2] = 0;
    break label$1;
   }
  }
  HEAP32[$3 + 12 >> 2] = jsvNewNativeFunction(HEAP32[$3 + 168 >> 2], HEAP32[$3 + 156 >> 2] & 65535);
  if (HEAP32[$3 + 160 >> 2]) {
   HEAP32[$3 + 8 >> 2] = jsvAsFlatString(HEAP32[$3 + 160 >> 2]);
   jsvAddNamedChildAndUnLock(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], 105817);
  }
  HEAP32[$3 + 172 >> 2] = HEAP32[$3 + 12 >> 2];
 }
 __stack_pointer = $3 + 176 | 0;
 return HEAP32[$3 + 172 >> 2];
}

function jsiDumpObjectState($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer + -64 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 60 >> 2] = $0;
 HEAP32[$4 + 56 >> 2] = $1;
 HEAP32[$4 + 52 >> 2] = $2;
 HEAP32[$4 + 48 >> 2] = $3;
 HEAP32[$4 + 44 >> 2] = jsvGetInternalFunctionCheckerFor(HEAP32[$4 + 48 >> 2]);
 jsvObjectIteratorNew($4 + 40 | 0, HEAP32[$4 + 48 >> 2]);
 while (1) {
  if (jsvObjectIteratorHasValue_3($4 + 40 | 0) & 1) {
   HEAP32[$4 + 36 >> 2] = jsvObjectIteratorGetKey_3($4 + 40 | 0);
   HEAP32[$4 + 32 >> 2] = jsvObjectIteratorGetValue_3($4 + 40 | 0);
   label$3: {
    if (HEAP32[$4 + 44 >> 2]) {
     if (FUNCTION_TABLE[HEAP32[$4 + 44 >> 2]](HEAP32[$4 + 36 >> 2]) & 1) {
      break label$3;
     }
    }
    label$5: {
     if (jsvIsStringEqual(HEAP32[$4 + 36 >> 2], 104794) & 1) {
      HEAP32[$4 + 28 >> 2] = jsvNewFromStringVarComplete(HEAP32[$4 + 52 >> 2]);
      if (HEAP32[$4 + 28 >> 2]) {
       jsvAppendString(HEAP32[$4 + 28 >> 2], 104793);
       jsiDumpObjectState(HEAP32[$4 + 60 >> 2], HEAP32[$4 + 56 >> 2], HEAP32[$4 + 28 >> 2], HEAP32[$4 + 32 >> 2]);
       jsvUnLock(HEAP32[$4 + 28 >> 2]);
      }
      break label$5;
     }
     label$8: {
      if (jsvIsStringEqualOrStartsWith(HEAP32[$4 + 36 >> 2], 102470, 1) & 1) {
       if (jsvIsArray(HEAP32[$4 + 32 >> 2]) & 1) {
        jsvObjectIteratorNew($4 + 24 | 0, HEAP32[$4 + 32 >> 2]);
        while (1) {
         if (jsvObjectIteratorHasValue_3($4 + 24 | 0) & 1) {
          HEAP32[$4 + 20 >> 2] = jsvObjectIteratorGetValue_3($4 + 24 | 0);
          jsiDumpEvent(HEAP32[$4 + 60 >> 2], HEAP32[$4 + 56 >> 2], HEAP32[$4 + 52 >> 2], HEAP32[$4 + 36 >> 2], HEAP32[$4 + 20 >> 2]);
          jsvUnLock(HEAP32[$4 + 20 >> 2]);
          jsvObjectIteratorNext($4 + 24 | 0);
          continue;
         }
         break;
        }
        jsvObjectIteratorFree_3($4 + 24 | 0);
        break label$8;
       }
       jsiDumpEvent(HEAP32[$4 + 60 >> 2], HEAP32[$4 + 56 >> 2], HEAP32[$4 + 52 >> 2], HEAP32[$4 + 36 >> 2], HEAP32[$4 + 32 >> 2]);
       break label$8;
      }
      if (!(jsvIsNativeFunction(HEAP32[$4 + 32 >> 2]) & 1)) {
       $0 = HEAP32[$4 + 60 >> 2];
       $1 = HEAP32[$4 + 56 >> 2];
       $2 = HEAP32[$4 + 52 >> 2];
       HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 36 >> 2];
       HEAP32[$4 >> 2] = $2;
       cbprintf($0, $1, 127668, $4);
       jsiDumpJSON(HEAP32[$4 + 60 >> 2], HEAP32[$4 + 56 >> 2], HEAP32[$4 + 32 >> 2], 0);
       FUNCTION_TABLE[HEAP32[$4 + 60 >> 2]](128775, HEAP32[$4 + 56 >> 2]);
      }
     }
    }
   }
   jsvUnLock2(HEAP32[$4 + 32 >> 2], HEAP32[$4 + 36 >> 2]);
   jsvObjectIteratorNext($4 + 40 | 0);
   continue;
  }
  break;
 }
 jsvObjectIteratorFree_3($4 + 40 | 0);
 __stack_pointer = $4 - -64 | 0;
}

function jsserialEventCallbackIdle() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $0 = __stack_pointer + -64 | 0;
 __stack_pointer = $0;
 HEAP8[$0 + 62 | 0] = 0;
 HEAP32[$0 + 56 >> 2] = jsserialGetSerialList(0);
 label$1: {
  if (!HEAP32[$0 + 56 >> 2]) {
   HEAP8[$0 + 63 | 0] = 0;
   break label$1;
  }
  jsvObjectIteratorNew($0 + 48 | 0, HEAP32[$0 + 56 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_4($0 + 48 | 0) & 1) {
    HEAP32[$0 + 44 >> 2] = jsvObjectIteratorGetValue_4($0 + 48 | 0);
    HEAP32[$0 + 40 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 44 >> 2], 107897);
    HEAP32[$0 + 36 >> 2] = jsvGetFlatStringPointer(HEAP32[$0 + 40 >> 2]);
    if (HEAP32[$0 + 36 >> 2]) {
     if (HEAPU8[HEAP32[$0 + 36 >> 2] + 88 | 0]) {
      HEAP32[$0 + 24 >> 2] = jshGetSystemTime();
      HEAP32[$0 + 28 >> 2] = i64toi32_i32$HIGH_BITS;
      $5 = HEAP32[$0 + 28 >> 2];
      $2 = HEAP32[$0 + 36 >> 2];
      $3 = HEAP32[$2 + 72 >> 2];
      $1 = HEAP32[$2 + 76 >> 2];
      $2 = HEAP32[$0 + 24 >> 2];
      $1 = $1 + ($3 >>> 0 > $2 >>> 0) | 0;
      HEAP32[$0 + 16 >> 2] = $2 - $3;
      $1 = $5 - $1 | 0;
      HEAP32[$0 + 20 >> 2] = $1;
      $1 = HEAP32[$0 + 16 >> 2];
      $2 = HEAP32[$0 + 20 >> 2];
      $4 = jshGetMillisecondsFromTime($1, $2) * +HEAP32[HEAP32[$0 + 36 >> 2] + 80 >> 2] / 1e3 + .5;
      label$7: {
       if (Math_abs($4) < 2147483648) {
        $1 = ~~$4;
        break label$7;
       }
       $1 = -2147483648;
      }
      HEAP32[$0 + 12 >> 2] = $1;
      label$9: {
       if (HEAP32[$0 + 12 >> 2] > 10) {
        $1 = HEAP32[$0 + 36 >> 2];
        HEAP32[$1 + 84 >> 2] = HEAP32[$1 + 84 >> 2] | (1 << HEAP32[$0 + 12 >> 2]) - 1 << HEAPU8[HEAP32[$0 + 36 >> 2] + 88 | 0];
        $1 = HEAP32[$0 + 36 >> 2];
        HEAP8[$1 + 88 | 0] = HEAP32[$0 + 12 >> 2] + HEAPU8[$1 + 88 | 0];
        jsserialCheckForCharacter(HEAP32[$0 + 36 >> 2]);
        HEAP8[HEAP32[$0 + 36 >> 2] + 88 | 0] = 0;
        break label$9;
       }
       HEAP8[$0 + 62 | 0] = 1;
      }
     }
     if (HEAPU8[HEAP32[$0 + 36 >> 2] + 64 | 0]) {
      HEAP32[$0 + 8 >> 2] = jsvNewStringOfLength(HEAPU8[HEAP32[$0 + 36 >> 2] + 64 | 0], HEAP32[$0 + 36 >> 2]);
      HEAP8[HEAP32[$0 + 36 >> 2] + 64 | 0] = 0;
      if (HEAP32[$0 + 8 >> 2]) {
       jswrap_stream_pushData(HEAP32[$0 + 44 >> 2], HEAP32[$0 + 8 >> 2], 1);
       jsvUnLock(HEAP32[$0 + 8 >> 2]);
      }
     }
    }
    jsvUnLock2(HEAP32[$0 + 40 >> 2], HEAP32[$0 + 44 >> 2]);
    jsvObjectIteratorNext($0 + 48 | 0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree_4($0 + 48 | 0);
  jsvUnLock(HEAP32[$0 + 56 >> 2]);
  HEAP8[$0 + 63 | 0] = HEAP8[$0 + 62 | 0] & 1;
 }
 __stack_pointer = $0 - -64 | 0;
 return HEAP8[$0 + 63 | 0] & 1;
}

function jswrap_string_match($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 label$1: {
  if (!(jsvIsString(HEAP32[$2 + 40 >> 2]) & 1)) {
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  if (jsvIsUndefined(HEAP32[$2 + 36 >> 2]) & 1) {
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  if (jsvIsInstanceOf(HEAP32[$2 + 36 >> 2], 101806) & 1) {
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 36 >> 2], 96707, jsvNewFromInteger(0));
   HEAP32[$2 + 32 >> 2] = jswrap_regexp_exec(HEAP32[$2 + 36 >> 2], HEAP32[$2 + 40 >> 2]);
   if (!(jswrap_regexp_hasFlag(HEAP32[$2 + 36 >> 2], 103) & 1)) {
    HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
    break label$1;
   }
   HEAP32[$2 + 28 >> 2] = jsvNewEmptyArray();
   if (!HEAP32[$2 + 28 >> 2]) {
    HEAP32[$2 + 44 >> 2] = 0;
    break label$1;
   }
   while (1) {
    $0 = 0;
    if (HEAP32[$2 + 32 >> 2]) {
     $0 = jsvIsNull(HEAP32[$2 + 32 >> 2]) ^ -1;
    }
    if ($0 & 1) {
     HEAP32[$2 + 24 >> 2] = jsvGetArrayItem(HEAP32[$2 + 32 >> 2], 0);
     HEAP32[$2 + 20 >> 2] = jsvObjectGetIntegerChild(HEAP32[$2 + 32 >> 2], 96701);
     HEAP32[$2 + 16 >> 2] = jsvGetStringLength(HEAP32[$2 + 24 >> 2]);
     HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 20 >> 2] + HEAP32[$2 + 16 >> 2];
     jsvArrayPushAndUnLock(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 24 >> 2]);
     jsvUnLock(HEAP32[$2 + 32 >> 2]);
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 36 >> 2], 96707, jsvNewFromInteger(HEAP32[$2 + 12 >> 2] + !HEAP32[$2 + 16 >> 2] | 0));
     HEAP32[$2 + 32 >> 2] = jswrap_regexp_exec(HEAP32[$2 + 36 >> 2], HEAP32[$2 + 40 >> 2]);
     continue;
    }
    break;
   }
   jsvUnLock(HEAP32[$2 + 32 >> 2]);
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 36 >> 2], 96707, jsvNewFromInteger(0));
   HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 28 >> 2];
   break label$1;
  }
  HEAP32[$2 + 36 >> 2] = jsvAsString(HEAP32[$2 + 36 >> 2]);
  HEAP32[$2 + 8 >> 2] = jswrap_string_indexOf(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], 0, 0);
  if (HEAP32[$2 + 8 >> 2] >= 0) {
   HEAP32[$2 + 4 >> 2] = jsvNewEmptyArray();
   if (!HEAP32[$2 + 4 >> 2]) {
    jsvUnLock(HEAP32[$2 + 36 >> 2]);
    HEAP32[$2 + 44 >> 2] = 0;
    break label$1;
   }
   jsvArrayPush(HEAP32[$2 + 4 >> 2], HEAP32[$2 + 36 >> 2]);
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 4 >> 2], 96701, jsvNewFromInteger(HEAP32[$2 + 8 >> 2]));
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 4 >> 2], 97377, HEAP32[$2 + 36 >> 2]);
   HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 4 >> 2];
   break label$1;
  }
  jsvUnLock(HEAP32[$2 + 36 >> 2]);
  HEAP32[$2 + 44 >> 2] = jsvNewNull();
 }
 __stack_pointer = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}

function jsfLoadBootCodeFromFlash($0) {
 var $1 = 0, $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 $1 = __stack_pointer - 160 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 158 | 0] = $0;
 if (!(wasm2js_i32$0 = jshPinGetValue(24) & 1, wasm2js_i32$1 = 1, wasm2js_i32$2 = HEAPU16[93524] & 4096, 
 wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1)) {
  jsfNameFromString($1 + 120 | 0, 102548);
  HEAP32[$1 + 64 >> 2] = HEAP32[$1 + 144 >> 2];
  $2 = HEAP32[$1 + 140 >> 2];
  $0 = HEAP32[$1 + 136 >> 2];
  HEAP32[$1 + 56 >> 2] = $0;
  HEAP32[$1 + 60 >> 2] = $2;
  $0 = HEAP32[$1 + 132 >> 2];
  $2 = HEAP32[$1 + 128 >> 2];
  HEAP32[$1 + 48 >> 2] = $2;
  HEAP32[$1 + 52 >> 2] = $0;
  $2 = HEAP32[$1 + 124 >> 2];
  $0 = HEAP32[$1 + 120 >> 2];
  HEAP32[$1 + 40 >> 2] = $0;
  HEAP32[$1 + 44 >> 2] = $2;
  HEAP32[$1 + 152 >> 2] = jsfReadFile($1 + 40 | 0, 0, 0);
  if (HEAP32[$1 + 152 >> 2]) {
   jsvUnLock2(jspEvaluateVar(HEAP32[$1 + 152 >> 2], 0, 0), HEAP32[$1 + 152 >> 2]);
  }
 }
 if (!(wasm2js_i32$0 = jshPinGetValue(24) & 1, wasm2js_i32$1 = 0, wasm2js_i32$2 = HEAPU16[93524] & 4096, 
 wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1)) {
  $0 = HEAPU8[108404] | HEAPU8[108405] << 8 | (HEAPU8[108406] << 16 | HEAPU8[108407] << 24);
  HEAP8[$1 + 115 | 0] = $0;
  HEAP8[$1 + 116 | 0] = $0 >>> 8;
  HEAP8[$1 + 117 | 0] = $0 >>> 16;
  HEAP8[$1 + 118 | 0] = $0 >>> 24;
  HEAP32[$1 + 112 >> 2] = HEAPU8[108401] | HEAPU8[108402] << 8 | (HEAPU8[108403] << 16 | HEAPU8[108404] << 24);
  HEAP32[$1 + 108 >> 2] = 0;
  while (1) {
   if (HEAP32[$1 + 108 >> 2] < 4) {
    HEAP8[$1 + 117 | 0] = HEAP32[$1 + 108 >> 2] + 48;
    jsfNameFromString($1 + 72 | 0, $1 + 112 | 0);
    HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 96 >> 2];
    $0 = HEAP32[$1 + 92 >> 2];
    $2 = HEAP32[$1 + 88 >> 2];
    HEAP32[$1 + 24 >> 2] = $2;
    HEAP32[$1 + 28 >> 2] = $0;
    $2 = HEAP32[$1 + 84 >> 2];
    $0 = HEAP32[$1 + 80 >> 2];
    HEAP32[$1 + 16 >> 2] = $0;
    HEAP32[$1 + 20 >> 2] = $2;
    $0 = HEAP32[$1 + 76 >> 2];
    $2 = HEAP32[$1 + 72 >> 2];
    HEAP32[$1 + 8 >> 2] = $2;
    HEAP32[$1 + 12 >> 2] = $0;
    HEAP32[$1 + 104 >> 2] = jsfReadFile($1 + 8 | 0, 0, 0);
    if (HEAP32[$1 + 104 >> 2]) {
     jsvUnLock2(jspEvaluateVar(HEAP32[$1 + 104 >> 2], 0, 0), HEAP32[$1 + 104 >> 2]);
    }
    HEAP32[$1 + 108 >> 2] = HEAP32[$1 + 108 >> 2] + 1;
    continue;
   }
   break;
  }
 }
 HEAP32[$1 + 68 >> 2] = jsfGetBootCodeFromFlash(HEAP8[$1 + 158 | 0] & 1);
 label$9: {
  if (!HEAP32[$1 + 68 >> 2]) {
   HEAP8[$1 + 159 | 0] = 0;
   break label$9;
  }
  jsvUnLock2(jspEvaluateVar(HEAP32[$1 + 68 >> 2], 0, 0), HEAP32[$1 + 68 >> 2]);
  HEAP8[$1 + 159 | 0] = 1;
 }
 __stack_pointer = $1 + 160 | 0;
 return HEAP8[$1 + 159 | 0] & 1;
}

function jsfGetJSONForFunctionWithCallback($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer + -64 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 60 >> 2] = $0;
 HEAP32[$4 + 56 >> 2] = $1;
 HEAP32[$4 + 52 >> 2] = $2;
 HEAP32[$4 + 48 >> 2] = $3;
 HEAP32[$4 + 44 >> 2] = 0;
 jsvObjectIteratorNew($4 + 40 | 0, HEAP32[$4 + 60 >> 2]);
 HEAP8[$4 + 39 | 0] = 1;
 cbprintf(HEAP32[$4 + 52 >> 2], HEAP32[$4 + 48 >> 2], 126687, 0);
 while (1) {
  if (jsvObjectIteratorHasValue_8($4 + 40 | 0) & 1) {
   HEAP32[$4 + 32 >> 2] = jsvObjectIteratorGetKey_5($4 + 40 | 0);
   label$3: {
    if (jsvIsFunctionParameter(HEAP32[$4 + 32 >> 2]) & 1) {
     label$5: {
      if (HEAP8[$4 + 39 | 0] & 1) {
       HEAP8[$4 + 39 | 0] = 0;
       break label$5;
      }
      cbprintf(HEAP32[$4 + 52 >> 2], HEAP32[$4 + 48 >> 2], 112648, 0);
     }
     HEAP32[$4 + 28 >> 2] = jsvNewFromStringVar(HEAP32[$4 + 32 >> 2], 1, 2147483647);
     $0 = HEAP32[$4 + 52 >> 2];
     $1 = HEAP32[$4 + 48 >> 2];
     HEAP32[$4 >> 2] = HEAP32[$4 + 28 >> 2];
     cbprintf($0, $1, 97144, $4);
     jsvUnLock(HEAP32[$4 + 28 >> 2]);
     break label$3;
    }
    label$7: {
     if (!(jsvIsString(HEAP32[$4 + 32 >> 2]) & 1)) {
      break label$7;
     }
     if (!(jsvIsStringEqual(HEAP32[$4 + 32 >> 2], 105817) & 1)) {
      break label$7;
     }
     HEAP32[$4 + 44 >> 2] = jsvObjectIteratorGetValue_8($4 + 40 | 0);
    }
   }
   jsvUnLock(HEAP32[$4 + 32 >> 2]);
   jsvObjectIteratorNext($4 + 40 | 0);
   continue;
  }
  break;
 }
 jsvObjectIteratorFree_8($4 + 40 | 0);
 cbprintf(HEAP32[$4 + 52 >> 2], HEAP32[$4 + 48 >> 2], 127791, 0);
 label$8: {
  if (jsvIsNativeFunction(HEAP32[$4 + 60 >> 2]) & 1) {
   cbprintf(HEAP32[$4 + 52 >> 2], HEAP32[$4 + 48 >> 2], 96345, 0);
   break label$8;
  }
  label$10: {
   if (HEAP32[$4 + 44 >> 2]) {
    if (HEAP32[$4 + 56 >> 2] & 8) {
     $0 = HEAP32[$4 + 52 >> 2];
     $1 = HEAP32[$4 + 48 >> 2];
     HEAP32[$4 + 16 >> 2] = HEAP32[38468];
     cbprintf($0, $1, 95011, $4 + 16 | 0);
     break label$10;
    }
    HEAP8[$4 + 27 | 0] = (jsvGetStringIndexOf(HEAP32[$4 + 44 >> 2], 10) | 0) >= 0;
    FUNCTION_TABLE[HEAP32[$4 + 52 >> 2]](HEAP8[$4 + 27 | 0] & 1 ? 127799 : 96371, HEAP32[$4 + 48 >> 2]);
    if (jsvIsFunctionReturn(HEAP32[$4 + 60 >> 2]) & 1) {
     FUNCTION_TABLE[HEAP32[$4 + 52 >> 2]](127530, HEAP32[$4 + 48 >> 2]);
    }
    jslPrintTokenisedString(HEAP32[$4 + 44 >> 2], HEAP32[$4 + 52 >> 2], HEAP32[$4 + 48 >> 2]);
    FUNCTION_TABLE[HEAP32[$4 + 52 >> 2]](HEAP8[$4 + 27 | 0] & 1 ? 96363 : 96364, HEAP32[$4 + 48 >> 2]);
    break label$10;
   }
   cbprintf(HEAP32[$4 + 52 >> 2], HEAP32[$4 + 48 >> 2], 95008, 0);
  }
 }
 jsvUnLock(HEAP32[$4 + 44 >> 2]);
 __stack_pointer = $4 - -64 | 0;
}

function jsvAddName($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP32[$2 + 24 >> 2] = jsvRef(HEAP32[$2 + 24 >> 2]);
 label$1: {
  if (!(jsvIsArray(HEAP32[$2 + 28 >> 2]) & 1)) {
   break label$1;
  }
  if (!(jsvIsInt(HEAP32[$2 + 24 >> 2]) & 1)) {
   break label$1;
  }
  $0 = HEAP32[$2 + 24 >> 2];
  HEAP32[$2 + 20 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
  if (HEAP32[$2 + 20 >> 2] >= (jsvGetArrayLength(HEAP32[$2 + 28 >> 2]) | 0)) {
   jsvSetArrayLength(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 20 >> 2] + 1 | 0, 0);
  }
 }
 label$3: {
  if (jsvGetLastChild(HEAP32[$2 + 28 >> 2]) & 65535) {
   HEAP32[$2 + 16 >> 2] = jsvLock(jsvGetLastChild(HEAP32[$2 + 28 >> 2]) & 65535);
   if (jsvIsArray(HEAP32[$2 + 28 >> 2]) & 1) {
    while (1) {
     $0 = 0;
     if (HEAP32[$2 + 16 >> 2]) {
      $0 = (jsvCompareInteger(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 16 >> 2]) | 0) < 0;
     }
     if ($0) {
      HEAP16[$2 + 14 >> 1] = jsvGetPrevSibling(HEAP32[$2 + 16 >> 2]);
      jsvUnLock(HEAP32[$2 + 16 >> 2]);
      HEAP32[$2 + 16 >> 2] = jsvLockSafe(HEAPU16[$2 + 14 >> 1]);
      continue;
     }
     break;
    }
   }
   label$9: {
    if (HEAP32[$2 + 16 >> 2]) {
     label$11: {
      if (jsvGetNextSibling(HEAP32[$2 + 16 >> 2]) & 65535) {
       HEAP32[$2 + 8 >> 2] = jsvLock(jsvGetNextSibling(HEAP32[$2 + 16 >> 2]) & 65535);
       jsvSetPrevSibling(HEAP32[$2 + 8 >> 2], jsvGetRef(HEAP32[$2 + 24 >> 2]) & 65535);
       jsvSetNextSibling(HEAP32[$2 + 24 >> 2], jsvGetRef(HEAP32[$2 + 8 >> 2]) & 65535);
       jsvUnLock(HEAP32[$2 + 8 >> 2]);
       break label$11;
      }
      jsvSetLastChild(HEAP32[$2 + 28 >> 2], jsvGetRef(HEAP32[$2 + 24 >> 2]) & 65535);
     }
     jsvSetNextSibling(HEAP32[$2 + 16 >> 2], jsvGetRef(HEAP32[$2 + 24 >> 2]) & 65535);
     jsvSetPrevSibling(HEAP32[$2 + 24 >> 2], jsvGetRef(HEAP32[$2 + 16 >> 2]) & 65535);
     jsvUnLock(HEAP32[$2 + 16 >> 2]);
     break label$9;
    }
    HEAP32[$2 + 4 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$2 + 28 >> 2]) & 65535);
    jsvSetPrevSibling(HEAP32[$2 + 4 >> 2], jsvGetRef(HEAP32[$2 + 24 >> 2]) & 65535);
    jsvUnLock(HEAP32[$2 + 4 >> 2]);
    jsvSetNextSibling(HEAP32[$2 + 24 >> 2], jsvGetFirstChild(HEAP32[$2 + 28 >> 2]) & 65535);
    jsvSetFirstChild(HEAP32[$2 + 28 >> 2], jsvGetRef(HEAP32[$2 + 24 >> 2]) & 65535);
   }
   break label$3;
  }
  HEAP16[$2 + 2 >> 1] = jsvGetRef(HEAP32[$2 + 24 >> 2]);
  jsvSetFirstChild(HEAP32[$2 + 28 >> 2], HEAPU16[$2 + 2 >> 1]);
  jsvSetLastChild(HEAP32[$2 + 28 >> 2], HEAPU16[$2 + 2 >> 1]);
 }
 __stack_pointer = $2 + 32 | 0;
}

function _jswrap_drawImageLayerGetPixel($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 HEAP32[$2 + 32 >> 2] = HEAP32[HEAP32[$2 + 40 >> 2] + 180 >> 2] + 127;
 HEAP32[$2 + 28 >> 2] = HEAP32[HEAP32[$2 + 40 >> 2] + 184 >> 2] + 127;
 label$1: {
  if (!(HEAP32[$2 + 32 >> 2] >= HEAP32[HEAP32[$2 + 40 >> 2] + 156 >> 2] | HEAP32[$2 + 28 >> 2] >= HEAP32[HEAP32[$2 + 40 >> 2] + 160 >> 2] | (HEAP32[$2 + 32 >> 2] | HEAP32[$2 + 28 >> 2]) < 0)) {
   HEAP32[$2 + 24 >> 2] = 0;
   HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 32 >> 2] >> 8;
   HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 28 >> 2] >> 8;
   label$3: {
    if (HEAP32[HEAP32[$2 + 40 >> 2] + 44 >> 2] == 8) {
     jsvStringIteratorGoto(HEAP32[$2 + 40 >> 2] + 120 | 0, HEAP32[HEAP32[$2 + 40 >> 2] + 56 >> 2], (HEAP32[HEAP32[$2 + 40 >> 2] + 60 >> 2] + HEAP32[$2 + 20 >> 2] | 0) + Math_imul(HEAP32[$2 + 16 >> 2], HEAP32[HEAP32[$2 + 40 >> 2] + 80 >> 2]) | 0);
     HEAP32[$2 + 24 >> 2] = jsvStringIteratorGetChar_6(HEAP32[$2 + 40 >> 2] + 120 | 0) & 255;
     break label$3;
    }
    HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 20 >> 2] + Math_imul(HEAP32[$2 + 16 >> 2], HEAP32[HEAP32[$2 + 40 >> 2] + 36 >> 2]);
    HEAP32[$2 + 8 >> 2] = Math_imul(HEAP32[$2 + 12 >> 2], HEAP32[HEAP32[$2 + 40 >> 2] + 44 >> 2]);
    jsvStringIteratorGoto(HEAP32[$2 + 40 >> 2] + 120 | 0, HEAP32[HEAP32[$2 + 40 >> 2] + 56 >> 2], HEAP32[HEAP32[$2 + 40 >> 2] + 60 >> 2] + (HEAP32[$2 + 8 >> 2] >> 3) | 0);
    HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] & 7;
    HEAP32[$2 + 24 >> 2] = jsvStringIteratorGetChar_6(HEAP32[$2 + 40 >> 2] + 120 | 0) & 255;
    HEAP32[$2 + 4 >> 2] = 8 - (HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 40 >> 2] + 44 >> 2] | 0);
    while (1) {
     if (HEAP32[$2 + 4 >> 2] < 0) {
      jsvStringIteratorNext(HEAP32[$2 + 40 >> 2] + 120 | 0);
      HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 24 >> 2] << 8 | jsvStringIteratorGetChar_6(HEAP32[$2 + 40 >> 2] + 120 | 0) & 255;
      HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 8;
      continue;
     }
     break;
    }
    HEAP32[$2 + 24 >> 2] = HEAP32[HEAP32[$2 + 40 >> 2] + 72 >> 2] & HEAP32[$2 + 24 >> 2] >>> HEAP32[$2 + 4 >> 2];
   }
   if (HEAP32[HEAP32[$2 + 40 >> 2] + 52 >> 2] != HEAP32[$2 + 24 >> 2]) {
    if (HEAP32[HEAP32[$2 + 40 >> 2] + 64 >> 2]) {
     HEAP32[$2 + 24 >> 2] = HEAPU16[HEAP32[HEAP32[$2 + 40 >> 2] + 64 >> 2] + ((HEAP32[$2 + 24 >> 2] & HEAP32[HEAP32[$2 + 40 >> 2] + 68 >> 2]) << 1) >> 1];
    }
    HEAP32[HEAP32[$2 + 36 >> 2] >> 2] = HEAP32[$2 + 24 >> 2];
    HEAP8[$2 + 47 | 0] = 1;
    break label$1;
   }
  }
  HEAP8[$2 + 47 | 0] = 0;
 }
 __stack_pointer = $2 + 48 | 0;
 return HEAP8[$2 + 47 | 0] & 1;
}

function utilTimerGetLastTask($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 24 >> 2] = $0;
 HEAP32[$4 + 20 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $2;
 jshInterruptOff();
 HEAP8[$4 + 15 | 0] = HEAPU8[188993];
 label$1: {
  if (HEAPU8[$4 + 15 | 0] != HEAPU8[188994]) {
   HEAP8[$4 + 15 | 0] = HEAPU8[$4 + 15 | 0] + 15 & 15;
   while (1) {
    if (HEAPU8[$4 + 15 | 0] != (HEAPU8[188994] + 15 & 15)) {
     if (FUNCTION_TABLE[HEAP32[$4 + 24 >> 2]](Math_imul(HEAPU8[$4 + 15 | 0], 25) + 189008 | 0, HEAP32[$4 + 20 >> 2]) & 1) {
      $3 = Math_imul(HEAPU8[$4 + 15 | 0], 25) + 189008 | 0;
      $0 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
      $2 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
      $5 = $0;
      $1 = HEAP32[$4 + 16 >> 2];
      $0 = $1;
      HEAP8[$0 | 0] = $5;
      HEAP8[$0 + 1 | 0] = $5 >>> 8;
      HEAP8[$0 + 2 | 0] = $5 >>> 16;
      HEAP8[$0 + 3 | 0] = $5 >>> 24;
      HEAP8[$0 + 4 | 0] = $2;
      HEAP8[$0 + 5 | 0] = $2 >>> 8;
      HEAP8[$0 + 6 | 0] = $2 >>> 16;
      HEAP8[$0 + 7 | 0] = $2 >>> 24;
      HEAP8[$0 + 24 | 0] = HEAPU8[$3 + 24 | 0];
      $0 = HEAPU8[$3 + 20 | 0] | HEAPU8[$3 + 21 | 0] << 8 | (HEAPU8[$3 + 22 | 0] << 16 | HEAPU8[$3 + 23 | 0] << 24);
      $2 = HEAPU8[$3 + 16 | 0] | HEAPU8[$3 + 17 | 0] << 8 | (HEAPU8[$3 + 18 | 0] << 16 | HEAPU8[$3 + 19 | 0] << 24);
      $5 = $2;
      $2 = $1;
      HEAP8[$2 + 16 | 0] = $5;
      HEAP8[$2 + 17 | 0] = $5 >>> 8;
      HEAP8[$2 + 18 | 0] = $5 >>> 16;
      HEAP8[$2 + 19 | 0] = $5 >>> 24;
      HEAP8[$2 + 20 | 0] = $0;
      HEAP8[$2 + 21 | 0] = $0 >>> 8;
      HEAP8[$2 + 22 | 0] = $0 >>> 16;
      HEAP8[$2 + 23 | 0] = $0 >>> 24;
      $2 = HEAPU8[$3 + 12 | 0] | HEAPU8[$3 + 13 | 0] << 8 | (HEAPU8[$3 + 14 | 0] << 16 | HEAPU8[$3 + 15 | 0] << 24);
      $0 = HEAPU8[$3 + 8 | 0] | HEAPU8[$3 + 9 | 0] << 8 | (HEAPU8[$3 + 10 | 0] << 16 | HEAPU8[$3 + 11 | 0] << 24);
      $5 = $0;
      $0 = $1;
      HEAP8[$0 + 8 | 0] = $5;
      HEAP8[$0 + 9 | 0] = $5 >>> 8;
      HEAP8[$0 + 10 | 0] = $5 >>> 16;
      HEAP8[$0 + 11 | 0] = $5 >>> 24;
      HEAP8[$0 + 12 | 0] = $2;
      HEAP8[$0 + 13 | 0] = $2 >>> 8;
      HEAP8[$0 + 14 | 0] = $2 >>> 16;
      HEAP8[$0 + 15 | 0] = $2 >>> 24;
      jshInterruptOn();
      HEAP8[$4 + 31 | 0] = 1;
      break label$1;
     } else {
      HEAP8[$4 + 15 | 0] = HEAPU8[$4 + 15 | 0] + 15 & 15;
      continue;
     }
    }
    break;
   }
  }
  jshInterruptOn();
  HEAP8[$4 + 31 | 0] = 0;
 }
 __stack_pointer = $4 + 32 | 0;
 return HEAP8[$4 + 31 | 0] & 1;
}

function jslPrintTokenLineMarker($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 96 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 92 >> 2] = $0;
 HEAP32[$4 + 88 >> 2] = $1;
 HEAP32[$4 + 84 >> 2] = $2;
 HEAP32[$4 + 80 >> 2] = $3;
 HEAP32[$4 + 76 >> 2] = 1;
 HEAP32[$4 + 72 >> 2] = 1;
 jsvGetLineAndCol(HEAP32[HEAP32[38615] + 84 >> 2], HEAP32[$4 + 84 >> 2], $4 + 76 | 0, $4 + 72 | 0);
 HEAP32[$4 + 68 >> 2] = jsvGetIndexFromLineAndCol(HEAP32[HEAP32[38615] + 84 >> 2], HEAP32[$4 + 76 >> 2], 1);
 HEAP32[$4 + 64 >> 2] = jsvGetCharsOnLine(HEAP32[HEAP32[38615] + 84 >> 2], HEAP32[$4 + 76 >> 2]);
 HEAP32[$4 + 60 >> 2] = 0;
 if (HEAP32[$4 + 80 >> 2]) {
  FUNCTION_TABLE[HEAP32[$4 + 92 >> 2]](HEAP32[$4 + 80 >> 2], HEAP32[$4 + 88 >> 2]);
  HEAP32[$4 + 60 >> 2] = strlen(HEAP32[$4 + 80 >> 2]);
 }
 if (!(HEAPU32[$4 + 64 >> 2] <= 60 | HEAP32[$4 + 84 >> 2] - HEAP32[$4 + 68 >> 2] >>> 0 <= 30)) {
  cbprintf(HEAP32[$4 + 92 >> 2], HEAP32[$4 + 88 >> 2], 112336, 0);
  HEAP32[$4 + 56 >> 2] = (HEAP32[$4 + 84 >> 2] - 30 | 0) - HEAP32[$4 + 68 >> 2];
  HEAP32[$4 + 68 >> 2] = HEAP32[$4 + 68 >> 2] + (HEAP32[$4 + 56 >> 2] + 3 | 0);
  label$3: {
   if (HEAPU32[$4 + 56 >> 2] <= HEAPU32[$4 + 72 >> 2]) {
    HEAP32[$4 + 72 >> 2] = HEAP32[$4 + 72 >> 2] - HEAP32[$4 + 56 >> 2];
    break label$3;
   }
   HEAP32[$4 + 72 >> 2] = 0;
  }
  HEAP32[$4 + 64 >> 2] = HEAP32[$4 + 64 >> 2] - HEAP32[$4 + 56 >> 2];
 }
 HEAP32[$4 + 52 >> 2] = 0;
 jsvStringIteratorNew($4 + 16 | 0, HEAP32[HEAP32[38615] + 84 >> 2], HEAP32[$4 + 68 >> 2]);
 HEAP8[$4 + 15 | 0] = 0;
 while (1) {
  label$6: {
   $0 = 0;
   label$7: {
    if (!(jsvStringIteratorHasChar($4 + 16 | 0) & 1)) {
     break label$7;
    }
    $0 = 0;
    if (HEAPU32[$4 + 52 >> 2] >= 60) {
     break label$7;
    }
    $0 = HEAPU8[$4 + 15 | 0] != 255;
   }
   if (!$0) {
    break label$6;
   }
   if ((jsvStringIteratorGetChar($4 + 16 | 0) & 255) == 10) {
    break label$6;
   }
   jslPrintTokenisedChar($4 + 16 | 0, $4 + 15 | 0, $4 + 72 | 0, $4 + 52 | 0, HEAP32[$4 + 92 >> 2], HEAP32[$4 + 88 >> 2]);
   continue;
  }
  break;
 }
 jsvStringIteratorFree($4 + 16 | 0);
 if (HEAPU32[$4 + 64 >> 2] > 60) {
  FUNCTION_TABLE[HEAP32[$4 + 92 >> 2]](112336, HEAP32[$4 + 88 >> 2]);
 }
 FUNCTION_TABLE[HEAP32[$4 + 92 >> 2]](129587, HEAP32[$4 + 88 >> 2]);
 HEAP32[$4 + 72 >> 2] = HEAP32[$4 + 60 >> 2] + HEAP32[$4 + 72 >> 2];
 while (1) {
  $0 = HEAP32[$4 + 72 >> 2];
  HEAP32[$4 + 72 >> 2] = $0 - 1;
  if ($0 >>> 0 > 1) {
   FUNCTION_TABLE[HEAP32[$4 + 92 >> 2]](127850, HEAP32[$4 + 88 >> 2]);
   continue;
  }
  break;
 }
 FUNCTION_TABLE[HEAP32[$4 + 92 >> 2]](128586, HEAP32[$4 + 88 >> 2]);
 __stack_pointer = $4 + 96 | 0;
}

function jswrap_graphics_setClipRect($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 112 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 104 >> 2] = $0;
 HEAP32[$5 + 100 >> 2] = $1;
 HEAP32[$5 + 96 >> 2] = $2;
 HEAP32[$5 + 92 >> 2] = $3;
 HEAP32[$5 + 88 >> 2] = $4;
 label$1: {
  if (!(graphicsGetFromVar($5 + 16 | 0, HEAP32[$5 + 104 >> 2]) & 1)) {
   HEAP32[$5 + 108 >> 2] = 0;
   break label$1;
  }
  graphicsToDeviceCoordinates($5 + 16 | 0, $5 + 100 | 0, $5 + 96 | 0);
  graphicsToDeviceCoordinates($5 + 16 | 0, $5 + 92 | 0, $5 + 88 | 0);
  if ((HEAPU8[$5 + 20 | 0] | HEAPU8[$5 + 21 | 0] << 8 | (HEAPU8[$5 + 22 | 0] << 16 | HEAPU8[$5 + 23 | 0] << 24)) != 5) {
   if (HEAP32[$5 + 100 >> 2] < 0) {
    HEAP32[$5 + 100 >> 2] = 0;
   }
   if (HEAP32[$5 + 96 >> 2] < 0) {
    HEAP32[$5 + 96 >> 2] = 0;
   }
   if (HEAP32[$5 + 92 >> 2] < 0) {
    HEAP32[$5 + 92 >> 2] = 0;
   }
   if (HEAP32[$5 + 88 >> 2] < 0) {
    HEAP32[$5 + 88 >> 2] = 0;
   }
   if (HEAP32[$5 + 100 >> 2] >= (HEAPU8[$5 + 28 | 0] | HEAPU8[$5 + 29 | 0] << 8)) {
    HEAP32[$5 + 100 >> 2] = (HEAPU8[$5 + 28 | 0] | HEAPU8[$5 + 29 | 0] << 8) - 1;
   }
   if (HEAP32[$5 + 96 >> 2] >= (HEAPU8[$5 + 30 | 0] | HEAPU8[$5 + 31 | 0] << 8)) {
    HEAP32[$5 + 96 >> 2] = (HEAPU8[$5 + 30 | 0] | HEAPU8[$5 + 31 | 0] << 8) - 1;
   }
   if (HEAP32[$5 + 92 >> 2] >= (HEAPU8[$5 + 28 | 0] | HEAPU8[$5 + 29 | 0] << 8)) {
    HEAP32[$5 + 92 >> 2] = (HEAPU8[$5 + 28 | 0] | HEAPU8[$5 + 29 | 0] << 8) - 1;
   }
   if (HEAP32[$5 + 88 >> 2] >= (HEAPU8[$5 + 30 | 0] | HEAPU8[$5 + 31 | 0] << 8)) {
    HEAP32[$5 + 88 >> 2] = (HEAPU8[$5 + 30 | 0] | HEAPU8[$5 + 31 | 0] << 8) - 1;
   }
   if (HEAP32[$5 + 100 >> 2] > HEAP32[$5 + 92 >> 2]) {
    HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 100 >> 2];
    HEAP32[$5 + 100 >> 2] = HEAP32[$5 + 92 >> 2];
    HEAP32[$5 + 92 >> 2] = HEAP32[$5 + 12 >> 2];
   }
   if (HEAP32[$5 + 96 >> 2] > HEAP32[$5 + 88 >> 2]) {
    HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 96 >> 2];
    HEAP32[$5 + 96 >> 2] = HEAP32[$5 + 88 >> 2];
    HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 8 >> 2];
   }
  }
  $0 = HEAP32[$5 + 100 >> 2];
  HEAP8[$5 + 48 | 0] = $0;
  HEAP8[$5 + 49 | 0] = $0 >>> 8;
  $0 = HEAP32[$5 + 96 >> 2];
  HEAP8[$5 + 50 | 0] = $0;
  HEAP8[$5 + 51 | 0] = $0 >>> 8;
  $0 = HEAP32[$5 + 92 >> 2];
  HEAP8[$5 + 52 | 0] = $0;
  HEAP8[$5 + 53 | 0] = $0 >>> 8;
  $0 = HEAP32[$5 + 88 >> 2];
  HEAP8[$5 + 54 | 0] = $0;
  HEAP8[$5 + 55 | 0] = $0 >>> 8;
  graphicsSetVar($5 + 16 | 0);
  HEAP32[$5 + 108 >> 2] = jsvLockAgain(HEAP32[$5 + 104 >> 2]);
 }
 __stack_pointer = $5 + 112 | 0;
 return HEAP32[$5 + 108 >> 2];
}

function jswrap_graphics_drawPoly_X($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = __stack_pointer - 192 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 184 >> 2] = $0;
 HEAP32[$4 + 180 >> 2] = $1;
 HEAP8[$4 + 179 | 0] = $2;
 HEAP8[$4 + 178 | 0] = $3;
 label$1: {
  if (!(graphicsGetFromVar($4 + 104 | 0, HEAP32[$4 + 184 >> 2]) & 1)) {
   HEAP32[$4 + 188 >> 2] = 0;
   break label$1;
  }
  if (!(jsvIsIterable(HEAP32[$4 + 180 >> 2]) & 1)) {
   HEAP32[$4 + 188 >> 2] = 0;
   break label$1;
  }
  label$4: {
   if (HEAP8[$4 + 178 | 0] & 1) {
    HEAP32[$4 + 100 >> 2] = 16;
    HEAP32[$4 + 96 >> 2] = 633;
    break label$4;
   }
   HEAP32[$4 + 100 >> 2] = 1;
   HEAP32[$4 + 96 >> 2] = 634;
  }
  HEAP32[$4 + 76 >> 2] = 0;
  jsvIteratorNew($4 + 16 | 0, HEAP32[$4 + 180 >> 2], 1);
  while (1) {
   label$7: {
    if (!(jsvIteratorHasElement($4 + 16 | 0) & 1)) {
     break label$7;
    }
    $5 = jsvIteratorGetFloatValue($4 + 16 | 0) * +HEAP32[$4 + 100 >> 2] + .5;
    label$8: {
     if (Math_abs($5) < 2147483648) {
      $0 = ~~$5;
      break label$8;
     }
     $0 = -2147483648;
    }
    HEAP32[$4 + 12 >> 2] = $0;
    jsvIteratorNext($4 + 16 | 0);
    if (!(jsvIteratorHasElement($4 + 16 | 0) & 1)) {
     break label$7;
    }
    $5 = jsvIteratorGetFloatValue($4 + 16 | 0) * +HEAP32[$4 + 100 >> 2] + .5;
    label$10: {
     if (Math_abs($5) < 2147483648) {
      $0 = ~~$5;
      break label$10;
     }
     $0 = -2147483648;
    }
    HEAP32[$4 + 8 >> 2] = $0;
    jsvIteratorNext($4 + 16 | 0);
    label$12: {
     if (!HEAP32[$4 + 76 >> 2]) {
      HEAP32[$4 + 84 >> 2] = HEAP32[$4 + 12 >> 2];
      HEAP32[$4 + 80 >> 2] = HEAP32[$4 + 8 >> 2];
      break label$12;
     }
     FUNCTION_TABLE[HEAP32[$4 + 96 >> 2]]($4 + 104 | 0, HEAP32[$4 + 92 >> 2], HEAP32[$4 + 88 >> 2], HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2]);
    }
    HEAP32[$4 + 92 >> 2] = HEAP32[$4 + 12 >> 2];
    HEAP32[$4 + 88 >> 2] = HEAP32[$4 + 8 >> 2];
    HEAP32[$4 + 76 >> 2] = HEAP32[$4 + 76 >> 2] + 1;
    continue;
   }
   break;
  }
  jsvIteratorFree($4 + 16 | 0);
  $0 = HEAP32[$4 + 92 >> 2] / HEAP32[$4 + 100 >> 2] | 0;
  HEAP8[$4 + 131 | 0] = $0;
  HEAP8[$4 + 132 | 0] = $0 >>> 8;
  $0 = HEAP32[$4 + 88 >> 2] / HEAP32[$4 + 100 >> 2] | 0;
  HEAP8[$4 + 133 | 0] = $0;
  HEAP8[$4 + 134 | 0] = $0 >>> 8;
  if (HEAP8[$4 + 179 | 0] & 1) {
   FUNCTION_TABLE[HEAP32[$4 + 96 >> 2]]($4 + 104 | 0, HEAP32[$4 + 92 >> 2], HEAP32[$4 + 88 >> 2], HEAP32[$4 + 84 >> 2], HEAP32[$4 + 80 >> 2]);
  }
  graphicsSetVar($4 + 104 | 0);
  HEAP32[$4 + 188 >> 2] = jsvLockAgain(HEAP32[$4 + 184 >> 2]);
 }
 __stack_pointer = $4 + 192 | 0;
 return HEAP32[$4 + 188 >> 2];
}

function tflite__ops__micro__fully_connected__EvalQuantizedInt8_28TfLiteContext__2c_20TfLiteNode__2c_20tflite__ops__micro__fully_connected___28anonymous_20namespace_29__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0;
 $7 = __stack_pointer - 176 | 0;
 __stack_pointer = $7;
 HEAP32[$7 + 172 >> 2] = $0;
 HEAP32[$7 + 168 >> 2] = $1;
 HEAP32[$7 + 164 >> 2] = $2;
 HEAP32[$7 + 160 >> 2] = $3;
 HEAP32[$7 + 156 >> 2] = $4;
 HEAP32[$7 + 152 >> 2] = $5;
 HEAP32[$7 + 148 >> 2] = $6;
 HEAP32[$7 + 104 >> 2] = 0 - HEAP32[HEAP32[$7 + 164 >> 2] + 20 >> 2];
 HEAP32[$7 + 108 >> 2] = 0 - HEAP32[HEAP32[$7 + 164 >> 2] + 24 >> 2];
 HEAP32[$7 + 112 >> 2] = HEAP32[HEAP32[$7 + 164 >> 2] + 28 >> 2];
 HEAP32[$7 + 116 >> 2] = HEAP32[HEAP32[$7 + 164 >> 2] >> 2];
 HEAP32[$7 + 120 >> 2] = 0 - HEAP32[HEAP32[$7 + 164 >> 2] + 4 >> 2];
 HEAP32[$7 + 124 >> 2] = HEAP32[HEAP32[$7 + 164 >> 2] + 8 >> 2];
 HEAP32[$7 + 128 >> 2] = HEAP32[HEAP32[$7 + 164 >> 2] + 12 >> 2];
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($7 + 80 | 0, HEAP32[$7 + 160 >> 2]);
 $0 = signed_20char_20const__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor_20const__29(HEAP32[$7 + 160 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($7 + 56 | 0, HEAP32[$7 + 156 >> 2]);
 $1 = signed_20char_20const__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor_20const__29(HEAP32[$7 + 156 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($7 + 32 | 0, HEAP32[$7 + 152 >> 2]);
 $2 = int_20const__20tflite__micro__GetTensorData_int__28TfLiteEvalTensor_20const__29(HEAP32[$7 + 152 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($7 + 8 | 0, HEAP32[$7 + 148 >> 2]);
 tflite__reference_integer_ops__FullyConnected_28tflite__FullyConnectedParams_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($7 + 104 | 0, $7 + 80 | 0, $0, $7 + 56 | 0, $1, $7 + 32 | 0, $2, $7 + 8 | 0, signed_20char__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor__29(HEAP32[$7 + 148 >> 2]));
 tflite__RuntimeShape___RuntimeShape_28_29($7 + 8 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($7 + 32 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($7 + 56 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($7 + 80 | 0);
 __stack_pointer = $7 + 176 | 0;
 return 0;
}

function jswrap_promise_all($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer + -64 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 56 >> 2] = $0;
 label$1: {
  if (!(jsvIsIterable(HEAP32[$1 + 56 >> 2]) & 1)) {
   HEAP32[$1 >> 2] = HEAP32[$1 + 56 >> 2];
   jsExceptionHere(3, 99110, $1);
   HEAP32[$1 + 60 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 48 >> 2] = jspromise_create_prombox($1 + 52 | 0);
  if (!HEAP32[$1 + 48 >> 2]) {
   HEAP32[$1 + 60 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$1 + 52 >> 2]) {
   HEAP32[$1 + 44 >> 2] = _jswrap_promise_native_with_prombox(622, HEAP32[$1 + 48 >> 2]);
   if (!HEAP32[$1 + 44 >> 2]) {
    HEAP32[$1 + 60 >> 2] = jsvLockAgainSafe(HEAP32[$1 + 52 >> 2]);
    break label$1;
   }
   HEAP32[$1 + 40 >> 2] = jsvNewEmptyArray();
   HEAP32[$1 + 36 >> 2] = 0;
   HEAP32[$1 + 32 >> 2] = 0;
   jsvObjectIteratorNew($1 + 24 | 0, HEAP32[$1 + 56 >> 2]);
   while (1) {
    if (jsvObjectIteratorHasValue_17($1 + 24 | 0) & 1) {
     HEAP32[$1 + 20 >> 2] = jsvObjectIteratorGetValue_16($1 + 24 | 0);
     label$8: {
      if (_jswrap_promise_is_promise(HEAP32[$1 + 20 >> 2]) & 1) {
       HEAP32[$1 + 16 >> 2] = jsvNewNativeFunction(623, 32840);
       HEAP32[$1 + 12 >> 2] = jsvNewFromInteger(HEAP32[$1 + 36 >> 2]);
       jsvAddFunctionParameter(HEAP32[$1 + 16 >> 2], 0, HEAP32[$1 + 12 >> 2]);
       jsvObjectSetChild(HEAP32[$1 + 16 >> 2], 100302, HEAP32[$1 + 48 >> 2]);
       jsvUnLock3(jswrap_promise_then(HEAP32[$1 + 20 >> 2], HEAP32[$1 + 16 >> 2], HEAP32[$1 + 44 >> 2]), HEAP32[$1 + 16 >> 2], HEAP32[$1 + 12 >> 2]);
       break label$8;
      }
      jsvSetArrayItem(HEAP32[$1 + 40 >> 2], HEAP32[$1 + 36 >> 2], HEAP32[$1 + 20 >> 2]);
      HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 32 >> 2] + 1;
     }
     jsvUnLock(HEAP32[$1 + 20 >> 2]);
     HEAP32[$1 + 36 >> 2] = HEAP32[$1 + 36 >> 2] + 1;
     jsvObjectIteratorNext($1 + 24 | 0);
     continue;
    }
    break;
   }
   jsvObjectIteratorFree_17($1 + 24 | 0);
   label$10: {
    if (HEAP32[$1 + 32 >> 2] == HEAP32[$1 + 36 >> 2]) {
     HEAP32[$1 + 52 >> 2] = jswrap_promise_resolve(HEAP32[$1 + 40 >> 2]);
     jsvUnLock2(HEAP32[$1 + 52 >> 2], HEAP32[$1 + 40 >> 2]);
     break label$10;
    }
    jsvObjectSetChildAndUnLock(HEAP32[$1 + 52 >> 2], 102057, jsvNewFromInteger(HEAP32[$1 + 36 >> 2] - HEAP32[$1 + 32 >> 2] | 0));
    jsvObjectSetChildAndUnLock(HEAP32[$1 + 52 >> 2], 100360, HEAP32[$1 + 40 >> 2]);
   }
   jsvUnLock2(HEAP32[$1 + 44 >> 2], HEAP32[$1 + 48 >> 2]);
  }
  HEAP32[$1 + 60 >> 2] = jsvLockAgainSafe(HEAP32[$1 + 52 >> 2]);
 }
 __stack_pointer = $1 - -64 | 0;
 return HEAP32[$1 + 60 >> 2];
}

function jspeTemplateLiteral() {
 var $0 = 0;
 $0 = __stack_pointer - 144 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 140 >> 2] = 0;
 if ((HEAP32[46755] & 63) == 1) {
  HEAP32[$0 + 136 >> 2] = jslGetTokenValueAsVar();
  HEAP32[$0 + 140 >> 2] = jsvNewFromEmptyString_3();
  if (!(!HEAP32[$0 + 140 >> 2] | !HEAP32[$0 + 136 >> 2])) {
   jsvStringIteratorNew($0 + 96 | 0, HEAP32[$0 + 136 >> 2], 0);
   jsvStringIteratorNew($0 + 56 | 0, HEAP32[$0 + 140 >> 2], 0);
   while (1) {
    label$4: {
     if (!(jsvStringIteratorHasChar_4($0 + 96 | 0) & 1)) {
      break label$4;
     }
     HEAP8[$0 + 55 | 0] = jsvStringIteratorGetCharAndNext($0 + 96 | 0);
     label$5: {
      if (HEAP8[$0 + 55 | 0] == 36) {
       HEAP8[$0 + 55 | 0] = jsvStringIteratorGetChar_3($0 + 96 | 0);
       label$7: {
        if (HEAP8[$0 + 55 | 0] == 123) {
         jsvStringIteratorNext($0 + 96 | 0);
         HEAP32[$0 + 48 >> 2] = 1;
         HEAP32[$0 + 44 >> 2] = jsvNewFromEmptyString_3();
         if (!HEAP32[$0 + 44 >> 2]) {
          break label$4;
         }
         jsvStringIteratorNew($0 + 8 | 0, HEAP32[$0 + 44 >> 2], 0);
         while (1) {
          label$10: {
           if (!(jsvStringIteratorHasChar_4($0 + 96 | 0) & 1)) {
            break label$10;
           }
           HEAP8[$0 + 55 | 0] = jsvStringIteratorGetCharAndNext($0 + 96 | 0);
           if (HEAP8[$0 + 55 | 0] == 123) {
            HEAP32[$0 + 48 >> 2] = HEAP32[$0 + 48 >> 2] + 1;
           }
           if (HEAP8[$0 + 55 | 0] == 125) {
            HEAP32[$0 + 48 >> 2] = HEAP32[$0 + 48 >> 2] - 1;
            if (!HEAP32[$0 + 48 >> 2]) {
             break label$10;
            }
           }
           jsvStringIteratorAppend($0 + 8 | 0, HEAP8[$0 + 55 | 0]);
           continue;
          }
          break;
         }
         jsvStringIteratorFree_4($0 + 8 | 0);
         HEAP32[$0 + 4 >> 2] = jspEvaluateExpressionVar(HEAP32[$0 + 44 >> 2]);
         jsvUnLock(HEAP32[$0 + 44 >> 2]);
         HEAP32[$0 + 4 >> 2] = jsvAsStringAndUnLock(HEAP32[$0 + 4 >> 2]);
         jsvStringIteratorAppendString($0 + 56 | 0, HEAP32[$0 + 4 >> 2], 0, 2147483647);
         jsvUnLock(HEAP32[$0 + 4 >> 2]);
         break label$7;
        }
        jsvStringIteratorAppend($0 + 56 | 0, 36);
       }
       break label$5;
      }
      jsvStringIteratorAppend($0 + 56 | 0, HEAP8[$0 + 55 | 0]);
     }
     continue;
    }
    break;
   }
   jsvStringIteratorFree_4($0 + 96 | 0);
   jsvStringIteratorFree_4($0 + 56 | 0);
  }
  jsvUnLock(HEAP32[$0 + 136 >> 2]);
 }
 jslGetNextToken();
 __stack_pointer = $0 + 144 | 0;
 return HEAP32[$0 + 140 >> 2];
}

function jswrap_btoa($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 144 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 136 >> 2] = $0;
 label$1: {
  if (!(jsvIsIterable(HEAP32[$1 + 136 >> 2]) & 1)) {
   HEAP32[$1 >> 2] = HEAP32[$1 + 136 >> 2];
   jsExceptionHere(1, 98510, $1);
   HEAP32[$1 + 140 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 132 >> 2] = jsvGetLength(HEAP32[$1 + 136 >> 2]);
  HEAP32[$1 + 128 >> 2] = (HEAP32[$1 + 132 >> 2] + 2 >>> 0) / 3 << 2;
  HEAP32[$1 + 124 >> 2] = jsvNewStringOfLength(HEAP32[$1 + 128 >> 2], 0);
  if (!HEAP32[$1 + 124 >> 2]) {
   HEAP32[$1 + 140 >> 2] = 0;
   break label$1;
  }
  jsvIteratorNew($1 - -64 | 0, HEAP32[$1 + 136 >> 2], 1);
  jsvStringIteratorNew($1 + 24 | 0, HEAP32[$1 + 124 >> 2], 0);
  HEAP32[$1 + 20 >> 2] = 0;
  while (1) {
   $0 = 0;
   if (jsvIteratorHasElement($1 - -64 | 0) & 1) {
    $0 = jspIsInterrupted() ^ -1;
   }
   if ($0 & 1) {
    HEAP32[$1 + 16 >> 2] = jsvIteratorGetIntegerValue($1 - -64 | 0) & 255;
    jsvIteratorNext($1 - -64 | 0);
    HEAP32[$1 + 12 >> 2] = 0;
    HEAP32[$1 + 8 >> 2] = 0;
    label$7: {
     if (jsvIteratorHasElement($1 - -64 | 0) & 1) {
      HEAP32[$1 + 12 >> 2] = jsvIteratorGetIntegerValue($1 - -64 | 0) & 255;
      jsvIteratorNext($1 - -64 | 0);
      label$9: {
       if (jsvIteratorHasElement($1 - -64 | 0) & 1) {
        HEAP32[$1 + 8 >> 2] = jsvIteratorGetIntegerValue($1 - -64 | 0) & 255;
        jsvIteratorNext($1 - -64 | 0);
        HEAP32[$1 + 20 >> 2] = 0;
        break label$9;
       }
       HEAP32[$1 + 20 >> 2] = 1;
      }
      break label$7;
     }
     HEAP32[$1 + 20 >> 2] = 2;
    }
    HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 8 >> 2] + ((HEAP32[$1 + 16 >> 2] << 16) + (HEAP32[$1 + 12 >> 2] << 8) | 0);
    jsvStringIteratorSetCharAndNext($1 + 24 | 0, jswrap_btoa_encode(HEAP32[$1 + 4 >> 2] >> 18) << 24 >> 24);
    jsvStringIteratorSetCharAndNext($1 + 24 | 0, jswrap_btoa_encode(HEAP32[$1 + 4 >> 2] >> 12) << 24 >> 24);
    $2 = $1 + 24 | 0;
    if (HEAP32[$1 + 20 >> 2] > 1) {
     $0 = 61;
    } else {
     $0 = jswrap_btoa_encode(HEAP32[$1 + 4 >> 2] >> 6);
    }
    jsvStringIteratorSetCharAndNext($2, $0 << 24 >> 24);
    $2 = $1 + 24 | 0;
    if (HEAP32[$1 + 20 >> 2] > 0) {
     $0 = 61;
    } else {
     $0 = jswrap_btoa_encode(HEAP32[$1 + 4 >> 2]);
    }
    jsvStringIteratorSetCharAndNext($2, $0 << 24 >> 24);
    continue;
   }
   break;
  }
  jsvIteratorFree($1 - -64 | 0);
  jsvStringIteratorFree_7($1 + 24 | 0);
  HEAP32[$1 + 140 >> 2] = HEAP32[$1 + 124 >> 2];
 }
 __stack_pointer = $1 + 144 | 0;
 return HEAP32[$1 + 140 >> 2];
}

function jspeStatementTry() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 32 | 0;
 __stack_pointer = $0;
 jslGetNextToken();
 HEAP8[$0 + 27 | 0] = (HEAP32[46755] & 63) == 1;
 jspeBlock();
 $1 = HEAP8[$0 + 27 | 0] & 1 ? (HEAP32[46755] & 32) != 0 : $1;
 HEAP8[$0 + 26 | 0] = $1;
 HEAP8[$0 + 25 | 0] = 0;
 label$2: {
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 178) {
   jslGetNextToken();
   HEAP8[$0 + 25 | 0] = 1;
   HEAP32[$0 + 20 >> 2] = 0;
   HEAP32[$0 + 16 >> 2] = 0;
   label$4: {
    if (HEAP8[$0 + 27 | 0] & 1) {
     $1 = jspGetException();
     break label$4;
    }
    $1 = 0;
   }
   HEAP32[$0 + 12 >> 2] = $1;
   if (HEAP16[HEAP32[38615] + 2 >> 1] == 40) {
    if (!(jslMatch(40) & 1)) {
     break label$2;
    }
    if (HEAP8[$0 + 26 | 0] & 1) {
     HEAP32[$0 + 16 >> 2] = jsvNewObject();
     if (HEAP32[$0 + 16 >> 2]) {
      HEAP32[$0 + 20 >> 2] = jsvFindOrAddChildFromString(HEAP32[$0 + 16 >> 2], jslGetTokenValueAsString());
     }
    }
    if (!(jslMatch(128) & 1)) {
     jsvUnLock2(HEAP32[$0 + 16 >> 2], HEAP32[$0 + 20 >> 2]);
     break label$2;
    }
    if (!(jslMatch(41) & 1)) {
     jsvUnLock2(HEAP32[$0 + 16 >> 2], HEAP32[$0 + 20 >> 2]);
     break label$2;
    }
    if (HEAP32[$0 + 20 >> 2]) {
     if (HEAP32[$0 + 12 >> 2]) {
      jsvSetValueOfName(HEAP32[$0 + 20 >> 2], HEAP32[$0 + 12 >> 2]);
     }
     jsvUnLock(HEAP32[$0 + 20 >> 2]);
    }
   }
   if (HEAP8[$0 + 27 | 0] & 1) {
    HEAP32[46755] = HEAP32[46755] & -161;
    jsvUnLock(HEAP32[$0 + 12 >> 2]);
   }
   label$15: {
    if (!(!(HEAP8[$0 + 27 | 0] & 1) | HEAP8[$0 + 26 | 0] & 1)) {
     HEAP32[$0 + 8 >> 2] = HEAP32[46755];
     jspSetNoExecute();
     jspeBlock();
     HEAP32[46755] = HEAP32[46755] & -1664 | HEAP32[$0 + 8 >> 2] & 1663;
     break label$15;
    }
    label$17: {
     if (HEAP32[$0 + 16 >> 2]) {
      if (!(jspeiAddScope(HEAP32[$0 + 16 >> 2]) & 1)) {
       break label$17;
      }
     }
     jspeBlock();
     if (HEAP32[$0 + 16 >> 2]) {
      jspeiRemoveScope();
     }
    }
   }
   jsvUnLock(HEAP32[$0 + 16 >> 2]);
  }
  if (!(HEAP8[$0 + 25 | 0] & 1 | HEAP32[46755] & 80 ? HEAP16[HEAP32[38615] + 2 >> 1] != 179 : 0)) {
   if (!(jslMatch(179) & 1)) {
    break label$2;
   }
   HEAP32[$0 + 4 >> 2] = HEAP32[46755];
   if (HEAP8[$0 + 27 | 0] & 1) {
    HEAP32[46755] = HEAP32[46755] & -47 | 1;
   }
   jspeBlock();
   HEAP32[46755] = HEAP32[$0 + 4 >> 2];
   if (!(!(HEAP8[$0 + 26 | 0] & 1) | HEAP8[$0 + 25 | 0] & 1)) {
    HEAP32[46755] = HEAP32[46755] | 32;
   }
  }
 }
 HEAP32[$0 + 28 >> 2] = 0;
 __stack_pointer = $0 + 32 | 0;
 return HEAP32[$0 + 28 >> 2];
}

function jsvCopyNameOnly($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP8[$3 + 23 | 0] = $1;
 HEAP8[$3 + 22 | 0] = $2;
 $0 = HEAP32[$3 + 24 >> 2];
 HEAP16[$3 + 20 >> 1] = HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8;
 HEAP32[$3 + 16 >> 2] = 0;
 label$1: {
  if (!(HEAP8[$3 + 22 | 0] & 1)) {
   $0 = HEAP32[$3 + 24 >> 2];
   HEAP16[$3 + 14 >> 1] = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63;
   label$3: {
    if (!(HEAPU16[$3 + 14 >> 1] < 15 | HEAPU16[$3 + 14 >> 1] > 17)) {
     HEAP16[$3 + 20 >> 1] = HEAPU16[$3 + 20 >> 1] & -64 | 10;
     break label$3;
    }
    label$5: {
     if (jsvGetLastChild(HEAP32[$3 + 24 >> 2]) & 65535) {
      HEAP32[$3 + 16 >> 2] = jsvNewFromStringVarComplete(HEAP32[$3 + 24 >> 2]);
      if (!HEAP32[$3 + 16 >> 2]) {
       HEAP32[$3 + 28 >> 2] = 0;
       break label$1;
      }
      break label$5;
     }
     HEAP16[$3 + 20 >> 1] = HEAPU16[$3 + 20 >> 1] & 65472 | jsvGetCharactersInVar(HEAP32[$3 + 24 >> 2]) + 28;
    }
   }
  }
  if (!HEAP32[$3 + 16 >> 2]) {
   HEAP32[$3 + 16 >> 2] = jsvNewWithFlags(HEAPU16[$3 + 20 >> 1] & 255);
   if (!HEAP32[$3 + 16 >> 2]) {
    HEAP32[$3 + 28 >> 2] = 0;
    break label$1;
   }
   $0 = HEAP32[$3 + 16 >> 2];
   $1 = HEAP32[$3 + 24 >> 2];
   $1 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
   HEAP8[$0 | 0] = $1;
   HEAP8[$0 + 1 | 0] = $1 >>> 8;
   HEAP8[$0 + 2 | 0] = $1 >>> 16;
   HEAP8[$0 + 3 | 0] = $1 >>> 24;
   if (jsvHasStringExt(HEAP32[$3 + 24 >> 2]) & 1) {
    if (jsvGetLastChild(HEAP32[$3 + 24 >> 2]) & 65535) {
     HEAP32[$3 + 8 >> 2] = jsvLock(jsvGetLastChild(HEAP32[$3 + 24 >> 2]) & 65535);
     HEAP32[$3 + 4 >> 2] = jsvCopy(HEAP32[$3 + 8 >> 2], 1);
     if (HEAP32[$3 + 4 >> 2]) {
      jsvSetLastChild(HEAP32[$3 + 16 >> 2], jsvGetRef(HEAP32[$3 + 4 >> 2]) & 65535);
      jsvUnLock(HEAP32[$3 + 4 >> 2]);
     }
     jsvUnLock(HEAP32[$3 + 8 >> 2]);
    }
   }
  }
  label$13: {
   if (!(HEAP8[$3 + 23 | 0] & 1)) {
    break label$13;
   }
   if (!(jsvGetFirstChild(HEAP32[$3 + 24 >> 2]) & 65535)) {
    break label$13;
   }
   label$14: {
    if (jsvIsNameWithValue(HEAP32[$3 + 24 >> 2]) & 1) {
     jsvSetFirstChild(HEAP32[$3 + 16 >> 2], jsvGetFirstChild(HEAP32[$3 + 24 >> 2]) & 65535);
     break label$14;
    }
    jsvSetFirstChild(HEAP32[$3 + 16 >> 2], jsvRefRef(jsvGetFirstChild(HEAP32[$3 + 24 >> 2]) & 65535) & 65535);
   }
  }
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 16 >> 2];
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function tflite__ParseSoftmax_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = Math_fround(0);
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 40 >> 2] = $0;
 HEAP32[$4 + 36 >> 2] = $1;
 HEAP32[$4 + 32 >> 2] = $2;
 HEAP32[$4 + 28 >> 2] = $3;
 tflite___28anonymous_20namespace_29__CheckParsePointerParams_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29(HEAP32[$4 + 40 >> 2], HEAP32[$4 + 36 >> 2], HEAP32[$4 + 32 >> 2], HEAP32[$4 + 28 >> 2]);
 tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__SafeBuiltinDataAllocator_28tflite__BuiltinDataAllocator__29($4 + 24 | 0, HEAP32[$4 + 32 >> 2]);
 std____2__unique_ptr_TfLiteSoftmaxParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteSoftmaxParams__28_29($4 + 16 | 0, $4 + 24 | 0);
 label$1: {
  if (!(bool_20std____2__operator___TfLiteSoftmaxParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28std____2__unique_ptr_TfLiteSoftmaxParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20const__2c_20std__nullptr_t_29($4 + 16 | 0, 0) & 1)) {
   $0 = HEAP32[$4 + 36 >> 2];
   $1 = HEAP32[$4 + 36 >> 2];
   HEAP32[$4 >> 2] = 100842;
   tflite__ErrorReporter__ReportError_28void__2c_20char_20const__2c_20____29($0, $1, 111890, $4);
   HEAP32[$4 + 44 >> 2] = 1;
   break label$1;
  }
  HEAP32[$4 + 8 >> 2] = tflite__Operator__builtin_options_as_SoftmaxOptions_28_29_20const(HEAP32[$4 + 40 >> 2]);
  if (HEAP32[$4 + 8 >> 2]) {
   $5 = tflite__SoftmaxOptions__beta_28_29_20const(HEAP32[$4 + 8 >> 2]);
   HEAPF32[std____2__unique_ptr_TfLiteSoftmaxParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) >> 2] = $5;
  }
  $0 = std____2__unique_ptr_TfLiteSoftmaxParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($4 + 16 | 0);
  HEAP32[HEAP32[$4 + 28 >> 2] >> 2] = $0;
  HEAP32[$4 + 44 >> 2] = 0;
 }
 HEAP32[$4 + 12 >> 2] = 1;
 std____2__unique_ptr_TfLiteSoftmaxParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($4 + 16 | 0);
 __stack_pointer = $4 + 48 | 0;
 return HEAP32[$4 + 44 >> 2];
}

function tflite__ops__micro__fully_connected__Prepare_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer + -64 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 56 >> 2] = $0;
 HEAP32[$2 + 52 >> 2] = $1;
 label$1: {
  if (!HEAP32[HEAP32[$2 + 52 >> 2] + 8 >> 2]) {
   break label$1;
  }
 }
 label$2: {
  if (!HEAP32[HEAP32[$2 + 52 >> 2] + 12 >> 2]) {
   break label$2;
  }
 }
 HEAP32[$2 + 48 >> 2] = HEAP32[HEAP32[$2 + 52 >> 2] + 8 >> 2];
 HEAP32[$2 + 44 >> 2] = HEAP32[HEAP32[$2 + 52 >> 2] + 12 >> 2];
 HEAP32[$2 + 40 >> 2] = tflite__GetInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2], 0);
 HEAP32[$2 + 36 >> 2] = tflite__GetInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2], 1);
 HEAP32[$2 + 32 >> 2] = tflite__GetOptionalInputTensor_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2], 2);
 HEAP32[$2 + 28 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2], 0);
 label$3: {
  if (HEAP32[HEAP32[$2 + 40 >> 2] + 28 >> 2] != HEAP32[HEAP32[$2 + 28 >> 2] + 28 >> 2]) {
   $0 = HEAP32[HEAP32[$2 + 56 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 56 >> 2];
   $3 = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 40 >> 2] + 28 >> 2]);
   HEAP32[$2 + 12 >> 2] = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 28 >> 2] + 28 >> 2]);
   HEAP32[$2 + 8 >> 2] = $3;
   HEAP32[$2 + 4 >> 2] = 104850;
   HEAP32[$2 >> 2] = 104863;
   FUNCTION_TABLE[$0 | 0]($1, 126107, $2);
   HEAP32[$2 + 60 >> 2] = 1;
   break label$3;
  }
  if (HEAP32[HEAP32[$2 + 40 >> 2] + 28 >> 2] != HEAP32[HEAP32[$2 + 36 >> 2] + 28 >> 2]) {
   FUNCTION_TABLE[HEAP32[HEAP32[$2 + 56 >> 2] + 20 >> 2]](HEAP32[$2 + 56 >> 2], 111731, 0);
   HEAP32[$2 + 60 >> 2] = 1;
   break label$3;
  }
  HEAP32[$2 + 60 >> 2] = tflite__ops__micro__fully_connected___28anonymous_20namespace_29__CalculateOpData_28TfLiteContext__2c_20TfLiteFusedActivation_2c_20TfLiteType_2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20tflite__ops__micro__fully_connected___28anonymous_20namespace_29__OpData__29(HEAP32[$2 + 56 >> 2], HEAP32[HEAP32[$2 + 44 >> 2] >> 2], HEAP32[HEAP32[$2 + 40 >> 2] + 28 >> 2], HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], HEAP32[$2 + 32 >> 2], HEAP32[$2 + 28 >> 2], HEAP32[$2 + 48 >> 2]);
 }
 __stack_pointer = $2 - -64 | 0;
 return HEAP32[$2 + 60 >> 2];
}

function jswrap_graphics_createCallback($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 128 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 120 >> 2] = $0;
 HEAP32[$4 + 116 >> 2] = $1;
 HEAP32[$4 + 112 >> 2] = $2;
 HEAP32[$4 + 108 >> 2] = $3;
 label$1: {
  label$2: {
   if (!(HEAP32[$4 + 120 >> 2] <= 0 | HEAP32[$4 + 116 >> 2] <= 0 | HEAP32[$4 + 120 >> 2] > 32767)) {
    if (HEAP32[$4 + 116 >> 2] <= 32767) {
     break label$2;
    }
   }
   jsExceptionHere(1, 104305, 0);
   HEAP32[$4 + 124 >> 2] = 0;
   break label$1;
  }
  if (!(isValidBPP(HEAP32[$4 + 112 >> 2]) & 1)) {
   jsExceptionHere(1, 108973, 0);
   HEAP32[$4 + 124 >> 2] = 0;
   break label$1;
  }
  HEAP32[$4 + 104 >> 2] = 0;
  HEAP32[$4 + 100 >> 2] = 0;
  label$5: {
   if (jsvIsObject(HEAP32[$4 + 108 >> 2]) & 1) {
    jsvUnLock(HEAP32[$4 + 104 >> 2]);
    HEAP32[$4 + 104 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 108 >> 2], 102733);
    HEAP32[$4 + 100 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 108 >> 2], 98077);
    break label$5;
   }
   HEAP32[$4 + 104 >> 2] = jsvLockAgain(HEAP32[$4 + 108 >> 2]);
  }
  if (!(jsvIsFunction(HEAP32[$4 + 104 >> 2]) & 1)) {
   HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 104 >> 2];
   jsExceptionHere(1, 98367, $4 + 16 | 0);
   jsvUnLock2(HEAP32[$4 + 104 >> 2], HEAP32[$4 + 100 >> 2]);
   HEAP32[$4 + 124 >> 2] = 0;
   break label$1;
  }
  label$8: {
   if (jsvIsUndefined(HEAP32[$4 + 100 >> 2]) & 1) {
    break label$8;
   }
   if (jsvIsFunction(HEAP32[$4 + 100 >> 2]) & 1) {
    break label$8;
   }
   HEAP32[$4 >> 2] = HEAP32[$4 + 100 >> 2];
   jsExceptionHere(1, 98367, $4);
   jsvUnLock2(HEAP32[$4 + 104 >> 2], HEAP32[$4 + 100 >> 2]);
   HEAP32[$4 + 124 >> 2] = 0;
   break label$1;
  }
  HEAP32[$4 + 96 >> 2] = jspNewObject(0, 100617);
  if (!HEAP32[$4 + 96 >> 2]) {
   HEAP32[$4 + 124 >> 2] = 0;
   break label$1;
  }
  HEAP8[$4 + 28 | 0] = 1;
  HEAP8[$4 + 29 | 0] = 0;
  HEAP8[$4 + 30 | 0] = 0;
  HEAP8[$4 + 31 | 0] = 0;
  graphicsStructInit($4 + 24 | 0, HEAP32[$4 + 120 >> 2], HEAP32[$4 + 116 >> 2], HEAP32[$4 + 112 >> 2]);
  $0 = HEAP32[$4 + 96 >> 2];
  HEAP8[$4 + 24 | 0] = $0;
  HEAP8[$4 + 25 | 0] = $0 >>> 8;
  HEAP8[$4 + 26 | 0] = $0 >>> 16;
  HEAP8[$4 + 27 | 0] = $0 >>> 24;
  lcdInit_JS($4 + 24 | 0, HEAP32[$4 + 104 >> 2], HEAP32[$4 + 100 >> 2]);
  graphicsSetVarInitial($4 + 24 | 0);
  jsvUnLock2(HEAP32[$4 + 104 >> 2], HEAP32[$4 + 100 >> 2]);
  HEAP32[$4 + 124 >> 2] = HEAP32[$4 + 96 >> 2];
 }
 __stack_pointer = $4 + 128 | 0;
 return HEAP32[$4 + 124 >> 2];
}

function jswrap_graphics_setRotation($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 96 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 88 >> 2] = $0;
 HEAP32[$3 + 84 >> 2] = $1;
 HEAP8[$3 + 83 | 0] = $2;
 label$1: {
  if (!(graphicsGetFromVar($3 + 8 | 0, HEAP32[$3 + 88 >> 2]) & 1)) {
   HEAP32[$3 + 92 >> 2] = 0;
   break label$1;
  }
  $0 = (HEAPU8[$3 + 16 | 0] | HEAPU8[$3 + 17 | 0] << 8 | (HEAPU8[$3 + 18 | 0] << 16 | HEAPU8[$3 + 19 | 0] << 24)) & -113;
  HEAP8[$3 + 16 | 0] = $0;
  HEAP8[$3 + 17 | 0] = $0 >>> 8;
  HEAP8[$3 + 18 | 0] = $0 >>> 16;
  HEAP8[$3 + 19 | 0] = $0 >>> 24;
  label$3: {
   label$4: {
    switch (HEAP32[$3 + 84 >> 2] - 1 | 0) {
    case 0:
     $0 = HEAPU8[$3 + 16 | 0] | HEAPU8[$3 + 17 | 0] << 8 | (HEAPU8[$3 + 18 | 0] << 16 | HEAPU8[$3 + 19 | 0] << 24) | 48;
     HEAP8[$3 + 16 | 0] = $0;
     HEAP8[$3 + 17 | 0] = $0 >>> 8;
     HEAP8[$3 + 18 | 0] = $0 >>> 16;
     HEAP8[$3 + 19 | 0] = $0 >>> 24;
     break label$3;

    case 1:
     $0 = HEAPU8[$3 + 16 | 0] | HEAPU8[$3 + 17 | 0] << 8 | (HEAPU8[$3 + 18 | 0] << 16 | HEAPU8[$3 + 19 | 0] << 24) | 96;
     HEAP8[$3 + 16 | 0] = $0;
     HEAP8[$3 + 17 | 0] = $0 >>> 8;
     HEAP8[$3 + 18 | 0] = $0 >>> 16;
     HEAP8[$3 + 19 | 0] = $0 >>> 24;
     break label$3;

    case 2:
     break label$4;

    default:
     break label$3;
    }
   }
   $0 = HEAPU8[$3 + 16 | 0] | HEAPU8[$3 + 17 | 0] << 8 | (HEAPU8[$3 + 18 | 0] << 16 | HEAPU8[$3 + 19 | 0] << 24) | 80;
   HEAP8[$3 + 16 | 0] = $0;
   HEAP8[$3 + 17 | 0] = $0 >>> 8;
   HEAP8[$3 + 18 | 0] = $0 >>> 16;
   HEAP8[$3 + 19 | 0] = $0 >>> 24;
  }
  if (HEAP8[$3 + 83 | 0] & 1) {
   label$8: {
    if ((HEAPU8[$3 + 16 | 0] | HEAPU8[$3 + 17 | 0] << 8 | (HEAPU8[$3 + 18 | 0] << 16 | HEAPU8[$3 + 19 | 0] << 24)) & 16) {
     $0 = (HEAPU8[$3 + 16 | 0] | HEAPU8[$3 + 17 | 0] << 8 | (HEAPU8[$3 + 18 | 0] << 16 | HEAPU8[$3 + 19 | 0] << 24)) ^ 64;
     HEAP8[$3 + 16 | 0] = $0;
     HEAP8[$3 + 17 | 0] = $0 >>> 8;
     HEAP8[$3 + 18 | 0] = $0 >>> 16;
     HEAP8[$3 + 19 | 0] = $0 >>> 24;
     break label$8;
    }
    $0 = (HEAPU8[$3 + 16 | 0] | HEAPU8[$3 + 17 | 0] << 8 | (HEAPU8[$3 + 18 | 0] << 16 | HEAPU8[$3 + 19 | 0] << 24)) ^ 32;
    HEAP8[$3 + 16 | 0] = $0;
    HEAP8[$3 + 17 | 0] = $0 >>> 8;
    HEAP8[$3 + 18 | 0] = $0 >>> 16;
    HEAP8[$3 + 19 | 0] = $0 >>> 24;
   }
  }
  graphicsSetVar($3 + 8 | 0);
  HEAP32[$3 + 92 >> 2] = jsvLockAgain(HEAP32[$3 + 88 >> 2]);
 }
 __stack_pointer = $3 + 96 | 0;
 return HEAP32[$3 + 92 >> 2];
}

function jsfBankListFilesHandleFile($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0;
 $7 = __stack_pointer - 80 | 0;
 __stack_pointer = $7;
 HEAP32[$7 + 76 >> 2] = $0;
 HEAP32[$7 + 72 >> 2] = $1;
 HEAP32[$7 + 68 >> 2] = $2;
 HEAP32[$7 + 64 >> 2] = $3;
 HEAP32[$7 + 60 >> 2] = $4;
 HEAP32[$7 + 56 >> 2] = $5;
 HEAP32[$7 + 52 >> 2] = $6;
 HEAP32[$7 + 48 >> 2] = jsfGetFileFlags(HEAP32[$7 + 68 >> 2]);
 label$1: {
  if (!(!HEAP32[$7 + 60 >> 2] | HEAP32[$7 + 60 >> 2] & HEAP32[$7 + 48 >> 2]) | HEAP32[$7 + 56 >> 2] & HEAP32[$7 + 48 >> 2]) {
   break label$1;
  }
  if (HEAP32[$7 + 48 >> 2] & 64) {
   HEAP32[$7 + 44 >> 2] = 0;
   while (1) {
    $0 = 0;
    $0 = (HEAP32[$7 + 44 >> 2] + 1 | 0) < 28 ? HEAP8[(HEAP32[$7 + 68 >> 2] + HEAP32[$7 + 44 >> 2] | 0) + 5 | 0] != 0 : $0;
    if ($0) {
     HEAP32[$7 + 44 >> 2] = HEAP32[$7 + 44 >> 2] + 1;
     continue;
    }
    break;
   }
   if (HEAP8[HEAP32[$7 + 44 >> 2] + (HEAP32[$7 + 68 >> 2] + 4 | 0) | 0] != 1) {
    break label$1;
   }
   if (HEAP32[$7 + 60 >> 2] & 64) {
    HEAP8[HEAP32[$7 + 44 >> 2] + (HEAP32[$7 + 68 >> 2] + 4 | 0) | 0] = 0;
   }
  }
  $1 = HEAP32[$7 + 68 >> 2];
  HEAP32[$7 + 24 >> 2] = HEAP32[$1 + 28 >> 2];
  $0 = HEAP32[$1 + 20 >> 2];
  $2 = HEAP32[$1 + 24 >> 2];
  HEAP32[$7 + 16 >> 2] = $0;
  HEAP32[$7 + 20 >> 2] = $2;
  $0 = HEAP32[$1 + 16 >> 2];
  $2 = HEAP32[$1 + 12 >> 2];
  HEAP32[$7 + 8 >> 2] = $2;
  HEAP32[$7 + 12 >> 2] = $0;
  $2 = HEAP32[$1 + 8 >> 2];
  $0 = HEAP32[$1 + 4 >> 2];
  HEAP32[$7 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = $2;
  HEAP32[$7 + 40 >> 2] = jsfVarFromName($7);
  HEAP8[$7 + 39 | 0] = 1;
  if (HEAP32[$7 + 64 >> 2]) {
   HEAP32[$7 + 32 >> 2] = jswrap_string_match(HEAP32[$7 + 40 >> 2], HEAP32[$7 + 64 >> 2]);
   $0 = 1;
   if (!(jsvIsUndefined(HEAP32[$7 + 32 >> 2]) & 1)) {
    $0 = jsvIsNull(HEAP32[$7 + 32 >> 2]);
   }
   HEAP8[$7 + 39 | 0] = ($0 ^ -1) & 1;
   jsvUnLock(HEAP32[$7 + 32 >> 2]);
  }
  if (!(!HEAP32[$7 + 52 >> 2] | !(HEAP8[$7 + 39 | 0] & 1))) {
   HEAP32[HEAP32[$7 + 52 >> 2] >> 2] = HEAP32[HEAP32[$7 + 52 >> 2] >> 2] << 1 | HEAP32[HEAP32[$7 + 52 >> 2] >> 2] >>> 31;
   $0 = HEAP32[HEAP32[$7 + 52 >> 2] >> 2] ^ HEAP32[$7 + 72 >> 2];
   $1 = jsvGetIntegerAndUnLock(jswrap_espruino_CRC32(HEAP32[$7 + 40 >> 2]));
   HEAP32[HEAP32[$7 + 52 >> 2] >> 2] = $0 ^ $1;
  }
  if (!(!(HEAP8[$7 + 39 | 0] & 1) | !HEAP32[$7 + 76 >> 2])) {
   jsvArrayPushAndUnLock(HEAP32[$7 + 76 >> 2], HEAP32[$7 + 40 >> 2]);
   break label$1;
  }
  jsvUnLock(HEAP32[$7 + 40 >> 2]);
 }
 __stack_pointer = $7 + 80 | 0;
}

function jspGetNamedFieldInParents($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP8[$3 + 39 | 0] = $2;
 HEAP32[$3 + 32 >> 2] = jspeiFindChildFromStringInParents(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 40 >> 2]);
 if (!HEAP32[$3 + 32 >> 2]) {
  HEAP32[$3 + 32 >> 2] = jswFindBuiltInFunction(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 40 >> 2]);
 }
 if (!(!HEAP32[$3 + 32 >> 2] | !(HEAP8[$3 + 39 | 0] & 1))) {
  if (jsvIsName(HEAP32[$3 + 32 >> 2]) & 1) {
   HEAP32[$3 + 28 >> 2] = jsvGetValueOfName(HEAP32[$3 + 32 >> 2]);
   jsvUnLock(HEAP32[$3 + 32 >> 2]);
   HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 28 >> 2];
  }
  HEAP32[$3 + 24 >> 2] = jsvNewNameFromString(HEAP32[$3 + 40 >> 2]);
  HEAP32[$3 + 20 >> 2] = jsvCreateNewChild(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 32 >> 2]);
  jsvUnLock2(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 32 >> 2]);
  HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 20 >> 2];
  label$4: {
   if (!HEAP32[$3 + 32 >> 2]) {
    break label$4;
   }
   if (!(jsvIsArray(HEAP32[$3 + 44 >> 2]) & 1)) {
    break label$4;
   }
   if (strcmp(HEAP32[$3 + 40 >> 2], 103358)) {
    break label$4;
   }
   $0 = HEAP32[$3 + 32 >> 2];
   $1 = HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8 | 64;
   HEAP8[$0 + 11 | 0] = $1;
   HEAP8[$0 + 12 | 0] = $1 >>> 8;
  }
 }
 if (!HEAP32[$3 + 32 >> 2]) {
  label$6: {
   label$7: {
    if (!(jsvIsFunction(HEAP32[$3 + 44 >> 2]) & 1)) {
     break label$7;
    }
    if (strcmp(HEAP32[$3 + 40 >> 2], 104794)) {
     break label$7;
    }
    HEAP32[$3 + 16 >> 2] = jsvNewObject();
    jsvObjectSetChild(HEAP32[$3 + 16 >> 2], 100982, HEAP32[$3 + 44 >> 2]);
    HEAP32[$3 + 32 >> 2] = jsvAddNamedChild(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 16 >> 2], 104794);
    jspEnsureIsPrototype(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 32 >> 2]);
    jsvUnLock(HEAP32[$3 + 16 >> 2]);
    break label$6;
   }
   if (!strcmp(HEAP32[$3 + 40 >> 2], 107914)) {
    HEAP32[$3 + 12 >> 2] = jswGetBasicObjectName(HEAP32[$3 + 44 >> 2]);
    if (HEAP32[$3 + 12 >> 2]) {
     HEAP32[$3 + 8 >> 2] = jsvSkipNameAndUnLock(jspNewPrototype(HEAP32[$3 + 12 >> 2], 0));
     HEAP32[$3 + 4 >> 2] = jsvNewNameFromString(107914);
     if (HEAP32[$3 + 8 >> 2]) {
      HEAP32[$3 + 32 >> 2] = jsvCreateNewChild(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 4 >> 2], HEAP32[$3 + 8 >> 2]);
     }
     jsvUnLock2(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
    }
   }
  }
 }
 __stack_pointer = $3 + 48 | 0;
 return HEAP32[$3 + 32 >> 2];
}

function jswrap_graphics_fillPoly_X($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 192 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 184 >> 2] = $0;
 HEAP32[$3 + 180 >> 2] = $1;
 HEAP8[$3 + 179 | 0] = $2;
 label$1: {
  if (!(graphicsGetFromVar($3 + 104 | 0, HEAP32[$3 + 184 >> 2]) & 1)) {
   HEAP32[$3 + 188 >> 2] = 0;
   break label$1;
  }
  if (!(jsvIsIterable(HEAP32[$3 + 180 >> 2]) & 1)) {
   HEAP32[$3 + 188 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 100 >> 2] = 128;
  HEAP32[$3 + 96 >> 2] = $3;
  $0 = $3 - 256 | 0;
  __stack_pointer = $0;
  HEAP32[$3 + 92 >> 2] = 0;
  jsvIteratorNew($3 + 32 | 0, HEAP32[$3 + 180 >> 2], 1);
  while (1) {
   $1 = 0;
   if (jsvIteratorHasElement($3 + 32 | 0) & 1) {
    $1 = HEAP32[$3 + 92 >> 2] < 128;
   }
   if ($1) {
    $4 = jsvIteratorGetFloatValue($3 + 32 | 0) * 16 + .5;
    label$7: {
     if (Math_abs($4) < 2147483648) {
      $1 = ~~$4;
      break label$7;
     }
     $1 = -2147483648;
    }
    HEAP32[$3 + 28 >> 2] = $1;
    if (HEAP32[$3 + 28 >> 2] < -32768) {
     HEAP32[$3 + 28 >> 2] = -32768;
    }
    if (HEAP32[$3 + 28 >> 2] > 32767) {
     HEAP32[$3 + 28 >> 2] = 32767;
    }
    $1 = HEAP32[$3 + 28 >> 2];
    $2 = HEAP32[$3 + 92 >> 2];
    HEAP32[$3 + 92 >> 2] = $2 + 1;
    HEAP16[($2 << 1) + $0 >> 1] = $1;
    jsvIteratorNext($3 + 32 | 0);
    continue;
   }
   break;
  }
  if (jsvIteratorHasElement($3 + 32 | 0) & 1) {
   HEAP32[$3 >> 2] = 64;
   jsExceptionHere(1, 96436, $3);
  }
  jsvIteratorFree($3 + 32 | 0);
  if (HEAP8[$3 + 179 | 0] & 1) {
   HEAP32[$3 + 24 >> 2] = HEAP16[(HEAP32[$3 + 92 >> 2] - 2 << 1) + $0 >> 1];
   HEAP32[$3 + 20 >> 2] = HEAP16[(HEAP32[$3 + 92 >> 2] - 1 << 1) + $0 >> 1];
   HEAP32[$3 + 16 >> 2] = 0;
   while (1) {
    if (HEAP32[$3 + 16 >> 2] < HEAP32[$3 + 92 >> 2]) {
     HEAP32[$3 + 12 >> 2] = HEAP16[(HEAP32[$3 + 16 >> 2] << 1) + $0 >> 1];
     HEAP32[$3 + 8 >> 2] = HEAP16[(HEAP32[$3 + 16 >> 2] + 1 << 1) + $0 >> 1];
     graphicsDrawLineAA($3 + 104 | 0, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
     HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 12 >> 2];
     HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 8 >> 2];
     HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 16 >> 2] + 2;
     continue;
    }
    break;
   }
  }
  graphicsFillPoly($3 + 104 | 0, HEAP32[$3 + 92 >> 2] / 2 | 0, $0);
  graphicsSetVar($3 + 104 | 0);
  HEAP32[$3 + 188 >> 2] = jsvLockAgain(HEAP32[$3 + 184 >> 2]);
 }
 __stack_pointer = $3 + 192 | 0;
 return HEAP32[$3 + 188 >> 2];
}

function jsfFindFile($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 112 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 104 >> 2] = $1;
 jsfStripDriveFromName($0, 1);
 $5 = HEAP32[$2 + 104 >> 2];
 HEAP32[$2 + 56 >> 2] = HEAP32[$0 + 24 >> 2];
 $4 = $0;
 $1 = HEAP32[$4 + 16 >> 2];
 $3 = HEAP32[$4 + 20 >> 2];
 HEAP32[$2 + 48 >> 2] = $1;
 HEAP32[$2 + 52 >> 2] = $3;
 $1 = HEAP32[$4 + 12 >> 2];
 $3 = HEAP32[$4 + 8 >> 2];
 HEAP32[$2 + 40 >> 2] = $3;
 HEAP32[$2 + 44 >> 2] = $1;
 $3 = HEAP32[$4 + 4 >> 2];
 $1 = HEAP32[$4 >> 2];
 HEAP32[$2 + 32 >> 2] = $1;
 HEAP32[$2 + 36 >> 2] = $3;
 HEAP32[$2 + 100 >> 2] = jsfCacheFind($2 + 32 | 0, $5);
 if (HEAP32[$2 + 100 >> 2] == -1) {
  HEAP32[$2 + 24 >> 2] = HEAP32[$0 + 24 >> 2];
  $3 = HEAP32[$0 + 16 >> 2];
  $1 = HEAP32[$4 + 20 >> 2];
  HEAP32[$2 + 16 >> 2] = $3;
  HEAP32[$2 + 20 >> 2] = $1;
  $3 = HEAP32[$4 + 12 >> 2];
  $1 = HEAP32[$4 + 8 >> 2];
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 12 >> 2] = $3;
  $1 = HEAP32[$4 + 4 >> 2];
  $3 = HEAP32[$4 >> 2];
  HEAP32[$2 >> 2] = $3;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[$2 + 100 >> 2] = jsfBankFindFile(134217728, 138412032, $2, $2 - -64 | 0);
  if (!HEAP32[$2 + 100 >> 2]) {
   $1 = HEAP32[$0 >> 2];
   $3 = HEAP32[$4 + 4 >> 2];
   $5 = $1;
   $0 = $2 - -64 | 0;
   $1 = $0;
   HEAP32[$1 + 4 >> 2] = $5;
   HEAP32[$1 + 8 >> 2] = $3;
   HEAP32[$1 + 28 >> 2] = HEAP32[$4 + 24 >> 2];
   $1 = HEAP32[$4 + 20 >> 2];
   $3 = HEAP32[$4 + 16 >> 2];
   $5 = $3;
   $3 = $0;
   HEAP32[$3 + 20 >> 2] = $5;
   HEAP32[$3 + 24 >> 2] = $1;
   $3 = HEAP32[$4 + 12 >> 2];
   $1 = HEAP32[$4 + 8 >> 2];
   $4 = $1;
   $1 = $0;
   HEAP32[$1 + 12 >> 2] = $4;
   HEAP32[$1 + 16 >> 2] = $3;
  }
  jsfCachePut($2 - -64 | 0, HEAP32[$2 + 100 >> 2]);
  if (HEAP32[$2 + 104 >> 2]) {
   $1 = HEAP32[$2 + 68 >> 2];
   $3 = HEAP32[$2 + 64 >> 2];
   $4 = $3;
   $0 = HEAP32[$2 + 104 >> 2];
   $3 = $0;
   HEAP32[$3 >> 2] = $4;
   HEAP32[$3 + 4 >> 2] = $1;
   $3 = HEAP32[$2 + 92 >> 2];
   $1 = HEAP32[$2 + 88 >> 2];
   $4 = $1;
   $1 = $0;
   HEAP32[$1 + 24 >> 2] = $4;
   HEAP32[$1 + 28 >> 2] = $3;
   $1 = HEAP32[$2 + 84 >> 2];
   $3 = HEAP32[$2 + 80 >> 2];
   $4 = $3;
   $3 = $0;
   HEAP32[$3 + 16 >> 2] = $4;
   HEAP32[$3 + 20 >> 2] = $1;
   $3 = HEAP32[$2 + 76 >> 2];
   $1 = HEAP32[$2 + 72 >> 2];
   $4 = $1;
   $1 = $0;
   HEAP32[$1 + 8 >> 2] = $4;
   HEAP32[$1 + 12 >> 2] = $3;
  }
 }
 HEAP32[$2 + 108 >> 2] = HEAP32[$2 + 100 >> 2];
 __stack_pointer = $2 + 112 | 0;
 return HEAP32[$2 + 108 >> 2];
}

function tflite__MicroMutableOpResolver_9u___AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration_20const__2c_20TfLiteStatus_20_28__29_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 40 >> 2] = $0;
 HEAP32[$4 + 36 >> 2] = $1;
 HEAP32[$4 + 32 >> 2] = $2;
 HEAP32[$4 + 28 >> 2] = $3;
 $5 = HEAP32[$4 + 40 >> 2];
 label$1: {
  if (HEAP32[$4 + 36 >> 2] == 32) {
   if (HEAP32[$5 + 372 >> 2]) {
    tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$5 + 372 >> 2], 111780, 0);
   }
   HEAP32[$4 + 44 >> 2] = 1;
   break label$1;
  }
  if (FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 20 >> 2]]($5, HEAP32[$4 + 36 >> 2]) | 0) {
   if (HEAP32[$5 + 372 >> 2]) {
    $0 = HEAP32[$5 + 372 >> 2];
    HEAP32[$4 >> 2] = HEAP32[$4 + 36 >> 2];
    tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 112407, $4);
   }
   HEAP32[$4 + 44 >> 2] = 1;
   break label$1;
  }
  if (HEAPU32[$5 + 292 >> 2] >= 9) {
   if (HEAP32[$5 + 372 >> 2]) {
    $0 = HEAP32[$5 + 372 >> 2];
    $1 = HEAP32[$4 + 36 >> 2];
    HEAP32[$4 + 20 >> 2] = 9;
    HEAP32[$4 + 16 >> 2] = $1;
    tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 112340, $4 + 16 | 0);
   }
   HEAP32[$4 + 44 >> 2] = 1;
   break label$1;
  }
  $6 = HEAP32[$4 + 32 >> 2];
  $0 = HEAP32[$6 >> 2];
  $1 = HEAP32[$6 + 4 >> 2];
  $3 = $0;
  $2 = ($5 + 4 | 0) + (HEAP32[$5 + 292 >> 2] << 5) | 0;
  $0 = $2;
  HEAP32[$0 >> 2] = $3;
  HEAP32[$0 + 4 >> 2] = $1;
  $0 = HEAP32[$6 + 28 >> 2];
  $1 = HEAP32[$6 + 24 >> 2];
  $3 = $1;
  $1 = $2;
  HEAP32[$1 + 24 >> 2] = $3;
  HEAP32[$1 + 28 >> 2] = $0;
  $1 = HEAP32[$6 + 20 >> 2];
  $0 = HEAP32[$6 + 16 >> 2];
  $3 = $0;
  $0 = $2;
  HEAP32[$0 + 16 >> 2] = $3;
  HEAP32[$0 + 20 >> 2] = $1;
  $0 = HEAP32[$6 + 12 >> 2];
  $1 = HEAP32[$6 + 8 >> 2];
  $3 = $1;
  $1 = $2;
  HEAP32[$1 + 8 >> 2] = $3;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[(($5 + 4 | 0) + (HEAP32[$5 + 292 >> 2] << 5) | 0) + 20 >> 2] = HEAP32[$4 + 36 >> 2];
  HEAP32[$5 + 292 >> 2] = HEAP32[$5 + 292 >> 2] + 1;
  HEAP32[($5 + 296 | 0) + (HEAP32[$5 + 368 >> 2] << 2) >> 2] = HEAP32[$4 + 36 >> 2];
  HEAP32[($5 + 332 | 0) + (HEAP32[$5 + 368 >> 2] << 2) >> 2] = HEAP32[$4 + 28 >> 2];
  HEAP32[$5 + 368 >> 2] = HEAP32[$5 + 368 >> 2] + 1;
  HEAP32[$4 + 44 >> 2] = 0;
 }
 __stack_pointer = $4 + 48 | 0;
 return HEAP32[$4 + 44 >> 2];
}

function jswrap_array_slice($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 112 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 104 >> 2] = $0;
 HEAP32[$3 + 100 >> 2] = $1;
 HEAP32[$3 + 96 >> 2] = $2;
 HEAP32[$3 + 92 >> 2] = jsvGetLength(HEAP32[$3 + 104 >> 2]);
 HEAP32[$3 + 88 >> 2] = HEAP32[$3 + 92 >> 2];
 if (!(jsvIsUndefined(HEAP32[$3 + 96 >> 2]) & 1)) {
  HEAP32[$3 + 88 >> 2] = jsvGetInteger(HEAP32[$3 + 96 >> 2]);
 }
 HEAP32[$3 + 84 >> 2] = 0;
 HEAP32[$3 + 80 >> 2] = HEAP32[$3 + 92 >> 2];
 HEAP32[$3 + 76 >> 2] = jsvNewEmptyArray();
 label$2: {
  if (!HEAP32[$3 + 76 >> 2]) {
   HEAP32[$3 + 108 >> 2] = 0;
   break label$2;
  }
  label$4: {
   if (HEAP32[$3 + 100 >> 2] < 0) {
    if ((HEAP32[$3 + 92 >> 2] + HEAP32[$3 + 100 >> 2] | 0) > 0) {
     $0 = HEAP32[$3 + 92 >> 2] + HEAP32[$3 + 100 >> 2] | 0;
    } else {
     $0 = 0;
    }
    HEAP32[$3 + 84 >> 2] = $0;
    break label$4;
   }
   if (HEAP32[$3 + 100 >> 2] < HEAP32[$3 + 92 >> 2]) {
    $0 = HEAP32[$3 + 100 >> 2];
   } else {
    $0 = HEAP32[$3 + 92 >> 2];
   }
   HEAP32[$3 + 84 >> 2] = $0;
  }
  label$10: {
   if (HEAP32[$3 + 88 >> 2] < 0) {
    if ((HEAP32[$3 + 92 >> 2] + HEAP32[$3 + 88 >> 2] | 0) > 0) {
     $0 = HEAP32[$3 + 92 >> 2] + HEAP32[$3 + 88 >> 2] | 0;
    } else {
     $0 = 0;
    }
    HEAP32[$3 + 80 >> 2] = $0;
    break label$10;
   }
   if (HEAP32[$3 + 88 >> 2] < HEAP32[$3 + 92 >> 2]) {
    $0 = HEAP32[$3 + 88 >> 2];
   } else {
    $0 = HEAP32[$3 + 92 >> 2];
   }
   HEAP32[$3 + 80 >> 2] = $0;
  }
  HEAP8[$3 + 75 | 0] = 0;
  jsvIteratorNew($3 + 8 | 0, HEAP32[$3 + 104 >> 2], 1);
  while (1) {
   $0 = 0;
   if (jsvIteratorHasElement($3 + 8 | 0) & 1) {
    $0 = HEAPU8[$3 + 75 | 0] ^ -1;
   }
   if ($0 & 1) {
    HEAP32[$3 + 4 >> 2] = jsvGetIntegerAndUnLock(jsvIteratorGetKey($3 + 8 | 0));
    label$19: {
     if (HEAP32[$3 + 4 >> 2] < HEAP32[$3 + 84 >> 2]) {
      jsvIteratorNext($3 + 8 | 0);
      break label$19;
     }
     label$21: {
      if (HEAP32[$3 + 84 >> 2] < HEAP32[$3 + 80 >> 2]) {
       jsvArrayPushAndUnLock(HEAP32[$3 + 76 >> 2], jsvIteratorGetValue($3 + 8 | 0));
       jsvIteratorNext($3 + 8 | 0);
       HEAP32[$3 + 84 >> 2] = HEAP32[$3 + 84 >> 2] + 1;
       break label$21;
      }
      HEAP8[$3 + 75 | 0] = 1;
     }
    }
    continue;
   }
   break;
  }
  jsvIteratorFree($3 + 8 | 0);
  HEAP32[$3 + 108 >> 2] = HEAP32[$3 + 76 >> 2];
 }
 __stack_pointer = $3 + 112 | 0;
 return HEAP32[$3 + 108 >> 2];
}

function heatshrink_encoder_poll($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 40 >> 2] = $0;
 HEAP32[$4 + 36 >> 2] = $1;
 HEAP32[$4 + 32 >> 2] = $2;
 HEAP32[$4 + 28 >> 2] = $3;
 label$1: {
  if (HEAP32[$4 + 28 >> 2] ? !HEAP32[$4 + 40 >> 2] | !HEAP32[$4 + 36 >> 2] : 1) {
   HEAP32[$4 + 44 >> 2] = -1;
   break label$1;
  }
  if (!HEAP32[$4 + 32 >> 2]) {
   HEAP32[$4 + 44 >> 2] = -2;
   break label$1;
  }
  HEAP32[HEAP32[$4 + 28 >> 2] >> 2] = 0;
  HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 36 >> 2];
  HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 32 >> 2];
  HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 28 >> 2];
  while (1) {
   HEAP8[$4 + 15 | 0] = HEAPU8[HEAP32[$4 + 40 >> 2] + 12 | 0];
   label$6: {
    label$7: {
     switch (HEAPU8[$4 + 15 | 0]) {
     case 0:
      HEAP32[$4 + 44 >> 2] = 0;
      break label$1;

     case 1:
      do_indexing(HEAP32[$4 + 40 >> 2]);
      HEAP8[HEAP32[$4 + 40 >> 2] + 12 | 0] = 2;
      break label$6;

     case 2:
      $0 = st_step_search(HEAP32[$4 + 40 >> 2]);
      HEAP8[HEAP32[$4 + 40 >> 2] + 12 | 0] = $0;
      break label$6;

     case 3:
      $0 = st_yield_tag_bit(HEAP32[$4 + 40 >> 2], $4 + 16 | 0);
      HEAP8[HEAP32[$4 + 40 >> 2] + 12 | 0] = $0;
      break label$6;

     case 4:
      $0 = st_e_yield_literal(HEAP32[$4 + 40 >> 2], $4 + 16 | 0);
      HEAP8[HEAP32[$4 + 40 >> 2] + 12 | 0] = $0;
      break label$6;

     case 5:
      $0 = st_yield_br_index(HEAP32[$4 + 40 >> 2], $4 + 16 | 0);
      HEAP8[HEAP32[$4 + 40 >> 2] + 12 | 0] = $0;
      break label$6;

     case 6:
      $0 = st_yield_br_length(HEAP32[$4 + 40 >> 2], $4 + 16 | 0);
      HEAP8[HEAP32[$4 + 40 >> 2] + 12 | 0] = $0;
      break label$6;

     case 7:
      $0 = st_save_backlog(HEAP32[$4 + 40 >> 2]);
      HEAP8[HEAP32[$4 + 40 >> 2] + 12 | 0] = $0;
      break label$6;

     case 8:
      $0 = st_flush_bit_buffer(HEAP32[$4 + 40 >> 2], $4 + 16 | 0);
      HEAP8[HEAP32[$4 + 40 >> 2] + 12 | 0] = $0;
      HEAP32[$4 + 44 >> 2] = 0;
      break label$1;

     case 9:
      HEAP32[$4 + 44 >> 2] = 0;
      break label$1;

     default:
      break label$7;
     }
    }
    HEAP32[$4 + 44 >> 2] = -2;
    break label$1;
   }
   if (!(HEAPU8[HEAP32[$4 + 40 >> 2] + 12 | 0] == HEAPU8[$4 + 15 | 0] & HEAP32[HEAP32[$4 + 28 >> 2] >> 2] == HEAP32[$4 + 32 >> 2])) {
    continue;
   }
   break;
  }
  HEAP32[$4 + 44 >> 2] = 1;
 }
 __stack_pointer = $4 + 48 | 0;
 return HEAP32[$4 + 44 >> 2];
}

function tflite__ops__micro__activations__SoftmaxPrepare_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer + -64 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 56 >> 2] = $0;
 HEAP32[$2 + 52 >> 2] = $1;
 HEAP32[$2 + 48 >> 2] = HEAP32[HEAP32[$2 + 52 >> 2] + 12 >> 2];
 label$1: {
  if ((tflite__NumInputs_28TfLiteNode_20const__29(HEAP32[$2 + 52 >> 2]) | 0) != 1) {
   $0 = HEAP32[HEAP32[$2 + 56 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 56 >> 2];
   $3 = tflite__NumInputs_28TfLiteNode_20const__29(HEAP32[$2 + 52 >> 2]);
   HEAP32[$2 + 12 >> 2] = 1;
   HEAP32[$2 + 8 >> 2] = $3;
   HEAP32[$2 + 4 >> 2] = 111277;
   HEAP32[$2 >> 2] = 126274;
   FUNCTION_TABLE[$0 | 0]($1, 126505, $2);
   HEAP32[$2 + 60 >> 2] = 1;
   break label$1;
  }
  if ((tflite__NumOutputs_28TfLiteNode_20const__29(HEAP32[$2 + 52 >> 2]) | 0) != 1) {
   $0 = HEAP32[HEAP32[$2 + 56 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 56 >> 2];
   $3 = tflite__NumOutputs_28TfLiteNode_20const__29(HEAP32[$2 + 52 >> 2]);
   HEAP32[$2 + 28 >> 2] = 1;
   HEAP32[$2 + 24 >> 2] = $3;
   HEAP32[$2 + 20 >> 2] = 111277;
   HEAP32[$2 + 16 >> 2] = 126257;
   FUNCTION_TABLE[$0 | 0]($1, 126505, $2 + 16 | 0);
   HEAP32[$2 + 60 >> 2] = 1;
   break label$1;
  }
  HEAP32[$2 + 44 >> 2] = tflite__GetInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2], 0);
  if ((tflite__NumDimensions_28TfLiteTensor_20const__29(HEAP32[$2 + 44 >> 2]) | 0) <= 0) {
   $0 = HEAP32[HEAP32[$2 + 56 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 56 >> 2];
   HEAP32[$2 + 32 >> 2] = 111215;
   FUNCTION_TABLE[$0 | 0]($1, 111890, $2 + 32 | 0);
   HEAP32[$2 + 60 >> 2] = 1;
   break label$1;
  }
  HEAP32[$2 + 40 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2], 0);
  label$5: {
   if (!HEAP32[HEAP32[$2 + 52 >> 2] + 8 >> 2]) {
    break label$5;
   }
  }
  HEAP32[$2 + 36 >> 2] = HEAP32[HEAP32[$2 + 52 >> 2] + 8 >> 2];
  HEAP32[$2 + 60 >> 2] = tflite__ops__micro__activations___28anonymous_20namespace_29__CalculateSoftmaxParams_28TfLiteContext__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20TfLiteSoftmaxParams_20const__2c_20tflite__SoftmaxParams__29(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 44 >> 2], HEAP32[$2 + 40 >> 2], HEAP32[$2 + 48 >> 2], HEAP32[$2 + 36 >> 2]);
 }
 __stack_pointer = $2 - -64 | 0;
 return HEAP32[$2 + 60 >> 2];
}

function jswrap_banglejs_appRect() {
 var $0 = 0;
 $0 = __stack_pointer - 48 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 40 >> 2] = jsvNewObject();
 label$1: {
  if (!HEAP32[$0 + 40 >> 2]) {
   HEAP32[$0 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$0 + 36 >> 2] = jsvObjectGetChildIfExists(HEAP32[46747], 108791);
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  if (jsvIsObject(HEAP32[$0 + 36 >> 2]) & 1) {
   jsvObjectIteratorNew($0 + 24 | 0, HEAP32[$0 + 36 >> 2]);
   while (1) {
    if (jsvObjectIteratorHasValue_5($0 + 24 | 0) & 1) {
     HEAP32[$0 + 20 >> 2] = jsvObjectIteratorGetValue_5($0 + 24 | 0);
     HEAP32[$0 + 16 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 20 >> 2], 107905);
     HEAP32[$0 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 20 >> 2], 103393);
     label$6: {
      if (!(jsvIsString(HEAP32[$0 + 16 >> 2]) & 1)) {
       break label$6;
      }
      if (!(jsvIsNumeric(HEAP32[$0 + 12 >> 2]) & 1)) {
       break label$6;
      }
      HEAP8[$0 + 11 | 0] = jsvGetCharInString(HEAP32[$0 + 16 >> 2], 0);
      HEAP32[$0 + 4 >> 2] = jsvGetIntegerAndUnLock(HEAP32[$0 + 12 >> 2]);
      if (!(HEAP8[$0 + 11 | 0] != 116 | HEAP32[$0 + 4 >> 2] <= 0)) {
       HEAP32[$0 + 32 >> 2] = 24;
      }
      if (!(HEAP8[$0 + 11 | 0] != 98 | HEAP32[$0 + 4 >> 2] <= 0)) {
       HEAP32[$0 + 28 >> 2] = 24;
      }
     }
     jsvUnLock2(HEAP32[$0 + 16 >> 2], HEAP32[$0 + 20 >> 2]);
     jsvObjectIteratorNext($0 + 24 | 0);
     continue;
    }
    break;
   }
   jsvObjectIteratorFree_5($0 + 24 | 0);
  }
  jsvUnLock(HEAP32[$0 + 36 >> 2]);
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 40 >> 2], 96763, jsvNewFromInteger(0));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 40 >> 2], 96676, jsvNewFromInteger(HEAP32[$0 + 32 >> 2]));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 40 >> 2], 97016, jsvNewFromInteger(HEAPU8[189440] | HEAPU8[189441] << 8));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 40 >> 2], 103644, jsvNewFromInteger((HEAPU8[189442] | HEAPU8[189443] << 8) - (HEAP32[$0 + 32 >> 2] + HEAP32[$0 + 28 >> 2] | 0) | 0));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 40 >> 2], 110879, jsvNewFromInteger((HEAPU8[189440] | HEAPU8[189441] << 8) - 1 | 0));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 40 >> 2], 110876, jsvNewFromInteger((HEAPU8[189442] | HEAPU8[189443] << 8) - (HEAP32[$0 + 28 >> 2] + 1 | 0) | 0));
  HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 40 >> 2];
 }
 __stack_pointer = $0 + 48 | 0;
 return HEAP32[$0 + 44 >> 2];
}

function handlePipe($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer + -64 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 56 >> 2] = $0;
 HEAP32[$3 + 52 >> 2] = $1;
 HEAP32[$3 + 48 >> 2] = $2;
 HEAP8[$3 + 47 | 0] = jsvObjectGetBoolChild(HEAP32[$3 + 48 >> 2], 97874) & 1;
 label$1: {
  if (HEAP8[$3 + 47 | 0] & 1) {
   HEAP8[$3 + 63 | 0] = 0;
   break label$1;
  }
  HEAP32[$3 + 40 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 48 >> 2], 104295);
  HEAP32[$3 + 36 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 48 >> 2], 105447);
  HEAP32[$3 + 32 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 48 >> 2], 102458);
  HEAP8[$3 + 31 | 0] = 0;
  if (!(!HEAP32[$3 + 40 >> 2] | (!HEAP32[$3 + 36 >> 2] | !HEAP32[$3 + 32 >> 2]))) {
   HEAP32[$3 + 24 >> 2] = jspGetNamedField(HEAP32[$3 + 36 >> 2], 107017, 0);
   HEAP32[$3 + 20 >> 2] = jspGetNamedField(HEAP32[$3 + 32 >> 2], 104604, 0);
   label$4: {
    label$5: {
     if (!(jsvIsFunction(HEAP32[$3 + 24 >> 2]) & 1)) {
      break label$5;
     }
     if (!(jsvIsFunction(HEAP32[$3 + 20 >> 2]) & 1)) {
      break label$5;
     }
     HEAP32[$3 + 16 >> 2] = jspExecuteFunction(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 36 >> 2], 1, $3 + 40 | 0);
     if (HEAP32[$3 + 16 >> 2]) {
      HEAP32[$3 + 12 >> 2] = jsvGetLength(HEAP32[$3 + 16 >> 2]);
      if (HEAP32[$3 + 12 >> 2] > 0) {
       HEAP32[$3 + 8 >> 2] = jspExecuteFunction(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 32 >> 2], 1, $3 + 16 | 0);
       label$8: {
        if (!(jsvIsBoolean(HEAP32[$3 + 8 >> 2]) & 1)) {
         break label$8;
        }
        if (jsvGetBool(HEAP32[$3 + 8 >> 2]) & 1) {
         break label$8;
        }
        jsvObjectSetChildAndUnLock(HEAP32[$3 + 48 >> 2], 97874, jsvNewFromBool(1));
       }
       jsvUnLock(HEAP32[$3 + 8 >> 2]);
      }
      jsvUnLock(HEAP32[$3 + 16 >> 2]);
      HEAP8[$3 + 31 | 0] = 1;
     }
     break label$4;
    }
    if (!(jsvIsFunction(HEAP32[$3 + 24 >> 2]) & 1)) {
     jsExceptionHere(1, 105597, 0);
    }
    if (!(jsvIsFunction(HEAP32[$3 + 20 >> 2]) & 1)) {
     jsExceptionHere(1, 105525, 0);
    }
   }
   jsvUnLock2(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
  }
  if (!(HEAP8[$3 + 31 | 0] & 1)) {
   handlePipeClose(HEAP32[$3 + 56 >> 2], HEAP32[$3 + 52 >> 2], HEAP32[$3 + 48 >> 2]);
  }
  jsvUnLock3(HEAP32[$3 + 36 >> 2], HEAP32[$3 + 32 >> 2], HEAP32[$3 + 40 >> 2]);
  HEAP8[$3 + 63 | 0] = HEAP8[$3 + 31 | 0] & 1;
 }
 __stack_pointer = $3 - -64 | 0;
 return HEAP8[$3 + 63 | 0] & 1;
}

function lcdGetPixel_ArrayBuffer($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 112 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 108 >> 2] = $0;
 HEAP32[$3 + 104 >> 2] = $1;
 HEAP32[$3 + 100 >> 2] = $2;
 HEAP32[$3 + 96 >> 2] = 0;
 $0 = HEAP32[$3 + 108 >> 2];
 HEAP32[$3 + 92 >> 2] = HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24);
 HEAP32[$3 + 88 >> 2] = lcdGetPixelIndex_ArrayBuffer(HEAP32[$3 + 108 >> 2], HEAP32[$3 + 104 >> 2], HEAP32[$3 + 100 >> 2], 1);
 jsvArrayBufferIteratorNew($3 + 32 | 0, HEAP32[$3 + 92 >> 2], HEAP32[$3 + 88 >> 2] >>> 3 | 0);
 label$1: {
  if (HEAPU8[HEAP32[$3 + 108 >> 2] + 16 | 0] & 7) {
   HEAP32[$3 + 88 >> 2] = HEAP32[$3 + 88 >> 2] & 7;
   HEAP32[$3 + 28 >> 2] = (1 << HEAPU8[HEAP32[$3 + 108 >> 2] + 16 | 0]) - 1;
   HEAP32[$3 + 24 >> 2] = jsvArrayBufferIteratorGetIntegerValue($3 + 32 | 0);
   $0 = HEAP32[$3 + 108 >> 2];
   if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 4) {
    $0 = 8 - (HEAP32[$3 + 88 >> 2] + HEAPU8[HEAP32[$3 + 108 >> 2] + 16 | 0] | 0) | 0;
   } else {
    $0 = HEAP32[$3 + 88 >> 2];
   }
   HEAP32[$3 + 20 >> 2] = $0;
   HEAP32[$3 + 96 >> 2] = HEAP32[$3 + 28 >> 2] & HEAP32[$3 + 24 >> 2] >>> HEAP32[$3 + 20 >> 2];
   break label$1;
  }
  $0 = HEAP32[$3 + 108 >> 2];
  label$5: {
   if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 4) {
    HEAP32[$3 + 16 >> 2] = HEAPU8[HEAP32[$3 + 108 >> 2] + 16 | 0] - 8;
    while (1) {
     if (HEAP32[$3 + 16 >> 2] >= 0) {
      HEAP32[$3 + 96 >> 2] = jsvArrayBufferIteratorGetIntegerValue($3 + 32 | 0) << HEAP32[$3 + 16 >> 2] | HEAP32[$3 + 96 >> 2];
      jsvArrayBufferIteratorNext($3 + 32 | 0);
      HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 16 >> 2] - 8;
      continue;
     }
     break;
    }
    break label$5;
   }
   HEAP32[$3 + 12 >> 2] = 0;
   while (1) {
    if (HEAP32[$3 + 12 >> 2] < HEAPU8[HEAP32[$3 + 108 >> 2] + 16 | 0]) {
     HEAP32[$3 + 96 >> 2] = jsvArrayBufferIteratorGetIntegerValue($3 + 32 | 0) << HEAP32[$3 + 12 >> 2] | HEAP32[$3 + 96 >> 2];
     jsvArrayBufferIteratorNext($3 + 32 | 0);
     HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 8;
     continue;
    }
    break;
   }
  }
 }
 jsvArrayBufferIteratorFree($3 + 32 | 0);
 __stack_pointer = $3 + 112 | 0;
 return HEAP32[$3 + 96 >> 2];
}

function jswrap_espruino_toStringX($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 $2 = __stack_pointer + -64 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 56 >> 2] = $0;
 HEAP8[$2 + 55 | 0] = $1;
 label$1: {
  if ((jsvGetArrayLength(HEAP32[$2 + 56 >> 2]) | 0) == 1) {
   HEAP32[$2 + 48 >> 2] = jsvGetArrayItem(HEAP32[$2 + 56 >> 2], 0);
   label$3: {
    if (!(wasm2js_i32$0 = 0, wasm2js_i32$1 = jsvIsString(HEAP32[$2 + 48 >> 2]) & 1, 
    wasm2js_i32$2 = HEAP8[$2 + 55 | 0] & 1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1)) {
     if (!(jsvIsFlatString(HEAP32[$2 + 48 >> 2]) & 1)) {
      break label$3;
     }
    }
    HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 48 >> 2];
    break label$1;
   }
   label$6: {
    if (!(jsvIsArrayBuffer(HEAP32[$2 + 48 >> 2]) & 1) | (HEAPU8[HEAP32[$2 + 48 >> 2] + 5 | 0] & 15) != 1) {
     break label$6;
    }
    $0 = HEAP32[$2 + 48 >> 2];
    if (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8) {
     break label$6;
    }
    HEAP32[$2 + 44 >> 2] = jsvGetArrayBufferBackingString(HEAP32[$2 + 48 >> 2], 0);
    label$7: {
     if (!(HEAP8[$2 + 55 | 0] & 1 ? 0 : HEAP32[$2 + 44 >> 2])) {
      if (!(jsvIsFlatString(HEAP32[$2 + 44 >> 2]) & 1)) {
       break label$7;
      }
     }
     $1 = jsvGetLength(HEAP32[$2 + 44 >> 2]);
     $0 = HEAP32[$2 + 48 >> 2];
     if (($1 | 0) != (HEAPU8[$0 + 4 | 0] << 16 | (HEAPU8[$0 + 2 | 0] | HEAPU8[$0 + 3 | 0] << 8))) {
      break label$7;
     }
     jsvUnLock(HEAP32[$2 + 48 >> 2]);
     HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 44 >> 2];
     break label$1;
    }
    jsvUnLock(HEAP32[$2 + 44 >> 2]);
   }
   jsvUnLock(HEAP32[$2 + 48 >> 2]);
  }
  HEAP32[$2 + 40 >> 2] = jsvIterateCallbackCount(HEAP32[$2 + 56 >> 2]);
  label$10: {
   if (HEAP8[$2 + 55 | 0] & 1) {
    $0 = jsvNewFlatStringOfLength(HEAP32[$2 + 40 >> 2]);
    break label$10;
   }
   $0 = jsvNewStringOfLength(HEAP32[$2 + 40 >> 2], 0);
  }
  HEAP32[$2 + 36 >> 2] = $0;
  if (!(HEAP32[$2 + 36 >> 2] | !(HEAP8[$2 + 55 | 0] & 1))) {
   jsvDefragment();
   HEAP32[$2 + 36 >> 2] = jsvNewFlatStringOfLength(HEAP32[$2 + 40 >> 2]);
  }
  if (!HEAP32[$2 + 36 >> 2]) {
   HEAP32[$2 + 60 >> 2] = 0;
   break label$1;
  }
  jsvStringIteratorNew($2, HEAP32[$2 + 36 >> 2], 0);
  jsvIterateCallback(HEAP32[$2 + 56 >> 2], 594, $2);
  jsvStringIteratorFree_11($2);
  HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 36 >> 2];
 }
 __stack_pointer = $2 - -64 | 0;
 return HEAP32[$2 + 60 >> 2];
}

function jswrap_array_includes($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 112 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 104 >> 2] = $0;
 HEAP32[$3 + 100 >> 2] = $1;
 HEAP32[$3 + 96 >> 2] = $2;
 if (HEAP32[$3 + 96 >> 2] < 0) {
  HEAP32[$3 + 96 >> 2] = jsvGetLength(HEAP32[$3 + 104 >> 2]) + HEAP32[$3 + 96 >> 2];
 }
 if (HEAP32[$3 + 96 >> 2] < 0) {
  HEAP32[$3 + 96 >> 2] = 0;
 }
 if (jsvIsFloat(HEAP32[$3 + 100 >> 2]) & 1) {
  $0 = __DOUBLE_BITS_3(jsvGetFloat(HEAP32[$3 + 100 >> 2]));
  $2 = $0;
  $1 = i64toi32_i32$HIGH_BITS;
  $0 = $1 & 2147483647;
  $1 = $2;
  $4 = ($0 | 0) == 2146435072 & ($1 | 0) != 0 | $0 >>> 0 > 2146435072;
 }
 HEAP8[$3 + 95 | 0] = $4;
 label$4: {
  if (!(jsvIsIterable(HEAP32[$3 + 104 >> 2]) & 1)) {
   HEAP8[$3 + 111 | 0] = 0;
   break label$4;
  }
  jsvIteratorNew($3 + 32 | 0, HEAP32[$3 + 104 >> 2], 0);
  while (1) {
   if (jsvIteratorHasElement($3 + 32 | 0) & 1) {
    HEAP32[$3 + 28 >> 2] = jsvIteratorGetKey($3 + 32 | 0);
    label$8: {
     if (!(jsvIsInt(HEAP32[$3 + 28 >> 2]) & 1)) {
      break label$8;
     }
     if ((jsvGetInteger(HEAP32[$3 + 28 >> 2]) | 0) < HEAP32[$3 + 96 >> 2]) {
      break label$8;
     }
     HEAP32[$3 + 24 >> 2] = jsvIteratorGetValue($3 + 32 | 0);
     label$9: {
      label$10: {
       if (HEAP32[$3 + 24 >> 2] == HEAP32[$3 + 100 >> 2]) {
        break label$10;
       }
       if (jsvMathsOpTypeEqual(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 100 >> 2]) & 1) {
        break label$10;
       }
       if (!(HEAP8[$3 + 95 | 0] & 1)) {
        break label$9;
       }
       if (!(jsvIsFloat(HEAP32[$3 + 24 >> 2]) & 1)) {
        break label$9;
       }
       $1 = __DOUBLE_BITS_3(jsvGetFloat(HEAP32[$3 + 24 >> 2]));
       $2 = $1;
       $0 = i64toi32_i32$HIGH_BITS;
       $1 = $0 & 2147483647;
       $0 = $2;
       if (($1 | 0) == 2146435072 & ($0 | 0) != 0 | $1 >>> 0 > 2146435072) {
        break label$10;
       }
       break label$9;
      }
      jsvUnLock2(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2]);
      jsvIteratorFree($3 + 32 | 0);
      HEAP8[$3 + 111 | 0] = 1;
      break label$4;
     }
     jsvUnLock(HEAP32[$3 + 24 >> 2]);
    }
    jsvUnLock(HEAP32[$3 + 28 >> 2]);
    jsvIteratorNext($3 + 32 | 0);
    continue;
   }
   break;
  }
  jsvIteratorFree($3 + 32 | 0);
  HEAP8[$3 + 111 | 0] = 0;
 }
 __stack_pointer = $3 + 112 | 0;
 return HEAP8[$3 + 111 | 0] & 1;
}

function jshFromDeviceString($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (HEAP8[HEAP32[$1 + 8 >> 2]] == 76) {
   if (!strcmp(HEAP32[$1 + 8 >> 2] + 1 | 0, 110154)) {
    HEAP8[$1 + 15 | 0] = 17;
    break label$1;
   }
   if (!strcmp(HEAP32[$1 + 8 >> 2] + 1 | 0, 110132)) {
    HEAP8[$1 + 15 | 0] = 18;
    break label$1;
   }
  }
  if (!(HEAP8[HEAP32[$1 + 8 >> 2]] != 85 | HEAP8[HEAP32[$1 + 8 >> 2] + 1 | 0] != 83 | (HEAP8[HEAP32[$1 + 8 >> 2] + 3 | 0] | HEAP8[HEAP32[$1 + 8 >> 2] + 2 | 0] != 66))) {
   HEAP8[$1 + 15 | 0] = 21;
   break label$1;
  }
  label$6: {
   if (HEAP8[HEAP32[$1 + 8 >> 2]] == 84) {
    if (!strcmp(HEAP32[$1 + 8 >> 2] + 1 | 0, 103050)) {
     HEAP8[$1 + 15 | 0] = 20;
     break label$1;
    }
    break label$6;
   }
   label$9: {
    if (HEAP8[HEAP32[$1 + 8 >> 2]] == 83) {
     label$11: {
      if (HEAP8[HEAP32[$1 + 8 >> 2] + 1 | 0] != 101 | HEAP8[HEAP32[$1 + 8 >> 2] + 2 | 0] != 114 | (HEAP8[HEAP32[$1 + 8 >> 2] + 3 | 0] != 105 | HEAP8[HEAP32[$1 + 8 >> 2] + 4 | 0] != 97)) {
       break label$11;
      }
      if (HEAP8[HEAP32[$1 + 8 >> 2] + 5 | 0] != 108 | HEAP8[HEAP32[$1 + 8 >> 2] + 6 | 0] < 49 | (HEAP8[HEAP32[$1 + 8 >> 2] + 7 | 0] | (HEAP8[HEAP32[$1 + 8 >> 2] + 6 | 0] - 49 | 0) > 0)) {
       break label$11;
      }
      HEAP8[$1 + 15 | 0] = HEAP8[HEAP32[$1 + 8 >> 2] + 6 | 0] - 27;
      break label$1;
     }
     label$12: {
      if (HEAP8[HEAP32[$1 + 8 >> 2] + 1 | 0] != 80 | HEAP8[HEAP32[$1 + 8 >> 2] + 2 | 0] != 73 | (HEAP8[HEAP32[$1 + 8 >> 2] + 3 | 0] < 49 | (HEAP8[HEAP32[$1 + 8 >> 2] + 3 | 0] - 49 | 0) > 0)) {
       break label$12;
      }
      if (HEAP8[HEAP32[$1 + 8 >> 2] + 4 | 0]) {
       break label$12;
      }
      HEAP8[$1 + 15 | 0] = HEAP8[HEAP32[$1 + 8 >> 2] + 3 | 0] - 24;
      break label$1;
     }
     break label$9;
    }
    label$13: {
     if (HEAP8[HEAP32[$1 + 8 >> 2]] != 73 | HEAP8[HEAP32[$1 + 8 >> 2] + 1 | 0] != 50 | (HEAP8[HEAP32[$1 + 8 >> 2] + 2 | 0] != 67 | HEAP8[HEAP32[$1 + 8 >> 2] + 3 | 0] < 49)) {
      break label$13;
     }
     if (HEAP8[HEAP32[$1 + 8 >> 2] + 4 | 0] | (HEAP8[HEAP32[$1 + 8 >> 2] + 3 | 0] - 49 | 0) > 0) {
      break label$13;
     }
     HEAP8[$1 + 15 | 0] = HEAP8[HEAP32[$1 + 8 >> 2] + 3 | 0] - 23;
     break label$1;
    }
   }
  }
  HEAP8[$1 + 15 | 0] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAPU8[$1 + 15 | 0];
}

function tflite__MicroAllocator__AllocateTfLiteEvalTensors_28tflite__Model_20const__2c_20TfLiteEvalTensor___29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer + -64 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 56 >> 2] = $0;
 HEAP32[$3 + 52 >> 2] = $1;
 HEAP32[$3 + 48 >> 2] = $2;
 $0 = HEAP32[$3 + 56 >> 2];
 label$1: {
  if (!HEAP32[$3 + 48 >> 2]) {
   break label$1;
  }
 }
 HEAP32[$3 + 44 >> 2] = tflite__MicroAllocator__GetSubGraphFromModel_28tflite__Model_20const__29($0, HEAP32[$3 + 52 >> 2]);
 label$2: {
  if (!HEAP32[$3 + 44 >> 2]) {
   break label$2;
  }
 }
 HEAP32[$3 + 40 >> 2] = flatbuffers__Vector_flatbuffers__Offset_tflite__Tensor____size_28_29_20const(tflite__SubGraph__tensors_28_29_20const(HEAP32[$3 + 44 >> 2]));
 $1 = HEAP32[$0 + 4 >> 2];
 HEAP32[$3 + 36 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, Math_imul(HEAP32[$3 + 40 >> 2], 12), 4);
 label$3: {
  if (!HEAP32[$3 + 36 >> 2]) {
   $0 = HEAP32[$0 + 8 >> 2];
   HEAP32[$3 >> 2] = Math_imul(HEAP32[$3 + 40 >> 2], 12);
   tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 106277, $3);
   HEAP32[$3 + 60 >> 2] = 1;
   break label$3;
  }
  HEAP32[$3 + 32 >> 2] = 0;
  while (1) {
   if (HEAPU32[$3 + 32 >> 2] < HEAPU32[$3 + 40 >> 2]) {
    HEAP32[$3 + 28 >> 2] = tflite__internal__InitializeTfLiteEvalTensorFromFlatbuffer_28tflite__SimpleMemoryAllocator__2c_20tflite__Tensor_20const__2c_20flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer___20const__2c_20tflite__ErrorReporter__2c_20TfLiteEvalTensor__29(HEAP32[$0 + 4 >> 2], flatbuffers__Vector_flatbuffers__Offset_tflite__Tensor____Get_28unsigned_20int_29_20const(tflite__SubGraph__tensors_28_29_20const(HEAP32[$3 + 44 >> 2]), HEAP32[$3 + 32 >> 2]), tflite__Model__buffers_28_29_20const(HEAP32[$3 + 52 >> 2]), HEAP32[$0 + 8 >> 2], HEAP32[$3 + 36 >> 2] + Math_imul(HEAP32[$3 + 32 >> 2], 12) | 0);
    if (HEAP32[$3 + 28 >> 2]) {
     $0 = HEAP32[$0 + 8 >> 2];
     HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 32 >> 2];
     tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 107362, $3 + 16 | 0);
     HEAP32[$3 + 60 >> 2] = 1;
     break label$3;
    } else {
     HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 32 >> 2] + 1;
     continue;
    }
   }
   break;
  }
  HEAP32[HEAP32[$3 + 48 >> 2] >> 2] = HEAP32[$3 + 36 >> 2];
  HEAP32[$3 + 60 >> 2] = 0;
 }
 __stack_pointer = $3 - -64 | 0;
 return HEAP32[$3 + 60 >> 2];
}

function handlePipeClose($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP32[$3 + 36 >> 2] = $2;
 jsiQueueObjectCallbacks(HEAP32[$3 + 36 >> 2], 104610, $3 + 36 | 0, 1);
 HEAP32[$3 + 32 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 36 >> 2], 105447);
 HEAP32[$3 + 28 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 36 >> 2], 102458);
 if (!(!HEAP32[$3 + 32 >> 2] | !HEAP32[$3 + 28 >> 2])) {
  HEAP32[$3 + 24 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 32 >> 2], 104027);
  label$2: {
   if (!HEAP32[$3 + 24 >> 2]) {
    break label$2;
   }
   if (!jsvGetStringLength(HEAP32[$3 + 24 >> 2])) {
    break label$2;
   }
   jsvObjectRemoveChild(HEAP32[$3 + 32 >> 2], 104027);
   HEAP32[$3 + 20 >> 2] = jspGetNamedField(HEAP32[$3 + 28 >> 2], 104604, 0);
   if (jsvIsFunction(HEAP32[$3 + 20 >> 2]) & 1) {
    jsvUnLock(jspExecuteFunction(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 28 >> 2], 1, $3 + 24 | 0));
   }
   jsvUnLock(HEAP32[$3 + 20 >> 2]);
  }
  jsvUnLock(HEAP32[$3 + 24 >> 2]);
 }
 if (jsvObjectGetBoolChild(HEAP32[$3 + 36 >> 2], 105842) & 1) {
  if (HEAP32[$3 + 28 >> 2]) {
   jswrap_object_removeAllListeners_cstr(HEAP32[$3 + 28 >> 2], 102499);
   jswrap_object_removeAllListeners_cstr(HEAP32[$3 + 28 >> 2], 104714);
   HEAP32[$3 + 16 >> 2] = jspGetNamedField(HEAP32[$3 + 28 >> 2], 105842, 0);
   if (jsvIsFunction(HEAP32[$3 + 16 >> 2]) & 1) {
    jsvUnLock(jspExecuteFunction(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 28 >> 2], 0, 0));
   }
   jsvUnLock(HEAP32[$3 + 16 >> 2]);
   HEAP32[$3 + 12 >> 2] = jspGetNamedField(HEAP32[$3 + 28 >> 2], 104714, 0);
   if (jsvIsFunction(HEAP32[$3 + 12 >> 2]) & 1) {
    jsvUnLock(jspExecuteFunction(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 28 >> 2], 0, 0));
   }
   jsvUnLock(HEAP32[$3 + 12 >> 2]);
  }
  if (HEAP32[$3 + 32 >> 2]) {
   jswrap_object_removeAllListeners_cstr(HEAP32[$3 + 32 >> 2], 104714);
   HEAP32[$3 + 8 >> 2] = jspGetNamedField(HEAP32[$3 + 32 >> 2], 104714, 0);
   if (jsvIsFunction(HEAP32[$3 + 8 >> 2]) & 1) {
    jsvUnLock(jspExecuteFunction(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 32 >> 2], 0, 0));
   }
   jsvUnLock(HEAP32[$3 + 8 >> 2]);
  }
 }
 jsvUnLock2(HEAP32[$3 + 32 >> 2], HEAP32[$3 + 28 >> 2]);
 HEAP32[$3 + 4 >> 2] = jsvObjectIteratorGetKey_9(HEAP32[$3 + 40 >> 2]);
 jsvRemoveChildAndUnLock(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 48 | 0;
}

function jspeStatementVar() {
 var $0 = 0, $1 = 0, $2 = 0;
 $0 = __stack_pointer - 32 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 24 >> 2] = 0;
 label$1: {
  if (HEAP16[HEAP32[38615] + 2 >> 1] != 173) {
   $1 = 0;
   if (HEAP16[HEAP32[38615] + 2 >> 1] != 174) {
    break label$1;
   }
  }
  $1 = HEAPU8[187008] != 0;
 }
 HEAP8[$0 + 23 | 0] = $1;
 HEAP8[$0 + 22 | 0] = HEAP16[HEAP32[38615] + 2 >> 1] == 174;
 jslGetNextToken();
 HEAP8[$0 + 21 | 0] = 1;
 while (1) {
  $1 = 0;
  label$4: {
   if (!(HEAP8[$0 + 21 | 0] & 1)) {
    break label$4;
   }
   $1 = 0;
   if (HEAP16[HEAP32[38615] + 2 >> 1] != 128) {
    break label$4;
   }
   $1 = jspIsInterrupted() ^ -1;
  }
  if ($1 & 1) {
   label$6: {
    HEAP32[$0 + 16 >> 2] = 0;
    if ((HEAP32[46755] & 63) == 1) {
     HEAP32[$0 + 12 >> 2] = jslGetTokenValueAsString();
     label$8: {
      if (HEAP8[$0 + 23 | 0] & 1) {
       if (!HEAP32[46751]) {
        HEAP32[46751] = jsvNewObject();
        jspeiAddScope(HEAP32[46751]);
       }
       HEAP32[$0 + 16 >> 2] = jsvFindOrAddChildFromString(HEAP32[46751], HEAP32[$0 + 12 >> 2]);
       break label$8;
      }
      HEAP32[$0 + 16 >> 2] = jsvFindOrAddChildFromString(HEAP32[46750], HEAP32[$0 + 12 >> 2]);
     }
     if (!HEAP32[$0 + 16 >> 2]) {
      jspSetError(0);
      break label$6;
     }
    }
    if (!(jslMatch(128) & 1)) {
     jsvUnLock(HEAP32[$0 + 16 >> 2]);
     break label$6;
    }
    if (HEAP16[HEAP32[38615] + 2 >> 1] == 61) {
     if (!(jslMatch(61) & 1)) {
      jsvUnLock(HEAP32[$0 + 16 >> 2]);
      break label$6;
     }
     HEAP32[$0 + 8 >> 2] = jsvSkipNameAndUnLock(jspeAssignmentExpression());
     if ((HEAP32[46755] & 63) == 1) {
      jsvReplaceWith(HEAP32[$0 + 16 >> 2], HEAP32[$0 + 8 >> 2]);
     }
     jsvUnLock(HEAP32[$0 + 8 >> 2]);
    }
    if (HEAP8[$0 + 22 | 0] & 1 & (HEAP32[46755] & 63) == 1) {
     $2 = HEAP32[$0 + 16 >> 2];
     $1 = HEAPU8[$2 + 11 | 0] | HEAPU8[$2 + 12 | 0] << 8 | 64;
     HEAP8[$2 + 11 | 0] = $1;
     HEAP8[$2 + 12 | 0] = $1 >>> 8;
    }
    jsvUnLock(HEAP32[$0 + 24 >> 2]);
    HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 16 >> 2];
    HEAP8[$0 + 21 | 0] = HEAP16[HEAP32[38615] + 2 >> 1] == 44;
    if (HEAP8[$0 + 21 | 0] & 1) {
     if (!(jslMatch(44) & 1)) {
      break label$6;
     }
    }
    continue;
   }
  }
  break;
 }
 HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 24 >> 2];
 __stack_pointer = $0 + 32 | 0;
 return HEAP32[$0 + 28 >> 2];
}

function _jswrap_interface_setTimeoutOrInterval($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $4 = __stack_pointer + -64 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 56 >> 2] = $0;
 HEAPF64[$4 + 48 >> 3] = $1;
 HEAP32[$4 + 44 >> 2] = $2;
 HEAP8[$4 + 43 | 0] = $3;
 label$1: {
  label$2: {
   if (jsvIsFunction(HEAP32[$4 + 56 >> 2]) & 1) {
    break label$2;
   }
   if (jsvIsString(HEAP32[$4 + 56 >> 2]) & 1) {
    break label$2;
   }
   jsExceptionHere(1, 127273, 0);
   HEAP32[$4 + 60 >> 2] = 0;
   break label$1;
  }
  $0 = __DOUBLE_BITS_8(HEAPF64[$4 + 48 >> 3]);
  $6 = $0;
  $2 = i64toi32_i32$HIGH_BITS;
  $0 = $2 & 2147483647;
  $2 = $6;
  if (!(HEAPF64[$4 + 48 >> 3] < .1 ? 0 : !$2 & ($0 | 0) == 2146435072 | $0 >>> 0 < 2146435072)) {
   HEAPF64[$4 + 48 >> 3] = .1;
  }
  if (HEAPF64[$4 + 48 >> 3] > 31536000001e3) {
   jsExceptionHere(1, 126073, 0);
   HEAP32[$4 + 60 >> 2] = 0;
   break label$1;
  }
  HEAP32[$4 + 36 >> 2] = jsvNewObject();
  if (!HEAP32[$4 + 36 >> 2]) {
   HEAP32[$4 + 60 >> 2] = 0;
   break label$1;
  }
  $2 = jshGetTimeFromMilliseconds(HEAPF64[$4 + 48 >> 3]);
  HEAP32[$4 + 24 >> 2] = $2;
  $0 = i64toi32_i32$HIGH_BITS;
  HEAP32[$4 + 28 >> 2] = $0;
  $7 = HEAP32[$4 + 36 >> 2];
  $0 = jshGetSystemTime();
  $3 = $0;
  $2 = i64toi32_i32$HIGH_BITS;
  $8 = $2;
  $0 = HEAP32[46779];
  $9 = $0;
  $2 = HEAP32[46778];
  $6 = $2;
  $5 = $3 - $2 | 0;
  $10 = $5;
  $0 = $8;
  $2 = $9;
  $0 = $0 - ($2 + ($6 >>> 0 > $3 >>> 0) | 0) | 0;
  $3 = HEAP32[$4 + 28 >> 2];
  $2 = $3;
  $3 = $0;
  $5 = $2 + $3 | 0;
  $0 = $10;
  $6 = HEAP32[$4 + 24 >> 2];
  $2 = $0 + $6 | 0;
  $5 = $2 >>> 0 < $6 >>> 0 ? $5 + 1 | 0 : $5;
  jsvObjectSetChildAndUnLock($7, 105007, jsvNewFromLongInteger($2, $5));
  if (!(HEAP8[$4 + 43 | 0] & 1)) {
   $5 = HEAP32[$4 + 24 >> 2];
   $0 = HEAP32[$4 + 28 >> 2];
   jsvObjectSetChildAndUnLock(HEAP32[$4 + 36 >> 2], 100885, jsvNewFromLongInteger($5, $0));
  }
  jsvObjectSetChild(HEAP32[$4 + 36 >> 2], 107791, HEAP32[$4 + 56 >> 2]);
  if (jsvGetArrayLength(HEAP32[$4 + 44 >> 2])) {
   jsvObjectSetChild(HEAP32[$4 + 36 >> 2], 100307, HEAP32[$4 + 44 >> 2]);
  }
  HEAP32[$4 + 20 >> 2] = jsvNewFromInteger(jsiTimerAdd(HEAP32[$4 + 36 >> 2]));
  jsvUnLock(HEAP32[$4 + 36 >> 2]);
  jsiTimersChanged();
  HEAP32[$4 + 60 >> 2] = HEAP32[$4 + 20 >> 2];
 }
 __stack_pointer = $4 - -64 | 0;
 return HEAP32[$4 + 60 >> 2];
}

function jsvSkipNameWithParent($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 40 >> 2] = $0;
 HEAP8[$3 + 39 | 0] = $1;
 HEAP32[$3 + 32 >> 2] = $2;
 label$1: {
  if (!HEAP32[$3 + 40 >> 2]) {
   HEAP32[$3 + 44 >> 2] = 0;
   break label$1;
  }
  $0 = HEAP32[$3 + 40 >> 2];
  HEAP16[$3 + 30 >> 1] = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63;
  if (HEAPU16[$3 + 30 >> 1] == 14) {
   HEAP32[$3 + 44 >> 2] = jsvArrayBufferGetFromName(HEAP32[$3 + 40 >> 2]);
   break label$1;
  }
  if (!((HEAPU16[$3 + 30 >> 1] < 18 | HEAPU16[$3 + 30 >> 1] > 22) & HEAPU16[$3 + 30 >> 1] != 16)) {
   HEAP32[$3 + 44 >> 2] = jsvNewFromInteger(jsvGetFirstChildSigned(HEAP32[$3 + 40 >> 2]) << 16 >> 16);
   break label$1;
  }
  if (HEAPU16[$3 + 30 >> 1] == 17) {
   HEAP32[$3 + 44 >> 2] = jsvNewFromBool((jsvGetFirstChild(HEAP32[$3 + 40 >> 2]) & 65535) != 0);
   break label$1;
  }
  HEAP32[$3 + 24 >> 2] = jsvLockAgain(HEAP32[$3 + 40 >> 2]);
  while (1) {
   $0 = 0;
   label$9: {
    $0 = HEAPU16[$3 + 30 >> 1] >= 14 ? HEAPU16[$3 + 30 >> 1] <= 27 : $0;
    if (!$0) {
     break label$9;
    }
    HEAP16[$3 + 22 >> 1] = jsvGetFirstChild(HEAP32[$3 + 24 >> 2]);
    jsvUnLock(HEAP32[$3 + 24 >> 2]);
    if (!HEAPU16[$3 + 22 >> 1]) {
     if (HEAP32[$3 + 24 >> 2] == HEAP32[$3 + 40 >> 2]) {
      jsvCheckReferenceError(HEAP32[$3 + 40 >> 2]);
     }
     HEAP32[$3 + 44 >> 2] = 0;
     break label$1;
    }
    HEAP32[$3 + 24 >> 2] = jsvLock(HEAPU16[$3 + 22 >> 1]);
    $0 = HEAP32[$3 + 24 >> 2];
    HEAP16[$3 + 30 >> 1] = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63;
    if (!(HEAP8[$3 + 39 | 0] & 1)) {
     break label$9;
    }
    continue;
   }
   break;
  }
  if (jsvIsGetterOrSetter(HEAP32[$3 + 24 >> 2]) & 1) {
   label$13: {
    if (jsvIsNewChild(HEAP32[$3 + 40 >> 2]) & 1) {
     $0 = jsvLock(jsvGetNextSibling(HEAP32[$3 + 40 >> 2]) & 65535);
     break label$13;
    }
    $0 = 0;
   }
   HEAP32[$3 + 16 >> 2] = $0;
   if (HEAP32[$3 + 16 >> 2]) {
    $0 = HEAP32[$3 + 16 >> 2];
   } else {
    $0 = HEAP32[$3 + 32 >> 2];
   }
   HEAP32[$3 + 12 >> 2] = jsvExecuteGetter($0, HEAP32[$3 + 24 >> 2]);
   jsvUnLock2(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 24 >> 2]);
   HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 12 >> 2];
  }
  HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 24 >> 2];
 }
 __stack_pointer = $3 + 48 | 0;
 return HEAP32[$3 + 44 >> 2];
}

function jswrap_graphics_setFontCustom($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 112 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 104 >> 2] = $0;
 HEAP32[$5 + 100 >> 2] = $1;
 HEAP32[$5 + 96 >> 2] = $2;
 HEAP32[$5 + 92 >> 2] = $3;
 HEAP32[$5 + 88 >> 2] = $4;
 label$1: {
  if (!(graphicsGetFromVar($5 + 16 | 0, HEAP32[$5 + 104 >> 2]) & 1)) {
   HEAP32[$5 + 108 >> 2] = 0;
   break label$1;
  }
  if (!(jsvIsString(HEAP32[$5 + 100 >> 2]) & 1)) {
   jsExceptionHere(1, 103872, 0);
   HEAP32[$5 + 108 >> 2] = 0;
   break label$1;
  }
  if (!(HEAP32[$5 + 96 >> 2] <= 255 & HEAP32[$5 + 96 >> 2] >= 0)) {
   jsExceptionHere(1, 105283, 0);
   HEAP32[$5 + 108 >> 2] = 0;
   break label$1;
  }
  label$6: {
   if (jsvIsString(HEAP32[$5 + 92 >> 2]) & 1) {
    break label$6;
   }
   if (jsvIsInt(HEAP32[$5 + 92 >> 2]) & 1) {
    break label$6;
   }
   jsExceptionHere(1, 101253, 0);
   HEAP32[$5 + 108 >> 2] = 0;
   break label$1;
  }
  HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 88 >> 2] >> 8 & 255;
  if (HEAP32[$5 + 12 >> 2] <= 0) {
   HEAP32[$5 + 12 >> 2] = 1;
  }
  HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 88 >> 2] >> 16;
  if (HEAP32[$5 + 8 >> 2] <= 0) {
   HEAP32[$5 + 8 >> 2] = 1;
  }
  label$9: {
   if (HEAP32[$5 + 8 >> 2] == 1) {
    HEAP32[$5 + 4 >> 2] = 32768;
    break label$9;
   }
   label$11: {
    if (HEAP32[$5 + 8 >> 2] == 2) {
     HEAP32[$5 + 4 >> 2] = 40960;
     break label$11;
    }
    label$13: {
     if (HEAP32[$5 + 8 >> 2] == 4) {
      HEAP32[$5 + 4 >> 2] = 49152;
      break label$13;
     }
     jsExceptionHere(1, 106151, 0);
     HEAP32[$5 + 108 >> 2] = 0;
     break label$1;
    }
   }
  }
  HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 88 >> 2] & 255;
  jsvObjectSetChild(HEAP32[$5 + 104 >> 2], 110126, HEAP32[$5 + 100 >> 2]);
  jsvObjectSetChild(HEAP32[$5 + 104 >> 2], 108543, HEAP32[$5 + 92 >> 2]);
  jsvObjectSetChildAndUnLock(HEAP32[$5 + 104 >> 2], 109551, jsvNewFromInteger(HEAP32[$5 + 88 >> 2]));
  jsvObjectSetChildAndUnLock(HEAP32[$5 + 104 >> 2], 111161, jsvNewFromInteger(HEAP32[$5 + 96 >> 2]));
  $0 = HEAP32[$5 + 12 >> 2] + HEAP32[$5 + 4 >> 2] | 0;
  HEAP8[$5 + 41 | 0] = $0;
  HEAP8[$5 + 42 | 0] = $0 >>> 8;
  graphicsSetVar($5 + 16 | 0);
  HEAP32[$5 + 108 >> 2] = jsvLockAgain(HEAP32[$5 + 104 >> 2]);
 }
 __stack_pointer = $5 + 112 | 0;
 return HEAP32[$5 + 108 >> 2];
}

function jspEvaluateModule($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer + -64 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 56 >> 2] = $0;
 label$1: {
  label$2: {
   if (jsvIsFunction(HEAP32[$1 + 56 >> 2]) & 1) {
    HEAP32[$1 + 56 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 56 >> 2], 105817);
    if (!(jsvIsString(HEAP32[$1 + 56 >> 2]) & 1)) {
     jsvUnLock(HEAP32[$1 + 56 >> 2]);
     HEAP32[$1 + 60 >> 2] = 0;
     break label$1;
    }
    break label$2;
   }
   jsvLockAgain(HEAP32[$1 + 56 >> 2]);
  }
  HEAP32[$1 + 52 >> 2] = jsvNewObject();
  HEAP32[$1 + 48 >> 2] = jsvNewObject();
  if (!(HEAP32[$1 + 48 >> 2] ? HEAP32[$1 + 52 >> 2] : 0)) {
   jsvUnLock3(HEAP32[$1 + 52 >> 2], HEAP32[$1 + 48 >> 2], HEAP32[$1 + 56 >> 2]);
   HEAP32[$1 + 60 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 44 >> 2] = jsvAddNamedChild(HEAP32[$1 + 52 >> 2], HEAP32[$1 + 48 >> 2], 99724);
  jsvUnLock2(HEAP32[$1 + 48 >> 2], jsvAddNamedChild(HEAP32[$1 + 52 >> 2], HEAP32[$1 + 52 >> 2], 105038));
  HEAP32[$1 + 40 >> 2] = HEAP32[46755];
  $0 = HEAP32[46754];
  $2 = HEAP32[46753];
  HEAP32[$1 + 32 >> 2] = $2;
  HEAP32[$1 + 36 >> 2] = $0;
  $2 = HEAP32[46752];
  $0 = HEAP32[46751];
  HEAP32[$1 + 24 >> 2] = $0;
  HEAP32[$1 + 28 >> 2] = $2;
  $0 = HEAP32[46750];
  $2 = HEAP32[46749];
  HEAP32[$1 + 16 >> 2] = $2;
  HEAP32[$1 + 20 >> 2] = $0;
  $2 = HEAP32[46748];
  $0 = HEAP32[46747];
  HEAP32[$1 + 8 >> 2] = $0;
  HEAP32[$1 + 12 >> 2] = $2;
  HEAP32[46750] = HEAP32[$1 + 48 >> 2];
  HEAP32[46751] = 0;
  HEAP8[187008] = 0;
  HEAP32[46753] = HEAP32[$1 + 48 >> 2];
  jsvUnLock(jspEvaluateVar(HEAP32[$1 + 56 >> 2], HEAP32[$1 + 52 >> 2], 0));
  HEAP32[$1 + 4 >> 2] = HEAP32[46755] & 112;
  $0 = HEAP32[$1 + 12 >> 2];
  $2 = HEAP32[$1 + 8 >> 2];
  HEAP32[46747] = $2;
  HEAP32[46748] = $0;
  HEAP32[46755] = HEAP32[$1 + 40 >> 2];
  $2 = HEAP32[$1 + 36 >> 2];
  $0 = HEAP32[$1 + 32 >> 2];
  HEAP32[46753] = $0;
  HEAP32[46754] = $2;
  $0 = HEAP32[$1 + 28 >> 2];
  $2 = HEAP32[$1 + 24 >> 2];
  HEAP32[46751] = $2;
  HEAP32[46752] = $0;
  $2 = HEAP32[$1 + 20 >> 2];
  $0 = HEAP32[$1 + 16 >> 2];
  HEAP32[46749] = $0;
  HEAP32[46750] = $2;
  HEAP32[46755] = HEAP32[$1 + 4 >> 2] | HEAP32[46755];
  jsvUnLock2(HEAP32[$1 + 56 >> 2], HEAP32[$1 + 52 >> 2]);
  HEAP32[$1 + 60 >> 2] = jsvSkipNameAndUnLock(HEAP32[$1 + 44 >> 2]);
 }
 __stack_pointer = $1 - -64 | 0;
 return HEAP32[$1 + 60 >> 2];
}

function tf_create($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 40 >> 2] = $0;
 HEAP32[$3 + 36 >> 2] = $1;
 HEAP32[$3 + 32 >> 2] = $2;
 HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 40 >> 2];
 $0 = HEAP32[$3 + 28 >> 2];
 HEAP32[$0 >> 2] = 0;
 tflite__EspruinoErrorReporter__EspruinoErrorReporter_28_29($0);
 HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 28 >> 2];
 HEAP32[$3 + 20 >> 2] = tflite__GetModel_28void_20const__29(HEAP32[$3 + 32 >> 2]);
 label$1: {
  if ((tflite__Model__version_28_29_20const(HEAP32[$3 + 20 >> 2]) | 0) != 3) {
   $0 = HEAP32[$3 + 24 >> 2];
   $1 = tflite__Model__version_28_29_20const(HEAP32[$3 + 20 >> 2]);
   HEAP32[$3 + 4 >> 2] = 3;
   HEAP32[$3 >> 2] = $1;
   tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 112258, $3);
   HEAP8[$3 + 47 | 0] = 0;
   break label$1;
  }
  tflite__MicroMutableOpResolver_9u___MicroMutableOpResolver_28tflite__ErrorReporter__29(HEAP32[$3 + 28 >> 2] + 16 | 0, 0);
  tflite__MicroMutableOpResolver_9u___AddDepthwiseConv2D_28_29(HEAP32[$3 + 28 >> 2] + 16 | 0);
  tflite__MicroMutableOpResolver_9u___AddConv2D_28_29(HEAP32[$3 + 28 >> 2] + 16 | 0);
  tflite__MicroMutableOpResolver_9u___AddAveragePool2D_28_29(HEAP32[$3 + 28 >> 2] + 16 | 0);
  tflite__MicroMutableOpResolver_9u___AddMaxPool2D_28_29(HEAP32[$3 + 28 >> 2] + 16 | 0);
  tflite__MicroMutableOpResolver_9u___AddFullyConnected_28_29(HEAP32[$3 + 28 >> 2] + 16 | 0);
  tflite__MicroMutableOpResolver_9u___AddSoftmax_28_29(HEAP32[$3 + 28 >> 2] + 16 | 0);
  tflite__MicroMutableOpResolver_9u___AddQuantize_28_29(HEAP32[$3 + 28 >> 2] + 16 | 0);
  tflite__MicroMutableOpResolver_9u___AddDequantize_28_29(HEAP32[$3 + 28 >> 2] + 16 | 0);
  tflite__MicroMutableOpResolver_9u___AddReshape_28_29(HEAP32[$3 + 28 >> 2] + 16 | 0);
  tflite__MicroInterpreter__MicroInterpreter_28tflite__Model_20const__2c_20tflite__MicroOpResolver_20const__2c_20unsigned_20char__2c_20unsigned_20long_2c_20tflite__ErrorReporter__2c_20tflite__Profiler__29(HEAP32[$3 + 28 >> 2] + 400 | 0, HEAP32[$3 + 20 >> 2], HEAP32[$3 + 28 >> 2] + 16 | 0, HEAP32[$3 + 28 >> 2] + 560 | 0, HEAP32[$3 + 36 >> 2], HEAP32[$3 + 24 >> 2], 0);
  tflite__MicroInterpreter__AllocateTensors_28_29(HEAP32[$3 + 28 >> 2] + 400 | 0);
  HEAP8[$3 + 47 | 0] = 1;
 }
 __stack_pointer = $3 + 48 | 0;
 return HEAP8[$3 + 47 | 0] & 1;
}

function jswrap_io_shiftOut($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 96 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 92 >> 2] = $0;
 HEAP32[$3 + 88 >> 2] = $1;
 HEAP32[$3 + 84 >> 2] = $2;
 HEAP32[$3 + 76 >> 2] = 0;
 HEAP8[$3 + 72 | 0] = 255;
 HEAP8[$3 + 73 | 0] = 0;
 HEAP32[$3 + 80 >> 2] = 1;
 HEAP32[$3 + 16 >> 2] = 103096;
 HEAP16[$3 + 20 >> 1] = 13;
 HEAP32[$3 + 24 >> 2] = $3 + 72;
 HEAP32[$3 + 28 >> 2] = 102713;
 HEAP16[$3 + 32 >> 1] = 12;
 HEAP32[$3 + 36 >> 2] = $3 + 73;
 HEAP32[$3 + 40 >> 2] = 98107;
 HEAP16[$3 + 44 >> 1] = 10;
 HEAP32[$3 + 48 >> 2] = $3 + 80;
 label$1: {
  if (!(jsvReadConfigObject(HEAP32[$3 + 88 >> 2], $3 + 16 | 0, 3) & 1)) {
   break label$1;
  }
  HEAP8[$3 + 73 | 0] = HEAP8[$3 + 73 | 0] & 1;
  if (HEAP32[$3 + 80 >> 2] <= 0) {
   HEAP32[$3 + 80 >> 2] = 1;
  }
  label$3: {
   if (jsvIsArray(HEAP32[$3 + 92 >> 2]) & 1) {
    jsvObjectIteratorNew($3 + 8 | 0, HEAP32[$3 + 92 >> 2]);
    while (1) {
     if (jsvObjectIteratorHasValue_15($3 + 8 | 0) & 1) {
      if (HEAP32[$3 + 76 >> 2] >= 8) {
       HEAP32[$3 >> 2] = 8;
       jsExceptionHere(1, 102565, $3);
       break label$1;
      } else {
       $0 = jshGetPinFromVarAndUnLock(jsvObjectIteratorGetValue_14($3 + 8 | 0));
       HEAP8[HEAP32[$3 + 76 >> 2] + ($3 - -64 | 0) | 0] = $0;
       HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] + 1;
       jsvObjectIteratorNext($3 + 8 | 0);
       continue;
      }
     }
     break;
    }
    jsvObjectIteratorFree_15($3 + 8 | 0);
    break label$3;
   }
   $1 = jshGetPinFromVar(HEAP32[$3 + 92 >> 2]);
   $0 = HEAP32[$3 + 76 >> 2];
   HEAP32[$3 + 76 >> 2] = $0 + 1;
   HEAP8[($3 - -64 | 0) + $0 | 0] = $1;
  }
  HEAP32[$3 + 4 >> 2] = 0;
  while (1) {
   if (HEAP32[$3 + 4 >> 2] < HEAP32[$3 + 76 >> 2]) {
    if (jshIsPinValid(HEAPU8[HEAP32[$3 + 4 >> 2] + ($3 - -64 | 0) | 0]) & 1) {
     if (!(jshGetPinStateIsManual(HEAPU8[HEAP32[$3 + 4 >> 2] + ($3 - -64 | 0) | 0]) & 1)) {
      jshPinSetState(HEAPU8[HEAP32[$3 + 4 >> 2] + ($3 - -64 | 0) | 0], 1);
     }
    }
    HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
    continue;
   }
   break;
  }
  if (jshIsPinValid(HEAPU8[$3 + 72 | 0]) & 1) {
   jshPinSetState(HEAPU8[$3 + 72 | 0], 1);
  }
  jsvIterateCallback(HEAP32[$3 + 84 >> 2], 596, $3 - -64 | 0);
 }
 __stack_pointer = $3 + 96 | 0;
}

function jswrap_waveform_idle() {
 var $0 = 0;
 $0 = __stack_pointer + -64 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 60 >> 2] = jsvObjectGetChildIfExists(HEAP32[46748], 104344);
 if (HEAP32[$0 + 60 >> 2]) {
  jsvObjectIteratorNew($0 + 56 | 0, HEAP32[$0 + 60 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_18($0 + 56 | 0) & 1) {
    HEAP32[$0 + 52 >> 2] = jsvObjectIteratorGetValue_17($0 + 56 | 0);
    HEAP8[$0 + 51 | 0] = jsvObjectGetBoolChild(HEAP32[$0 + 52 >> 2], 103945) & 1;
    if (HEAP8[$0 + 51 | 0] & 1) {
     HEAP32[$0 + 44 >> 2] = jswrap_waveform_getBuffer(HEAP32[$0 + 52 >> 2], 0, 0);
     label$5: {
      if (!(jstGetLastBufferTimerTask(HEAP32[$0 + 44 >> 2], $0 + 16 | 0) & 1)) {
       HEAP32[$0 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 52 >> 2], 101361);
       jsiQueueObjectCallbacks(HEAP32[$0 + 52 >> 2], 103399, $0 + 12 | 0, 1);
       jsvUnLock(HEAP32[$0 + 12 >> 2]);
       HEAP8[$0 + 51 | 0] = 0;
       jsvObjectSetChildAndUnLock(HEAP32[$0 + 52 >> 2], 103945, jsvNewFromBool(HEAP8[$0 + 51 | 0] & 1));
       break label$5;
      }
      if (!(!(HEAPU8[$0 + 30 | 0] | HEAPU8[$0 + 31 | 0] << 8) | (HEAPU8[$0 + 30 | 0] | HEAPU8[$0 + 31 | 0] << 8) == (HEAPU8[$0 + 28 | 0] | HEAPU8[$0 + 29 | 0] << 8))) {
       HEAP32[$0 + 8 >> 2] = (jsvGetRef(HEAP32[$0 + 44 >> 2]) & 65535) != (HEAPU8[$0 + 28 | 0] | HEAPU8[$0 + 29 | 0] << 8);
       HEAP32[$0 + 4 >> 2] = jsvGetIntegerAndUnLock(jsvObjectGetChild(HEAP32[$0 + 52 >> 2], 101458, 10));
       if (HEAP32[$0 + 4 >> 2] != HEAP32[$0 + 8 >> 2]) {
        jsvObjectSetChildAndUnLock(HEAP32[$0 + 52 >> 2], 101458, jsvNewFromInteger(HEAP32[$0 + 8 >> 2]));
        HEAP32[$0 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 52 >> 2], HEAP32[$0 + 8 >> 2] ? 101361 : 110882);
        jsiQueueObjectCallbacks(HEAP32[$0 + 52 >> 2], 101303, $0, 1);
        jsvUnLock(HEAP32[$0 >> 2]);
       }
      }
     }
     jsvUnLock(HEAP32[$0 + 44 >> 2]);
    }
    jsvUnLock(HEAP32[$0 + 52 >> 2]);
    label$9: {
     if (!(HEAP8[$0 + 51 | 0] & 1)) {
      jsvObjectIteratorRemoveAndGotoNext($0 + 56 | 0, HEAP32[$0 + 60 >> 2]);
      break label$9;
     }
     jsvObjectIteratorNext($0 + 56 | 0);
    }
    continue;
   }
   break;
  }
  jsvObjectIteratorFree_18($0 + 56 | 0);
  jsvUnLock(HEAP32[$0 + 60 >> 2]);
 }
 __stack_pointer = $0 - -64 | 0;
 return 0;
}

function jsiHandleNewLine($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 31 | 0] = $0;
 label$1: {
  if (jsiAtEndOfInputLine() & 1) {
   label$3: {
    if (!(HEAP8[$1 + 31 | 0] & 1)) {
     break label$3;
    }
    if ((jsiCountBracketsInInput() | 0) > 0) {
     break label$3;
    }
    if (jsiShowInputLine() & 1) {
     jsiConsolePrintString(129587);
    }
    if (!(HEAPU16[93524] & 2)) {
     HEAP8[187056] = 1;
    }
    HEAP32[$1 + 24 >> 2] = jsvStringTrimRight(HEAP32[46763]);
    jsiClearInputLine(0);
    HEAP32[$1 + 20 >> 2] = jspEvaluateVar(HEAP32[$1 + 24 >> 2], 0, HEAPU16[93536]);
    HEAP8[$1 + 19 | 0] = jsvIsEmptyString(HEAP32[$1 + 24 >> 2]) & 1;
    label$6: {
     if (HEAP8[$1 + 19 | 0] & 1) {
      break label$6;
     }
     if (!(jsiEcho() & 1)) {
      break label$6;
     }
     jsiHistoryAddLine(HEAP32[$1 + 24 >> 2]);
    }
    jsvUnLock(HEAP32[$1 + 24 >> 2]);
    HEAP16[93536] = 0;
    label$7: {
     if (!(jsiEcho() & 1)) {
      break label$7;
     }
     if (jspHasError() & 1 | HEAP8[$1 + 19 | 0] & 1) {
      break label$7;
     }
     jsiConsolePrintChar(61);
     jsfPrintJSON(HEAP32[$1 + 20 >> 2], 813);
     jsiConsolePrintString(129587);
    }
    jsvUnLock(HEAP32[$1 + 20 >> 2]);
    jsiCheckErrors();
    HEAP16[93524] = HEAPU16[93524] & -3;
    break label$1;
   }
   if (jsiShowInputLine() & 1) {
    jsiConsolePrintString(110363);
   }
   jsiIsAboutToEditInputLine();
   jsiAppendToInputLine(129587);
   HEAP32[46765] = HEAP32[46765] + 1;
   break label$1;
  }
  jsiIsAboutToEditInputLine();
  if (jsiShowInputLine() & 1) {
   jsiConsoleEraseAfterCursor();
  }
  HEAP32[$1 + 12 >> 2] = jsvNewFromEmptyString_5();
  if (HEAP32[46765]) {
   jsvAppendStringVar(HEAP32[$1 + 12 >> 2], HEAP32[46763], 0, HEAP32[46765]);
  }
  jsvAppendCharacter_1(HEAP32[$1 + 12 >> 2], 10);
  jsvAppendStringVar(HEAP32[$1 + 12 >> 2], HEAP32[46763], HEAP32[46765], 2147483647);
  jsiInputLineCursorMoved();
  jsvUnLock(HEAP32[46763]);
  HEAP32[46763] = HEAP32[$1 + 12 >> 2];
  if (jsiShowInputLine() & 1) {
   jsiConsolePrintStringVarWithNewLineChar(HEAP32[46763], HEAP32[46765], 58);
   jsiMoveCursorChar(HEAP32[46763], jsvGetStringLength(HEAP32[46763]), HEAP32[46765] + 1 | 0);
  }
  HEAP32[46765] = HEAP32[46765] + 1;
 }
 __stack_pointer = $1 + 32 | 0;
}

function graphicsStructResetState($0) {
 var $1 = 0, $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 label$1: {
  label$2: {
   $0 = HEAP32[$2 + 12 >> 2];
   if (!(HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24))) {
    break label$2;
   }
   $0 = HEAP32[$2 + 12 >> 2];
   if ((HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24)) == 1) {
    break label$2;
   }
   $0 = HEAP32[$2 + 12 >> 2];
   $1 = HEAPU8[189412] | HEAPU8[189413] << 8;
   HEAP8[$0 + 17 | 0] = $1;
   HEAP8[$0 + 18 | 0] = $1 >>> 8;
   HEAP8[$0 + 19 | 0] = $1 >>> 16;
   HEAP8[$0 + 20 | 0] = $1 >>> 24;
   $0 = HEAP32[$2 + 12 >> 2];
   $1 = HEAPU8[189414] | HEAPU8[189415] << 8;
   HEAP8[$0 + 21 | 0] = $1;
   HEAP8[$0 + 22 | 0] = $1 >>> 8;
   HEAP8[$0 + 23 | 0] = $1 >>> 16;
   HEAP8[$0 + 24 | 0] = $1 >>> 24;
   break label$1;
  }
  $0 = HEAP32[$2 + 12 >> 2];
  $1 = HEAPU8[HEAP32[$2 + 12 >> 2] + 16 | 0] >= 32 ? -1 : (1 << HEAPU8[HEAP32[$2 + 12 >> 2] + 16 | 0]) - 1 | 0;
  HEAP8[$0 + 17 | 0] = $1;
  HEAP8[$0 + 18 | 0] = $1 >>> 8;
  HEAP8[$0 + 19 | 0] = $1 >>> 16;
  HEAP8[$0 + 20 | 0] = $1 >>> 24;
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP8[$0 + 21 | 0] = 0;
  HEAP8[$0 + 22 | 0] = 0;
  HEAP8[$0 + 23 | 0] = 0;
  HEAP8[$0 + 24 | 0] = 0;
 }
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP8[$0 + 25 | 0] = 1;
 HEAP8[$0 + 26 | 0] = 32;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP8[$0 + 31 | 0] = HEAPU8[$0 + 31 | 0] | 3;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP8[$0 + 31 | 0] = HEAPU8[$0 + 31 | 0] | 12;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP8[$0 + 31 | 0] = HEAPU8[$0 + 31 | 0] & -49;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP8[$0 + 32 | 0] = 0;
 HEAP8[$0 + 33 | 0] = 0;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP8[$0 + 34 | 0] = 0;
 HEAP8[$0 + 35 | 0] = 0;
 $0 = HEAP32[$2 + 12 >> 2];
 $1 = HEAP32[$2 + 12 >> 2];
 $1 = (HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) - 1 | 0;
 HEAP8[$0 + 36 | 0] = $1;
 HEAP8[$0 + 37 | 0] = $1 >>> 8;
 $0 = HEAP32[$2 + 12 >> 2];
 $1 = HEAP32[$2 + 12 >> 2];
 $1 = (HEAPU8[$1 + 14 | 0] | HEAPU8[$1 + 15 | 0] << 8) - 1 | 0;
 HEAP8[$0 + 38 | 0] = $1;
 HEAP8[$0 + 39 | 0] = $1 >>> 8;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP8[$0 + 27 | 0] = 0;
 HEAP8[$0 + 28 | 0] = 0;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP8[$0 + 29 | 0] = 0;
 HEAP8[$0 + 30 | 0] = 0;
}

function lcdGetPixel_ArrayBuffer_flat($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP32[$3 + 36 >> 2] = $2;
 HEAP32[$3 + 32 >> 2] = 0;
 $0 = HEAP32[$3 + 44 >> 2];
 HEAP32[$3 + 28 >> 2] = HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24);
 HEAP32[$3 + 24 >> 2] = lcdGetPixelIndex_ArrayBuffer(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 40 >> 2], HEAP32[$3 + 36 >> 2], 1);
 HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 28 >> 2] + (HEAP32[$3 + 24 >> 2] >>> 3 | 0);
 label$1: {
  if (HEAPU8[HEAP32[$3 + 44 >> 2] + 16 | 0] & 7) {
   HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 24 >> 2] & 7;
   HEAP32[$3 + 20 >> 2] = (1 << HEAPU8[HEAP32[$3 + 44 >> 2] + 16 | 0]) - 1;
   HEAP32[$3 + 16 >> 2] = HEAPU8[HEAP32[$3 + 28 >> 2]];
   $0 = HEAP32[$3 + 44 >> 2];
   if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 4) {
    $0 = 8 - (HEAP32[$3 + 24 >> 2] + HEAPU8[HEAP32[$3 + 44 >> 2] + 16 | 0] | 0) | 0;
   } else {
    $0 = HEAP32[$3 + 24 >> 2];
   }
   HEAP32[$3 + 12 >> 2] = $0;
   HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 20 >> 2] & HEAP32[$3 + 16 >> 2] >>> HEAP32[$3 + 12 >> 2];
   break label$1;
  }
  $0 = HEAP32[$3 + 44 >> 2];
  label$5: {
   if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 4) {
    HEAP32[$3 + 8 >> 2] = HEAPU8[HEAP32[$3 + 44 >> 2] + 16 | 0] - 8;
    while (1) {
     if (HEAP32[$3 + 8 >> 2] >= 0) {
      HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 32 >> 2] | HEAPU8[HEAP32[$3 + 28 >> 2]] << HEAP32[$3 + 8 >> 2];
      HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 28 >> 2] + 1;
      HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 8 >> 2] - 8;
      continue;
     }
     break;
    }
    break label$5;
   }
   HEAP32[$3 + 4 >> 2] = 0;
   while (1) {
    if (HEAP32[$3 + 4 >> 2] < HEAPU8[HEAP32[$3 + 44 >> 2] + 16 | 0]) {
     HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 32 >> 2] | HEAPU8[HEAP32[$3 + 28 >> 2]] << HEAP32[$3 + 4 >> 2];
     HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 28 >> 2] + 1;
     HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 8;
     continue;
    }
    break;
   }
  }
 }
 __stack_pointer = $3 + 48 | 0;
 return HEAP32[$3 + 32 >> 2];
}

function jswrap_object_defineProperty($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer + -64 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 56 >> 2] = $0;
 HEAP32[$3 + 52 >> 2] = $1;
 HEAP32[$3 + 48 >> 2] = $2;
 label$1: {
  label$2: {
   if (jsvIsObject(HEAP32[$3 + 56 >> 2]) & 1) {
    break label$2;
   }
   if (jsvIsFunction(HEAP32[$3 + 56 >> 2]) & 1) {
    break label$2;
   }
   if (jsvIsArray(HEAP32[$3 + 56 >> 2]) & 1) {
    break label$2;
   }
   HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 56 >> 2];
   jsExceptionHere(1, 98453, $3 + 16 | 0);
   HEAP32[$3 + 60 >> 2] = 0;
   break label$1;
  }
  if (!(jsvIsObject(HEAP32[$3 + 48 >> 2]) & 1)) {
   HEAP32[$3 >> 2] = HEAP32[$3 + 48 >> 2];
   jsExceptionHere(1, 98727, $3);
   HEAP32[$3 + 60 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 44 >> 2] = jsvAsArrayIndex(HEAP32[$3 + 52 >> 2]);
  HEAP32[$3 + 40 >> 2] = 0;
  HEAP32[$3 + 36 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 48 >> 2], 98052);
  HEAP32[$3 + 32 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 48 >> 2], 98048);
  if (HEAP32[$3 + 32 >> 2] ? 1 : HEAP32[$3 + 36 >> 2]) {
   HEAP32[$3 + 40 >> 2] = jsvNewWithFlags(6);
   if (HEAP32[$3 + 40 >> 2]) {
    if (HEAP32[$3 + 36 >> 2]) {
     jsvObjectSetChild(HEAP32[$3 + 40 >> 2], 98052, HEAP32[$3 + 36 >> 2]);
    }
    if (HEAP32[$3 + 32 >> 2]) {
     jsvObjectSetChild(HEAP32[$3 + 40 >> 2], 98048, HEAP32[$3 + 32 >> 2]);
    }
   }
   jsvUnLock2(HEAP32[$3 + 36 >> 2], HEAP32[$3 + 32 >> 2]);
  }
  if (!HEAP32[$3 + 40 >> 2]) {
   HEAP32[$3 + 40 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 48 >> 2], 104465);
  }
  jsvObjectSetChildVar(HEAP32[$3 + 56 >> 2], HEAP32[$3 + 44 >> 2], HEAP32[$3 + 40 >> 2]);
  HEAP32[$3 + 28 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 48 >> 2], 105143);
  label$10: {
   if (jsvIsUndefined(HEAP32[$3 + 28 >> 2]) & 1) {
    break label$10;
   }
   if (jsvGetBoolAndUnLock(HEAP32[$3 + 28 >> 2]) & 1) {
    break label$10;
   }
   $0 = HEAP32[$3 + 44 >> 2];
   $1 = HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8 | 64;
   HEAP8[$0 + 11 | 0] = $1;
   HEAP8[$0 + 12 | 0] = $1 >>> 8;
  }
  jsvUnLock2(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 40 >> 2]);
  HEAP32[$3 + 60 >> 2] = jsvLockAgain(HEAP32[$3 + 56 >> 2]);
 }
 __stack_pointer = $3 - -64 | 0;
 return HEAP32[$3 + 60 >> 2];
}

function jswrap_function_apply_or_call($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $4 = __stack_pointer - 128 | 0;
 $3 = $4;
 __stack_pointer = $3;
 HEAP32[$3 + 120 >> 2] = $0;
 HEAP32[$3 + 116 >> 2] = $1;
 HEAP32[$3 + 112 >> 2] = $2;
 HEAP32[$3 + 104 >> 2] = 0;
 HEAP32[$3 + 100 >> 2] = 0;
 label$1: {
  label$2: {
   if (jsvIsIterable(HEAP32[$3 + 112 >> 2]) & 1) {
    HEAP32[$3 + 100 >> 2] = jsvGetLength(HEAP32[$3 + 112 >> 2]);
    if (HEAPU32[$3 + 100 >> 2] > 256) {
     HEAP32[$3 >> 2] = HEAP32[$3 + 100 >> 2];
     jsExceptionHere(1, 107183, $3);
     HEAP32[$3 + 124 >> 2] = 0;
     break label$1;
    }
    $4 = $4 - ((HEAP32[$3 + 100 >> 2] << 2) + 15 & -16) | 0;
    __stack_pointer = $4;
    HEAP32[$3 + 104 >> 2] = $4;
    HEAP32[$3 + 108 >> 2] = 0;
    while (1) {
     if (HEAPU32[$3 + 108 >> 2] < HEAPU32[$3 + 100 >> 2]) {
      HEAP32[HEAP32[$3 + 104 >> 2] + (HEAP32[$3 + 108 >> 2] << 2) >> 2] = 0;
      HEAP32[$3 + 108 >> 2] = HEAP32[$3 + 108 >> 2] + 1;
      continue;
     }
     break;
    }
    jsvIteratorNew($3 + 40 | 0, HEAP32[$3 + 112 >> 2], 1);
    while (1) {
     if (jsvIteratorHasElement($3 + 40 | 0) & 1) {
      HEAP32[$3 + 36 >> 2] = jsvIteratorGetKey($3 + 40 | 0);
      if (jsvIsIntegerish(HEAP32[$3 + 36 >> 2]) & 1) {
       HEAP32[$3 + 32 >> 2] = jsvGetInteger(HEAP32[$3 + 36 >> 2]);
       if (!(HEAP32[$3 + 32 >> 2] < 0 | HEAP32[$3 + 32 >> 2] >= HEAP32[$3 + 100 >> 2])) {
        $0 = jsvIteratorGetValue($3 + 40 | 0);
        HEAP32[HEAP32[$3 + 104 >> 2] + (HEAP32[$3 + 32 >> 2] << 2) >> 2] = $0;
       }
      }
      jsvUnLock(HEAP32[$3 + 36 >> 2]);
      jsvIteratorNext($3 + 40 | 0);
      continue;
     }
     break;
    }
    jsvIteratorFree($3 + 40 | 0);
    break label$2;
   }
   if (!(jsvIsUndefined(HEAP32[$3 + 112 >> 2]) & 1)) {
    HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 112 >> 2];
    jsExceptionHere(1, 99147, $3 + 16 | 0);
    HEAP32[$3 + 124 >> 2] = 0;
    break label$1;
   }
  }
  HEAP32[$3 + 28 >> 2] = jspeFunctionCall(HEAP32[$3 + 120 >> 2], 0, HEAP32[$3 + 116 >> 2], 0, HEAP32[$3 + 100 >> 2], HEAP32[$3 + 104 >> 2]);
  jsvUnLockMany(HEAP32[$3 + 100 >> 2], HEAP32[$3 + 104 >> 2]);
  HEAP32[$3 + 124 >> 2] = HEAP32[$3 + 28 >> 2];
 }
 __stack_pointer = $3 + 128 | 0;
 return HEAP32[$3 + 124 >> 2];
}

function tflite__ops__micro__pooling__AverageEval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1: {
  if (!HEAP32[HEAP32[$2 + 20 >> 2] + 12 >> 2]) {
   break label$1;
  }
 }
 HEAP32[$2 + 16 >> 2] = HEAP32[HEAP32[$2 + 20 >> 2] + 12 >> 2];
 label$2: {
  if (!HEAP32[HEAP32[$2 + 20 >> 2] + 8 >> 2]) {
   break label$2;
  }
 }
 HEAP32[$2 + 12 >> 2] = HEAP32[HEAP32[$2 + 20 >> 2] + 8 >> 2];
 HEAP32[$2 + 8 >> 2] = tflite__micro__GetEvalInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], 0);
 HEAP32[$2 + 4 >> 2] = tflite__micro__GetEvalOutput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], 0);
 label$3: {
  label$4: {
   label$5: {
    switch (HEAP32[HEAP32[$2 + 8 >> 2] + 8 >> 2] - 1 | 0) {
    case 0:
     tflite__ops__micro__pooling___28anonymous_20namespace_29__AverageEvalFloat_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20TfLitePoolParams_20const__2c_20tflite__ops__micro__pooling___28anonymous_20namespace_29__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 16 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]);
     break label$4;

    case 2:
    case 8:
     tflite__ops__micro__pooling___28anonymous_20namespace_29__AverageEvalQuantized_28TfLiteContext__2c_20TfLiteNode_20const__2c_20TfLitePoolParams_20const__2c_20tflite__ops__micro__pooling___28anonymous_20namespace_29__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 16 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]);
     break label$4;

    default:
     break label$5;
    }
   }
   $0 = HEAP32[HEAP32[$2 + 24 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 24 >> 2];
   HEAP32[$2 >> 2] = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 8 >> 2] + 8 >> 2]);
   FUNCTION_TABLE[$0 | 0]($1, 106007, $2);
   HEAP32[$2 + 28 >> 2] = 1;
   break label$3;
  }
  HEAP32[$2 + 28 >> 2] = 0;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jsvGetArrayIndex($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP16[$2 + 18 >> 1] = jsvGetLastChild(HEAP32[$2 + 24 >> 2]);
 HEAP32[$2 + 12 >> 2] = 0;
 label$1: {
  while (1) {
   if (HEAPU16[$2 + 18 >> 1]) {
    HEAP32[$2 + 8 >> 2] = jsvLock(HEAPU16[$2 + 18 >> 1]);
    if (jsvIsInt(HEAP32[$2 + 8 >> 2]) & 1) {
     $0 = HEAP32[$2 + 8 >> 2];
     HEAP32[$2 + 12 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
     if (HEAP32[$2 + 12 >> 2] == HEAP32[$2 + 20 >> 2]) {
      HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 8 >> 2];
      break label$1;
     }
     jsvUnLock(HEAP32[$2 + 8 >> 2]);
    } else {
     HEAP16[$2 + 18 >> 1] = jsvGetPrevSibling(HEAP32[$2 + 8 >> 2]);
     jsvUnLock(HEAP32[$2 + 8 >> 2]);
     continue;
    }
   }
   break;
  }
  if (HEAP32[$2 + 20 >> 2] > HEAP32[$2 + 12 >> 2]) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  label$8: {
   if (HEAP32[$2 + 20 >> 2] > (HEAP32[$2 + 12 >> 2] / 2 | 0)) {
    while (1) {
     if (HEAPU16[$2 + 18 >> 1]) {
      HEAP32[$2 + 4 >> 2] = jsvLock(HEAPU16[$2 + 18 >> 1]);
      $0 = HEAP32[$2 + 4 >> 2];
      if (HEAP32[$2 + 20 >> 2] == (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24))) {
       HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 4 >> 2];
       break label$1;
      } else {
       HEAP16[$2 + 18 >> 1] = jsvGetPrevSibling(HEAP32[$2 + 4 >> 2]);
       jsvUnLock(HEAP32[$2 + 4 >> 2]);
       continue;
      }
     }
     break;
    }
    break label$8;
   }
   HEAP16[$2 + 18 >> 1] = jsvGetFirstChild(HEAP32[$2 + 24 >> 2]);
   while (1) {
    if (HEAPU16[$2 + 18 >> 1]) {
     HEAP32[$2 >> 2] = jsvLock(HEAPU16[$2 + 18 >> 1]);
     $0 = HEAP32[$2 >> 2];
     if (HEAP32[$2 + 20 >> 2] == (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24))) {
      HEAP32[$2 + 28 >> 2] = HEAP32[$2 >> 2];
      break label$1;
     } else {
      HEAP16[$2 + 18 >> 1] = jsvGetNextSibling(HEAP32[$2 >> 2]);
      jsvUnLock(HEAP32[$2 >> 2]);
      continue;
     }
    }
    break;
   }
  }
  HEAP32[$2 + 28 >> 2] = 0;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function btnHandlerCommon($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP8[$3 + 11 | 0] = $1;
 HEAP8[$3 + 10 | 0] = $2;
 label$1: {
  if (HEAP32[85801] ? 1 : HEAP32[85798] | HEAP32[85800]) {
   if (!(!((HEAP32[$3 + 12 >> 2] == 1 ? HEAP32[85796] & 2 : 0) | (HEAP32[$3 + 12 >> 2] == 2 ? HEAP32[85796] & 4 : 0)) & (!(HEAP32[85796] & 8) | HEAP32[$3 + 12 >> 2] != 3))) {
    if (HEAP8[$3 + 11 | 0] & 1) {
     HEAP8[$3 + 9 | 0] = wakeUpBangle(102090) & 1;
     if (HEAP8[$3 + 9 | 0] & 1) {
      HEAP16[171604] = 0;
      HEAP8[343214] = HEAP32[$3 + 12 >> 2];
      $4 = jshGetSystemTime();
      $2 = i64toi32_i32$HIGH_BITS;
      $0 = $2;
      $2 = jshGetTimeFromMilliseconds(100);
      $1 = $2;
      $4 = $2 + $4 | 0;
      $2 = i64toi32_i32$HIGH_BITS;
      $0 = $2 + $0 | 0;
      HEAP32[85804] = $4;
      $0 = $4 >>> 0 < $1 >>> 0 ? $0 + 1 | 0 : $0;
      HEAP32[85805] = $0;
      break label$1;
     }
    }
   }
  }
  HEAP8[$3 + 8 | 0] = 1;
  label$10: {
   if (HEAP32[85796] & 262144) {
    HEAP8[$3 + 8 | 0] = 0;
    break label$10;
   }
   HEAP16[171604] = 0;
  }
  if (HEAP32[$3 + 12 >> 2] == 3) {
   HEAP16[171612] = 0;
  }
  $0 = jshGetSystemTime();
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = i64toi32_i32$HIGH_BITS;
  if (HEAP32[$3 + 12 >> 2] == HEAP8[343214]) {
   $0 = HEAP32[$3 + 4 >> 2];
   $2 = $0;
   $0 = HEAP32[85804];
   $1 = $0;
   $0 = HEAP32[85805];
   label$14: {
    if (!(HEAP8[$3 + 11 | 0] & 1 & (($0 | 0) <= ($2 | 0) & $1 >>> 0 <= HEAPU32[$3 >> 2] | ($0 | 0) < ($2 | 0)))) {
     $1 = HEAP32[$3 >> 2];
     $2 = HEAP32[$3 + 4 >> 2];
     $0 = jshGetTimeFromMilliseconds(100);
     $4 = i64toi32_i32$HIGH_BITS + $2 | 0;
     $2 = $1 + $0 | 0;
     $4 = $2 >>> 0 < $0 >>> 0 ? $4 + 1 | 0 : $4;
     HEAP32[85804] = $2;
     HEAP32[85805] = $4;
     HEAP8[$3 + 10 | 0] = HEAPU8[$3 + 10 | 0] | 64;
     $1 = 343216;
     break label$14;
    }
    HEAP8[343214] = 0;
    HEAP32[85804] = 0;
    HEAP32[85805] = 0;
    $1 = 343216;
   }
  }
  if (!(HEAP8[$3 + 8 | 0] & 1)) {
   break label$1;
  }
  $4 = HEAP32[$3 >> 2];
  $1 = HEAP32[$3 + 4 >> 2];
  jshPushIOEvent((HEAPU8[$3 + 10 | 0] | (HEAP8[$3 + 11 | 0] & 1 ? 32 : 0)) & 255, $4, $1);
 }
 __stack_pointer = $3 + 16 | 0;
}

function tflite__GetRegistrationFromOpCode_28tflite__OperatorCode_20const__2c_20tflite__OpResolver_20const__2c_20tflite__ErrorReporter__2c_20TfLiteRegistration_20const___29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer + -64 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 60 >> 2] = $0;
 HEAP32[$4 + 56 >> 2] = $1;
 HEAP32[$4 + 52 >> 2] = $2;
 HEAP32[$4 + 48 >> 2] = $3;
 HEAP32[$4 + 44 >> 2] = 0;
 HEAP32[HEAP32[$4 + 48 >> 2] >> 2] = 0;
 HEAP32[$4 + 40 >> 2] = tflite__OperatorCode__builtin_code_28_29_20const(HEAP32[$4 + 60 >> 2]);
 HEAP32[$4 + 36 >> 2] = tflite__OperatorCode__version_28_29_20const(HEAP32[$4 + 60 >> 2]);
 label$1: {
  if (!(HEAP32[$4 + 40 >> 2] <= 126 & HEAP32[$4 + 40 >> 2] >= 0)) {
   $0 = HEAP32[$4 + 52 >> 2];
   HEAP32[$4 >> 2] = HEAP32[$4 + 40 >> 2];
   tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 110171, $4);
   HEAP32[$4 + 44 >> 2] = 1;
   break label$1;
  }
  label$4: {
   if (HEAP32[$4 + 40 >> 2] != 32) {
    $0 = HEAP32[$4 + 56 >> 2];
    $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, HEAP32[$4 + 40 >> 2], HEAP32[$4 + 36 >> 2]) | 0;
    HEAP32[HEAP32[$4 + 48 >> 2] >> 2] = $0;
    if (!HEAP32[HEAP32[$4 + 48 >> 2] >> 2]) {
     $0 = HEAP32[$4 + 52 >> 2];
     $1 = tflite__EnumNameBuiltinOperator_28tflite__BuiltinOperator_29(HEAP32[$4 + 40 >> 2]);
     HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 36 >> 2];
     HEAP32[$4 + 16 >> 2] = $1;
     tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 129465, $4 + 16 | 0);
     HEAP32[$4 + 44 >> 2] = 1;
    }
    break label$4;
   }
   label$7: {
    if (!tflite__OperatorCode__custom_code_28_29_20const(HEAP32[$4 + 60 >> 2])) {
     tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$4 + 52 >> 2], 129073, 0);
     HEAP32[$4 + 44 >> 2] = 1;
     break label$7;
    }
    HEAP32[$4 + 32 >> 2] = flatbuffers__String__c_str_28_29_20const(tflite__OperatorCode__custom_code_28_29_20const(HEAP32[$4 + 60 >> 2]));
    $0 = HEAP32[$4 + 56 >> 2];
    $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, HEAP32[$4 + 32 >> 2], HEAP32[$4 + 36 >> 2]) | 0;
    HEAP32[HEAP32[$4 + 48 >> 2] >> 2] = $0;
    if (!HEAP32[HEAP32[$4 + 48 >> 2] >> 2]) {
     HEAP32[$4 + 44 >> 2] = 1;
    }
   }
  }
 }
 __stack_pointer = $4 - -64 | 0;
 return HEAP32[$4 + 44 >> 2];
}

function jswrap_io_pinMode($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP8[$3 + 15 | 0] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 label$1: {
  if (!(jshIsPinValid(HEAPU8[$3 + 15 | 0]) & 1)) {
   jsExceptionHere(1, 102474, 0);
   break label$1;
  }
  HEAP8[$3 + 6 | 0] = 0;
  if (jsvIsString(HEAP32[$3 + 8 >> 2]) & 1) {
   label$4: {
    if (jsvIsStringEqual(HEAP32[$3 + 8 >> 2], 103650) & 1) {
     HEAP8[$3 + 6 | 0] = 7;
     break label$4;
    }
    label$6: {
     if (jsvIsStringEqual(HEAP32[$3 + 8 >> 2], 97377) & 1) {
      HEAP8[$3 + 6 | 0] = 4;
      break label$6;
     }
     label$8: {
      if (jsvIsStringEqual(HEAP32[$3 + 8 >> 2], 101813) & 1) {
       HEAP8[$3 + 6 | 0] = 5;
       break label$8;
      }
      label$10: {
       if (jsvIsStringEqual(HEAP32[$3 + 8 >> 2], 102060) & 1) {
        HEAP8[$3 + 6 | 0] = 6;
        break label$10;
       }
       label$12: {
        if (jsvIsStringEqual(HEAP32[$3 + 8 >> 2], 97370) & 1) {
         HEAP8[$3 + 6 | 0] = 1;
         break label$12;
        }
        label$14: {
         if (jsvIsStringEqual(HEAP32[$3 + 8 >> 2], 102495) & 1) {
          HEAP8[$3 + 6 | 0] = 2;
          break label$14;
         }
         label$16: {
          if (jsvIsStringEqual(HEAP32[$3 + 8 >> 2], 101826) & 1) {
           HEAP8[$3 + 6 | 0] = 3;
           break label$16;
          }
          label$18: {
           if (jsvIsStringEqual(HEAP32[$3 + 8 >> 2], 97367) & 1) {
            HEAP8[$3 + 6 | 0] = 8;
            break label$18;
           }
           if (jsvIsStringEqual(HEAP32[$3 + 8 >> 2], 102492) & 1) {
            HEAP8[$3 + 6 | 0] = 9;
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
  if (HEAPU8[$3 + 6 | 0]) {
   jshSetPinStateIsManual(HEAPU8[$3 + 15 | 0], (HEAPU8[$3 + 7 | 0] ^ -1) & 1);
   jshPinSetState(HEAPU8[$3 + 15 | 0], HEAPU8[$3 + 6 | 0]);
   break label$1;
  }
  jshSetPinStateIsManual(HEAPU8[$3 + 15 | 0], 0);
  label$22: {
   if (jsvIsUndefined(HEAP32[$3 + 8 >> 2]) & 1) {
    break label$22;
   }
   if (jsvIsStringEqual(HEAP32[$3 + 8 >> 2], 102031) & 1) {
    break label$22;
   }
   jsExceptionHere(1, 105421, 0);
  }
 }
 __stack_pointer = $3 + 16 | 0;
}

function jswrap_string_indexOf($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 40 >> 2] = $0;
 HEAP32[$4 + 36 >> 2] = $1;
 HEAP32[$4 + 32 >> 2] = $2;
 HEAP8[$4 + 31 | 0] = $3;
 label$1: {
  if (!(jsvIsString(HEAP32[$4 + 40 >> 2]) & 1)) {
   HEAP32[$4 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$4 + 36 >> 2] = jsvAsString(HEAP32[$4 + 36 >> 2]);
  if (!HEAP32[$4 + 36 >> 2]) {
   HEAP32[$4 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$4 + 24 >> 2] = jsvGetStringLength(HEAP32[$4 + 40 >> 2]);
  HEAP32[$4 + 20 >> 2] = jsvGetStringLength(HEAP32[$4 + 36 >> 2]);
  if (HEAP32[$4 + 20 >> 2] > HEAP32[$4 + 24 >> 2]) {
   jsvUnLock(HEAP32[$4 + 36 >> 2]);
   HEAP32[$4 + 44 >> 2] = -1;
   break label$1;
  }
  HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 24 >> 2] - HEAP32[$4 + 20 >> 2];
  label$5: {
   if (!(HEAP8[$4 + 31 | 0] & 1)) {
    HEAP32[$4 + 8 >> 2] = 1;
    HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 16 >> 2] + 1;
    HEAP32[$4 + 12 >> 2] = 0;
    if (jsvIsNumeric(HEAP32[$4 + 32 >> 2]) & 1) {
     HEAP32[$4 + 12 >> 2] = jsvGetInteger(HEAP32[$4 + 32 >> 2]);
     if (HEAP32[$4 + 12 >> 2] < 0) {
      HEAP32[$4 + 12 >> 2] = 0;
     }
     if (HEAP32[$4 + 12 >> 2] > HEAP32[$4 + 4 >> 2]) {
      HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 4 >> 2];
     }
    }
    break label$5;
   }
   HEAP32[$4 + 8 >> 2] = -1;
   HEAP32[$4 + 4 >> 2] = -1;
   HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 16 >> 2];
   if (jsvIsNumeric(HEAP32[$4 + 32 >> 2]) & 1) {
    HEAP32[$4 + 12 >> 2] = jsvGetInteger(HEAP32[$4 + 32 >> 2]);
    if (HEAP32[$4 + 12 >> 2] < 0) {
     HEAP32[$4 + 12 >> 2] = 0;
    }
    if (HEAP32[$4 + 12 >> 2] > HEAP32[$4 + 16 >> 2]) {
     HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 16 >> 2];
    }
   }
  }
  while (1) {
   if (HEAP32[$4 + 12 >> 2] != HEAP32[$4 + 4 >> 2]) {
    if (jsvCompareString(HEAP32[$4 + 40 >> 2], HEAP32[$4 + 36 >> 2], HEAP32[$4 + 12 >> 2], 0, 1)) {
     HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 8 >> 2] + HEAP32[$4 + 12 >> 2];
     continue;
    } else {
     jsvUnLock(HEAP32[$4 + 36 >> 2]);
     HEAP32[$4 + 44 >> 2] = HEAP32[$4 + 12 >> 2];
     break label$1;
    }
   }
   break;
  }
  jsvUnLock(HEAP32[$4 + 36 >> 2]);
  HEAP32[$4 + 44 >> 2] = -1;
 }
 __stack_pointer = $4 + 48 | 0;
 return HEAP32[$4 + 44 >> 2];
}

function jsfStripDriveFromName($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 8 >> 2] = $0;
 HEAP8[$3 + 7 | 0] = $1;
 label$1: {
  if (HEAP8[HEAP32[$3 + 8 >> 2] + 1 | 0] == 58) {
   HEAP8[$3 + 6 | 0] = HEAPU8[HEAP32[$3 + 8 >> 2]];
   $2 = HEAP32[$3 + 8 >> 2];
   $1 = HEAPU8[$2 + 10 | 0] | HEAPU8[$2 + 11 | 0] << 8 | (HEAPU8[$2 + 12 | 0] << 16 | HEAPU8[$2 + 13 | 0] << 24);
   $4 = $1;
   $0 = HEAPU8[$2 + 14 | 0] | HEAPU8[$2 + 15 | 0] << 8 | (HEAPU8[$2 + 16 | 0] << 16 | HEAPU8[$2 + 17 | 0] << 24);
   $7 = $0;
   $0 = HEAPU8[$2 + 18 | 0] | HEAPU8[$2 + 19 | 0] << 8 | (HEAPU8[$2 + 20 | 0] << 16 | HEAPU8[$2 + 21 | 0] << 24);
   $5 = $0;
   $1 = HEAPU8[$2 + 22 | 0] | HEAPU8[$2 + 23 | 0] << 8 | (HEAPU8[$2 + 24 | 0] << 16 | HEAPU8[$2 + 25 | 0] << 24);
   $8 = $1;
   $1 = HEAPU8[$2 + 2 | 0] | HEAPU8[$2 + 3 | 0] << 8 | (HEAPU8[$2 + 4 | 0] << 16 | HEAPU8[$2 + 5 | 0] << 24);
   $6 = $1;
   $0 = HEAPU8[$2 + 6 | 0] | HEAPU8[$2 + 7 | 0] << 8 | (HEAPU8[$2 + 8 | 0] << 16 | HEAPU8[$2 + 9 | 0] << 24);
   $9 = $0;
   $1 = HEAP32[$3 + 8 >> 2];
   $0 = HEAPU8[$2 + 26 | 0] | HEAPU8[$2 + 27 | 0] << 8;
   HEAP8[$1 + 24 | 0] = $0;
   HEAP8[$1 + 25 | 0] = $0 >>> 8;
   HEAP8[$1 + 16 | 0] = $5;
   HEAP8[$1 + 17 | 0] = $5 >>> 8;
   HEAP8[$1 + 18 | 0] = $5 >>> 16;
   HEAP8[$1 + 19 | 0] = $5 >>> 24;
   $0 = $8;
   HEAP8[$1 + 20 | 0] = $0;
   HEAP8[$1 + 21 | 0] = $0 >>> 8;
   HEAP8[$1 + 22 | 0] = $0 >>> 16;
   HEAP8[$1 + 23 | 0] = $0 >>> 24;
   HEAP8[$1 + 8 | 0] = $4;
   HEAP8[$1 + 9 | 0] = $4 >>> 8;
   HEAP8[$1 + 10 | 0] = $4 >>> 16;
   HEAP8[$1 + 11 | 0] = $4 >>> 24;
   $0 = $7;
   HEAP8[$1 + 12 | 0] = $0;
   HEAP8[$1 + 13 | 0] = $0 >>> 8;
   HEAP8[$1 + 14 | 0] = $0 >>> 16;
   HEAP8[$1 + 15 | 0] = $0 >>> 24;
   HEAP8[$1 | 0] = $6;
   HEAP8[$1 + 1 | 0] = $6 >>> 8;
   HEAP8[$1 + 2 | 0] = $6 >>> 16;
   HEAP8[$1 + 3 | 0] = $6 >>> 24;
   $0 = $9;
   HEAP8[$1 + 4 | 0] = $0;
   HEAP8[$1 + 5 | 0] = $0 >>> 8;
   HEAP8[$1 + 6 | 0] = $0 >>> 16;
   HEAP8[$1 + 7 | 0] = $0 >>> 24;
   HEAP8[HEAP32[$3 + 8 >> 2] + 26 | 0] = 0;
   HEAP8[HEAP32[$3 + 8 >> 2] + 27 | 0] = 0;
   HEAP8[$3 + 15 | 0] = HEAPU8[$3 + 6 | 0];
   break label$1;
  }
  HEAP8[$3 + 15 | 0] = 0;
 }
 return HEAP8[$3 + 15 | 0];
}

function heatshrink_encode_cb($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 832 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 828 >> 2] = $0;
 HEAP32[$4 + 824 >> 2] = $1;
 HEAP32[$4 + 820 >> 2] = $2;
 HEAP32[$4 + 816 >> 2] = $3;
 heatshrink_encoder_reset($4 + 288 | 0);
 HEAP32[$4 + 24 >> 2] = 0;
 HEAP32[$4 + 20 >> 2] = 0;
 HEAP32[$4 + 16 >> 2] = 0;
 HEAP32[$4 + 12 >> 2] = 0;
 HEAP32[$4 + 8 >> 2] = 0;
 while (1) {
  $0 = 1;
  $0 = HEAP32[$4 + 16 >> 2] < 0 ? HEAP32[$4 + 12 >> 2] != 0 : $0;
  if ($0) {
   if (!HEAP32[$4 + 12 >> 2]) {
    HEAP32[$4 + 8 >> 2] = 0;
    while (1) {
     $0 = 0;
     $0 = HEAPU32[$4 + 12 >> 2] < 128 ? HEAP32[$4 + 16 >> 2] >= 0 : $0;
     if ($0) {
      HEAP32[$4 + 16 >> 2] = FUNCTION_TABLE[HEAP32[$4 + 828 >> 2]](HEAP32[$4 + 824 >> 2]);
      if (HEAP32[$4 + 16 >> 2] >= 0) {
       $1 = HEAP32[$4 + 16 >> 2];
       $0 = HEAP32[$4 + 12 >> 2];
       HEAP32[$4 + 12 >> 2] = $0 + 1;
       HEAP8[($4 + 160 | 0) + $0 | 0] = $1;
      }
      continue;
     }
     break;
    }
   }
   HEAP8[$4 + 7 | 0] = (heatshrink_encoder_sink($4 + 288 | 0, HEAP32[$4 + 8 >> 2] + ($4 + 160 | 0) | 0, HEAP32[$4 + 12 >> 2], $4 + 24 | 0) | 0) >= 0;
   HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 12 >> 2] - HEAP32[$4 + 24 >> 2];
   HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 24 >> 2] + HEAP32[$4 + 8 >> 2];
   if (!(HEAP32[$4 + 12 >> 2] | HEAP32[$4 + 16 >> 2] >= 0)) {
    heatshrink_encoder_finish($4 + 288 | 0);
   }
   while (1) {
    HEAP32[$4 >> 2] = heatshrink_encoder_poll($4 + 288 | 0, $4 + 32 | 0, 128, $4 + 24 | 0);
    if (HEAP32[$4 + 820 >> 2]) {
     HEAP32[$4 + 28 >> 2] = 0;
     while (1) {
      if (HEAPU32[$4 + 28 >> 2] < HEAPU32[$4 + 24 >> 2]) {
       FUNCTION_TABLE[HEAP32[$4 + 820 >> 2]](HEAPU8[HEAP32[$4 + 28 >> 2] + ($4 + 32 | 0) | 0], HEAP32[$4 + 816 >> 2]);
       HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 28 >> 2] + 1;
       continue;
      }
      break;
     }
    }
    HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 24 >> 2] + HEAP32[$4 + 20 >> 2];
    if (HEAP32[$4 >> 2] == 1) {
     continue;
    }
    break;
   }
   if (!(HEAP32[$4 + 12 >> 2] | HEAP32[$4 + 16 >> 2] >= 0)) {
    heatshrink_encoder_finish($4 + 288 | 0);
   }
   continue;
  }
  break;
 }
 __stack_pointer = $4 + 832 | 0;
 return HEAP32[$4 + 20 >> 2];
}

function tflite__ops__micro__fully_connected__EvalFloat_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteFusedActivation_2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0;
 $7 = __stack_pointer - 176 | 0;
 __stack_pointer = $7;
 HEAP32[$7 + 172 >> 2] = $0;
 HEAP32[$7 + 168 >> 2] = $1;
 HEAP32[$7 + 164 >> 2] = $2;
 HEAP32[$7 + 160 >> 2] = $3;
 HEAP32[$7 + 156 >> 2] = $4;
 HEAP32[$7 + 152 >> 2] = $5;
 HEAP32[$7 + 148 >> 2] = $6;
 void_20tflite__CalculateActivationRange_float__28TfLiteFusedActivation_2c_20float__2c_20float__29(HEAP32[$7 + 164 >> 2], $7 + 144 | 0, $7 + 140 | 0);
 HEAPF32[$7 + 124 >> 2] = HEAPF32[$7 + 144 >> 2];
 HEAPF32[$7 + 128 >> 2] = HEAPF32[$7 + 140 >> 2];
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($7 + 72 | 0, HEAP32[$7 + 160 >> 2]);
 $0 = float_20const__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor_20const__29(HEAP32[$7 + 160 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($7 + 48 | 0, HEAP32[$7 + 156 >> 2]);
 $1 = float_20const__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor_20const__29(HEAP32[$7 + 156 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($7 + 24 | 0, HEAP32[$7 + 152 >> 2]);
 $2 = float_20const__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor_20const__29(HEAP32[$7 + 152 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($7, HEAP32[$7 + 148 >> 2]);
 tflite__reference_ops__FullyConnected_28tflite__FullyConnectedParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($7 + 96 | 0, $7 + 72 | 0, $0, $7 + 48 | 0, $1, $7 + 24 | 0, $2, $7, float__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor__29(HEAP32[$7 + 148 >> 2]));
 tflite__RuntimeShape___RuntimeShape_28_29($7);
 tflite__RuntimeShape___RuntimeShape_28_29($7 + 24 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($7 + 48 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($7 + 72 | 0);
 __stack_pointer = $7 + 176 | 0;
 return 0;
}

function jswrap_arraybufferview_map($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 176 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 168 >> 2] = $0;
 HEAP32[$3 + 164 >> 2] = $1;
 HEAP32[$3 + 160 >> 2] = $2;
 label$1: {
  if (!(jsvIsArrayBuffer(HEAP32[$3 + 168 >> 2]) & 1)) {
   jsExceptionHere(1, 96968, 0);
   HEAP32[$3 + 172 >> 2] = 0;
   break label$1;
  }
  if (!(jsvIsFunction(HEAP32[$3 + 164 >> 2]) & 1)) {
   jsExceptionHere(1, 102289, 0);
   HEAP32[$3 + 172 >> 2] = 0;
   break label$1;
  }
  label$4: {
   if (jsvIsUndefined(HEAP32[$3 + 160 >> 2]) & 1) {
    break label$4;
   }
   if (jsvIsObject(HEAP32[$3 + 160 >> 2]) & 1) {
    break label$4;
   }
   jsExceptionHere(1, 106457, 0);
   HEAP32[$3 + 172 >> 2] = 0;
   break label$1;
  }
  HEAP8[$3 + 159 | 0] = HEAPU8[HEAP32[$3 + 168 >> 2] + 5 | 0];
  HEAP32[$3 + 152 >> 2] = jsvNewTypedArray(HEAPU8[$3 + 159 | 0], jsvGetArrayBufferLength(HEAP32[$3 + 168 >> 2]));
  if (!HEAP32[$3 + 152 >> 2]) {
   HEAP32[$3 + 172 >> 2] = 0;
   break label$1;
  }
  jsvIteratorNew($3 + 88 | 0, HEAP32[$3 + 168 >> 2], 1);
  jsvArrayBufferIteratorNew($3 + 32 | 0, HEAP32[$3 + 152 >> 2], 0);
  while (1) {
   if (jsvIteratorHasElement($3 + 88 | 0) & 1) {
    HEAP32[$3 + 28 >> 2] = jsvIteratorGetKey($3 + 88 | 0);
    if (jsvIsInt(HEAP32[$3 + 28 >> 2]) & 1) {
     HEAP32[$3 + 24 >> 2] = jsvGetInteger(HEAP32[$3 + 28 >> 2]);
     HEAP32[$3 + 12 >> 2] = jsvIteratorGetValue($3 + 88 | 0);
     HEAP32[$3 + 16 >> 2] = jsvNewFromInteger(HEAP32[$3 + 24 >> 2]);
     HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 168 >> 2];
     HEAP32[$3 + 8 >> 2] = jspeFunctionCall(HEAP32[$3 + 164 >> 2], 0, HEAP32[$3 + 160 >> 2], 0, 3, $3 + 12 | 0);
     jsvUnLockMany(2, $3 + 12 | 0);
     if (HEAP32[$3 + 8 >> 2]) {
      jsvArrayBufferIteratorSetValue($3 + 32 | 0, HEAP32[$3 + 8 >> 2], 0);
      jsvUnLock(HEAP32[$3 + 8 >> 2]);
     }
    }
    jsvUnLock(HEAP32[$3 + 28 >> 2]);
    jsvIteratorNext($3 + 88 | 0);
    jsvArrayBufferIteratorNext($3 + 32 | 0);
    continue;
   }
   break;
  }
  jsvIteratorFree($3 + 88 | 0);
  jsvArrayBufferIteratorFree($3 + 32 | 0);
  HEAP32[$3 + 172 >> 2] = HEAP32[$3 + 152 >> 2];
 }
 __stack_pointer = $3 + 176 | 0;
 return HEAP32[$3 + 172 >> 2];
}

function tflite__ops__micro__pooling__MaxEval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1: {
  if (!HEAP32[HEAP32[$2 + 20 >> 2] + 12 >> 2]) {
   break label$1;
  }
 }
 HEAP32[$2 + 16 >> 2] = HEAP32[HEAP32[$2 + 20 >> 2] + 12 >> 2];
 label$2: {
  if (!HEAP32[HEAP32[$2 + 20 >> 2] + 8 >> 2]) {
   break label$2;
  }
 }
 HEAP32[$2 + 12 >> 2] = HEAP32[HEAP32[$2 + 20 >> 2] + 8 >> 2];
 HEAP32[$2 + 8 >> 2] = tflite__micro__GetEvalInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], 0);
 HEAP32[$2 + 4 >> 2] = tflite__micro__GetEvalOutput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], 0);
 label$3: {
  label$4: {
   label$5: {
    switch (HEAP32[HEAP32[$2 + 8 >> 2] + 8 >> 2] - 1 | 0) {
    case 0:
     tflite__ops__micro__pooling___28anonymous_20namespace_29__MaxEvalFloat_28TfLiteContext__2c_20TfLiteNode__2c_20TfLitePoolParams__2c_20tflite__ops__micro__pooling___28anonymous_20namespace_29__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 16 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]);
     break label$4;

    case 2:
    case 8:
     tflite__ops__micro__pooling___28anonymous_20namespace_29__MaxEvalQuantized_28TfLiteContext__2c_20TfLiteNode__2c_20TfLitePoolParams__2c_20tflite__ops__micro__pooling___28anonymous_20namespace_29__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 16 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]);
     break label$4;

    default:
     break label$5;
    }
   }
   $0 = HEAP32[HEAP32[$2 + 24 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 24 >> 2];
   HEAP32[$2 >> 2] = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 8 >> 2] + 8 >> 2]);
   FUNCTION_TABLE[$0 | 0]($1, 112055, $2);
   HEAP32[$2 + 28 >> 2] = 1;
   break label$3;
  }
  HEAP32[$2 + 28 >> 2] = 0;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function heatshrink_decode_cb($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 608 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 604 >> 2] = $0;
 HEAP32[$4 + 600 >> 2] = $1;
 HEAP32[$4 + 596 >> 2] = $2;
 HEAP32[$4 + 592 >> 2] = $3;
 heatshrink_decoder_reset($4 + 288 | 0);
 HEAP32[$4 + 24 >> 2] = 0;
 HEAP32[$4 + 20 >> 2] = 0;
 HEAP32[$4 + 16 >> 2] = 0;
 HEAP32[$4 + 12 >> 2] = 0;
 HEAP32[$4 + 8 >> 2] = 0;
 while (1) {
  $0 = 1;
  $0 = HEAP32[$4 + 16 >> 2] < 0 ? HEAP32[$4 + 12 >> 2] != 0 : $0;
  if ($0) {
   if (!HEAP32[$4 + 12 >> 2]) {
    HEAP32[$4 + 8 >> 2] = 0;
    while (1) {
     $0 = 0;
     $0 = HEAPU32[$4 + 12 >> 2] < 128 ? HEAP32[$4 + 16 >> 2] >= 0 : $0;
     if ($0) {
      HEAP32[$4 + 16 >> 2] = FUNCTION_TABLE[HEAP32[$4 + 604 >> 2]](HEAP32[$4 + 600 >> 2]);
      if (HEAP32[$4 + 16 >> 2] >= 0) {
       $1 = HEAP32[$4 + 16 >> 2];
       $0 = HEAP32[$4 + 12 >> 2];
       HEAP32[$4 + 12 >> 2] = $0 + 1;
       HEAP8[($4 + 160 | 0) + $0 | 0] = $1;
      }
      continue;
     }
     break;
    }
   }
   HEAP8[$4 + 7 | 0] = (heatshrink_decoder_sink($4 + 288 | 0, HEAP32[$4 + 8 >> 2] + ($4 + 160 | 0) | 0, HEAP32[$4 + 12 >> 2], $4 + 24 | 0) | 0) >= 0;
   HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 12 >> 2] - HEAP32[$4 + 24 >> 2];
   HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 24 >> 2] + HEAP32[$4 + 8 >> 2];
   if (!(HEAP32[$4 + 12 >> 2] | HEAP32[$4 + 16 >> 2] >= 0)) {
    heatshrink_decoder_finish($4 + 288 | 0);
   }
   while (1) {
    HEAP32[$4 >> 2] = heatshrink_decoder_poll($4 + 288 | 0, $4 + 32 | 0, 128, $4 + 24 | 0);
    if (HEAP32[$4 + 596 >> 2]) {
     HEAP32[$4 + 28 >> 2] = 0;
     while (1) {
      if (HEAPU32[$4 + 28 >> 2] < HEAPU32[$4 + 24 >> 2]) {
       FUNCTION_TABLE[HEAP32[$4 + 596 >> 2]](HEAPU8[HEAP32[$4 + 28 >> 2] + ($4 + 32 | 0) | 0], HEAP32[$4 + 592 >> 2]);
       HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 28 >> 2] + 1;
       continue;
      }
      break;
     }
    }
    HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 24 >> 2] + HEAP32[$4 + 20 >> 2];
    if (HEAP32[$4 >> 2] == 1) {
     continue;
    }
    break;
   }
   if (HEAP32[$4 + 16 >> 2] < 0) {
    heatshrink_decoder_finish($4 + 288 | 0);
   }
   continue;
  }
  break;
 }
 __stack_pointer = $4 + 608 | 0;
 return HEAP32[$4 + 20 >> 2];
}

function jswrap_object_on_X($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 44 >> 2] = $0;
 HEAP32[$4 + 40 >> 2] = $1;
 HEAP32[$4 + 36 >> 2] = $2;
 HEAP8[$4 + 35 | 0] = $3;
 label$1: {
  if (!(jsvHasChildren(HEAP32[$4 + 44 >> 2]) & 1)) {
   jsExceptionHere(3, 107694, 0);
   break label$1;
  }
  if (!(jsvIsString(HEAP32[$4 + 40 >> 2]) & 1)) {
   jsExceptionHere(3, 103795, 0);
   break label$1;
  }
  label$4: {
   if (jsvIsFunction(HEAP32[$4 + 36 >> 2]) & 1) {
    break label$4;
   }
   if (jsvIsString(HEAP32[$4 + 36 >> 2]) & 1) {
    break label$4;
   }
   jsExceptionHere(3, 103825, 0);
   break label$1;
  }
  HEAP32[$4 >> 2] = HEAP32[$4 + 40 >> 2];
  HEAP32[$4 + 28 >> 2] = jsvVarPrintf(97042, $4);
  if (!HEAP32[$4 + 28 >> 2]) {
   break label$1;
  }
  HEAP32[$4 + 24 >> 2] = jsvFindChildFromVar(HEAP32[$4 + 44 >> 2], HEAP32[$4 + 28 >> 2], 1);
  jsvUnLock(HEAP32[$4 + 28 >> 2]);
  HEAP32[$4 + 20 >> 2] = jsvSkipName(HEAP32[$4 + 24 >> 2]);
  label$5: {
   if (jsvIsUndefined(HEAP32[$4 + 20 >> 2]) & 1) {
    jsvSetValueOfName(HEAP32[$4 + 24 >> 2], HEAP32[$4 + 36 >> 2]);
    break label$5;
   }
   HEAP32[$4 + 16 >> 2] = jsvNewEmptyArray();
   if (HEAP8[$4 + 35 | 0] & 1) {
    jsvArrayPush(HEAP32[$4 + 16 >> 2], HEAP32[$4 + 36 >> 2]);
   }
   label$8: {
    if (jsvIsArray(HEAP32[$4 + 20 >> 2]) & 1) {
     jsvArrayPushAll(HEAP32[$4 + 16 >> 2], HEAP32[$4 + 20 >> 2], 0);
     break label$8;
    }
    jsvArrayPush(HEAP32[$4 + 16 >> 2], HEAP32[$4 + 20 >> 2]);
   }
   if (!(HEAP8[$4 + 35 | 0] & 1)) {
    jsvArrayPush(HEAP32[$4 + 16 >> 2], HEAP32[$4 + 36 >> 2]);
   }
   jsvSetValueOfName(HEAP32[$4 + 24 >> 2], HEAP32[$4 + 16 >> 2]);
   jsvUnLock(HEAP32[$4 + 16 >> 2]);
  }
  jsvUnLock2(HEAP32[$4 + 20 >> 2], HEAP32[$4 + 24 >> 2]);
  if (!(jsvIsStringEqual(HEAP32[$4 + 40 >> 2], 107892) & 1)) {
   break label$1;
  }
  HEAP32[$4 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 44 >> 2], 104027);
  if (jsvIsString(HEAP32[$4 + 12 >> 2]) & 1) {
   jsiQueueObjectCallbacks(HEAP32[$4 + 44 >> 2], 107815, $4 + 12 | 0, 1);
   jsvObjectRemoveChild(HEAP32[$4 + 44 >> 2], 104027);
  }
  jsvUnLock(HEAP32[$4 + 12 >> 2]);
 }
 __stack_pointer = $4 + 48 | 0;
}

function jswrap_spi_send8bit($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 112 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 108 >> 2] = $0;
 HEAP32[$5 + 104 >> 2] = $1;
 HEAP32[$5 + 100 >> 2] = $2;
 HEAP32[$5 + 96 >> 2] = $3;
 HEAP8[$5 + 95 | 0] = $4;
 label$1: {
  if (!(jsvIsObject(HEAP32[$5 + 108 >> 2]) & 1)) {
   break label$1;
  }
  HEAP8[$5 + 94 | 0] = jsiGetDeviceFromClass(HEAP32[$5 + 108 >> 2]);
  if (!(HEAPU8[$5 + 94 | 0] <= 25 & HEAPU8[$5 + 94 | 0] >= 25)) {
   jsExceptionHere(1, 109471, 0);
   break label$1;
  }
  jshSPISet16(HEAPU8[$5 + 94 | 0], 1);
  if (!(HEAP32[$5 + 100 >> 2] | HEAP32[$5 + 96 >> 2])) {
   HEAP32[$5 + 100 >> 2] = 3;
   HEAP32[$5 + 96 >> 2] = 15;
  }
  HEAP32[$5 + 100 >> 2] = HEAP32[$5 + 100 >> 2] & 255;
  HEAP32[$5 + 96 >> 2] = HEAP32[$5 + 96 >> 2] & 255;
  if (!(jshIsDeviceInitialised(HEAPU8[$5 + 94 | 0]) & 1)) {
   jshSPIInitInfo($5 + 80 | 0);
   jshSPISetup(HEAPU8[$5 + 94 | 0], $5 + 80 | 0);
  }
  jshSPISetReceive(HEAPU8[$5 + 94 | 0], 0);
  if (HEAPU8[$5 + 95 | 0] != 255) {
   jshPinOutput(HEAPU8[$5 + 95 | 0], 0);
  }
  label$7: {
   if (jsvIsNumeric(HEAP32[$5 + 104 >> 2]) & 1) {
    jsspiSend8bit(HEAPU8[$5 + 94 | 0], jsvGetInteger(HEAP32[$5 + 104 >> 2]) & 255, HEAP32[$5 + 100 >> 2], HEAP32[$5 + 96 >> 2]);
    break label$7;
   }
   label$9: {
    if (jsvIsIterable(HEAP32[$5 + 104 >> 2]) & 1) {
     jshInterruptOff();
     jsvIteratorNew($5 + 16 | 0, HEAP32[$5 + 104 >> 2], 1);
     while (1) {
      if (jsvIteratorHasElement($5 + 16 | 0) & 1) {
       HEAP8[$5 + 15 | 0] = jsvIteratorGetIntegerValue($5 + 16 | 0);
       jsspiSend8bit(HEAPU8[$5 + 94 | 0], HEAPU8[$5 + 15 | 0], HEAP32[$5 + 100 >> 2], HEAP32[$5 + 96 >> 2]);
       jsvIteratorNext($5 + 16 | 0);
       continue;
      }
      break;
     }
     jsvIteratorFree($5 + 16 | 0);
     jshInterruptOn();
     break label$9;
    }
    HEAP32[$5 >> 2] = HEAP32[$5 + 104 >> 2];
    jsExceptionHere(1, 102408, $5);
   }
  }
  jshSPIWait(HEAPU8[$5 + 94 | 0]);
  if (HEAPU8[$5 + 95 | 0] != 255) {
   jshPinOutput(HEAPU8[$5 + 95 | 0], 1);
  }
  jshSPISet16(HEAPU8[$5 + 94 | 0], 0);
 }
 __stack_pointer = $5 + 112 | 0;
}

function jswrap_spi_send4bit($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 112 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 108 >> 2] = $0;
 HEAP32[$5 + 104 >> 2] = $1;
 HEAP32[$5 + 100 >> 2] = $2;
 HEAP32[$5 + 96 >> 2] = $3;
 HEAP8[$5 + 95 | 0] = $4;
 label$1: {
  if (!(jsvIsObject(HEAP32[$5 + 108 >> 2]) & 1)) {
   break label$1;
  }
  HEAP8[$5 + 94 | 0] = jsiGetDeviceFromClass(HEAP32[$5 + 108 >> 2]);
  if (!(HEAPU8[$5 + 94 | 0] <= 25 & HEAPU8[$5 + 94 | 0] >= 25)) {
   jsExceptionHere(1, 109511, 0);
   break label$1;
  }
  jshSPISet16(HEAPU8[$5 + 94 | 0], 1);
  if (!(HEAP32[$5 + 100 >> 2] | HEAP32[$5 + 96 >> 2])) {
   HEAP32[$5 + 100 >> 2] = 1;
   HEAP32[$5 + 96 >> 2] = 3;
  }
  HEAP32[$5 + 100 >> 2] = HEAP32[$5 + 100 >> 2] & 15;
  HEAP32[$5 + 96 >> 2] = HEAP32[$5 + 96 >> 2] & 15;
  if (!(jshIsDeviceInitialised(HEAPU8[$5 + 94 | 0]) & 1)) {
   jshSPIInitInfo($5 + 80 | 0);
   jshSPISetup(HEAPU8[$5 + 94 | 0], $5 + 80 | 0);
  }
  jshSPISetReceive(HEAPU8[$5 + 94 | 0], 0);
  if (HEAPU8[$5 + 95 | 0] != 255) {
   jshPinOutput(HEAPU8[$5 + 95 | 0], 0);
  }
  label$7: {
   if (jsvIsNumeric(HEAP32[$5 + 104 >> 2]) & 1) {
    jsspiSend4bit(HEAPU8[$5 + 94 | 0], jsvGetInteger(HEAP32[$5 + 104 >> 2]) & 255, HEAP32[$5 + 100 >> 2], HEAP32[$5 + 96 >> 2]);
    break label$7;
   }
   label$9: {
    if (jsvIsIterable(HEAP32[$5 + 104 >> 2]) & 1) {
     jshInterruptOff();
     jsvIteratorNew($5 + 16 | 0, HEAP32[$5 + 104 >> 2], 1);
     while (1) {
      if (jsvIteratorHasElement($5 + 16 | 0) & 1) {
       HEAP8[$5 + 15 | 0] = jsvIteratorGetIntegerValue($5 + 16 | 0);
       jsspiSend4bit(HEAPU8[$5 + 94 | 0], HEAPU8[$5 + 15 | 0], HEAP32[$5 + 100 >> 2], HEAP32[$5 + 96 >> 2]);
       jsvIteratorNext($5 + 16 | 0);
       continue;
      }
      break;
     }
     jsvIteratorFree($5 + 16 | 0);
     jshInterruptOn();
     break label$9;
    }
    HEAP32[$5 >> 2] = HEAP32[$5 + 104 >> 2];
    jsExceptionHere(1, 102408, $5);
   }
  }
  jshSPIWait(HEAPU8[$5 + 94 | 0]);
  if (HEAPU8[$5 + 95 | 0] != 255) {
   jshPinOutput(HEAPU8[$5 + 95 | 0], 1);
  }
  jshSPISet16(HEAPU8[$5 + 94 | 0], 0);
 }
 __stack_pointer = $5 + 112 | 0;
}

function jswrap_graphics_setTheme($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 if (jsvIsObject(HEAP32[$2 + 8 >> 2]) & 1) {
  HEAP32[$2 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 8 >> 2], 103993);
  if (HEAP32[$2 + 4 >> 2]) {
   $0 = jswrap_graphics_toColor(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 4 >> 2], 0, 0);
   HEAP8[189412] = $0;
   HEAP8[189413] = $0 >>> 8;
   jsvUnLock(HEAP32[$2 + 4 >> 2]);
  }
  HEAP32[$2 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 8 >> 2], 103997);
  if (HEAP32[$2 + 4 >> 2]) {
   $0 = jswrap_graphics_toColor(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 4 >> 2], 0, 0);
   HEAP8[189414] = $0;
   HEAP8[189415] = $0 >>> 8;
   jsvUnLock(HEAP32[$2 + 4 >> 2]);
  }
  HEAP32[$2 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 8 >> 2], 110890);
  if (HEAP32[$2 + 4 >> 2]) {
   $0 = jswrap_graphics_toColor(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 4 >> 2], 0, 0);
   HEAP8[189416] = $0;
   HEAP8[189417] = $0 >>> 8;
   jsvUnLock(HEAP32[$2 + 4 >> 2]);
  }
  HEAP32[$2 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 8 >> 2], 110894);
  if (HEAP32[$2 + 4 >> 2]) {
   $0 = jswrap_graphics_toColor(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 4 >> 2], 0, 0);
   HEAP8[189418] = $0;
   HEAP8[189419] = $0 >>> 8;
   jsvUnLock(HEAP32[$2 + 4 >> 2]);
  }
  HEAP32[$2 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 8 >> 2], 109556);
  if (HEAP32[$2 + 4 >> 2]) {
   $0 = jswrap_graphics_toColor(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 4 >> 2], 0, 0);
   HEAP8[189420] = $0;
   HEAP8[189421] = $0 >>> 8;
   jsvUnLock(HEAP32[$2 + 4 >> 2]);
  }
  HEAP32[$2 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 8 >> 2], 109560);
  if (HEAP32[$2 + 4 >> 2]) {
   $0 = jswrap_graphics_toColor(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 4 >> 2], 0, 0);
   HEAP8[189422] = $0;
   HEAP8[189423] = $0 >>> 8;
   jsvUnLock(HEAP32[$2 + 4 >> 2]);
  }
  HEAP32[$2 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 8 >> 2], 103074);
  if (HEAP32[$2 + 4 >> 2]) {
   HEAP8[189424] = jsvGetBoolAndUnLock(HEAP32[$2 + 4 >> 2]) & 1;
  }
 }
 $0 = jsvLockAgain(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function jsvGetPathTo_int($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 128 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 120 >> 2] = $0;
 HEAP32[$5 + 116 >> 2] = $1;
 HEAP32[$5 + 112 >> 2] = $2;
 HEAP32[$5 + 108 >> 2] = $3;
 HEAP32[$5 + 104 >> 2] = $4;
 label$1: {
  if (HEAP32[$5 + 112 >> 2] <= 0) {
   HEAP32[$5 + 124 >> 2] = 0;
   break label$1;
  }
  HEAP32[$5 + 100 >> 2] = HEAP32[$5 + 112 >> 2] + 1;
  HEAP32[$5 + 96 >> 2] = 0;
  jsvIteratorNew($5 + 32 | 0, HEAP32[$5 + 120 >> 2], 0);
  while (1) {
   if (jsvIteratorHasElement($5 + 32 | 0) & 1) {
    HEAP32[$5 + 28 >> 2] = jsvIteratorGetValue($5 + 32 | 0);
    if (!(HEAP32[$5 + 120 >> 2] == HEAP32[$5 + 108 >> 2] | HEAP32[$5 + 28 >> 2] != HEAP32[$5 + 116 >> 2])) {
     HEAP32[$5 + 24 >> 2] = jsvAsStringAndUnLock(jsvIteratorGetKey($5 + 32 | 0));
     jsvIteratorFree($5 + 32 | 0);
     HEAP32[$5 + 124 >> 2] = HEAP32[$5 + 24 >> 2];
     break label$1;
    }
    label$6: {
     label$7: {
      if (jsvIsObject(HEAP32[$5 + 28 >> 2]) & 1) {
       break label$7;
      }
      if (jsvIsArray(HEAP32[$5 + 28 >> 2]) & 1) {
       break label$7;
      }
      if (!(jsvIsFunction(HEAP32[$5 + 28 >> 2]) & 1)) {
       break label$6;
      }
     }
     HEAP32[$5 + 16 >> 2] = jsvGetPathTo_int(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 116 >> 2], HEAP32[$5 + 112 >> 2] - 1 | 0, HEAP32[$5 + 108 >> 2], $5 + 20 | 0);
     if (!(!HEAP32[$5 + 16 >> 2] | HEAP32[$5 + 20 >> 2] >= HEAP32[$5 + 100 >> 2])) {
      HEAP32[$5 + 100 >> 2] = HEAP32[$5 + 20 >> 2];
      HEAP32[$5 + 12 >> 2] = jsvIteratorGetKey($5 + 32 | 0);
      jsvUnLock(HEAP32[$5 + 96 >> 2]);
      $0 = jsvIsObject(HEAP32[$5 + 28 >> 2]) & 1;
      $1 = HEAP32[$5 + 12 >> 2];
      HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 16 >> 2];
      HEAP32[$5 >> 2] = $1;
      HEAP32[$5 + 96 >> 2] = jsvVarPrintf($0 ? 97048 : 107949, $5);
      jsvUnLock(HEAP32[$5 + 12 >> 2]);
     }
     jsvUnLock(HEAP32[$5 + 16 >> 2]);
    }
    jsvIteratorNext($5 + 32 | 0);
    continue;
   }
   break;
  }
  jsvIteratorFree($5 + 32 | 0);
  HEAP32[HEAP32[$5 + 104 >> 2] >> 2] = HEAP32[$5 + 100 >> 2];
  HEAP32[$5 + 124 >> 2] = HEAP32[$5 + 96 >> 2];
 }
 __stack_pointer = $5 + 128 | 0;
 return HEAP32[$5 + 124 >> 2];
}

function jsvGetFloat($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 80 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 68 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 68 >> 2]) {
   HEAPF64[$1 + 72 >> 3] = nan;
   break label$1;
  }
  if (jsvIsFloat(HEAP32[$1 + 68 >> 2]) & 1) {
   $0 = HEAP32[$1 + 68 >> 2];
   $2 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
   wasm2js_scratch_store_i32(0, HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24));
   wasm2js_scratch_store_i32(1, $2 | 0);
   HEAPF64[$1 + 72 >> 3] = wasm2js_scratch_load_f64();
   break label$1;
  }
  if (jsvIsIntegerish(HEAP32[$1 + 68 >> 2]) & 1) {
   $0 = HEAP32[$1 + 68 >> 2];
   HEAPF64[$1 + 72 >> 3] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
   break label$1;
  }
  label$5: {
   if (!(jsvIsArray(HEAP32[$1 + 68 >> 2]) & 1)) {
    if (!(jsvIsArrayBuffer(HEAP32[$1 + 68 >> 2]) & 1)) {
     break label$5;
    }
   }
   HEAP32[$1 + 64 >> 2] = jsvGetLength(HEAP32[$1 + 68 >> 2]);
   if (!HEAP32[$1 + 64 >> 2]) {
    HEAPF64[$1 + 72 >> 3] = 0;
    break label$1;
   }
   if (HEAP32[$1 + 64 >> 2] == 1) {
    if (jsvIsArrayBuffer(HEAP32[$1 + 68 >> 2]) & 1) {
     HEAPF64[$1 + 72 >> 3] = jsvGetFloatAndUnLock(jsvArrayBufferGet(HEAP32[$1 + 68 >> 2], 0));
     break label$1;
    }
    HEAPF64[$1 + 72 >> 3] = jsvGetFloatAndUnLock(jsvSkipNameAndUnLock(jsvGetArrayItem(HEAP32[$1 + 68 >> 2], 0)));
    break label$1;
   }
  }
  if (jsvIsString(HEAP32[$1 + 68 >> 2]) & 1) {
   label$11: {
    if ((jsvGetString(HEAP32[$1 + 68 >> 2], $1, 64) | 0) == 64) {
     jsExceptionHere(1, 101497, 0);
     break label$11;
    }
    if (!HEAP8[$1 | 0]) {
     HEAPF64[$1 + 72 >> 3] = 0;
     break label$1;
    }
    if (!strcmp($1, 96419)) {
     HEAPF64[$1 + 72 >> 3] = infinity;
     break label$1;
    }
    if (!strcmp($1, 96418)) {
     HEAPF64[$1 + 72 >> 3] = -infinity;
     break label$1;
    }
    HEAPF64[$1 + 72 >> 3] = stringToFloat($1);
    break label$1;
   }
  }
  HEAPF64[$1 + 72 >> 3] = nan;
 }
 __stack_pointer = $1 + 80 | 0;
 return +HEAPF64[$1 + 72 >> 3];
}

function jsspiPopulateSPIInfo($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 128 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 124 >> 2] = $0;
 HEAP32[$2 + 120 >> 2] = $1;
 jshSPIInitInfo(HEAP32[$2 + 124 >> 2]);
 HEAP32[$2 + 116 >> 2] = 0;
 HEAP32[$2 + 112 >> 2] = HEAPU8[HEAP32[$2 + 124 >> 2] + 8 | 0];
 HEAP32[$2 + 16 >> 2] = 103100;
 HEAP16[$2 + 20 >> 1] = 13;
 HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 124 >> 2] + 5;
 HEAP32[$2 + 28 >> 2] = 102036;
 HEAP16[$2 + 32 >> 1] = 13;
 HEAP32[$2 + 36 >> 2] = HEAP32[$2 + 124 >> 2] + 6;
 HEAP32[$2 + 40 >> 2] = 103321;
 HEAP16[$2 + 44 >> 1] = 13;
 HEAP32[$2 + 48 >> 2] = HEAP32[$2 + 124 >> 2] + 7;
 HEAP32[$2 + 52 >> 2] = 105511;
 HEAP16[$2 + 56 >> 1] = 10;
 HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 124 >> 2];
 HEAP32[$2 + 64 >> 2] = 105433;
 HEAP16[$2 + 68 >> 1] = 10;
 HEAP32[$2 + 72 >> 2] = $2 + 112;
 HEAP32[$2 + 76 >> 2] = 101491;
 HEAP16[$2 + 80 >> 1] = 5;
 HEAP32[$2 + 84 >> 2] = $2 + 116;
 HEAP32[$2 + 88 >> 2] = 99994;
 HEAP16[$2 + 92 >> 1] = 10;
 HEAP32[$2 + 96 >> 2] = HEAP32[$2 + 124 >> 2] + 10;
 HEAP8[$2 + 15 | 0] = 1;
 if (jsvReadConfigObject(HEAP32[$2 + 120 >> 2], $2 + 16 | 0, 7) & 1) {
  HEAP8[HEAP32[$2 + 124 >> 2] + 8 | 0] = HEAP32[$2 + 112 >> 2] & 3;
  label$2: {
   label$3: {
    if (!(jsvIsString(HEAP32[$2 + 116 >> 2]) & 1)) {
     break label$3;
    }
    if (!(jsvIsStringEqual(HEAP32[$2 + 116 >> 2], 107766) & 1)) {
     break label$3;
    }
    HEAP8[HEAP32[$2 + 124 >> 2] + 9 | 0] = 1;
    break label$2;
   }
   label$4: {
    label$5: {
     if (!(jsvIsString(HEAP32[$2 + 116 >> 2]) & 1)) {
      break label$5;
     }
     if (!(jsvIsStringEqual(HEAP32[$2 + 116 >> 2], 107770) & 1)) {
      break label$5;
     }
     HEAP8[HEAP32[$2 + 124 >> 2] + 9 | 0] = 0;
     break label$4;
    }
    if (!(jsvIsUndefined(HEAP32[$2 + 116 >> 2]) & 1)) {
     jsExceptionHere(1, 126840, 0);
     HEAP8[$2 + 15 | 0] = 0;
    }
   }
  }
  $0 = HEAP32[$2 + 124 >> 2];
  if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) < 100) {
   jsExceptionHere(1, 104679, 0);
   HEAP8[$2 + 15 | 0] = 0;
  }
 }
 jsvUnLock(HEAP32[$2 + 116 >> 2]);
 __stack_pointer = $2 + 128 | 0;
 return HEAP8[$2 + 15 | 0] & 1;
}

function jsserialGetSendFunction($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 40 >> 2] = $0;
 HEAP32[$3 + 36 >> 2] = $1;
 HEAP32[$3 + 32 >> 2] = $2;
 HEAP8[$3 + 31 | 0] = jsiGetDeviceFromClass(HEAP32[$3 + 40 >> 2]);
 label$1: {
  if (!(HEAPU8[$3 + 31 | 0] < 17 | HEAPU8[$3 + 31 | 0] > 22)) {
   label$3: {
    if (HEAPU8[$3 + 31 | 0] < 22 | HEAPU8[$3 + 31 | 0] > 22) {
     break label$3;
    }
    if (jshIsDeviceInitialised(HEAPU8[$3 + 31 | 0]) & 1) {
     break label$3;
    }
    jshUSARTInitInfo($3 + 16 | 0);
    jshUSARTSetup(HEAPU8[$3 + 31 | 0], $3 + 16 | 0);
   }
   HEAP32[HEAP32[$3 + 36 >> 2] >> 2] = 551;
   HEAP8[HEAP32[$3 + 32 >> 2]] = HEAPU8[$3 + 31 | 0];
   HEAP8[$3 + 47 | 0] = 1;
   break label$1;
  }
  if (!HEAPU8[$3 + 31 | 0]) {
   HEAP32[$3 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 40 >> 2], 104661);
   HEAP32[$3 + 8 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 40 >> 2], 100220);
   jsserialPopulateUSARTInfo($3 + 16 | 0, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
   jsvUnLock(HEAP32[$3 + 8 >> 2]);
   jsvUnLock(HEAP32[$3 + 12 >> 2]);
   HEAP32[HEAP32[$3 + 36 >> 2] >> 2] = 552;
   $0 = HEAP32[$3 + 20 >> 2];
   $1 = HEAP32[$3 + 16 >> 2];
   $4 = $1;
   $2 = HEAP32[$3 + 32 >> 2];
   $1 = $2;
   HEAP8[$1 | 0] = $4;
   HEAP8[$1 + 1 | 0] = $4 >>> 8;
   HEAP8[$1 + 2 | 0] = $4 >>> 16;
   HEAP8[$1 + 3 | 0] = $4 >>> 24;
   HEAP8[$1 + 4 | 0] = $0;
   HEAP8[$1 + 5 | 0] = $0 >>> 8;
   HEAP8[$1 + 6 | 0] = $0 >>> 16;
   HEAP8[$1 + 7 | 0] = $0 >>> 24;
   $1 = HEAPU8[$3 + 25 | 0] | HEAPU8[$3 + 26 | 0] << 8 | (HEAPU8[$3 + 27 | 0] << 16 | HEAPU8[$3 + 28 | 0] << 24);
   $0 = HEAPU8[$3 + 21 | 0] | HEAPU8[$3 + 22 | 0] << 8 | (HEAPU8[$3 + 23 | 0] << 16 | HEAPU8[$3 + 24 | 0] << 24);
   $4 = $0;
   $0 = $2;
   HEAP8[$0 + 5 | 0] = $4;
   HEAP8[$0 + 6 | 0] = $4 >>> 8;
   HEAP8[$0 + 7 | 0] = $4 >>> 16;
   HEAP8[$0 + 8 | 0] = $4 >>> 24;
   HEAP8[$0 + 9 | 0] = $1;
   HEAP8[$0 + 10 | 0] = $1 >>> 8;
   HEAP8[$0 + 11 | 0] = $1 >>> 16;
   HEAP8[$0 + 12 | 0] = $1 >>> 24;
   HEAP8[$3 + 47 | 0] = 1;
   break label$1;
  }
  HEAP8[$3 + 47 | 0] = 0;
 }
 __stack_pointer = $3 + 48 | 0;
 return HEAP8[$3 + 47 | 0] & 1;
}

function jswrap_spi_write($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 80 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 76 >> 2] = $0;
 HEAP32[$2 + 72 >> 2] = $1;
 label$1: {
  if (!(jsvIsObject(HEAP32[$2 + 76 >> 2]) & 1)) {
   break label$1;
  }
  HEAP8[$2 + 71 | 0] = jsiGetDeviceFromClass(HEAP32[$2 + 76 >> 2]);
  if (!(jsspiGetSendFunction(HEAP32[$2 + 76 >> 2], $2 - -64 | 0, $2 + 48 | 0) & 1)) {
   break label$1;
  }
  HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 64 >> 2];
  $0 = HEAP32[$2 + 52 >> 2];
  $1 = HEAP32[$2 + 48 >> 2];
  $3 = $1;
  $4 = $2 + 24 | 0;
  $1 = $4;
  HEAP8[$1 + 4 | 0] = $3;
  HEAP8[$1 + 5 | 0] = $3 >>> 8;
  HEAP8[$1 + 6 | 0] = $3 >>> 16;
  HEAP8[$1 + 7 | 0] = $3 >>> 24;
  HEAP8[$1 + 8 | 0] = $0;
  HEAP8[$1 + 9 | 0] = $0 >>> 8;
  HEAP8[$1 + 10 | 0] = $0 >>> 16;
  HEAP8[$1 + 11 | 0] = $0 >>> 24;
  $1 = HEAPU16[$2 + 58 >> 1] | HEAPU16[$2 + 60 >> 1] << 16;
  $0 = HEAPU16[$2 + 54 >> 1] | HEAPU16[$2 + 56 >> 1] << 16;
  $3 = $0;
  $0 = $4;
  HEAP8[$0 + 10 | 0] = $3;
  HEAP8[$0 + 11 | 0] = $3 >>> 8;
  HEAP8[$0 + 12 | 0] = $3 >>> 16;
  HEAP8[$0 + 13 | 0] = $3 >>> 24;
  HEAP8[$0 + 14 | 0] = $1;
  HEAP8[$0 + 15 | 0] = $1 >>> 8;
  HEAP8[$0 + 16 | 0] = $1 >>> 16;
  HEAP8[$0 + 17 | 0] = $1 >>> 24;
  HEAP8[$2 + 23 | 0] = 255;
  HEAP32[$2 + 16 >> 2] = jsvGetArrayLength(HEAP32[$2 + 72 >> 2]);
  if (HEAP32[$2 + 16 >> 2] > 0) {
   HEAP32[$2 + 12 >> 2] = jsvGetArrayItem(HEAP32[$2 + 72 >> 2], HEAP32[$2 + 16 >> 2] - 1 | 0);
   if (jsvIsPin(HEAP32[$2 + 12 >> 2]) & 1) {
    HEAP8[$2 + 23 | 0] = jshGetPinFromVar(HEAP32[$2 + 12 >> 2]);
    jsvUnLock(jsvArrayPop(HEAP32[$2 + 72 >> 2]));
   }
   jsvUnLock(HEAP32[$2 + 12 >> 2]);
  }
  if (!(HEAPU8[$2 + 71 | 0] < 25 | HEAPU8[$2 + 71 | 0] > 25)) {
   jshSPISetReceive(HEAPU8[$2 + 71 | 0], 0);
  }
  if (HEAPU8[$2 + 23 | 0] != 255) {
   jshPinOutput(HEAPU8[$2 + 23 | 0], 0);
  }
  jsvIterateBufferCallback(HEAP32[$2 + 72 >> 2], 627, $2 + 24 | 0);
  if (!(HEAPU8[$2 + 71 | 0] < 25 | HEAPU8[$2 + 71 | 0] > 25)) {
   jshSPIWait(HEAPU8[$2 + 71 | 0]);
  }
  if (HEAPU8[$2 + 23 | 0] == 255) {
   break label$1;
  }
  jshPinOutput(HEAPU8[$2 + 23 | 0], 1);
 }
 __stack_pointer = $2 + 80 | 0;
}

function jspeiFindChildFromStringInParents($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 label$1: {
  label$2: {
   if (jsvIsObject(HEAP32[$2 + 40 >> 2]) & 1) {
    HEAP32[$2 + 32 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 40 >> 2], 107914);
    if (!HEAP32[$2 + 32 >> 2]) {
     HEAP32[$2 + 32 >> 2] = jspFindPrototypeFor(98070);
    }
    label$5: {
     if (!(!HEAP32[$2 + 32 >> 2] | HEAP32[$2 + 32 >> 2] == HEAP32[$2 + 40 >> 2])) {
      HEAP32[$2 + 28 >> 2] = jsvFindChildFromString(HEAP32[$2 + 32 >> 2], HEAP32[$2 + 36 >> 2]);
      if (!HEAP32[$2 + 28 >> 2]) {
       HEAP32[$2 + 28 >> 2] = jspeiFindChildFromStringInParents(HEAP32[$2 + 32 >> 2], HEAP32[$2 + 36 >> 2]);
      }
      jsvUnLock(HEAP32[$2 + 32 >> 2]);
      if (HEAP32[$2 + 28 >> 2]) {
       HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 28 >> 2];
       break label$1;
      }
      break label$5;
     }
     jsvUnLock(HEAP32[$2 + 32 >> 2]);
    }
    break label$2;
   }
   HEAP32[$2 + 24 >> 2] = jswGetBasicObjectName(HEAP32[$2 + 40 >> 2]);
   while (1) {
    if (HEAP32[$2 + 24 >> 2]) {
     HEAP32[$2 + 20 >> 2] = jsvFindChildFromString(HEAP32[46747], HEAP32[$2 + 24 >> 2]);
     if (!HEAP32[$2 + 20 >> 2]) {
      HEAP32[$2 + 20 >> 2] = jspNewPrototype(HEAP32[$2 + 24 >> 2], 1);
     }
     if (HEAP32[$2 + 20 >> 2]) {
      HEAP32[$2 + 16 >> 2] = 0;
      HEAP32[$2 + 12 >> 2] = jsvSkipNameAndUnLock(HEAP32[$2 + 20 >> 2]);
      if (jsvHasChildren(HEAP32[$2 + 12 >> 2]) & 1) {
       HEAP32[$2 + 8 >> 2] = jspGetNamedField(HEAP32[$2 + 12 >> 2], 104794, 0);
       if (HEAP32[$2 + 8 >> 2]) {
        HEAP32[$2 + 16 >> 2] = jsvFindChildFromString(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 36 >> 2]);
        jsvUnLock(HEAP32[$2 + 8 >> 2]);
       }
      }
      jsvUnLock(HEAP32[$2 + 12 >> 2]);
      if (HEAP32[$2 + 16 >> 2]) {
       HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 16 >> 2];
       break label$1;
      }
     }
     HEAP32[$2 + 24 >> 2] = jswGetBasicObjectPrototypeName(HEAP32[$2 + 24 >> 2]);
     continue;
    }
    break;
   }
  }
  HEAP32[$2 + 44 >> 2] = 0;
 }
 __stack_pointer = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}

function jswrap_encodeURIComponent($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 112 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 104 >> 2] = $0;
 HEAP32[$1 + 100 >> 2] = jsvAsString(HEAP32[$1 + 104 >> 2]);
 label$1: {
  if (!HEAP32[$1 + 100 >> 2]) {
   HEAP32[$1 + 108 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 96 >> 2] = jsvNewFromEmptyString_6();
  if (HEAP32[$1 + 96 >> 2]) {
   jsvStringIteratorNew($1 + 56 | 0, HEAP32[$1 + 100 >> 2], 0);
   jsvStringIteratorNew($1 + 16 | 0, HEAP32[$1 + 96 >> 2], 0);
   while (1) {
    if (jsvStringIteratorHasChar_6($1 + 56 | 0) & 1) {
     HEAP8[$1 + 15 | 0] = jsvStringIteratorGetCharAndNext($1 + 56 | 0);
     label$6: {
      label$7: {
       label$8: {
        if (isAlpha(HEAP8[$1 + 15 | 0]) & 1) {
         break label$8;
        }
        if (isNumeric(HEAP8[$1 + 15 | 0]) & 1 | HEAP8[$1 + 15 | 0] == 45 | (HEAP8[$1 + 15 | 0] == 46 | HEAP8[$1 + 15 | 0] == 33)) {
         break label$8;
        }
        if (HEAP8[$1 + 15 | 0] == 126 | HEAP8[$1 + 15 | 0] == 42 | (HEAP8[$1 + 15 | 0] == 39 | HEAP8[$1 + 15 | 0] == 40)) {
         break label$8;
        }
        if (HEAP8[$1 + 15 | 0] != 41) {
         break label$7;
        }
       }
       jsvStringIteratorAppend($1 + 16 | 0, HEAP8[$1 + 15 | 0]);
       break label$6;
      }
      jsvStringIteratorAppend($1 + 16 | 0, 37);
      HEAP32[$1 + 8 >> 2] = HEAP8[$1 + 15 | 0] >>> 4;
      $2 = $1 + 16 | 0;
      if (HEAPU32[$1 + 8 >> 2] > 9) {
       $0 = HEAP32[$1 + 8 >> 2] + 55 | 0;
      } else {
       $0 = HEAP32[$1 + 8 >> 2] + 48 | 0;
      }
      jsvStringIteratorAppend($2, $0 << 24 >> 24);
      HEAP32[$1 + 8 >> 2] = HEAP8[$1 + 15 | 0] & 15;
      $2 = $1 + 16 | 0;
      if (HEAPU32[$1 + 8 >> 2] > 9) {
       $0 = HEAP32[$1 + 8 >> 2] + 55 | 0;
      } else {
       $0 = HEAP32[$1 + 8 >> 2] + 48 | 0;
      }
      jsvStringIteratorAppend($2, $0 << 24 >> 24);
     }
     continue;
    }
    break;
   }
   jsvStringIteratorFree_7($1 + 16 | 0);
   jsvStringIteratorFree_7($1 + 56 | 0);
  }
  jsvUnLock(HEAP32[$1 + 100 >> 2]);
  HEAP32[$1 + 108 >> 2] = HEAP32[$1 + 96 >> 2];
 }
 __stack_pointer = $1 + 112 | 0;
 return HEAP32[$1 + 108 >> 2];
}

function _jswrap_i2c_readFrom($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0;
 $6 = __stack_pointer - 112 | 0;
 $5 = $6;
 __stack_pointer = $5;
 HEAP32[$5 + 104 >> 2] = $0;
 HEAP8[$5 + 103 | 0] = $1;
 HEAP32[$5 + 96 >> 2] = $2;
 HEAP8[$5 + 95 | 0] = $3;
 HEAP32[$5 + 88 >> 2] = $4;
 label$1: {
  if (HEAP32[$5 + 88 >> 2] <= 0) {
   HEAP32[$5 + 108 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$5 + 88 >> 2] + 256 >>> 0 > jsuGetFreeStack() >>> 0) {
   jsExceptionHere(1, 107864, 0);
   HEAP32[$5 + 108 >> 2] = 0;
   break label$1;
  }
  $6 = $6 - (HEAP32[$5 + 88 >> 2] + 15 & -16) | 0;
  __stack_pointer = $6;
  HEAP32[$5 + 84 >> 2] = $6;
  label$4: {
   if (!(HEAPU8[$5 + 103 | 0] < 26 | HEAPU8[$5 + 103 | 0] > 26)) {
    jshI2CRead(HEAPU8[$5 + 103 | 0], HEAP32[$5 + 96 >> 2] & 255, HEAP32[$5 + 88 >> 2], HEAP32[$5 + 84 >> 2], HEAP8[$5 + 95 | 0] & 1);
    break label$4;
   }
   label$6: {
    if (!HEAPU8[$5 + 103 | 0]) {
     HEAP32[$5 + 68 >> 2] = jsvObjectGetChildIfExists(HEAP32[$5 + 104 >> 2], 100220);
     if (jsi2cPopulateI2CInfo($5 + 72 | 0, HEAP32[$5 + 68 >> 2]) & 1) {
      HEAP8[$5 + 78 | 0] = jsvObjectGetBoolChild(HEAP32[$5 + 104 >> 2], 106181) & 1;
      jsi2cRead($5 + 72 | 0, HEAP32[$5 + 96 >> 2] & 255, HEAP32[$5 + 88 >> 2], HEAP32[$5 + 84 >> 2], HEAP8[$5 + 95 | 0] & 1);
     }
     jsvUnLock2(jsvObjectSetChild(HEAP32[$5 + 104 >> 2], 106181, jsvNewFromBool(HEAP8[$5 + 78 | 0] & 1)), HEAP32[$5 + 68 >> 2]);
     break label$6;
    }
    HEAP32[$5 + 108 >> 2] = 0;
    break label$1;
   }
  }
  HEAP32[$5 + 64 >> 2] = jsvNewTypedArray(1, HEAP32[$5 + 88 >> 2]);
  if (HEAP32[$5 + 64 >> 2]) {
   jsvArrayBufferIteratorNew($5 + 8 | 0, HEAP32[$5 + 64 >> 2], 0);
   HEAP32[$5 + 4 >> 2] = 0;
   while (1) {
    if (HEAPU32[$5 + 4 >> 2] < HEAPU32[$5 + 88 >> 2]) {
     jsvArrayBufferIteratorSetByteValue($5 + 8 | 0, HEAP8[HEAP32[$5 + 84 >> 2] + HEAP32[$5 + 4 >> 2] | 0]);
     jsvArrayBufferIteratorNext($5 + 8 | 0);
     HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] + 1;
     continue;
    }
    break;
   }
   jsvArrayBufferIteratorFree($5 + 8 | 0);
  }
  HEAP32[$5 + 108 >> 2] = HEAP32[$5 + 64 >> 2];
 }
 __stack_pointer = $5 + 112 | 0;
 return HEAP32[$5 + 108 >> 2];
}

function jswrap_interface_clearWatch($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer + -64 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 60 >> 2] = $0;
 label$1: {
  label$2: {
   if (!(jsvIsUndefined(HEAP32[$1 + 60 >> 2]) & 1)) {
    if (jsvGetArrayLength(HEAP32[$1 + 60 >> 2])) {
     break label$2;
    }
   }
   HEAP32[$1 + 56 >> 2] = jsvLock(HEAPU16[93523]);
   jsvObjectIteratorNew($1 + 48 | 0, HEAP32[$1 + 56 >> 2]);
   while (1) {
    if (jsvObjectIteratorHasValue_15($1 + 48 | 0) & 1) {
     HEAP32[$1 + 44 >> 2] = jsvObjectIteratorGetValue_14($1 + 48 | 0);
     HEAP32[$1 + 40 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 44 >> 2], 102482);
     HEAP8[$1 + 39 | 0] = jshGetPinFromVar(HEAP32[$1 + 40 >> 2]);
     if (!(jshGetPinShouldStayWatched(HEAPU8[$1 + 39 | 0]) & 1)) {
      jshPinWatch(HEAPU8[$1 + 39 | 0], 0, 0);
     }
     jsvUnLock2(HEAP32[$1 + 40 >> 2], HEAP32[$1 + 44 >> 2]);
     jsvObjectIteratorNext($1 + 48 | 0);
     continue;
    }
    break;
   }
   jsvObjectIteratorFree_15($1 + 48 | 0);
   jsvRemoveAllChildren(HEAP32[$1 + 56 >> 2]);
   jsvUnLock(HEAP32[$1 + 56 >> 2]);
   break label$1;
  }
  HEAP32[$1 + 32 >> 2] = jsvGetArrayItem(HEAP32[$1 + 60 >> 2], 0);
  if (jsvIsUndefined(HEAP32[$1 + 32 >> 2]) & 1) {
   jsExceptionHere(1, 106957, 0);
   break label$1;
  }
  HEAP32[$1 + 28 >> 2] = jsvLock(HEAPU16[93523]);
  HEAP32[$1 + 24 >> 2] = jsvFindChildFromVar(HEAP32[$1 + 28 >> 2], HEAP32[$1 + 32 >> 2], 0);
  jsvUnLock(HEAP32[$1 + 28 >> 2]);
  label$8: {
   if (HEAP32[$1 + 24 >> 2]) {
    HEAP32[$1 + 20 >> 2] = jsvSkipName(HEAP32[$1 + 24 >> 2]);
    HEAP8[$1 + 19 | 0] = jshGetPinFromVarAndUnLock(jsvObjectGetChildIfExists(HEAP32[$1 + 20 >> 2], 102482));
    jsvUnLock(HEAP32[$1 + 20 >> 2]);
    HEAP32[$1 + 12 >> 2] = jsvLock(HEAPU16[93523]);
    jsvRemoveChildAndUnLock(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 24 >> 2]);
    jsvUnLock(HEAP32[$1 + 12 >> 2]);
    if (!(jsiIsWatchingPin(HEAPU8[$1 + 19 | 0]) & 1)) {
     jshPinWatch(HEAPU8[$1 + 19 | 0], 0, 0);
    }
    break label$8;
   }
   HEAP32[$1 >> 2] = HEAP32[$1 + 32 >> 2];
   jsExceptionHere(1, 97091, $1);
  }
  jsvUnLock(HEAP32[$1 + 32 >> 2]);
 }
 __stack_pointer = $1 - -64 | 0;
}

function jslPrintTokenisedChar($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 96 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 92 >> 2] = $0;
 HEAP32[$6 + 88 >> 2] = $1;
 HEAP32[$6 + 84 >> 2] = $2;
 HEAP32[$6 + 80 >> 2] = $3;
 HEAP32[$6 + 76 >> 2] = $4;
 HEAP32[$6 + 72 >> 2] = $5;
 HEAP8[$6 + 71 | 0] = jsvStringIteratorGetCharAndNext(HEAP32[$6 + 92 >> 2]);
 label$1: {
  if (!(HEAPU8[$6 + 71 | 0] != 209 & HEAPU8[$6 + 71 | 0] != 210)) {
   HEAP32[$6 + 64 >> 2] = jsvStringIteratorGetCharAndNext(HEAP32[$6 + 92 >> 2]) & 255;
   if (HEAPU8[$6 + 71 | 0] == 210) {
    $0 = HEAP32[$6 + 80 >> 2];
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
    HEAP32[$6 + 64 >> 2] = (jsvStringIteratorGetCharAndNext(HEAP32[$6 + 92 >> 2]) & 255) << 8 | HEAP32[$6 + 64 >> 2];
   }
   $0 = HEAP32[$6 + 80 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
   FUNCTION_TABLE[HEAP32[$6 + 76 >> 2]](126943, HEAP32[$6 + 72 >> 2]);
   while (1) {
    $0 = HEAP32[$6 + 64 >> 2];
    HEAP32[$6 + 64 >> 2] = $0 - 1;
    if ($0) {
     HEAP8[$6 + 63 | 0] = jsvStringIteratorGetCharAndNext(HEAP32[$6 + 92 >> 2]);
     HEAP32[$6 + 56 >> 2] = escapeCharacter(HEAP8[$6 + 63 | 0], 0, 0);
     $0 = HEAP32[$6 + 80 >> 2];
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     FUNCTION_TABLE[HEAP32[$6 + 76 >> 2]](HEAP32[$6 + 56 >> 2], HEAP32[$6 + 72 >> 2]);
     continue;
    }
    break;
   }
   FUNCTION_TABLE[HEAP32[$6 + 76 >> 2]](126943, HEAP32[$6 + 72 >> 2]);
   break label$1;
  }
  if (jslNeedSpaceBetween(HEAPU8[HEAP32[$6 + 88 >> 2]], HEAPU8[$6 + 71 | 0]) & 1) {
   $0 = HEAP32[$6 + 84 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
   FUNCTION_TABLE[HEAP32[$6 + 76 >> 2]](127850, HEAP32[$6 + 72 >> 2]);
  }
  jslFunctionCharAsString(HEAPU8[$6 + 71 | 0], $6 + 16 | 0, 32);
  HEAP32[$6 + 12 >> 2] = strlen($6 + 16 | 0);
  if (HEAP32[$6 + 12 >> 2]) {
   $0 = HEAP32[$6 + 84 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + (HEAP32[$6 + 12 >> 2] - 1 | 0);
  }
  FUNCTION_TABLE[HEAP32[$6 + 76 >> 2]]($6 + 16 | 0, HEAP32[$6 + 72 >> 2]);
  $0 = HEAP32[$6 + 80 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
  HEAP8[HEAP32[$6 + 88 >> 2]] = HEAPU8[$6 + 71 | 0];
 }
 __stack_pointer = $6 + 96 | 0;
}

function jsvReplaceWith($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 44 >> 2] = $0;
 HEAP32[$2 + 40 >> 2] = $1;
 label$1: {
  if (jsvIsArrayBufferName(HEAP32[$2 + 44 >> 2]) & 1) {
   HEAP32[$2 + 36 >> 2] = jsvGetInteger(HEAP32[$2 + 44 >> 2]);
   HEAP32[$2 + 32 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$2 + 44 >> 2]) & 65535);
   jsvArrayBufferSet(HEAP32[$2 + 32 >> 2], HEAP32[$2 + 36 >> 2], HEAP32[$2 + 40 >> 2]);
   jsvUnLock(HEAP32[$2 + 32 >> 2]);
   break label$1;
  }
  if (!(jsvIsName(HEAP32[$2 + 44 >> 2]) & 1)) {
   HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 44 >> 2];
   jsExceptionHere(1, 99429, $2 + 16 | 0);
   break label$1;
  }
  if (jsvIsConstant(HEAP32[$2 + 44 >> 2]) & 1) {
   jsExceptionHere(3, 97798, 0);
   break label$1;
  }
  HEAP32[$2 + 28 >> 2] = jsvGetValueOfName(HEAP32[$2 + 44 >> 2]);
  if (jsvIsGetterOrSetter(HEAP32[$2 + 28 >> 2]) & 1) {
   label$6: {
    if (jsvIsNewChild(HEAP32[$2 + 44 >> 2]) & 1) {
     $0 = jsvLock(jsvGetNextSibling(HEAP32[$2 + 44 >> 2]) & 65535);
     break label$6;
    }
    $0 = 0;
   }
   HEAP32[$2 + 24 >> 2] = $0;
   jsvExecuteSetter(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 28 >> 2], HEAP32[$2 + 40 >> 2]);
   jsvUnLock2(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 24 >> 2]);
   break label$1;
  }
  jsvUnLock(HEAP32[$2 + 28 >> 2]);
  jsvSetValueOfName(HEAP32[$2 + 44 >> 2], HEAP32[$2 + 40 >> 2]);
  if (!(jsvIsNewChild(HEAP32[$2 + 44 >> 2]) & 1)) {
   break label$1;
  }
  HEAP32[$2 + 20 >> 2] = jsvLock(jsvGetNextSibling(HEAP32[$2 + 44 >> 2]) & 65535);
  if (!(jsvIsString(HEAP32[$2 + 20 >> 2]) & 1)) {
   label$9: {
    if (!(jsvHasChildren(HEAP32[$2 + 20 >> 2]) & 1)) {
     $0 = HEAP32[$2 + 44 >> 2];
     HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 20 >> 2];
     HEAP32[$2 >> 2] = $0;
     jsExceptionHere(1, 99322, $2);
     break label$9;
    }
    jsvUnRef(HEAP32[$2 + 20 >> 2]);
    jsvSetNextSibling(HEAP32[$2 + 44 >> 2], 0);
    jsvUnRef(HEAP32[$2 + 20 >> 2]);
    jsvSetPrevSibling(HEAP32[$2 + 44 >> 2], 0);
    jsvAddName(HEAP32[$2 + 20 >> 2], HEAP32[$2 + 44 >> 2]);
   }
  }
  jsvUnLock(HEAP32[$2 + 20 >> 2]);
 }
 __stack_pointer = $2 + 48 | 0;
}

function tflite___28anonymous_20namespace_29__AllocationInfoBuilder__GetOfflinePlannedOffsets_28tflite__Model_20const__2c_20int_20const___29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer + -64 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 56 >> 2] = $0;
 HEAP32[$3 + 52 >> 2] = $1;
 HEAP32[$3 + 48 >> 2] = $2;
 $0 = HEAP32[$3 + 56 >> 2];
 label$1: {
  if (tflite__Model__metadata_28_29_20const(HEAP32[$3 + 52 >> 2])) {
   HEAP32[$3 + 44 >> 2] = 0;
   while (1) {
    if (HEAPU32[$3 + 44 >> 2] < flatbuffers__Vector_flatbuffers__Offset_tflite__Metadata____size_28_29_20const(tflite__Model__metadata_28_29_20const(HEAP32[$3 + 52 >> 2])) >>> 0) {
     HEAP32[$3 + 40 >> 2] = flatbuffers__Vector_flatbuffers__Offset_tflite__Metadata____Get_28unsigned_20int_29_20const(tflite__Model__metadata_28_29_20const(HEAP32[$3 + 52 >> 2]), HEAP32[$3 + 44 >> 2]);
     if (!strncmp(flatbuffers__String__c_str_28_29_20const(tflite__Metadata__name_28_29_20const(HEAP32[$3 + 40 >> 2])), 148032, 23)) {
      HEAP32[$3 + 36 >> 2] = tflite__Model__buffers_28_29_20const(HEAP32[$3 + 52 >> 2]);
      HEAP32[$3 + 32 >> 2] = flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer____operator_5b_5d_28unsigned_20int_29_20const(HEAP32[$3 + 36 >> 2], tflite__Metadata__buffer_28_29_20const(HEAP32[$3 + 40 >> 2]));
      HEAP32[$3 + 28 >> 2] = tflite__Buffer__data_28_29_20const(HEAP32[$3 + 32 >> 2]);
      HEAP32[$3 + 24 >> 2] = flatbuffers__Vector_unsigned_20char___data_28_29_20const(HEAP32[$3 + 28 >> 2]);
      HEAP32[$3 + 20 >> 2] = HEAP32[HEAP32[$3 + 24 >> 2] + 8 >> 2];
      HEAP32[HEAP32[$3 + 48 >> 2] >> 2] = HEAP32[$3 + 24 >> 2] + 12;
      if (HEAP32[$0 + 8 >> 2] != HEAP32[$3 + 20 >> 2]) {
       $1 = HEAP32[$0 >> 2];
       $2 = HEAP32[$3 + 20 >> 2];
       HEAP32[$3 + 4 >> 2] = HEAP32[$0 + 8 >> 2];
       HEAP32[$3 >> 2] = $2;
       tflite__ErrorReporter__Report_28char_20const__2c_20____29($1, 129390, $3);
       HEAP32[$3 + 60 >> 2] = 1;
       break label$1;
      }
     }
     HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 44 >> 2] + 1;
     continue;
    }
    break;
   }
  }
  HEAP32[$3 + 60 >> 2] = 0;
 }
 __stack_pointer = $3 - -64 | 0;
 return HEAP32[$3 + 60 >> 2];
}

function jsiSoftInit($0) {
 var $1 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 47 | 0] = $0;
 HEAP8[186986] = 0;
 HEAP8[187067] = 0;
 HEAP32[46760] = jsvNewEmptyArray();
 HEAP32[46763] = jsvNewFromEmptyString_5();
 HEAP32[46765] = 0;
 HEAP16[93536] = 0;
 jsiInputLineCursorMoved();
 HEAP32[46772] = 0;
 jsfSetFlag(1, 0);
 HEAP8[153825] = 255;
 HEAP8[153826] = 255;
 HEAP16[93522] = _jsiInitNamedArray(100100);
 HEAP16[93523] = _jsiInitNamedArray(100438);
 HEAP32[46778] = jshGetSystemTime();
 HEAP32[46779] = i64toi32_i32$HIGH_BITS;
 HEAP32[$1 + 40 >> 2] = jsvObjectGetChildIfExists(HEAP32[46748], 100312);
 if (HEAP32[$1 + 40 >> 2]) {
  HEAP8[154464] = jsvGetIntegerAndUnLock(HEAP32[$1 + 40 >> 2]);
  jsvObjectRemoveChild(HEAP32[46748], 100312);
 }
 jswInit();
 jsfLoadBootCodeFromFlash(HEAP8[$1 + 47 | 0] & 1);
 HEAP32[$1 + 36 >> 2] = jsvObjectGetChildIfExists(HEAP32[46748], 97862);
 if (HEAP32[$1 + 36 >> 2]) {
  jsvUnLock2(jspEvaluateVar(HEAP32[$1 + 36 >> 2], 0, 0), HEAP32[$1 + 36 >> 2]);
  jsvObjectRemoveChild(HEAP32[46748], 97862);
 }
 if (HEAPU16[93523]) {
  HEAP32[$1 + 32 >> 2] = jsvLock(HEAPU16[93523]);
  jsvObjectIteratorNew($1 + 24 | 0, HEAP32[$1 + 32 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_3($1 + 24 | 0) & 1) {
    HEAP32[$1 + 20 >> 2] = jsvObjectIteratorGetValue_3($1 + 24 | 0);
    HEAP32[$1 + 16 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 20 >> 2], 102482);
    HEAP8[$1 + 15 | 0] = jsvObjectGetBoolChild(HEAP32[$1 + 20 >> 2], 106725) & 1;
    jshPinWatch(jshGetPinFromVar(HEAP32[$1 + 16 >> 2]) & 255, 1, HEAP8[$1 + 15 | 0] & 1);
    jsvUnLock2(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 20 >> 2]);
    jsvObjectIteratorNext($1 + 24 | 0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree_3($1 + 24 | 0);
  jsvUnLock(HEAP32[$1 + 32 >> 2]);
 }
 jsiExecuteEventCallbackOn(109901, 97859, 0, 0);
 HEAP32[$1 + 8 >> 2] = jsvObjectGetChildIfExists(HEAP32[46747], 97867);
 if (HEAP32[$1 + 8 >> 2]) {
  if (jsiEcho() & 1) {
   jsiConsolePrintString(129242);
  }
  jsiExecuteEventCallback(0, HEAP32[$1 + 8 >> 2], 0, 0);
  jsvUnLock(HEAP32[$1 + 8 >> 2]);
 }
 __stack_pointer = $1 + 48 | 0;
}

function jsiHandleDelete($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 31 | 0] = $0;
 HEAP32[$1 + 24 >> 2] = jsvGetStringLength(HEAP32[46763]);
 label$1: {
  if (!(HEAP32[46765] | !(HEAP8[$1 + 31 | 0] & 1)) | !(HEAP8[$1 + 31 | 0] & 1 | HEAPU32[46765] < HEAPU32[$1 + 24 >> 2])) {
   break label$1;
  }
  label$4: {
   if (HEAP8[$1 + 31 | 0] & 1) {
    $0 = 1;
    if ((jsvGetCharInString(HEAP32[46763], HEAP32[46765] - 1 | 0) | 0) == 10) {
     break label$4;
    }
   }
   if (!(HEAP8[$1 + 31 | 0] & 1)) {
    $2 = (jsvGetCharInString(HEAP32[46763], HEAP32[46765]) | 0) == 10;
   }
   $0 = $2;
  }
  HEAP8[$1 + 23 | 0] = $0 & 1;
  label$7: {
   if (!(HEAP8[$1 + 23 | 0] & 1)) {
    break label$7;
   }
   if (!(jsiShowInputLine() & 1)) {
    break label$7;
   }
   jsiConsoleEraseAfterCursor();
   if (HEAP8[$1 + 31 | 0] & 1) {
    jsiConsolePrintString(127849);
    jsiMoveCursorChar(HEAP32[46763], HEAP32[46765], HEAP32[46765] - 1 | 0);
    jsiInputLineCursorMoved();
   }
  }
  HEAP32[$1 + 16 >> 2] = jsvNewFromEmptyString_5();
  HEAP32[$1 + 12 >> 2] = HEAP32[46765];
  if (HEAP8[$1 + 31 | 0] & 1) {
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 12 >> 2] - 1;
  }
  if (HEAP32[$1 + 12 >> 2]) {
   jsvAppendStringVar(HEAP32[$1 + 16 >> 2], HEAP32[46763], 0, HEAP32[$1 + 12 >> 2]);
  }
  if (HEAPU32[$1 + 24 >> 2] > HEAP32[$1 + 12 >> 2] + 1 >>> 0) {
   jsvAppendStringVar(HEAP32[$1 + 16 >> 2], HEAP32[46763], HEAP32[$1 + 12 >> 2] + 1 | 0, 2147483647);
  }
  jsiInputLineCursorMoved();
  jsvUnLock(HEAP32[46763]);
  HEAP32[46763] = HEAP32[$1 + 16 >> 2];
  if (HEAP8[$1 + 31 | 0] & 1) {
   HEAP32[46765] = HEAP32[46765] - 1;
  }
  if (!(jsiShowInputLine() & 1)) {
   break label$1;
  }
  label$13: {
   if (HEAP8[$1 + 23 | 0] & 1) {
    jsiConsolePrintStringVarWithNewLineChar(HEAP32[46763], HEAP32[46765], 58);
    jsiMoveCursorChar(HEAP32[46763], jsvGetStringLength(HEAP32[46763]), HEAP32[46765]);
    break label$13;
   }
   if (HEAP8[$1 + 31 | 0] & 1) {
    jsiConsolePrintChar(8);
   }
   jsiConsolePrintStringVarUntilEOL(HEAP32[46763], HEAP32[46765], -1, 1);
  }
 }
 __stack_pointer = $1 + 32 | 0;
}

function jsspiGetSendFunction($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 40 >> 2] = $0;
 HEAP32[$3 + 36 >> 2] = $1;
 HEAP32[$3 + 32 >> 2] = $2;
 HEAP8[$3 + 31 | 0] = jsiGetDeviceFromClass(HEAP32[$3 + 40 >> 2]);
 label$1: {
  if (!(HEAPU8[$3 + 31 | 0] < 25 | HEAPU8[$3 + 31 | 0] > 25)) {
   if (!(jshIsDeviceInitialised(HEAPU8[$3 + 31 | 0]) & 1)) {
    jshSPIInitInfo($3 + 16 | 0);
    jshSPISetup(HEAPU8[$3 + 31 | 0], $3 + 16 | 0);
   }
   HEAP32[HEAP32[$3 + 36 >> 2] >> 2] = 554;
   HEAP8[HEAP32[$3 + 32 >> 2]] = HEAPU8[$3 + 31 | 0];
   HEAP8[$3 + 47 | 0] = 1;
   break label$1;
  }
  if (!HEAPU8[$3 + 31 | 0]) {
   HEAP32[$3 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 40 >> 2], 100220);
   jsspiPopulateSPIInfo($3 + 16 | 0, HEAP32[$3 + 12 >> 2]);
   jsvUnLock(HEAP32[$3 + 12 >> 2]);
   label$5: {
    label$6: {
     if (HEAPU8[$3 + 23 | 0] == 255 | HEAPU8[$3 + 22 | 0] != 255 | (HEAPU8[$3 + 24 | 0] | HEAPU8[$3 + 21 | 0] == 255)) {
      break label$6;
     }
     if (!(HEAP8[$3 + 25 | 0] & 1)) {
      break label$6;
     }
     HEAP32[HEAP32[$3 + 36 >> 2] >> 2] = 555;
     break label$5;
    }
    HEAP32[HEAP32[$3 + 36 >> 2] >> 2] = 556;
   }
   $0 = HEAP32[$3 + 20 >> 2];
   $1 = HEAP32[$3 + 16 >> 2];
   $4 = $1;
   $2 = HEAP32[$3 + 32 >> 2];
   $1 = $2;
   HEAP8[$1 | 0] = $4;
   HEAP8[$1 + 1 | 0] = $4 >>> 8;
   HEAP8[$1 + 2 | 0] = $4 >>> 16;
   HEAP8[$1 + 3 | 0] = $4 >>> 24;
   HEAP8[$1 + 4 | 0] = $0;
   HEAP8[$1 + 5 | 0] = $0 >>> 8;
   HEAP8[$1 + 6 | 0] = $0 >>> 16;
   HEAP8[$1 + 7 | 0] = $0 >>> 24;
   $1 = HEAPU16[$3 + 26 >> 1] | HEAPU16[$3 + 28 >> 1] << 16;
   $0 = HEAPU16[$3 + 22 >> 1] | HEAPU16[$3 + 24 >> 1] << 16;
   $4 = $0;
   $0 = $2;
   HEAP8[$0 + 6 | 0] = $4;
   HEAP8[$0 + 7 | 0] = $4 >>> 8;
   HEAP8[$0 + 8 | 0] = $4 >>> 16;
   HEAP8[$0 + 9 | 0] = $4 >>> 24;
   HEAP8[$0 + 10 | 0] = $1;
   HEAP8[$0 + 11 | 0] = $1 >>> 8;
   HEAP8[$0 + 12 | 0] = $1 >>> 16;
   HEAP8[$0 + 13 | 0] = $1 >>> 24;
   HEAP8[$3 + 47 | 0] = 1;
   break label$1;
  }
  HEAP8[$3 + 47 | 0] = 0;
 }
 __stack_pointer = $3 + 48 | 0;
 return HEAP8[$3 + 47 | 0] & 1;
}

function tflite__ops__micro__fully_connected___28anonymous_20namespace_29__CalculateOpData_28TfLiteContext__2c_20TfLiteFusedActivation_2c_20TfLiteType_2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20tflite__ops__micro__fully_connected___28anonymous_20namespace_29__OpData__29($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0;
 $8 = __stack_pointer + -64 | 0;
 __stack_pointer = $8;
 HEAP32[$8 + 56 >> 2] = $0;
 HEAP32[$8 + 52 >> 2] = $1;
 HEAP32[$8 + 48 >> 2] = $2;
 HEAP32[$8 + 44 >> 2] = $3;
 HEAP32[$8 + 40 >> 2] = $4;
 HEAP32[$8 + 36 >> 2] = $5;
 HEAP32[$8 + 32 >> 2] = $6;
 HEAP32[$8 + 28 >> 2] = $7;
 HEAP32[$8 + 24 >> 2] = 0;
 label$1: {
  if (HEAP32[$8 + 48 >> 2] != 1) {
   HEAPF64[$8 + 16 >> 3] = 0;
   HEAP32[$8 + 12 >> 2] = tflite__GetQuantizedConvolutionMultipler_28TfLiteContext__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20double__29(HEAP32[$8 + 56 >> 2], HEAP32[$8 + 44 >> 2], HEAP32[$8 + 40 >> 2], HEAP32[$8 + 36 >> 2], HEAP32[$8 + 32 >> 2], $8 + 16 | 0);
   if (HEAP32[$8 + 12 >> 2]) {
    HEAP32[$8 + 60 >> 2] = HEAP32[$8 + 12 >> 2];
    break label$1;
   }
   tflite__QuantizeMultiplier_28double_2c_20int__2c_20int__29(HEAPF64[$8 + 16 >> 3], HEAP32[$8 + 28 >> 2], $8 + 8 | 0);
   HEAP32[HEAP32[$8 + 28 >> 2] + 4 >> 2] = 0 - HEAP32[$8 + 8 >> 2];
   HEAP32[$8 + 4 >> 2] = tflite__CalculateActivationRangeQuantized_28TfLiteContext__2c_20TfLiteFusedActivation_2c_20TfLiteTensor__2c_20int__2c_20int__29(HEAP32[$8 + 56 >> 2], HEAP32[$8 + 52 >> 2], HEAP32[$8 + 32 >> 2], HEAP32[$8 + 28 >> 2] + 8 | 0, HEAP32[$8 + 28 >> 2] + 12 | 0);
   if (HEAP32[$8 + 4 >> 2]) {
    HEAP32[$8 + 60 >> 2] = HEAP32[$8 + 4 >> 2];
    break label$1;
   }
   HEAP32[HEAP32[$8 + 28 >> 2] + 20 >> 2] = HEAP32[HEAP32[$8 + 44 >> 2] + 12 >> 2];
   HEAP32[HEAP32[$8 + 28 >> 2] + 24 >> 2] = HEAP32[HEAP32[$8 + 40 >> 2] + 12 >> 2];
   HEAP32[HEAP32[$8 + 28 >> 2] + 28 >> 2] = HEAP32[HEAP32[$8 + 32 >> 2] + 12 >> 2];
  }
  HEAP32[$8 + 60 >> 2] = HEAP32[$8 + 24 >> 2];
 }
 __stack_pointer = $8 - -64 | 0;
 return HEAP32[$8 + 60 >> 2];
}

function lcdScroll_ArrayBuffer_flat8($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $7 = 0;
 $7 = __stack_pointer - 48 | 0;
 __stack_pointer = $7;
 HEAP32[$7 + 44 >> 2] = $0;
 HEAP32[$7 + 40 >> 2] = $1;
 HEAP32[$7 + 36 >> 2] = $2;
 HEAP32[$7 + 32 >> 2] = $3;
 HEAP32[$7 + 28 >> 2] = $4;
 HEAP32[$7 + 24 >> 2] = $5;
 HEAP32[$7 + 20 >> 2] = $6;
 HEAP32[$7 + 16 >> 2] = HEAP32[$7 + 24 >> 2] - HEAP32[$7 + 32 >> 2];
 HEAP32[$7 + 12 >> 2] = HEAP32[$7 + 20 >> 2] - HEAP32[$7 + 28 >> 2];
 HEAP32[$7 + 8 >> 2] = 0 - (HEAP32[$7 + 40 >> 2] + Math_imul(HEAP32[$7 + 36 >> 2], HEAP32[$7 + 16 >> 2]) | 0);
 $0 = HEAP32[$7 + 44 >> 2];
 HEAP32[$7 + 4 >> 2] = HEAP32[$7 + 32 >> 2] + Math_imul(HEAP32[$7 + 28 >> 2] - HEAP32[$7 + 36 >> 2] | 0, HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8);
 HEAP32[$7 >> 2] = 0;
 while (1) {
  if (HEAP32[$7 >> 2] < (HEAP32[$7 + 12 >> 2] + HEAP32[$7 + 36 >> 2] | 0)) {
   label$3: {
    if (HEAP32[$7 + 8 >> 2] < 0) {
     $0 = HEAP32[$7 + 44 >> 2];
     $1 = HEAP32[$7 + 44 >> 2];
     __memcpy((HEAP32[$7 + 4 >> 2] - HEAP32[$7 + 8 >> 2] | 0) + (HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24)) | 0, HEAP32[$7 + 4 >> 2] + (HEAPU8[$1 + 48 | 0] | HEAPU8[$1 + 49 | 0] << 8 | (HEAPU8[$1 + 50 | 0] << 16 | HEAPU8[$1 + 51 | 0] << 24)) | 0, HEAP32[$7 + 16 >> 2] + HEAP32[$7 + 40 >> 2] | 0);
     break label$3;
    }
    $0 = HEAP32[$7 + 44 >> 2];
    $1 = HEAP32[$7 + 44 >> 2];
    __memcpy(HEAP32[$7 + 4 >> 2] + (HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24)) | 0, (HEAP32[$7 + 4 >> 2] + HEAP32[$7 + 8 >> 2] | 0) + (HEAPU8[$1 + 48 | 0] | HEAPU8[$1 + 49 | 0] << 8 | (HEAPU8[$1 + 50 | 0] << 16 | HEAPU8[$1 + 51 | 0] << 24)) | 0, HEAP32[$7 + 16 >> 2] - HEAP32[$7 + 40 >> 2] | 0);
   }
   $0 = HEAP32[$7 + 44 >> 2];
   HEAP32[$7 + 4 >> 2] = HEAP32[$7 + 4 >> 2] + (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8);
   HEAP32[$7 >> 2] = HEAP32[$7 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $7 + 48 | 0;
}

function jslPrintPosition($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 128 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 124 >> 2] = $0;
 HEAP32[$3 + 120 >> 2] = $1;
 HEAP32[$3 + 116 >> 2] = $2;
 label$1: {
  label$2: {
   if (!(jsvIsNativeString(HEAP32[HEAP32[38615] + 84 >> 2]) & 1)) {
    if (!(jsvIsFlashString(HEAP32[HEAP32[38615] + 84 >> 2]) & 1)) {
     break label$2;
    }
   }
   $0 = HEAP32[HEAP32[38615] + 84 >> 2];
   HEAP32[$3 + 104 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
   HEAP32[$3 + 68 >> 2] = jsfFindFileFromAddr(HEAP32[$3 + 104 >> 2], $3 + 72 | 0);
   if (HEAP32[$3 + 68 >> 2]) {
    HEAP32[$3 + 64 >> 2] = jsvAddressToVar(HEAP32[$3 + 68 >> 2], jsfGetFileSize($3 + 72 | 0));
    jsvGetLineAndCol(HEAP32[$3 + 64 >> 2], (HEAP32[$3 + 116 >> 2] + HEAP32[$3 + 104 >> 2] | 0) - HEAP32[$3 + 68 >> 2] | 0, $3 + 112 | 0, $3 + 108 | 0);
    $1 = $3 + 72 | 0;
    HEAP32[$3 + 24 >> 2] = HEAP32[$1 + 28 >> 2];
    $0 = HEAP32[$1 + 20 >> 2];
    $2 = HEAP32[$1 + 24 >> 2];
    HEAP32[$3 + 16 >> 2] = $0;
    HEAP32[$3 + 20 >> 2] = $2;
    $0 = HEAP32[$1 + 16 >> 2];
    $2 = HEAP32[$1 + 12 >> 2];
    HEAP32[$3 + 8 >> 2] = $2;
    HEAP32[$3 + 12 >> 2] = $0;
    $2 = HEAP32[$1 + 8 >> 2];
    $0 = HEAP32[$1 + 4 >> 2];
    HEAP32[$3 >> 2] = $0;
    HEAP32[$3 + 4 >> 2] = $2;
    HEAP32[$3 + 60 >> 2] = jsfVarFromName($3);
    $0 = HEAP32[$3 + 124 >> 2];
    $1 = HEAP32[$3 + 120 >> 2];
    $2 = HEAP32[$3 + 112 >> 2];
    $4 = HEAP32[$3 + 108 >> 2];
    HEAP32[$3 + 40 >> 2] = HEAP32[$3 + 60 >> 2];
    HEAP32[$3 + 36 >> 2] = $4;
    HEAP32[$3 + 32 >> 2] = $2;
    cbprintf($0, $1, 127885, $3 + 32 | 0);
    jsvUnLock2(HEAP32[$3 + 64 >> 2], HEAP32[$3 + 60 >> 2]);
    break label$1;
   }
  }
  jsvGetLineAndCol(HEAP32[HEAP32[38615] + 84 >> 2], HEAP32[$3 + 116 >> 2], $3 + 112 | 0, $3 + 108 | 0);
  $0 = HEAP32[$3 + 124 >> 2];
  $1 = HEAP32[$3 + 120 >> 2];
  $2 = HEAP32[$3 + 112 >> 2];
  HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 108 >> 2];
  HEAP32[$3 + 48 >> 2] = $2;
  cbprintf($0, $1, 128547, $3 + 48 | 0);
 }
 __stack_pointer = $3 + 128 | 0;
}

function jspeStatementIf() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 48 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 32 >> 2] = 0;
 jslGetNextToken();
 label$1: {
  if (!(jslMatch(40) & 1)) {
   HEAP32[$0 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$0 + 36 >> 2] = jspeExpression();
  if (HEAP32[46755] & 80) {
   HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 36 >> 2];
   break label$1;
  }
  if (!(jslMatch(41) & 1)) {
   HEAP32[$0 + 44 >> 2] = 0;
   break label$1;
  }
  if ((HEAP32[46755] & 63) == 1) {
   $1 = jsvGetBoolAndUnLock(jsvSkipName(HEAP32[$0 + 36 >> 2]));
  }
  HEAP8[$0 + 43 | 0] = $1 & 1;
  jsvUnLock(HEAP32[$0 + 36 >> 2]);
  HEAP32[$0 + 28 >> 2] = HEAP32[46755];
  if (!(HEAP8[$0 + 43 | 0] & 1)) {
   jspSetNoExecute();
  }
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  if (HEAP16[HEAP32[38615] + 2 >> 1] != 59) {
   HEAP32[$0 + 20 >> 2] = jspeBlockOrStatement();
  }
  HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 24 >> 2] | HEAP32[46755] & 112;
  label$8: {
   if (!(HEAP8[$0 + 43 | 0] & 1)) {
    jsvUnLock(HEAP32[$0 + 20 >> 2]);
    HEAP32[46755] = HEAP32[46755] & -1664 | HEAP32[$0 + 28 >> 2] & 1663;
    HEAP32[46755] = HEAP32[$0 + 24 >> 2] | HEAP32[46755];
    break label$8;
   }
   HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 20 >> 2];
  }
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 59) {
   jslGetNextToken();
  }
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 164) {
   jslGetNextToken();
   HEAP32[$0 + 16 >> 2] = HEAP32[46755];
   if (HEAP8[$0 + 43 | 0] & 1) {
    jspSetNoExecute();
   }
   HEAP32[$0 + 12 >> 2] = 0;
   if (HEAP16[HEAP32[38615] + 2 >> 1] != 59) {
    HEAP32[$0 + 12 >> 2] = jspeBlockOrStatement();
   }
   HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 24 >> 2] | HEAP32[46755] & 112;
   label$14: {
    if (HEAP8[$0 + 43 | 0] & 1) {
     jsvUnLock(HEAP32[$0 + 12 >> 2]);
     HEAP32[46755] = HEAP32[46755] & -1664 | HEAP32[$0 + 16 >> 2] & 1663;
     HEAP32[46755] = HEAP32[$0 + 24 >> 2] | HEAP32[46755];
     break label$14;
    }
    HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 12 >> 2];
   }
  }
  HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 32 >> 2];
 }
 __stack_pointer = $0 + 48 | 0;
 return HEAP32[$0 + 44 >> 2];
}

function jswGetBasicObjectName($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (jsvIsArrayBuffer(HEAP32[$1 + 8 >> 2]) & 1) {
   if (HEAPU8[HEAP32[$1 + 8 >> 2] + 5 | 0] == 129) {
    HEAP32[$1 + 12 >> 2] = 101446;
    break label$1;
   }
   if (HEAPU8[HEAP32[$1 + 8 >> 2] + 5 | 0] == 1) {
    HEAP32[$1 + 12 >> 2] = 96569;
    break label$1;
   }
   if (HEAPU8[HEAP32[$1 + 8 >> 2] + 5 | 0] == 65) {
    HEAP32[$1 + 12 >> 2] = 96551;
    break label$1;
   }
   if (HEAPU8[HEAP32[$1 + 8 >> 2] + 5 | 0] == 17) {
    HEAP32[$1 + 12 >> 2] = 96580;
    break label$1;
   }
   if (HEAPU8[HEAP32[$1 + 8 >> 2] + 5 | 0] == 2) {
    HEAP32[$1 + 12 >> 2] = 96590;
    break label$1;
   }
   if (HEAPU8[HEAP32[$1 + 8 >> 2] + 5 | 0] == 18) {
    HEAP32[$1 + 12 >> 2] = 96602;
    break label$1;
   }
   if (HEAPU8[HEAP32[$1 + 8 >> 2] + 5 | 0] == 3) {
    HEAP32[$1 + 12 >> 2] = 96626;
    break label$1;
   }
   if (HEAPU8[HEAP32[$1 + 8 >> 2] + 5 | 0] == 4) {
    HEAP32[$1 + 12 >> 2] = 96638;
    break label$1;
   }
   if (HEAPU8[HEAP32[$1 + 8 >> 2] + 5 | 0] == 20) {
    HEAP32[$1 + 12 >> 2] = 96650;
    break label$1;
   }
   if (HEAPU8[HEAP32[$1 + 8 >> 2] + 5 | 0] == 36) {
    HEAP32[$1 + 12 >> 2] = 96661;
    break label$1;
   }
   if (HEAPU8[HEAP32[$1 + 8 >> 2] + 5 | 0] == 40) {
    HEAP32[$1 + 12 >> 2] = 96613;
    break label$1;
   }
  }
  if (jsvIsPin(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 102505;
   break label$1;
  }
  if (jsvIsArray(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 96668;
   break label$1;
  }
  if (jsvIsNumeric(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 101575;
   break label$1;
  }
  if (jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 98070;
   break label$1;
  }
  if (jsvIsFunction(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 102353;
   break label$1;
  }
  if (jsvIsString(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 103894;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jswrap_number_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 label$1: {
  if (!jsvGetArrayLength(HEAP32[$1 + 24 >> 2])) {
   HEAP32[$1 + 28 >> 2] = jsvNewFromInteger(0);
   break label$1;
  }
  HEAP32[$1 + 20 >> 2] = jsvGetArrayItem(HEAP32[$1 + 24 >> 2], 0);
  HEAP32[$1 + 16 >> 2] = 0;
  label$3: {
   if (jsvIsArray(HEAP32[$1 + 20 >> 2]) & 1) {
    HEAP32[$1 + 12 >> 2] = jsvGetArrayLength(HEAP32[$1 + 20 >> 2]);
    label$5: {
     if (!HEAP32[$1 + 12 >> 2]) {
      HEAP32[$1 + 16 >> 2] = jsvNewFromInteger(0);
      break label$5;
     }
     if (HEAP32[$1 + 12 >> 2] == 1) {
      HEAP32[$1 + 8 >> 2] = jsvGetArrayItem(HEAP32[$1 + 20 >> 2], 0);
      label$8: {
       label$9: {
        if (!(jsvIsString(HEAP32[$1 + 8 >> 2]) & 1)) {
         break label$9;
        }
        if (!(jsvIsEmptyString(HEAP32[$1 + 8 >> 2]) & 1)) {
         break label$9;
        }
        HEAP32[$1 + 16 >> 2] = jsvNewFromInteger(0);
        break label$8;
       }
       if (!(jsvIsBoolean(HEAP32[$1 + 8 >> 2]) & 1)) {
        HEAP32[$1 + 16 >> 2] = jsvAsNumber(HEAP32[$1 + 8 >> 2]);
       }
      }
      jsvUnLock(HEAP32[$1 + 8 >> 2]);
     }
    }
    break label$3;
   }
   label$11: {
    label$12: {
     if (!(jsvIsUndefined(HEAP32[$1 + 20 >> 2]) & 1)) {
      if (!(jsvIsObject(HEAP32[$1 + 20 >> 2]) & 1)) {
       break label$12;
      }
     }
     HEAP32[$1 + 16 >> 2] = 0;
     break label$11;
    }
    label$14: {
     label$15: {
      if (!(jsvIsString(HEAP32[$1 + 20 >> 2]) & 1)) {
       break label$15;
      }
      if (!(jsvIsEmptyString(HEAP32[$1 + 20 >> 2]) & 1)) {
       break label$15;
      }
      HEAP32[$1 + 16 >> 2] = jsvNewFromInteger(0);
      break label$14;
     }
     HEAP32[$1 + 16 >> 2] = jsvAsNumber(HEAP32[$1 + 20 >> 2]);
    }
   }
  }
  jsvUnLock(HEAP32[$1 + 20 >> 2]);
  if (HEAP32[$1 + 16 >> 2]) {
   HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 16 >> 2];
   break label$1;
  }
  HEAP32[$1 + 28 >> 2] = jsvNewFromFloat(nan);
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function heatshrink_decoder_poll($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 40 >> 2] = $0;
 HEAP32[$4 + 36 >> 2] = $1;
 HEAP32[$4 + 32 >> 2] = $2;
 HEAP32[$4 + 28 >> 2] = $3;
 label$1: {
  if (HEAP32[$4 + 28 >> 2] ? !HEAP32[$4 + 40 >> 2] | !HEAP32[$4 + 36 >> 2] : 1) {
   HEAP32[$4 + 44 >> 2] = -1;
   break label$1;
  }
  HEAP32[HEAP32[$4 + 28 >> 2] >> 2] = 0;
  HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 36 >> 2];
  HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 32 >> 2];
  HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 28 >> 2];
  while (1) {
   HEAP8[$4 + 15 | 0] = HEAPU8[HEAP32[$4 + 40 >> 2] + 10 | 0];
   label$5: {
    label$6: {
     switch (HEAPU8[$4 + 15 | 0]) {
     case 0:
      $0 = st_tag_bit(HEAP32[$4 + 40 >> 2]);
      HEAP8[HEAP32[$4 + 40 >> 2] + 10 | 0] = $0;
      break label$5;

     case 1:
      $0 = st_d_yield_literal(HEAP32[$4 + 40 >> 2], $4 + 16 | 0);
      HEAP8[HEAP32[$4 + 40 >> 2] + 10 | 0] = $0;
      break label$5;

     case 2:
      $0 = st_backref_index_msb(HEAP32[$4 + 40 >> 2]);
      HEAP8[HEAP32[$4 + 40 >> 2] + 10 | 0] = $0;
      break label$5;

     case 3:
      $0 = st_backref_index_lsb(HEAP32[$4 + 40 >> 2]);
      HEAP8[HEAP32[$4 + 40 >> 2] + 10 | 0] = $0;
      break label$5;

     case 4:
      $0 = st_backref_count_msb(HEAP32[$4 + 40 >> 2]);
      HEAP8[HEAP32[$4 + 40 >> 2] + 10 | 0] = $0;
      break label$5;

     case 5:
      $0 = st_backref_count_lsb(HEAP32[$4 + 40 >> 2]);
      HEAP8[HEAP32[$4 + 40 >> 2] + 10 | 0] = $0;
      break label$5;

     case 6:
      $0 = st_yield_backref(HEAP32[$4 + 40 >> 2], $4 + 16 | 0);
      HEAP8[HEAP32[$4 + 40 >> 2] + 10 | 0] = $0;
      break label$5;

     default:
      break label$6;
     }
    }
    HEAP32[$4 + 44 >> 2] = -2;
    break label$1;
   }
   if (HEAPU8[HEAP32[$4 + 40 >> 2] + 10 | 0] != HEAPU8[$4 + 15 | 0]) {
    continue;
   }
   break;
  }
  if (HEAP32[HEAP32[$4 + 28 >> 2] >> 2] == HEAP32[$4 + 32 >> 2]) {
   HEAP32[$4 + 44 >> 2] = 1;
   break label$1;
  }
  HEAP32[$4 + 44 >> 2] = 0;
 }
 __stack_pointer = $4 + 48 | 0;
 return HEAP32[$4 + 44 >> 2];
}

function tflite__ops__micro__pooling__Prepare_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1: {
  if (!HEAP32[HEAP32[$2 + 20 >> 2] + 12 >> 2]) {
   break label$1;
  }
 }
 HEAP32[$2 + 16 >> 2] = HEAP32[HEAP32[$2 + 20 >> 2] + 12 >> 2];
 label$2: {
  if (!HEAP32[HEAP32[$2 + 20 >> 2] + 8 >> 2]) {
   break label$2;
  }
 }
 HEAP32[$2 + 12 >> 2] = HEAP32[HEAP32[$2 + 20 >> 2] + 8 >> 2];
 HEAP32[$2 + 8 >> 2] = tflite__GetInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], 0);
 HEAP32[$2 + 4 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], 0);
 HEAP32[$2 >> 2] = tflite__ops__micro__pooling___28anonymous_20namespace_29__CalculateOpData_28TfLiteContext_20const__2c_20TfLitePoolParams_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20tflite__ops__micro__pooling___28anonymous_20namespace_29__OpData__29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 16 >> 2], HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2], HEAP32[$2 + 12 >> 2]);
 label$3: {
  if (HEAP32[$2 >> 2]) {
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 >> 2];
   break label$3;
  }
  label$5: {
   if (HEAP32[HEAP32[$2 + 8 >> 2] + 28 >> 2] == 1) {
    void_20tflite__CalculateActivationRange_float__28TfLiteFusedActivation_2c_20float__2c_20float__29(HEAP32[HEAP32[$2 + 16 >> 2] + 20 >> 2], HEAP32[$2 + 12 >> 2] + 24 | 0, HEAP32[$2 + 12 >> 2] + 28 | 0);
    break label$5;
   }
   if (!(HEAP32[HEAP32[$2 + 8 >> 2] + 28 >> 2] != 9 & HEAP32[HEAP32[$2 + 8 >> 2] + 28 >> 2] != 3)) {
    tflite__CalculateActivationRangeQuantized_28TfLiteContext__2c_20TfLiteFusedActivation_2c_20TfLiteTensor__2c_20int__2c_20int__29(HEAP32[$2 + 24 >> 2], HEAP32[HEAP32[$2 + 16 >> 2] + 20 >> 2], HEAP32[$2 + 4 >> 2], HEAP32[$2 + 12 >> 2] + 16 | 0, HEAP32[$2 + 12 >> 2] + 20 | 0);
   }
  }
  HEAP32[$2 + 28 >> 2] = 0;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jsfCompactWriteBuffer($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 48 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 44 >> 2] = $0;
 HEAP32[$6 + 40 >> 2] = $1;
 HEAP32[$6 + 36 >> 2] = $2;
 HEAP32[$6 + 32 >> 2] = $3;
 HEAP32[$6 + 28 >> 2] = $4;
 HEAP32[$6 + 24 >> 2] = $5;
 HEAP32[$6 + 20 >> 2] = jsfGetBankEndAddress(HEAP32[HEAP32[$6 + 44 >> 2] >> 2]);
 HEAP32[$6 + 16 >> 2] = jsfGetAddressOfNextPage(HEAP32[HEAP32[$6 + 44 >> 2] >> 2]);
 if (!HEAP32[$6 + 16 >> 2]) {
  HEAP32[$6 + 16 >> 2] = HEAP32[$6 + 20 >> 2];
 }
 while (1) {
  label$3: {
   if (!HEAP32[HEAP32[$6 + 28 >> 2] >> 2]) {
    break label$3;
   }
   HEAP32[$6 + 12 >> 2] = HEAP32[HEAP32[$6 + 28 >> 2] >> 2];
   if (HEAPU32[$6 + 32 >> 2] < HEAP32[$6 + 12 >> 2] + HEAP32[HEAP32[$6 + 24 >> 2] >> 2] >>> 0) {
    HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 32 >> 2] - HEAP32[HEAP32[$6 + 24 >> 2] >> 2];
   }
   if (HEAPU32[$6 + 16 >> 2] < HEAP32[$6 + 12 >> 2] + HEAP32[HEAP32[$6 + 44 >> 2] >> 2] >>> 0) {
    HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 16 >> 2] - HEAP32[HEAP32[$6 + 44 >> 2] >> 2];
   }
   if (HEAPU32[$6 + 40 >> 2] < HEAPU32[$6 + 16 >> 2]) {
    break label$3;
   }
   if (!(!(jshFlashGetPage(HEAP32[HEAP32[$6 + 44 >> 2] >> 2], $6 + 8 | 0, $6 + 4 | 0) & 1) | HEAP32[$6 + 8 >> 2] != HEAP32[HEAP32[$6 + 44 >> 2] >> 2])) {
    jshFlashErasePage(HEAP32[HEAP32[$6 + 44 >> 2] >> 2]);
   }
   jshFlashWrite(HEAP32[$6 + 36 >> 2] + HEAP32[HEAP32[$6 + 24 >> 2] >> 2] | 0, HEAP32[HEAP32[$6 + 44 >> 2] >> 2], HEAP32[$6 + 12 >> 2]);
   $0 = HEAP32[$6 + 44 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$6 + 12 >> 2] + HEAP32[$0 >> 2];
   HEAP32[$6 + 16 >> 2] = jsfGetAddressOfNextPage(HEAP32[HEAP32[$6 + 44 >> 2] >> 2]);
   if (!HEAP32[$6 + 16 >> 2]) {
    HEAP32[$6 + 16 >> 2] = HEAP32[$6 + 20 >> 2];
   }
   HEAP32[HEAP32[$6 + 24 >> 2] >> 2] = (HEAP32[HEAP32[$6 + 24 >> 2] >> 2] + HEAP32[$6 + 12 >> 2] >>> 0) % HEAPU32[$6 + 32 >> 2];
   $0 = HEAP32[$6 + 28 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] - HEAP32[$6 + 12 >> 2];
   jshKickWatchDog();
   jshKickSoftWatchDog();
   continue;
  }
  break;
 }
 __stack_pointer = $6 + 48 | 0;
}

function _jsvTraceGetLowestLevel($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 label$1: {
  if (HEAP32[$2 + 40 >> 2] == HEAP32[$2 + 36 >> 2]) {
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 32 >> 2] = -1;
  $0 = HEAP32[$2 + 40 >> 2];
  if ((HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 512) {
   HEAP32[$2 + 44 >> 2] = -1;
   break label$1;
  }
  $0 = HEAP32[$2 + 40 >> 2];
  $1 = HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8 | 512;
  HEAP8[$0 + 11 | 0] = $1;
  HEAP8[$0 + 12 | 0] = $1 >>> 8;
  label$4: {
   if (!(jsvHasSingleChild(HEAP32[$2 + 40 >> 2]) & 1)) {
    break label$4;
   }
   if (!(jsvGetFirstChild(HEAP32[$2 + 40 >> 2]) & 65535)) {
    break label$4;
   }
   HEAP32[$2 + 28 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$2 + 40 >> 2]) & 65535);
   HEAP32[$2 + 24 >> 2] = _jsvTraceGetLowestLevel(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 36 >> 2]);
   jsvUnLock(HEAP32[$2 + 28 >> 2]);
   if (!(HEAP32[$2 + 32 >> 2] >= 0 & HEAP32[$2 + 24 >> 2] >= HEAP32[$2 + 32 >> 2] | HEAP32[$2 + 24 >> 2] < 0)) {
    HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 24 >> 2] + 1;
   }
  }
  if (jsvHasChildren(HEAP32[$2 + 40 >> 2]) & 1) {
   HEAP16[$2 + 22 >> 1] = jsvGetFirstChild(HEAP32[$2 + 40 >> 2]);
   while (1) {
    if (HEAPU16[$2 + 22 >> 1]) {
     HEAP32[$2 + 16 >> 2] = jsvLock(HEAPU16[$2 + 22 >> 1]);
     HEAP32[$2 + 12 >> 2] = _jsvTraceGetLowestLevel(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 36 >> 2]);
     if (!(HEAP32[$2 + 32 >> 2] >= 0 & HEAP32[$2 + 12 >> 2] >= HEAP32[$2 + 32 >> 2] | HEAP32[$2 + 12 >> 2] < 0)) {
      HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
     }
     HEAP16[$2 + 22 >> 1] = jsvGetNextSibling(HEAP32[$2 + 16 >> 2]);
     jsvUnLock(HEAP32[$2 + 16 >> 2]);
     continue;
    }
    break;
   }
  }
  $0 = HEAP32[$2 + 40 >> 2];
  $1 = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & -513;
  HEAP8[$0 + 11 | 0] = $1;
  HEAP8[$0 + 12 | 0] = $1 >>> 8;
  HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
 }
 __stack_pointer = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}

function jsfGetStorageStats($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 80 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 76 >> 2] = $1;
 HEAP8[$3 + 75 | 0] = $2;
 if (!HEAP32[$3 + 76 >> 2]) {
  HEAP32[$3 + 76 >> 2] = 134217728;
 }
 HEAP32[$3 + 68 >> 2] = HEAP32[$3 + 76 >> 2];
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$3 + 56 >> 2] = 0;
 HEAP32[$3 + 60 >> 2] = 0;
 HEAP32[$3 + 48 >> 2] = 0;
 HEAP32[$3 + 52 >> 2] = 0;
 HEAP32[$3 + 40 >> 2] = 0;
 HEAP32[$3 + 44 >> 2] = 0;
 HEAP32[$3 + 32 >> 2] = 0;
 HEAP32[$3 + 36 >> 2] = 0;
 HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 76 >> 2];
 HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 76 >> 2];
 if (jsfGetFileHeader(HEAP32[$3 + 76 >> 2], $3 + 32 | 0, 0) & 1) {
  while (1) {
   if (!(!(jshFlashGetPage(HEAP32[$3 + 76 >> 2], $3 + 20 | 0, $3 + 16 | 0) & 1) | HEAP32[$3 + 20 >> 2] != HEAP32[$3 + 76 >> 2])) {
    HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 20 >> 2];
   }
   HEAP32[$3 + 12 >> 2] = jsfAlignAddress(jsfGetFileSize($3 + 32 | 0)) + 32;
   HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 76 >> 2] + HEAP32[$3 + 12 >> 2];
   label$5: {
    if (HEAP32[$3 + 36 >> 2]) {
     HEAP32[$0 >> 2] = HEAP32[$3 + 12 >> 2] + HEAP32[$0 >> 2];
     HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
     break label$5;
    }
    HEAP32[$0 + 8 >> 2] = HEAP32[$3 + 12 >> 2] + HEAP32[$0 + 8 >> 2];
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
    if (!HEAP32[$0 + 24 >> 2]) {
     HEAP32[$0 + 24 >> 2] = HEAP32[$3 + 24 >> 2];
    }
   }
   if (jsfGetNextFileHeader($3 + 76 | 0, $3 + 32 | 0, HEAP8[$3 + 75 | 0] & 1 | 2) & 1) {
    continue;
   }
   break;
  }
 }
 label$8: {
  if (HEAP8[$3 + 75 | 0] & 1) {
   $1 = jsfGetBankEndAddress(HEAP32[$3 + 68 >> 2]);
   break label$8;
  }
  $1 = jsfGetAddressOfNextPage(HEAP32[$3 + 68 >> 2]);
 }
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$0 + 16 >> 2] = HEAP32[$3 + 8 >> 2] - HEAP32[$3 + 68 >> 2];
 HEAP32[$0 + 20 >> 2] = HEAP32[$3 + 8 >> 2] - HEAP32[$3 + 28 >> 2];
 __stack_pointer = $3 + 80 | 0;
}

function jswrap_regexp_exec($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 $2 = $3;
 __stack_pointer = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 HEAP32[$2 + 32 >> 2] = jsvAsString(HEAP32[$2 + 36 >> 2]);
 HEAP32[$2 + 28 >> 2] = jsvObjectGetIntegerChild(HEAP32[$2 + 40 >> 2], 96707);
 HEAP32[$2 + 24 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 40 >> 2], 105447);
 label$1: {
  label$2: {
   if (jsvIsString(HEAP32[$2 + 24 >> 2]) & 1) {
    if (HEAP32[$2 + 28 >> 2] <= (jsvGetStringLength(HEAP32[$2 + 32 >> 2]) | 0)) {
     break label$2;
    }
   }
   jsvUnLock2(HEAP32[$2 + 32 >> 2], HEAP32[$2 + 24 >> 2]);
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 20 >> 2] = jsvGetStringLength(HEAP32[$2 + 24 >> 2]);
  $3 = $3 - (HEAP32[$2 + 20 >> 2] + 16 & -16) | 0;
  __stack_pointer = $3;
  HEAP32[$2 + 16 >> 2] = $3;
  if (!HEAP32[$2 + 16 >> 2]) {
   jsvUnLock2(HEAP32[$2 + 32 >> 2], HEAP32[$2 + 24 >> 2]);
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  jsvGetString(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 16 >> 2], HEAP32[$2 + 20 >> 2] + 1 | 0);
  jsvUnLock(HEAP32[$2 + 24 >> 2]);
  HEAP32[$2 + 12 >> 2] = match(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 32 >> 2], HEAP32[$2 + 28 >> 2], jswrap_regexp_hasFlag(HEAP32[$2 + 40 >> 2], 105) & 1);
  jsvUnLock(HEAP32[$2 + 32 >> 2]);
  label$5: {
   if (!HEAP32[$2 + 12 >> 2]) {
    HEAP32[$2 + 12 >> 2] = jsvNewWithFlags(2);
    HEAP32[$2 + 28 >> 2] = 0;
    break label$5;
   }
   label$7: {
    if (jswrap_regexp_hasFlag(HEAP32[$2 + 40 >> 2], 103) & 1) {
     HEAP32[$2 + 8 >> 2] = jsvGetArrayItem(HEAP32[$2 + 12 >> 2], 0);
     HEAP32[$2 + 28 >> 2] = jsvObjectGetIntegerChild(HEAP32[$2 + 12 >> 2], 96701) + jsvGetStringLength(HEAP32[$2 + 8 >> 2]);
     jsvUnLock(HEAP32[$2 + 8 >> 2]);
     break label$7;
    }
    HEAP32[$2 + 28 >> 2] = 0;
   }
  }
  jsvObjectSetChildAndUnLock(HEAP32[$2 + 40 >> 2], 96707, jsvNewFromInteger(HEAP32[$2 + 28 >> 2]));
  HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 12 >> 2];
 }
 __stack_pointer = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}

function jstStartSignal($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0;
 $8 = __stack_pointer + -64 | 0;
 __stack_pointer = $8;
 HEAP32[$8 + 48 >> 2] = $0;
 HEAP32[$8 + 52 >> 2] = $1;
 HEAP32[$8 + 40 >> 2] = $2;
 HEAP32[$8 + 44 >> 2] = $3;
 HEAP8[$8 + 39 | 0] = $4;
 HEAP32[$8 + 32 >> 2] = $5;
 HEAP32[$8 + 28 >> 2] = $6;
 HEAP8[$8 + 27 | 0] = $7;
 label$1: {
  if (!(jshIsPinValid(HEAPU8[$8 + 39 | 0]) & 1)) {
   HEAP8[$8 + 63 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$8 + 40 >> 2];
  HEAP8[$8 + 4 | 0] = $0;
  HEAP8[$8 + 5 | 0] = $0 >>> 8;
  HEAP8[$8 + 6 | 0] = $0 >>> 16;
  HEAP8[$8 + 7 | 0] = $0 >>> 24;
  $2 = HEAP32[$8 + 40 >> 2];
  $0 = $2 + HEAP32[$8 + 48 >> 2] | 0;
  $1 = HEAP32[$8 + 44 >> 2] + HEAP32[$8 + 52 >> 2] | 0;
  HEAP8[$8 | 0] = $0;
  HEAP8[$8 + 1 | 0] = $0 >>> 8;
  HEAP8[$8 + 2 | 0] = $0 >>> 16;
  HEAP8[$8 + 3 | 0] = $0 >>> 24;
  HEAP8[$8 + 24 | 0] = HEAPU8[$8 + 27 | 0];
  label$3: {
   if (!(HEAPU8[$8 + 27 | 0] != 4 & HEAPU8[$8 + 27 | 0] != 6)) {
    $0 = jshGetCurrentPinFunction(HEAPU8[$8 + 39 | 0]);
    HEAP8[$8 + 22 | 0] = $0;
    HEAP8[$8 + 23 | 0] = $0 >>> 8;
    if (!(HEAPU8[$8 + 22 | 0] | HEAPU8[$8 + 23 | 0] << 8)) {
     HEAP8[$8 + 63 | 0] = 0;
     break label$1;
    }
    break label$3;
   }
   label$7: {
    if (!(HEAPU8[$8 + 27 | 0] != 5 & HEAPU8[$8 + 27 | 0] != 7)) {
     if (!HEAPU8[(Math_imul(HEAPU8[$8 + 39 | 0], 3) + 145056 | 0) + 2 | 0]) {
      HEAP8[$8 + 63 | 0] = 0;
      break label$1;
     }
     HEAP8[$8 + 22 | 0] = HEAPU8[$8 + 39 | 0];
     break label$7;
    }
    HEAP8[$8 + 63 | 0] = 0;
    break label$1;
   }
  }
  $0 = jsvGetRef(HEAP32[$8 + 32 >> 2]);
  HEAP8[$8 + 12 | 0] = $0;
  HEAP8[$8 + 13 | 0] = $0 >>> 8;
  label$11: {
   if (HEAP32[$8 + 28 >> 2]) {
    $0 = jsvGetRef(HEAP32[$8 + 28 >> 2]);
    HEAP8[$8 + 14 | 0] = $0;
    HEAP8[$8 + 15 | 0] = $0 >>> 8;
    break label$11;
   }
   HEAP8[$8 + 14 | 0] = 0;
   HEAP8[$8 + 15 | 0] = 0;
  }
  jstUtilTimerSetupBuffer($8);
  HEAP8[$8 + 63 | 0] = utilTimerInsertTask($8, 0) & 1;
 }
 __stack_pointer = $8 - -64 | 0;
 return HEAP8[$8 + 63 | 0] & 1;
}

function jswrap_array_reduce($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 112 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 104 >> 2] = $0;
 HEAP32[$3 + 100 >> 2] = $1;
 HEAP32[$3 + 96 >> 2] = $2;
 label$1: {
  if (!(jsvIsIterable(HEAP32[$3 + 104 >> 2]) & 1)) {
   jsExceptionHere(1, 105165, 0);
   HEAP32[$3 + 108 >> 2] = 0;
   break label$1;
  }
  if (!(jsvIsFunction(HEAP32[$3 + 100 >> 2]) & 1)) {
   jsExceptionHere(1, 102289, 0);
   HEAP32[$3 + 108 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 92 >> 2] = jsvLockAgainSafe(HEAP32[$3 + 96 >> 2]);
  jsvIteratorNew($3 + 32 | 0, HEAP32[$3 + 104 >> 2], 0);
  if (!HEAP32[$3 + 92 >> 2]) {
   HEAP8[$3 + 31 | 0] = 0;
   while (1) {
    $0 = 0;
    if (!(HEAP8[$3 + 31 | 0] & 1)) {
     $0 = jsvIteratorHasElement($3 + 32 | 0);
    }
    if ($0 & 1) {
     HEAP32[$3 + 24 >> 2] = jsvIteratorGetKey($3 + 32 | 0);
     if (jsvIsInt(HEAP32[$3 + 24 >> 2]) & 1) {
      HEAP32[$3 + 92 >> 2] = jsvIteratorGetValue($3 + 32 | 0);
      HEAP8[$3 + 31 | 0] = 1;
     }
     jsvUnLock(HEAP32[$3 + 24 >> 2]);
     jsvIteratorNext($3 + 32 | 0);
     continue;
    }
    break;
   }
   if (!HEAP32[$3 + 92 >> 2]) {
    jsExceptionHere(1, 104429, 0);
   }
  }
  while (1) {
   if (jsvIteratorHasElement($3 + 32 | 0) & 1) {
    HEAP32[$3 + 20 >> 2] = jsvIteratorGetKey($3 + 32 | 0);
    if (jsvIsInt(HEAP32[$3 + 20 >> 2]) & 1) {
     HEAP32[$3 + 16 >> 2] = jsvGetInteger(HEAP32[$3 + 20 >> 2]);
     HEAP32[$3 >> 2] = HEAP32[$3 + 92 >> 2];
     HEAP32[$3 + 4 >> 2] = jsvIteratorGetValue($3 + 32 | 0);
     HEAP32[$3 + 8 >> 2] = jsvNewFromInteger(HEAP32[$3 + 16 >> 2]);
     HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 104 >> 2];
     HEAP32[$3 + 92 >> 2] = jspeFunctionCall(HEAP32[$3 + 100 >> 2], 0, 0, 0, 4, $3);
     jsvUnLockMany(3, $3);
    }
    jsvUnLock(HEAP32[$3 + 20 >> 2]);
    jsvIteratorNext($3 + 32 | 0);
    continue;
   }
   break;
  }
  jsvIteratorFree($3 + 32 | 0);
  HEAP32[$3 + 108 >> 2] = HEAP32[$3 + 92 >> 2];
 }
 __stack_pointer = $3 + 112 | 0;
 return HEAP32[$3 + 108 >> 2];
}

function graphicsSetPixelDevice($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 label$1: {
  if (HEAP32[$4 + 8 >> 2] < (HEAPU8[$0 + 32 | 0] | HEAPU8[$0 + 33 | 0] << 8)) {
   break label$1;
  }
  $0 = HEAP32[$4 + 12 >> 2];
  if (HEAP32[$4 + 4 >> 2] < (HEAPU8[$0 + 34 | 0] | HEAPU8[$0 + 35 | 0] << 8)) {
   break label$1;
  }
  $0 = HEAP32[$4 + 12 >> 2];
  if (HEAP32[$4 + 8 >> 2] > (HEAPU8[$0 + 36 | 0] | HEAPU8[$0 + 37 | 0] << 8)) {
   break label$1;
  }
  $0 = HEAP32[$4 + 12 >> 2];
  if (HEAP32[$4 + 4 >> 2] > (HEAPU8[$0 + 38 | 0] | HEAPU8[$0 + 39 | 0] << 8)) {
   break label$1;
  }
  $0 = HEAP32[$4 + 12 >> 2];
  if (HEAP32[$4 + 8 >> 2] < (HEAPU8[$0 + 40 | 0] | HEAPU8[$0 + 41 | 0] << 8) << 16 >> 16) {
   $0 = HEAP32[$4 + 12 >> 2];
   $1 = HEAP32[$4 + 8 >> 2];
   HEAP8[$0 + 40 | 0] = $1;
   HEAP8[$0 + 41 | 0] = $1 >>> 8;
  }
  $0 = HEAP32[$4 + 12 >> 2];
  if (HEAP32[$4 + 8 >> 2] > (HEAPU8[$0 + 44 | 0] | HEAPU8[$0 + 45 | 0] << 8) << 16 >> 16) {
   $0 = HEAP32[$4 + 12 >> 2];
   $1 = HEAP32[$4 + 8 >> 2];
   HEAP8[$0 + 44 | 0] = $1;
   HEAP8[$0 + 45 | 0] = $1 >>> 8;
  }
  $0 = HEAP32[$4 + 12 >> 2];
  if (HEAP32[$4 + 4 >> 2] < (HEAPU8[$0 + 42 | 0] | HEAPU8[$0 + 43 | 0] << 8) << 16 >> 16) {
   $0 = HEAP32[$4 + 12 >> 2];
   $1 = HEAP32[$4 + 4 >> 2];
   HEAP8[$0 + 42 | 0] = $1;
   HEAP8[$0 + 43 | 0] = $1 >>> 8;
  }
  $0 = HEAP32[$4 + 12 >> 2];
  if (HEAP32[$4 + 4 >> 2] > (HEAPU8[$0 + 46 | 0] | HEAPU8[$0 + 47 | 0] << 8) << 16 >> 16) {
   $0 = HEAP32[$4 + 12 >> 2];
   $1 = HEAP32[$4 + 4 >> 2];
   HEAP8[$0 + 46 | 0] = $1;
   HEAP8[$0 + 47 | 0] = $1 >>> 8;
  }
  $0 = HEAP32[$4 + 12 >> 2];
  FUNCTION_TABLE[HEAPU8[$0 + 52 | 0] | HEAPU8[$0 + 53 | 0] << 8 | (HEAPU8[$0 + 54 | 0] << 16 | HEAPU8[$0 + 55 | 0] << 24)](HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2] & (1 << HEAPU8[HEAP32[$4 + 12 >> 2] + 16 | 0]) - 1);
 }
 __stack_pointer = $4 + 16 | 0;
}

function tflite__MicroInterpreter__Invoke_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 40 >> 2] = $0;
 $0 = HEAP32[$1 + 40 >> 2];
 label$1: {
  if (HEAP32[$0 + 112 >> 2]) {
   tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$0 + 12 >> 2], 128382, 0);
   HEAP32[$1 + 44 >> 2] = 1;
   break label$1;
  }
  if (!(HEAP8[$0 + 108 | 0] & 1)) {
   HEAP32[$1 + 36 >> 2] = tflite__MicroInterpreter__AllocateTensors_28_29($0);
   if (HEAP32[$1 + 36 >> 2]) {
    HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 36 >> 2];
    break label$1;
   }
  }
  HEAP32[$1 + 32 >> 2] = 0;
  while (1) {
   if (HEAPU32[$1 + 32 >> 2] < flatbuffers__Vector_flatbuffers__Offset_tflite__Operator____size_28_29_20const(tflite__SubGraph__operators_28_29_20const(HEAP32[$0 + 116 >> 2])) >>> 0) {
    HEAP32[$1 + 28 >> 2] = HEAP32[$0 >> 2] + Math_imul(HEAP32[$1 + 32 >> 2], 28);
    HEAP32[$1 + 24 >> 2] = HEAP32[(HEAP32[$0 >> 2] + Math_imul(HEAP32[$1 + 32 >> 2], 28) | 0) + 24 >> 2];
    if (HEAP32[HEAP32[$1 + 24 >> 2] + 12 >> 2]) {
     HEAP32[$1 + 20 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$1 + 24 >> 2] + 12 >> 2]]($0 + 16 | 0, HEAP32[$1 + 28 >> 2]);
     $2 = HEAP32[$0 + 104 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2);
     if (HEAP32[$1 + 20 >> 2] == 1) {
      $0 = HEAP32[$0 + 12 >> 2];
      $2 = tflite___28anonymous_20namespace_29__OpNameFromRegistration_28TfLiteRegistration_20const__29(HEAP32[$1 + 24 >> 2]);
      $3 = HEAP32[$1 + 32 >> 2];
      HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 20 >> 2];
      HEAP32[$1 + 4 >> 2] = $3;
      HEAP32[$1 >> 2] = $2;
      tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 107310, $1);
      HEAP32[$1 + 44 >> 2] = 1;
      break label$1;
     }
     if (HEAP32[$1 + 20 >> 2]) {
      HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 20 >> 2];
      break label$1;
     }
    }
    HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 32 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$1 + 44 >> 2] = 0;
 }
 __stack_pointer = $1 + 48 | 0;
 return HEAP32[$1 + 44 >> 2];
}

function jswrap_object_getOwnPropertyDescriptor($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 label$1: {
  if (!(jswrap_object_hasOwnProperty(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]) & 1)) {
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 32 >> 2] = jsvAsArrayIndex(HEAP32[$2 + 36 >> 2]);
  HEAP32[$2 + 28 >> 2] = jspGetVarNamedField(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 32 >> 2], 1);
  jsvUnLock(HEAP32[$2 + 32 >> 2]);
  if (!HEAP32[$2 + 28 >> 2]) {
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 24 >> 2] = jsvNewObject();
  if (!HEAP32[$2 + 24 >> 2]) {
   jsvUnLock(HEAP32[$2 + 28 >> 2]);
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP8[$2 + 23 | 0] = jsvIsNewChild(HEAP32[$2 + 28 >> 2]) & 1;
  HEAP32[$2 + 16 >> 2] = jsvGetInternalFunctionCheckerFor(HEAP32[$2 + 40 >> 2]);
  jsvObjectSetChildAndUnLock(HEAP32[$2 + 24 >> 2], 105143, jsvNewFromBool((jsvIsConstant(HEAP32[$2 + 28 >> 2]) ^ -1) & 1));
  $0 = 1;
  $1 = HEAP32[$2 + 24 >> 2];
  if (HEAP32[$2 + 16 >> 2]) {
   $0 = FUNCTION_TABLE[HEAP32[$2 + 16 >> 2]](HEAP32[$2 + 28 >> 2]) ^ -1;
  }
  jsvObjectSetChildAndUnLock($1, 105202, jsvNewFromBool($0 & 1));
  jsvObjectSetChildAndUnLock(HEAP32[$2 + 24 >> 2], 105152, jsvNewFromBool((HEAPU8[$2 + 23 | 0] ^ -1) & 1));
  HEAP32[$2 + 12 >> 2] = jsvGetValueOfName(HEAP32[$2 + 28 >> 2]);
  label$7: {
   if (jsvIsGetterOrSetter(HEAP32[$2 + 12 >> 2]) & 1) {
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 24 >> 2], 98052, jsvObjectGetChildIfExists(HEAP32[$2 + 12 >> 2], 98052));
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 24 >> 2], 98048, jsvObjectGetChildIfExists(HEAP32[$2 + 12 >> 2], 98048));
    break label$7;
   }
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 24 >> 2], 104465, jsvSkipName(HEAP32[$2 + 28 >> 2]));
  }
  jsvUnLock(HEAP32[$2 + 12 >> 2]);
  jsvUnLock(HEAP32[$2 + 28 >> 2]);
  HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 24 >> 2];
 }
 __stack_pointer = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}

function jsiCheckErrors() {
 var $0 = 0;
 $0 = __stack_pointer - 48 | 0;
 __stack_pointer = $0;
 if (HEAPU16[93524] & 32768) {
  jspSetInterrupted(0);
  HEAP16[93524] = HEAPU16[93524] & -32769;
  jsiConsoleRemoveInputLine();
  jsiConsolePrintString(128990);
 }
 HEAP8[$0 + 47 | 0] = 0;
 HEAP8[$0 + 46 | 0] = (HEAP32[46755] & 32) != 0;
 HEAP32[$0 + 40 >> 2] = jspGetException();
 if (HEAP8[$0 + 46 | 0] & 1) {
  if (jsiExecuteEventCallbackOn(100011, 102114, 1, $0 + 40 | 0) & 1) {
   jsvUnLock(HEAP32[$0 + 40 >> 2]);
   HEAP32[$0 + 40 >> 2] = jspGetException();
   if (!HEAP32[$0 + 40 >> 2]) {
    HEAP8[$0 + 46 | 0] = 0;
   }
  }
 }
 if (HEAP8[$0 + 46 | 0] & 1) {
  jsiConsoleRemoveInputLine();
  HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 40 >> 2];
  jsiConsolePrintf(127872, $0 + 16 | 0);
  HEAP8[$0 + 47 | 0] = 1;
  if (jsvIsObject(HEAP32[$0 + 40 >> 2]) & 1) {
   HEAP32[$0 + 36 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 40 >> 2], 103112);
   if (HEAP32[$0 + 36 >> 2]) {
    jsiConsolePrintStringVar(HEAP32[$0 + 36 >> 2]);
    jsvUnLock(HEAP32[$0 + 36 >> 2]);
   }
  }
 }
 jsvUnLock(HEAP32[$0 + 40 >> 2]);
 if (jspIsInterrupted() & 1) {
  jsiConsoleRemoveInputLine();
  jsiConsolePrintString(128359);
  jspSetInterrupted(0);
  HEAP8[$0 + 47 | 0] = 1;
 }
 HEAP32[$0 + 32 >> 2] = jspGetStackTrace();
 if (HEAP32[$0 + 32 >> 2]) {
  if (HEAP8[$0 + 47 | 0] & 1) {
   jsiConsolePrintStringVar(HEAP32[$0 + 32 >> 2]);
  }
  jsvUnLock(HEAP32[$0 + 32 >> 2]);
 }
 if (jspHasError() & 1) {
  HEAP32[46755] = HEAP32[46755] & -113;
 }
 if (HEAPU8[187067] != HEAPU8[186986]) {
  HEAP8[$0 + 31 | 0] = HEAPU8[186986] & (HEAPU8[187067] ^ -1);
  if (HEAPU8[$0 + 31 | 0] & -9) {
   HEAP32[$0 + 24 >> 2] = jswrap_espruino_getErrorFlagArray(HEAPU8[$0 + 31 | 0]);
   jsiExecuteEventCallbackOn(109901, 104014, 1, $0 + 24 | 0);
   if (HEAP32[$0 + 24 >> 2]) {
    jsiConsoleRemoveInputLine();
    HEAP32[$0 >> 2] = HEAP32[$0 + 24 >> 2];
    jsiConsolePrintf(127907, $0);
    jsvUnLock(HEAP32[$0 + 24 >> 2]);
   }
  }
  HEAP8[187067] = HEAPU8[186986];
 }
 __stack_pointer = $0 + 48 | 0;
}

function jsfBankListFiles($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 80 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 76 >> 2] = $0;
 HEAP32[$6 + 72 >> 2] = $1;
 HEAP32[$6 + 68 >> 2] = $2;
 HEAP32[$6 + 64 >> 2] = $3;
 HEAP32[$6 + 60 >> 2] = $4;
 HEAP32[$6 + 56 >> 2] = $5;
 HEAP32[$6 + 48 >> 2] = 0;
 HEAP32[$6 + 52 >> 2] = 0;
 HEAP32[$6 + 40 >> 2] = 0;
 HEAP32[$6 + 44 >> 2] = 0;
 HEAP32[$6 + 32 >> 2] = 0;
 HEAP32[$6 + 36 >> 2] = 0;
 HEAP32[$6 + 24 >> 2] = 0;
 HEAP32[$6 + 28 >> 2] = 0;
 label$1: {
  label$2: {
   if (!(!HEAP32[46756] | HEAP32[$6 + 72 >> 2] != 134217728)) {
    HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 72 >> 2];
    HEAP32[$6 + 16 >> 2] = HEAP32[46756];
    HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 16 >> 2] + HEAP32[46757];
    while (1) {
     if (HEAPU32[$6 + 16 >> 2] < HEAPU32[$6 + 12 >> 2]) {
      jshFlashRead($6 + 24 | 0, HEAP32[$6 + 16 >> 2], 4);
      HEAP32[$6 + 16 >> 2] = HEAP32[$6 + 16 >> 2] + 32;
      HEAP32[$6 + 8 >> 2] = HEAP32[$6 + 20 >> 2] + HEAP32[$6 + 24 >> 2];
      label$6: {
       if (!(jsfGetFileHeader(HEAP32[$6 + 8 >> 2], $6 + 24 | 0, 1) & 1)) {
        break label$6;
       }
       if (!(jsfIsRealFile($6 + 24 | 0) & 1)) {
        break label$6;
       }
       jsfBankListFilesHandleFile(HEAP32[$6 + 76 >> 2], HEAP32[$6 + 8 >> 2], $6 + 24 | 0, HEAP32[$6 + 68 >> 2], HEAP32[$6 + 64 >> 2], HEAP32[$6 + 60 >> 2], HEAP32[$6 + 56 >> 2]);
      }
      continue;
     }
     break;
    }
    HEAP32[$6 + 72 >> 2] = HEAP32[46756] - 32;
    HEAP32[$6 + 28 >> 2] = 0;
    HEAP32[$6 + 24 >> 2] = HEAP32[46757];
    break label$2;
   }
   if (!(jsfGetFileHeader(HEAP32[$6 + 72 >> 2], $6 + 24 | 0, 1) & 1)) {
    break label$1;
   }
  }
  while (1) {
   if (jsfIsRealFile($6 + 24 | 0) & 1) {
    jsfBankListFilesHandleFile(HEAP32[$6 + 76 >> 2], HEAP32[$6 + 72 >> 2], $6 + 24 | 0, HEAP32[$6 + 68 >> 2], HEAP32[$6 + 64 >> 2], HEAP32[$6 + 60 >> 2], HEAP32[$6 + 56 >> 2]);
   }
   if (jsfGetNextFileHeader($6 + 72 | 0, $6 + 24 | 0, 1) & 1) {
    continue;
   }
   break;
  }
 }
 __stack_pointer = $6 + 80 | 0;
}

function tflite__internal__InitializeTfLiteEvalTensorFromFlatbuffer_28tflite__SimpleMemoryAllocator__2c_20tflite__Tensor_20const__2c_20flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer___20const__2c_20tflite__ErrorReporter__2c_20TfLiteEvalTensor__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 48 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 40 >> 2] = $0;
 HEAP32[$5 + 36 >> 2] = $1;
 HEAP32[$5 + 32 >> 2] = $2;
 HEAP32[$5 + 28 >> 2] = $3;
 HEAP32[$5 + 24 >> 2] = $4;
 HEAP32[$5 + 8 >> 2] = 0;
 HEAP32[$5 + 12 >> 2] = 0;
 HEAP32[$5 + 16 >> 2] = 0;
 $2 = HEAP32[$5 + 12 >> 2];
 $0 = HEAP32[$5 + 8 >> 2];
 $1 = $0;
 $0 = HEAP32[$5 + 24 >> 2];
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = HEAP32[$5 + 16 >> 2];
 HEAP32[$5 + 4 >> 2] = tflite__ConvertTensorType_28tflite__TensorType_2c_20TfLiteType__2c_20tflite__ErrorReporter__29(tflite__Tensor__type_28_29_20const(HEAP32[$5 + 36 >> 2]), HEAP32[$5 + 24 >> 2] + 8 | 0, HEAP32[$5 + 28 >> 2]);
 label$1: {
  if (HEAP32[$5 + 4 >> 2]) {
   HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 4 >> 2];
   break label$1;
  }
  $0 = tflite__internal__GetFlatbufferTensorBuffer_28tflite__Tensor_20const__2c_20flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer___20const__29(HEAP32[$5 + 36 >> 2], HEAP32[$5 + 32 >> 2]);
  HEAP32[HEAP32[$5 + 24 >> 2] >> 2] = $0;
  label$3: {
   if (!tflite__Tensor__shape_28_29_20const(HEAP32[$5 + 36 >> 2])) {
    HEAP32[HEAP32[$5 + 24 >> 2] + 4 >> 2] = 147920;
    break label$3;
   }
   HEAP32[$5 >> 2] = TfLiteStatus_20tflite__internal__FlatBufferVectorToTfLiteTypeArray_int_2c_20TfLiteIntArray__28tflite__SimpleMemoryAllocator__2c_20tflite__ErrorReporter__2c_20flatbuffers__Vector_int__20const__2c_20TfLiteIntArray___29(HEAP32[$5 + 40 >> 2], HEAP32[$5 + 28 >> 2], tflite__Tensor__shape_28_29_20const(HEAP32[$5 + 36 >> 2]), HEAP32[$5 + 24 >> 2] + 4 | 0);
   if (HEAP32[$5 >> 2]) {
    HEAP32[$5 + 44 >> 2] = HEAP32[$5 >> 2];
    break label$1;
   }
  }
  HEAP32[$5 + 44 >> 2] = 0;
 }
 __stack_pointer = $5 + 48 | 0;
 return HEAP32[$5 + 44 >> 2];
}

function jswrap_interface_edit($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 HEAP32[$1 + 24 >> 2] = 0;
 label$1: {
  if (jsvIsString(HEAP32[$1 + 28 >> 2]) & 1) {
   HEAP32[$1 + 28 >> 2] = jsvLockAgain(HEAP32[$1 + 28 >> 2]);
   HEAP32[$1 + 24 >> 2] = jsvSkipNameAndUnLock(jsvFindChildFromVar(HEAP32[46747], HEAP32[$1 + 28 >> 2], 0));
   break label$1;
  }
  HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 28 >> 2];
  HEAP32[$1 + 28 >> 2] = jsvGetPathTo(HEAP32[46747], HEAP32[$1 + 24 >> 2], 4, 0);
 }
 label$3: {
  if (jsvIsString(HEAP32[$1 + 28 >> 2]) & 1) {
   if (jsvIsFunction(HEAP32[$1 + 24 >> 2]) & 1) {
    HEAP32[$1 + 20 >> 2] = jsvFindChildFromString(HEAP32[$1 + 24 >> 2], 102046);
    HEAP32[$1 + 16 >> 2] = jsvGetIndexOf(HEAP32[46747], HEAP32[$1 + 24 >> 2], 1);
    $2 = HEAP32[$1 + 20 >> 2] ? $2 : HEAP32[$1 + 16 >> 2] != 0;
    HEAP8[$1 + 15 | 0] = $2;
    jsvUnLock2(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 20 >> 2]);
    HEAP32[$1 + 8 >> 2] = jsvNewFromEmptyString_10();
    if (HEAP32[$1 + 8 >> 2]) {
     HEAP32[$1 + 4 >> 2] = jsvAsString(HEAP32[$1 + 24 >> 2]);
     label$8: {
      if (HEAP8[$1 + 15 | 0] & 1) {
       jsvAppendString(HEAP32[$1 + 8 >> 2], 127538);
       jsvAppendStringVarComplete(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 28 >> 2]);
       jsvAppendStringVar(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 4 >> 2], 9, 2147483647);
       break label$8;
      }
      jsvAppendStringVarComplete(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 28 >> 2]);
      jsvAppendString(HEAP32[$1 + 8 >> 2], 126665);
      jsvAppendStringVarComplete(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 4 >> 2]);
      jsvAppendString(HEAP32[$1 + 8 >> 2], 110343);
     }
     jsvUnLock(HEAP32[$1 + 4 >> 2]);
     jsiReplaceInputLine(HEAP32[$1 + 8 >> 2]);
     jsvUnLock(HEAP32[$1 + 8 >> 2]);
    }
    break label$3;
   }
   jsExceptionHere(1, 102187, 0);
   break label$3;
  }
  jsExceptionHere(1, 126568, 0);
 }
 jsvUnLock2(HEAP32[$1 + 24 >> 2], HEAP32[$1 + 28 >> 2]);
 __stack_pointer = $1 + 32 | 0;
}

function atan($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 wasm2js_scratch_store_f64(+$0);
 $4 = wasm2js_scratch_load_i32(1) | 0;
 wasm2js_scratch_load_i32(0) | 0;
 $1 = $4 & 2147483647;
 if ($1 >>> 0 >= 1141899264) {
  wasm2js_scratch_store_f64(1.5707963267948966);
  $1 = wasm2js_scratch_load_i32(1) | 0;
  $4 = wasm2js_scratch_load_i32(0) | 0;
  $7 = $4;
  $2 = $1 & 2147483647;
  $8 = $2;
  wasm2js_scratch_store_f64(+$0);
  $2 = wasm2js_scratch_load_i32(1) | 0;
  wasm2js_scratch_load_i32(0) | 0;
  $4 = $2 & -2147483648;
  $1 = $4;
  $2 = $7;
  wasm2js_scratch_store_i32(0, $9 | $2);
  $4 = $8;
  $1 = $4 | $1;
  wasm2js_scratch_store_i32(1, $1 | 0);
  $5 = +wasm2js_scratch_load_f64();
  $1 = __DOUBLE_BITS_12($0);
  $4 = $1;
  $2 = i64toi32_i32$HIGH_BITS;
  $1 = $2 & 2147483647;
  $2 = $4;
  return ($1 | 0) == 2146435072 & ($2 | 0) != 0 | $1 >>> 0 > 2146435072 ? $0 : $5;
 }
 label$2: {
  label$3: {
   if ($1 >>> 0 <= 1071382527) {
    $2 = -1;
    if ($1 >>> 0 >= 1044381696) {
     break label$3;
    }
    break label$2;
   }
   $0 = fabs($0);
   if ($1 >>> 0 <= 1072889855) {
    if ($1 >>> 0 <= 1072037887) {
     $0 = ($0 + $0 + -1) / ($0 + 2);
     $2 = 0;
     break label$3;
    }
    $0 = ($0 + -1) / ($0 + 1);
    $2 = 1;
    break label$3;
   }
   if ($1 >>> 0 <= 1073971199) {
    $0 = ($0 + -1.5) / ($0 * 1.5 + 1);
    $2 = 2;
    break label$3;
   }
   $0 = -1 / $0;
   $2 = 3;
  }
  $6 = $0 * $0;
  $3 = $6 * $6;
  $5 = $3 * ($3 * ($3 * ($3 * ($3 * -.036531572744216916 + -.058335701337905735) + -.0769187620504483) + -.11111110405462356) + -.19999999999876483);
  $3 = $6 * ($3 * ($3 * ($3 * ($3 * ($3 * .016285820115365782 + .049768779946159324) + .06661073137387531) + .09090887133436507) + .14285714272503466) + .3333333333333293);
  if ($1 >>> 0 <= 1071382527) {
   return $0 - $0 * ($5 + $3);
  }
  $1 = $2 << 3;
  $0 = HEAPF64[$1 + 148336 >> 3] - ($0 * ($5 + $3) - HEAPF64[$1 + 148368 >> 3] - $0);
  $2 = $4;
  $0 = ($2 | 0) < 0 ? -$0 : $0;
 }
 return $0;
}

function jsvCreateConfigObject($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = jsvNewObject();
 label$1: {
  if (!HEAP32[$2 + 16 >> 2]) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = 0;
  while (1) {
   if (HEAP32[$2 + 12 >> 2] < HEAP32[$2 + 20 >> 2]) {
    if (HEAP32[(HEAP32[$2 + 24 >> 2] + Math_imul(HEAP32[$2 + 12 >> 2], 12) | 0) + 8 >> 2]) {
     HEAP32[$2 + 8 >> 2] = 0;
     label$6: {
      label$7: {
       switch (HEAPU16[(HEAP32[$2 + 24 >> 2] + Math_imul(HEAP32[$2 + 12 >> 2], 12) | 0) + 4 >> 1] - 3 | 0) {
       case 0:
       case 2:
       case 4:
       case 25:
        HEAP32[$2 + 8 >> 2] = jsvLockAgain(HEAP32[HEAP32[(HEAP32[$2 + 24 >> 2] + Math_imul(HEAP32[$2 + 12 >> 2], 12) | 0) + 8 >> 2] >> 2]);
        break label$6;

       case 10:
        HEAP32[$2 + 8 >> 2] = jsvNewFromPin(HEAPU8[HEAP32[(HEAP32[$2 + 24 >> 2] + Math_imul(HEAP32[$2 + 12 >> 2], 12) | 0) + 8 >> 2]]);
        break label$6;

       case 9:
        HEAP32[$2 + 8 >> 2] = jsvNewFromBool(HEAP8[HEAP32[(HEAP32[$2 + 24 >> 2] + Math_imul(HEAP32[$2 + 12 >> 2], 12) | 0) + 8 >> 2]] & 1);
        break label$6;

       case 7:
        HEAP32[$2 + 8 >> 2] = jsvNewFromInteger(HEAP32[HEAP32[(HEAP32[$2 + 24 >> 2] + Math_imul(HEAP32[$2 + 12 >> 2], 12) | 0) + 8 >> 2] >> 2]);
        break label$6;

       case 8:
        break label$7;

       default:
        break label$6;
       }
      }
      HEAP32[$2 + 8 >> 2] = jsvNewFromFloat(HEAPF64[HEAP32[(HEAP32[$2 + 24 >> 2] + Math_imul(HEAP32[$2 + 12 >> 2], 12) | 0) + 8 >> 2] >> 3]);
     }
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 16 >> 2], HEAP32[HEAP32[$2 + 24 >> 2] + Math_imul(HEAP32[$2 + 12 >> 2], 12) >> 2], HEAP32[$2 + 8 >> 2]);
    }
    HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 16 >> 2];
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jsserialEventCallback($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP8[$2 + 47 | 0] = $0;
 HEAP8[$2 + 46 | 0] = $1;
 HEAP32[$2 + 40 >> 2] = jsserialGetSerialList(0);
 label$1: {
  if (!HEAP32[$2 + 40 >> 2]) {
   break label$1;
  }
  HEAP32[$2 + 36 >> 2] = jsvGetArrayItem(HEAP32[$2 + 40 >> 2], HEAPU8[$2 + 46 | 0]);
  if (!HEAP32[$2 + 36 >> 2]) {
   break label$1;
  }
  HEAP32[$2 + 32 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 36 >> 2], 107897);
  HEAP32[$2 + 28 >> 2] = jsvGetFlatStringPointer(HEAP32[$2 + 32 >> 2]);
  if (!HEAP32[$2 + 28 >> 2]) {
   break label$1;
  }
  HEAP32[$2 + 16 >> 2] = jshGetSystemTime();
  HEAP32[$2 + 20 >> 2] = i64toi32_i32$HIGH_BITS;
  $5 = HEAP32[$2 + 20 >> 2];
  $3 = HEAP32[$2 + 28 >> 2];
  $1 = HEAP32[$3 + 72 >> 2];
  $0 = HEAP32[$3 + 76 >> 2];
  $3 = HEAP32[$2 + 16 >> 2];
  $0 = $0 + ($1 >>> 0 > $3 >>> 0) | 0;
  HEAP32[$2 + 8 >> 2] = $3 - $1;
  $0 = $5 - $0 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  $3 = HEAP32[$2 + 20 >> 2];
  $0 = HEAP32[$2 + 16 >> 2];
  $1 = $0;
  $0 = HEAP32[$2 + 28 >> 2];
  HEAP32[$0 + 72 >> 2] = $1;
  HEAP32[$0 + 76 >> 2] = $3;
  HEAP8[$2 + 7 | 0] = (HEAPU8[$2 + 47 | 0] ^ -1) & 1;
  $3 = HEAP32[$2 + 8 >> 2];
  $0 = HEAP32[$2 + 12 >> 2];
  $4 = jshGetMillisecondsFromTime($3, $0) * +HEAP32[HEAP32[$2 + 28 >> 2] + 80 >> 2] / 1e3 + .5;
  label$2: {
   if (Math_abs($4) < 2147483648) {
    $0 = ~~$4;
    break label$2;
   }
   $0 = -2147483648;
  }
  HEAP32[$2 >> 2] = $0;
  if (!(HEAPU8[HEAP32[$2 + 28 >> 2] + 88 | 0] | !(HEAP8[$2 + 7 | 0] & 1)) | HEAP32[$2 >> 2] > 12) {
   break label$1;
  }
  if (HEAP8[$2 + 7 | 0] & 1) {
   $0 = HEAP32[$2 + 28 >> 2];
   HEAP32[$0 + 84 >> 2] = HEAP32[$0 + 84 >> 2] | (1 << HEAP32[$2 >> 2]) - 1 << HEAPU8[HEAP32[$2 + 28 >> 2] + 88 | 0];
  }
  $0 = HEAP32[$2 + 28 >> 2];
  HEAP8[$0 + 88 | 0] = HEAP32[$2 >> 2] + HEAPU8[$0 + 88 | 0];
  jsserialCheckForCharacter(HEAP32[$2 + 28 >> 2]);
 }
 __stack_pointer = $2 + 48 | 0;
}

function jsvGarbageCollectMarkUsed($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[$1 + 8 >> 2];
 $2 = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 65279;
 HEAP8[$0 + 11 | 0] = $2;
 HEAP8[$0 + 12 | 0] = $2 >>> 8;
 if (jsvHasStringExt(HEAP32[$1 + 8 >> 2]) & 1) {
  HEAP16[$1 + 6 >> 1] = jsvGetLastChild(HEAP32[$1 + 8 >> 2]);
  while (1) {
   if (HEAPU16[$1 + 6 >> 1]) {
    HEAP32[$1 >> 2] = jsvGetAddressOf(HEAPU16[$1 + 6 >> 1]);
    $0 = HEAP32[$1 >> 2];
    $2 = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 65279;
    HEAP8[$0 + 11 | 0] = $2;
    HEAP8[$0 + 12 | 0] = $2 >>> 8;
    HEAP16[$1 + 6 >> 1] = jsvGetLastChild(HEAP32[$1 >> 2]);
    continue;
   }
   break;
  }
 }
 label$4: {
  label$5: {
   if (jsvHasSingleChild(HEAP32[$1 + 8 >> 2]) & 1) {
    if (jsvGetFirstChild(HEAP32[$1 + 8 >> 2]) & 65535) {
     HEAP32[$1 >> 2] = jsvGetAddressOf(jsvGetFirstChild(HEAP32[$1 + 8 >> 2]) & 65535);
     $0 = HEAP32[$1 >> 2];
     if ((HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 256) {
      if (!(jsvGarbageCollectMarkUsed(HEAP32[$1 >> 2]) & 1)) {
       HEAP8[$1 + 15 | 0] = 0;
       break label$4;
      }
     }
    }
    break label$5;
   }
   if (jsvHasChildren(HEAP32[$1 + 8 >> 2]) & 1) {
    if (jsuGetFreeStack() >>> 0 < 256) {
     HEAP8[$1 + 15 | 0] = 0;
     break label$4;
    }
    HEAP16[$1 + 6 >> 1] = jsvGetFirstChild(HEAP32[$1 + 8 >> 2]);
    while (1) {
     if (HEAPU16[$1 + 6 >> 1]) {
      HEAP32[$1 >> 2] = jsvGetAddressOf(HEAPU16[$1 + 6 >> 1]);
      $0 = HEAP32[$1 >> 2];
      if ((HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 256) {
       if (!(jsvGarbageCollectMarkUsed(HEAP32[$1 >> 2]) & 1)) {
        HEAP8[$1 + 15 | 0] = 0;
        break label$4;
       }
      }
      HEAP16[$1 + 6 >> 1] = jsvGetNextSibling(HEAP32[$1 >> 2]);
      continue;
     }
     break;
    }
   }
  }
  HEAP8[$1 + 15 | 0] = 1;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP8[$1 + 15 | 0] & 1;
}

function jswrap_espruino_FFT($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $4 = __stack_pointer - 48 | 0;
 $3 = $4;
 __stack_pointer = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP8[$3 + 39 | 0] = $2;
 label$1: {
  label$2: {
   if (jsvIsIterable(HEAP32[$3 + 44 >> 2]) & 1) {
    if (jsvIsUndefined(HEAP32[$3 + 40 >> 2]) & 1) {
     break label$2;
    }
    if (jsvIsIterable(HEAP32[$3 + 40 >> 2]) & 1) {
     break label$2;
    }
   }
   $0 = HEAP32[$3 + 44 >> 2];
   HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 40 >> 2];
   HEAP32[$3 >> 2] = $0;
   jsExceptionHere(1, 99546, $3);
   break label$1;
  }
  HEAP32[$3 + 32 >> 2] = jsvGetLength(HEAP32[$3 + 44 >> 2]);
  HEAP32[$3 + 28 >> 2] = 1;
  HEAP32[$3 + 24 >> 2] = 0;
  while (1) {
   if (HEAPU32[$3 + 28 >> 2] < HEAPU32[$3 + 32 >> 2]) {
    HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 28 >> 2] << 1;
    HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 24 >> 2] + 1;
    continue;
   }
   break;
  }
  if (jsuGetFreeStack() >>> 0 < (HEAP32[$3 + 28 >> 2] << 4) + 256 >>> 0) {
   jsExceptionHere(1, 108741, 0);
   break label$1;
  }
  $4 = $4 - (HEAP32[$3 + 28 >> 2] << 4) | 0;
  __stack_pointer = $4;
  HEAP32[$3 + 20 >> 2] = $4;
  HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 20 >> 2] + (HEAP32[$3 + 28 >> 2] << 3);
  _jswrap_espruino_FFT_getData(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 44 >> 2], HEAP32[$3 + 28 >> 2]);
  _jswrap_espruino_FFT_getData(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 40 >> 2], HEAP32[$3 + 28 >> 2]);
  FFT((HEAP8[$3 + 39 | 0] & 1 ? -1 : 1) << 16 >> 16, HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], HEAP32[$3 + 16 >> 2]);
  HEAP8[$3 + 15 | 0] = jsvIsIterable(HEAP32[$3 + 40 >> 2]) & 1;
  _jswrap_espruino_FFT_setData(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 20 >> 2], HEAP8[$3 + 15 | 0] & 1 ? 0 : HEAP32[$3 + 16 >> 2], HEAP32[$3 + 28 >> 2]);
  if (!(HEAP8[$3 + 15 | 0] & 1)) {
   break label$1;
  }
  _jswrap_espruino_FFT_setData(HEAP32[$3 + 40 >> 2], HEAP32[$3 + 16 >> 2], 0, HEAP32[$3 + 28 >> 2]);
 }
 __stack_pointer = $3 + 48 | 0;
}

function tflite__QuantizeMultiplier_28double_2c_20int__2c_20int__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAPF64[$3 + 24 >> 3] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 label$1: {
  if (HEAPF64[$3 + 24 >> 3] == 0) {
   HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 0;
   HEAP32[HEAP32[$3 + 16 >> 2] >> 2] = 0;
   break label$1;
  }
  HEAPF64[$3 + 8 >> 3] = frexp(HEAPF64[$3 + 24 >> 3], HEAP32[$3 + 16 >> 2]);
  $0 = double_20tflite__TfLiteRound_double__28double_29(HEAPF64[$3 + 8 >> 3] * 2147483648);
  label$3: {
   if (Math_abs($0) < 0x8000000000000000) {
    $2 = Math_abs($0) >= 1 ? ~~($0 > 0 ? Math_min(Math_floor($0 * 2.3283064365386963e-10), 4294967295) : Math_ceil(($0 - +(~~$0 >>> 0 >>> 0)) * 2.3283064365386963e-10)) >>> 0 : 0;
    $5 = ~~$0 >>> 0;
    break label$3;
   }
   $2 = -2147483648;
  }
  $4 = $3;
  HEAP32[$4 >> 2] = $5;
  HEAP32[$4 + 4 >> 2] = $2;
  $2 = HEAP32[$3 >> 2];
  $5 = $2;
  $4 = HEAP32[$3 + 4 >> 2];
  if ($5 >>> 0 > 2147483648 & ($4 | 0) >= 0 | ($4 | 0) > 0) {
   abort();
   abort();
  }
  $5 = HEAP32[$3 >> 2];
  $1 = $5;
  $4 = HEAP32[$3 + 4 >> 2];
  if (!$4 & ($1 | 0) == -2147483648) {
   $1 = HEAP32[$3 >> 2];
   $4 = HEAP32[$3 + 4 >> 2];
   $1 = __wasm_i64_sdiv($1, $4, 2, 0);
   HEAP32[$3 >> 2] = $1;
   $4 = i64toi32_i32$HIGH_BITS;
   HEAP32[$3 + 4 >> 2] = $4;
   $1 = HEAP32[$3 + 16 >> 2];
   HEAP32[$1 >> 2] = HEAP32[$1 >> 2] + 1;
  }
  $4 = HEAP32[$3 >> 2];
  $6 = $4;
  $1 = HEAP32[$3 + 4 >> 2];
  $2 = $1;
  $4 = std____2__numeric_limits_int___max_28_29();
  $1 = $4 >> 31;
  $5 = $4;
  $4 = $1;
  $1 = $2;
  $2 = $6;
  if (($4 | 0) <= ($1 | 0) & $2 >>> 0 > $5 >>> 0 | ($1 | 0) > ($4 | 0)) {
   abort();
   abort();
  }
  if (HEAP32[HEAP32[$3 + 16 >> 2] >> 2] < -31) {
   HEAP32[HEAP32[$3 + 16 >> 2] >> 2] = 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
  }
  $2 = HEAP32[$3 >> 2];
  HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = $2;
 }
 __stack_pointer = $3 + 32 | 0;
}

function _jswrap_array_sort($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 160 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 156 >> 2] = $0;
 HEAP32[$3 + 152 >> 2] = $1;
 HEAP32[$3 + 148 >> 2] = $2;
 label$1: {
  if (HEAP32[$3 + 152 >> 2] < 2) {
   break label$1;
  }
  jsvIteratorClone($3 + 88 | 0, HEAP32[$3 + 156 >> 2]);
  HEAP8[$3 + 87 | 0] = 1;
  HEAP32[$3 + 80 >> 2] = jsvIteratorGetValue($3 + 88 | 0);
  HEAP32[$3 + 76 >> 2] = 0;
  HEAP32[$3 + 72 >> 2] = 0;
  jsvIteratorClone($3 + 8 | 0, HEAP32[$3 + 156 >> 2]);
  jsvIteratorNext($3 + 8 | 0);
  while (1) {
   $0 = HEAP32[$3 + 152 >> 2] - 1 | 0;
   HEAP32[$3 + 152 >> 2] = $0;
   $1 = 0;
   if ($0) {
    $1 = jspIsInterrupted() ^ -1;
   }
   if ($1 & 1) {
    HEAP32[$3 + 4 >> 2] = jsvIteratorGetValue($3 + 8 | 0);
    HEAP32[$3 >> 2] = _jswrap_array_sort_compare(HEAP32[$3 + 4 >> 2], HEAP32[$3 + 80 >> 2], HEAP32[$3 + 148 >> 2]);
    label$5: {
     if (HEAP32[$3 >> 2] <= 0) {
      if (HEAP32[$3 >> 2] < 0) {
       HEAP8[$3 + 87 | 0] = 0;
      }
      HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] + 1;
      jsvIteratorSetValue($3 + 88 | 0, HEAP32[$3 + 4 >> 2]);
      jsvIteratorNext($3 + 88 | 0);
      jsvUnLock(jsvIteratorSetValue($3 + 8 | 0, jsvIteratorGetValue($3 + 88 | 0)));
      jsvIteratorSetValue($3 + 88 | 0, HEAP32[$3 + 80 >> 2]);
      break label$5;
     }
     HEAP32[$3 + 72 >> 2] = HEAP32[$3 + 72 >> 2] + 1;
    }
    jsvUnLock(HEAP32[$3 + 4 >> 2]);
    jsvIteratorNext($3 + 8 | 0);
    continue;
   }
   break;
  }
  jsvIteratorFree($3 + 8 | 0);
  jsvUnLock(HEAP32[$3 + 80 >> 2]);
  if (jspIsInterrupted() & 1) {
   jsvIteratorFree($3 + 88 | 0);
   break label$1;
  }
  jsvIteratorNext($3 + 88 | 0);
  _jswrap_array_sort($3 + 88 | 0, HEAP32[$3 + 72 >> 2], HEAP32[$3 + 148 >> 2]);
  jsvIteratorFree($3 + 88 | 0);
  if (HEAP8[$3 + 87 | 0] & 1) {
   break label$1;
  }
  _jswrap_array_sort(HEAP32[$3 + 156 >> 2], HEAP32[$3 + 76 >> 2], HEAP32[$3 + 148 >> 2]);
 }
 __stack_pointer = $3 + 160 | 0;
}

function jswrap_process_memory($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 44 >> 2] = $0;
 HEAP32[$1 + 20 >> 2] = -1;
 label$1: {
  if (!(jsvIsUndefined(HEAP32[$1 + 44 >> 2]) & 1)) {
   if (!(jsvGetBool(HEAP32[$1 + 44 >> 2]) & 1)) {
    break label$1;
   }
  }
  HEAP32[$1 + 32 >> 2] = jshGetSystemTime();
  HEAP32[$1 + 36 >> 2] = i64toi32_i32$HIGH_BITS;
  HEAP32[$1 + 20 >> 2] = jsvGarbageCollect();
  HEAP32[$1 + 24 >> 2] = jshGetSystemTime();
  HEAP32[$1 + 28 >> 2] = i64toi32_i32$HIGH_BITS;
 }
 HEAP32[$1 + 16 >> 2] = jsvNewObject();
 if (HEAP32[$1 + 16 >> 2]) {
  HEAP32[$1 + 12 >> 2] = 0;
  HEAP32[$1 + 8 >> 2] = jsvObjectGetChildIfExists(HEAP32[46748], 96428);
  if (HEAP32[$1 + 8 >> 2]) {
   HEAP32[$1 + 12 >> 2] = jsvCountJsVarsUsed(HEAP32[$1 + 8 >> 2]);
   jsvUnLock(HEAP32[$1 + 8 >> 2]);
  }
  HEAP32[$1 + 4 >> 2] = jsvGetMemoryUsage() - HEAP32[$1 + 12 >> 2];
  HEAP32[$1 >> 2] = jsvGetMemoryTotal();
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 16 >> 2], 105367, jsvNewFromInteger(HEAP32[$1 >> 2] - HEAP32[$1 + 4 >> 2] | 0));
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 16 >> 2], 105317, jsvNewFromInteger(HEAP32[$1 + 4 >> 2]));
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 16 >> 2], 103043, jsvNewFromInteger(HEAP32[$1 >> 2]));
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 16 >> 2], 96428, jsvNewFromInteger(HEAP32[$1 + 12 >> 2]));
  if (HEAP32[$1 + 20 >> 2] >= 0) {
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 16 >> 2], 107759, jsvNewFromInteger(HEAP32[$1 + 20 >> 2]));
   $2 = HEAP32[$1 + 24 >> 2];
   $3 = HEAP32[$1 + 32 >> 2];
   $0 = HEAP32[$1 + 36 >> 2] + ($2 >>> 0 < $3 >>> 0) | 0;
   $0 = HEAP32[$1 + 28 >> 2] - $0 | 0;
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 16 >> 2], 105005, jsvNewFromFloat(jshGetMillisecondsFromTime($2 - $3 | 0, $0)));
  }
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 16 >> 2], 104157, jsvNewFromInteger(13));
 }
 __stack_pointer = $1 + 48 | 0;
 return HEAP32[$1 + 16 >> 2];
}

function tflite__MicroInterpreter__output_28unsigned_20long_29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 $0 = HEAP32[$2 + 24 >> 2];
 HEAP32[$2 + 16 >> 2] = tflite__MicroInterpreter__outputs_size_28_29_20const($0);
 label$1: {
  if (HEAPU32[$2 + 20 >> 2] >= HEAPU32[$2 + 16 >> 2]) {
   $0 = HEAP32[$0 + 12 >> 2];
   $1 = HEAP32[$2 + 20 >> 2];
   HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 16 >> 2];
   HEAP32[$2 >> 2] = $1;
   tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 126397, $2);
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$2 + 20 >> 2]) {
   tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$0 + 12 >> 2], 126945, 0);
   $1 = HEAP32[$0 + 104 >> 2];
   HEAP32[$2 + 28 >> 2] = (wasm2js_i32$1 = $1, wasm2js_i32$2 = HEAP32[$0 + 4 >> 2], 
   wasm2js_i32$3 = HEAP32[$0 + 120 >> 2], wasm2js_i32$4 = flatbuffers__Vector_int___Get_28unsigned_20int_29_20const(tflite__MicroInterpreter__outputs_28_29_20const($0), HEAP32[$2 + 20 >> 2]), 
   wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0, wasm2js_i32$4 | 0) | 0);
   break label$1;
  }
  if (!HEAP32[$0 + 148 >> 2]) {
   $1 = HEAP32[$0 + 104 >> 2];
   HEAP32[$0 + 148 >> 2] = (wasm2js_i32$4 = $1, wasm2js_i32$3 = HEAP32[$0 + 4 >> 2], 
   wasm2js_i32$2 = HEAP32[$0 + 120 >> 2], wasm2js_i32$1 = flatbuffers__Vector_int___Get_28unsigned_20int_29_20const(tflite__MicroInterpreter__outputs_28_29_20const($0), HEAP32[$2 + 20 >> 2]), 
   wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$4 | 0, wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0) | 0);
  }
  HEAP32[$2 + 28 >> 2] = HEAP32[$0 + 148 >> 2];
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function tflite__MicroInterpreter__input_28unsigned_20long_29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 $0 = HEAP32[$2 + 24 >> 2];
 HEAP32[$2 + 16 >> 2] = tflite__MicroInterpreter__inputs_size_28_29_20const($0);
 label$1: {
  if (HEAPU32[$2 + 20 >> 2] >= HEAPU32[$2 + 16 >> 2]) {
   $0 = HEAP32[$0 + 12 >> 2];
   $1 = HEAP32[$2 + 20 >> 2];
   HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 16 >> 2];
   HEAP32[$2 >> 2] = $1;
   tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 126441, $2);
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$2 + 20 >> 2]) {
   tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$0 + 12 >> 2], 127066, 0);
   $1 = HEAP32[$0 + 104 >> 2];
   HEAP32[$2 + 28 >> 2] = (wasm2js_i32$1 = $1, wasm2js_i32$2 = HEAP32[$0 + 4 >> 2], 
   wasm2js_i32$3 = HEAP32[$0 + 120 >> 2], wasm2js_i32$4 = flatbuffers__Vector_int___Get_28unsigned_20int_29_20const(tflite__MicroInterpreter__inputs_28_29_20const($0), HEAP32[$2 + 20 >> 2]), 
   wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0, wasm2js_i32$4 | 0) | 0);
   break label$1;
  }
  if (!HEAP32[$0 + 144 >> 2]) {
   $1 = HEAP32[$0 + 104 >> 2];
   HEAP32[$0 + 144 >> 2] = (wasm2js_i32$4 = $1, wasm2js_i32$3 = HEAP32[$0 + 4 >> 2], 
   wasm2js_i32$2 = HEAP32[$0 + 120 >> 2], wasm2js_i32$1 = flatbuffers__Vector_int___Get_28unsigned_20int_29_20const(tflite__MicroInterpreter__inputs_28_29_20const($0), HEAP32[$2 + 20 >> 2]), 
   wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$4 | 0, wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0) | 0);
  }
  HEAP32[$2 + 28 >> 2] = HEAP32[$0 + 144 >> 2];
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jsvIsStringNumericInt($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 80 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 72 >> 2] = $0;
 HEAP8[$2 + 71 | 0] = $1;
 jsvStringIteratorNew($2 + 32 | 0, HEAP32[$2 + 72 >> 2], 0);
 while (1) {
  $0 = 0;
  if (jsvStringIteratorHasChar_1($2 + 32 | 0) & 1) {
   $0 = isWhitespace(jsvStringIteratorGetChar_1($2 + 32 | 0) << 24 >> 24);
  }
  if ($0 & 1) {
   jsvStringIteratorNext($2 + 32 | 0);
   continue;
  }
  break;
 }
 label$4: {
  if ((jsvStringIteratorGetChar_1($2 + 32 | 0) & 255) != 45) {
   if ((jsvStringIteratorGetChar_1($2 + 32 | 0) & 255) != 43) {
    break label$4;
   }
  }
  jsvStringIteratorNext($2 + 32 | 0);
 }
 HEAP32[$2 + 28 >> 2] = 0;
 if ((jsvStringIteratorGetChar_1($2 + 32 | 0) & 255) == 48) {
  jsvStringIteratorNext($2 + 32 | 0);
  HEAP8[$2 + 25 | 0] = 48;
  HEAP8[$2 + 26 | 0] = jsvStringIteratorGetChar_1($2 + 32 | 0);
  HEAP8[$2 + 27 | 0] = 0;
  HEAP32[$2 + 20 >> 2] = $2 + 25;
  HEAP32[$2 + 28 >> 2] = getRadix($2 + 20 | 0);
  if (HEAPU32[$2 + 20 >> 2] > $2 + 26 >>> 0) {
   jsvStringIteratorNext($2 + 32 | 0);
  }
 }
 if (!HEAP32[$2 + 28 >> 2]) {
  HEAP32[$2 + 28 >> 2] = 10;
 }
 HEAP32[$2 + 16 >> 2] = 0;
 label$9: {
  while (1) {
   if (jsvStringIteratorHasChar_1($2 + 32 | 0) & 1) {
    HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 16 >> 2] + 1;
    HEAP8[$2 + 15 | 0] = jsvStringIteratorGetCharAndNext($2 + 32 | 0);
    label$12: {
     if (!(!(HEAP8[$2 + 71 | 0] & 1) | HEAP8[$2 + 15 | 0] != 46)) {
      HEAP8[$2 + 71 | 0] = 0;
      break label$12;
     }
     HEAP32[$2 + 8 >> 2] = chtod(HEAP8[$2 + 15 | 0]);
     if (!(HEAP32[$2 + 8 >> 2] < HEAP32[$2 + 28 >> 2] & HEAP32[$2 + 8 >> 2] >= 0)) {
      jsvStringIteratorFree_1($2 + 32 | 0);
      HEAP8[$2 + 79 | 0] = 0;
      break label$9;
     }
    }
    continue;
   }
   break;
  }
  jsvStringIteratorFree_1($2 + 32 | 0);
  HEAP8[$2 + 79 | 0] = HEAP32[$2 + 16 >> 2] > 0;
 }
 __stack_pointer = $2 + 80 | 0;
 return HEAP8[$2 + 79 | 0] & 1;
}

function _jswrap_graphics_getRect($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 144 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 140 >> 2] = $0;
 HEAP32[$6 + 136 >> 2] = $1;
 HEAP32[$6 + 132 >> 2] = $2;
 HEAP32[$6 + 128 >> 2] = $3;
 HEAP32[$6 + 124 >> 2] = $4;
 HEAP32[$6 + 120 >> 2] = $5;
 HEAP32[HEAP32[$6 + 120 >> 2] >> 2] = 0;
 label$1: {
  if (jsvIsObject(HEAP32[$6 + 140 >> 2]) & 1) {
   HEAP32[$6 + 116 >> 2] = -1;
   HEAP32[$6 + 112 >> 2] = -1;
   HEAP32[$6 >> 2] = 96763;
   HEAP16[$6 + 4 >> 1] = 10;
   HEAP32[$6 + 8 >> 2] = HEAP32[$6 + 136 >> 2];
   HEAP32[$6 + 12 >> 2] = 96676;
   HEAP16[$6 + 16 >> 1] = 10;
   HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 132 >> 2];
   HEAP32[$6 + 24 >> 2] = 111158;
   HEAP16[$6 + 28 >> 1] = 10;
   HEAP32[$6 + 32 >> 2] = HEAP32[$6 + 136 >> 2];
   HEAP32[$6 + 36 >> 2] = 111155;
   HEAP16[$6 + 40 >> 1] = 10;
   HEAP32[$6 + 44 >> 2] = HEAP32[$6 + 132 >> 2];
   HEAP32[$6 + 48 >> 2] = 110879;
   HEAP16[$6 + 52 >> 1] = 10;
   HEAP32[$6 + 56 >> 2] = HEAP32[$6 + 128 >> 2];
   HEAP32[$6 + 60 >> 2] = 110876;
   HEAP16[$6 + 64 >> 1] = 10;
   HEAP32[$6 + 68 >> 2] = HEAP32[$6 + 124 >> 2];
   HEAP32[$6 + 72 >> 2] = 97016;
   HEAP16[$6 + 76 >> 1] = 10;
   HEAP32[$6 + 80 >> 2] = $6 + 116;
   HEAP32[$6 + 84 >> 2] = 103644;
   HEAP16[$6 + 88 >> 1] = 10;
   HEAP32[$6 + 92 >> 2] = $6 + 112;
   HEAP32[$6 + 96 >> 2] = 101598;
   HEAP16[$6 + 100 >> 1] = 10;
   HEAP32[$6 + 104 >> 2] = HEAP32[$6 + 120 >> 2];
   jsvReadConfigObject(HEAP32[$6 + 140 >> 2], $6, 9);
   if (HEAP32[$6 + 116 >> 2] >= 0) {
    HEAP32[HEAP32[$6 + 128 >> 2] >> 2] = HEAP32[HEAP32[$6 + 136 >> 2] >> 2] + HEAP32[$6 + 116 >> 2];
   }
   if (HEAP32[$6 + 112 >> 2] >= 0) {
    HEAP32[HEAP32[$6 + 124 >> 2] >> 2] = HEAP32[HEAP32[$6 + 132 >> 2] >> 2] + HEAP32[$6 + 112 >> 2];
   }
   break label$1;
  }
  $0 = jsvGetInteger(HEAP32[$6 + 140 >> 2]);
  HEAP32[HEAP32[$6 + 136 >> 2] >> 2] = $0;
 }
 __stack_pointer = $6 + 144 | 0;
}

function jswBinarySearch($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 40 >> 2] = $0;
 HEAP32[$3 + 36 >> 2] = $1;
 HEAP32[$3 + 32 >> 2] = $2;
 HEAP8[$3 + 31 | 0] = HEAPU8[HEAP32[$3 + 40 >> 2] + 8 | 0];
 HEAP32[$3 + 24 >> 2] = 0;
 HEAP32[$3 + 20 >> 2] = HEAPU8[$3 + 31 | 0] - 1;
 label$1: {
  while (1) {
   if (HEAP32[$3 + 24 >> 2] <= HEAP32[$3 + 20 >> 2]) {
    HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 24 >> 2] + HEAP32[$3 + 20 >> 2] >> 1;
    $0 = HEAP32[$3 + 40 >> 2];
    HEAP32[$3 + 12 >> 2] = (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) + (HEAP32[$3 + 16 >> 2] << 3);
    $0 = HEAP32[$3 + 40 >> 2];
    $1 = HEAP32[$3 + 12 >> 2];
    HEAP32[$3 + 8 >> 2] = strcmp(HEAP32[$3 + 32 >> 2], (HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24)) + (HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8) | 0);
    if (HEAP32[$3 + 8 >> 2]) {
     if (HEAP32[$3 + 8 >> 2] < 0) {
      HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 16 >> 2] - 1;
      continue;
     }
     HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 16 >> 2] + 1;
     continue;
    } else {
     $0 = HEAP32[$3 + 12 >> 2];
     HEAP16[$3 + 6 >> 1] = HEAPU8[$0 + 2 | 0] | HEAPU8[$0 + 3 | 0] << 8;
     if ((HEAPU16[$3 + 6 >> 1] & 32256) == 28672) {
      $0 = HEAP32[$3 + 12 >> 2];
      HEAP32[$3 + 44 >> 2] = jsnCallFunction(HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24), HEAPU16[$3 + 6 >> 1], HEAP32[$3 + 36 >> 2], 0, 0);
      break label$1;
     }
     $0 = HEAP32[$3 + 12 >> 2];
     HEAP32[$3 + 44 >> 2] = jsvNewNativeFunction(HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24), HEAPU16[$3 + 6 >> 1]);
     break label$1;
    }
   }
   break;
  }
  HEAP32[$3 + 44 >> 2] = 0;
 }
 __stack_pointer = $3 + 48 | 0;
 return HEAP32[$3 + 44 >> 2];
}

function jsvIsStringEqualOrStartsWithOffset($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 80 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 72 >> 2] = $0;
 HEAP32[$5 + 68 >> 2] = $1;
 HEAP8[$5 + 67 | 0] = $2;
 HEAP32[$5 + 60 >> 2] = $3;
 HEAP8[$5 + 59 | 0] = $4;
 label$1: {
  if (!(jsvHasCharacterData(HEAP32[$5 + 72 >> 2]) & 1)) {
   HEAP8[$5 + 79 | 0] = 0;
   break label$1;
  }
  jsvStringIteratorNew($5 + 16 | 0, HEAP32[$5 + 72 >> 2], HEAP32[$5 + 60 >> 2]);
  label$3: {
   if (HEAP8[$5 + 59 | 0] & 1) {
    while (1) {
     $0 = 0;
     label$6: {
      if (!(jsvStringIteratorHasChar_1($5 + 16 | 0) & 1)) {
       break label$6;
      }
      $0 = 0;
      if (!HEAP8[HEAP32[$5 + 68 >> 2]]) {
       break label$6;
      }
      $0 = (charToLowerCase(jsvStringIteratorGetChar_1($5 + 16 | 0) << 24 >> 24) & 255) == (charToLowerCase(HEAP8[HEAP32[$5 + 68 >> 2]]) & 255);
     }
     if ($0) {
      HEAP32[$5 + 68 >> 2] = HEAP32[$5 + 68 >> 2] + 1;
      jsvStringIteratorNext($5 + 16 | 0);
      continue;
     }
     break;
    }
    break label$3;
   }
   while (1) {
    $0 = 0;
    label$9: {
     if (!(jsvStringIteratorHasChar_1($5 + 16 | 0) & 1)) {
      break label$9;
     }
     $0 = 0;
     if (!HEAP8[HEAP32[$5 + 68 >> 2]]) {
      break label$9;
     }
     $0 = (jsvStringIteratorGetChar_1($5 + 16 | 0) & 255) == HEAPU8[HEAP32[$5 + 68 >> 2]];
    }
    if ($0) {
     HEAP32[$5 + 68 >> 2] = HEAP32[$5 + 68 >> 2] + 1;
     jsvStringIteratorNext($5 + 16 | 0);
     continue;
    }
    break;
   }
  }
  label$11: {
   if (HEAP8[$5 + 67 | 0] & 1) {
    $0 = 1;
    if (!HEAPU8[HEAP32[$5 + 68 >> 2]]) {
     break label$11;
    }
   }
   $0 = (jsvStringIteratorGetChar_1($5 + 16 | 0) & 255) == HEAPU8[HEAP32[$5 + 68 >> 2]];
  }
  HEAP8[$5 + 15 | 0] = $0;
  jsvStringIteratorFree_1($5 + 16 | 0);
  HEAP8[$5 + 79 | 0] = HEAP8[$5 + 15 | 0] & 1;
 }
 __stack_pointer = $5 + 80 | 0;
 return HEAP8[$5 + 79 | 0] & 1;
}

function jswrap_waveform_constructor($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 label$1: {
  if (HEAP32[$2 + 40 >> 2] <= 0) {
   jsExceptionHere(1, 111303, 0);
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP8[$2 + 35 | 0] = 0;
  HEAP8[$2 + 34 | 0] = 0;
  label$3: {
   if (jsvIsObject(HEAP32[$2 + 36 >> 2]) & 1) {
    HEAP8[$2 + 35 | 0] = jsvObjectGetBoolChild(HEAP32[$2 + 36 >> 2], 101472) & 1;
    HEAP32[$2 + 28 >> 2] = jsvObjectGetIntegerChild(HEAP32[$2 + 36 >> 2], 99994);
    if (!(!HEAP32[$2 + 28 >> 2] | HEAP32[$2 + 28 >> 2] == 8 | HEAP32[$2 + 28 >> 2] == 16)) {
     jsExceptionHere(1, 99976, 0);
     HEAP32[$2 + 44 >> 2] = 0;
     break label$1;
    }
    if (HEAP32[$2 + 28 >> 2] == 16) {
     HEAP8[$2 + 34 | 0] = 1;
    }
    break label$3;
   }
   if (!(jsvIsUndefined(HEAP32[$2 + 36 >> 2]) & 1)) {
    HEAP32[$2 >> 2] = HEAP32[$2 + 36 >> 2];
    jsExceptionHere(1, 98159, $2);
   }
  }
  HEAP8[$2 + 27 | 0] = HEAP8[$2 + 34 | 0] & 1 ? 2 : 1;
  HEAP32[$2 + 20 >> 2] = jsvNewTypedArray(HEAPU8[$2 + 27 | 0], HEAP32[$2 + 40 >> 2]);
  HEAP32[$2 + 16 >> 2] = 0;
  if (HEAP8[$2 + 35 | 0] & 1) {
   HEAP32[$2 + 16 >> 2] = jsvNewTypedArray(HEAPU8[$2 + 27 | 0], HEAP32[$2 + 40 >> 2]);
  }
  HEAP32[$2 + 12 >> 2] = jspNewObject(0, 102591);
  if (HEAP32[$2 + 16 >> 2] | !(HEAP8[$2 + 35 | 0] & 1) ? !HEAP32[$2 + 12 >> 2] | !HEAP32[$2 + 20 >> 2] : 1) {
   jsvUnLock3(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 16 >> 2]);
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  jsvObjectSetChildAndUnLock(HEAP32[$2 + 12 >> 2], 101361, HEAP32[$2 + 20 >> 2]);
  if (HEAP32[$2 + 16 >> 2]) {
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 12 >> 2], 110882, HEAP32[$2 + 16 >> 2]);
  }
  HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 12 >> 2];
 }
 __stack_pointer = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}

function jswrap_banglejs_buzz($0, $1) {
 $0 = $0 | 0;
 $1 = +$1;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAPF64[$2 + 32 >> 3] = $1;
 __DOUBLE_BITS_2(HEAPF64[$2 + 32 >> 3]);
 $0 = i64toi32_i32$HIGH_BITS & 2147483647;
 if (HEAPF64[$2 + 32 >> 3] > 1 ? 1 : ($0 | 0) == 2146435072 | $0 >>> 0 > 2146435072) {
  HEAPF64[$2 + 32 >> 3] = 1;
 }
 if (HEAPF64[$2 + 32 >> 3] < 0) {
  HEAPF64[$2 + 32 >> 3] = 0;
 }
 if (HEAP32[$2 + 40 >> 2] <= 0) {
  HEAP32[$2 + 40 >> 2] = 200;
 }
 if (HEAP32[$2 + 40 >> 2] > 5e3) {
  HEAP32[$2 + 40 >> 2] = 5e3;
 }
 label$7: {
  if (HEAP32[85833]) {
   HEAP32[$2 + 28 >> 2] = jsvNewNativeFunction(139, 481);
   HEAP32[$2 + 24 >> 2] = jsvNewFromInteger(HEAP32[$2 + 40 >> 2]);
   jsvAddFunctionParameter(HEAP32[$2 + 28 >> 2], 0, HEAP32[$2 + 24 >> 2]);
   jsvUnLock(HEAP32[$2 + 24 >> 2]);
   HEAP32[$2 + 24 >> 2] = jsvNewFromFloat(HEAPF64[$2 + 32 >> 3]);
   jsvAddFunctionParameter(HEAP32[$2 + 28 >> 2], 0, HEAP32[$2 + 24 >> 2]);
   jsvUnLock(HEAP32[$2 + 24 >> 2]);
   HEAP32[$2 + 20 >> 2] = jswrap_promise_then(HEAP32[85833], HEAP32[$2 + 28 >> 2], 0);
   jsvUnLock(HEAP32[$2 + 28 >> 2]);
   HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 20 >> 2];
   break label$7;
  }
  HEAP32[85833] = jspromise_create();
  if (!HEAP32[85833]) {
   HEAP32[$2 + 44 >> 2] = 0;
   break label$7;
  }
  $1 = HEAPF64[$2 + 32 >> 3] * 255;
  label$10: {
   if ($1 < 4294967296 & $1 >= 0) {
    $0 = ~~$1 >>> 0;
    break label$10;
   }
   $0 = 0;
  }
  HEAP8[343320] = $0;
  $3 = jshGetTimeFromMilliseconds(+HEAP32[$2 + 40 >> 2]);
  $0 = i64toi32_i32$HIGH_BITS;
  label$12: {
   if (jstExecuteFn(588, 0, $3, $0, 0, 0) & 1) {
    if (HEAP32[85796] & 512) {
     _jswrap_banglejs_setVibration();
    }
    break label$12;
   }
   HEAP8[343320] = 0;
  }
  HEAP32[$2 + 44 >> 2] = jsvLockAgain(HEAP32[85833]);
 }
 __stack_pointer = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}

function jsserialEventCallbackInit($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = jsvNewFlatStringOfLength(96);
 label$1: {
  if (!HEAP32[$2 + 16 >> 2]) {
   jsExceptionHere(1, 108411, 0);
   HEAP8[$2 + 31 | 0] = 0;
   break label$1;
  }
  jsvObjectSetChildAndUnLock(HEAP32[$2 + 24 >> 2], 107897, HEAP32[$2 + 16 >> 2]);
  HEAP32[$2 + 12 >> 2] = jsvGetFlatStringPointer(HEAP32[$2 + 16 >> 2]);
  HEAP8[HEAP32[$2 + 12 >> 2] + 64 | 0] = 0;
  $0 = jshGetSystemTime();
  $1 = $0;
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP32[$0 + 72 >> 2] = $1;
  HEAP32[$0 + 76 >> 2] = i64toi32_i32$HIGH_BITS;
  $0 = HEAP32[$2 + 20 >> 2];
  HEAP32[HEAP32[$2 + 12 >> 2] + 80 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
  HEAP32[HEAP32[$2 + 12 >> 2] + 84 >> 2] = 0;
  HEAP8[HEAP32[$2 + 12 >> 2] + 88 | 0] = 0;
  HEAP8[HEAP32[$2 + 12 >> 2] + 89 | 0] = !!HEAPU8[HEAP32[$2 + 20 >> 2] + 9 | 0] + (HEAPU8[HEAP32[$2 + 20 >> 2] + 8 | 0] + HEAPU8[HEAP32[$2 + 20 >> 2] + 10 | 0] | 0);
  HEAP8[$2 + 11 | 0] = jshPinWatch(HEAPU8[HEAP32[$2 + 20 >> 2] + 4 | 0], 1, 1);
  label$3: {
   if (HEAPU8[$2 + 11 | 0]) {
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 24 >> 2], 103316, jsvNewFromInteger(HEAPU8[$2 + 11 | 0]));
    HEAP32[$2 + 4 >> 2] = jsserialGetSerialList(1);
    if (!HEAP32[$2 + 4 >> 2]) {
     HEAP8[$2 + 31 | 0] = 0;
     break label$1;
    }
    jsvSetArrayItem(HEAP32[$2 + 4 >> 2], HEAPU8[$2 + 11 | 0], HEAP32[$2 + 24 >> 2]);
    jsvUnLock(HEAP32[$2 + 4 >> 2]);
    jshSetEventCallback(HEAPU8[$2 + 11 | 0], 553);
    break label$3;
   }
   HEAP32[$2 >> 2] = HEAPU8[HEAP32[$2 + 20 >> 2] + 4 | 0];
   jsExceptionHere(1, 108449, $2);
   HEAP8[$2 + 31 | 0] = 0;
   break label$1;
  }
  HEAP8[$2 + 31 | 0] = 1;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP8[$2 + 31 | 0] & 1;
}

function lcdGetPixelIndex_ArrayBuffer($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 HEAP32[$4 + 24 >> 2] = $0;
 HEAP32[$4 + 20 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $2;
 HEAP32[$4 + 12 >> 2] = $3;
 $0 = HEAP32[$4 + 24 >> 2];
 if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 1 & (HEAP32[$4 + 16 >> 2] & 1)) {
  $0 = HEAP32[$4 + 24 >> 2];
  HEAP32[$4 + 20 >> 2] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) - (HEAP32[$4 + 20 >> 2] + HEAP32[$4 + 12 >> 2] | 0);
 }
 $0 = HEAP32[$4 + 24 >> 2];
 label$3: {
  if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 8) {
   $0 = HEAP32[$4 + 24 >> 2];
   HEAP32[$4 + 8 >> 2] = (HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8) >>> 1;
   HEAP32[$4 + 4 >> 2] = 0;
   if (HEAP32[$4 + 16 >> 2] >= HEAP32[$4 + 8 >> 2]) {
    HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 16 >> 2] - HEAP32[$4 + 8 >> 2];
    HEAP32[$4 + 4 >> 2] = HEAPU8[HEAP32[$4 + 24 >> 2] + 16 | 0];
   }
   $0 = HEAP32[$4 + 24 >> 2];
   HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 4 >> 2] + Math_imul(HEAP32[$4 + 20 >> 2] + Math_imul(HEAP32[$4 + 16 >> 2], HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) | 0, HEAPU8[HEAP32[$4 + 24 >> 2] + 16 | 0] << 1);
   break label$3;
  }
  $0 = HEAP32[$4 + 24 >> 2];
  if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 2) {
   $0 = HEAP32[$4 + 24 >> 2];
   HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 16 >> 2] & 7 | HEAP32[$4 + 20 >> 2] + Math_imul(HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8, HEAP32[$4 + 16 >> 2] >> 3) << 3;
   break label$3;
  }
  $0 = HEAP32[$4 + 24 >> 2];
  HEAP32[$4 + 28 >> 2] = Math_imul(HEAPU8[HEAP32[$4 + 24 >> 2] + 16 | 0], HEAP32[$4 + 20 >> 2] + Math_imul(HEAP32[$4 + 16 >> 2], HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) | 0);
 }
 return HEAP32[$4 + 28 >> 2];
}

function tflite__ConvertTensorType_28tflite__TensorType_2c_20TfLiteType__2c_20tflite__ErrorReporter__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 label$1: {
  label$2: {
   switch (HEAP32[$3 + 24 >> 2]) {
   case 1:
    HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 10;
    HEAP32[$3 + 28 >> 2] = 0;
    break label$1;

   case 0:
    HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 1;
    HEAP32[$3 + 28 >> 2] = 0;
    break label$1;

   case 10:
    HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 11;
    HEAP32[$3 + 28 >> 2] = 0;
    break label$1;

   case 7:
    HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 7;
    HEAP32[$3 + 28 >> 2] = 0;
    break label$1;

   case 2:
    HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 2;
    HEAP32[$3 + 28 >> 2] = 0;
    break label$1;

   case 3:
    HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 3;
    HEAP32[$3 + 28 >> 2] = 0;
    break label$1;

   case 9:
    HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 9;
    HEAP32[$3 + 28 >> 2] = 0;
    break label$1;

   case 4:
    HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 4;
    HEAP32[$3 + 28 >> 2] = 0;
    break label$1;

   case 5:
    HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 5;
    HEAP32[$3 + 28 >> 2] = 0;
    break label$1;

   case 6:
    HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 6;
    HEAP32[$3 + 28 >> 2] = 0;
    break label$1;

   case 8:
    HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 8;
    HEAP32[$3 + 28 >> 2] = 0;
    break label$1;

   case 11:
    HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 12;
    HEAP32[$3 + 28 >> 2] = 0;
    break label$1;

   default:
    break label$2;
   }
  }
  HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 0;
  $0 = HEAP32[$3 + 16 >> 2];
  HEAP32[$3 >> 2] = HEAP32[$3 + 24 >> 2];
  tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 128229, $3);
  HEAP32[$3 + 28 >> 2] = 1;
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function jswrap_onewire_select($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = __stack_pointer - 80 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 76 >> 2] = $0;
 HEAP32[$2 + 72 >> 2] = $1;
 HEAP8[$2 + 71 | 0] = onewire_getpin(HEAP32[$2 + 76 >> 2]);
 label$1: {
  if (!(jshIsPinValid(HEAPU8[$2 + 71 | 0]) & 1)) {
   break label$1;
  }
  label$2: {
   if (jsvIsString(HEAP32[$2 + 72 >> 2]) & 1) {
    if ((jsvGetStringLength(HEAP32[$2 + 72 >> 2]) | 0) == 16) {
     break label$2;
    }
   }
   HEAP32[$2 >> 2] = HEAP32[$2 + 72 >> 2];
   jsExceptionHere(3, 101616, $2);
   break label$1;
  }
  OneWireReset(HEAPU8[$2 + 71 | 0]);
  HEAP32[$2 + 56 >> 2] = 0;
  HEAP32[$2 + 60 >> 2] = 0;
  jsvStringIteratorNew($2 + 16 | 0, HEAP32[$2 + 72 >> 2], 0);
  HEAP32[$2 + 12 >> 2] = 0;
  while (1) {
   if (HEAP32[$2 + 12 >> 2] < 8) {
    HEAP8[$2 + 9 | 0] = jsvStringIteratorGetCharAndNext($2 + 16 | 0);
    HEAP8[$2 + 10 | 0] = jsvStringIteratorGetCharAndNext($2 + 16 | 0);
    HEAP8[$2 + 11 | 0] = 0;
    $1 = HEAP32[$2 + 56 >> 2];
    $5 = $1;
    $0 = HEAP32[$2 + 60 >> 2];
    $6 = $0;
    $0 = stringToIntWithRadix($2 + 9 | 0, 16, 0, 0);
    $1 = i64toi32_i32$HIGH_BITS;
    $3 = $0;
    $0 = HEAP32[$2 + 12 >> 2] << 3;
    $4 = $0 & 31;
    if (($0 & 63) >>> 0 >= 32) {
     $0 = $3 << $4;
     $4 = 0;
    } else {
     $0 = (1 << $4) - 1 & $3 >>> 32 - $4 | $1 << $4;
     $4 = $3 << $4;
    }
    $3 = $0;
    $1 = $5;
    $0 = $4;
    $0 = $1 | $0;
    $1 = $2;
    HEAP32[$1 + 56 >> 2] = $0;
    $0 = $6;
    $3 = $0 | $3;
    HEAP32[$1 + 60 >> 2] = $3;
    HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
    continue;
   }
   break;
  }
  jsvStringIteratorFree_13($2 + 16 | 0);
  OneWireWrite(HEAPU8[$2 + 71 | 0], 8, 85, 0);
  $3 = HEAP32[$2 + 56 >> 2];
  $1 = HEAP32[$2 + 60 >> 2];
  OneWireWrite(HEAPU8[$2 + 71 | 0], 64, $3, $1);
 }
 __stack_pointer = $2 + 80 | 0;
}

function _jswrap_array_reverse_block($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 176 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 172 >> 2] = $0;
 HEAP32[$3 + 168 >> 2] = $1;
 HEAP32[$3 + 164 >> 2] = $2;
 jsvIteratorClone($3 + 104 | 0, HEAP32[$3 + 168 >> 2]);
 jsvIteratorClone($3 + 40 | 0, HEAP32[$3 + 168 >> 2]);
 HEAP32[$3 + 36 >> 2] = (HEAP32[$3 + 164 >> 2] + 1 | 0) / 2;
 while (1) {
  if (HEAP32[$3 + 36 >> 2] > 0) {
   jsvIteratorNext($3 + 40 | 0);
   HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 36 >> 2] - 1;
   continue;
  }
  break;
 }
 if (HEAP32[$3 + 164 >> 2] > 3) {
  _jswrap_array_reverse_block(HEAP32[$3 + 172 >> 2], $3 + 104 | 0, HEAP32[$3 + 164 >> 2] / 2 | 0);
  _jswrap_array_reverse_block(HEAP32[$3 + 172 >> 2], $3 + 40 | 0, HEAP32[$3 + 164 >> 2] / 2 | 0);
 }
 HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 164 >> 2] / 2;
 while (1) {
  if (HEAP32[$3 + 36 >> 2] > 0) {
   HEAP32[$3 + 32 >> 2] = jsvIteratorGetValue($3 + 104 | 0);
   HEAP32[$3 + 28 >> 2] = jsvIteratorGetValue($3 + 40 | 0);
   jsvIteratorSetValue($3 + 104 | 0, HEAP32[$3 + 28 >> 2]);
   jsvIteratorSetValue($3 + 40 | 0, HEAP32[$3 + 32 >> 2]);
   jsvUnLock2(HEAP32[$3 + 32 >> 2], HEAP32[$3 + 28 >> 2]);
   if (jsvIsArray(HEAP32[$3 + 172 >> 2]) & 1) {
    HEAP32[$3 + 24 >> 2] = jsvIteratorGetKey($3 + 104 | 0);
    HEAP32[$3 + 20 >> 2] = jsvIteratorGetKey($3 + 40 | 0);
    HEAP32[$3 + 16 >> 2] = jsvGetInteger(HEAP32[$3 + 24 >> 2]);
    HEAP32[$3 + 12 >> 2] = jsvGetInteger(HEAP32[$3 + 20 >> 2]);
    jsvSetInteger(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 12 >> 2]);
    jsvSetInteger(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 16 >> 2]);
    jsvUnLock2(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
   }
   jsvIteratorNext($3 + 104 | 0);
   jsvIteratorNext($3 + 40 | 0);
   HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 36 >> 2] - 1;
   continue;
  }
  break;
 }
 jsvIteratorFree($3 + 104 | 0);
 jsvIteratorFree($3 + 40 | 0);
 __stack_pointer = $3 + 176 | 0;
}

function jswrap_math_mod($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 80 | 0;
 __stack_pointer = $2;
 HEAPF64[$2 + 64 >> 3] = $0;
 HEAPF64[$2 + 56 >> 3] = $1;
 HEAPF64[$2 + 32 >> 3] = HEAPF64[$2 + 64 >> 3];
 $3 = __DOUBLE_BITS_6(HEAPF64[$2 + 64 >> 3]);
 $5 = $3;
 $4 = i64toi32_i32$HIGH_BITS;
 $3 = $4 & 2147483647;
 label$1: {
  label$2: {
   label$3: {
    if (($3 | 0) == 2146435072 | $3 >>> 0 > 2146435072) {
     break label$3;
    }
    $4 = __DOUBLE_BITS_6(HEAPF64[$2 + 56 >> 3]);
    $5 = $4;
    $3 = i64toi32_i32$HIGH_BITS;
    $4 = $3 & 2147483647;
    $3 = $5;
    if (($4 | 0) == 2146435072 & ($3 | 0) != 0 | $4 >>> 0 > 2146435072) {
     break label$3;
    }
    break label$2;
   }
   HEAPF64[$2 + 72 >> 3] = nan;
   break label$1;
  }
  if (HEAPF64[$2 + 32 >> 3] < 0) {
   HEAPF64[$2 + 64 >> 3] = -HEAPF64[$2 + 64 >> 3];
  }
  if (HEAPF64[$2 + 56 >> 3] < 0) {
   HEAPF64[$2 + 56 >> 3] = -HEAPF64[$2 + 56 >> 3];
  }
  label$7: {
   if (!(!(HEAPF64[$2 + 64 >> 3] <= 17976931348623157e292) | (!(HEAPF64[$2 + 56 >> 3] <= 17976931348623157e292) | HEAPF64[$2 + 56 >> 3] == 0))) {
    while (1) {
     if (HEAPF64[$2 + 64 >> 3] >= HEAPF64[$2 + 56 >> 3]) {
      HEAPF64[$2 + 48 >> 3] = HEAPF64[$2 + 64 >> 3] * .5;
      HEAPF64[$2 + 40 >> 3] = HEAPF64[$2 + 56 >> 3];
      while (1) {
       if (HEAPF64[$2 + 48 >> 3] >= HEAPF64[$2 + 40 >> 3]) {
        $0 = HEAPF64[$2 + 40 >> 3];
        HEAPF64[$2 + 40 >> 3] = $0 + $0;
        continue;
       }
       break;
      }
      HEAPF64[$2 + 64 >> 3] = HEAPF64[$2 + 64 >> 3] - HEAPF64[$2 + 40 >> 3];
      continue;
     }
     break;
    }
    break label$7;
   }
   HEAPF64[$2 + 64 >> 3] = 0;
  }
  if (HEAPF64[$2 + 32 >> 3] < 0) {
   $0 = -HEAPF64[$2 + 64 >> 3];
  } else {
   $0 = HEAPF64[$2 + 64 >> 3];
  }
  HEAPF64[$2 + 72 >> 3] = $0;
 }
 __stack_pointer = $2 + 80 | 0;
 return HEAPF64[$2 + 72 >> 3];
}

function jswGetSymbolListForConstructorProto($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[$1 + 8 >> 2];
 HEAP32[$1 + 4 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
 label$1: {
  if (HEAP32[$1 + 4 >> 2] == 10) {
   HEAP32[$1 + 12 >> 2] = 140131;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 11) {
   HEAP32[$1 + 12 >> 2] = 140149;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 12) {
   HEAP32[$1 + 12 >> 2] = 140158;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 13) {
   HEAP32[$1 + 12 >> 2] = 140167;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 14) {
   HEAP32[$1 + 12 >> 2] = 140176;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 15) {
   HEAP32[$1 + 12 >> 2] = 140185;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 16) {
   HEAP32[$1 + 12 >> 2] = 140194;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 17) {
   HEAP32[$1 + 12 >> 2] = 140266;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 18) {
   HEAP32[$1 + 12 >> 2] = 140338;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 19) {
   HEAP32[$1 + 12 >> 2] = 140356;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 20) {
   HEAP32[$1 + 12 >> 2] = 140374;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 21) {
   HEAP32[$1 + 12 >> 2] = 140392;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 22) {
   HEAP32[$1 + 12 >> 2] = 140410;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 23) {
   HEAP32[$1 + 12 >> 2] = 140428;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 24) {
   HEAP32[$1 + 12 >> 2] = 140437;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 25) {
   HEAP32[$1 + 12 >> 2] = 140455;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 26) {
   HEAP32[$1 + 12 >> 2] = 140482;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 return HEAP32[$1 + 12 >> 2];
}

function jsvGetDataPointer($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1: {
  if (jsvIsArrayBuffer(HEAP32[$2 + 24 >> 2]) & 1) {
   HEAP32[$2 + 16 >> 2] = jsvGetArrayBufferBackingString(HEAP32[$2 + 24 >> 2], 0);
   HEAP32[$2 + 12 >> 2] = jsvGetDataPointer(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 20 >> 2]);
   jsvUnLock(HEAP32[$2 + 16 >> 2]);
   if (HEAP32[$2 + 12 >> 2]) {
    $0 = HEAP32[$2 + 24 >> 2];
    HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8);
    $0 = HEAP32[$2 + 24 >> 2];
    HEAP32[HEAP32[$2 + 20 >> 2] >> 2] = HEAPU8[$0 + 4 | 0] << 16 | (HEAPU8[$0 + 2 | 0] | HEAPU8[$0 + 3 | 0] << 8);
   }
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
   break label$1;
  }
  if (jsvIsNativeString(HEAP32[$2 + 24 >> 2]) & 1) {
   $0 = HEAP32[$2 + 24 >> 2];
   HEAP32[HEAP32[$2 + 20 >> 2] >> 2] = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
   $0 = HEAP32[$2 + 24 >> 2];
   HEAP32[$2 + 28 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
   break label$1;
  }
  if (jsvIsFlatString(HEAP32[$2 + 24 >> 2]) & 1) {
   $0 = jsvGetStringLength(HEAP32[$2 + 24 >> 2]);
   HEAP32[HEAP32[$2 + 20 >> 2] >> 2] = $0;
   HEAP32[$2 + 28 >> 2] = jsvGetFlatStringPointer(HEAP32[$2 + 24 >> 2]);
   break label$1;
  }
  label$6: {
   if (!(jsvIsBasicString(HEAP32[$2 + 24 >> 2]) & 1)) {
    break label$6;
   }
   if (jsvGetLastChild(HEAP32[$2 + 24 >> 2]) & 65535) {
    break label$6;
   }
   $0 = jsvGetCharactersInVar(HEAP32[$2 + 24 >> 2]);
   HEAP32[HEAP32[$2 + 20 >> 2] >> 2] = $0;
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 24 >> 2];
   break label$1;
  }
  HEAP32[$2 + 28 >> 2] = 0;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function tflite___28anonymous_20namespace_29__CreatePlan_28tflite__ErrorReporter__2c_20tflite__GreedyMemoryPlanner__2c_20tflite___28anonymous_20namespace_29__AllocationInfo_20const__2c_20unsigned_20long_29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 40 >> 2] = $0;
 HEAP32[$4 + 36 >> 2] = $1;
 HEAP32[$4 + 32 >> 2] = $2;
 HEAP32[$4 + 28 >> 2] = $3;
 HEAP32[$4 + 24 >> 2] = 0;
 label$1: {
  while (1) {
   if (HEAPU32[$4 + 24 >> 2] < HEAPU32[$4 + 28 >> 2]) {
    HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 32 >> 2] + Math_imul(HEAP32[$4 + 24 >> 2], 24);
    if (HEAP8[HEAP32[$4 + 20 >> 2] + 20 | 0] & 1) {
     HEAP32[$4 + 16 >> 2] = tflite__AlignSizeUp_28unsigned_20long_2c_20unsigned_20long_29(HEAP32[HEAP32[$4 + 20 >> 2] >> 2], 16);
     label$5: {
      if (HEAP32[HEAP32[$4 + 20 >> 2] + 16 >> 2] == -1) {
       $0 = HEAP32[$4 + 36 >> 2];
       HEAP32[$4 + 12 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$4 + 40 >> 2], HEAP32[$4 + 16 >> 2], HEAP32[HEAP32[$4 + 20 >> 2] + 8 >> 2], HEAP32[HEAP32[$4 + 20 >> 2] + 12 >> 2]);
       if (HEAP32[$4 + 12 >> 2]) {
        HEAP32[$4 + 44 >> 2] = HEAP32[$4 + 12 >> 2];
        break label$1;
       }
       break label$5;
      }
      HEAP32[$4 + 8 >> 2] = tflite__GreedyMemoryPlanner__AddBuffer_28tflite__ErrorReporter__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$4 + 36 >> 2], HEAP32[$4 + 40 >> 2], HEAP32[$4 + 16 >> 2], HEAP32[HEAP32[$4 + 20 >> 2] + 8 >> 2], HEAP32[HEAP32[$4 + 20 >> 2] + 12 >> 2], HEAP32[HEAP32[$4 + 20 >> 2] + 16 >> 2]);
      if (HEAP32[$4 + 8 >> 2]) {
       HEAP32[$4 + 44 >> 2] = HEAP32[$4 + 8 >> 2];
       break label$1;
      }
     }
    }
    HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 24 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$4 + 44 >> 2] = 0;
 }
 __stack_pointer = $4 + 48 | 0;
 return HEAP32[$4 + 44 >> 2];
}

function tflite__CalculateActivationRangeQuantized_28TfLiteContext__2c_20TfLiteFusedActivation_2c_20TfLiteTensor__2c_20int__2c_20int__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 48 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 40 >> 2] = $0;
 HEAP32[$5 + 36 >> 2] = $1;
 HEAP32[$5 + 32 >> 2] = $2;
 HEAP32[$5 + 28 >> 2] = $3;
 HEAP32[$5 + 24 >> 2] = $4;
 HEAP32[$5 + 20 >> 2] = 0;
 HEAP32[$5 + 16 >> 2] = 0;
 label$1: {
  label$2: {
   if (HEAP32[HEAP32[$5 + 32 >> 2] + 28 >> 2] == 3) {
    HEAP32[$5 + 20 >> 2] = std____2__numeric_limits_unsigned_20char___min_28_29() & 255;
    HEAP32[$5 + 16 >> 2] = std____2__numeric_limits_unsigned_20char___max_28_29() & 255;
    break label$2;
   }
   label$4: {
    if (HEAP32[HEAP32[$5 + 32 >> 2] + 28 >> 2] == 9) {
     HEAP32[$5 + 20 >> 2] = std____2__numeric_limits_signed_20char___min_28_29() << 24 >> 24;
     HEAP32[$5 + 16 >> 2] = std____2__numeric_limits_signed_20char___max_28_29() << 24 >> 24;
     break label$4;
    }
    label$6: {
     if (HEAP32[HEAP32[$5 + 32 >> 2] + 28 >> 2] == 7) {
      HEAP32[$5 + 20 >> 2] = std____2__numeric_limits_short___min_28_29() << 16 >> 16;
      HEAP32[$5 + 16 >> 2] = std____2__numeric_limits_short___max_28_29() << 16 >> 16;
      break label$6;
     }
     $0 = HEAP32[HEAP32[$5 + 40 >> 2] + 20 >> 2];
     $1 = HEAP32[$5 + 40 >> 2];
     HEAP32[$5 >> 2] = 104720;
     FUNCTION_TABLE[$0 | 0]($1, 111890, $5);
     HEAP32[$5 + 44 >> 2] = 1;
     break label$1;
    }
   }
  }
  tflite___28anonymous_20namespace_29__CalculateActivationRangeQuantizedImpl_28TfLiteFusedActivation_2c_20int_2c_20int_2c_20TfLiteTensor__2c_20int__2c_20int__29(HEAP32[$5 + 36 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], HEAP32[$5 + 32 >> 2], HEAP32[$5 + 28 >> 2], HEAP32[$5 + 24 >> 2]);
  HEAP32[$5 + 44 >> 2] = 0;
 }
 __stack_pointer = $5 + 48 | 0;
 return HEAP32[$5 + 44 >> 2];
}

function _jswrap_interface_clearTimeoutOrInterval($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 44 >> 2] = $0;
 HEAP8[$2 + 43 | 0] = $1;
 HEAP32[$2 + 36 >> 2] = jsvLock(HEAPU16[93522]);
 label$1: {
  label$2: {
   if (!(jsvIsUndefined(HEAP32[$2 + 44 >> 2]) & 1)) {
    if (jsvGetArrayLength(HEAP32[$2 + 44 >> 2])) {
     break label$2;
    }
   }
   jsvObjectIteratorNew($2 + 32 | 0, HEAP32[$2 + 36 >> 2]);
   while (1) {
    if (jsvObjectIteratorHasValue_14($2 + 32 | 0) & 1) {
     HEAP32[$2 + 28 >> 2] = jsvObjectIteratorGetValue_13($2 + 32 | 0);
     HEAP32[$2 + 24 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 28 >> 2], 103640);
     label$6: {
      if (!HEAP32[$2 + 24 >> 2]) {
       jsvObjectIteratorRemoveAndGotoNext($2 + 32 | 0, HEAP32[$2 + 36 >> 2]);
       break label$6;
      }
      jsvObjectIteratorNext($2 + 32 | 0);
     }
     jsvUnLock2(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 28 >> 2]);
     continue;
    }
    break;
   }
   jsvObjectIteratorFree_14($2 + 32 | 0);
   break label$1;
  }
  HEAP32[$2 + 20 >> 2] = jsvGetArrayItem(HEAP32[$2 + 44 >> 2], 0);
  label$8: {
   if (jsvIsUndefined(HEAP32[$2 + 20 >> 2]) & 1) {
    HEAP32[$2 + 16 >> 2] = HEAP8[$2 + 43 | 0] & 1 ? 97480 : 103034;
    $0 = HEAP32[$2 + 16 >> 2];
    HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 16 >> 2];
    HEAP32[$2 >> 2] = $0;
    jsExceptionHere(1, 106903, $2);
    break label$8;
   }
   label$10: {
    if (jsvIsBasic(HEAP32[$2 + 20 >> 2]) & 1) {
     $0 = jsvFindChildFromVar(HEAP32[$2 + 36 >> 2], HEAP32[$2 + 20 >> 2], 0);
     break label$10;
    }
    $0 = 0;
   }
   HEAP32[$2 + 12 >> 2] = $0;
   if (HEAP32[$2 + 12 >> 2]) {
    jsvRemoveChildAndUnLock(HEAP32[$2 + 36 >> 2], HEAP32[$2 + 12 >> 2]);
   }
   jsvUnLock(HEAP32[$2 + 20 >> 2]);
  }
 }
 jsvUnLock(HEAP32[$2 + 36 >> 2]);
 jsiTimersChanged();
 __stack_pointer = $2 + 48 | 0;
}

function jslLexRegex() {
 var $0 = 0, $1 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 20 >> 2] = 0;
 label$1: {
  if ((HEAP32[46755] & 63) == 1) {
   $0 = jsvNewFromEmptyString();
   HEAP32[HEAP32[38615] + 76 >> 2] = $0;
   if (!HEAP32[HEAP32[38615] + 76 >> 2]) {
    HEAP16[HEAP32[38615] + 2 >> 1] = 0;
    break label$1;
   }
   jsvStringIteratorNew($1 + 8 | 0, HEAP32[HEAP32[38615] + 76 >> 2], 0);
   jsvStringIteratorAppend($1 + 8 | 0, 47);
  }
  jslGetNextCh();
  while (1) {
   $0 = 0;
   label$6: {
    $0 = HEAP8[HEAP32[38615]] ? HEAP8[HEAP32[38615]] != 47 : $0;
    if (!$0) {
     break label$6;
    }
    label$7: {
     if (HEAP8[HEAP32[38615]] == 92) {
      jsvStringIteratorAppend($1 + 8 | 0, HEAP8[HEAP32[38615]]);
      jslGetNextCh();
      break label$7;
     }
     if (HEAP8[HEAP32[38615]] == 10) {
      break label$6;
     }
    }
    jsvStringIteratorAppend($1 + 8 | 0, HEAP8[HEAP32[38615]]);
    jslGetNextCh();
    continue;
   }
   break;
  }
  HEAP16[HEAP32[38615] + 2 >> 1] = 135;
  label$9: {
   if (HEAP8[HEAP32[38615]] != 47) {
    $0 = HEAP32[38615];
    HEAP16[$0 + 2 >> 1] = HEAPU16[$0 + 2 >> 1] + 1;
    break label$9;
   }
   jsvStringIteratorAppend($1 + 8 | 0, 47);
   jslGetNextCh();
   while (1) {
    $0 = 1;
    label$12: {
     if (HEAP8[HEAP32[38615]] == 103) {
      break label$12;
     }
     $0 = 1;
     if (HEAP8[HEAP32[38615]] == 105) {
      break label$12;
     }
     $0 = 1;
     if (HEAP8[HEAP32[38615]] == 109) {
      break label$12;
     }
     $0 = 1;
     if (HEAP8[HEAP32[38615]] == 121) {
      break label$12;
     }
     $0 = HEAP8[HEAP32[38615]] == 117;
    }
    if ($0) {
     jsvStringIteratorAppend($1 + 8 | 0, HEAP8[HEAP32[38615]]);
     jslGetNextCh();
     continue;
    }
    break;
   }
  }
  jsvStringIteratorFree($1 + 8 | 0);
 }
 __stack_pointer = $1 + 48 | 0;
}

function graphicsFallbackScrollX($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 32 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 28 >> 2] = $0;
 HEAP32[$6 + 24 >> 2] = $1;
 HEAP32[$6 + 20 >> 2] = $2;
 HEAP32[$6 + 16 >> 2] = $3;
 HEAP32[$6 + 12 >> 2] = $4;
 HEAP32[$6 + 8 >> 2] = $5;
 label$1: {
  if (HEAP32[$6 + 24 >> 2] <= 0) {
   HEAP32[$6 >> 2] = HEAP32[$6 + 8 >> 2] + HEAP32[$6 + 24 >> 2];
   HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 12 >> 2];
   while (1) {
    if (HEAP32[$6 + 4 >> 2] <= HEAP32[$6 >> 2]) {
     $0 = HEAP32[$6 + 28 >> 2];
     $1 = HEAPU8[$0 + 52 | 0] | HEAPU8[$0 + 53 | 0] << 8 | (HEAPU8[$0 + 54 | 0] << 16 | HEAPU8[$0 + 55 | 0] << 24);
     $0 = HEAP32[$6 + 28 >> 2];
     FUNCTION_TABLE[$1 | 0](HEAP32[$6 + 28 >> 2], HEAP32[$6 + 4 >> 2], HEAP32[$6 + 16 >> 2], FUNCTION_TABLE[HEAPU8[$0 + 60 | 0] | HEAPU8[$0 + 61 | 0] << 8 | (HEAPU8[$0 + 62 | 0] << 16 | HEAPU8[$0 + 63 | 0] << 24)](HEAP32[$6 + 28 >> 2], HEAP32[$6 + 4 >> 2] - HEAP32[$6 + 24 >> 2] | 0, HEAP32[$6 + 20 >> 2]) | 0);
     HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 4 >> 2] + 1;
     continue;
    }
    break;
   }
   break label$1;
  }
  HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 8 >> 2] - HEAP32[$6 + 24 >> 2];
  while (1) {
   if (HEAP32[$6 + 4 >> 2] >= HEAP32[$6 + 12 >> 2]) {
    $0 = HEAP32[$6 + 28 >> 2];
    $1 = HEAPU8[$0 + 52 | 0] | HEAPU8[$0 + 53 | 0] << 8 | (HEAPU8[$0 + 54 | 0] << 16 | HEAPU8[$0 + 55 | 0] << 24);
    $0 = HEAP32[$6 + 28 >> 2];
    FUNCTION_TABLE[$1 | 0](HEAP32[$6 + 28 >> 2], HEAP32[$6 + 4 >> 2] + HEAP32[$6 + 24 >> 2] | 0, HEAP32[$6 + 16 >> 2], FUNCTION_TABLE[HEAPU8[$0 + 60 | 0] | HEAPU8[$0 + 61 | 0] << 8 | (HEAPU8[$0 + 62 | 0] << 16 | HEAPU8[$0 + 63 | 0] << 24)](HEAP32[$6 + 28 >> 2], HEAP32[$6 + 4 >> 2], HEAP32[$6 + 20 >> 2]) | 0);
    HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 4 >> 2] - 1;
    continue;
   }
   break;
  }
 }
 __stack_pointer = $6 + 32 | 0;
}

function lcdST7789_setCallbacks($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 if (HEAP32[85782]) {
  label$2: {
   if (!(HEAP32[85782] != 3 & HEAP32[85782] != 4)) {
    HEAP32[$1 + 24 >> 2] = HEAP32[85782] == 3 ? 14400 : 6400;
    $0 = HEAP32[$1 + 28 >> 2];
    HEAP32[$1 + 20 >> 2] = jsvObjectGetChildIfExists(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 101361);
    HEAP32[$1 + 16 >> 2] = 0;
    HEAP32[$1 + 12 >> 2] = jsvGetDataPointer(HEAP32[$1 + 20 >> 2], $1 + 16 | 0);
    jsvUnLock(HEAP32[$1 + 20 >> 2]);
    if (!(!HEAP32[$1 + 12 >> 2] | HEAPU32[$1 + 16 >> 2] < HEAPU32[$1 + 24 >> 2])) {
     $0 = HEAP32[$1 + 28 >> 2];
     $2 = HEAP32[$1 + 12 >> 2];
     HEAP8[$0 + 48 | 0] = $2;
     HEAP8[$0 + 49 | 0] = $2 >>> 8;
     HEAP8[$0 + 50 | 0] = $2 >>> 16;
     HEAP8[$0 + 51 | 0] = $2 >>> 24;
     $0 = HEAP32[$1 + 28 >> 2];
     HEAP8[$0 + 52 | 0] = 55;
     HEAP8[$0 + 53 | 0] = 2;
     HEAP8[$0 + 54 | 0] = 0;
     HEAP8[$0 + 55 | 0] = 0;
     $0 = HEAP32[$1 + 28 >> 2];
     HEAP8[$0 + 60 | 0] = 56;
     HEAP8[$0 + 61 | 0] = 2;
     HEAP8[$0 + 62 | 0] = 0;
     HEAP8[$0 + 63 | 0] = 0;
     $0 = HEAP32[$1 + 28 >> 2];
     HEAP8[$0 + 56 | 0] = 57;
     HEAP8[$0 + 57 | 0] = 2;
     HEAP8[$0 + 58 | 0] = 0;
     HEAP8[$0 + 59 | 0] = 0;
     $0 = HEAP32[$1 + 28 >> 2];
     HEAP8[$0 + 68 | 0] = 58;
     HEAP8[$0 + 69 | 0] = 2;
     HEAP8[$0 + 70 | 0] = 0;
     HEAP8[$0 + 71 | 0] = 0;
    }
    break label$2;
   }
   $0 = HEAP32[$1 + 28 >> 2];
   HEAP8[$0 + 52 | 0] = 66;
   HEAP8[$0 + 53 | 0] = 2;
   HEAP8[$0 + 54 | 0] = 0;
   HEAP8[$0 + 55 | 0] = 0;
   $0 = HEAP32[$1 + 28 >> 2];
   HEAP8[$0 + 68 | 0] = 67;
   HEAP8[$0 + 69 | 0] = 2;
   HEAP8[$0 + 70 | 0] = 0;
   HEAP8[$0 + 71 | 0] = 0;
  }
 }
 __stack_pointer = $1 + 32 | 0;
}

function tflite__MicroAllocator__AllocateVariables_28tflite__SubGraph_20const__2c_20TfLiteEvalTensor__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 40 >> 2] = $0;
 HEAP32[$3 + 36 >> 2] = $1;
 HEAP32[$3 + 32 >> 2] = $2;
 $0 = HEAP32[$3 + 40 >> 2];
 HEAP32[$3 + 28 >> 2] = 0;
 label$1: {
  while (1) {
   if (HEAPU32[$3 + 28 >> 2] < flatbuffers__Vector_flatbuffers__Offset_tflite__Tensor____size_28_29_20const(tflite__SubGraph__tensors_28_29_20const(HEAP32[$3 + 36 >> 2])) >>> 0) {
    HEAP32[$3 + 24 >> 2] = flatbuffers__Vector_flatbuffers__Offset_tflite__Tensor____Get_28unsigned_20int_29_20const(tflite__SubGraph__tensors_28_29_20const(HEAP32[$3 + 36 >> 2]), HEAP32[$3 + 28 >> 2]);
    if (tflite__Tensor__is_variable_28_29_20const(HEAP32[$3 + 24 >> 2]) & 1) {
     HEAP32[$3 + 16 >> 2] = tflite__TfLiteEvalTensorByteLength_28TfLiteEvalTensor_20const__2c_20unsigned_20long__29(HEAP32[$3 + 32 >> 2] + Math_imul(HEAP32[$3 + 28 >> 2], 12) | 0, $3 + 20 | 0);
     if (HEAP32[$3 + 16 >> 2]) {
      HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 16 >> 2];
      break label$1;
     }
     $1 = HEAP32[$0 + 4 >> 2];
     $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, HEAP32[$3 + 20 >> 2], 16) | 0;
     HEAP32[HEAP32[$3 + 32 >> 2] + Math_imul(HEAP32[$3 + 28 >> 2], 12) >> 2] = $1;
     if (!HEAP32[HEAP32[$3 + 32 >> 2] + Math_imul(HEAP32[$3 + 28 >> 2], 12) >> 2]) {
      $0 = HEAP32[$0 + 8 >> 2];
      HEAP32[$3 >> 2] = HEAP32[$3 + 20 >> 2];
      tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 107509, $3);
      HEAP32[$3 + 44 >> 2] = 1;
      break label$1;
     }
    }
    HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 28 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$3 + 44 >> 2] = 0;
 }
 __stack_pointer = $3 + 48 | 0;
 return HEAP32[$3 + 44 >> 2];
}

function jswrap_espruino_getSizeOf($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 label$1: {
  label$2: {
   if (HEAP32[$2 + 36 >> 2] <= 0) {
    break label$2;
   }
   if (!(jsvHasChildren(HEAP32[$2 + 40 >> 2]) & 1)) {
    break label$2;
   }
   HEAP32[$2 + 32 >> 2] = jsvNewEmptyArray();
   if (!HEAP32[$2 + 32 >> 2]) {
    HEAP32[$2 + 44 >> 2] = 0;
    break label$1;
   }
   jsvObjectIteratorNew($2 + 24 | 0, HEAP32[$2 + 40 >> 2]);
   while (1) {
    if (jsvObjectIteratorHasValue_13($2 + 24 | 0) & 1) {
     HEAP32[$2 + 20 >> 2] = jsvObjectIteratorGetKey_8($2 + 24 | 0);
     HEAP32[$2 + 16 >> 2] = jsvSkipName(HEAP32[$2 + 20 >> 2]);
     HEAP32[$2 + 12 >> 2] = jsvNewObject();
     if (HEAP32[$2 + 12 >> 2]) {
      jsvObjectSetChildAndUnLock(HEAP32[$2 + 12 >> 2], 105033, jsvAsString(HEAP32[$2 + 20 >> 2]));
      jsvObjectSetChildAndUnLock(HEAP32[$2 + 12 >> 2], 104290, jswrap_espruino_getSizeOf(HEAP32[$2 + 20 >> 2], 0));
      label$7: {
       if (HEAP32[$2 + 36 >> 2] <= 1) {
        break label$7;
       }
       if (!(jsvHasChildren(HEAP32[$2 + 16 >> 2]) & 1)) {
        break label$7;
       }
       jsvObjectSetChildAndUnLock(HEAP32[$2 + 12 >> 2], 104780, jswrap_espruino_getSizeOf(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 36 >> 2] - 1 | 0));
      }
      jsvArrayPushAndUnLock(HEAP32[$2 + 32 >> 2], HEAP32[$2 + 12 >> 2]);
     }
     jsvUnLock2(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 20 >> 2]);
     jsvObjectIteratorNext($2 + 24 | 0);
     continue;
    }
    break;
   }
   jsvObjectIteratorFree_13($2 + 24 | 0);
   HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
   break label$1;
  }
  HEAP32[$2 + 44 >> 2] = jsvNewFromInteger(jsvCountJsVarsUsed(HEAP32[$2 + 40 >> 2]));
 }
 __stack_pointer = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}

function jsfBankFindFileFromAddr($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer + -64 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 56 >> 2] = $0;
 HEAP32[$4 + 52 >> 2] = $1;
 HEAP32[$4 + 48 >> 2] = $2;
 HEAP32[$4 + 44 >> 2] = $3;
 HEAP32[$4 + 40 >> 2] = HEAP32[$4 + 56 >> 2];
 HEAP32[$4 + 32 >> 2] = 0;
 HEAP32[$4 + 36 >> 2] = 0;
 HEAP32[$4 + 24 >> 2] = 0;
 HEAP32[$4 + 28 >> 2] = 0;
 HEAP32[$4 + 16 >> 2] = 0;
 HEAP32[$4 + 20 >> 2] = 0;
 HEAP32[$4 + 8 >> 2] = 0;
 HEAP32[$4 + 12 >> 2] = 0;
 label$1: {
  if (jsfGetFileHeader(HEAP32[$4 + 40 >> 2], $4 + 8 | 0, 0) & 1) {
   while (1) {
    HEAP32[$4 + 4 >> 2] = (HEAP32[$4 + 40 >> 2] + 32 | 0) + jsfGetFileSize($4 + 8 | 0);
    if (!(!HEAP32[$4 + 12 >> 2] | HEAPU32[$4 + 40 >> 2] > HEAPU32[$4 + 48 >> 2] | HEAPU32[$4 + 48 >> 2] > HEAPU32[$4 + 4 >> 2])) {
     jsfGetFileHeader(HEAP32[$4 + 40 >> 2], $4 + 8 | 0, 1);
     if (HEAP32[$4 + 44 >> 2]) {
      $0 = HEAP32[$4 + 12 >> 2];
      $1 = HEAP32[$4 + 8 >> 2];
      $3 = $1;
      $2 = HEAP32[$4 + 44 >> 2];
      $1 = $2;
      HEAP32[$1 >> 2] = $3;
      HEAP32[$1 + 4 >> 2] = $0;
      $1 = HEAP32[$4 + 36 >> 2];
      $0 = HEAP32[$4 + 32 >> 2];
      $3 = $0;
      $0 = $2;
      HEAP32[$0 + 24 >> 2] = $3;
      HEAP32[$0 + 28 >> 2] = $1;
      $0 = HEAP32[$4 + 28 >> 2];
      $1 = HEAP32[$4 + 24 >> 2];
      $3 = $1;
      $1 = $2;
      HEAP32[$1 + 16 >> 2] = $3;
      HEAP32[$1 + 20 >> 2] = $0;
      $1 = HEAP32[$4 + 20 >> 2];
      $0 = HEAP32[$4 + 16 >> 2];
      $3 = $0;
      $0 = $2;
      HEAP32[$0 + 8 >> 2] = $3;
      HEAP32[$0 + 12 >> 2] = $1;
     }
     HEAP32[$4 + 60 >> 2] = HEAP32[$4 + 40 >> 2] + 32;
     break label$1;
    }
    if (jsfGetNextFileHeader($4 + 40 | 0, $4 + 8 | 0, 3) & 1) {
     continue;
    }
    break;
   }
  }
  HEAP32[$4 + 60 >> 2] = 0;
 }
 __stack_pointer = $4 - -64 | 0;
 return HEAP32[$4 + 60 >> 2];
}

function vfGetCharFromPtr($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0;
 $8 = __stack_pointer - 256 | 0;
 __stack_pointer = $8;
 HEAP32[$8 + 252 >> 2] = $0;
 HEAP32[$8 + 248 >> 2] = $1;
 HEAP32[$8 + 244 >> 2] = $2;
 HEAP32[$8 + 240 >> 2] = $3;
 HEAP32[$8 + 236 >> 2] = $4;
 HEAP32[$8 + 232 >> 2] = $5;
 HEAP32[$8 + 228 >> 2] = $6;
 HEAP32[$8 + 224 >> 2] = $7;
 HEAP32[$8 + 244 >> 2] = (HEAP32[$8 + 244 >> 2] << 4) - 8;
 HEAP32[$8 + 240 >> 2] = (HEAP32[$8 + 240 >> 2] << 4) - 8;
 HEAP32[$8 + 220 >> 2] = 0;
 HEAP32[$8 + 216 >> 2] = 0;
 while (1) {
  if (HEAP32[$8 + 216 >> 2] < HEAP32[$8 + 224 >> 2]) {
   HEAP32[$8 + 24 >> 2] = vfGetPolyPtr(HEAPU8[HEAP32[$8 + 228 >> 2] + HEAP32[$8 + 216 >> 2] | 0], $8 + 28 | 0);
   HEAP32[$8 + 20 >> 2] = 0;
   while (1) {
    if (HEAP32[$8 + 20 >> 2] < HEAP32[$8 + 28 >> 2]) {
     HEAP8[$8 + 19 | 0] = HEAPU8[HEAP32[$8 + 24 >> 2] + HEAP32[$8 + 20 >> 2] | 0];
     HEAP32[$8 + 12 >> 2] = HEAPU8[$8 + 19 | 0] % 13;
     HEAP32[$8 + 8 >> 2] = HEAPU8[$8 + 19 | 0] / 13;
     if (HEAP32[$8 + 12 >> 2] > HEAP32[$8 + 220 >> 2]) {
      HEAP32[$8 + 220 >> 2] = HEAP32[$8 + 12 >> 2];
     }
     HEAP16[($8 + 32 | 0) + (HEAP32[$8 + 20 >> 2] << 2) >> 1] = HEAP32[$8 + 244 >> 2] + ((Math_imul(HEAP32[$8 + 12 >> 2], HEAP32[$8 + 236 >> 2]) << 4) / 16 | 0);
     HEAP16[((HEAP32[$8 + 20 >> 2] << 2) + $8 | 0) + 34 >> 1] = HEAP32[$8 + 240 >> 2] + ((Math_imul(HEAP32[$8 + 232 >> 2], HEAP32[$8 + 8 >> 2] - 2 | 0) << 4) / 16 | 0);
     HEAP32[$8 + 20 >> 2] = HEAP32[$8 + 20 >> 2] + 1;
     continue;
    }
    break;
   }
   FUNCTION_TABLE[HEAP32[$8 + 252 >> 2]](HEAP32[$8 + 248 >> 2], HEAP32[$8 + 28 >> 2], $8 + 32 | 0);
   HEAP32[$8 + 216 >> 2] = HEAP32[$8 + 216 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $8 + 256 | 0;
 return ((Math_imul(HEAP32[$8 + 236 >> 2], HEAP32[$8 + 220 >> 2] + 2 | 0) << 4) / 16 | 0) + 7 >> 4;
}

function jshFlashWriteAligned($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 label$1: {
  if (!(HEAPU32[$3 + 24 >> 2] < 134217728 | HEAPU32[$3 + 24 >> 2] >= 138412032)) {
   jshFlashWrite(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
   break label$1;
  }
  HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 28 >> 2];
  HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 24 >> 2] & 3;
  if (HEAP32[$3 + 12 >> 2]) {
   jshFlashRead($3 + 8 | 0, HEAP32[$3 + 24 >> 2] - HEAP32[$3 + 12 >> 2] | 0, 4);
   HEAP32[$3 + 4 >> 2] = 4 - HEAP32[$3 + 12 >> 2];
   if (HEAPU32[$3 + 4 >> 2] > HEAPU32[$3 + 20 >> 2]) {
    HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 20 >> 2];
   }
   __memcpy(HEAP32[$3 + 12 >> 2] + ($3 + 8 | 0) | 0, HEAP32[$3 + 16 >> 2], HEAP32[$3 + 4 >> 2]);
   HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 4 >> 2] + HEAP32[$3 + 16 >> 2];
   jshFlashWrite($3 + 8 | 0, HEAP32[$3 + 24 >> 2] - HEAP32[$3 + 12 >> 2] | 0, 4);
   HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 4 >> 2] + HEAP32[$3 + 24 >> 2];
   if (HEAPU32[$3 + 4 >> 2] >= HEAPU32[$3 + 20 >> 2]) {
    break label$1;
   }
   HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 20 >> 2] - HEAP32[$3 + 4 >> 2];
  }
  HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 20 >> 2] & 3;
  HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 20 >> 2] - HEAP32[$3 + 12 >> 2];
  if (HEAP32[$3 + 20 >> 2]) {
   jshFlashWrite(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
  }
  HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 20 >> 2] + HEAP32[$3 + 24 >> 2];
  HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 20 >> 2] + HEAP32[$3 + 16 >> 2];
  if (!HEAP32[$3 + 12 >> 2]) {
   break label$1;
  }
  jshFlashRead($3, HEAP32[$3 + 24 >> 2], 4);
  __memcpy($3, HEAP32[$3 + 16 >> 2], HEAP32[$3 + 12 >> 2]);
  jshFlashWrite($3, HEAP32[$3 + 24 >> 2], 4);
 }
 __stack_pointer = $3 + 32 | 0;
}

function tflite__ops__micro__pooling___28anonymous_20namespace_29__AverageEvalFloat_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20TfLitePoolParams_20const__2c_20tflite__ops__micro__pooling___28anonymous_20namespace_29__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 128 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 124 >> 2] = $0;
 HEAP32[$6 + 120 >> 2] = $1;
 HEAP32[$6 + 116 >> 2] = $2;
 HEAP32[$6 + 112 >> 2] = $3;
 HEAP32[$6 + 108 >> 2] = $4;
 HEAP32[$6 + 104 >> 2] = $5;
 HEAP32[$6 + 68 >> 2] = HEAP32[HEAP32[$6 + 116 >> 2] + 8 >> 2];
 HEAP32[$6 + 72 >> 2] = HEAP32[HEAP32[$6 + 116 >> 2] + 4 >> 2];
 HEAP32[$6 + 76 >> 2] = HEAP32[HEAP32[$6 + 116 >> 2] + 16 >> 2];
 HEAP32[$6 + 80 >> 2] = HEAP32[HEAP32[$6 + 116 >> 2] + 12 >> 2];
 HEAP16[$6 + 60 >> 1] = HEAP32[HEAP32[$6 + 112 >> 2] + 4 >> 2];
 HEAP16[$6 + 58 >> 1] = HEAP32[HEAP32[$6 + 112 >> 2] >> 2];
 HEAPF32[$6 + 92 >> 2] = HEAPF32[HEAP32[$6 + 112 >> 2] + 24 >> 2];
 HEAPF32[$6 + 96 >> 2] = HEAPF32[HEAP32[$6 + 112 >> 2] + 28 >> 2];
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($6 + 32 | 0, HEAP32[$6 + 108 >> 2]);
 $0 = float_20const__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor_20const__29(HEAP32[$6 + 108 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($6 + 8 | 0, HEAP32[$6 + 104 >> 2]);
 tflite__reference_ops__AveragePool_28tflite__PoolParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($6 + 56 | 0, $6 + 32 | 0, $0, $6 + 8 | 0, float__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor__29(HEAP32[$6 + 104 >> 2]));
 tflite__RuntimeShape___RuntimeShape_28_29($6 + 8 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($6 + 32 | 0);
 __stack_pointer = $6 + 128 | 0;
}

function tflite__MicroInterpreter__MicroInterpreter_28tflite__Model_20const__2c_20tflite__MicroOpResolver_20const__2c_20unsigned_20char__2c_20unsigned_20long_2c_20tflite__ErrorReporter__2c_20tflite__Profiler__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0;
 $7 = __stack_pointer - 32 | 0;
 __stack_pointer = $7;
 HEAP32[$7 + 28 >> 2] = $0;
 HEAP32[$7 + 24 >> 2] = $1;
 HEAP32[$7 + 20 >> 2] = $2;
 HEAP32[$7 + 16 >> 2] = $3;
 HEAP32[$7 + 12 >> 2] = $4;
 HEAP32[$7 + 8 >> 2] = $5;
 HEAP32[$7 + 4 >> 2] = $6;
 $0 = HEAP32[$7 + 28 >> 2];
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = HEAP32[$7 + 24 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$7 + 20 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$7 + 8 >> 2];
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP32[$0 + 36 >> 2] = 0;
 HEAP32[$0 + 40 >> 2] = 0;
 HEAP32[$0 + 44 >> 2] = 0;
 HEAP32[$0 + 48 >> 2] = 0;
 HEAP32[$0 + 52 >> 2] = 0;
 HEAP32[$0 + 56 >> 2] = 0;
 HEAP32[$0 + 60 >> 2] = 0;
 HEAP8[$0 + 64 | 0] = 0;
 HEAP32[$0 + 68 >> 2] = 0;
 HEAP32[$0 + 72 >> 2] = 0;
 HEAP32[$0 + 76 >> 2] = 0;
 HEAP32[$0 + 80 >> 2] = 0;
 HEAP32[$0 + 84 >> 2] = 0;
 HEAP32[$0 + 88 >> 2] = 0;
 HEAP32[$0 + 92 >> 2] = 0;
 HEAP32[$0 + 96 >> 2] = 0;
 HEAP32[$0 + 100 >> 2] = 0;
 HEAP32[$0 + 104 >> 2] = tflite__MicroAllocator__Create_28unsigned_20char__2c_20unsigned_20long_2c_20tflite__ErrorReporter__29(HEAP32[$7 + 16 >> 2], HEAP32[$7 + 12 >> 2], HEAP32[$7 + 8 >> 2]);
 HEAP8[$0 + 108 | 0] = 0;
 HEAP32[$0 + 112 >> 2] = 1;
 HEAP32[$0 + 120 >> 2] = 0;
 FUNCTION_TABLE[642]($0 + 124 | 0, HEAP32[$0 + 12 >> 2], HEAP32[$0 + 104 >> 2], HEAP32[$7 + 24 >> 2]) | 0;
 HEAP32[$0 + 144 >> 2] = 0;
 HEAP32[$0 + 148 >> 2] = 0;
 tflite__MicroInterpreter__Init_28tflite__Profiler__29($0, HEAP32[$7 + 4 >> 2]);
 __stack_pointer = $7 + 32 | 0;
 return $0;
}

function jsvNewStringOfLength($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1: {
  if (HEAPU32[$2 + 24 >> 2] > 17) {
   HEAP32[$2 + 16 >> 2] = jsvNewFlatStringOfLength(HEAP32[$2 + 24 >> 2]);
   if (HEAP32[$2 + 16 >> 2]) {
    if (HEAP32[$2 + 20 >> 2]) {
     jsvSetString(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 24 >> 2]);
    }
    HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 16 >> 2];
    break label$1;
   }
  }
  HEAP32[$2 + 12 >> 2] = jsvNewWithFlags(28);
  if (!HEAP32[$2 + 12 >> 2]) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 8 >> 2] = jsvLockAgain(HEAP32[$2 + 12 >> 2]);
  while (1) {
   label$7: {
    HEAP32[$2 + 4 >> 2] = jsvGetMaxCharactersInVar(HEAP32[$2 + 8 >> 2]);
    if (HEAPU32[$2 + 4 >> 2] >= HEAPU32[$2 + 24 >> 2]) {
     if (HEAP32[$2 + 20 >> 2]) {
      __memcpy(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 24 >> 2]);
     }
     jsvSetCharactersInVar(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 24 >> 2]);
     break label$7;
    }
    if (HEAP32[$2 + 20 >> 2]) {
     __memcpy(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 4 >> 2]);
     HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 4 >> 2] + HEAP32[$2 + 20 >> 2];
    }
    jsvSetCharactersInVar(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]);
    HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 24 >> 2] - HEAP32[$2 + 4 >> 2];
    HEAP32[$2 >> 2] = jsvNewWithFlags(40);
    if (!HEAP32[$2 >> 2]) {
     break label$7;
    }
    jsvSetLastChild(HEAP32[$2 + 8 >> 2], jsvGetRef(HEAP32[$2 >> 2]) & 65535);
    jsvUnLock(HEAP32[$2 + 8 >> 2]);
    HEAP32[$2 + 8 >> 2] = HEAP32[$2 >> 2];
    continue;
   }
   break;
  }
  jsvUnLock(HEAP32[$2 + 8 >> 2]);
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jswrap_date_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 80 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 76 >> 2] = $0;
 HEAPF64[$1 + 64 >> 3] = 0;
 label$1: {
  if (!jsvGetArrayLength(HEAP32[$1 + 76 >> 2])) {
   HEAPF64[$1 + 64 >> 3] = jswrap_date_now();
   break label$1;
  }
  label$3: {
   if ((jsvGetArrayLength(HEAP32[$1 + 76 >> 2]) | 0) == 1) {
    HEAP32[$1 + 60 >> 2] = jsvGetArrayItem(HEAP32[$1 + 76 >> 2], 0);
    label$5: {
     if (jsvIsNumeric(HEAP32[$1 + 60 >> 2]) & 1) {
      HEAPF64[$1 + 64 >> 3] = jsvGetFloat(HEAP32[$1 + 60 >> 2]);
      break label$5;
     }
     label$7: {
      if (jsvIsString(HEAP32[$1 + 60 >> 2]) & 1) {
       HEAPF64[$1 + 64 >> 3] = jswrap_date_parse(HEAP32[$1 + 60 >> 2]);
       break label$7;
      }
      HEAP32[$1 >> 2] = HEAP32[$1 + 60 >> 2];
      jsExceptionHere(3, 100894, $1);
     }
    }
    jsvUnLock(HEAP32[$1 + 60 >> 2]);
    break label$3;
   }
   HEAP32[$1 + 52 >> 2] = jsvGetIntegerAndUnLock(jsvGetArrayItem(HEAP32[$1 + 76 >> 2], 0));
   HEAP32[$1 + 48 >> 2] = jsvGetIntegerAndUnLock(jsvGetArrayItem(HEAP32[$1 + 76 >> 2], 1));
   HEAP32[$1 + 44 >> 2] = jsvGetIntegerAndUnLock(jsvGetArrayItem(HEAP32[$1 + 76 >> 2], 2));
   HEAP32[$1 + 8 >> 2] = fromCalendarDate($1 + 40 | 0);
   HEAP32[$1 + 24 >> 2] = jsvGetIntegerAndUnLock(jsvGetArrayItem(HEAP32[$1 + 76 >> 2], 3));
   HEAP32[$1 + 20 >> 2] = jsvGetIntegerAndUnLock(jsvGetArrayItem(HEAP32[$1 + 76 >> 2], 4));
   HEAP32[$1 + 16 >> 2] = jsvGetIntegerAndUnLock(jsvGetArrayItem(HEAP32[$1 + 76 >> 2], 5));
   HEAP32[$1 + 12 >> 2] = jsvGetIntegerAndUnLock(jsvGetArrayItem(HEAP32[$1 + 76 >> 2], 6));
   setCorrectTimeZone($1 + 8 | 0);
   HEAPF64[$1 + 64 >> 3] = fromTimeInDay($1 + 8 | 0);
  }
 }
 $0 = jswrap_date_from_milliseconds(HEAPF64[$1 + 64 >> 3]);
 __stack_pointer = $1 + 80 | 0;
 return $0 | 0;
}

function jswrap_serial_setup($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP32[$3 + 36 >> 2] = $2;
 label$1: {
  if (!(jsvIsObject(HEAP32[$3 + 44 >> 2]) & 1)) {
   break label$1;
  }
  HEAP8[$3 + 35 | 0] = jsiGetDeviceFromClass(HEAP32[$3 + 44 >> 2]);
  label$2: {
   if (jsvIsUndefined(HEAP32[$3 + 36 >> 2]) & 1) {
    HEAP32[$3 + 36 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 44 >> 2], 100220);
    break label$2;
   }
   jsvLockAgain(HEAP32[$3 + 36 >> 2]);
  }
  HEAP8[$3 + 15 | 0] = jsserialPopulateUSARTInfo($3 + 16 | 0, HEAP32[$3 + 40 >> 2], HEAP32[$3 + 36 >> 2]) & 1;
  if (!(HEAP8[$3 + 15 | 0] & 1)) {
   jsvUnLock(HEAP32[$3 + 36 >> 2]);
   break label$1;
  }
  jsvObjectSetChildAndUnLock(HEAP32[$3 + 44 >> 2], 104661, jsvNewFromInteger(HEAPU8[$3 + 16 | 0] | HEAPU8[$3 + 17 | 0] << 8 | (HEAPU8[$3 + 18 | 0] << 16 | HEAPU8[$3 + 19 | 0] << 24)));
  label$5: {
   if (HEAP32[$3 + 36 >> 2]) {
    jsvObjectSetChildAndUnLock(HEAP32[$3 + 44 >> 2], 100220, HEAP32[$3 + 36 >> 2]);
    break label$5;
   }
   jsvObjectRemoveChild(HEAP32[$3 + 44 >> 2], 100220);
  }
  if (!(HEAPU8[$3 + 35 | 0] < 17 | HEAPU8[$3 + 35 | 0] > 22)) {
   if (!(HEAPU8[$3 + 35 | 0] < 22 | HEAPU8[$3 + 35 | 0] > 22)) {
    jshUSARTSetup(HEAPU8[$3 + 35 | 0], $3 + 16 | 0);
   }
   break label$1;
  }
  if (!HEAPU8[$3 + 35 | 0]) {
   if (HEAPU8[$3 + 21 | 0] != 255) {
    jshPinSetState(HEAPU8[$3 + 21 | 0], 1);
    jshPinOutput(HEAPU8[$3 + 21 | 0], 1);
   }
   if (HEAPU8[$3 + 20 | 0] != 255) {
    jshPinSetState(HEAPU8[$3 + 20 | 0], 5);
    jsserialEventCallbackInit(HEAP32[$3 + 44 >> 2], $3 + 16 | 0);
   }
   if (HEAPU8[$3 + 22 | 0] != 255) {
    jsExceptionHere(1, 97995, 0);
   }
  }
 }
 __stack_pointer = $3 + 48 | 0;
}

function tflite__ops__micro__reshape__Prepare_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 label$1: {
  label$2: {
   if ((tflite__NumInputs_28TfLiteNode_20const__29(HEAP32[$2 + 36 >> 2]) | 0) == 1) {
    break label$2;
   }
   if ((tflite__NumInputs_28TfLiteNode_20const__29(HEAP32[$2 + 36 >> 2]) | 0) == 2) {
    break label$2;
   }
   $0 = HEAP32[HEAP32[$2 + 40 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 40 >> 2];
   HEAP32[$2 + 32 >> 2] = 111110;
   FUNCTION_TABLE[$0 | 0]($1, 111890, $2 + 32 | 0);
   HEAP32[$2 + 44 >> 2] = 1;
   break label$1;
  }
  if ((tflite__NumOutputs_28TfLiteNode_20const__29(HEAP32[$2 + 36 >> 2]) | 0) != 1) {
   $0 = HEAP32[HEAP32[$2 + 40 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 40 >> 2];
   $3 = tflite__NumOutputs_28TfLiteNode_20const__29(HEAP32[$2 + 36 >> 2]);
   HEAP32[$2 + 12 >> 2] = 1;
   HEAP32[$2 + 8 >> 2] = $3;
   HEAP32[$2 + 4 >> 2] = 111277;
   HEAP32[$2 >> 2] = 126257;
   FUNCTION_TABLE[$0 | 0]($1, 126505, $2);
   HEAP32[$2 + 44 >> 2] = 1;
   break label$1;
  }
  if (tflite__ops__micro__reshape__ReshapeOutput_28TfLiteContext__2c_20TfLiteNode__29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2])) {
   $0 = HEAP32[HEAP32[$2 + 40 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 40 >> 2];
   $3 = tflite__ops__micro__reshape__ReshapeOutput_28TfLiteContext__2c_20TfLiteNode__29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
   HEAP32[$2 + 28 >> 2] = 0;
   HEAP32[$2 + 24 >> 2] = $3;
   HEAP32[$2 + 20 >> 2] = 103132;
   HEAP32[$2 + 16 >> 2] = 126290;
   FUNCTION_TABLE[$0 | 0]($1, 126505, $2 + 16 | 0);
   HEAP32[$2 + 44 >> 2] = 1;
   break label$1;
  }
  HEAP32[$2 + 44 >> 2] = 0;
 }
 __stack_pointer = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}

function jsfSaveBootCodeToFlash($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 208 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 204 >> 2] = $0;
 HEAP8[$2 + 203 | 0] = $1;
 jsfNameFromString($2 + 168 | 0, 105438);
 HEAP32[$2 + 64 >> 2] = HEAP32[$2 + 192 >> 2];
 $0 = HEAP32[$2 + 188 >> 2];
 $1 = HEAP32[$2 + 184 >> 2];
 HEAP32[$2 + 56 >> 2] = $1;
 HEAP32[$2 + 60 >> 2] = $0;
 $1 = HEAP32[$2 + 180 >> 2];
 $0 = HEAP32[$2 + 176 >> 2];
 HEAP32[$2 + 48 >> 2] = $0;
 HEAP32[$2 + 52 >> 2] = $1;
 $0 = HEAP32[$2 + 172 >> 2];
 $1 = HEAP32[$2 + 168 >> 2];
 HEAP32[$2 + 40 >> 2] = $1;
 HEAP32[$2 + 44 >> 2] = $0;
 jsfEraseFile($2 + 40 | 0);
 jsfNameFromString($2 + 136 | 0, 97488);
 HEAP32[$2 + 96 >> 2] = HEAP32[$2 + 160 >> 2];
 $1 = HEAP32[$2 + 156 >> 2];
 $0 = HEAP32[$2 + 152 >> 2];
 HEAP32[$2 + 88 >> 2] = $0;
 HEAP32[$2 + 92 >> 2] = $1;
 $0 = HEAP32[$2 + 148 >> 2];
 $1 = HEAP32[$2 + 144 >> 2];
 HEAP32[$2 + 80 >> 2] = $1;
 HEAP32[$2 + 84 >> 2] = $0;
 $1 = HEAP32[$2 + 140 >> 2];
 $0 = HEAP32[$2 + 136 >> 2];
 HEAP32[$2 + 72 >> 2] = $0;
 HEAP32[$2 + 76 >> 2] = $1;
 jsfEraseFile($2 + 72 | 0);
 label$1: {
  if (jsvIsUndefined(HEAP32[$2 + 204 >> 2]) & 1) {
   break label$1;
  }
  if (!jsvGetLength(HEAP32[$2 + 204 >> 2])) {
   break label$1;
  }
  jsfNameFromString($2 + 104 | 0, HEAP8[$2 + 203 | 0] & 1 ? 97488 : 105438);
  $3 = HEAP32[$2 + 204 >> 2];
  HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 128 >> 2];
  $0 = HEAP32[$2 + 124 >> 2];
  $1 = HEAP32[$2 + 120 >> 2];
  HEAP32[$2 + 24 >> 2] = $1;
  HEAP32[$2 + 28 >> 2] = $0;
  $1 = HEAP32[$2 + 116 >> 2];
  $0 = HEAP32[$2 + 112 >> 2];
  HEAP32[$2 + 16 >> 2] = $0;
  HEAP32[$2 + 20 >> 2] = $1;
  $0 = HEAP32[$2 + 108 >> 2];
  $1 = HEAP32[$2 + 104 >> 2];
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 12 >> 2] = $0;
  jsfWriteFile($2 + 8 | 0, $3, 0, 0, 0);
 }
 __stack_pointer = $2 + 208 | 0;
}

function jswrap_array_reverse($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 144 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 136 >> 2] = $0;
 label$1: {
  label$2: {
   if (jsvIsIterable(HEAP32[$1 + 136 >> 2]) & 1) {
    if (!(jsvIsObject(HEAP32[$1 + 136 >> 2]) & 1)) {
     break label$2;
    }
   }
   HEAP32[$1 + 140 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 132 >> 2] = 0;
  label$4: {
   if (jsvIsArray(HEAP32[$1 + 136 >> 2]) & 1) {
    jsvIteratorNew($1 + 72 | 0, HEAP32[$1 + 136 >> 2], 0);
    while (1) {
     if (jsvIteratorHasElement($1 + 72 | 0) & 1) {
      HEAP32[$1 + 68 >> 2] = jsvIteratorGetKey($1 + 72 | 0);
      if (jsvIsInt(HEAP32[$1 + 68 >> 2]) & 1) {
       HEAP32[$1 + 132 >> 2] = HEAP32[$1 + 132 >> 2] + 1;
      }
      jsvUnLock(HEAP32[$1 + 68 >> 2]);
      jsvIteratorNext($1 + 72 | 0);
      continue;
     }
     break;
    }
    jsvIteratorFree($1 + 72 | 0);
    break label$4;
   }
   HEAP32[$1 + 132 >> 2] = jsvGetLength(HEAP32[$1 + 136 >> 2]);
  }
  jsvIteratorNew($1 + 8 | 0, HEAP32[$1 + 136 >> 2], 0);
  if (HEAP32[$1 + 132 >> 2] > 1) {
   _jswrap_array_reverse_block(HEAP32[$1 + 136 >> 2], $1 + 8 | 0, HEAP32[$1 + 132 >> 2]);
  }
  if (jsvIsArray(HEAP32[$1 + 136 >> 2]) & 1) {
   HEAP32[$1 + 4 >> 2] = jsvGetArrayLength(HEAP32[$1 + 136 >> 2]) - 1;
   while (1) {
    if (jsvIteratorHasElement($1 + 8 | 0) & 1) {
     HEAP32[$1 >> 2] = jsvIteratorGetKey($1 + 8 | 0);
     if (jsvIsInt(HEAP32[$1 >> 2]) & 1) {
      jsvSetInteger(HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2] - jsvGetInteger(HEAP32[$1 >> 2]) | 0);
     }
     jsvUnLock(HEAP32[$1 >> 2]);
     jsvIteratorNext($1 + 8 | 0);
     continue;
    }
    break;
   }
  }
  jsvIteratorFree($1 + 8 | 0);
  HEAP32[$1 + 140 >> 2] = jsvLockAgain(HEAP32[$1 + 136 >> 2]);
 }
 __stack_pointer = $1 + 144 | 0;
 return HEAP32[$1 + 140 >> 2];
}

function find_longest_match($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 48 | 0;
 HEAP32[$5 + 40 >> 2] = $0;
 HEAP16[$5 + 38 >> 1] = $1;
 HEAP16[$5 + 36 >> 1] = $2;
 HEAP16[$5 + 34 >> 1] = $3;
 HEAP32[$5 + 28 >> 2] = $4;
 HEAP32[$5 + 24 >> 2] = HEAP32[$5 + 40 >> 2] + 15;
 HEAP16[$5 + 22 >> 1] = 0;
 HEAP16[$5 + 20 >> 1] = 65535;
 HEAP16[$5 + 18 >> 1] = 0;
 HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 24 >> 2] + HEAPU16[$5 + 36 >> 1];
 HEAP16[$5 + 10 >> 1] = HEAPU16[$5 + 36 >> 1] - 1;
 while (1) {
  label$2: {
   if ((HEAP16[$5 + 10 >> 1] - HEAP16[$5 + 38 >> 1] | 0) < 0) {
    break label$2;
   }
   HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 24 >> 2] + HEAP16[$5 + 10 >> 1];
   if (!(HEAPU8[HEAP32[$5 + 4 >> 2] + HEAPU16[$5 + 22 >> 1] | 0] != HEAPU8[HEAP32[$5 + 12 >> 2] + HEAPU16[$5 + 22 >> 1] | 0] | HEAPU8[HEAP32[$5 + 4 >> 2]] != HEAPU8[HEAP32[$5 + 12 >> 2]])) {
    HEAP16[$5 + 18 >> 1] = 1;
    while (1) {
     if (!(HEAPU8[HEAP32[$5 + 4 >> 2] + HEAPU16[$5 + 18 >> 1] | 0] != HEAPU8[HEAP32[$5 + 12 >> 2] + HEAPU16[$5 + 18 >> 1] | 0] | HEAPU16[$5 + 18 >> 1] >= HEAPU16[$5 + 34 >> 1])) {
      HEAP16[$5 + 18 >> 1] = HEAPU16[$5 + 18 >> 1] + 1;
      continue;
     }
     break;
    }
    if (HEAPU16[$5 + 18 >> 1] > HEAPU16[$5 + 22 >> 1]) {
     HEAP16[$5 + 22 >> 1] = HEAPU16[$5 + 18 >> 1];
     HEAP16[$5 + 20 >> 1] = HEAPU16[$5 + 10 >> 1];
     if (HEAPU16[$5 + 18 >> 1] == HEAPU16[$5 + 34 >> 1]) {
      break label$2;
     }
    }
   }
   HEAP16[$5 + 10 >> 1] = HEAPU16[$5 + 10 >> 1] - 1;
   continue;
  }
  break;
 }
 HEAP32[$5 >> 2] = 15;
 label$7: {
  if (HEAPU16[$5 + 22 >> 1] > 1) {
   HEAP16[HEAP32[$5 + 28 >> 2] >> 1] = HEAPU16[$5 + 22 >> 1];
   HEAP16[$5 + 46 >> 1] = HEAPU16[$5 + 36 >> 1] - HEAPU16[$5 + 20 >> 1];
   break label$7;
  }
  HEAP16[$5 + 46 >> 1] = 65535;
 }
 return HEAPU16[$5 + 46 >> 1];
}

function tflite__ops__micro__pooling___28anonymous_20namespace_29__MaxEvalFloat_28TfLiteContext__2c_20TfLiteNode__2c_20TfLitePoolParams__2c_20tflite__ops__micro__pooling___28anonymous_20namespace_29__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 128 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 124 >> 2] = $0;
 HEAP32[$6 + 120 >> 2] = $1;
 HEAP32[$6 + 116 >> 2] = $2;
 HEAP32[$6 + 112 >> 2] = $3;
 HEAP32[$6 + 108 >> 2] = $4;
 HEAP32[$6 + 104 >> 2] = $5;
 HEAP32[$6 + 68 >> 2] = HEAP32[HEAP32[$6 + 116 >> 2] + 8 >> 2];
 HEAP32[$6 + 72 >> 2] = HEAP32[HEAP32[$6 + 116 >> 2] + 4 >> 2];
 HEAP32[$6 + 76 >> 2] = HEAP32[HEAP32[$6 + 116 >> 2] + 16 >> 2];
 HEAP32[$6 + 80 >> 2] = HEAP32[HEAP32[$6 + 116 >> 2] + 12 >> 2];
 HEAP16[$6 + 60 >> 1] = HEAP32[HEAP32[$6 + 112 >> 2] + 4 >> 2];
 HEAP16[$6 + 58 >> 1] = HEAP32[HEAP32[$6 + 112 >> 2] >> 2];
 HEAPF32[$6 + 92 >> 2] = HEAPF32[HEAP32[$6 + 112 >> 2] + 24 >> 2];
 HEAPF32[$6 + 96 >> 2] = HEAPF32[HEAP32[$6 + 112 >> 2] + 28 >> 2];
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($6 + 32 | 0, HEAP32[$6 + 108 >> 2]);
 $0 = float_20const__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor_20const__29(HEAP32[$6 + 108 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($6 + 8 | 0, HEAP32[$6 + 104 >> 2]);
 tflite__reference_ops__MaxPool_28tflite__PoolParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($6 + 56 | 0, $6 + 32 | 0, $0, $6 + 8 | 0, float__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor__29(HEAP32[$6 + 104 >> 2]));
 tflite__RuntimeShape___RuntimeShape_28_29($6 + 8 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($6 + 32 | 0);
 __stack_pointer = $6 + 128 | 0;
}

function __stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 $3 = HEAP32[$0 + 28 >> 2];
 HEAP32[$4 + 16 >> 2] = $3;
 $5 = HEAP32[$0 + 20 >> 2];
 HEAP32[$4 + 28 >> 2] = $2;
 HEAP32[$4 + 24 >> 2] = $1;
 $1 = $5 - $3 | 0;
 HEAP32[$4 + 20 >> 2] = $1;
 $7 = $1 + $2 | 0;
 $3 = $4 + 16 | 0;
 $8 = 2;
 label$1: {
  label$2: {
   label$3: {
    label$4: {
     if (__wasi_syscall_ret(__wasi_fd_write(HEAP32[$0 + 60 >> 2], $4 + 16 | 0, 2, $4 + 12 | 0) | 0)) {
      $5 = $3;
      break label$4;
     }
     while (1) {
      $1 = HEAP32[$4 + 12 >> 2];
      if (($7 | 0) == ($1 | 0)) {
       break label$3;
      }
      if (($1 | 0) < 0) {
       $5 = $3;
       break label$2;
      }
      $6 = HEAP32[$3 + 4 >> 2];
      $9 = $6 >>> 0 < $1 >>> 0;
      $5 = ($9 << 3) + $3 | 0;
      $6 = $1 - ($9 ? $6 : 0) | 0;
      HEAP32[$5 >> 2] = $6 + HEAP32[$5 >> 2];
      $3 = ($9 ? 12 : 4) + $3 | 0;
      HEAP32[$3 >> 2] = HEAP32[$3 >> 2] - $6;
      $7 = $7 - $1 | 0;
      $3 = $5;
      $8 = $8 - $9 | 0;
      if (!__wasi_syscall_ret(__wasi_fd_write(HEAP32[$0 + 60 >> 2], $3 | 0, $8 | 0, $4 + 12 | 0) | 0)) {
       continue;
      }
      break;
     }
    }
    if (($7 | 0) != -1) {
     break label$2;
    }
   }
   $1 = HEAP32[$0 + 44 >> 2];
   HEAP32[$0 + 28 >> 2] = $1;
   HEAP32[$0 + 20 >> 2] = $1;
   HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 48 >> 2] + $1;
   $1 = $2;
   break label$1;
  }
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32;
  $1 = 0;
  if (($8 | 0) == 2) {
   break label$1;
  }
  $1 = $2 - HEAP32[$5 + 4 >> 2] | 0;
 }
 __stack_pointer = $4 + 32 | 0;
 return $1 | 0;
}

function jswrap_espruino_convolve($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 176 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 164 >> 2] = $0;
 HEAP32[$3 + 160 >> 2] = $1;
 HEAP32[$3 + 156 >> 2] = $2;
 label$1: {
  label$2: {
   if (jsvIsIterable(HEAP32[$3 + 164 >> 2]) & 1) {
    if (jsvIsIterable(HEAP32[$3 + 160 >> 2]) & 1) {
     break label$2;
    }
   }
   $0 = HEAP32[$3 + 164 >> 2];
   HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 160 >> 2];
   HEAP32[$3 >> 2] = $0;
   jsExceptionHere(1, 99488, $3);
   HEAPF64[$3 + 168 >> 3] = nan;
   break label$1;
  }
  HEAPF64[$3 + 144 >> 3] = 0;
  jsvIteratorNew($3 + 80 | 0, HEAP32[$3 + 164 >> 2], 1);
  jsvIteratorNew($3 + 16 | 0, HEAP32[$3 + 160 >> 2], 1);
  HEAP32[$3 + 12 >> 2] = jsvGetLength(HEAP32[$3 + 160 >> 2]);
  HEAP32[$3 + 156 >> 2] = HEAP32[$3 + 156 >> 2] % HEAP32[$3 + 12 >> 2];
  if (HEAP32[$3 + 156 >> 2] < 0) {
   HEAP32[$3 + 156 >> 2] = HEAP32[$3 + 12 >> 2] + HEAP32[$3 + 156 >> 2];
  }
  while (1) {
   $0 = HEAP32[$3 + 156 >> 2];
   HEAP32[$3 + 156 >> 2] = $0 - 1;
   if (($0 | 0) > 0) {
    jsvIteratorNext($3 + 16 | 0);
    continue;
   }
   break;
  }
  while (1) {
   if (jsvIteratorHasElement($3 + 80 | 0) & 1) {
    HEAPF64[$3 + 144 >> 3] = jsvIteratorGetFloatValue($3 + 80 | 0) * jsvIteratorGetFloatValue($3 + 16 | 0) + HEAPF64[$3 + 144 >> 3];
    jsvIteratorNext($3 + 80 | 0);
    jsvIteratorNext($3 + 16 | 0);
    if (!(jsvIteratorHasElement($3 + 16 | 0) & 1)) {
     jsvIteratorFree($3 + 16 | 0);
     jsvIteratorNew($3 + 16 | 0, HEAP32[$3 + 160 >> 2], 1);
    }
    continue;
   }
   break;
  }
  jsvIteratorFree($3 + 80 | 0);
  jsvIteratorFree($3 + 16 | 0);
  HEAPF64[$3 + 168 >> 3] = HEAPF64[$3 + 144 >> 3];
 }
 __stack_pointer = $3 + 176 | 0;
 return +HEAPF64[$3 + 168 >> 3];
}

function tflite__ops__micro__activations__SoftmaxEval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = tflite__micro__GetEvalInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], 0);
 HEAP32[$2 + 12 >> 2] = tflite__micro__GetEvalOutput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], 0);
 label$1: {
  if (!HEAP32[HEAP32[$2 + 20 >> 2] + 8 >> 2]) {
   break label$1;
  }
 }
 HEAP32[$2 + 8 >> 2] = HEAP32[HEAP32[$2 + 20 >> 2] + 8 >> 2];
 label$2: {
  label$3: {
   switch (HEAP32[HEAP32[$2 + 16 >> 2] + 8 >> 2] - 1 | 0) {
   case 0:
    tflite__ops__micro__activations__SoftmaxFloat_28TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__2c_20tflite__SoftmaxParams_20const__29(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
    HEAP32[$2 + 28 >> 2] = 0;
    break label$2;

   case 2:
   case 8:
    tflite__ops__micro__activations__SoftmaxQuantized_28TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__2c_20tflite__SoftmaxParams_20const__29(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
    HEAP32[$2 + 28 >> 2] = 0;
    break label$2;

   default:
    break label$3;
   }
  }
  $0 = HEAP32[HEAP32[$2 + 24 >> 2] + 20 >> 2];
  $1 = HEAP32[$2 + 24 >> 2];
  $3 = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 16 >> 2] + 8 >> 2]);
  HEAP32[$2 + 4 >> 2] = HEAP32[HEAP32[$2 + 16 >> 2] + 8 >> 2];
  HEAP32[$2 >> 2] = $3;
  FUNCTION_TABLE[$0 | 0]($1, 112123, $2);
  HEAP32[$2 + 28 >> 2] = 1;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jsvIteratorGetIntegerValue($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  label$2: {
   switch (HEAP32[HEAP32[$1 + 8 >> 2] >> 2] - 1 | 0) {
   case 3:
    label$7: {
     if (!(jsvIsNameInt(HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2]) & 1)) {
      break label$7;
     }
     if ((jsvGetInteger(HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2]) | 0) != HEAP32[HEAP32[$1 + 8 >> 2] + 12 >> 2]) {
      break label$7;
     }
     HEAP32[$1 + 12 >> 2] = jsvGetFirstChildSigned(HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2]) << 16 >> 16;
     break label$1;
    }
    label$8: {
     if (!(jsvIsIntegerish(HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2]) & 1)) {
      break label$8;
     }
     if ((jsvGetInteger(HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2]) | 0) != HEAP32[HEAP32[$1 + 8 >> 2] + 12 >> 2]) {
      break label$8;
     }
     HEAP32[$1 + 12 >> 2] = jsvGetIntegerAndUnLock(jsvObjectIteratorGetValue_1(HEAP32[$1 + 8 >> 2] + 4 | 0));
     break label$1;
    }
    HEAP32[$1 + 12 >> 2] = 0;
    break label$1;

   case 1:
    if (jsvIsNameInt(HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2]) & 1) {
     HEAP32[$1 + 12 >> 2] = jsvGetFirstChildSigned(HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2]) << 16 >> 16;
     break label$1;
    }
    HEAP32[$1 + 12 >> 2] = jsvGetIntegerAndUnLock(jsvObjectIteratorGetValue_1(HEAP32[$1 + 8 >> 2] + 4 | 0));
    break label$1;

   case 0:
    HEAP32[$1 + 12 >> 2] = jsvStringIteratorGetChar_2(HEAP32[$1 + 8 >> 2] + 4 | 0) << 24 >> 24;
    break label$1;

   case 2:
    HEAP32[$1 + 12 >> 2] = jsvArrayBufferIteratorGetIntegerValue(HEAP32[$1 + 8 >> 2] + 4 | 0);
    break label$1;

   default:
    break label$2;
   }
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jspeFactorArray() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 32 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 label$1: {
  if ((HEAP32[46755] & 63) == 1) {
   HEAP32[$0 + 20 >> 2] = jsvNewEmptyArray();
   if (!HEAP32[$0 + 20 >> 2]) {
    jspSetError(0);
    HEAP32[$0 + 28 >> 2] = 0;
    break label$1;
   }
  }
  if (!(jslMatch(91) & 1)) {
   HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 20 >> 2];
   break label$1;
  }
  while (1) {
   $1 = 0;
   $1 = HEAP32[46755] & 80 ? $1 : HEAP16[HEAP32[38615] + 2 >> 1] != 93;
   if ($1) {
    label$8: {
     if ((HEAP32[46755] & 63) == 1) {
      if (HEAP16[HEAP32[38615] + 2 >> 1] != 44) {
       $1 = jsvSkipNameAndUnLock(jspeAssignmentExpression());
       HEAP32[$0 + 16 >> 2] = $1;
       HEAP32[$0 + 16 >> 2] = $1;
       HEAP32[$0 + 12 >> 2] = jsvMakeIntoVariableName(jsvNewFromInteger(HEAP32[$0 + 24 >> 2]), HEAP32[$0 + 16 >> 2]);
       if (HEAP32[$0 + 12 >> 2]) {
        jsvAddName(HEAP32[$0 + 20 >> 2], HEAP32[$0 + 12 >> 2]);
        jsvUnLock(HEAP32[$0 + 12 >> 2]);
       }
       jsvUnLock(HEAP32[$0 + 16 >> 2]);
      }
      break label$8;
     }
     jsvUnLock(jspeAssignmentExpression());
    }
    if (HEAP16[HEAP32[38615] + 2 >> 1] != 93) {
     if (!(jslMatch(44) & 1)) {
      HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 20 >> 2];
      break label$1;
     }
    }
    HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 24 >> 2] + 1;
    continue;
   }
   break;
  }
  if (HEAP32[$0 + 20 >> 2]) {
   jsvSetArrayLength(HEAP32[$0 + 20 >> 2], HEAP32[$0 + 24 >> 2], 0);
  }
  if (!(jslMatch(93) & 1)) {
   HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 20 >> 2];
   break label$1;
  }
  HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 20 >> 2];
 }
 __stack_pointer = $0 + 32 | 0;
 return HEAP32[$0 + 28 >> 2];
}

function jswrap_io_digitalWrite($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 44 >> 2] = $0;
 HEAP32[$2 + 40 >> 2] = $1;
 label$1: {
  if (jsvIsBoolean(HEAP32[$2 + 40 >> 2]) & 1) {
   HEAP32[$2 + 36 >> 2] = jsvGetBool(HEAP32[$2 + 40 >> 2]) & 1 ? -1 : 0;
   break label$1;
  }
  HEAP32[$2 + 36 >> 2] = jsvGetInteger(HEAP32[$2 + 40 >> 2]);
 }
 label$3: {
  if (jsvIsArray(HEAP32[$2 + 44 >> 2]) & 1) {
   HEAP16[$2 + 34 >> 1] = jsvGetLastChild(HEAP32[$2 + 44 >> 2]);
   while (1) {
    if (HEAPU16[$2 + 34 >> 1]) {
     HEAP32[$2 + 28 >> 2] = jsvLock(HEAPU16[$2 + 34 >> 1]);
     HEAP32[$2 + 24 >> 2] = jsvSkipName(HEAP32[$2 + 28 >> 2]);
     jshPinOutput(jshGetPinFromVar(HEAP32[$2 + 24 >> 2]) & 255, HEAP32[$2 + 36 >> 2] & 1);
     jsvUnLock(HEAP32[$2 + 24 >> 2]);
     HEAP16[$2 + 34 >> 1] = jsvGetPrevSibling(HEAP32[$2 + 28 >> 2]);
     jsvUnLock(HEAP32[$2 + 28 >> 2]);
     HEAP32[$2 + 36 >> 2] = HEAP32[$2 + 36 >> 2] >> 1;
     continue;
    }
    break;
   }
   break label$3;
  }
  label$7: {
   if (jsvIsObject(HEAP32[$2 + 44 >> 2]) & 1) {
    HEAP32[$2 + 20 >> 2] = jspGetNamedField(HEAP32[$2 + 44 >> 2], 104604, 0);
    label$9: {
     if (jsvIsFunction(HEAP32[$2 + 20 >> 2]) & 1) {
      HEAP32[$2 + 16 >> 2] = jsvNewFromInteger(HEAP32[$2 + 36 >> 2]);
      jsvUnLock2(jspeFunctionCall(HEAP32[$2 + 20 >> 2], 0, HEAP32[$2 + 44 >> 2], 0, 1, $2 + 16 | 0), HEAP32[$2 + 16 >> 2]);
      break label$9;
     }
     jsExceptionHere(1, 102474, 0);
    }
    jsvUnLock(HEAP32[$2 + 20 >> 2]);
    break label$7;
   }
   HEAP8[$2 + 15 | 0] = jshGetPinFromVar(HEAP32[$2 + 44 >> 2]);
   jshPinOutput(HEAPU8[$2 + 15 | 0], HEAP32[$2 + 36 >> 2] != 0);
  }
 }
 __stack_pointer = $2 + 48 | 0;
}

function escapeCharacter($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP8[$3 + 19 | 0] = $2;
 label$1: {
  if (HEAP32[$3 + 24 >> 2] == 10) {
   HEAP32[$3 + 28 >> 2] = 102545;
   break label$1;
  }
  if (HEAP32[$3 + 24 >> 2] == 9) {
   HEAP32[$3 + 28 >> 2] = 98119;
   break label$1;
  }
  if (HEAP32[$3 + 24 >> 2] == 8) {
   HEAP32[$3 + 28 >> 2] = 107812;
   break label$1;
  }
  if (!(HEAP8[$3 + 19 | 0] & 1 | HEAP32[$3 + 24 >> 2] != 11)) {
   HEAP32[$3 + 28 >> 2] = 97029;
   break label$1;
  }
  if (HEAP32[$3 + 24 >> 2] == 12) {
   HEAP32[$3 + 28 >> 2] = 104089;
   break label$1;
  }
  if (HEAP32[$3 + 24 >> 2] == 13) {
   HEAP32[$3 + 28 >> 2] = 101597;
   break label$1;
  }
  if (HEAP32[$3 + 24 >> 2] == 92) {
   HEAP32[$3 + 28 >> 2] = 108303;
   break label$1;
  }
  if (HEAP32[$3 + 24 >> 2] == 34) {
   HEAP32[$3 + 28 >> 2] = 126942;
   break label$1;
  }
  if (!(HEAP32[$3 + 20 >> 2] <= 55 & HEAP32[$3 + 20 >> 2] >= 48 | (HEAP8[$3 + 19 | 0] & 1 | HEAP32[$3 + 24 >> 2] >= 8))) {
   HEAP8[186972] = 92;
   HEAP8[186973] = HEAP32[$3 + 24 >> 2] + 48;
   HEAP8[186974] = 0;
   HEAP32[$3 + 28 >> 2] = 186972;
   break label$1;
  }
  if (!(HEAP32[$3 + 24 >> 2] < 127 & HEAP32[$3 + 24 >> 2] >= 32)) {
   HEAP32[$3 + 12 >> 2] = 186972;
   $0 = 1;
   $0 = HEAP8[$3 + 19 | 0] & 1 ? $0 : HEAP32[$3 + 24 >> 2] > 255;
   HEAP32[$3 + 12 >> 2] = numericEscapeChar(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 24 >> 2], $0);
   HEAP8[HEAP32[$3 + 12 >> 2]] = 0;
   HEAP32[$3 + 28 >> 2] = 186972;
   break label$1;
  }
  HEAP8[186973] = 0;
  HEAP8[186972] = HEAP32[$3 + 24 >> 2];
  HEAP32[$3 + 28 >> 2] = 186972;
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function jswrap_math_pow($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAPF64[$2 + 32 >> 3] = $0;
 HEAPF64[$2 + 24 >> 3] = $1;
 $0 = HEAPF64[$2 + 24 >> 3];
 label$1: {
  if (Math_abs($0) < 2147483648) {
   $3 = ~~$0;
   break label$1;
  }
  $3 = -2147483648;
 }
 HEAP32[$2 + 12 >> 2] = $3;
 label$3: {
  if (!(HEAP32[$2 + 12 >> 2] < 0 | HEAP32[$2 + 12 >> 2] >= 10 | HEAPF64[$2 + 24 >> 3] != +HEAP32[$2 + 12 >> 2])) {
   if (!HEAP32[$2 + 12 >> 2]) {
    HEAPF64[$2 + 40 >> 3] = 1;
    break label$3;
   }
   HEAPF64[$2 + 16 >> 3] = HEAPF64[$2 + 32 >> 3];
   while (1) {
    if (HEAP32[$2 + 12 >> 2] > 1) {
     HEAPF64[$2 + 16 >> 3] = HEAPF64[$2 + 16 >> 3] * HEAPF64[$2 + 32 >> 3];
     HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] - 1;
     continue;
    }
    break;
   }
   HEAPF64[$2 + 40 >> 3] = HEAPF64[$2 + 16 >> 3];
   break label$3;
  }
  label$8: {
   label$9: {
    if (!(HEAPF64[$2 + 32 >> 3] < 0)) {
     break label$9;
    }
    if (jswrap_math_mod(HEAPF64[$2 + 24 >> 3], 1) != 0) {
     break label$9;
    }
    label$10: {
     if (jswrap_math_mod(HEAPF64[$2 + 24 >> 3], 2) == 0) {
      HEAPF64[$2 + 16 >> 3] = exp(log(-HEAPF64[$2 + 32 >> 3]) * HEAPF64[$2 + 24 >> 3]);
      break label$10;
     }
     HEAPF64[$2 + 16 >> 3] = -exp(log(-HEAPF64[$2 + 32 >> 3]) * HEAPF64[$2 + 24 >> 3]);
    }
    break label$8;
   }
   label$12: {
    if (!(HEAPF64[$2 + 24 >> 3] <= 0 ? 0 : HEAPF64[$2 + 32 >> 3] == 0)) {
     HEAPF64[$2 + 16 >> 3] = exp(log(HEAPF64[$2 + 32 >> 3]) * HEAPF64[$2 + 24 >> 3]);
     break label$12;
    }
    HEAPF64[$2 + 16 >> 3] = 0;
   }
  }
  HEAPF64[$2 + 40 >> 3] = HEAPF64[$2 + 16 >> 3];
 }
 __stack_pointer = $2 + 48 | 0;
 return +HEAPF64[$2 + 40 >> 3];
}

function jsvArrayJoin($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 144 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 136 >> 2] = $0;
 HEAP32[$3 + 132 >> 2] = $1;
 HEAP8[$3 + 131 | 0] = $2;
 HEAP32[$3 + 124 >> 2] = jsvNewFromEmptyString_1();
 label$1: {
  if (!HEAP32[$3 + 124 >> 2]) {
   HEAP32[$3 + 140 >> 2] = 0;
   break label$1;
  }
  jsvIteratorNew($3 - -64 | 0, HEAP32[$3 + 136 >> 2], 1);
  jsvStringIteratorNew($3 + 24 | 0, HEAP32[$3 + 124 >> 2], 0);
  HEAP8[$3 + 23 | 0] = 1;
  while (1) {
   $0 = 0;
   if (!(jspIsInterrupted() & 1)) {
    $0 = jsvIteratorHasElement($3 - -64 | 0);
   }
   if ($0 & 1) {
    HEAP32[$3 + 16 >> 2] = jsvIteratorGetKey($3 - -64 | 0);
    if (jsvIsInt(HEAP32[$3 + 16 >> 2]) & 1) {
     if (!(!HEAP32[$3 + 132 >> 2] | HEAP8[$3 + 23 | 0] & 1)) {
      jsvStringIteratorAppendString($3 + 24 | 0, HEAP32[$3 + 132 >> 2], 0, 2147483647);
     }
     HEAP8[$3 + 23 | 0] = 0;
     HEAP32[$3 + 12 >> 2] = jsvIteratorGetValue($3 - -64 | 0);
     label$8: {
      if (!HEAP32[$3 + 12 >> 2]) {
       break label$8;
      }
      if (HEAP8[$3 + 131 | 0] & 1) {
       if (jsvIsNull(HEAP32[$3 + 12 >> 2]) & 1) {
        break label$8;
       }
      }
      HEAP32[$3 + 8 >> 2] = jsvAsString(HEAP32[$3 + 12 >> 2]);
      if (HEAP32[$3 + 8 >> 2]) {
       jsvStringIteratorAppendString($3 + 24 | 0, HEAP32[$3 + 8 >> 2], 0, 2147483647);
       jsvUnLock(HEAP32[$3 + 8 >> 2]);
      }
     }
     jsvUnLock(HEAP32[$3 + 12 >> 2]);
    }
    jsvUnLock(HEAP32[$3 + 16 >> 2]);
    jsvIteratorNext($3 - -64 | 0);
    continue;
   }
   break;
  }
  jsvIteratorFree($3 - -64 | 0);
  jsvStringIteratorFree_1($3 + 24 | 0);
  HEAP32[$3 + 140 >> 2] = HEAP32[$3 + 124 >> 2];
 }
 __stack_pointer = $3 + 144 | 0;
 return HEAP32[$3 + 140 >> 2];
}

function jsExceptionHere($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer + -64 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 60 >> 2] = $0;
 HEAP32[$3 + 56 >> 2] = $1;
 label$1: {
  if (jspHasError() & 1) {
   break label$1;
  }
  jsiConsoleRemoveInputLine();
  HEAP32[$3 + 52 >> 2] = jsvNewFromEmptyString_2();
  if (!HEAP32[$3 + 52 >> 2]) {
   jspSetError(0);
   break label$1;
  }
  jsvStringIteratorNew($3 + 16 | 0, HEAP32[$3 + 52 >> 2], 0);
  jsvStringIteratorGotoEnd($3 + 16 | 0);
  HEAP32[$3 + 12 >> 2] = 2;
  HEAP32[$3 + 8 >> 2] = $2;
  vcbprintf(HEAP32[$3 + 12 >> 2], $3 + 16 | 0, HEAP32[$3 + 56 >> 2], HEAP32[$3 + 8 >> 2]);
  jsvStringIteratorFree_3($3 + 16 | 0);
  if (HEAP32[$3 + 60 >> 2]) {
   HEAP32[$3 + 4 >> 2] = 0;
   label$4: {
    if (HEAP32[$3 + 60 >> 2] == 1) {
     HEAP32[$3 + 4 >> 2] = jswrap_error_constructor(HEAP32[$3 + 52 >> 2]);
     break label$4;
    }
    label$6: {
     if (HEAP32[$3 + 60 >> 2] == 2) {
      HEAP32[$3 + 4 >> 2] = jswrap_syntaxerror_constructor(HEAP32[$3 + 52 >> 2]);
      break label$6;
     }
     label$8: {
      if (HEAP32[$3 + 60 >> 2] == 3) {
       HEAP32[$3 + 4 >> 2] = jswrap_typeerror_constructor(HEAP32[$3 + 52 >> 2]);
       break label$8;
      }
      label$10: {
       if (HEAP32[$3 + 60 >> 2] == 4) {
        HEAP32[$3 + 4 >> 2] = jswrap_internalerror_constructor(HEAP32[$3 + 52 >> 2]);
        break label$10;
       }
       if (HEAP32[$3 + 60 >> 2] == 5) {
        HEAP32[$3 + 4 >> 2] = jswrap_referenceerror_constructor(HEAP32[$3 + 52 >> 2]);
       }
      }
     }
    }
   }
   jsvUnLock(HEAP32[$3 + 52 >> 2]);
   HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 4 >> 2];
  }
  jspSetException(HEAP32[$3 + 52 >> 2]);
  jsvUnLock(HEAP32[$3 + 52 >> 2]);
 }
 __stack_pointer = $3 - -64 | 0;
}

function jswrap_arraybufferview_subarray($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 label$1: {
  if (!(jsvIsArrayBuffer(HEAP32[$3 + 24 >> 2]) & 1)) {
   jsExceptionHere(1, 96902, 0);
   HEAP32[$3 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 12 >> 2] = jsvGetInteger(HEAP32[$3 + 16 >> 2]);
  if (!(jsvIsNumeric(HEAP32[$3 + 16 >> 2]) & 1)) {
   HEAP32[$3 + 12 >> 2] = jsvGetArrayBufferLength(HEAP32[$3 + 24 >> 2]);
  }
  if (HEAP32[$3 + 20 >> 2] < 0) {
   HEAP32[$3 + 20 >> 2] = jsvGetArrayBufferLength(HEAP32[$3 + 24 >> 2]) + HEAP32[$3 + 20 >> 2];
  }
  if (HEAP32[$3 + 12 >> 2] < 0) {
   HEAP32[$3 + 12 >> 2] = jsvGetArrayBufferLength(HEAP32[$3 + 24 >> 2]) + HEAP32[$3 + 12 >> 2];
  }
  if (HEAP32[$3 + 12 >> 2] < 0) {
   HEAP32[$3 + 12 >> 2] = 0;
  }
  if (HEAP32[$3 + 20 >> 2] > HEAP32[$3 + 12 >> 2]) {
   HEAP32[$3 + 20 >> 2] = 0;
   HEAP32[$3 + 12 >> 2] = 0;
  }
  HEAP8[$3 + 11 | 0] = HEAPU8[HEAP32[$3 + 24 >> 2] + 5 | 0];
  if (HEAP32[$3 + 20 >> 2] == HEAP32[$3 + 12 >> 2]) {
   HEAP32[$3 + 28 >> 2] = jsvNewTypedArray(HEAPU8[$3 + 11 | 0], 0);
   break label$1;
  }
  HEAP32[$3 + 4 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$3 + 24 >> 2]) & 65535);
  $0 = HEAP32[$3 + 24 >> 2];
  HEAP32[$3 >> 2] = jswrap_typedarray_constructor(HEAPU8[$3 + 11 | 0], HEAP32[$3 + 4 >> 2], Math_imul(HEAP32[$3 + 20 >> 2], HEAPU8[$3 + 11 | 0] & 15) + (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8) | 0, HEAP32[$3 + 12 >> 2] - HEAP32[$3 + 20 >> 2] | 0);
  jsvUnLock(HEAP32[$3 + 4 >> 2]);
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 >> 2];
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function jsvRemoveChild($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP16[$2 + 22 >> 1] = jsvGetRef(HEAP32[$2 + 24 >> 2]);
 HEAP8[$2 + 21 | 0] = 0;
 if ((jsvGetFirstChild(HEAP32[$2 + 28 >> 2]) & 65535) == HEAPU16[$2 + 22 >> 1]) {
  jsvSetFirstChild(HEAP32[$2 + 28 >> 2], jsvGetNextSibling(HEAP32[$2 + 24 >> 2]) & 65535);
  HEAP8[$2 + 21 | 0] = 1;
 }
 if ((jsvGetLastChild(HEAP32[$2 + 28 >> 2]) & 65535) == HEAPU16[$2 + 22 >> 1]) {
  jsvSetLastChild(HEAP32[$2 + 28 >> 2], jsvGetPrevSibling(HEAP32[$2 + 24 >> 2]) & 65535);
  HEAP8[$2 + 21 | 0] = 1;
  if (jsvIsArray(HEAP32[$2 + 28 >> 2]) & 1) {
   HEAP32[$2 + 16 >> 2] = 0;
   if (jsvGetLastChild(HEAP32[$2 + 28 >> 2]) & 65535) {
    HEAP32[$2 + 16 >> 2] = jsvGetIntegerAndUnLock(jsvLock(jsvGetLastChild(HEAP32[$2 + 28 >> 2]) & 65535)) + 1;
   }
   jsvSetArrayLength(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 16 >> 2], 0);
  }
 }
 if (jsvGetPrevSibling(HEAP32[$2 + 24 >> 2]) & 65535) {
  HEAP32[$2 + 12 >> 2] = jsvLock(jsvGetPrevSibling(HEAP32[$2 + 24 >> 2]) & 65535);
  jsvSetNextSibling(HEAP32[$2 + 12 >> 2], jsvGetNextSibling(HEAP32[$2 + 24 >> 2]) & 65535);
  jsvUnLock(HEAP32[$2 + 12 >> 2]);
  HEAP8[$2 + 21 | 0] = 1;
 }
 if (jsvGetNextSibling(HEAP32[$2 + 24 >> 2]) & 65535) {
  HEAP32[$2 + 8 >> 2] = jsvLock(jsvGetNextSibling(HEAP32[$2 + 24 >> 2]) & 65535);
  jsvSetPrevSibling(HEAP32[$2 + 8 >> 2], jsvGetPrevSibling(HEAP32[$2 + 24 >> 2]) & 65535);
  jsvUnLock(HEAP32[$2 + 8 >> 2]);
  HEAP8[$2 + 21 | 0] = 1;
 }
 jsvSetPrevSibling(HEAP32[$2 + 24 >> 2], 0);
 jsvSetNextSibling(HEAP32[$2 + 24 >> 2], 0);
 if (HEAP8[$2 + 21 | 0] & 1) {
  jsvUnRef(HEAP32[$2 + 24 >> 2]);
 }
 __stack_pointer = $2 + 32 | 0;
}

function jswrap_string_padX($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 24 >> 2] = $0;
 HEAP32[$4 + 20 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $2;
 HEAP8[$4 + 15 | 0] = $3;
 label$1: {
  label$2: {
   if (jsvIsString(HEAP32[$4 + 24 >> 2]) & 1) {
    if ((jsvGetStringLength(HEAP32[$4 + 24 >> 2]) | 0) < HEAP32[$4 + 20 >> 2]) {
     break label$2;
    }
   }
   HEAP32[$4 + 28 >> 2] = jsvLockAgain(HEAP32[$4 + 24 >> 2]);
   break label$1;
  }
  HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 20 >> 2] - jsvGetStringLength(HEAP32[$4 + 24 >> 2]);
  label$4: {
   if (HEAP8[$4 + 15 | 0] & 1) {
    $0 = jsvNewFromEmptyString_8();
    break label$4;
   }
   $0 = jsvNewFromStringVarComplete(HEAP32[$4 + 24 >> 2]);
  }
  HEAP32[$4 + 4 >> 2] = $0;
  if (!HEAP32[$4 + 4 >> 2]) {
   HEAP32[$4 + 28 >> 2] = 0;
   break label$1;
  }
  label$7: {
   if (HEAP32[$4 + 16 >> 2]) {
    $0 = jsvAsString(HEAP32[$4 + 16 >> 2]);
    break label$7;
   }
   $0 = jsvNewFromString(127850);
  }
  HEAP32[$4 + 16 >> 2] = $0;
  HEAP32[$4 >> 2] = jsvGetStringLength(HEAP32[$4 + 16 >> 2]);
  while (1) {
   if (HEAP32[$4 + 8 >> 2] > 0) {
    $1 = HEAP32[$4 + 4 >> 2];
    $2 = HEAP32[$4 + 16 >> 2];
    if (HEAP32[$4 >> 2] > HEAP32[$4 + 8 >> 2]) {
     $0 = HEAP32[$4 + 8 >> 2];
    } else {
     $0 = HEAP32[$4 >> 2];
    }
    jsvAppendStringVar($1, $2, 0, $0);
    HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 8 >> 2] - HEAP32[$4 >> 2];
    continue;
   }
   break;
  }
  if (HEAP8[$4 + 15 | 0] & 1) {
   jsvAppendStringVarComplete(HEAP32[$4 + 4 >> 2], HEAP32[$4 + 24 >> 2]);
  }
  jsvUnLock(HEAP32[$4 + 16 >> 2]);
  HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 4 >> 2];
 }
 __stack_pointer = $4 + 32 | 0;
 return HEAP32[$4 + 28 >> 2];
}

function jsiExecuteEventCallbackInner($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 40 >> 2] = $0;
 HEAP32[$4 + 36 >> 2] = $1;
 HEAP32[$4 + 32 >> 2] = $2;
 HEAP32[$4 + 28 >> 2] = $3;
 label$1: {
  if (!HEAP32[$4 + 36 >> 2]) {
   HEAP8[$4 + 47 | 0] = 0;
   break label$1;
  }
  HEAP8[$4 + 27 | 0] = 1;
  label$3: {
   if (jsvIsArray(HEAP32[$4 + 36 >> 2]) & 1) {
    jsvObjectIteratorNew($4 + 16 | 0, HEAP32[$4 + 36 >> 2]);
    while (1) {
     $0 = 0;
     label$6: {
      if (!(HEAP8[$4 + 27 | 0] & 1)) {
       break label$6;
      }
      $0 = 0;
      if (!(jsvObjectIteratorHasValue_3($4 + 16 | 0) & 1)) {
       break label$6;
      }
      $0 = (HEAPU16[93524] & 16384) != 0 ^ -1;
     }
     if ($0 & 1) {
      HEAP32[$4 + 12 >> 2] = jsvObjectIteratorGetValue_3($4 + 16 | 0);
      HEAP8[$4 + 27 | 0] = jsiExecuteEventCallbackInner(HEAP32[$4 + 40 >> 2], HEAP32[$4 + 12 >> 2], HEAP32[$4 + 32 >> 2], HEAP32[$4 + 28 >> 2]) & 1 & (HEAP8[$4 + 27 | 0] & 1);
      jsvUnLock(HEAP32[$4 + 12 >> 2]);
      jsvObjectIteratorNext($4 + 16 | 0);
      continue;
     }
     break;
    }
    jsvObjectIteratorFree_3($4 + 16 | 0);
    break label$3;
   }
   label$8: {
    if (jsvIsFunction(HEAP32[$4 + 36 >> 2]) & 1) {
     jsvUnLock(jspExecuteFunction(HEAP32[$4 + 36 >> 2], HEAP32[$4 + 40 >> 2], HEAP32[$4 + 32 >> 2], HEAP32[$4 + 28 >> 2]));
     break label$8;
    }
    label$10: {
     if (jsvIsString(HEAP32[$4 + 36 >> 2]) & 1) {
      jsvUnLock(jspEvaluateVar(HEAP32[$4 + 36 >> 2], 0, 0));
      break label$10;
     }
     jsError(104471, 0);
    }
   }
  }
  HEAP8[$4 + 47 | 0] = HEAP8[$4 + 27 | 0] & 1;
 }
 __stack_pointer = $4 + 48 | 0;
 return HEAP8[$4 + 47 | 0] & 1;
}

function jshTransmit($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 label$1: {
  if (!(HEAPU8[$2 + 15 | 0] != 17 & HEAPU8[$2 + 15 | 0] != 18)) {
   jshPushIOCharEvent((HEAPU8[$2 + 15 | 0] == 18 ? 17 : 18) & 255, HEAP8[$2 + 14 | 0]);
   break label$1;
  }
  if (HEAPU8[$2 + 15 | 0] == 20) {
   terminalSendChar(HEAP8[$2 + 14 | 0]);
   break label$1;
  }
  label$5: {
   if (HEAPU8[$2 + 15 | 0] != 21) {
    break label$5;
   }
   if (jshIsUSBSERIALConnected() & 1) {
    break label$5;
   }
   jshTransmitClearDevice(21);
   break label$1;
  }
  if (!HEAPU8[$2 + 15 | 0]) {
   break label$1;
  }
  HEAP8[$2 + 13 | 0] = HEAPU8[187122] + 1;
  if (HEAPU8[$2 + 13 | 0] == HEAPU8[187123]) {
   jsiSetBusy(2, 1);
   if (HEAPU8[$2 + 15 | 0] == 19) {
    $3 = (jsiGetConsoleDevice() & 255) == 19;
   }
   HEAP8[$2 + 12 | 0] = $3;
   while (1) {
    if (HEAPU8[$2 + 13 | 0] == HEAPU8[187123]) {
     if (jshIsInInterrupt() & 1) {
      HEAP8[186986] = HEAPU8[186986] | 2;
      break label$1;
     }
     jshBusyIdle();
     if (!(jshIsUSBSERIALConnected() & 1)) {
      jshTransmitClearDevice(21);
     }
     continue;
    }
    break;
   }
   label$12: {
    if (!(HEAP8[$2 + 12 | 0] & 1)) {
     break label$12;
    }
    if ((jsiGetConsoleDevice() & 255) == 19) {
     break label$12;
    }
    HEAP8[$2 + 15 | 0] = jsiGetConsoleDevice();
   }
   jsiSetBusy(2, 0);
  }
  HEAP8[(HEAPU8[187122] << 1) + 187200 | 0] = HEAPU8[$2 + 15 | 0];
  HEAP8[((HEAPU8[187122] << 1) + 187200 | 0) + 1 | 0] = HEAPU8[$2 + 14 | 0];
  HEAP8[187122] = HEAPU8[$2 + 13 | 0];
  jshUSARTKick(HEAPU8[$2 + 15 | 0]);
 }
 __stack_pointer = $2 + 16 | 0;
}

function getRadix($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = 10;
 if (HEAP8[HEAP32[HEAP32[$1 + 12 >> 2] >> 2]] == 48) {
  HEAP32[$1 + 8 >> 2] = 8;
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
  label$2: {
   if (!(HEAP8[HEAP32[HEAP32[$1 + 12 >> 2] >> 2]] != 111 & HEAP8[HEAP32[HEAP32[$1 + 12 >> 2] >> 2]] != 79)) {
    HEAP32[$1 + 8 >> 2] = 8;
    $0 = HEAP32[$1 + 12 >> 2];
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
    break label$2;
   }
   label$5: {
    if (!(HEAP8[HEAP32[HEAP32[$1 + 12 >> 2] >> 2]] != 120 & HEAP8[HEAP32[HEAP32[$1 + 12 >> 2] >> 2]] != 88)) {
     HEAP32[$1 + 8 >> 2] = 16;
     $0 = HEAP32[$1 + 12 >> 2];
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     break label$5;
    }
    label$8: {
     if (!(HEAP8[HEAP32[HEAP32[$1 + 12 >> 2] >> 2]] != 98 & HEAP8[HEAP32[HEAP32[$1 + 12 >> 2] >> 2]] != 66)) {
      HEAP32[$1 + 8 >> 2] = 2;
      $0 = HEAP32[$1 + 12 >> 2];
      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
      break label$8;
     }
     HEAP32[$1 + 4 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
     while (1) {
      label$12: {
       if (!HEAPU8[HEAP32[$1 + 4 >> 2]]) {
        break label$12;
       }
       label$13: {
        if (!(!(HEAP8[HEAP32[$1 + 4 >> 2]] == 46 | HEAP8[HEAP32[$1 + 4 >> 2]] == 56) & HEAP8[HEAP32[$1 + 4 >> 2]] != 57)) {
         HEAP32[$1 + 8 >> 2] = 10;
         break label$13;
        }
        if (HEAP8[HEAP32[$1 + 4 >> 2]] < 48 | HEAP8[HEAP32[$1 + 4 >> 2]] > 57) {
         break label$12;
        }
       }
       HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
       continue;
      }
      break;
     }
    }
   }
  }
 }
 return HEAP32[$1 + 8 >> 2];
}

function tflite__ComputePaddingHeightWidth_28int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20TfLitePadding_2c_20int__2c_20int__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
 var $12 = 0;
 $12 = __stack_pointer - 48 | 0;
 __stack_pointer = $12;
 HEAP32[$12 + 44 >> 2] = $1;
 HEAP32[$12 + 40 >> 2] = $2;
 HEAP32[$12 + 36 >> 2] = $3;
 HEAP32[$12 + 32 >> 2] = $4;
 HEAP32[$12 + 28 >> 2] = $5;
 HEAP32[$12 + 24 >> 2] = $6;
 HEAP32[$12 + 20 >> 2] = $7;
 HEAP32[$12 + 16 >> 2] = $8;
 HEAP32[$12 + 12 >> 2] = $9;
 HEAP32[$12 + 8 >> 2] = $10;
 HEAP32[$12 + 4 >> 2] = $11;
 $1 = tflite__ComputeOutSize_28TfLitePadding_2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$12 + 12 >> 2], HEAP32[$12 + 24 >> 2], HEAP32[$12 + 16 >> 2], HEAP32[$12 + 40 >> 2], HEAP32[$12 + 32 >> 2]);
 HEAP32[HEAP32[$12 + 4 >> 2] >> 2] = $1;
 $1 = tflite__ComputeOutSize_28TfLitePadding_2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$12 + 12 >> 2], HEAP32[$12 + 28 >> 2], HEAP32[$12 + 20 >> 2], HEAP32[$12 + 44 >> 2], HEAP32[$12 + 36 >> 2]);
 HEAP32[HEAP32[$12 + 8 >> 2] >> 2] = $1;
 HEAP32[$12 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = tflite__ComputePaddingWithOffset_28int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int__29(HEAP32[$12 + 44 >> 2], HEAP32[$12 + 36 >> 2], HEAP32[$12 + 28 >> 2], HEAP32[$12 + 20 >> 2], HEAP32[HEAP32[$12 + 8 >> 2] >> 2], $12);
 HEAP32[$0 + 12 >> 2] = HEAP32[$12 >> 2];
 HEAP32[$0 >> 2] = tflite__ComputePaddingWithOffset_28int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int__29(HEAP32[$12 + 40 >> 2], HEAP32[$12 + 32 >> 2], HEAP32[$12 + 24 >> 2], HEAP32[$12 + 16 >> 2], HEAP32[HEAP32[$12 + 4 >> 2] >> 2], $12);
 HEAP32[$0 + 8 >> 2] = HEAP32[$12 >> 2];
 __stack_pointer = $12 + 48 | 0;
}

function jswrap_tfmicrointerpreter_tensorToArrayBuffer($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer + -64 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 56 >> 2] = $0;
 HEAP8[$2 + 55 | 0] = $1;
 HEAP32[$2 + 48 >> 2] = jswrap_tfmicrointerpreter_getTFMI(HEAP32[$2 + 56 >> 2]);
 HEAP32[$2 + 44 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 56 >> 2], 103326);
 tf_get($2 + 32 | 0, HEAP32[$2 + 48 >> 2], HEAP8[$2 + 55 | 0] & 1);
 label$1: {
  if (!(HEAP32[$2 + 44 >> 2] ? HEAP32[$2 + 32 >> 2] : 0)) {
   jsExceptionHere(1, 101034, 0);
   HEAP32[$2 + 60 >> 2] = 0;
   break label$1;
  }
  HEAP8[$2 + 31 | 0] = 0;
  label$4: {
   label$5: {
    switch (HEAP32[$2 + 36 >> 2] - 1 | 0) {
    case 0:
     HEAP8[$2 + 31 | 0] = 36;
     break label$4;

    case 1:
     HEAP8[$2 + 31 | 0] = 20;
     break label$4;

    case 2:
     HEAP8[$2 + 31 | 0] = 1;
     break label$4;

    case 6:
     HEAP8[$2 + 31 | 0] = 18;
     break label$4;

    case 8:
     HEAP8[$2 + 31 | 0] = 17;
     break label$4;

    default:
     break label$5;
    }
   }
   HEAP32[$2 >> 2] = HEAP32[$2 + 36 >> 2];
   jsExceptionHere(3, 107113, $2);
   HEAP32[$2 + 60 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 20 >> 2] = jsvGetDataPointer(HEAP32[$2 + 44 >> 2], $2 + 24 | 0);
  HEAP32[$2 + 16 >> 2] = jsvNewArrayBufferFromString(HEAP32[$2 + 44 >> 2], 0);
  HEAP32[$2 + 12 >> 2] = jswrap_typedarray_constructor(HEAPU8[$2 + 31 | 0], HEAP32[$2 + 16 >> 2], HEAP32[$2 + 32 >> 2] - HEAP32[$2 + 20 >> 2] | 0, HEAPU32[$2 + 40 >> 2] / ((HEAPU8[$2 + 31 | 0] & 15) >>> 0) | 0);
  jsvUnLock2(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 44 >> 2]);
  HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 12 >> 2];
 }
 __stack_pointer = $2 - -64 | 0;
 return HEAP32[$2 + 60 >> 2];
}

function tflite__MicroAllocator__RequestScratchBufferInArena_28int_2c_20unsigned_20long_2c_20int__29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 40 >> 2] = $0;
 HEAP32[$4 + 36 >> 2] = $1;
 HEAP32[$4 + 32 >> 2] = $2;
 HEAP32[$4 + 28 >> 2] = $3;
 label$1: {
  label$2: {
   $2 = HEAP32[$4 + 40 >> 2];
   if (!HEAP32[$2 + 16 >> 2]) {
    break label$2;
   }
   if (HEAP32[$2 + 16 >> 2] == (tflite__SimpleMemoryAllocator__GetTail_28_29_20const(HEAP32[$2 + 4 >> 2]) | 0)) {
    break label$2;
   }
   tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$2 + 8 >> 2], 111633, 0);
   HEAP32[$4 + 44 >> 2] = 1;
   break label$1;
  }
  $0 = HEAP32[$2 + 4 >> 2];
  HEAP32[$4 + 24 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, 12, 4);
  if (!HEAP32[$4 + 24 >> 2]) {
   $0 = HEAP32[$2 + 8 >> 2];
   HEAP32[$4 >> 2] = HEAP32[$4 + 36 >> 2];
   tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 100750, $4);
   HEAP32[$4 + 44 >> 2] = 1;
   break label$1;
  }
  HEAP32[$4 + 8 >> 2] = 0;
  HEAP32[$4 + 12 >> 2] = 0;
  HEAP32[$4 + 16 >> 2] = 0;
  $3 = HEAP32[$4 + 12 >> 2];
  $0 = HEAP32[$4 + 8 >> 2];
  $1 = $0;
  $0 = HEAP32[$4 + 24 >> 2];
  HEAP32[$0 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = $3;
  HEAP32[$0 + 8 >> 2] = HEAP32[$4 + 16 >> 2];
  HEAP32[HEAP32[$4 + 24 >> 2] + 4 >> 2] = HEAP32[$4 + 32 >> 2];
  HEAP32[HEAP32[$4 + 24 >> 2] + 8 >> 2] = HEAP32[$4 + 36 >> 2];
  HEAP32[HEAP32[$4 + 28 >> 2] >> 2] = HEAP32[$2 + 20 >> 2];
  HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 20 >> 2] + 1;
  HEAP32[$2 + 16 >> 2] = HEAP32[$4 + 24 >> 2];
  HEAP32[$4 + 44 >> 2] = 0;
 }
 __stack_pointer = $4 + 48 | 0;
 return HEAP32[$4 + 44 >> 2];
}

function jswrap_array_fill($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 96 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 88 >> 2] = $0;
 HEAP32[$4 + 84 >> 2] = $1;
 HEAP32[$4 + 80 >> 2] = $2;
 HEAP32[$4 + 76 >> 2] = $3;
 label$1: {
  if (!(jsvIsIterable(HEAP32[$4 + 88 >> 2]) & 1)) {
   HEAP32[$4 + 92 >> 2] = 0;
   break label$1;
  }
  HEAP32[$4 + 72 >> 2] = jsvGetLength(HEAP32[$4 + 88 >> 2]);
  if (HEAP32[$4 + 80 >> 2] < 0) {
   HEAP32[$4 + 80 >> 2] = HEAP32[$4 + 80 >> 2] + HEAP32[$4 + 72 >> 2];
  }
  if (HEAP32[$4 + 80 >> 2] < 0) {
   HEAP32[$4 + 92 >> 2] = 0;
   break label$1;
  }
  label$5: {
   if (jsvIsNumeric(HEAP32[$4 + 76 >> 2]) & 1) {
    $0 = jsvGetInteger(HEAP32[$4 + 76 >> 2]);
    break label$5;
   }
   $0 = HEAP32[$4 + 72 >> 2];
  }
  HEAP32[$4 + 68 >> 2] = $0;
  if (HEAP32[$4 + 68 >> 2] < 0) {
   HEAP32[$4 + 68 >> 2] = HEAP32[$4 + 68 >> 2] + HEAP32[$4 + 72 >> 2];
  }
  if (HEAP32[$4 + 68 >> 2] < 0) {
   HEAP32[$4 + 92 >> 2] = 0;
   break label$1;
  }
  jsvIteratorNew($4 + 8 | 0, HEAP32[$4 + 88 >> 2], 1);
  while (1) {
   $0 = 0;
   if (jsvIteratorHasElement($4 + 8 | 0) & 1) {
    $0 = jspIsInterrupted() ^ -1;
   }
   if ($0 & 1) {
    HEAP32[$4 + 4 >> 2] = jsvGetIntegerAndUnLock(jsvIteratorGetKey($4 + 8 | 0));
    if (!(HEAP32[$4 + 4 >> 2] < HEAP32[$4 + 80 >> 2] | HEAP32[$4 + 4 >> 2] >= HEAP32[$4 + 68 >> 2])) {
     jsvIteratorSetValue($4 + 8 | 0, HEAP32[$4 + 84 >> 2]);
    }
    jsvIteratorNext($4 + 8 | 0);
    continue;
   }
   break;
  }
  jsvIteratorFree($4 + 8 | 0);
  HEAP32[$4 + 92 >> 2] = jsvLockAgain(HEAP32[$4 + 88 >> 2]);
 }
 __stack_pointer = $4 + 96 | 0;
 return HEAP32[$4 + 92 >> 2];
}

function void_20tflite__reference_ops__AffineQuantize_float_2c_20unsigned_20char__28tflite__QuantizationParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = Math_fround(0);
 $5 = __stack_pointer + -64 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 60 >> 2] = $0;
 HEAP32[$5 + 56 >> 2] = $1;
 HEAP32[$5 + 52 >> 2] = $2;
 HEAP32[$5 + 48 >> 2] = $3;
 HEAP32[$5 + 44 >> 2] = $4;
 HEAP32[$5 + 40 >> 2] = HEAP32[HEAP32[$5 + 60 >> 2] >> 2];
 HEAPF64[$5 + 32 >> 3] = HEAPF64[HEAP32[$5 + 60 >> 2] + 8 >> 3];
 HEAP32[$5 + 28 >> 2] = tflite__MatchingFlatSize_28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__29(HEAP32[$5 + 56 >> 2], HEAP32[$5 + 48 >> 2]);
 HEAP32[$5 + 24 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 24 >> 2] < HEAP32[$5 + 28 >> 2]) {
   HEAPF32[$5 + 20 >> 2] = HEAPF32[HEAP32[$5 + 52 >> 2] + (HEAP32[$5 + 24 >> 2] << 2) >> 2];
   $6 = float_20tflite__TfLiteRound_float__28float_29(Math_fround(HEAPF32[$5 + 20 >> 2] / Math_fround(HEAPF64[$5 + 32 >> 3])));
   label$3: {
    if (Math_fround(Math_abs($6)) < Math_fround(2147483648)) {
     $0 = ~~$6;
     break label$3;
    }
    $0 = -2147483648;
   }
   HEAP32[$5 + 16 >> 2] = $0 + HEAP32[$5 + 40 >> 2];
   HEAP32[$5 + 12 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29(int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($5 + 16 | 0, 148064), 148068) >> 2];
   HEAP8[HEAP32[$5 + 44 >> 2] + HEAP32[$5 + 24 >> 2] | 0] = HEAP32[$5 + 12 >> 2];
   HEAP32[$5 + 24 >> 2] = HEAP32[$5 + 24 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $5 - -64 | 0;
}

function jswrap_e_dumpFragmentation() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 while (1) {
  if (HEAPU32[$0 + 8 >> 2] < jsvGetMemoryTotal() >>> 0) {
   HEAP32[$0 + 4 >> 2] = _jsvGetAddressOf(HEAP32[$0 + 8 >> 2] + 1 & 65535);
   $1 = HEAP32[$0 + 4 >> 2];
   label$3: {
    if (!((HEAPU8[$1 + 11 | 0] | HEAPU8[$1 + 12 | 0] << 8) & 63)) {
     jsiConsolePrintString(127850);
     $1 = HEAP32[$0 + 12 >> 2];
     HEAP32[$0 + 12 >> 2] = $1 + 1;
     if (($1 | 0) > 80) {
      jsiConsolePrintString(129587);
      HEAP32[$0 + 12 >> 2] = 0;
     }
     break label$3;
    }
    label$6: {
     if (jsvGetLocks(HEAP32[$0 + 4 >> 2]) & 255) {
      jsiConsolePrintString(109423);
      break label$6;
     }
     jsiConsolePrintString(126940);
    }
    $1 = HEAP32[$0 + 12 >> 2];
    HEAP32[$0 + 12 >> 2] = $1 + 1;
    if (($1 | 0) > 80) {
     jsiConsolePrintString(129587);
     HEAP32[$0 + 12 >> 2] = 0;
    }
    if (jsvIsFlatString(HEAP32[$0 + 4 >> 2]) & 1) {
     HEAP32[$0 >> 2] = jsvGetFlatStringBlocks(HEAP32[$0 + 4 >> 2]);
     HEAP32[$0 + 8 >> 2] = HEAP32[$0 >> 2] + HEAP32[$0 + 8 >> 2];
     while (1) {
      $1 = HEAP32[$0 >> 2];
      HEAP32[$0 >> 2] = $1 - 1;
      if ($1) {
       jsiConsolePrintString(110335);
       $1 = HEAP32[$0 + 12 >> 2];
       HEAP32[$0 + 12 >> 2] = $1 + 1;
       if (($1 | 0) > 80) {
        jsiConsolePrintString(129587);
        HEAP32[$0 + 12 >> 2] = 0;
       }
       continue;
      }
      break;
     }
    }
   }
   HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
   continue;
  }
  break;
 }
 jsiConsolePrintString(129587);
 __stack_pointer = $0 + 16 | 0;
}

function void_20tflite__reference_ops__AffineQuantize_float_2c_20signed_20char__28tflite__QuantizationParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = Math_fround(0);
 $5 = __stack_pointer + -64 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 60 >> 2] = $0;
 HEAP32[$5 + 56 >> 2] = $1;
 HEAP32[$5 + 52 >> 2] = $2;
 HEAP32[$5 + 48 >> 2] = $3;
 HEAP32[$5 + 44 >> 2] = $4;
 HEAP32[$5 + 40 >> 2] = HEAP32[HEAP32[$5 + 60 >> 2] >> 2];
 HEAPF64[$5 + 32 >> 3] = HEAPF64[HEAP32[$5 + 60 >> 2] + 8 >> 3];
 HEAP32[$5 + 28 >> 2] = tflite__MatchingFlatSize_28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__29(HEAP32[$5 + 56 >> 2], HEAP32[$5 + 48 >> 2]);
 HEAP32[$5 + 24 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 24 >> 2] < HEAP32[$5 + 28 >> 2]) {
   HEAPF32[$5 + 20 >> 2] = HEAPF32[HEAP32[$5 + 52 >> 2] + (HEAP32[$5 + 24 >> 2] << 2) >> 2];
   $6 = float_20tflite__TfLiteRound_float__28float_29(Math_fround(HEAPF32[$5 + 20 >> 2] / Math_fround(HEAPF64[$5 + 32 >> 3])));
   label$3: {
    if (Math_fround(Math_abs($6)) < Math_fround(2147483648)) {
     $0 = ~~$6;
     break label$3;
    }
    $0 = -2147483648;
   }
   HEAP32[$5 + 16 >> 2] = $0 + HEAP32[$5 + 40 >> 2];
   HEAP32[$5 + 12 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29(int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($5 + 16 | 0, 148056), 148060) >> 2];
   HEAP8[HEAP32[$5 + 44 >> 2] + HEAP32[$5 + 24 >> 2] | 0] = HEAP32[$5 + 12 >> 2];
   HEAP32[$5 + 24 >> 2] = HEAP32[$5 + 24 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $5 - -64 | 0;
}

function jsiSoftKill() {
 var $0 = 0;
 $0 = __stack_pointer + -64 | 0;
 __stack_pointer = $0;
 jsiExecuteEventCallbackOn(109901, 102725, 0, 0);
 jsiCheckErrors();
 HEAP32[46765] = 0;
 jsiInputLineCursorMoved();
 jsvUnLock(HEAP32[46763]);
 HEAP32[46763] = 0;
 jswKill();
 jstReset();
 if (HEAP32[46760]) {
  jsvUnLock(HEAP32[46760]);
  HEAP32[46760] = 0;
 }
 if (HEAPU16[93522]) {
  jsvUnRefRef(HEAPU16[93522]);
  HEAP16[93522] = 0;
 }
 if (HEAPU16[93523]) {
  HEAP32[$0 + 60 >> 2] = jsvLock(HEAPU16[93523]);
  jsvObjectIteratorNew($0 + 56 | 0, HEAP32[$0 + 60 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_3($0 + 56 | 0) & 1) {
    HEAP32[$0 + 52 >> 2] = jsvObjectIteratorGetValue_3($0 + 56 | 0);
    HEAP32[$0 + 48 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 52 >> 2], 102482);
    jshPinWatch(jshGetPinFromVar(HEAP32[$0 + 48 >> 2]) & 255, 0, 0);
    jsvUnLock2(HEAP32[$0 + 48 >> 2], HEAP32[$0 + 52 >> 2]);
    jsvObjectIteratorNext($0 + 56 | 0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree_3($0 + 56 | 0);
  jsvUnRef(HEAP32[$0 + 60 >> 2]);
  jsvUnLock(HEAP32[$0 + 60 >> 2]);
  HEAP16[93523] = 0;
 }
 if (HEAPU8[154464]) {
  jsvObjectSetChildAndUnLock(HEAP32[46748], 100312, jsvNewFromInteger(HEAPU8[154464]));
 }
 HEAP32[$0 + 44 >> 2] = jsvNewFromEmptyString_5();
 if (HEAP32[$0 + 44 >> 2]) {
  jsvStringIteratorNew($0 + 8 | 0, HEAP32[$0 + 44 >> 2], 0);
  jsiDumpHardwareInitialisation(2, $0 + 8 | 0, 0);
  jsvStringIteratorFree_5($0 + 8 | 0);
  jsvObjectSetChild(HEAP32[46748], 97862, HEAP32[$0 + 44 >> 2]);
  jsvUnLock(HEAP32[$0 + 44 >> 2]);
 }
 HEAP16[93524] = HEAPU16[93524] & -2049;
 HEAP16[93524] = HEAPU16[93524] & -4097;
 __stack_pointer = $0 - -64 | 0;
}

function jswrap_banglejs_beep($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 if (HEAP32[$2 + 20 >> 2] <= 0) {
  HEAP32[$2 + 20 >> 2] = 4e3;
 }
 if (HEAP32[$2 + 20 >> 2] > 6e4) {
  HEAP32[$2 + 20 >> 2] = 6e4;
 }
 if (HEAP32[$2 + 24 >> 2] <= 0) {
  HEAP32[$2 + 24 >> 2] = 200;
 }
 if (HEAP32[$2 + 24 >> 2] > 5e3) {
  HEAP32[$2 + 24 >> 2] = 5e3;
 }
 label$5: {
  if (HEAP32[85832]) {
   HEAP32[$2 + 16 >> 2] = jsvNewNativeFunction(138, 289);
   HEAP32[$2 + 12 >> 2] = jsvNewFromInteger(HEAP32[$2 + 24 >> 2]);
   jsvAddFunctionParameter(HEAP32[$2 + 16 >> 2], 0, HEAP32[$2 + 12 >> 2]);
   jsvUnLock(HEAP32[$2 + 12 >> 2]);
   HEAP32[$2 + 12 >> 2] = jsvNewFromInteger(HEAP32[$2 + 20 >> 2]);
   jsvAddFunctionParameter(HEAP32[$2 + 16 >> 2], 0, HEAP32[$2 + 12 >> 2]);
   jsvUnLock(HEAP32[$2 + 12 >> 2]);
   HEAP32[$2 + 8 >> 2] = jswrap_promise_then(HEAP32[85832], HEAP32[$2 + 16 >> 2], 0);
   jsvUnLock(HEAP32[$2 + 16 >> 2]);
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 8 >> 2];
   break label$5;
  }
  HEAP32[85832] = jspromise_create();
  if (!HEAP32[85832]) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$5;
  }
  if (HEAP32[85796] & 256) {
   HEAP16[171661] = HEAP32[$2 + 20 >> 2];
   label$9: {
    if (HEAP32[85796] & 128) {
     _jswrap_banglejs_setVibration();
     break label$9;
    }
    jshPinAnalogOutput(18, .5, +HEAP32[$2 + 20 >> 2], 0);
   }
  }
  jstExecuteFn(587, 0, jshGetTimeFromMilliseconds(+HEAP32[$2 + 24 >> 2]), i64toi32_i32$HIGH_BITS, 0, 0);
  HEAP32[$2 + 28 >> 2] = jsvLockAgain(HEAP32[85832]);
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function void_20tflite__reference_ops__AffineQuantize_float_2c_20short__28tflite__QuantizationParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20short__29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = Math_fround(0);
 $5 = __stack_pointer + -64 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 60 >> 2] = $0;
 HEAP32[$5 + 56 >> 2] = $1;
 HEAP32[$5 + 52 >> 2] = $2;
 HEAP32[$5 + 48 >> 2] = $3;
 HEAP32[$5 + 44 >> 2] = $4;
 HEAP32[$5 + 40 >> 2] = HEAP32[HEAP32[$5 + 60 >> 2] >> 2];
 HEAPF64[$5 + 32 >> 3] = HEAPF64[HEAP32[$5 + 60 >> 2] + 8 >> 3];
 HEAP32[$5 + 28 >> 2] = tflite__MatchingFlatSize_28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__29(HEAP32[$5 + 56 >> 2], HEAP32[$5 + 48 >> 2]);
 HEAP32[$5 + 24 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 24 >> 2] < HEAP32[$5 + 28 >> 2]) {
   HEAPF32[$5 + 20 >> 2] = HEAPF32[HEAP32[$5 + 52 >> 2] + (HEAP32[$5 + 24 >> 2] << 2) >> 2];
   $6 = float_20tflite__TfLiteRound_float__28float_29(Math_fround(HEAPF32[$5 + 20 >> 2] / Math_fround(HEAPF64[$5 + 32 >> 3])));
   label$3: {
    if (Math_fround(Math_abs($6)) < Math_fround(2147483648)) {
     $0 = ~~$6;
     break label$3;
    }
    $0 = -2147483648;
   }
   HEAP32[$5 + 16 >> 2] = $0 + HEAP32[$5 + 40 >> 2];
   HEAP32[$5 + 12 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29(int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($5 + 16 | 0, 148072), 148076) >> 2];
   HEAP16[HEAP32[$5 + 44 >> 2] + (HEAP32[$5 + 24 >> 2] << 1) >> 1] = HEAP32[$5 + 12 >> 2];
   HEAP32[$5 + 24 >> 2] = HEAP32[$5 + 24 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $5 - -64 | 0;
}

function jswrap_object_emit($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $4 = __stack_pointer + -64 | 0;
 $3 = $4;
 __stack_pointer = $3;
 HEAP32[$3 + 60 >> 2] = $0;
 HEAP32[$3 + 56 >> 2] = $1;
 HEAP32[$3 + 52 >> 2] = $2;
 label$1: {
  if (!(jsvHasChildren(HEAP32[$3 + 60 >> 2]) & 1)) {
   jsExceptionHere(3, 107694, 0);
   break label$1;
  }
  if (!(jsvIsString(HEAP32[$3 + 56 >> 2]) & 1)) {
   jsExceptionHere(3, 103795, 0);
   break label$1;
  }
  HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 56 >> 2];
  HEAP32[$3 + 48 >> 2] = jsvVarPrintf(97042, $3 + 16 | 0);
  if (!HEAP32[$3 + 48 >> 2]) {
   break label$1;
  }
  HEAP32[$3 + 44 >> 2] = 4;
  HEAP32[$3 + 40 >> 2] = $4;
  $4 = $4 - 16 | 0;
  __stack_pointer = $4;
  HEAP32[$3 + 36 >> 2] = 0;
  jsvObjectIteratorNew($3 + 32 | 0, HEAP32[$3 + 52 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_9($3 + 32 | 0) & 1) {
    if (HEAPU32[$3 + 36 >> 2] >= 4) {
     HEAP32[$3 >> 2] = 4;
     jsExceptionHere(3, 126332, $3);
    } else {
     $0 = jsvObjectIteratorGetValue_9($3 + 32 | 0);
     $1 = HEAP32[$3 + 36 >> 2];
     HEAP32[$3 + 36 >> 2] = $1 + 1;
     HEAP32[($1 << 2) + $4 >> 2] = $0;
     jsvObjectIteratorNext($3 + 32 | 0);
     continue;
    }
   }
   break;
  }
  jsvObjectIteratorFree_9($3 + 32 | 0);
  HEAP32[$3 + 28 >> 2] = jsvSkipNameAndUnLock(jsvFindChildFromVar(HEAP32[$3 + 60 >> 2], HEAP32[$3 + 48 >> 2], 0));
  jsvUnLock(HEAP32[$3 + 48 >> 2]);
  if (HEAP32[$3 + 28 >> 2]) {
   jsiQueueEvents(HEAP32[$3 + 60 >> 2], HEAP32[$3 + 28 >> 2], $4, HEAP32[$3 + 36 >> 2]);
  }
  jsvUnLock(HEAP32[$3 + 28 >> 2]);
  jsvUnLockMany(HEAP32[$3 + 36 >> 2], $4);
 }
 __stack_pointer = $3 - -64 | 0;
}

function jswrap_promise_then($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 40 >> 2] = $0;
 HEAP32[$3 + 36 >> 2] = $1;
 HEAP32[$3 + 32 >> 2] = $2;
 HEAP32[$3 + 24 >> 2] = jspromise_create_prombox($3 + 28 | 0);
 label$1: {
  if (!HEAP32[$3 + 24 >> 2]) {
   HEAP32[$3 + 44 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$3 + 28 >> 2]) {
   if (!(jsvIsFunction(HEAP32[$3 + 36 >> 2]) & 1)) {
    HEAP32[$3 + 36 >> 2] = 0;
   }
   if (!(jsvIsFunction(HEAP32[$3 + 32 >> 2]) & 1)) {
    HEAP32[$3 + 32 >> 2] = 0;
   }
   HEAP32[$3 + 20 >> 2] = jsvObjectGetIntegerChild(HEAP32[$3 + 40 >> 2], 104628);
   label$6: {
    if (!HEAP32[$3 + 20 >> 2]) {
     _jswrap_promise_add_reaction(HEAP32[$3 + 40 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 36 >> 2], 1);
     _jswrap_promise_add_reaction(HEAP32[$3 + 40 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 32 >> 2], 0);
     break label$6;
    }
    if (HEAP32[$3 + 20 >> 2] == 2) {
     $0 = HEAP32[$3 + 36 >> 2];
    } else {
     $0 = HEAP32[$3 + 32 >> 2];
    }
    HEAP32[$3 + 16 >> 2] = $0;
    HEAP32[$3 + 12 >> 2] = _jswrap_promise_new_reaction(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 16 >> 2]);
    if (HEAP32[$3 + 12 >> 2]) {
     HEAP32[$3 + 8 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 40 >> 2], 102991);
     _jswrap_promise_queue_reaction(HEAP32[$3 + 40 >> 2], HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], 0);
     jsvUnLock2(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 12 >> 2]);
    }
   }
  }
  jsvUnLock(HEAP32[$3 + 24 >> 2]);
  HEAP32[$3 + 44 >> 2] = jsvLockAgainSafe(HEAP32[$3 + 28 >> 2]);
 }
 __stack_pointer = $3 + 48 | 0;
 return HEAP32[$3 + 44 >> 2];
}

function void_20tflite__reference_ops__Requantize_signed_20char_2c_20signed_20char__28signed_20char_20const__2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20signed_20char__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0;
 $7 = __stack_pointer + -64 | 0;
 __stack_pointer = $7;
 HEAP32[$7 + 60 >> 2] = $0;
 HEAP32[$7 + 56 >> 2] = $1;
 HEAP32[$7 + 52 >> 2] = $2;
 HEAP32[$7 + 48 >> 2] = $3;
 HEAP32[$7 + 44 >> 2] = $4;
 HEAP32[$7 + 40 >> 2] = $5;
 HEAP32[$7 + 36 >> 2] = $6;
 ruy__profiler__ScopeLabel__ScopeLabel_char_20const___28char_20const__29($7 + 32 | 0, 104146);
 $8 = HEAP32[$7 + 52 >> 2] == 1073741824 ? HEAP32[$7 + 48 >> 2] == 1 : $8;
 HEAP8[$7 + 31 | 0] = $8;
 if (HEAP8[$7 + 31 | 0] & 1) {
  HEAP8[$7 + 30 | 0] = 0;
  HEAP8[$7 + 29 | 0] = 0;
  HEAP32[$7 + 24 >> 2] = HEAP32[$7 + 44 >> 2] - HEAP32[$7 + 40 >> 2];
 }
 HEAP32[$7 + 20 >> 2] = 0;
 while (1) {
  if (HEAP32[$7 + 20 >> 2] < HEAP32[$7 + 56 >> 2]) {
   HEAP32[$7 + 16 >> 2] = HEAP8[HEAP32[$7 + 60 >> 2] + HEAP32[$7 + 20 >> 2] | 0] - HEAP32[$7 + 44 >> 2];
   HEAP32[$7 + 12 >> 2] = tflite__MultiplyByQuantizedMultiplier_28int_2c_20int_2c_20int_29(HEAP32[$7 + 16 >> 2], HEAP32[$7 + 52 >> 2], HEAP32[$7 + 48 >> 2]) + HEAP32[$7 + 40 >> 2];
   HEAP32[$7 + 8 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29(int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($7 + 12 | 0, 148100), 148096) >> 2];
   HEAP8[HEAP32[$7 + 36 >> 2] + HEAP32[$7 + 20 >> 2] | 0] = HEAP32[$7 + 8 >> 2];
   HEAP32[$7 + 20 >> 2] = HEAP32[$7 + 20 >> 2] + 1;
   continue;
  }
  break;
 }
 ruy__profiler__ScopeLabel___ScopeLabel_28_29($7 + 32 | 0);
 __stack_pointer = $7 - -64 | 0;
}

function jswrap_tensorflow_create($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 label$1: {
  if (HEAP32[$2 + 40 >> 2] < 512) {
   jsExceptionHere(1, 104318, 0);
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 32 >> 2] = 0;
  HEAP32[$2 + 28 >> 2] = jsvGetDataPointer(HEAP32[$2 + 36 >> 2], $2 + 32 | 0);
  if (!HEAP32[$2 + 28 >> 2]) {
   jsExceptionHere(3, 101368, 0);
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 24 >> 2] = jspNewObject(0, 101140);
  if (!HEAP32[$2 + 24 >> 2]) {
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 20 >> 2] = tf_get_size(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 28 >> 2]);
  HEAP32[$2 + 16 >> 2] = jsvNewFlatStringOfLength(HEAP32[$2 + 20 >> 2] + 15 | 0);
  if (!HEAP32[$2 + 16 >> 2]) {
   jsExceptionHere(1, 96833, 0);
   jsvUnLock(HEAP32[$2 + 24 >> 2]);
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  if (!jsvGetDataPointer(HEAP32[$2 + 16 >> 2], $2 + 20 | 0)) {
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  jsvObjectSetChild(HEAP32[$2 + 24 >> 2], 102972, HEAP32[$2 + 36 >> 2]);
  jsvObjectSetChildAndUnLock(HEAP32[$2 + 24 >> 2], 103326, HEAP32[$2 + 16 >> 2]);
  HEAP32[$2 + 12 >> 2] = jswrap_tfmicrointerpreter_getTFMI(HEAP32[$2 + 24 >> 2]);
  if (!(tf_create(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 40 >> 2], HEAP32[$2 + 28 >> 2]) & 1)) {
   jsExceptionHere(1, 106633, 0);
   jsvUnLock(HEAP32[$2 + 24 >> 2]);
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 24 >> 2];
 }
 __stack_pointer = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}

function st_step_search($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 HEAP16[$1 + 22 >> 1] = get_input_buffer_size(HEAP32[$1 + 24 >> 2]);
 HEAP16[$1 + 20 >> 1] = get_lookahead_size(HEAP32[$1 + 24 >> 2]);
 HEAP16[$1 + 18 >> 1] = HEAPU16[HEAP32[$1 + 24 >> 2] + 2 >> 1];
 HEAP8[$1 + 17 | 0] = (is_finishing(HEAP32[$1 + 24 >> 2]) | 0) != 0;
 label$1: {
  if (HEAPU16[$1 + 18 >> 1] > (HEAPU16[HEAP32[$1 + 24 >> 2] >> 1] - (HEAP8[$1 + 17 | 0] & 1 ? 1 : HEAPU16[$1 + 20 >> 1]) | 0)) {
   HEAP32[$1 + 28 >> 2] = HEAP8[$1 + 17 | 0] & 1 ? 8 : 7;
   break label$1;
  }
  HEAP16[$1 + 14 >> 1] = get_input_offset(HEAP32[$1 + 24 >> 2]);
  HEAP16[$1 + 12 >> 1] = HEAPU16[$1 + 14 >> 1] + HEAPU16[$1 + 18 >> 1];
  HEAP16[$1 + 10 >> 1] = HEAPU16[$1 + 12 >> 1] - HEAPU16[$1 + 22 >> 1];
  HEAP16[$1 + 8 >> 1] = HEAPU16[$1 + 20 >> 1];
  if (HEAPU16[$1 + 20 >> 1] > (HEAPU16[HEAP32[$1 + 24 >> 2] >> 1] - HEAPU16[$1 + 18 >> 1] | 0)) {
   HEAP16[$1 + 8 >> 1] = HEAPU16[HEAP32[$1 + 24 >> 2] >> 1] - HEAPU16[$1 + 18 >> 1];
  }
  HEAP16[$1 + 6 >> 1] = 0;
  HEAP16[$1 + 4 >> 1] = find_longest_match(HEAP32[$1 + 24 >> 2], HEAPU16[$1 + 10 >> 1], HEAPU16[$1 + 12 >> 1], HEAPU16[$1 + 8 >> 1], $1 + 6 | 0);
  if (HEAPU16[$1 + 4 >> 1] == 65535) {
   $0 = HEAP32[$1 + 24 >> 2];
   HEAP16[$0 + 2 >> 1] = HEAPU16[$0 + 2 >> 1] + 1;
   HEAP16[HEAP32[$1 + 24 >> 2] + 4 >> 1] = 0;
   HEAP32[$1 + 28 >> 2] = 3;
   break label$1;
  }
  HEAP16[HEAP32[$1 + 24 >> 2] + 6 >> 1] = HEAPU16[$1 + 4 >> 1];
  HEAP16[HEAP32[$1 + 24 >> 2] + 4 >> 1] = HEAPU16[$1 + 6 >> 1];
  HEAP32[$1 + 28 >> 2] = 3;
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function void_20tflite__reference_ops__Requantize_short_2c_20signed_20char__28short_20const__2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20signed_20char__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0;
 $7 = __stack_pointer + -64 | 0;
 __stack_pointer = $7;
 HEAP32[$7 + 60 >> 2] = $0;
 HEAP32[$7 + 56 >> 2] = $1;
 HEAP32[$7 + 52 >> 2] = $2;
 HEAP32[$7 + 48 >> 2] = $3;
 HEAP32[$7 + 44 >> 2] = $4;
 HEAP32[$7 + 40 >> 2] = $5;
 HEAP32[$7 + 36 >> 2] = $6;
 ruy__profiler__ScopeLabel__ScopeLabel_char_20const___28char_20const__29($7 + 32 | 0, 104146);
 $8 = HEAP32[$7 + 52 >> 2] == 1073741824 ? HEAP32[$7 + 48 >> 2] == 1 : $8;
 HEAP8[$7 + 31 | 0] = $8;
 if (HEAP8[$7 + 31 | 0] & 1) {
  HEAP8[$7 + 30 | 0] = 0;
  HEAP8[$7 + 29 | 0] = 0;
  HEAP32[$7 + 24 >> 2] = HEAP32[$7 + 44 >> 2] - HEAP32[$7 + 40 >> 2];
 }
 HEAP32[$7 + 20 >> 2] = 0;
 while (1) {
  if (HEAP32[$7 + 20 >> 2] < HEAP32[$7 + 56 >> 2]) {
   HEAP32[$7 + 16 >> 2] = HEAP16[HEAP32[$7 + 60 >> 2] + (HEAP32[$7 + 20 >> 2] << 1) >> 1] - HEAP32[$7 + 44 >> 2];
   HEAP32[$7 + 12 >> 2] = tflite__MultiplyByQuantizedMultiplier_28int_2c_20int_2c_20int_29(HEAP32[$7 + 16 >> 2], HEAP32[$7 + 52 >> 2], HEAP32[$7 + 48 >> 2]) + HEAP32[$7 + 40 >> 2];
   HEAP32[$7 + 8 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29(int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($7 + 12 | 0, 148084), 148080) >> 2];
   HEAP8[HEAP32[$7 + 36 >> 2] + HEAP32[$7 + 20 >> 2] | 0] = HEAP32[$7 + 8 >> 2];
   HEAP32[$7 + 20 >> 2] = HEAP32[$7 + 20 >> 2] + 1;
   continue;
  }
  break;
 }
 ruy__profiler__ScopeLabel___ScopeLabel_28_29($7 + 32 | 0);
 __stack_pointer = $7 - -64 | 0;
}

function tflite__MicroInterpreter__ResetVariableTensors_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 $0 = HEAP32[$1 + 24 >> 2];
 HEAP32[$1 + 20 >> 2] = 0;
 label$1: {
  while (1) {
   if (HEAPU32[$1 + 20 >> 2] < flatbuffers__Vector_flatbuffers__Offset_tflite__Tensor____size_28_29_20const(tflite__SubGraph__tensors_28_29_20const(HEAP32[$0 + 116 >> 2])) >>> 0) {
    HEAP32[$1 + 16 >> 2] = flatbuffers__Vector_flatbuffers__Offset_tflite__Tensor____Get_28unsigned_20int_29_20const(tflite__SubGraph__tensors_28_29_20const(HEAP32[$0 + 116 >> 2]), HEAP32[$1 + 20 >> 2]);
    if (tflite__Tensor__is_variable_28_29_20const(HEAP32[$1 + 16 >> 2]) & 1) {
     HEAP32[$1 + 8 >> 2] = tflite__TfLiteEvalTensorByteLength_28TfLiteEvalTensor_20const__2c_20unsigned_20long__29(HEAP32[$0 + 120 >> 2] + Math_imul(HEAP32[$1 + 20 >> 2], 12) | 0, $1 + 12 | 0);
     if (HEAP32[$1 + 8 >> 2]) {
      HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 8 >> 2];
      break label$1;
     }
     HEAP32[$1 + 4 >> 2] = 0;
     if ((tflite__Tensor__type_28_29_20const(HEAP32[$1 + 16 >> 2]) | 0) == 9) {
      HEAP32[$1 + 4 >> 2] = flatbuffers__Vector_long_20long___Get_28unsigned_20int_29_20const(tflite__QuantizationParameters__zero_point_28_29_20const(tflite__Tensor__quantization_28_29_20const(HEAP32[$1 + 16 >> 2])), 0);
     }
     memset(HEAP32[HEAP32[$0 + 120 >> 2] + Math_imul(HEAP32[$1 + 20 >> 2], 12) >> 2], HEAP32[$1 + 4 >> 2], HEAP32[$1 + 12 >> 2]);
    }
    HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 20 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$1 + 28 >> 2] = 0;
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function void_20tflite__reference_ops__Requantize_signed_20char_2c_20int__28signed_20char_20const__2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0;
 $7 = __stack_pointer + -64 | 0;
 __stack_pointer = $7;
 HEAP32[$7 + 60 >> 2] = $0;
 HEAP32[$7 + 56 >> 2] = $1;
 HEAP32[$7 + 52 >> 2] = $2;
 HEAP32[$7 + 48 >> 2] = $3;
 HEAP32[$7 + 44 >> 2] = $4;
 HEAP32[$7 + 40 >> 2] = $5;
 HEAP32[$7 + 36 >> 2] = $6;
 ruy__profiler__ScopeLabel__ScopeLabel_char_20const___28char_20const__29($7 + 32 | 0, 104146);
 $8 = HEAP32[$7 + 52 >> 2] == 1073741824 ? HEAP32[$7 + 48 >> 2] == 1 : $8;
 HEAP8[$7 + 31 | 0] = $8;
 if (HEAP8[$7 + 31 | 0] & 1) {
  HEAP8[$7 + 30 | 0] = 0;
  HEAP8[$7 + 29 | 0] = 0;
  HEAP32[$7 + 24 >> 2] = HEAP32[$7 + 44 >> 2] - HEAP32[$7 + 40 >> 2];
 }
 HEAP32[$7 + 20 >> 2] = 0;
 while (1) {
  if (HEAP32[$7 + 20 >> 2] < HEAP32[$7 + 56 >> 2]) {
   HEAP32[$7 + 16 >> 2] = HEAP8[HEAP32[$7 + 60 >> 2] + HEAP32[$7 + 20 >> 2] | 0] - HEAP32[$7 + 44 >> 2];
   HEAP32[$7 + 12 >> 2] = tflite__MultiplyByQuantizedMultiplier_28int_2c_20int_2c_20int_29(HEAP32[$7 + 16 >> 2], HEAP32[$7 + 52 >> 2], HEAP32[$7 + 48 >> 2]) + HEAP32[$7 + 40 >> 2];
   HEAP32[$7 + 8 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29(int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($7 + 12 | 0, 148116), 148112) >> 2];
   HEAP32[HEAP32[$7 + 36 >> 2] + (HEAP32[$7 + 20 >> 2] << 2) >> 2] = HEAP32[$7 + 8 >> 2];
   HEAP32[$7 + 20 >> 2] = HEAP32[$7 + 20 >> 2] + 1;
   continue;
  }
  break;
 }
 ruy__profiler__ScopeLabel___ScopeLabel_28_29($7 + 32 | 0);
 __stack_pointer = $7 - -64 | 0;
}
function tflite__BytesRequiredForTensor_28tflite__Tensor_20const__2c_20unsigned_20long__2c_20unsigned_20long__2c_20tflite__ErrorReporter__29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 40 >> 2] = $0;
 HEAP32[$4 + 36 >> 2] = $1;
 HEAP32[$4 + 32 >> 2] = $2;
 HEAP32[$4 + 28 >> 2] = $3;
 HEAP32[$4 + 24 >> 2] = 1;
 if (tflite__Tensor__shape_28_29_20const(HEAP32[$4 + 40 >> 2])) {
  HEAP32[$4 + 20 >> 2] = 0;
  while (1) {
   if (HEAPU32[$4 + 20 >> 2] < flatbuffers__Vector_int___Length_28_29_20const(tflite__Tensor__shape_28_29_20const(HEAP32[$4 + 40 >> 2])) >>> 0) {
    HEAP32[$4 + 24 >> 2] = Math_imul(flatbuffers__Vector_int___Get_28unsigned_20int_29_20const(tflite__Tensor__shape_28_29_20const(HEAP32[$4 + 40 >> 2]), HEAP32[$4 + 20 >> 2]), HEAP32[$4 + 24 >> 2]);
    HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 20 >> 2] + 1;
    continue;
   }
   break;
  }
 }
 HEAP32[$4 + 12 >> 2] = tflite__ConvertTensorType_28tflite__TensorType_2c_20TfLiteType__2c_20tflite__ErrorReporter__29(tflite__Tensor__type_28_29_20const(HEAP32[$4 + 40 >> 2]), $4 + 16 | 0, HEAP32[$4 + 28 >> 2]);
 label$4: {
  if (HEAP32[$4 + 12 >> 2]) {
   HEAP32[$4 + 44 >> 2] = HEAP32[$4 + 12 >> 2];
   break label$4;
  }
  HEAP32[$4 + 8 >> 2] = tflite__TfLiteTypeSizeOf_28TfLiteType_2c_20unsigned_20long__29(HEAP32[$4 + 16 >> 2], HEAP32[$4 + 32 >> 2]);
  if (HEAP32[$4 + 8 >> 2]) {
   HEAP32[$4 + 44 >> 2] = HEAP32[$4 + 8 >> 2];
   break label$4;
  }
  HEAP32[HEAP32[$4 + 36 >> 2] >> 2] = Math_imul(HEAP32[$4 + 24 >> 2], HEAP32[HEAP32[$4 + 32 >> 2] >> 2]);
  HEAP32[$4 + 44 >> 2] = 0;
 }
 __stack_pointer = $4 + 48 | 0;
 return HEAP32[$4 + 44 >> 2];
}

function void_20tflite__reference_ops__Requantize_short_2c_20short__28short_20const__2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20short__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0;
 $7 = __stack_pointer + -64 | 0;
 __stack_pointer = $7;
 HEAP32[$7 + 60 >> 2] = $0;
 HEAP32[$7 + 56 >> 2] = $1;
 HEAP32[$7 + 52 >> 2] = $2;
 HEAP32[$7 + 48 >> 2] = $3;
 HEAP32[$7 + 44 >> 2] = $4;
 HEAP32[$7 + 40 >> 2] = $5;
 HEAP32[$7 + 36 >> 2] = $6;
 ruy__profiler__ScopeLabel__ScopeLabel_char_20const___28char_20const__29($7 + 32 | 0, 104146);
 $8 = HEAP32[$7 + 52 >> 2] == 1073741824 ? HEAP32[$7 + 48 >> 2] == 1 : $8;
 HEAP8[$7 + 31 | 0] = $8;
 if (HEAP8[$7 + 31 | 0] & 1) {
  HEAP8[$7 + 30 | 0] = 0;
  HEAP8[$7 + 29 | 0] = 0;
  HEAP32[$7 + 24 >> 2] = HEAP32[$7 + 44 >> 2] - HEAP32[$7 + 40 >> 2];
 }
 HEAP32[$7 + 20 >> 2] = 0;
 while (1) {
  if (HEAP32[$7 + 20 >> 2] < HEAP32[$7 + 56 >> 2]) {
   HEAP32[$7 + 16 >> 2] = HEAP16[HEAP32[$7 + 60 >> 2] + (HEAP32[$7 + 20 >> 2] << 1) >> 1] - HEAP32[$7 + 44 >> 2];
   HEAP32[$7 + 12 >> 2] = tflite__MultiplyByQuantizedMultiplier_28int_2c_20int_2c_20int_29(HEAP32[$7 + 16 >> 2], HEAP32[$7 + 52 >> 2], HEAP32[$7 + 48 >> 2]) + HEAP32[$7 + 40 >> 2];
   HEAP32[$7 + 8 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29(int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($7 + 12 | 0, 148092), 148088) >> 2];
   HEAP16[HEAP32[$7 + 36 >> 2] + (HEAP32[$7 + 20 >> 2] << 1) >> 1] = HEAP32[$7 + 8 >> 2];
   HEAP32[$7 + 20 >> 2] = HEAP32[$7 + 20 >> 2] + 1;
   continue;
  }
  break;
 }
 ruy__profiler__ScopeLabel___ScopeLabel_28_29($7 + 32 | 0);
 __stack_pointer = $7 - -64 | 0;
}

function jswrap_io_digitalRead($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 40 >> 2] = $0;
 label$1: {
  if (jsvIsArray(HEAP32[$1 + 40 >> 2]) & 1) {
   HEAP32[$1 + 36 >> 2] = 0;
   HEAP32[$1 + 32 >> 2] = 0;
   jsvObjectIteratorNew($1 + 24 | 0, HEAP32[$1 + 40 >> 2]);
   while (1) {
    if (jsvObjectIteratorHasValue_15($1 + 24 | 0) & 1) {
     HEAP32[$1 + 20 >> 2] = jsvObjectIteratorGetValue_14($1 + 24 | 0);
     HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 32 >> 2] << 1 | jshPinInput(jshGetPinFromVar(HEAP32[$1 + 20 >> 2]) & 255) & 1;
     jsvUnLock(HEAP32[$1 + 20 >> 2]);
     jsvObjectIteratorNext($1 + 24 | 0);
     HEAP32[$1 + 36 >> 2] = HEAP32[$1 + 36 >> 2] + 1;
     continue;
    }
    break;
   }
   jsvObjectIteratorFree_15($1 + 24 | 0);
   if (!HEAP32[$1 + 36 >> 2]) {
    HEAP32[$1 + 44 >> 2] = 0;
    break label$1;
   }
   HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 32 >> 2];
   break label$1;
  }
  if (jsvIsObject(HEAP32[$1 + 40 >> 2]) & 1) {
   HEAP32[$1 + 16 >> 2] = 0;
   HEAP32[$1 + 12 >> 2] = jspGetNamedField(HEAP32[$1 + 40 >> 2], 107017, 0);
   label$7: {
    if (jsvIsFunction(HEAP32[$1 + 12 >> 2]) & 1) {
     HEAP32[$1 + 16 >> 2] = jsvGetIntegerAndUnLock(jspeFunctionCall(HEAP32[$1 + 12 >> 2], 0, HEAP32[$1 + 40 >> 2], 0, 0, 0));
     break label$7;
    }
    jsExceptionHere(1, 102474, 0);
   }
   jsvUnLock(HEAP32[$1 + 12 >> 2]);
   HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 16 >> 2];
   break label$1;
  }
  HEAP8[$1 + 11 | 0] = jshGetPinFromVar(HEAP32[$1 + 40 >> 2]);
  HEAP32[$1 + 44 >> 2] = jshPinInput(HEAPU8[$1 + 11 | 0]) & 1;
 }
 __stack_pointer = $1 + 48 | 0;
 return HEAP32[$1 + 44 >> 2];
}

function jswrap_parseInt($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 144 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 136 >> 2] = $0;
 HEAP32[$2 + 132 >> 2] = $1;
 HEAP32[$2 + 128 >> 2] = 0;
 if (jsvIsNumeric(HEAP32[$2 + 132 >> 2]) & 1) {
  HEAP32[$2 + 128 >> 2] = jsvGetInteger(HEAP32[$2 + 132 >> 2]);
 }
 label$2: {
  label$3: {
   if (!(jsvIsFloat(HEAP32[$2 + 136 >> 2]) & 1)) {
    break label$3;
   }
   __DOUBLE_BITS_4(jsvGetFloat(HEAP32[$2 + 136 >> 2]));
   if ((i64toi32_i32$HIGH_BITS & 2147483647) >>> 0 < 2146435072) {
    break label$3;
   }
   HEAP32[$2 + 140 >> 2] = jsvNewFromFloat(nan);
   break label$2;
  }
  HEAP32[$2 + 44 >> 2] = $2 + 48;
  jsvGetString(HEAP32[$2 + 136 >> 2], $2 + 48 | 0, 70);
  HEAP8[$2 + 43 | 0] = 0;
  if (!(HEAP8[$2 + 49 | 0] != 120 & HEAP8[$2 + 49 | 0] != 88 | (HEAP8[$2 + 48 | 0] != 48 | (HEAP32[$2 + 128 >> 2] != 16 ? HEAP32[$2 + 128 >> 2] : 0)))) {
   HEAP32[$2 + 128 >> 2] = 16;
   HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 44 >> 2] + 2;
  }
  if (!HEAP32[$2 + 128 >> 2]) {
   HEAP32[$2 + 128 >> 2] = 10;
  }
  HEAP32[$2 + 24 >> 2] = stringToIntWithRadix(HEAP32[$2 + 44 >> 2], HEAP32[$2 + 128 >> 2], $2 + 43 | 0, $2 + 36 | 0);
  HEAP32[$2 + 28 >> 2] = i64toi32_i32$HIGH_BITS;
  if (HEAP8[$2 + 43 | 0] & 1) {
   HEAP32[$2 + 140 >> 2] = jsvNewFromFloat(nan);
   break label$2;
  }
  if (HEAP32[$2 + 36 >> 2] == ($2 + 117 | 0)) {
   jsExceptionHere(1, 101497, 0);
   HEAP32[$2 + 140 >> 2] = jsvNewFromFloat(nan);
   break label$2;
  }
  HEAP32[$2 + 140 >> 2] = jsvNewFromLongInteger(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 28 >> 2]);
 }
 __stack_pointer = $2 + 144 | 0;
 return HEAP32[$2 + 140 >> 2];
}

function void_20tflite__reference_ops__Requantize_short_2c_20int__28short_20const__2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0;
 $7 = __stack_pointer + -64 | 0;
 __stack_pointer = $7;
 HEAP32[$7 + 60 >> 2] = $0;
 HEAP32[$7 + 56 >> 2] = $1;
 HEAP32[$7 + 52 >> 2] = $2;
 HEAP32[$7 + 48 >> 2] = $3;
 HEAP32[$7 + 44 >> 2] = $4;
 HEAP32[$7 + 40 >> 2] = $5;
 HEAP32[$7 + 36 >> 2] = $6;
 ruy__profiler__ScopeLabel__ScopeLabel_char_20const___28char_20const__29($7 + 32 | 0, 104146);
 $8 = HEAP32[$7 + 52 >> 2] == 1073741824 ? HEAP32[$7 + 48 >> 2] == 1 : $8;
 HEAP8[$7 + 31 | 0] = $8;
 if (HEAP8[$7 + 31 | 0] & 1) {
  HEAP8[$7 + 30 | 0] = 0;
  HEAP8[$7 + 29 | 0] = 0;
  HEAP32[$7 + 24 >> 2] = HEAP32[$7 + 44 >> 2] - HEAP32[$7 + 40 >> 2];
 }
 HEAP32[$7 + 20 >> 2] = 0;
 while (1) {
  if (HEAP32[$7 + 20 >> 2] < HEAP32[$7 + 56 >> 2]) {
   HEAP32[$7 + 16 >> 2] = HEAP16[HEAP32[$7 + 60 >> 2] + (HEAP32[$7 + 20 >> 2] << 1) >> 1] - HEAP32[$7 + 44 >> 2];
   HEAP32[$7 + 12 >> 2] = tflite__MultiplyByQuantizedMultiplier_28int_2c_20int_2c_20int_29(HEAP32[$7 + 16 >> 2], HEAP32[$7 + 52 >> 2], HEAP32[$7 + 48 >> 2]) + HEAP32[$7 + 40 >> 2];
   HEAP32[$7 + 8 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29(int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($7 + 12 | 0, 148108), 148104) >> 2];
   HEAP32[HEAP32[$7 + 36 >> 2] + (HEAP32[$7 + 20 >> 2] << 2) >> 2] = HEAP32[$7 + 8 >> 2];
   HEAP32[$7 + 20 >> 2] = HEAP32[$7 + 20 >> 2] + 1;
   continue;
  }
  break;
 }
 ruy__profiler__ScopeLabel___ScopeLabel_28_29($7 + 32 | 0);
 __stack_pointer = $7 - -64 | 0;
}

function jsvStringIteratorAppend($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 label$1: {
  if (!HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2]) {
   break label$1;
  }
  if (HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2]) {
   $0 = HEAP32[$2 + 12 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
  }
  if (HEAPU32[HEAP32[$2 + 12 >> 2] >> 2] >= jsvGetMaxCharactersInVar(HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2]) >>> 0) {
   if (!(jsvHasStringExt(HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2]) & 1)) {
    break label$1;
   }
   HEAP32[$2 + 4 >> 2] = jsvNewWithFlags(40);
   if (!HEAP32[$2 + 4 >> 2]) {
    jsvUnLock(HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2]);
    HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2] = 0;
    HEAP32[HEAP32[$2 + 12 >> 2] + 16 >> 2] = 0;
    HEAP32[HEAP32[$2 + 12 >> 2] >> 2] = 0;
    break label$1;
   }
   jsvSetLastChild(HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2], jsvGetRef(HEAP32[$2 + 4 >> 2]) & 65535);
   jsvUnLock(HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2]);
   HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2] = HEAP32[$2 + 4 >> 2];
   HEAP32[HEAP32[$2 + 12 >> 2] + 16 >> 2] = HEAP32[$2 + 4 >> 2];
   $0 = HEAP32[$2 + 12 >> 2];
   HEAP32[$0 + 8 >> 2] = HEAP32[HEAP32[$2 + 12 >> 2] >> 2] + HEAP32[$0 + 8 >> 2];
   HEAP32[HEAP32[$2 + 12 >> 2] >> 2] = 0;
  }
  HEAP8[HEAP32[HEAP32[$2 + 12 >> 2] + 16 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0] = HEAPU8[$2 + 11 | 0];
  HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2] = HEAP32[HEAP32[$2 + 12 >> 2] >> 2] + 1;
  jsvSetCharactersInVar(HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2], HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
}

function graphicsSetCallbacks($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[$1 + 8 >> 2];
 HEAP8[$0 + 52 | 0] = 46;
 HEAP8[$0 + 53 | 0] = 2;
 HEAP8[$0 + 54 | 0] = 0;
 HEAP8[$0 + 55 | 0] = 0;
 $0 = HEAP32[$1 + 8 >> 2];
 HEAP8[$0 + 60 | 0] = 47;
 HEAP8[$0 + 61 | 0] = 2;
 HEAP8[$0 + 62 | 0] = 0;
 HEAP8[$0 + 63 | 0] = 0;
 $0 = HEAP32[$1 + 8 >> 2];
 HEAP8[$0 + 56 | 0] = 48;
 HEAP8[$0 + 57 | 0] = 2;
 HEAP8[$0 + 58 | 0] = 0;
 HEAP8[$0 + 59 | 0] = 0;
 $0 = HEAP32[$1 + 8 >> 2];
 HEAP8[$0 + 64 | 0] = 49;
 HEAP8[$0 + 65 | 0] = 2;
 HEAP8[$0 + 66 | 0] = 0;
 HEAP8[$0 + 67 | 0] = 0;
 $0 = HEAP32[$1 + 8 >> 2];
 HEAP8[$0 + 68 | 0] = 50;
 HEAP8[$0 + 69 | 0] = 2;
 HEAP8[$0 + 70 | 0] = 0;
 HEAP8[$0 + 71 | 0] = 0;
 $0 = HEAP32[$1 + 8 >> 2];
 label$1: {
  label$2: {
   if (!(HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24))) {
    lcdSetCallbacks_ArrayBuffer(HEAP32[$1 + 8 >> 2]);
    break label$2;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   label$4: {
    if ((HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24)) == 1) {
     lcdSetCallbacks_JS(HEAP32[$1 + 8 >> 2]);
     break label$4;
    }
    label$6: {
     $0 = HEAP32[$1 + 8 >> 2];
     if ((HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24)) == 5) {
      lcdST7789_setCallbacks(HEAP32[$1 + 8 >> 2]);
      break label$6;
     }
     HEAP8[$1 + 15 | 0] = 0;
     break label$1;
    }
   }
  }
  HEAP8[$1 + 15 | 0] = 1;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP8[$1 + 15 | 0] & 1;
}

function _jswrap_graphics_getFontInfo($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[HEAP32[$2 + 8 >> 2] >> 2] = (HEAPU8[$0 + 25 | 0] | HEAPU8[$0 + 26 | 0] << 8) & 57344;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP16[HEAP32[$2 + 8 >> 2] + 4 >> 1] = (HEAPU8[$0 + 25 | 0] | HEAPU8[$0 + 26 | 0] << 8) & 8191;
 HEAP16[HEAP32[$2 + 8 >> 2] + 6 >> 1] = HEAPU16[HEAP32[$2 + 8 >> 2] + 4 >> 1];
 HEAP16[HEAP32[$2 + 8 >> 2] + 8 >> 1] = HEAPU16[HEAP32[$2 + 8 >> 2] + 4 >> 1];
 if (HEAPU16[HEAP32[$2 + 8 >> 2] + 4 >> 1] & 4096) {
  HEAP16[HEAP32[$2 + 8 >> 2] + 6 >> 1] = HEAPU16[HEAP32[$2 + 8 >> 2] + 4 >> 1] & 63;
  HEAP16[HEAP32[$2 + 8 >> 2] + 8 >> 1] = (HEAPU16[HEAP32[$2 + 8 >> 2] + 4 >> 1] & 4032) >>> 6;
 }
 label$2: {
  if (HEAP32[HEAP32[$2 + 8 >> 2] >> 2] & 32768) {
   $0 = HEAP32[$2 + 12 >> 2];
   $0 = jsvGetIntegerAndUnLock(jsvObjectGetChildIfExists(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 111161));
   HEAP8[HEAP32[$2 + 8 >> 2] + 10 | 0] = $0;
   $0 = HEAP32[$2 + 12 >> 2];
   $0 = jsvObjectGetChildIfExists(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 108543);
   HEAP32[HEAP32[$2 + 8 >> 2] + 12 >> 2] = $0;
   $0 = HEAP32[$2 + 12 >> 2];
   $0 = jsvObjectGetChildIfExists(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 110126);
   HEAP32[HEAP32[$2 + 8 >> 2] + 16 >> 2] = $0;
   break label$2;
  }
  HEAP8[HEAP32[$2 + 8 >> 2] + 10 | 0] = 0;
 }
 __stack_pointer = $2 + 16 | 0;
}

function jswrap_json_stringify($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP32[$3 + 36 >> 2] = $2;
 HEAP32[$3 + 32 >> 2] = 15568;
 HEAP32[$3 + 28 >> 2] = jsvNewFromEmptyString_7();
 if (HEAP32[$3 + 28 >> 2]) {
  HEAP8[$3 + 23 | 0] = 0;
  HEAP8[$3 + 24 | 0] = 0;
  HEAP8[$3 + 25 | 0] = 0;
  HEAP8[$3 + 26 | 0] = 0;
  HEAP32[$3 + 16 >> 2] = 0;
  HEAP32[$3 + 20 >> 2] = 0;
  label$2: {
   if (jsvIsUndefined(HEAP32[$3 + 36 >> 2]) & 1) {
    break label$2;
   }
   if (jsvIsNull(HEAP32[$3 + 36 >> 2]) & 1) {
    break label$2;
   }
   label$4: {
    if (jsvIsNumeric(HEAP32[$3 + 36 >> 2]) & 1) {
     HEAP32[$3 + 12 >> 2] = jsvGetInteger(HEAP32[$3 + 36 >> 2]);
     if (HEAP32[$3 + 12 >> 2] < 0) {
      HEAP32[$3 + 12 >> 2] = 0;
     }
     if (HEAP32[$3 + 12 >> 2] > 10) {
      HEAP32[$3 + 12 >> 2] = 10;
     }
     HEAP8[HEAP32[$3 + 12 >> 2] + ($3 + 16 | 0) | 0] = 0;
     while (1) {
      if (HEAP32[$3 + 12 >> 2]) {
       $0 = HEAP32[$3 + 12 >> 2] - 1 | 0;
       HEAP32[$3 + 12 >> 2] = $0;
       HEAP8[($3 + 16 | 0) + $0 | 0] = 32;
       continue;
      }
      break;
     }
     break label$4;
    }
    HEAP32[$3 + 8 >> 2] = jsvGetString(HEAP32[$3 + 36 >> 2], $3 + 16 | 0, 10);
    HEAP8[HEAP32[$3 + 8 >> 2] + ($3 + 16 | 0) | 0] = 0;
   }
  }
  if (strlen($3 + 16 | 0)) {
   HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 32 >> 2] | 6;
  }
  jsfGetJSONWhitespace(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 28 >> 2], HEAP32[$3 + 32 >> 2], $3 + 16 | 0);
 }
 __stack_pointer = $3 + 48 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function jspEvaluateVar($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 192 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 188 >> 2] = $0;
 HEAP32[$3 + 184 >> 2] = $1;
 HEAP16[$3 + 182 >> 1] = $2;
 HEAP32[$3 + 52 >> 2] = jslSetLex($3 + 56 | 0);
 jslInit(HEAP32[$3 + 188 >> 2]);
 HEAP32[$3 + 48 >> 2] = HEAP32[46755];
 $0 = HEAP32[46754];
 $1 = HEAP32[46753];
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP32[$3 + 44 >> 2] = $0;
 $1 = HEAP32[46752];
 $0 = HEAP32[46751];
 HEAP32[$3 + 32 >> 2] = $0;
 HEAP32[$3 + 36 >> 2] = $1;
 $0 = HEAP32[46750];
 $1 = HEAP32[46749];
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 28 >> 2] = $0;
 $1 = HEAP32[46748];
 $0 = HEAP32[46747];
 HEAP32[$3 + 16 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[46755] = 1;
 if (HEAP32[$3 + 184 >> 2]) {
  HEAP32[46749] = 0;
  if (HEAP32[$3 + 184 >> 2] != HEAP32[46747]) {
   jspeiAddScope(HEAP32[$3 + 184 >> 2]);
   HEAP32[46750] = HEAP32[$3 + 184 >> 2];
  }
 }
 HEAP32[$3 + 12 >> 2] = jspParse();
 if (HEAP32[$3 + 184 >> 2]) {
  jspeiClearScopes();
 }
 jslKill();
 jslSetLex(HEAP32[$3 + 52 >> 2]);
 HEAP32[$3 + 48 >> 2] = HEAP32[$3 + 48 >> 2] | HEAP32[46755] & 6256;
 $0 = HEAP32[$3 + 20 >> 2];
 $1 = HEAP32[$3 + 16 >> 2];
 HEAP32[46747] = $1;
 HEAP32[46748] = $0;
 HEAP32[46755] = HEAP32[$3 + 48 >> 2];
 $1 = HEAP32[$3 + 44 >> 2];
 $0 = HEAP32[$3 + 40 >> 2];
 HEAP32[46753] = $0;
 HEAP32[46754] = $1;
 $0 = HEAP32[$3 + 36 >> 2];
 $1 = HEAP32[$3 + 32 >> 2];
 HEAP32[46751] = $1;
 HEAP32[46752] = $0;
 $1 = HEAP32[$3 + 28 >> 2];
 $0 = HEAP32[$3 + 24 >> 2];
 HEAP32[46749] = $0;
 HEAP32[46750] = $1;
 $0 = jsvSkipNameAndUnLock(HEAP32[$3 + 12 >> 2]);
 __stack_pointer = $3 + 192 | 0;
 return $0;
}

function btnTouchHandler() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 label$1: {
  if (HEAP32[85796] & 16) {
   if (wakeUpBangle(103487) & 1) {
    HEAP8[$0 + 15 | 0] = 1;
    break label$1;
   }
  }
  if (HEAP32[85796] & 262144) {
   HEAP32[85807] = 0;
   HEAP32[85808] = 0;
   HEAP32[85809] = 0;
   HEAP8[$0 + 15 | 0] = 0;
   break label$1;
  }
  HEAP32[$0 + 8 >> 2] = HEAP32[85799];
  HEAP32[$0 + 4 >> 2] = jshPinGetValue(11) & 1 | (jshPinGetValue(16) & 1 ? 2 : 0);
  HEAP32[85807] = HEAP32[$0 + 4 >> 2] | HEAP32[85807];
  label$5: {
   if (!(!(HEAP32[85808] != 2 | HEAP32[85809] != 3) & HEAP32[$0 + 4 >> 2] == 1)) {
    if (HEAP32[85809] != 2 | HEAP32[$0 + 4 >> 2] != 1) {
     break label$5;
    }
   }
   HEAP32[85807] = HEAP32[85807] | 4;
   HEAP32[85810] = 1;
   HEAP32[85799] = HEAP32[85799] | 524288;
  }
  label$8: {
   if (!(!(HEAP32[85808] != 1 | HEAP32[85809] != 3) & HEAP32[$0 + 4 >> 2] == 2)) {
    if (HEAP32[85809] != 1 | HEAP32[$0 + 4 >> 2] != 2) {
     break label$8;
    }
   }
   HEAP32[85807] = HEAP32[85807] | 4;
   HEAP32[85810] = 2;
   HEAP32[85799] = HEAP32[85799] | 524288;
  }
  if (!HEAP32[$0 + 4 >> 2]) {
   if (!(!HEAP32[85809] | HEAP32[85807] & 4)) {
    if (HEAP32[85807] & 1) {
     HEAP32[85799] = HEAP32[85799] | 1048576;
    }
    if (HEAP32[85807] & 2) {
     HEAP32[85799] = HEAP32[85799] | 2097152;
    }
   }
   HEAP32[85807] = 0;
  }
  if (HEAP32[$0 + 8 >> 2] != HEAP32[85799]) {
   HEAP16[171604] = 0;
  }
  HEAP32[85808] = HEAP32[85809];
  HEAP32[85809] = HEAP32[$0 + 4 >> 2];
  HEAP8[$0 + 15 | 0] = 0;
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP8[$0 + 15 | 0] & 1;
}

function jswrap_isNaN($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer + -64 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 56 >> 2] = $0;
 label$1: {
  label$2: {
   label$3: {
    if (jsvIsUndefined(HEAP32[$1 + 56 >> 2]) & 1) {
     break label$3;
    }
    if (jsvIsObject(HEAP32[$1 + 56 >> 2]) & 1) {
     break label$3;
    }
    if (!(jsvIsFloat(HEAP32[$1 + 56 >> 2]) & 1)) {
     if (!(jsvIsArray(HEAP32[$1 + 56 >> 2]) & 1)) {
      break label$2;
     }
    }
    $0 = __DOUBLE_BITS_4(jsvGetFloat(HEAP32[$1 + 56 >> 2]));
    $3 = $0;
    $2 = i64toi32_i32$HIGH_BITS;
    $0 = $2 & 2147483647;
    $2 = $3;
    if (($0 | 0) == 2146435072 & ($2 | 0) != 0 | $0 >>> 0 > 2146435072) {
     break label$3;
    }
    break label$2;
   }
   HEAP8[$1 + 63 | 0] = 1;
   break label$1;
  }
  if (jsvIsString(HEAP32[$1 + 56 >> 2]) & 1) {
   HEAP8[$1 + 55 | 0] = 1;
   jsvStringIteratorNew($1 + 16 | 0, HEAP32[$1 + 56 >> 2], 0);
   while (1) {
    if (jsvStringIteratorHasChar_6($1 + 16 | 0) & 1) {
     if (isWhitespace(jsvStringIteratorGetCharAndNext($1 + 16 | 0) << 24 >> 24) & 1) {
      continue;
     }
     HEAP8[$1 + 55 | 0] = 0;
    }
    break;
   }
   jsvStringIteratorFree_7($1 + 16 | 0);
   if (HEAP8[$1 + 55 | 0] & 1) {
    HEAP8[$1 + 63 | 0] = 0;
    break label$1;
   }
   $2 = __DOUBLE_BITS_4(jsvGetFloat(HEAP32[$1 + 56 >> 2]));
   $3 = $2;
   $0 = i64toi32_i32$HIGH_BITS;
   $2 = $0 & 2147483647;
   $0 = $3;
   HEAP8[$1 + 63 | 0] = ($2 | 0) == 2146435072 & ($0 | 0) != 0 | $2 >>> 0 > 2146435072;
   break label$1;
  }
  HEAP8[$1 + 63 | 0] = 0;
 }
 __stack_pointer = $1 - -64 | 0;
 return HEAP8[$1 + 63 | 0] & 1;
}

function jspeExpressionOrArrowFunction() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP8[$0 + 3 | 0] = 1;
 label$1: {
  while (1) {
   $1 = 0;
   $1 = HEAP16[HEAP32[38615] + 2 >> 1] != 41 ? (HEAP32[46755] & 80) != 0 ^ -1 : $1;
   if ($1 & 1) {
    if (!(!(HEAP8[$0 + 3 | 0] & 1) | !HEAP32[$0 + 8 >> 2])) {
     HEAP32[$0 + 4 >> 2] = jspeAddNamedFunctionParameter(HEAP32[$0 + 4 >> 2], HEAP32[$0 + 8 >> 2]);
    }
    jsvUnLock(HEAP32[$0 + 8 >> 2]);
    HEAP32[$0 + 8 >> 2] = jspeAssignmentExpression();
    label$6: {
     if ((HEAP32[46755] & 63) != 1) {
      break label$6;
     }
     if (jsvIsName(HEAP32[$0 + 8 >> 2]) & 1) {
      if (jsvIsString(HEAP32[$0 + 8 >> 2]) & 1) {
       break label$6;
      }
     }
     HEAP8[$0 + 3 | 0] = 0;
    }
    if (HEAP16[HEAP32[38615] + 2 >> 1] != 41) {
     if (!(jslMatch(44) & 1)) {
      jsvUnLock2(HEAP32[$0 + 8 >> 2], HEAP32[$0 + 4 >> 2]);
      HEAP32[$0 + 12 >> 2] = 0;
      break label$1;
     }
    }
    continue;
   }
   break;
  }
  if (!(jslMatch(41) & 1)) {
   jsvUnLock2(HEAP32[$0 + 8 >> 2], HEAP32[$0 + 4 >> 2]);
   HEAP32[$0 + 12 >> 2] = 0;
   break label$1;
  }
  if (!(!(HEAP8[$0 + 3 | 0] & 1) | HEAP16[HEAP32[38615] + 2 >> 1] != 162)) {
   HEAP32[$0 + 4 >> 2] = jspeArrowFunction(HEAP32[$0 + 4 >> 2], HEAP32[$0 + 8 >> 2]);
   jsvUnLock(HEAP32[$0 + 8 >> 2]);
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 4 >> 2];
   break label$1;
  }
  jsvUnLock(HEAP32[$0 + 4 >> 2]);
  HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2];
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function exp($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 wasm2js_scratch_store_f64(+$0);
 $3 = wasm2js_scratch_load_i32(1) | 0;
 $4 = wasm2js_scratch_load_i32(0) | 0;
 label$1: {
  label$2: {
   $6 = $3;
   $1 = $3 >>> 20 & 2047;
   if ($1 - 969 >>> 0 < 63) {
    $8 = $1;
    break label$2;
   }
   if ($1 >>> 0 <= 968) {
    return +($0 + 1);
   }
   if ($1 >>> 0 < 1033) {
    break label$2;
   }
   $3 = $4;
   $2 = 0;
   if (!$3 & ($6 | 0) == -1048576) {
    break label$1;
   }
   if (($1 | 0) == 2047) {
    return +($0 + 1);
   }
   $3 = $6;
   if (($3 | 0) < 0) {
    return +__math_uflow(0);
   }
   return +__math_oflow(0);
  }
  $2 = HEAPF64[18559];
  $7 = HEAPF64[18558] * $0 + $2;
  $2 = $7 - $2;
  $0 = $2 * HEAPF64[18561] + ($2 * HEAPF64[18560] + $0);
  $2 = $0 * $0;
  $9 = $2 * $2 * ($0 * HEAPF64[18565] + HEAPF64[18564]);
  $2 = $2 * ($0 * HEAPF64[18563] + HEAPF64[18562]);
  wasm2js_scratch_store_f64(+$7);
  $1 = wasm2js_scratch_load_i32(1) | 0;
  $4 = wasm2js_scratch_load_i32(0) | 0;
  $6 = $1;
  $1 = $4 << 4 & 2032;
  $0 = $9 + ($2 + (HEAPF64[$1 + 148576 >> 3] + $0));
  $5 = $1 + 148584 | 0;
  $1 = HEAP32[$5 >> 2];
  $10 = $1;
  $3 = HEAP32[$5 + 4 >> 2];
  $1 = $4 << 13;
  $5 = $1;
  $1 = $5 + $3 | 0;
  $3 = $10;
  $5 = $3 + 0 | 0;
  $1 = $11 >>> 0 > $5 >>> 0 ? $1 + 1 | 0 : $1;
  $3 = $1;
  if (!$8) {
   $1 = $3;
   $3 = $6;
   return +specialcase($0, $5, $1, $4, $3);
  }
  wasm2js_scratch_store_i32(0, $5 | 0);
  wasm2js_scratch_store_i32(1, $3 | 0);
  $2 = +wasm2js_scratch_load_f64();
  $2 = $2 * $0 + $2;
 }
 return +$2;
}

function get_bits($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP8[$2 + 7 | 0] = $1;
 HEAP16[$2 + 4 >> 1] = 0;
 HEAP32[$2 >> 2] = 0;
 label$1: {
  if (HEAPU8[$2 + 7 | 0] > 15) {
   HEAP16[$2 + 14 >> 1] = 65535;
   break label$1;
  }
  if (!HEAPU16[HEAP32[$2 + 8 >> 2] >> 1] & HEAPU8[HEAP32[$2 + 8 >> 2] + 12 | 0] < 1 << HEAPU8[$2 + 7 | 0] - 1) {
   HEAP16[$2 + 14 >> 1] = 65535;
   break label$1;
  }
  HEAP32[$2 >> 2] = 0;
  while (1) {
   if (HEAP32[$2 >> 2] < HEAPU8[$2 + 7 | 0]) {
    if (!HEAPU8[HEAP32[$2 + 8 >> 2] + 12 | 0]) {
     if (!HEAPU16[HEAP32[$2 + 8 >> 2] >> 1]) {
      HEAP16[$2 + 14 >> 1] = 65535;
      break label$1;
     }
     $0 = HEAP32[$2 + 8 >> 2];
     $1 = HEAPU16[$0 + 2 >> 1];
     HEAP16[$0 + 2 >> 1] = $1 + 1;
     HEAP8[HEAP32[$2 + 8 >> 2] + 11 | 0] = HEAPU8[($0 + 13 | 0) + $1 | 0];
     if (HEAPU16[HEAP32[$2 + 8 >> 2] + 2 >> 1] == HEAPU16[HEAP32[$2 + 8 >> 2] >> 1]) {
      HEAP16[HEAP32[$2 + 8 >> 2] + 2 >> 1] = 0;
      HEAP16[HEAP32[$2 + 8 >> 2] >> 1] = 0;
     }
     HEAP8[HEAP32[$2 + 8 >> 2] + 12 | 0] = 128;
    }
    HEAP16[$2 + 4 >> 1] = HEAPU16[$2 + 4 >> 1] << 1;
    if (HEAPU8[HEAP32[$2 + 8 >> 2] + 11 | 0] & HEAPU8[HEAP32[$2 + 8 >> 2] + 12 | 0]) {
     HEAP16[$2 + 4 >> 1] = HEAPU16[$2 + 4 >> 1] | 1;
    }
    $0 = HEAP32[$2 + 8 >> 2];
    HEAP8[$0 + 12 | 0] = HEAPU8[$0 + 12 | 0] >>> 1;
    HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + 1;
    continue;
   }
   break;
  }
  label$11: {
   if (HEAPU8[$2 + 7 | 0] <= 1) {
    break label$11;
   }
  }
  HEAP16[$2 + 14 >> 1] = HEAPU16[$2 + 4 >> 1];
 }
 return HEAPU16[$2 + 14 >> 1];
}

function _jswrap_promise_seal($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP8[$3 + 39 | 0] = $2;
 jsvObjectSetChildAndUnLock(HEAP32[$3 + 44 >> 2], 104628, jsvNewFromInteger(HEAP8[$3 + 39 | 0] & 1 ? 2 : 1));
 HEAP32[$3 + 32 >> 2] = HEAP8[$3 + 39 | 0] & 1 ? 102509 : 98114;
 HEAP32[$3 + 28 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 32 >> 2]);
 label$1: {
  if (!HEAP32[$3 + 28 >> 2]) {
   if (!(HEAP8[$3 + 39 | 0] & 1)) {
    HEAP32[$3 >> 2] = HEAP32[$3 + 40 >> 2];
    jsExceptionHere(1, 97115, $3);
    HEAP32[$3 + 24 >> 2] = 0;
    label$4: {
     if (!(jsvIsObject(HEAP32[$3 + 40 >> 2]) & 1)) {
      break label$4;
     }
     $0 = jsvObjectGetChildIfExists(HEAP32[$3 + 40 >> 2], 103112);
     HEAP32[$3 + 24 >> 2] = $0;
     if (!$0) {
      break label$4;
     }
     jsvObjectSetChildAndUnLock(HEAP32[46748], 105500, HEAP32[$3 + 24 >> 2]);
    }
   }
   break label$1;
  }
  if (jsvIsArray(HEAP32[$3 + 28 >> 2]) & 1) {
   jsvObjectIteratorNew($3 + 16 | 0, HEAP32[$3 + 28 >> 2]);
   while (1) {
    if (jsvObjectIteratorHasValue_17($3 + 16 | 0) & 1) {
     HEAP32[$3 + 12 >> 2] = jsvObjectIteratorGetValue_16($3 + 16 | 0);
     _jswrap_promise_queue_reaction(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 12 >> 2], HEAP32[$3 + 40 >> 2], HEAP8[$3 + 39 | 0] & 1);
     jsvUnLock(HEAP32[$3 + 12 >> 2]);
     jsvObjectIteratorNext($3 + 16 | 0);
     continue;
    }
    break;
   }
   jsvObjectIteratorFree_17($3 + 16 | 0);
  }
  jsvUnLock(HEAP32[$3 + 28 >> 2]);
 }
 __stack_pointer = $3 + 48 | 0;
}

function jsiSemiInit($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP8[$2 + 47 | 0] = $0;
 HEAP32[$2 + 40 >> 2] = $1;
 jspInit();
 HEAP16[93524] = HEAPU16[93524] & 7904;
 HEAP8[153825] = 255;
 HEAP8[$2 + 39 | 0] = 0;
 if (HEAP32[$2 + 40 >> 2]) {
  $4 = HEAP32[46747];
  $0 = HEAP32[$2 + 40 >> 2];
  HEAP32[$2 + 24 >> 2] = HEAP32[$0 + 24 >> 2];
  $1 = HEAP32[$0 + 16 >> 2];
  $3 = HEAP32[$0 + 20 >> 2];
  HEAP32[$2 + 16 >> 2] = $1;
  HEAP32[$2 + 20 >> 2] = $3;
  $1 = HEAP32[$0 + 12 >> 2];
  $3 = HEAP32[$0 + 8 >> 2];
  HEAP32[$2 + 8 >> 2] = $3;
  HEAP32[$2 + 12 >> 2] = $1;
  $3 = HEAP32[$0 + 4 >> 2];
  $1 = HEAP32[$0 >> 2];
  HEAP32[$2 >> 2] = $1;
  HEAP32[$2 + 4 >> 2] = $3;
  jsvObjectSetChildAndUnLock($4, 107924, jsfVarFromName($2));
 }
 if (HEAP8[$2 + 47 | 0] & 1) {
  $5 = jsfFlashContainsCode();
 }
 HEAP8[$2 + 38 | 0] = $5 & 1;
 if (HEAP8[$2 + 38 | 0] & 1) {
  HEAP16[93524] = HEAPU16[93524] & -2049;
  jspSoftKill();
  jsvSoftKill();
  jsfLoadStateFromFlash();
  jsvSoftInit();
  jspSoftInit();
 }
 HEAP32[$2 + 32 >> 2] = jsvObjectGetChildIfExists(HEAP32[46748], 105507);
 if (HEAP32[$2 + 32 >> 2]) {
  HEAP16[93524] = HEAPU16[93524] | 1024;
 }
 jsvUnLock(HEAP32[$2 + 32 >> 2]);
 jsiSoftInit((HEAPU8[$2 + 47 | 0] ^ -1) & 1);
 if (jsiEcho() & 1) {
  if (!(HEAP8[$2 + 38 | 0] & 1) & HEAPU8[153824] != 20) {
   jsiConsolePrintString(128005);
  }
  if (HEAPU8[153824] != 20) {
   jsiConsolePrintString(129587);
  }
  HEAP8[187056] = 1;
 }
 if (HEAP8[$2 + 39 | 0] & 1) {
  jsvUnLock(jspEvaluate(126528, 1));
 }
 __stack_pointer = $2 + 48 | 0;
}

function lcdFillRect_ArrayBuffer_flat1($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $6 = __stack_pointer - 48 | 0;
 HEAP32[$6 + 44 >> 2] = $0;
 HEAP32[$6 + 40 >> 2] = $1;
 HEAP32[$6 + 36 >> 2] = $2;
 HEAP32[$6 + 32 >> 2] = $3;
 HEAP32[$6 + 28 >> 2] = $4;
 HEAP32[$6 + 24 >> 2] = $5;
 HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 36 >> 2];
 while (1) {
  if (HEAP32[$6 + 20 >> 2] <= HEAP32[$6 + 28 >> 2]) {
   $0 = HEAP32[$6 + 44 >> 2];
   HEAP32[$6 + 16 >> 2] = HEAP32[$6 + 40 >> 2] + Math_imul(HEAP32[$6 + 20 >> 2], HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8);
   HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 40 >> 2];
   while (1) {
    if (HEAP32[$6 + 12 >> 2] <= HEAP32[$6 + 32 >> 2]) {
     label$5: {
      if (HEAP32[$6 + 24 >> 2]) {
       $0 = HEAP32[$6 + 44 >> 2];
       $0 = (HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24)) + (HEAP32[$6 + 16 >> 2] >> 3) | 0;
       HEAP8[$0 | 0] = HEAPU8[$0 | 0] | 128 >> (HEAP32[$6 + 16 >> 2] & 7) & 255;
       break label$5;
      }
      $0 = HEAP32[$6 + 44 >> 2];
      $0 = (HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24)) + (HEAP32[$6 + 16 >> 2] >> 3) | 0;
      HEAP8[$0 | 0] = HEAPU8[$0 | 0] & (65407 >> (HEAP32[$6 + 16 >> 2] & 7) & 255);
     }
     HEAP32[$6 + 16 >> 2] = HEAP32[$6 + 16 >> 2] + 1;
     HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 12 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 20 >> 2] + 1;
   continue;
  }
  break;
 }
}

function jswrap_graphics_getFont($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 128 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 120 >> 2] = $0;
 label$1: {
  if (!(graphicsGetFromVar($1 + 48 | 0, HEAP32[$1 + 120 >> 2]) & 1)) {
   HEAP32[$1 + 124 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 44 >> 2] = (HEAPU8[$1 + 73 | 0] | HEAPU8[$1 + 74 | 0] << 8) & 57344;
  HEAP32[$1 + 40 >> 2] = 0;
  if (!HEAP32[$1 + 44 >> 2]) {
   HEAP32[$1 + 40 >> 2] = 100994;
  }
  if (HEAP32[$1 + 44 >> 2] == 8192) {
   HEAP32[$1 + 40 >> 2] = 110503;
  }
  if (HEAP32[$1 + 44 >> 2] == 16384) {
   HEAP32[$1 + 40 >> 2] = 110366;
  }
  if (HEAP32[$1 + 44 >> 2] & 32768) {
   HEAP32[$1 + 40 >> 2] = 102670;
  }
  if (HEAP32[$1 + 40 >> 2]) {
   HEAP32[$1 + 36 >> 2] = (HEAPU8[$1 + 73 | 0] | HEAPU8[$1 + 74 | 0] << 8) & 8191;
   if (HEAP32[$1 + 36 >> 2] & 4096) {
    $0 = HEAP32[$1 + 40 >> 2];
    $2 = HEAP32[$1 + 36 >> 2];
    HEAP32[$1 + 8 >> 2] = (HEAP32[$1 + 36 >> 2] & 4032) >>> 6;
    HEAP32[$1 + 4 >> 2] = $2 & 63;
    HEAP32[$1 >> 2] = $0;
    HEAP32[$1 + 124 >> 2] = jsvVarPrintf(107098, $1);
    break label$1;
   }
   if (HEAP32[$1 + 36 >> 2] > 1) {
    $0 = HEAP32[$1 + 40 >> 2];
    HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 36 >> 2];
    HEAP32[$1 + 16 >> 2] = $0;
    HEAP32[$1 + 124 >> 2] = jsvVarPrintf(107107, $1 + 16 | 0);
    break label$1;
   }
   HEAP32[$1 + 124 >> 2] = jsvNewFromString(HEAP32[$1 + 40 >> 2]);
   break label$1;
  }
  HEAP32[$1 + 124 >> 2] = jsvNewFromInteger(HEAPU8[$1 + 73 | 0] | HEAPU8[$1 + 74 | 0] << 8);
 }
 __stack_pointer = $1 + 128 | 0;
 return HEAP32[$1 + 124 >> 2];
}

function jsvNewFromStringVar($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 label$1: {
  label$2: {
   if (!(jsvIsNativeString(HEAP32[$3 + 24 >> 2]) & 1)) {
    if (!(jsvIsFlashString(HEAP32[$3 + 24 >> 2]) & 1)) {
     break label$2;
    }
   }
   HEAP32[$3 + 12 >> 2] = jsvGetStringLength(HEAP32[$3 + 24 >> 2]);
   if (HEAPU32[$3 + 20 >> 2] > HEAPU32[$3 + 12 >> 2]) {
    HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 12 >> 2];
   }
   if (HEAPU32[$3 + 12 >> 2] < HEAP32[$3 + 20 >> 2] + HEAP32[$3 + 16 >> 2] >>> 0) {
    HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 12 >> 2] - HEAP32[$3 + 20 >> 2];
   }
   $0 = HEAP32[$3 + 24 >> 2];
   HEAP32[$3 + 8 >> 2] = jsvNewWithFlags((HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63);
   $0 = HEAP32[$3 + 8 >> 2];
   $1 = HEAP32[$3 + 24 >> 2];
   $1 = HEAP32[$3 + 20 >> 2] + (HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24)) | 0;
   HEAP8[$0 | 0] = $1;
   HEAP8[$0 + 1 | 0] = $1 >>> 8;
   HEAP8[$0 + 2 | 0] = $1 >>> 16;
   HEAP8[$0 + 3 | 0] = $1 >>> 24;
   $0 = HEAP32[$3 + 8 >> 2];
   $1 = HEAP32[$3 + 16 >> 2];
   HEAP8[$0 + 4 | 0] = $1;
   HEAP8[$0 + 5 | 0] = $1 >>> 8;
   HEAP8[$0 + 6 | 0] = $1 >>> 16;
   HEAP8[$0 + 7 | 0] = $1 >>> 24;
   HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 8 >> 2];
   break label$1;
  }
  HEAP32[$3 + 28 >> 2] = jsvNewWritableStringFromStringVar(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], HEAP32[$3 + 16 >> 2]);
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function jshGetCharToTransmit($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 11 | 0] = $0;
 label$1: {
  if (!(HEAPU8[$1 + 11 | 0] < 21 | HEAPU8[$1 + 11 | 0] > 22)) {
   HEAP32[$1 + 4 >> 2] = HEAPU8[$1 + 11 | 0] + 187105;
   if (HEAP8[HEAP32[$1 + 4 >> 2]] & 1) {
    HEAP8[HEAP32[$1 + 4 >> 2]] = HEAPU8[HEAP32[$1 + 4 >> 2]] & -2 | 4;
    HEAP32[$1 + 12 >> 2] = 19;
    break label$1;
   }
   if (HEAPU8[HEAP32[$1 + 4 >> 2]] & 2) {
    HEAP8[HEAP32[$1 + 4 >> 2]] = HEAPU8[HEAP32[$1 + 4 >> 2]] & -7;
    HEAP32[$1 + 12 >> 2] = 17;
    break label$1;
   }
  }
  HEAP8[$1 + 3 | 0] = HEAPU8[187123];
  while (1) {
   if (HEAPU8[187122] != HEAPU8[$1 + 3 | 0]) {
    if (HEAPU8[$1 + 11 | 0] == (HEAPU8[(HEAPU8[$1 + 3 | 0] << 1) + 187200 | 0] & 31)) {
     HEAP8[$1 + 2 | 0] = HEAPU8[((HEAPU8[$1 + 3 | 0] << 1) + 187200 | 0) + 1 | 0];
     if (HEAPU8[$1 + 3 | 0] != HEAPU8[187123]) {
      HEAP8[$1 + 1 | 0] = HEAPU8[$1 + 3 | 0];
      HEAP8[$1 | 0] = HEAPU8[$1 + 1 | 0] + 255;
      while (1) {
       if (HEAPU8[$1 + 1 | 0] != HEAPU8[187123]) {
        HEAP16[(HEAPU8[$1 + 1 | 0] << 1) + 187200 >> 1] = HEAPU16[(HEAPU8[$1 | 0] << 1) + 187200 >> 1];
        HEAP8[$1 + 1 | 0] = HEAPU8[$1 | 0];
        HEAP8[$1 | 0] = HEAPU8[$1 + 1 | 0] + 255;
        continue;
       }
       break;
      }
     }
     HEAP8[187123] = HEAPU8[187123] + 1;
     HEAP32[$1 + 12 >> 2] = HEAPU8[$1 + 2 | 0];
     break label$1;
    } else {
     HEAP8[$1 + 3 | 0] = HEAPU8[$1 + 3 | 0] + 1;
     continue;
    }
   }
   break;
  }
  HEAP32[$1 + 12 >> 2] = -1;
 }
 return HEAP32[$1 + 12 >> 2];
}

function log($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 wasm2js_scratch_store_f64(+$0);
 $1 = wasm2js_scratch_load_i32(1) | 0;
 $3 = wasm2js_scratch_load_i32(0) | 0;
 label$1: {
  label$2: {
   label$3: {
    label$4: {
     if (($1 | 0) > 0 | ($1 | 0) >= 0) {
      if ($1 >>> 0 > 1048575) {
       break label$4;
      }
     }
     if (!($1 & 2147483647 | $3)) {
      return +(-1 / ($0 * $0));
     }
     if (($1 | 0) > 0 | ($1 | 0) >= 0) {
      break label$3;
     }
     return +(($0 - $0) / 0);
    }
    if ($1 >>> 0 > 2146435071) {
     break label$1;
    }
    $4 = 1072693248;
    $5 = -1023;
    if (($1 | 0) != 1072693248) {
     $4 = $1;
     break label$2;
    }
    if ($3) {
     break label$2;
    }
    return 0;
   }
   wasm2js_scratch_store_f64(+($0 * 0x40000000000000));
   $1 = wasm2js_scratch_load_i32(1) | 0;
   $3 = wasm2js_scratch_load_i32(0) | 0;
   $4 = $1;
   $5 = -1077;
  }
  $1 = $4 + 614242 | 0;
  $6 = +(($1 >>> 20 | 0) + $5 | 0);
  $1 = ($1 & 1048575) + 1072079006 | 0;
  wasm2js_scratch_store_i32(0, $3 | 0);
  $4 = $1;
  $1 = 0;
  wasm2js_scratch_store_i32(1, $4 | $1);
  $0 = +wasm2js_scratch_load_f64() + -1;
  $8 = $0;
  $2 = $0 / ($0 + 2);
  $9 = $2;
  $7 = $0 * ($0 * .5);
  $2 = $2 * $2;
  $0 = $2 * $2;
  $0 = $6 * .6931471803691238 + ($8 + ($9 * ($7 + ($0 * ($0 * ($0 * .15313837699209373 + .22222198432149784) + .3999999999940942) + $2 * ($0 * ($0 * ($0 * .14798198605116586 + .1818357216161805) + .2857142874366239) + .6666666666666735))) + $6 * 1.9082149292705877e-10 - $7));
 }
 return +$0;
}

function jstPinOutputAtTime($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer + -64 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 56 >> 2] = $0;
 HEAP32[$6 + 60 >> 2] = $1;
 HEAP32[$6 + 52 >> 2] = $2;
 HEAP32[$6 + 48 >> 2] = $3;
 HEAP32[$6 + 44 >> 2] = $4;
 HEAP8[$6 + 43 | 0] = $5;
 $0 = HEAP32[$6 + 56 >> 2];
 HEAP8[$6 + 16 | 0] = $0;
 HEAP8[$6 + 17 | 0] = $0 >>> 8;
 HEAP8[$6 + 18 | 0] = $0 >>> 16;
 HEAP8[$6 + 19 | 0] = $0 >>> 24;
 HEAP8[$6 + 20 | 0] = 0;
 HEAP8[$6 + 21 | 0] = 0;
 HEAP8[$6 + 22 | 0] = 0;
 HEAP8[$6 + 23 | 0] = 0;
 HEAP8[$6 + 40 | 0] = 2;
 HEAP32[$6 + 12 >> 2] = 0;
 while (1) {
  if (HEAP32[$6 + 12 >> 2] < 4) {
   $1 = HEAP32[$6 + 12 >> 2] + ($6 + 24 | 0) | 0;
   if (HEAP32[$6 + 12 >> 2] < HEAP32[$6 + 44 >> 2]) {
    $0 = HEAPU8[HEAP32[$6 + 48 >> 2] + HEAP32[$6 + 12 >> 2] | 0];
   } else {
    $0 = 255;
   }
   HEAP8[$1 | 0] = $0;
   HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP8[$6 + 28 | 0] = HEAPU8[$6 + 43 | 0];
 HEAP32[$6 + 8 >> 2] = 2e6;
 while (1) {
  $0 = 0;
  label$6: {
   if (!(utilTimerIsFull() & 1)) {
    break label$6;
   }
   $0 = 0;
   if (jspIsInterrupted() & 1) {
    break label$6;
   }
   $0 = HEAP32[$6 + 8 >> 2];
   HEAP32[$6 + 8 >> 2] = $0 - 1;
   $0 = ($0 | 0) > 0;
  }
  if ($0) {
   continue;
  }
  break;
 }
 label$7: {
  if (jspIsInterrupted() & 1) {
   jsExceptionHere(4, 101216, 0);
   break label$7;
  }
  if (HEAP32[$6 + 8 >> 2] <= 0) {
   jsExceptionHere(4, 101191, 0);
  }
 }
 $0 = utilTimerInsertTask($6 + 16 | 0, HEAP32[$6 + 52 >> 2]);
 __stack_pointer = $6 - -64 | 0;
 return $0 & 1;
}

function jsvNewNameOrString($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP8[$2 + 23 | 0] = $1;
 HEAP32[$2 + 16 >> 2] = jsvNewWithFlags((HEAP8[$2 + 23 | 0] & 1 ? 23 : 28) & 65535);
 label$1: {
  if (!HEAP32[$2 + 16 >> 2]) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = jsvLockAgain(HEAP32[$2 + 16 >> 2]);
  while (1) {
   if (HEAPU8[HEAP32[$2 + 24 >> 2]]) {
    HEAP32[$2 + 4 >> 2] = jsvGetMaxCharactersInVar(HEAP32[$2 + 12 >> 2]);
    HEAP32[$2 + 8 >> 2] = 0;
    while (1) {
     $0 = 0;
     $0 = HEAPU32[$2 + 8 >> 2] < HEAPU32[$2 + 4 >> 2] ? HEAP8[HEAP32[$2 + 24 >> 2]] != 0 : $0;
     if ($0) {
      $0 = HEAP32[$2 + 24 >> 2];
      HEAP32[$2 + 24 >> 2] = $0 + 1;
      HEAP8[HEAP32[$2 + 12 >> 2] + HEAP32[$2 + 8 >> 2] | 0] = HEAPU8[$0 | 0];
      HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] + 1;
      continue;
     }
     break;
    }
    jsvSetCharactersInVar(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
    if (HEAPU8[HEAP32[$2 + 24 >> 2]]) {
     HEAP32[$2 >> 2] = jsvNewWithFlags(40);
     if (!HEAP32[$2 >> 2]) {
      jsvUnLock(HEAP32[$2 + 12 >> 2]);
      HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 16 >> 2];
      break label$1;
     }
     jsvSetLastChild(HEAP32[$2 + 12 >> 2], jsvGetRef(HEAP32[$2 >> 2]) & 65535);
     jsvUnLock(HEAP32[$2 + 12 >> 2]);
     HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
    }
    continue;
   }
   break;
  }
  jsvUnLock(HEAP32[$2 + 12 >> 2]);
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 16 >> 2];
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jswrap_interface_changeInterval($0, $1) {
 $0 = $0 | 0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 44 >> 2] = $0;
 HEAPF64[$2 + 32 >> 3] = $1;
 HEAP32[$2 + 28 >> 2] = jsvLock(HEAPU16[93522]);
 if (HEAPF64[$2 + 32 >> 3] < .1) {
  HEAPF64[$2 + 32 >> 3] = .1;
 }
 label$2: {
  if (jsvIsBasic(HEAP32[$2 + 44 >> 2]) & 1) {
   $0 = jsvFindChildFromVar(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 44 >> 2], 0);
   break label$2;
  }
  $0 = 0;
 }
 HEAP32[$2 + 24 >> 2] = $0;
 label$4: {
  if (HEAP32[$2 + 24 >> 2]) {
   HEAP32[$2 + 20 >> 2] = jsvSkipNameAndUnLock(HEAP32[$2 + 24 >> 2]);
   HEAP32[$2 + 8 >> 2] = jshGetTimeFromMilliseconds(HEAPF64[$2 + 32 >> 3]);
   $0 = i64toi32_i32$HIGH_BITS;
   HEAP32[$2 + 12 >> 2] = $0;
   $0 = HEAP32[$2 + 8 >> 2];
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 20 >> 2], 100885, jsvNewFromLongInteger($0, HEAP32[$2 + 12 >> 2]));
   $6 = HEAP32[$2 + 20 >> 2];
   $5 = jshGetSystemTime();
   $0 = i64toi32_i32$HIGH_BITS;
   $7 = $0;
   $0 = HEAP32[46778];
   $4 = $0;
   $3 = $5 - $0 | 0;
   $8 = $3;
   $0 = HEAP32[46779];
   $3 = HEAP32[$2 + 12 >> 2] + ($7 - ($0 + ($4 >>> 0 > $5 >>> 0) | 0) | 0) | 0;
   $4 = HEAP32[$2 + 8 >> 2];
   $0 = $4 + $8 | 0;
   $3 = $0 >>> 0 < $4 >>> 0 ? $3 + 1 | 0 : $3;
   jsvObjectSetChildAndUnLock($6, 105007, jsvNewFromLongInteger($0, $3));
   jsvUnLock(HEAP32[$2 + 20 >> 2]);
   jsiTimersChanged();
   break label$4;
  }
  jsExceptionHere(1, 103026, 0);
 }
 jsvUnLock(HEAP32[$2 + 28 >> 2]);
 __stack_pointer = $2 + 48 | 0;
}

function jswrap_decodeURIComponent($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 112 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 104 >> 2] = $0;
 HEAP32[$1 + 100 >> 2] = jsvAsString(HEAP32[$1 + 104 >> 2]);
 label$1: {
  if (!HEAP32[$1 + 100 >> 2]) {
   HEAP32[$1 + 108 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 96 >> 2] = jsvNewFromEmptyString_6();
  if (HEAP32[$1 + 96 >> 2]) {
   jsvStringIteratorNew($1 + 56 | 0, HEAP32[$1 + 100 >> 2], 0);
   jsvStringIteratorNew($1 + 16 | 0, HEAP32[$1 + 96 >> 2], 0);
   while (1) {
    label$5: {
     if (!(jsvStringIteratorHasChar_6($1 + 56 | 0) & 1)) {
      break label$5;
     }
     HEAP8[$1 + 15 | 0] = jsvStringIteratorGetCharAndNext($1 + 56 | 0);
     if (HEAP8[$1 + 15 | 0] >> 7) {
      jsExceptionHere(1, 96488, 0);
      break label$5;
     }
     if (HEAP8[$1 + 15 | 0] == 37) {
      HEAP8[$1 + 14 | 0] = jsvStringIteratorGetCharAndNext($1 + 56 | 0);
      HEAP8[$1 + 13 | 0] = jsvStringIteratorGetCharAndNext($1 + 56 | 0);
      HEAP32[$1 + 8 >> 2] = hexToByte(HEAP8[$1 + 14 | 0], HEAP8[$1 + 13 | 0]) << 24 >> 24;
      if (HEAP32[$1 + 8 >> 2] < 0) {
       jsExceptionHere(1, 109459, 0);
       break label$5;
      }
      HEAP8[$1 + 15 | 0] = HEAP32[$1 + 8 >> 2];
     }
     jsvStringIteratorAppend($1 + 16 | 0, HEAP8[$1 + 15 | 0]);
     continue;
    }
    break;
   }
   jsvStringIteratorFree_7($1 + 16 | 0);
   jsvStringIteratorFree_7($1 + 56 | 0);
  }
  jsvUnLock(HEAP32[$1 + 100 >> 2]);
  HEAP32[$1 + 108 >> 2] = HEAP32[$1 + 96 >> 2];
 }
 __stack_pointer = $1 + 112 | 0;
 return HEAP32[$1 + 108 >> 2];
}

function getDstChangeTime($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 var $10 = 0;
 $10 = __stack_pointer - 48 | 0;
 __stack_pointer = $10;
 HEAP32[$10 + 44 >> 2] = $0;
 HEAP32[$10 + 40 >> 2] = $1;
 HEAP32[$10 + 36 >> 2] = $2;
 HEAP32[$10 + 32 >> 2] = $3;
 HEAP32[$10 + 28 >> 2] = $4;
 HEAP32[$10 + 24 >> 2] = $5;
 HEAP8[$10 + 23 | 0] = $6;
 HEAP32[$10 + 16 >> 2] = $7;
 HEAP32[$10 + 12 >> 2] = $8;
 HEAP8[$10 + 11 | 0] = $9;
 if (HEAP32[$10 + 40 >> 2] == 4) {
  $0 = HEAP32[$10 + 32 >> 2] + 1 | 0;
  HEAP32[$10 + 32 >> 2] = $0;
  if (($0 | 0) > 11) {
   HEAP32[$10 + 44 >> 2] = HEAP32[$10 + 44 >> 2] + 1;
   HEAP32[$10 + 32 >> 2] = HEAP32[$10 + 32 >> 2] - 12;
  }
 }
 HEAP32[$10 + 4 >> 2] = getDayNumberFromDate(HEAP32[$10 + 44 >> 2], HEAP32[$10 + 32 >> 2], 1);
 label$3: {
  if (HEAP32[$10 + 40 >> 2] == 4) {
   HEAP32[$10 + 4 >> 2] = HEAP32[$10 + 4 >> 2] + (((HEAP32[$10 + 36 >> 2] + (14 - ((HEAP32[$10 + 4 >> 2] + 4 | 0) % 7 | 0) | 0) | 0) % 7 | 0) - 7 | 0);
   break label$3;
  }
  HEAP32[$10 + 4 >> 2] = HEAP32[$10 + 4 >> 2] + (Math_imul(HEAP32[$10 + 40 >> 2], 7) + ((HEAP32[$10 + 36 >> 2] + (14 - ((HEAP32[$10 + 4 >> 2] + 4 | 0) % 7 | 0) | 0) | 0) % 7 | 0) | 0);
 }
 HEAP32[$10 + 4 >> 2] = HEAP32[$10 + 24 >> 2] + Math_imul(HEAP32[$10 + 4 >> 2] + HEAP32[$10 + 28 >> 2] | 0, 1440);
 if (!(HEAP8[$10 + 11 | 0] & 1)) {
  HEAP32[$10 + 4 >> 2] = HEAP32[$10 + 4 >> 2] - HEAP32[$10 + 12 >> 2];
  if (!(HEAP8[$10 + 23 | 0] & 1)) {
   HEAP32[$10 + 4 >> 2] = HEAP32[$10 + 4 >> 2] - HEAP32[$10 + 16 >> 2];
  }
 }
 __stack_pointer = $10 + 48 | 0;
 return +HEAP32[$10 + 4 >> 2] * 60;
}

function _jswrap_promise_reaction_call($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 44 >> 2] = $0;
 HEAP32[$4 + 40 >> 2] = $1;
 HEAP32[$4 + 36 >> 2] = $2;
 HEAP32[$4 + 32 >> 2] = $3;
 HEAP32[$4 + 28 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 40 >> 2], 97362);
 HEAP32[$4 + 24 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 28 >> 2], 102677);
 if (HEAP32[$4 + 28 >> 2]) {
  if (HEAP32[$4 + 24 >> 2]) {
   HEAP8[$4 + 23 | 0] = 0;
   HEAP32[$4 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 40 >> 2], 107791);
   label$3: {
    if (HEAP32[$4 + 12 >> 2]) {
     HEAP32[$4 + 8 >> 2] = HEAP32[46755];
     HEAP32[$4 + 16 >> 2] = jspeFunctionCall(HEAP32[$4 + 12 >> 2], 0, HEAP32[$4 + 44 >> 2], 0, 1, $4 + 36 | 0);
     HEAP32[46755] = HEAP32[$4 + 8 >> 2];
     HEAP32[$4 + 4 >> 2] = jspGetException();
     if (HEAP32[$4 + 4 >> 2]) {
      HEAP8[$4 + 23 | 0] = 1;
      jsvUnLock(HEAP32[$4 + 16 >> 2]);
      HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 4 >> 2];
     }
     jsvUnLock(HEAP32[$4 + 12 >> 2]);
     break label$3;
    }
    if (!(jsvGetBool(HEAP32[$4 + 32 >> 2]) & 1)) {
     HEAP8[$4 + 23 | 0] = 1;
    }
    HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 36 >> 2];
   }
   _jswrap_prombox_resolve_or_reject(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 16 >> 2], (HEAPU8[$4 + 23 | 0] ^ -1) & 1);
   if (HEAP32[$4 + 12 >> 2]) {
    jsvUnLock(HEAP32[$4 + 16 >> 2]);
   }
   jsvUnLock(HEAP32[$4 + 24 >> 2]);
  }
  jsvUnLock(HEAP32[$4 + 28 >> 2]);
 }
 __stack_pointer = $4 + 48 | 0;
}

function st_yield_backref($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = HEAP32[HEAP32[$2 + 20 >> 2] + 4 >> 2] - HEAP32[HEAP32[HEAP32[$2 + 20 >> 2] + 8 >> 2] >> 2];
 label$1: {
  if (HEAP32[$2 + 16 >> 2]) {
   HEAP32[$2 + 12 >> 2] = 0;
   if (HEAPU16[HEAP32[$2 + 24 >> 2] + 4 >> 1] < HEAPU32[$2 + 16 >> 2]) {
    HEAP32[$2 + 16 >> 2] = HEAPU16[HEAP32[$2 + 24 >> 2] + 4 >> 1];
   }
   HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 24 >> 2] + 45;
   HEAP16[$2 + 6 >> 1] = 255;
   HEAP16[$2 + 4 >> 1] = HEAPU16[HEAP32[$2 + 24 >> 2] + 6 >> 1];
   HEAP32[$2 + 12 >> 2] = 0;
   while (1) {
    if (HEAPU32[$2 + 12 >> 2] < HEAPU32[$2 + 16 >> 2]) {
     HEAP8[$2 + 3 | 0] = HEAPU8[HEAP32[$2 + 8 >> 2] + (HEAPU16[$2 + 6 >> 1] & HEAPU16[HEAP32[$2 + 24 >> 2] + 8 >> 1] - HEAPU16[$2 + 4 >> 1]) | 0];
     push_byte(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], HEAPU8[$2 + 3 | 0]);
     HEAP8[HEAP32[$2 + 8 >> 2] + (HEAPU16[HEAP32[$2 + 24 >> 2] + 8 >> 1] & HEAPU16[$2 + 6 >> 1]) | 0] = HEAPU8[$2 + 3 | 0];
     $0 = HEAP32[$2 + 24 >> 2];
     HEAP16[$0 + 8 >> 1] = HEAPU16[$0 + 8 >> 1] + 1;
     HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
     continue;
    }
    break;
   }
   $0 = HEAP32[$2 + 24 >> 2];
   HEAP16[$0 + 4 >> 1] = HEAPU16[$0 + 4 >> 1] - HEAP32[$2 + 16 >> 2];
   if (!HEAPU16[HEAP32[$2 + 24 >> 2] + 4 >> 1]) {
    HEAP32[$2 + 28 >> 2] = 0;
    break label$1;
   }
  }
  HEAP32[$2 + 28 >> 2] = 6;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function _jswrap_graphics_getCharWidth($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  if (!(HEAP32[HEAP32[$2 + 8 >> 2] >> 2] | HEAP32[$2 + 4 >> 2] >= 256)) {
   HEAP32[$2 + 12 >> 2] = graphicsVectorCharWidth(HEAPU16[HEAP32[$2 + 8 >> 2] + 6 >> 1], HEAP32[$2 + 4 >> 2] << 24 >> 24);
   break label$1;
  }
  if (!(HEAP32[HEAP32[$2 + 8 >> 2] >> 2] != 8192 | HEAP32[$2 + 4 >> 2] >= 256)) {
   HEAP32[$2 + 12 >> 2] = HEAPU16[HEAP32[$2 + 8 >> 2] + 6 >> 1] << 2;
   break label$1;
  }
  if (!(HEAP32[HEAP32[$2 + 8 >> 2] >> 2] != 16384 | HEAP32[$2 + 4 >> 2] >= 256)) {
   HEAP32[$2 + 12 >> 2] = Math_imul(HEAPU16[HEAP32[$2 + 8 >> 2] + 6 >> 1], 6);
   break label$1;
  }
  if (HEAP32[HEAP32[$2 + 8 >> 2] >> 2] & 32768) {
   HEAP32[$2 >> 2] = 0;
   if (HEAP32[$2 + 4 >> 2] < 256) {
    label$7: {
     if (jsvIsString(HEAP32[HEAP32[$2 + 8 >> 2] + 12 >> 2]) & 1) {
      if (HEAP32[$2 + 4 >> 2] >= HEAPU8[HEAP32[$2 + 8 >> 2] + 10 | 0]) {
       HEAP32[$2 >> 2] = Math_imul(HEAPU16[HEAP32[$2 + 8 >> 2] + 6 >> 1], jsvGetCharInString(HEAP32[HEAP32[$2 + 8 >> 2] + 12 >> 2], HEAP32[$2 + 4 >> 2] - HEAPU8[HEAP32[$2 + 8 >> 2] + 10 | 0] | 0) & 255);
      }
      break label$7;
     }
     HEAP32[$2 >> 2] = Math_imul(HEAPU16[HEAP32[$2 + 8 >> 2] + 6 >> 1], jsvGetInteger(HEAP32[HEAP32[$2 + 8 >> 2] + 12 >> 2]));
    }
   }
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function jsiDumpSerialInitialisation($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 44 >> 2] = $0;
 HEAP32[$4 + 40 >> 2] = $1;
 HEAP32[$4 + 36 >> 2] = $2;
 HEAP8[$4 + 35 | 0] = $3;
 HEAP32[$4 + 28 >> 2] = jsvFindChildFromString(HEAP32[46747], HEAP32[$4 + 36 >> 2]);
 HEAP32[$4 + 24 >> 2] = jsvSkipName(HEAP32[$4 + 28 >> 2]);
 if (HEAP32[$4 + 24 >> 2]) {
  if (HEAP8[$4 + 35 | 0] & 1) {
   jsiDumpObjectState(HEAP32[$4 + 44 >> 2], HEAP32[$4 + 40 >> 2], HEAP32[$4 + 28 >> 2], HEAP32[$4 + 24 >> 2]);
  }
  HEAP32[$4 + 20 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 24 >> 2], 104661);
  HEAP32[$4 + 16 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 24 >> 2], 100220);
  if (HEAP32[$4 + 16 >> 2] ? 1 : HEAP32[$4 + 20 >> 2]) {
   HEAP32[$4 + 12 >> 2] = jsvGetInteger(HEAP32[$4 + 20 >> 2]);
   if (HEAP32[$4 + 12 >> 2] <= 0) {
    HEAP32[$4 + 12 >> 2] = 9600;
   }
   $0 = HEAP32[$4 + 44 >> 2];
   $1 = HEAP32[$4 + 40 >> 2];
   $2 = HEAP32[$4 + 36 >> 2];
   HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 12 >> 2];
   HEAP32[$4 >> 2] = $2;
   cbprintf($0, $1, 107153, $4);
   if (jsvIsObject(HEAP32[$4 + 16 >> 2]) & 1) {
    FUNCTION_TABLE[HEAP32[$4 + 44 >> 2]](127788, HEAP32[$4 + 40 >> 2]);
    jsfGetJSONWithCallback(HEAP32[$4 + 16 >> 2], 0, 32, 0, HEAP32[$4 + 44 >> 2], HEAP32[$4 + 40 >> 2]);
   }
   FUNCTION_TABLE[HEAP32[$4 + 44 >> 2]](128774, HEAP32[$4 + 40 >> 2]);
  }
  jsvUnLock3(HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2], HEAP32[$4 + 24 >> 2]);
 }
 jsvUnLock(HEAP32[$4 + 28 >> 2]);
 __stack_pointer = $4 + 48 | 0;
}

function lcdST7789_flip($0) {
 var $1 = 0;
 $1 = __stack_pointer - 96 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 92 >> 2] = $0;
 label$1: {
  label$2: {
   switch (HEAP32[85782] - 2 | 0) {
   case 0:
    label$5: {
     if (!HEAP32[85780]) {
      HEAP32[85780] = 160;
      break label$5;
     }
     HEAP32[85780] = 0;
    }
    lcdST7789_scrollCmd();
    break label$1;

   case 1:
    $0 = HEAP32[$1 + 92 >> 2];
    HEAP32[$1 + 88 >> 2] = jsvObjectGetChildIfExists(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 101361);
    HEAP32[$1 + 84 >> 2] = jsvGetArrayBufferBackingString(HEAP32[$1 + 88 >> 2], 0);
    if (HEAP32[$1 + 84 >> 2]) {
     jsvStringIteratorNew($1 + 48 | 0, HEAP32[$1 + 84 >> 2], 0);
     lcdST7789_blit8Bit(0, 0, 120, 120, 2, $1 + 48 | 0, 146800);
     jsvStringIteratorFree_6($1 + 48 | 0);
    }
    jsvUnLock2(HEAP32[$1 + 84 >> 2], HEAP32[$1 + 88 >> 2]);
    break label$1;

   case 2:
    break label$2;

   default:
    break label$1;
   }
  }
  $0 = HEAP32[$1 + 92 >> 2];
  HEAP32[$1 + 44 >> 2] = jsvObjectGetChildIfExists(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 101361);
  HEAP32[$1 + 40 >> 2] = jsvGetArrayBufferBackingString(HEAP32[$1 + 44 >> 2], 0);
  if (HEAP32[$1 + 40 >> 2]) {
   jsvStringIteratorNew($1, HEAP32[$1 + 40 >> 2], 0);
   lcdST7789_blit8Bit(0, 0, 80, 80, 3, $1, 146800);
   jsvStringIteratorFree_6($1);
  }
  jsvUnLock2(HEAP32[$1 + 40 >> 2], HEAP32[$1 + 44 >> 2]);
 }
 __stack_pointer = $1 + 96 | 0;
}

function jswrap_function_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 HEAP32[$1 + 20 >> 2] = jsvNewWithFlags(7);
 label$1: {
  if (!HEAP32[$1 + 20 >> 2]) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  jsvObjectIteratorNew($1 + 16 | 0, HEAP32[$1 + 24 >> 2]);
  HEAP32[$1 + 12 >> 2] = jsvObjectIteratorGetValue_7($1 + 16 | 0);
  jsvObjectIteratorNext($1 + 16 | 0);
  while (1) {
   if (jsvObjectIteratorHasValue_7($1 + 16 | 0) & 1) {
    HEAP32[$1 + 8 >> 2] = jsvAsString(HEAP32[$1 + 12 >> 2]);
    if (HEAP32[$1 + 8 >> 2]) {
     HEAP32[$1 + 4 >> 2] = jsvNewFromString(95006);
     if (HEAP32[$1 + 4 >> 2]) {
      jsvAppendStringVarComplete(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 8 >> 2]);
      jsvAddFunctionParameter(HEAP32[$1 + 20 >> 2], HEAP32[$1 + 4 >> 2], 0);
     }
     jsvUnLock(HEAP32[$1 + 8 >> 2]);
    }
    jsvUnLock(HEAP32[$1 + 12 >> 2]);
    HEAP32[$1 + 12 >> 2] = jsvObjectIteratorGetValue_7($1 + 16 | 0);
    jsvObjectIteratorNext($1 + 16 | 0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree_7($1 + 16 | 0);
  if (!(jsvIsString(HEAP32[$1 + 12 >> 2]) & 1)) {
   HEAP32[$1 >> 2] = HEAP32[$1 + 12 >> 2];
   jsExceptionHere(3, 126689, $1);
   jsvUnLock2(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 20 >> 2]);
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 20 >> 2], 105817, HEAP32[$1 + 12 >> 2]);
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 20 >> 2];
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function jsvAsNumber($0) {
 var $1 = 0;
 $1 = __stack_pointer - 80 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 72 >> 2] = $0;
 label$1: {
  label$2: {
   if (!(jsvIsInt(HEAP32[$1 + 72 >> 2]) & 1)) {
    if (!(jsvIsFloat(HEAP32[$1 + 72 >> 2]) & 1)) {
     break label$2;
    }
   }
   HEAP32[$1 + 76 >> 2] = jsvLockAgain(HEAP32[$1 + 72 >> 2]);
   break label$1;
  }
  label$4: {
   label$5: {
    if (jsvIsBoolean(HEAP32[$1 + 72 >> 2]) & 1) {
     break label$5;
    }
    if (jsvIsPin(HEAP32[$1 + 72 >> 2]) & 1) {
     break label$5;
    }
    if (jsvIsNull(HEAP32[$1 + 72 >> 2]) & 1) {
     break label$5;
    }
    if (jsvIsBoolean(HEAP32[$1 + 72 >> 2]) & 1) {
     break label$5;
    }
    if (!(jsvIsArrayBufferName(HEAP32[$1 + 72 >> 2]) & 1)) {
     break label$4;
    }
   }
   HEAP32[$1 + 76 >> 2] = jsvNewFromInteger(jsvGetInteger(HEAP32[$1 + 72 >> 2]));
   break label$1;
  }
  label$6: {
   if (!(jsvIsString(HEAP32[$1 + 72 >> 2]) & 1)) {
    break label$6;
   }
   if (!(jsvIsEmptyString(HEAP32[$1 + 72 >> 2]) & 1)) {
    if (!(jsvIsStringNumericInt(HEAP32[$1 + 72 >> 2], 0) & 1)) {
     break label$6;
    }
   }
   if ((jsvGetString(HEAP32[$1 + 72 >> 2], $1, 64) | 0) == 64) {
    jsExceptionHere(1, 101497, 0);
    HEAP32[$1 + 76 >> 2] = jsvNewFromFloat(nan);
    break label$1;
   }
   HEAP32[$1 + 76 >> 2] = jsvNewFromLongInteger(stringToInt($1), i64toi32_i32$HIGH_BITS);
   break label$1;
  }
  HEAP32[$1 + 76 >> 2] = jsvNewFromFloat(jsvGetFloat(HEAP32[$1 + 72 >> 2]));
 }
 __stack_pointer = $1 + 80 | 0;
 return HEAP32[$1 + 76 >> 2];
}

function jswrap_graphics_getModified($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 96 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 88 >> 2] = $0;
 HEAP8[$2 + 87 | 0] = $1;
 label$1: {
  if (!(graphicsGetFromVar($2 + 8 | 0, HEAP32[$2 + 88 >> 2]) & 1)) {
   HEAP32[$2 + 92 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 4 >> 2] = 0;
  if ((HEAPU8[$2 + 48 | 0] | HEAPU8[$2 + 49 | 0] << 8) << 16 >> 16 <= (HEAPU8[$2 + 52 | 0] | HEAPU8[$2 + 53 | 0] << 8) << 16 >> 16) {
   HEAP32[$2 + 4 >> 2] = jsvNewObject();
   if (HEAP32[$2 + 4 >> 2]) {
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 4 >> 2], 111158, jsvNewFromInteger((HEAPU8[$2 + 48 | 0] | HEAPU8[$2 + 49 | 0] << 8) << 16 >> 16));
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 4 >> 2], 111155, jsvNewFromInteger((HEAPU8[$2 + 50 | 0] | HEAPU8[$2 + 51 | 0] << 8) << 16 >> 16));
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 4 >> 2], 110879, jsvNewFromInteger((HEAPU8[$2 + 52 | 0] | HEAPU8[$2 + 53 | 0] << 8) << 16 >> 16));
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 4 >> 2], 110876, jsvNewFromInteger((HEAPU8[$2 + 54 | 0] | HEAPU8[$2 + 55 | 0] << 8) << 16 >> 16));
   }
  }
  if (HEAP8[$2 + 87 | 0] & 1) {
   HEAP8[$2 + 52 | 0] = 0;
   HEAP8[$2 + 53 | 0] = 128;
   HEAP8[$2 + 54 | 0] = 0;
   HEAP8[$2 + 55 | 0] = 128;
   HEAP8[$2 + 48 | 0] = 255;
   HEAP8[$2 + 49 | 0] = 127;
   HEAP8[$2 + 50 | 0] = 255;
   HEAP8[$2 + 51 | 0] = 127;
   graphicsSetVar($2 + 8 | 0);
  }
  HEAP32[$2 + 92 >> 2] = HEAP32[$2 + 4 >> 2];
 }
 __stack_pointer = $2 + 96 | 0;
 return HEAP32[$2 + 92 >> 2];
}

function jsvGetIndexOfFull($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 96 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 88 >> 2] = $0;
 HEAP32[$5 + 84 >> 2] = $1;
 HEAP8[$5 + 83 | 0] = $2;
 HEAP8[$5 + 82 | 0] = $3;
 HEAP32[$5 + 76 >> 2] = $4;
 label$1: {
  if (!(jsvIsIterable(HEAP32[$5 + 88 >> 2]) & 1)) {
   HEAP32[$5 + 92 >> 2] = 0;
   break label$1;
  }
  jsvIteratorNew($5 + 16 | 0, HEAP32[$5 + 88 >> 2], 0);
  while (1) {
   if (jsvIteratorHasElement($5 + 16 | 0) & 1) {
    HEAP32[$5 + 12 >> 2] = jsvIteratorGetKey($5 + 16 | 0);
    label$5: {
     if (HEAP8[$5 + 82 | 0] & 1) {
      if (!(jsvIsInt(HEAP32[$5 + 12 >> 2]) & 1)) {
       break label$5;
      }
      if ((jsvGetInteger(HEAP32[$5 + 12 >> 2]) | 0) < HEAP32[$5 + 76 >> 2]) {
       break label$5;
      }
     }
     HEAP32[$5 + 8 >> 2] = jsvIteratorGetValue($5 + 16 | 0);
     label$7: {
      if (HEAP32[$5 + 8 >> 2] != HEAP32[$5 + 84 >> 2]) {
       if (HEAP8[$5 + 83 | 0] & 1) {
        break label$7;
       }
       if (!(jsvMathsOpTypeEqual(HEAP32[$5 + 8 >> 2], HEAP32[$5 + 84 >> 2]) & 1)) {
        break label$7;
       }
      }
      jsvUnLock(HEAP32[$5 + 8 >> 2]);
      jsvIteratorFree($5 + 16 | 0);
      HEAP32[$5 + 92 >> 2] = HEAP32[$5 + 12 >> 2];
      break label$1;
     }
     jsvUnLock(HEAP32[$5 + 8 >> 2]);
    }
    jsvUnLock(HEAP32[$5 + 12 >> 2]);
    jsvIteratorNext($5 + 16 | 0);
    continue;
   }
   break;
  }
  jsvIteratorFree($5 + 16 | 0);
  HEAP32[$5 + 92 >> 2] = 0;
 }
 __stack_pointer = $5 + 96 | 0;
 return HEAP32[$5 + 92 >> 2];
}

function jsfBankCompact($0, $1) {
 var $2 = 0, $3 = 0;
 $3 = __stack_pointer - 80 | 0;
 $2 = $3;
 __stack_pointer = $2;
 HEAP32[$2 + 72 >> 2] = $0;
 HEAP8[$2 + 71 | 0] = $1;
 label$1: {
  if (!(jshFlashGetPage(HEAP32[$2 + 72 >> 2], $2 - -64 | 0, $2 + 60 | 0) & 1)) {
   HEAP8[$2 + 79 | 0] = 0;
   break label$1;
  }
  HEAP32[$2 + 56 >> 2] = HEAP32[$2 + 60 >> 2] + 32;
  jsfGetStorageStats($2 + 24 | 0, HEAP32[$2 + 72 >> 2], 1);
  if (!HEAP32[$2 + 32 >> 2]) {
   HEAP8[$2 + 79 | 0] = 0;
   break label$1;
  }
  label$4: {
   if (!(HEAP8[$2 + 71 | 0] & 1)) {
    break label$4;
   }
  }
  HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 24 >> 2];
  if (HEAPU32[$2 + 20 >> 2] > HEAPU32[$2 + 56 >> 2]) {
   HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 56 >> 2];
  }
  HEAP8[$2 + 19 | 0] = 0;
  label$6: {
   if (HEAP32[$2 + 20 >> 2] + 256 >>> 0 < jsuGetFreeStack() >>> 0) {
    $3 = $3 - (HEAP32[$2 + 20 >> 2] + 15 & -16) | 0;
    __stack_pointer = $3;
    HEAP32[$2 + 12 >> 2] = $3;
    HEAP8[$2 + 19 | 0] = jsfCompactInternal(HEAP32[$2 + 48 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[$2 + 20 >> 2]) & 1;
    break label$6;
   }
   HEAP32[$2 + 8 >> 2] = jsvNewFlatStringOfLength(HEAP32[$2 + 20 >> 2]);
   if (HEAP32[$2 + 8 >> 2]) {
    HEAP32[$2 + 4 >> 2] = jsvGetFlatStringPointer(HEAP32[$2 + 8 >> 2]);
    HEAP8[$2 + 19 | 0] = jsfCompactInternal(HEAP32[$2 + 48 >> 2], HEAP32[$2 + 4 >> 2], HEAP32[$2 + 20 >> 2]) & 1;
    jsvUnLock(HEAP32[$2 + 8 >> 2]);
   }
  }
  HEAP8[$2 + 79 | 0] = HEAP8[$2 + 19 | 0] & 1;
 }
 __stack_pointer = $2 + 80 | 0;
 return HEAP8[$2 + 79 | 0] & 1;
}

function getDateFromDayNumber($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 28 >> 2] + 135081;
 HEAP32[$4 + 12 >> 2] = integerDivideFloor((HEAP32[$4 + 12 >> 2] - integerDivideFloor(HEAP32[$4 + 12 >> 2], 146097) | 0) + 146095 | 0, 36524);
 HEAP32[$4 + 12 >> 2] = (HEAP32[$4 + 28 >> 2] + HEAP32[$4 + 12 >> 2] | 0) - integerDivideFloor(HEAP32[$4 + 12 >> 2], 4);
 HEAP32[$4 + 8 >> 2] = integerDivideFloor((HEAP32[$4 + 12 >> 2] << 2) + 2877911 | 0, 1461);
 HEAP32[$4 + 4 >> 2] = ((HEAP32[$4 + 12 >> 2] + 719600 | 0) - Math_imul(HEAP32[$4 + 8 >> 2], 365) | 0) - integerDivideFloor(HEAP32[$4 + 8 >> 2], 4);
 HEAP32[$4 >> 2] = (Math_imul(HEAP32[$4 + 4 >> 2], 5) - 1 | 0) / 153;
 if (HEAP32[$4 + 16 >> 2]) {
  HEAP32[HEAP32[$4 + 16 >> 2] >> 2] = (HEAP32[$4 + 4 >> 2] - Math_imul(HEAP32[$4 >> 2], 30) | 0) - ((Math_imul(HEAP32[$4 >> 2], 3) | 0) / 5 | 0);
 }
 if (HEAP32[$4 + 20 >> 2]) {
  label$3: {
   if (HEAP32[$4 >> 2] < 14) {
    HEAP32[HEAP32[$4 + 20 >> 2] >> 2] = HEAP32[$4 >> 2] - 2;
    break label$3;
   }
   HEAP32[HEAP32[$4 + 20 >> 2] >> 2] = HEAP32[$4 >> 2] - 14;
  }
 }
 if (HEAP32[$4 + 24 >> 2]) {
  label$6: {
   if (HEAP32[$4 >> 2] > 13) {
    HEAP32[HEAP32[$4 + 24 >> 2] >> 2] = HEAP32[$4 + 8 >> 2] + 1;
    break label$6;
   }
   HEAP32[HEAP32[$4 + 24 >> 2] >> 2] = HEAP32[$4 + 8 >> 2];
  }
 }
 __stack_pointer = $4 + 32 | 0;
}

function __jspeConditionalExpression($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 label$1: {
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 63) {
   jslGetNextToken();
   label$3: {
    if ((HEAP32[46755] & 63) != 1) {
     jsvUnLock(jspeAssignmentExpression());
     if (!(jslMatch(58) & 1)) {
      HEAP32[$1 + 28 >> 2] = 0;
      break label$1;
     }
     jsvUnLock(jspeAssignmentExpression());
     break label$3;
    }
    HEAP8[$1 + 23 | 0] = jsvGetBoolAndUnLock(jsvSkipName(HEAP32[$1 + 24 >> 2])) & 1;
    jsvUnLock(HEAP32[$1 + 24 >> 2]);
    label$6: {
     if (HEAP8[$1 + 23 | 0] & 1) {
      HEAP32[$1 + 24 >> 2] = jsvSkipNameAndUnLock(jspeAssignmentExpression());
      if (!(jslMatch(58) & 1)) {
       HEAP32[$1 + 28 >> 2] = 0;
       break label$1;
      }
      HEAP32[$1 + 16 >> 2] = HEAP32[46755];
      jspSetNoExecute();
      jsvUnLock(jspeAssignmentExpression());
      HEAP32[46755] = HEAP32[46755] & -1664 | HEAP32[$1 + 16 >> 2] & 1663;
      break label$6;
     }
     HEAP32[$1 + 12 >> 2] = HEAP32[46755];
     jspSetNoExecute();
     jsvUnLock(jspeAssignmentExpression());
     HEAP32[46755] = HEAP32[46755] & -1664 | HEAP32[$1 + 12 >> 2] & 1663;
     if (!(jslMatch(58) & 1)) {
      HEAP32[$1 + 28 >> 2] = 0;
      break label$1;
     }
     HEAP32[$1 + 24 >> 2] = jsvSkipNameAndUnLock(jspeAssignmentExpression());
    }
   }
  }
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 24 >> 2];
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function jstExecuteFn($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer + -64 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 60 >> 2] = $0;
 HEAP32[$6 + 56 >> 2] = $1;
 HEAP32[$6 + 48 >> 2] = $2;
 HEAP32[$6 + 52 >> 2] = $3;
 HEAP32[$6 + 44 >> 2] = $4;
 HEAP32[$6 + 40 >> 2] = $5;
 $0 = HEAP32[$6 + 48 >> 2];
 HEAP8[$6 + 8 | 0] = $0;
 HEAP8[$6 + 9 | 0] = $0 >>> 8;
 HEAP8[$6 + 10 | 0] = $0 >>> 16;
 HEAP8[$6 + 11 | 0] = $0 >>> 24;
 $0 = HEAP32[$6 + 44 >> 2];
 HEAP8[$6 + 12 | 0] = $0;
 HEAP8[$6 + 13 | 0] = $0 >>> 8;
 HEAP8[$6 + 14 | 0] = $0 >>> 16;
 HEAP8[$6 + 15 | 0] = $0 >>> 24;
 HEAP8[$6 + 32 | 0] = 3;
 $0 = HEAP32[$6 + 60 >> 2];
 HEAP8[$6 + 16 | 0] = $0;
 HEAP8[$6 + 17 | 0] = $0 >>> 8;
 HEAP8[$6 + 18 | 0] = $0 >>> 16;
 HEAP8[$6 + 19 | 0] = $0 >>> 24;
 $0 = HEAP32[$6 + 56 >> 2];
 HEAP8[$6 + 20 | 0] = $0;
 HEAP8[$6 + 21 | 0] = $0 >>> 8;
 HEAP8[$6 + 22 | 0] = $0 >>> 16;
 HEAP8[$6 + 23 | 0] = $0 >>> 24;
 HEAP32[$6 + 4 >> 2] = 2e6;
 while (1) {
  $0 = 0;
  label$2: {
   if (!(utilTimerIsFull() & 1)) {
    break label$2;
   }
   $0 = 0;
   if (jspIsInterrupted() & 1) {
    break label$2;
   }
   $0 = HEAP32[$6 + 4 >> 2];
   HEAP32[$6 + 4 >> 2] = $0 - 1;
   $0 = ($0 | 0) > 0;
  }
  if ($0) {
   continue;
  }
  break;
 }
 label$3: {
  if (jspIsInterrupted() & 1) {
   jsExceptionHere(4, 101216, 0);
   break label$3;
  }
  if (HEAP32[$6 + 4 >> 2] <= 0) {
   jsExceptionHere(4, 101191, 0);
  }
 }
 $0 = utilTimerInsertTask($6 + 8 | 0, HEAP32[$6 + 40 >> 2]);
 __stack_pointer = $6 - -64 | 0;
 return $0 & 1;
}

function tflite__MicroAllocator__StartModelAllocation_28tflite__Model_20const__2c_20tflite__MicroOpResolver_20const__2c_20tflite__NodeAndRegistration___2c_20TfLiteEvalTensor___29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 48 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 40 >> 2] = $0;
 HEAP32[$5 + 36 >> 2] = $1;
 HEAP32[$5 + 32 >> 2] = $2;
 HEAP32[$5 + 28 >> 2] = $3;
 HEAP32[$5 + 24 >> 2] = $4;
 $0 = HEAP32[$5 + 40 >> 2];
 label$1: {
  if (!HEAP32[$5 + 36 >> 2]) {
   break label$1;
  }
 }
 label$2: {
  if (HEAP8[$0 + 12 | 0] & 1) {
   tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$0 + 8 >> 2], 102893, 0);
   HEAP32[$5 + 44 >> 2] = 1;
   break label$2;
  }
  HEAP8[$0 + 12 | 0] = 1;
  HEAP32[$5 + 20 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, HEAP32[$5 + 36 >> 2], HEAP32[$5 + 24 >> 2]);
  if (HEAP32[$5 + 20 >> 2]) {
   HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 20 >> 2];
   break label$2;
  }
  HEAP32[$5 + 16 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, HEAP32[$5 + 36 >> 2], HEAP32[$5 + 28 >> 2]);
  if (HEAP32[$5 + 16 >> 2]) {
   HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 16 >> 2];
   break label$2;
  }
  HEAP32[$5 + 12 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, HEAP32[$5 + 36 >> 2], HEAP32[$5 + 32 >> 2], HEAP32[HEAP32[$5 + 28 >> 2] >> 2]);
  if (HEAP32[$5 + 12 >> 2]) {
   HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 12 >> 2];
   break label$2;
  }
  HEAP32[$5 + 44 >> 2] = 0;
 }
 __stack_pointer = $5 + 48 | 0;
 return HEAP32[$5 + 44 >> 2];
}

function graphicsDrawRect($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 graphicsToDeviceCoordinates(HEAP32[$5 + 28 >> 2], $5 + 24 | 0, $5 + 20 | 0);
 graphicsToDeviceCoordinates(HEAP32[$5 + 28 >> 2], $5 + 16 | 0, $5 + 12 | 0);
 $0 = HEAP32[$5 + 28 >> 2];
 graphicsFillRectDevice(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 24 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], HEAP32[$5 + 20 >> 2], HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
 $0 = HEAP32[$5 + 28 >> 2];
 graphicsFillRectDevice(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 16 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], HEAP32[$5 + 12 >> 2], HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
 $0 = HEAP32[$5 + 28 >> 2];
 graphicsFillRectDevice(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 24 >> 2], HEAP32[$5 + 12 >> 2], HEAP32[$5 + 16 >> 2], HEAP32[$5 + 12 >> 2], HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
 $0 = HEAP32[$5 + 28 >> 2];
 graphicsFillRectDevice(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 24 >> 2], HEAP32[$5 + 12 >> 2], HEAP32[$5 + 24 >> 2], HEAP32[$5 + 20 >> 2], HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
 __stack_pointer = $5 + 32 | 0;
}

function int_20gemmlowp__SaturatingRoundingDoublingHighMul_int__28int_2c_20int_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 44 >> 2] = $0;
 HEAP32[$2 + 40 >> 2] = $1;
 if (HEAP32[$2 + 44 >> 2] == HEAP32[$2 + 40 >> 2]) {
  $3 = HEAP32[$2 + 44 >> 2] == (std____2__numeric_limits_int___min_28_29() | 0);
 }
 HEAP8[$2 + 39 | 0] = $3;
 $1 = HEAP32[$2 + 44 >> 2];
 $0 = $1 >> 31;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP32[$2 + 28 >> 2] = $0;
 $0 = HEAP32[$2 + 40 >> 2];
 $1 = $0 >> 31;
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 $1 = HEAP32[$2 + 24 >> 2];
 $4 = $1;
 $1 = HEAP32[$2 + 20 >> 2];
 $3 = $1;
 $0 = HEAP32[$2 + 28 >> 2];
 $1 = $0;
 $0 = HEAP32[$2 + 16 >> 2];
 $5 = $0;
 $0 = $3;
 $0 = __wasm_i64_mul($4, $1, $5, $0);
 HEAP32[$2 + 8 >> 2] = $0;
 $1 = i64toi32_i32$HIGH_BITS;
 HEAP32[$2 + 12 >> 2] = $1;
 $1 = HEAP32[$2 + 8 >> 2];
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = ($0 | 0) > 0 | ($0 | 0) >= 0 ? 1073741824 : -1073741823;
 $3 = HEAP32[$2 + 8 >> 2];
 $4 = $3;
 $0 = HEAP32[$2 + 12 >> 2];
 $5 = $0;
 $0 = HEAP32[$2 + 4 >> 2];
 $3 = $0 >> 31;
 $1 = $0;
 $4 = $0 + $4 | 0;
 $0 = $3;
 $3 = $5;
 $0 = $0 + $3 | 0;
 $0 = $1 >>> 0 > $4 >>> 0 ? $0 + 1 | 0 : $0;
 $4 = __wasm_i64_sdiv($4, $0, -2147483648, 0);
 HEAP32[$2 >> 2] = $4;
 label$2: {
  if (HEAP8[$2 + 39 | 0] & 1) {
   $0 = std____2__numeric_limits_int___max_28_29();
   break label$2;
  }
  $0 = HEAP32[$2 >> 2];
 }
 __stack_pointer = $2 + 48 | 0;
 return $0;
}

function jsvStringIteratorLoadInline($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] - HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] + HEAP32[$0 + 8 >> 2];
 label$1: {
  if (jsvIsFlashString(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]) & 1) {
   jsvStringIteratorLoadFlashString_1(HEAP32[$1 + 12 >> 2]);
   break label$1;
  }
  label$3: {
   if (!HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]) {
    break label$3;
   }
   if (!(jsvGetLastChild(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]) & 65535)) {
    break label$3;
   }
   HEAP32[$1 + 8 >> 2] = jsvLock(jsvGetLastChild(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]) & 65535);
   jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
   HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2] = HEAP32[$1 + 8 >> 2];
   HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2] = HEAP32[$1 + 8 >> 2];
   $0 = jsvGetCharactersInVar(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
   HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] = $0;
   break label$1;
  }
  jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
  HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2] = 0;
  HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2] = 0;
  HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] = 0;
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2] + HEAP32[$0 + 8 >> 2];
  HEAP32[HEAP32[$1 + 12 >> 2] >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
}

function jshSPISendMany($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 48 | 0;
 __stack_pointer = $5;
 HEAP8[$5 + 47 | 0] = $0;
 HEAP32[$5 + 40 >> 2] = $1;
 HEAP32[$5 + 36 >> 2] = $2;
 HEAP32[$5 + 32 >> 2] = $3;
 HEAP32[$5 + 28 >> 2] = $4;
 HEAP32[$5 + 24 >> 2] = 0;
 HEAP32[$5 + 20 >> 2] = 0;
 while (1) {
  $0 = 0;
  if (HEAPU32[$5 + 24 >> 2] < HEAPU32[$5 + 32 >> 2]) {
   $0 = jspIsInterrupted() ^ -1;
  }
  if ($0 & 1) {
   $1 = HEAPU8[$5 + 47 | 0];
   $2 = HEAP32[$5 + 40 >> 2];
   $0 = HEAP32[$5 + 24 >> 2];
   HEAP32[$5 + 24 >> 2] = $0 + 1;
   HEAP32[$5 + 16 >> 2] = jshSPISend($1, HEAPU8[$2 + $0 | 0]);
   if (HEAP32[$5 + 36 >> 2] ? HEAP32[$5 + 16 >> 2] >= 0 : 0) {
    $1 = HEAP32[$5 + 16 >> 2];
    $2 = HEAP32[$5 + 36 >> 2];
    $0 = HEAP32[$5 + 20 >> 2];
    HEAP32[$5 + 20 >> 2] = $0 + 1;
    HEAP8[$2 + $0 | 0] = $1;
   }
   continue;
  }
  break;
 }
 label$6: {
  if (HEAP32[$5 + 36 >> 2]) {
   while (1) {
    $0 = 0;
    if (HEAPU32[$5 + 20 >> 2] < HEAPU32[$5 + 32 >> 2]) {
     $0 = jspIsInterrupted() ^ -1;
    }
    if ($0 & 1) {
     HEAP32[$5 + 12 >> 2] = jshSPISend(HEAPU8[$5 + 47 | 0], -1);
     $1 = HEAP32[$5 + 12 >> 2];
     $2 = HEAP32[$5 + 36 >> 2];
     $0 = HEAP32[$5 + 20 >> 2];
     HEAP32[$5 + 20 >> 2] = $0 + 1;
     HEAP8[$2 + $0 | 0] = $1;
     continue;
    }
    break;
   }
   break label$6;
  }
  jshSPIWait(HEAPU8[$5 + 47 | 0]);
 }
 if (HEAP32[$5 + 28 >> 2]) {
  FUNCTION_TABLE[HEAP32[$5 + 28 >> 2]]();
 }
 __stack_pointer = $5 + 48 | 0;
 return 1;
}

function jsfReadFile($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 96 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 88 >> 2] = $1;
 HEAP32[$3 + 84 >> 2] = $2;
 HEAP32[$3 + 32 >> 2] = HEAP32[$0 + 24 >> 2];
 $1 = $0;
 $0 = HEAP32[$1 + 16 >> 2];
 $2 = HEAP32[$1 + 20 >> 2];
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 28 >> 2] = $2;
 $0 = HEAP32[$1 + 12 >> 2];
 $2 = HEAP32[$1 + 8 >> 2];
 HEAP32[$3 + 16 >> 2] = $2;
 HEAP32[$3 + 20 >> 2] = $0;
 $2 = HEAP32[$1 + 4 >> 2];
 $0 = HEAP32[$1 >> 2];
 HEAP32[$3 + 8 >> 2] = $0;
 HEAP32[$3 + 12 >> 2] = $2;
 HEAP32[$3 + 44 >> 2] = jsfFindFile($3 + 8 | 0, $3 + 48 | 0);
 label$1: {
  if (!HEAP32[$3 + 44 >> 2]) {
   HEAP32[$3 + 92 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$3 + 88 >> 2] < 0) {
   HEAP32[$3 + 88 >> 2] = 0;
  }
  HEAP32[$3 + 40 >> 2] = jsfGetFileSize($3 + 48 | 0);
  if (HEAP32[$3 + 84 >> 2] <= 0) {
   HEAP32[$3 + 84 >> 2] = HEAP32[$3 + 40 >> 2];
  }
  if (HEAP32[$3 + 88 >> 2] > HEAP32[$3 + 40 >> 2]) {
   HEAP32[$3 + 88 >> 2] = HEAP32[$3 + 40 >> 2];
  }
  if (HEAP32[$3 + 40 >> 2] < (HEAP32[$3 + 88 >> 2] + HEAP32[$3 + 84 >> 2] | 0)) {
   HEAP32[$3 + 84 >> 2] = HEAP32[$3 + 40 >> 2] - HEAP32[$3 + 88 >> 2];
  }
  if (HEAP32[$3 + 84 >> 2] <= 0) {
   HEAP32[$3 + 92 >> 2] = jsvNewFromEmptyString_4();
   break label$1;
  }
  HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 88 >> 2] + HEAP32[$3 + 44 >> 2];
  HEAP32[$3 + 92 >> 2] = jsvAddressToVar(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 84 >> 2]);
 }
 __stack_pointer = $3 + 96 | 0;
 return HEAP32[$3 + 92 >> 2];
}

function jswrap_stream_pushData($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP8[$3 + 23 | 0] = $2;
 HEAP8[$3 + 22 | 0] = 1;
 HEAP32[$3 + 16 >> 2] = jsvFindChildFromString(HEAP32[$3 + 28 >> 2], 107815);
 label$1: {
  if (HEAP32[$3 + 16 >> 2]) {
   if (!(jsiExecuteEventCallback(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 16 >> 2], 1, $3 + 24 | 0) & 1)) {
    jsError(111392, 0);
    HEAP8[186986] = HEAPU8[186986] | 4;
    jsvObjectRemoveChild(HEAP32[$3 + 28 >> 2], 107815);
   }
   jsvUnLock(HEAP32[$3 + 16 >> 2]);
   break label$1;
  }
  HEAP32[$3 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 28 >> 2], 104027);
  label$4: {
   if (!(jsvIsString(HEAP32[$3 + 12 >> 2]) & 1)) {
    jsvObjectSetChild(HEAP32[$3 + 28 >> 2], 104027, HEAP32[$3 + 24 >> 2]);
    break label$4;
   }
   HEAP32[$3 + 8 >> 2] = jsvGetStringLength(HEAP32[$3 + 12 >> 2]);
   HEAP32[$3 + 4 >> 2] = jsvGetStringLength(HEAP32[$3 + 24 >> 2]);
   if (HEAP32[$3 + 8 >> 2] + HEAP32[$3 + 4 >> 2] >>> 0 > 512) {
    if (HEAP8[$3 + 23 | 0] & 1) {
     HEAP8[186986] = HEAPU8[186986] | 2;
    }
    HEAP8[$3 + 22 | 0] = 0;
   }
   if (!(!(HEAP8[$3 + 23 | 0] & 1 ? 1 : HEAP8[$3 + 22 | 0] & 1) | HEAPU32[$3 + 8 >> 2] >= 512)) {
    jsvAppendStringVar(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 24 >> 2], 0, 512 - HEAP32[$3 + 8 >> 2] | 0);
   }
   jsvUnLock(HEAP32[$3 + 12 >> 2]);
  }
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP8[$3 + 22 | 0] & 1;
}

function tflite___28anonymous_20namespace_29__FlatBufferIntVectorToArray_28int_2c_20flatbuffers__Vector_int__20const__2c_20int__2c_20tflite__ErrorReporter__2c_20char_20const__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer + -64 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 56 >> 2] = $0;
 HEAP32[$5 + 52 >> 2] = $1;
 HEAP32[$5 + 48 >> 2] = $2;
 HEAP32[$5 + 44 >> 2] = $3;
 HEAP32[$5 + 40 >> 2] = $4;
 label$1: {
  if (!HEAP32[$5 + 52 >> 2]) {
   $0 = HEAP32[$5 + 44 >> 2];
   HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 40 >> 2];
   tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 129263, $5 + 16 | 0);
   HEAP32[$5 + 60 >> 2] = 1;
   break label$1;
  }
  HEAP32[$5 + 36 >> 2] = flatbuffers__Vector_int___size_28_29_20const(HEAP32[$5 + 52 >> 2]);
  if (HEAPU32[$5 + 36 >> 2] > HEAP32[$5 + 56 >> 2] >>> 2 >>> 0) {
   $0 = HEAP32[$5 + 44 >> 2];
   HEAP32[$5 >> 2] = HEAP32[$5 + 40 >> 2];
   tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 129309, $5);
   HEAP32[$5 + 60 >> 2] = 1;
   break label$1;
  }
  HEAP32[$5 + 32 >> 2] = 0;
  while (1) {
   if (HEAPU32[$5 + 32 >> 2] < HEAPU32[$5 + 36 >> 2]) {
    $0 = flatbuffers__Vector_int___Get_28unsigned_20int_29_20const(HEAP32[$5 + 52 >> 2], HEAP32[$5 + 32 >> 2]);
    HEAP32[HEAP32[$5 + 48 >> 2] + (HEAP32[$5 + 32 >> 2] << 2) >> 2] = $0;
    HEAP32[$5 + 32 >> 2] = HEAP32[$5 + 32 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$5 + 60 >> 2] = 0;
 }
 __stack_pointer = $5 - -64 | 0;
 return HEAP32[$5 + 60 >> 2];
}

function tflite__SimpleMemoryAllocator__EnsureHeadSize_28unsigned_20long_2c_20unsigned_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 40 >> 2] = $0;
 HEAP32[$3 + 36 >> 2] = $1;
 HEAP32[$3 + 32 >> 2] = $2;
 $0 = HEAP32[$3 + 40 >> 2];
 label$1: {
  if (HEAP32[$0 + 16 >> 2] != HEAP32[$0 + 24 >> 2]) {
   tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$0 + 4 >> 2], 112486, 0);
   HEAP32[$3 + 44 >> 2] = 1;
   break label$1;
  }
  HEAP32[$3 + 28 >> 2] = tflite__AlignPointerUp_28unsigned_20char__2c_20unsigned_20long_29(HEAP32[$0 + 8 >> 2], HEAP32[$3 + 32 >> 2]);
  if (HEAPU32[$0 + 16 >> 2] > HEAP32[$3 + 28 >> 2] + HEAP32[$3 + 36 >> 2] >>> 0) {
   HEAP32[$3 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 24 >> 2] = HEAP32[$0 + 20 >> 2] - HEAP32[$3 + 28 >> 2];
  if (HEAPU32[$3 + 24 >> 2] < HEAPU32[$3 + 36 >> 2]) {
   $0 = HEAP32[$0 + 4 >> 2];
   $1 = HEAP32[$3 + 36 >> 2];
   $2 = HEAP32[$3 + 24 >> 2];
   HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 36 >> 2] - HEAP32[$3 + 24 >> 2];
   HEAP32[$3 + 4 >> 2] = $2;
   HEAP32[$3 >> 2] = $1;
   tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 97293, $3);
   HEAP32[$3 + 44 >> 2] = 1;
   break label$1;
  }
  HEAP32[$0 + 16 >> 2] = HEAP32[$3 + 28 >> 2] + HEAP32[$3 + 36 >> 2];
  HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 16 >> 2];
  HEAP32[$3 + 44 >> 2] = 0;
 }
 __stack_pointer = $3 + 48 | 0;
 return HEAP32[$3 + 44 >> 2];
}

function graphicsFallbackScroll($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $7 = 0;
 $7 = __stack_pointer - 48 | 0;
 __stack_pointer = $7;
 HEAP32[$7 + 44 >> 2] = $0;
 HEAP32[$7 + 40 >> 2] = $1;
 HEAP32[$7 + 36 >> 2] = $2;
 HEAP32[$7 + 32 >> 2] = $3;
 HEAP32[$7 + 28 >> 2] = $4;
 HEAP32[$7 + 24 >> 2] = $5;
 HEAP32[$7 + 20 >> 2] = $6;
 label$1: {
  if (!(HEAP32[$7 + 40 >> 2] | HEAP32[$7 + 36 >> 2])) {
   break label$1;
  }
  if (HEAP32[$7 + 36 >> 2] <= 0) {
   HEAP32[$7 + 12 >> 2] = HEAP32[$7 + 20 >> 2] + HEAP32[$7 + 36 >> 2];
   HEAP32[$7 + 16 >> 2] = HEAP32[$7 + 28 >> 2];
   while (1) {
    if (HEAP32[$7 + 16 >> 2] <= HEAP32[$7 + 12 >> 2]) {
     graphicsFallbackScrollX(HEAP32[$7 + 44 >> 2], HEAP32[$7 + 40 >> 2], HEAP32[$7 + 16 >> 2] - HEAP32[$7 + 36 >> 2] | 0, HEAP32[$7 + 16 >> 2], HEAP32[$7 + 32 >> 2], HEAP32[$7 + 24 >> 2]);
     HEAP32[$7 + 16 >> 2] = HEAP32[$7 + 16 >> 2] + 1;
     continue;
    }
    break;
   }
   break label$1;
  }
  HEAP32[$7 + 16 >> 2] = HEAP32[$7 + 20 >> 2] - HEAP32[$7 + 36 >> 2];
  while (1) {
   if (HEAP32[$7 + 16 >> 2] >= HEAP32[$7 + 28 >> 2]) {
    graphicsFallbackScrollX(HEAP32[$7 + 44 >> 2], HEAP32[$7 + 40 >> 2], HEAP32[$7 + 16 >> 2], HEAP32[$7 + 16 >> 2] + HEAP32[$7 + 36 >> 2] | 0, HEAP32[$7 + 32 >> 2], HEAP32[$7 + 24 >> 2]);
    HEAP32[$7 + 16 >> 2] = HEAP32[$7 + 16 >> 2] - 1;
    continue;
   }
   break;
  }
 }
 __stack_pointer = $7 + 48 | 0;
}

function jswrap_graphics_getVectorFontPolys($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 128 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 124 >> 2] = $0;
 HEAP32[$3 + 120 >> 2] = $1;
 HEAP32[$3 + 116 >> 2] = $2;
 HEAP32[$3 + 112 >> 2] = 0;
 HEAP32[$3 + 108 >> 2] = 0;
 HEAP32[$3 + 104 >> 2] = 256;
 HEAP32[$3 + 100 >> 2] = 256;
 HEAP32[$3 + 48 >> 2] = 96763;
 HEAP16[$3 + 52 >> 1] = 10;
 HEAP32[$3 + 56 >> 2] = $3 + 112;
 HEAP32[$3 + 60 >> 2] = 96676;
 HEAP16[$3 + 64 >> 1] = 10;
 HEAP32[$3 + 68 >> 2] = $3 + 108;
 HEAP32[$3 + 72 >> 2] = 97016;
 HEAP16[$3 + 76 >> 1] = 10;
 HEAP32[$3 + 80 >> 2] = $3 + 104;
 HEAP32[$3 + 84 >> 2] = 103644;
 HEAP16[$3 + 88 >> 1] = 10;
 HEAP32[$3 + 92 >> 2] = $3 + 100;
 jsvReadConfigObject(HEAP32[$3 + 116 >> 2], $3 + 48 | 0, 4);
 HEAP32[$3 + 120 >> 2] = jsvAsString(HEAP32[$3 + 120 >> 2]);
 HEAP32[$3 + 44 >> 2] = jsvNewEmptyArray();
 jsvStringIteratorNew($3 + 8 | 0, HEAP32[$3 + 120 >> 2], 0);
 while (1) {
  if (jsvStringIteratorHasChar_12($3 + 8 | 0) & 1) {
   HEAP8[$3 + 7 | 0] = jsvStringIteratorGetCharAndNext($3 + 8 | 0);
   HEAP32[$3 + 112 >> 2] = graphicsGetVectorChar(632, HEAP32[$3 + 44 >> 2], HEAP32[$3 + 112 >> 2], HEAP32[$3 + 108 >> 2], HEAP32[$3 + 104 >> 2], HEAP32[$3 + 100 >> 2], HEAP8[$3 + 7 | 0]) + HEAP32[$3 + 112 >> 2];
   continue;
  }
  break;
 }
 jsvStringIteratorFree_16($3 + 8 | 0);
 jsvUnLock(HEAP32[$3 + 120 >> 2]);
 __stack_pointer = $3 + 128 | 0;
 return HEAP32[$3 + 44 >> 2];
}

function jspeStatementFunctionDecl($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 27 | 0] = $0;
 HEAP32[$1 + 20 >> 2] = 0;
 jslGetNextToken();
 HEAP8[$1 + 15 | 0] = (HEAP32[46755] & 63) == 1;
 label$1: {
  if (HEAP8[$1 + 15 | 0] & 1) {
   HEAP32[$1 + 20 >> 2] = jsvNewNameFromString(jslGetTokenValueAsString());
   if (!HEAP32[$1 + 20 >> 2]) {
    HEAP32[$1 + 28 >> 2] = 0;
    break label$1;
   }
  }
  if (!(jslMatch(128) & 1)) {
   jsvUnLock(HEAP32[$1 + 20 >> 2]);
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  label$5: {
   if (HEAP8[$1 + 27 | 0] & 1) {
    $0 = jspeClassDefinition(0);
    break label$5;
   }
   $0 = jspeFunctionDefinition(0);
  }
  HEAP32[$1 + 16 >> 2] = $0;
  if (HEAP8[$1 + 15 | 0] & 1) {
   HEAP32[$1 + 8 >> 2] = jsvFindChildFromVar(HEAP32[46750], HEAP32[$1 + 20 >> 2], 1);
   HEAP32[$1 + 4 >> 2] = jsvSkipName(HEAP32[$1 + 8 >> 2]);
   label$8: {
    if (jsvIsFunction(HEAP32[$1 + 4 >> 2]) & 1) {
     HEAP32[$1 + 16 >> 2] = jsvSkipNameAndUnLock(HEAP32[$1 + 16 >> 2]);
     jswrap_function_replaceWith(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 16 >> 2]);
     break label$8;
    }
    jsvReplaceWith(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 16 >> 2]);
   }
   jsvUnLock(HEAP32[$1 + 20 >> 2]);
   HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 8 >> 2];
   jsvUnLock(HEAP32[$1 + 4 >> 2]);
  }
  jsvUnLock(HEAP32[$1 + 16 >> 2]);
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 20 >> 2];
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function jspeFactorDelete() {
 var $0 = 0;
 $0 = __stack_pointer - 32 | 0;
 __stack_pointer = $0;
 jslGetNextToken();
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = jspeFactorMember(jspeFactor(), $0 + 28 | 0);
 HEAP32[$0 + 20 >> 2] = 0;
 if ((HEAP32[46755] & 63) == 1) {
  HEAP8[$0 + 19 | 0] = 0;
  label$2: {
   if (!(jsvIsName(HEAP32[$0 + 24 >> 2]) & 1)) {
    break label$2;
   }
   if (jsvIsNewChild(HEAP32[$0 + 24 >> 2]) & 1) {
    break label$2;
   }
   label$3: {
    if (HEAP32[$0 + 28 >> 2]) {
     break label$3;
    }
    if (!(jsvIsChild(HEAP32[46747], HEAP32[$0 + 24 >> 2]) & 1)) {
     break label$3;
    }
    HEAP32[$0 + 28 >> 2] = jsvLockAgain(HEAP32[46747]);
   }
   label$4: {
    if (!(jsvHasChildren(HEAP32[$0 + 28 >> 2]) & 1)) {
     break label$4;
    }
    if (!(jsvIsChild(HEAP32[$0 + 28 >> 2], HEAP32[$0 + 24 >> 2]) & 1)) {
     break label$4;
    }
    label$5: {
     if (jsvIsArray(HEAP32[$0 + 28 >> 2]) & 1) {
      HEAP32[$0 + 12 >> 2] = jsvGetArrayLength(HEAP32[$0 + 28 >> 2]);
      jsvRemoveChild(HEAP32[$0 + 28 >> 2], HEAP32[$0 + 24 >> 2]);
      jsvSetArrayLength(HEAP32[$0 + 28 >> 2], HEAP32[$0 + 12 >> 2], 0);
      break label$5;
     }
     jsvRemoveChild(HEAP32[$0 + 28 >> 2], HEAP32[$0 + 24 >> 2]);
    }
    HEAP8[$0 + 19 | 0] = 1;
   }
  }
  HEAP32[$0 + 20 >> 2] = jsvNewFromBool(HEAP8[$0 + 19 | 0] & 1);
 }
 jsvUnLock2(HEAP32[$0 + 24 >> 2], HEAP32[$0 + 28 >> 2]);
 __stack_pointer = $0 + 32 | 0;
 return HEAP32[$0 + 20 >> 2];
}

function tflite__ops__micro__pooling___28anonymous_20namespace_29__CalculateOpData_28TfLiteContext_20const__2c_20TfLitePoolParams_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20tflite__ops__micro__pooling___28anonymous_20namespace_29__OpData__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer + -64 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 60 >> 2] = $0;
 HEAP32[$5 + 56 >> 2] = $1;
 HEAP32[$5 + 52 >> 2] = $2;
 HEAP32[$5 + 48 >> 2] = $3;
 HEAP32[$5 + 44 >> 2] = $4;
 HEAP32[$5 + 40 >> 2] = tflite__SizeOfDimension_28TfLiteTensor_20const__2c_20int_29(HEAP32[$5 + 52 >> 2], 1);
 HEAP32[$5 + 36 >> 2] = tflite__SizeOfDimension_28TfLiteTensor_20const__2c_20int_29(HEAP32[$5 + 52 >> 2], 2);
 tflite__ComputePaddingHeightWidth_28int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20TfLitePadding_2c_20int__2c_20int__29($5 + 8 | 0, HEAP32[HEAP32[$5 + 56 >> 2] + 8 >> 2], HEAP32[HEAP32[$5 + 56 >> 2] + 4 >> 2], 1, 1, HEAP32[$5 + 40 >> 2], HEAP32[$5 + 36 >> 2], HEAP32[HEAP32[$5 + 56 >> 2] + 16 >> 2], HEAP32[HEAP32[$5 + 56 >> 2] + 12 >> 2], HEAP32[HEAP32[$5 + 56 >> 2] >> 2], $5 + 32 | 0, $5 + 28 | 0);
 $0 = HEAP32[$5 + 12 >> 2];
 $1 = HEAP32[$5 + 8 >> 2];
 $3 = $1;
 $2 = HEAP32[$5 + 44 >> 2];
 $1 = $2;
 HEAP32[$1 >> 2] = $3;
 HEAP32[$1 + 4 >> 2] = $0;
 $1 = HEAP32[$5 + 20 >> 2];
 $0 = HEAP32[$5 + 16 >> 2];
 $3 = $0;
 $0 = $2;
 HEAP32[$0 + 8 >> 2] = $3;
 HEAP32[$0 + 12 >> 2] = $1;
 __stack_pointer = $5 - -64 | 0;
 return 0;
}

function jsvIteratorNew($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 label$1: {
  label$2: {
   label$3: {
    if (jsvIsArray(HEAP32[$3 + 8 >> 2]) & 1) {
     break label$3;
    }
    if (jsvIsObject(HEAP32[$3 + 8 >> 2]) & 1) {
     break label$3;
    }
    if (jsvIsFunction(HEAP32[$3 + 8 >> 2]) & 1) {
     break label$3;
    }
    if (!(jsvIsGetterOrSetter(HEAP32[$3 + 8 >> 2]) & 1)) {
     break label$2;
    }
   }
   HEAP32[HEAP32[$3 + 12 >> 2] >> 2] = 2;
   if (!(!(jsvIsArray(HEAP32[$3 + 8 >> 2]) & 1) | !(HEAP32[$3 + 4 >> 2] & 1))) {
    HEAP32[HEAP32[$3 + 12 >> 2] >> 2] = 4;
    HEAP32[HEAP32[$3 + 12 >> 2] + 12 >> 2] = 0;
    $0 = jsvLockAgain(HEAP32[$3 + 8 >> 2]);
    HEAP32[HEAP32[$3 + 12 >> 2] + 8 >> 2] = $0;
   }
   jsvObjectIteratorNew(HEAP32[$3 + 12 >> 2] + 4 | 0, HEAP32[$3 + 8 >> 2]);
   break label$1;
  }
  label$5: {
   if (jsvIsArrayBuffer(HEAP32[$3 + 8 >> 2]) & 1) {
    HEAP32[HEAP32[$3 + 12 >> 2] >> 2] = 3;
    jsvArrayBufferIteratorNew(HEAP32[$3 + 12 >> 2] + 4 | 0, HEAP32[$3 + 8 >> 2], 0);
    break label$5;
   }
   label$7: {
    if (jsvHasCharacterData(HEAP32[$3 + 8 >> 2]) & 1) {
     HEAP32[HEAP32[$3 + 12 >> 2] >> 2] = 1;
     jsvStringIteratorNew(HEAP32[$3 + 12 >> 2] + 4 | 0, HEAP32[$3 + 8 >> 2], 0);
     break label$7;
    }
    HEAP32[HEAP32[$3 + 12 >> 2] >> 2] = 0;
   }
  }
 }
 __stack_pointer = $3 + 16 | 0;
}

function jsvArrayBufferIteratorNew($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[HEAP32[$3 + 12 >> 2] + 48 >> 2] = HEAP32[$3 + 4 >> 2];
 HEAP8[HEAP32[$3 + 12 >> 2] + 36 | 0] = HEAPU8[HEAP32[$3 + 8 >> 2] + 5 | 0];
 $0 = HEAP32[$3 + 8 >> 2];
 HEAP32[HEAP32[$3 + 12 >> 2] + 40 >> 2] = Math_imul(HEAPU8[HEAP32[$3 + 12 >> 2] + 36 | 0] & 15, HEAPU8[$0 + 4 | 0] << 16 | (HEAPU8[$0 + 2 | 0] | HEAPU8[$0 + 3 | 0] << 8));
 $0 = HEAP32[$3 + 8 >> 2];
 HEAP32[HEAP32[$3 + 12 >> 2] + 44 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8;
 HEAP32[$3 >> 2] = jsvGetArrayBufferBackingString(HEAP32[$3 + 8 >> 2], 0);
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP32[$0 + 40 >> 2] = HEAP32[HEAP32[$3 + 12 >> 2] + 44 >> 2] + HEAP32[$0 + 40 >> 2];
 HEAP32[HEAP32[$3 + 12 >> 2] + 44 >> 2] = HEAP32[HEAP32[$3 + 12 >> 2] + 44 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], HEAPU8[HEAP32[$3 + 12 >> 2] + 36 | 0] & 15);
 label$1: {
  if (HEAPU32[HEAP32[$3 + 12 >> 2] + 44 >> 2] >= (HEAP32[HEAP32[$3 + 12 >> 2] + 40 >> 2] + 1 | 0) - (HEAPU8[HEAP32[$3 + 12 >> 2] + 36 | 0] & 15) >>> 0) {
   jsvUnLock(HEAP32[$3 >> 2]);
   HEAP8[HEAP32[$3 + 12 >> 2] + 36 | 0] = 0;
   break label$1;
  }
  jsvStringIteratorNew(HEAP32[$3 + 12 >> 2], HEAP32[$3 >> 2], HEAP32[HEAP32[$3 + 12 >> 2] + 44 >> 2]);
  jsvUnLock(HEAP32[$3 >> 2]);
  HEAP8[HEAP32[$3 + 12 >> 2] + 52 | 0] = 0;
 }
 __stack_pointer = $3 + 16 | 0;
}

function jswrap_storagefile_erase($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 80 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 76 >> 2] = $0;
 jsfNameFromVarAndUnLock($1 + 48 | 0, jsvObjectGetChildIfExists(HEAP32[$1 + 76 >> 2], 105033));
 HEAP32[$1 + 44 >> 2] = 27;
 while (1) {
  $0 = 0;
  $0 = HEAP32[$1 + 44 >> 2] ? !HEAP8[(HEAP32[$1 + 44 >> 2] + $1 | 0) + 47 | 0] : $0;
  if ($0) {
   HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 44 >> 2] - 1;
   continue;
  }
  break;
 }
 HEAP32[$1 + 40 >> 2] = 1;
 HEAP8[$1 + 39 | 0] = 1;
 while (1) {
  if (HEAP8[$1 + 39 | 0] & 1) {
   HEAP8[HEAP32[$1 + 44 >> 2] + ($1 + 48 | 0) | 0] = HEAP32[$1 + 40 >> 2];
   HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 72 >> 2];
   $2 = HEAP32[$1 + 68 >> 2];
   $0 = HEAP32[$1 + 64 >> 2];
   HEAP32[$1 + 24 >> 2] = $0;
   HEAP32[$1 + 28 >> 2] = $2;
   $0 = HEAP32[$1 + 60 >> 2];
   $2 = HEAP32[$1 + 56 >> 2];
   HEAP32[$1 + 16 >> 2] = $2;
   HEAP32[$1 + 20 >> 2] = $0;
   $2 = HEAP32[$1 + 52 >> 2];
   $0 = HEAP32[$1 + 48 >> 2];
   HEAP32[$1 + 8 >> 2] = $0;
   HEAP32[$1 + 12 >> 2] = $2;
   HEAP8[$1 + 39 | 0] = jsfEraseFile($1 + 8 | 0) & 1;
   HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 1;
   continue;
  }
  break;
 }
 jsvObjectSetChildAndUnLock(HEAP32[$1 + 76 >> 2], 103079, jsvNewFromInteger(1));
 jsvObjectSetChildAndUnLock(HEAP32[$1 + 76 >> 2], 98034, jsvNewFromInteger(0));
 jsvObjectSetChildAndUnLock(HEAP32[$1 + 76 >> 2], 105433, jsvNewFromInteger(0));
 __stack_pointer = $1 + 80 | 0;
}

function jswrap_object_removeAllListeners($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 label$1: {
  if (!(jsvHasChildren(HEAP32[$2 + 28 >> 2]) & 1)) {
   jsExceptionHere(3, 107694, 0);
   break label$1;
  }
  if (jsvIsString(HEAP32[$2 + 24 >> 2]) & 1) {
   HEAP32[$2 >> 2] = HEAP32[$2 + 24 >> 2];
   HEAP32[$2 + 20 >> 2] = jsvVarPrintf(97042, $2);
   if (!HEAP32[$2 + 20 >> 2]) {
    break label$1;
   }
   HEAP32[$2 + 16 >> 2] = jsvFindChildFromVar(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 20 >> 2], 1);
   jsvUnLock(HEAP32[$2 + 20 >> 2]);
   if (HEAP32[$2 + 16 >> 2]) {
    jsvRemoveChildAndUnLock(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 16 >> 2]);
   }
   break label$1;
  }
  label$5: {
   if (jsvIsUndefined(HEAP32[$2 + 24 >> 2]) & 1) {
    jsvObjectIteratorNew($2 + 8 | 0, HEAP32[$2 + 28 >> 2]);
    while (1) {
     if (jsvObjectIteratorHasValue_9($2 + 8 | 0) & 1) {
      HEAP32[$2 + 4 >> 2] = jsvObjectIteratorGetKey_6($2 + 8 | 0);
      jsvObjectIteratorNext($2 + 8 | 0);
      if (jsvIsStringEqualOrStartsWith(HEAP32[$2 + 4 >> 2], 102470, 1) & 1) {
       jsvRemoveChild(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 4 >> 2]);
      }
      jsvUnLock(HEAP32[$2 + 4 >> 2]);
      continue;
     }
     break;
    }
    jsvObjectIteratorFree_9($2 + 8 | 0);
    break label$5;
   }
   jsExceptionHere(3, 106501, 0);
  }
 }
 __stack_pointer = $2 + 32 | 0;
}

function jswrap_espruino_HSBtoRGB($0, $1, $2, $3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 80 | 0;
 __stack_pointer = $4;
 HEAPF64[$4 + 64 >> 3] = $0;
 HEAPF64[$4 + 56 >> 3] = $1;
 HEAPF64[$4 + 48 >> 3] = $2;
 HEAP32[$4 + 44 >> 2] = $3;
 HEAP32[$4 + 40 >> 2] = jswrap_espruino_HSBtoRGB_int(HEAPF64[$4 + 64 >> 3], HEAPF64[$4 + 56 >> 3], HEAPF64[$4 + 48 >> 3]);
 label$1: {
  if (!(HEAP32[$4 + 44 >> 2] != 24 ? HEAP32[$4 + 44 >> 2] : 0)) {
   HEAP32[$4 + 76 >> 2] = jsvNewFromInteger(HEAP32[$4 + 40 >> 2]);
   break label$1;
  }
  HEAP32[$4 + 36 >> 2] = HEAP32[$4 + 40 >> 2] & 255;
  HEAP32[$4 + 32 >> 2] = HEAP32[$4 + 40 >> 2] >> 8 & 255;
  HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 40 >> 2] >> 16 & 255;
  if (HEAP32[$4 + 44 >> 2] == 16) {
   HEAP32[$4 + 76 >> 2] = jsvNewFromInteger(HEAP32[$4 + 32 >> 2] >> 2 << 5 | HEAP32[$4 + 28 >> 2] >> 3 | HEAP32[$4 + 36 >> 2] >> 3 << 11);
   break label$1;
  }
  if (HEAP32[$4 + 44 >> 2] != 1) {
   jsExceptionHere(1, 110817, 0);
   HEAP32[$4 + 76 >> 2] = 0;
   break label$1;
  }
  HEAP32[$4 + 16 >> 2] = jsvNewFromInteger(HEAP32[$4 + 36 >> 2]);
  HEAP32[$4 + 20 >> 2] = jsvNewFromInteger(HEAP32[$4 + 32 >> 2]);
  HEAP32[$4 + 24 >> 2] = jsvNewFromInteger(HEAP32[$4 + 28 >> 2]);
  HEAP32[$4 + 12 >> 2] = jsvNewArray($4 + 16 | 0, 3);
  jsvUnLockMany(3, $4 + 16 | 0);
  HEAP32[$4 + 76 >> 2] = HEAP32[$4 + 12 >> 2];
 }
 __stack_pointer = $4 + 80 | 0;
 return HEAP32[$4 + 76 >> 2];
}

function heatshrink_encoder_sink($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 24 >> 2] = $0;
 HEAP32[$4 + 20 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $2;
 HEAP32[$4 + 12 >> 2] = $3;
 label$1: {
  if (HEAP32[$4 + 12 >> 2] ? !HEAP32[$4 + 24 >> 2] | !HEAP32[$4 + 20 >> 2] : 1) {
   HEAP32[$4 + 28 >> 2] = -1;
   break label$1;
  }
  if (is_finishing(HEAP32[$4 + 24 >> 2])) {
   HEAP32[$4 + 28 >> 2] = -2;
   break label$1;
  }
  if (HEAPU8[HEAP32[$4 + 24 >> 2] + 12 | 0]) {
   HEAP32[$4 + 28 >> 2] = -2;
   break label$1;
  }
  HEAP16[$4 + 10 >> 1] = (get_input_offset(HEAP32[$4 + 24 >> 2]) & 65535) + HEAPU16[HEAP32[$4 + 24 >> 2] >> 1];
  HEAP16[$4 + 8 >> 1] = get_input_buffer_size(HEAP32[$4 + 24 >> 2]);
  HEAP16[$4 + 6 >> 1] = HEAPU16[$4 + 8 >> 1] - HEAPU16[HEAP32[$4 + 24 >> 2] >> 1];
  if (HEAPU16[$4 + 6 >> 1] < HEAPU32[$4 + 16 >> 2]) {
   $0 = HEAPU16[$4 + 6 >> 1];
  } else {
   $0 = HEAP32[$4 + 16 >> 2];
  }
  HEAP16[$4 + 4 >> 1] = $0;
  __memcpy(HEAPU16[$4 + 10 >> 1] + (HEAP32[$4 + 24 >> 2] + 15 | 0) | 0, HEAP32[$4 + 20 >> 2], HEAPU16[$4 + 4 >> 1]);
  HEAP32[HEAP32[$4 + 12 >> 2] >> 2] = HEAPU16[$4 + 4 >> 1];
  $0 = HEAP32[$4 + 24 >> 2];
  HEAP16[$0 >> 1] = HEAPU16[$4 + 4 >> 1] + HEAPU16[$0 >> 1];
  if (HEAPU16[$4 + 4 >> 1] == HEAPU16[$4 + 6 >> 1]) {
   HEAP8[HEAP32[$4 + 24 >> 2] + 12 | 0] = 1;
  }
  HEAP32[$4 + 28 >> 2] = 0;
 }
 __stack_pointer = $4 + 32 | 0;
 return HEAP32[$4 + 28 >> 2];
}

function jspExecuteFunction($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer + -64 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 60 >> 2] = $0;
 HEAP32[$4 + 56 >> 2] = $1;
 HEAP32[$4 + 52 >> 2] = $2;
 HEAP32[$4 + 48 >> 2] = $3;
 HEAP32[$4 + 40 >> 2] = HEAP32[46755];
 $0 = HEAP32[46754];
 $1 = HEAP32[46753];
 HEAP32[$4 + 32 >> 2] = $1;
 HEAP32[$4 + 36 >> 2] = $0;
 $1 = HEAP32[46752];
 $0 = HEAP32[46751];
 HEAP32[$4 + 24 >> 2] = $0;
 HEAP32[$4 + 28 >> 2] = $1;
 $0 = HEAP32[46750];
 $1 = HEAP32[46749];
 HEAP32[$4 + 16 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $0;
 $1 = HEAP32[46748];
 $0 = HEAP32[46747];
 HEAP32[$4 + 8 >> 2] = $0;
 HEAP32[$4 + 12 >> 2] = $1;
 HEAP32[46749] = 0;
 HEAP32[46755] = 1;
 HEAP32[46753] = 0;
 HEAP32[$4 + 4 >> 2] = jspeFunctionCall(HEAP32[$4 + 60 >> 2], 0, HEAP32[$4 + 56 >> 2], 0, HEAP32[$4 + 52 >> 2], HEAP32[$4 + 48 >> 2]);
 jspeiClearScopes();
 HEAP32[$4 + 40 >> 2] = HEAP32[$4 + 40 >> 2] | HEAP32[46755] & 6256;
 jspeiClearScopes();
 $0 = HEAP32[$4 + 12 >> 2];
 $1 = HEAP32[$4 + 8 >> 2];
 HEAP32[46747] = $1;
 HEAP32[46748] = $0;
 HEAP32[46755] = HEAP32[$4 + 40 >> 2];
 $1 = HEAP32[$4 + 36 >> 2];
 $0 = HEAP32[$4 + 32 >> 2];
 HEAP32[46753] = $0;
 HEAP32[46754] = $1;
 $0 = HEAP32[$4 + 28 >> 2];
 $1 = HEAP32[$4 + 24 >> 2];
 HEAP32[46751] = $1;
 HEAP32[46752] = $0;
 $1 = HEAP32[$4 + 20 >> 2];
 $0 = HEAP32[$4 + 16 >> 2];
 HEAP32[46749] = $0;
 HEAP32[46750] = $1;
 __stack_pointer = $4 - -64 | 0;
 return HEAP32[$4 + 4 >> 2];
}

function tflite__MicroAllocator__AllocateNodeAndRegistrations_28tflite__Model_20const__2c_20tflite__NodeAndRegistration___29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 $0 = HEAP32[$3 + 24 >> 2];
 label$1: {
  if (!HEAP32[$3 + 16 >> 2]) {
   break label$1;
  }
 }
 HEAP32[$3 + 12 >> 2] = tflite__MicroAllocator__GetSubGraphFromModel_28tflite__Model_20const__29($0, HEAP32[$3 + 20 >> 2]);
 label$2: {
  if (!HEAP32[$3 + 12 >> 2]) {
   break label$2;
  }
 }
 $1 = HEAP32[$0 + 4 >> 2];
 HEAP32[$3 + 8 >> 2] = (wasm2js_i32$1 = $1, wasm2js_i32$2 = Math_imul(flatbuffers__Vector_flatbuffers__Offset_tflite__Operator____size_28_29_20const(tflite__SubGraph__operators_28_29_20const(HEAP32[$3 + 12 >> 2])), 28), 
 wasm2js_i32$3 = 4, wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 12 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
 label$3: {
  if (!HEAP32[$3 + 8 >> 2]) {
   tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$0 + 8 >> 2], 111579, 0);
   HEAP32[$3 + 28 >> 2] = 1;
   break label$3;
  }
  HEAP32[HEAP32[$3 + 16 >> 2] >> 2] = HEAP32[$3 + 8 >> 2];
  HEAP32[$3 + 28 >> 2] = 0;
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function tflite__GetQuantizedConvolutionMultipler_28TfLiteContext__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20double__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 80 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 72 >> 2] = $0;
 HEAP32[$6 + 68 >> 2] = $1;
 HEAP32[$6 + 64 >> 2] = $2;
 HEAP32[$6 + 60 >> 2] = $3;
 HEAP32[$6 + 56 >> 2] = $4;
 HEAP32[$6 + 52 >> 2] = $5;
 HEAPF64[$6 + 40 >> 3] = +HEAPF32[HEAP32[$6 + 68 >> 2] + 8 >> 2] * +HEAPF32[HEAP32[$6 + 64 >> 2] + 8 >> 2];
 label$1: {
  if (HEAP32[$6 + 60 >> 2]) {
   HEAPF64[$6 + 32 >> 3] = HEAPF32[HEAP32[$6 + 60 >> 2] + 8 >> 2];
   HEAPF64[$6 + 24 >> 3] = abs_28double_29(HEAPF64[$6 + 40 >> 3] - HEAPF64[$6 + 32 >> 3]);
   HEAPF64[$6 + 16 >> 3] = HEAPF32[HEAP32[$6 + 56 >> 2] + 8 >> 2];
   if (!(HEAPF64[$6 + 24 >> 3] / HEAPF64[$6 + 16 >> 3] <= .02)) {
    $0 = HEAP32[HEAP32[$6 + 72 >> 2] + 20 >> 2];
    $1 = HEAP32[$6 + 72 >> 2];
    HEAP32[$6 >> 2] = 111040;
    FUNCTION_TABLE[$0 | 0]($1, 111890, $6);
    HEAP32[$6 + 76 >> 2] = 1;
    break label$1;
   }
  }
  HEAP32[$6 + 76 >> 2] = tflite__GetQuantizedConvolutionMultipler_28TfLiteContext__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20double__29(HEAP32[$6 + 72 >> 2], HEAP32[$6 + 68 >> 2], HEAP32[$6 + 64 >> 2], HEAP32[$6 + 56 >> 2], HEAP32[$6 + 52 >> 2]);
 }
 __stack_pointer = $6 + 80 | 0;
 return HEAP32[$6 + 76 >> 2];
}

function tflite__ops__micro__reshape__Eval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = tflite__micro__GetEvalInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], 0);
 HEAP32[$2 + 12 >> 2] = tflite__micro__GetEvalOutput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], 0);
 HEAP32[$2 + 4 >> 2] = tflite__TfLiteTypeSizeOf_28TfLiteType_2c_20unsigned_20long__29(HEAP32[HEAP32[$2 + 16 >> 2] + 8 >> 2], $2 + 8 | 0);
 label$1: {
  if (HEAP32[$2 + 4 >> 2]) {
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 4 >> 2];
   break label$1;
  }
  HEAP32[$2 + 8 >> 2] = Math_imul(tflite__ElementCount_28TfLiteIntArray_20const__29(HEAP32[HEAP32[$2 + 16 >> 2] + 4 >> 2]), HEAP32[$2 + 8 >> 2]);
  if (HEAP32[HEAP32[$2 + 16 >> 2] >> 2] != HEAP32[HEAP32[$2 + 12 >> 2] >> 2]) {
   HEAP32[$2 >> 2] = 0;
   while (1) {
    if (HEAPU32[$2 >> 2] < HEAPU32[$2 + 8 >> 2]) {
     HEAP8[HEAP32[HEAP32[$2 + 12 >> 2] >> 2] + HEAP32[$2 >> 2] | 0] = HEAPU8[HEAP32[HEAP32[$2 + 16 >> 2] >> 2] + HEAP32[$2 >> 2] | 0];
     HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + 1;
     continue;
    }
    break;
   }
  }
  HEAP32[$2 + 28 >> 2] = 0;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jsvAsArrayIndex($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 label$1: {
  label$2: {
   if (!(jsvIsSimpleInt(HEAP32[$1 + 24 >> 2]) & 1)) {
    break label$2;
   }
   if ((jsvGetInteger(HEAP32[$1 + 24 >> 2]) | 0) < 0) {
    break label$2;
   }
   HEAP32[$1 + 28 >> 2] = jsvLockAgain(HEAP32[$1 + 24 >> 2]);
   break label$1;
  }
  if (jsvIsString(HEAP32[$1 + 24 >> 2]) & 1) {
   if (jsvIsStringNumericStrict(HEAP32[$1 + 24 >> 2]) & 1) {
    HEAP32[$1 + 20 >> 2] = jsvNewFromInteger(jsvGetInteger(HEAP32[$1 + 24 >> 2]));
    HEAP32[$1 + 16 >> 2] = jsvAsString(HEAP32[$1 + 20 >> 2]);
    if (!jsvCompareString(HEAP32[$1 + 24 >> 2], HEAP32[$1 + 16 >> 2], 0, 0, 0)) {
     jsvUnLock(HEAP32[$1 + 16 >> 2]);
     HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 20 >> 2];
     break label$1;
    }
    jsvUnLock2(HEAP32[$1 + 20 >> 2], HEAP32[$1 + 16 >> 2]);
   }
   HEAP32[$1 + 28 >> 2] = jsvLockAgain(HEAP32[$1 + 24 >> 2]);
   break label$1;
  }
  if (jsvIsFloat(HEAP32[$1 + 24 >> 2]) & 1) {
   HEAPF64[$1 + 8 >> 3] = jsvGetFloat(HEAP32[$1 + 24 >> 2]);
   HEAP32[$1 + 4 >> 2] = jsvGetInteger(HEAP32[$1 + 24 >> 2]);
   if (HEAPF64[$1 + 8 >> 3] == +HEAP32[$1 + 4 >> 2]) {
    HEAP32[$1 + 28 >> 2] = jsvNewFromInteger(HEAP32[$1 + 4 >> 2]);
    break label$1;
   }
  }
  HEAP32[$1 + 28 >> 2] = jsvAsString(HEAP32[$1 + 24 >> 2]);
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function jsiGetHistoryLine($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 27 | 0] = $0;
 HEAP32[$1 + 20 >> 2] = jsiGetHistory();
 label$1: {
  if (!HEAP32[$1 + 20 >> 2]) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 16 >> 2] = 0;
  HEAP32[$1 + 12 >> 2] = jsvGetIndexOf(HEAP32[$1 + 20 >> 2], HEAP32[46763], 1);
  label$3: {
   if (HEAP32[$1 + 12 >> 2]) {
    label$5: {
     label$6: {
      if (!(HEAP8[$1 + 27 | 0] & 1)) {
       break label$6;
      }
      if (!(jsvGetPrevSibling(HEAP32[$1 + 12 >> 2]) & 65535)) {
       break label$6;
      }
      HEAP32[$1 + 16 >> 2] = jsvSkipNameAndUnLock(jsvLock(jsvGetPrevSibling(HEAP32[$1 + 12 >> 2]) & 65535));
      break label$5;
     }
     label$7: {
      if (HEAP8[$1 + 27 | 0] & 1) {
       break label$7;
      }
      if (!(jsvGetNextSibling(HEAP32[$1 + 12 >> 2]) & 65535)) {
       break label$7;
      }
      HEAP32[$1 + 16 >> 2] = jsvSkipNameAndUnLock(jsvLock(jsvGetNextSibling(HEAP32[$1 + 12 >> 2]) & 65535));
     }
    }
    jsvUnLock(HEAP32[$1 + 12 >> 2]);
    break label$3;
   }
   if (HEAP8[$1 + 27 | 0] & 1) {
    HEAP32[$1 + 16 >> 2] = jsvSkipNameAndUnLock(jsvGetArrayItem(HEAP32[$1 + 20 >> 2], jsvGetArrayLength(HEAP32[$1 + 20 >> 2]) - 1 | 0));
   }
  }
  jsvUnLock(HEAP32[$1 + 20 >> 2]);
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 16 >> 2];
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function int_20gemmlowp__RoundingDivideByPOT_int__28int_2c_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 $0 = HEAP32[$2 + 24 >> 2];
 $1 = $0 & 31;
 $0 = ($0 & 63) >>> 0 >= 32 ? 0 : 1 << $1;
 $1 = $0 - 1 | 0;
 HEAP32[$2 + 20 >> 2] = int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29($1);
 HEAP32[$2 + 16 >> 2] = int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(0);
 HEAP32[$2 + 12 >> 2] = int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(1);
 HEAP32[$2 + 8 >> 2] = int_20gemmlowp__BitAnd_int__28int_2c_20int_29(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 20 >> 2]);
 HEAP32[$2 + 4 >> 2] = int_20gemmlowp__Add_int__28int_2c_20int_29(int_20gemmlowp__ShiftRight_int__28int_2c_20int_29(HEAP32[$2 + 20 >> 2], 1), int_20gemmlowp__BitAnd_int__28int_2c_20int_29(int_20gemmlowp__MaskIfLessThan_int__28int_2c_20int_29(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 16 >> 2]), HEAP32[$2 + 12 >> 2]));
 $0 = int_20gemmlowp__Add_int__28int_2c_20int_29(int_20gemmlowp__ShiftRight_int__28int_2c_20int_29(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 24 >> 2]), int_20gemmlowp__BitAnd_int__28int_2c_20int_29(int_20gemmlowp__MaskIfGreaterThan_int__28int_2c_20int_29(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]), HEAP32[$2 + 12 >> 2]));
 __stack_pointer = $2 + 32 | 0;
 return $0;
}

function jslGetNextCh() {
 var $0 = 0;
 $0 = jslNextCh();
 HEAP8[HEAP32[38615]] = $0;
 $0 = HEAP32[38615];
 HEAP32[$0 + 88 >> 2] = HEAP32[$0 + 88 >> 2] + 1;
 label$1: {
  if (HEAPU32[HEAP32[38615] + 88 >> 2] < HEAPU32[HEAP32[38615] + 92 >> 2]) {
   break label$1;
  }
  $0 = HEAP32[38615];
  HEAP32[$0 + 88 >> 2] = HEAP32[$0 + 88 >> 2] - HEAP32[HEAP32[38615] + 92 >> 2];
  $0 = HEAP32[38615];
  HEAP32[$0 + 96 >> 2] = HEAP32[HEAP32[38615] + 92 >> 2] + HEAP32[$0 + 96 >> 2];
  if (jsvIsFlashString(HEAP32[HEAP32[38615] + 100 >> 2]) & 1) {
   jsvStringIteratorLoadFlashString(HEAP32[38615] + 88 | 0);
   break label$1;
  }
  label$3: {
   label$4: {
    if (!HEAP32[HEAP32[38615] + 100 >> 2]) {
     break label$4;
    }
    if (!(jsvGetLastChild(HEAP32[HEAP32[38615] + 100 >> 2]) & 65535)) {
     break label$4;
    }
    $0 = _jsvGetAddressOf(jsvGetLastChild(HEAP32[HEAP32[38615] + 100 >> 2]) & 65535);
    HEAP32[HEAP32[38615] + 100 >> 2] = $0;
    HEAP32[HEAP32[38615] + 104 >> 2] = HEAP32[HEAP32[38615] + 100 >> 2];
    $0 = jsvGetCharactersInVar(HEAP32[HEAP32[38615] + 100 >> 2]);
    HEAP32[HEAP32[38615] + 92 >> 2] = $0;
    break label$3;
   }
   HEAP32[HEAP32[38615] + 100 >> 2] = 0;
   HEAP32[HEAP32[38615] + 104 >> 2] = 0;
   HEAP32[HEAP32[38615] + 92 >> 2] = 0;
   $0 = HEAP32[38615];
   HEAP32[$0 + 96 >> 2] = HEAP32[HEAP32[38615] + 88 >> 2] + HEAP32[$0 + 96 >> 2];
   HEAP32[HEAP32[38615] + 88 >> 2] = 0;
  }
 }
}

function jsfGetNextFileHeader($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = HEAP32[HEAP32[$3 + 24 >> 2] >> 2];
 HEAP32[HEAP32[$3 + 24 >> 2] >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = (HEAP32[$3 + 12 >> 2] + jsfGetFileSize(HEAP32[$3 + 20 >> 2]) | 0) + 32;
 HEAP32[$3 + 8 >> 2] = jsfAlignAddress(HEAP32[$3 + 8 >> 2]);
 label$1: {
  if (HEAPU32[$3 + 8 >> 2] < HEAPU32[$3 + 12 >> 2]) {
   HEAP8[$3 + 31 | 0] = 0;
   break label$1;
  }
  if (HEAP32[$3 + 8 >> 2] + 32 >>> 0 > jsfGetBankEndAddress(HEAP32[$3 + 12 >> 2]) >>> 0) {
   HEAP8[$3 + 31 | 0] = 0;
   break label$1;
  }
  HEAP32[HEAP32[$3 + 24 >> 2] >> 2] = HEAP32[$3 + 8 >> 2];
  HEAP8[$3 + 7 | 0] = jsfGetFileHeader(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 20 >> 2], ((HEAP32[$3 + 16 >> 2] & 2) != 0 ^ -1) & 1) & 1;
  if (!(!(HEAP32[$3 + 16 >> 2] & 1) | HEAP8[$3 + 7 | 0] & 1)) {
   HEAP32[$3 + 8 >> 2] = jsfGetAddressOfNextPage(HEAP32[$3 + 8 >> 2]);
   HEAP32[HEAP32[$3 + 24 >> 2] >> 2] = HEAP32[$3 + 8 >> 2];
   if (!HEAP32[$3 + 8 >> 2]) {
    HEAP8[$3 + 31 | 0] = 0;
    break label$1;
   }
   HEAP8[$3 + 7 | 0] = jsfGetFileHeader(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 20 >> 2], ((HEAP32[$3 + 16 >> 2] & 2) != 0 ^ -1) & 1) & 1;
  }
  HEAP8[$3 + 31 | 0] = HEAP8[$3 + 7 | 0] & 1;
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP8[$3 + 31 | 0] & 1;
}

function jswrap_serial_unsetup($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 label$1: {
  if (!(jsvIsObject(HEAP32[$1 + 28 >> 2]) & 1)) {
   break label$1;
  }
  HEAP8[$1 + 27 | 0] = jsiGetDeviceFromClass(HEAP32[$1 + 28 >> 2]);
  HEAP32[$1 + 20 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 28 >> 2], 100220);
  HEAP32[$1 + 16 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 28 >> 2], 104661);
  if (HEAP32[$1 + 20 >> 2]) {
   jsserialPopulateUSARTInfo($1, HEAP32[$1 + 16 >> 2], HEAP32[$1 + 20 >> 2]);
   if (HEAPU8[$1 + 6 | 0] != 255) {
    jshPinSetState(HEAPU8[$1 + 6 | 0], 0);
   }
   if (HEAPU8[$1 + 7 | 0] != 255) {
    jshPinSetState(HEAPU8[$1 + 7 | 0], 0);
   }
   if (HEAPU8[$1 + 4 | 0] != 255) {
    jshPinSetState(HEAPU8[$1 + 4 | 0], 0);
   }
   if (HEAPU8[$1 + 5 | 0] != 255) {
    jshPinSetState(HEAPU8[$1 + 5 | 0], 0);
   }
   if (!(HEAPU8[$1 + 27 | 0] <= 22 & HEAPU8[$1 + 27 | 0] >= 17)) {
    jsserialEventCallbackKill(HEAP32[$1 + 28 >> 2], $1);
   }
  }
  jsvUnLock2(HEAP32[$1 + 20 >> 2], HEAP32[$1 + 16 >> 2]);
  jsvObjectRemoveChild(HEAP32[$1 + 28 >> 2], 104661);
  jsvObjectRemoveChild(HEAP32[$1 + 28 >> 2], 100220);
  if (HEAPU8[$1 + 27 | 0] < 17 | HEAPU8[$1 + 27 | 0] > 22) {
   break label$1;
  }
  jshUSARTUnSetup(HEAPU8[$1 + 27 | 0]);
  jshSetFlowControlEnabled(HEAPU8[$1 + 27 | 0], 0, 255);
 }
 __stack_pointer = $1 + 32 | 0;
}

function jswrap_graphics_imageMetrics($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 192 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 184 >> 2] = $0;
 HEAP32[$2 + 180 >> 2] = $1;
 label$1: {
  if (!(graphicsGetFromVar($2 + 104 | 0, HEAP32[$2 + 184 >> 2]) & 1)) {
   HEAP32[$2 + 188 >> 2] = 0;
   break label$1;
  }
  if (!(_jswrap_graphics_parseImage($2 + 104 | 0, HEAP32[$2 + 180 >> 2], 0, $2 + 16 | 0) & 1)) {
   HEAP32[$2 + 188 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = jsvGetLength(HEAP32[$2 + 36 >> 2]) - HEAP32[$2 + 40 >> 2];
  _jswrap_graphics_freeImageInfo($2 + 16 | 0);
  HEAP32[$2 + 8 >> 2] = jsvNewObject();
  if (HEAP32[$2 + 8 >> 2]) {
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 8 >> 2], 103393, jsvNewFromInteger(HEAP32[$2 + 16 >> 2]));
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 8 >> 2], 97915, jsvNewFromInteger(HEAP32[$2 + 20 >> 2]));
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 8 >> 2], 101843, jsvNewFromInteger(HEAP32[$2 + 24 >> 2]));
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 8 >> 2], 97704, jsvNewFromBool(HEAP8[$2 + 28 | 0] & 1));
   HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 12 >> 2] / HEAPU16[$2 + 66 >> 1];
   if (HEAP32[$2 + 4 >> 2] > 1) {
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 8 >> 2], 100371, jsvNewFromInteger(HEAP32[$2 + 4 >> 2]));
   }
  }
  HEAP32[$2 + 188 >> 2] = HEAP32[$2 + 8 >> 2];
 }
 __stack_pointer = $2 + 192 | 0;
 return HEAP32[$2 + 188 >> 2];
}

function tflite__GreedyMemoryPlanner__NextSimultaneouslyActiveBuffer_28tflite__GreedyMemoryPlanner__ListEntry_20const__2c_20int_2c_20int_29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 24 >> 2] = $0;
 HEAP32[$4 + 20 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $2;
 HEAP32[$4 + 12 >> 2] = $3;
 $0 = HEAP32[$4 + 24 >> 2];
 HEAP32[$4 + 8 >> 2] = 0;
 label$1: {
  label$2: {
   if (!HEAP32[$4 + 20 >> 2]) {
    HEAP32[$4 + 4 >> 2] = HEAP32[$0 + 24 >> 2] + Math_imul(HEAP32[$0 + 32 >> 2], 12);
    break label$2;
   }
   if (HEAP32[HEAP32[$4 + 20 >> 2] + 8 >> 2] == -1) {
    HEAP32[$4 + 28 >> 2] = 0;
    break label$1;
   }
   HEAP32[$4 + 4 >> 2] = HEAP32[$0 + 24 >> 2] + Math_imul(HEAP32[HEAP32[$4 + 20 >> 2] + 8 >> 2], 12);
  }
  while (1) {
   label$6: {
    if (tflite__GreedyMemoryPlanner__DoesEntryOverlapInTime_28tflite__GreedyMemoryPlanner__ListEntry_20const__2c_20int_2c_20int_29_20const($0, HEAP32[$4 + 4 >> 2], HEAP32[$4 + 16 >> 2], HEAP32[$4 + 12 >> 2]) & 1) {
     HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 4 >> 2];
     break label$6;
    }
    if (HEAP32[HEAP32[$4 + 4 >> 2] + 8 >> 2] == -1) {
     break label$6;
    }
    HEAP32[$4 + 4 >> 2] = HEAP32[$0 + 24 >> 2] + Math_imul(HEAP32[HEAP32[$4 + 4 >> 2] + 8 >> 2], 12);
    continue;
   }
   break;
  }
  HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 8 >> 2];
 }
 __stack_pointer = $4 + 32 | 0;
 return HEAP32[$4 + 28 >> 2];
}

function push_bits($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP8[$4 + 27 | 0] = $1;
 HEAP8[$4 + 26 | 0] = $2;
 HEAP32[$4 + 20 >> 2] = $3;
 label$1: {
  if (!(HEAPU8[$4 + 27 | 0] != 8 | HEAPU8[HEAP32[$4 + 28 >> 2] + 14 | 0] != 128)) {
   $2 = HEAPU8[$4 + 26 | 0];
   $3 = HEAP32[HEAP32[$4 + 20 >> 2] >> 2];
   $0 = HEAP32[HEAP32[$4 + 20 >> 2] + 8 >> 2];
   $1 = HEAP32[$0 >> 2];
   HEAP32[$0 >> 2] = $1 + 1;
   HEAP8[$1 + $3 | 0] = $2;
   break label$1;
  }
  HEAP32[$4 + 16 >> 2] = HEAPU8[$4 + 27 | 0] - 1;
  while (1) {
   if (HEAP32[$4 + 16 >> 2] >= 0) {
    HEAP8[$4 + 15 | 0] = (HEAPU8[$4 + 26 | 0] & 1 << HEAP32[$4 + 16 >> 2]) != 0;
    if (HEAP8[$4 + 15 | 0] & 1) {
     $0 = HEAP32[$4 + 28 >> 2];
     HEAP8[$0 + 13 | 0] = HEAPU8[HEAP32[$4 + 28 >> 2] + 14 | 0] | HEAPU8[$0 + 13 | 0];
    }
    $0 = HEAP32[$4 + 28 >> 2];
    HEAP8[$0 + 14 | 0] = HEAPU8[$0 + 14 | 0] >>> 1;
    if (!HEAPU8[HEAP32[$4 + 28 >> 2] + 14 | 0]) {
     HEAP8[HEAP32[$4 + 28 >> 2] + 14 | 0] = 128;
     $2 = HEAPU8[HEAP32[$4 + 28 >> 2] + 13 | 0];
     $3 = HEAP32[HEAP32[$4 + 20 >> 2] >> 2];
     $0 = HEAP32[HEAP32[$4 + 20 >> 2] + 8 >> 2];
     $1 = HEAP32[$0 >> 2];
     HEAP32[$0 >> 2] = $1 + 1;
     HEAP8[$1 + $3 | 0] = $2;
     HEAP8[HEAP32[$4 + 28 >> 2] + 13 | 0] = 0;
    }
    HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 16 >> 2] - 1;
    continue;
   }
   break;
  }
 }
}

function jswrap_math_round($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAPF64[$1 + 32 >> 3] = $0;
 $2 = __DOUBLE_BITS_6(HEAPF64[$1 + 32 >> 3]);
 $4 = $2;
 $3 = i64toi32_i32$HIGH_BITS;
 $2 = $3 & 2147483647;
 label$1: {
  label$2: {
   if (!(($2 | 0) == 2146435072 | $2 >>> 0 > 2146435072)) {
    if (!(isNegativeZero(HEAPF64[$1 + 32 >> 3]) & 1)) {
     break label$2;
    }
   }
   HEAP32[$1 + 44 >> 2] = jsvNewFromFloat(HEAPF64[$1 + 32 >> 3]);
   break label$1;
  }
  HEAPF64[$1 + 32 >> 3] = HEAPF64[$1 + 32 >> 3] + (HEAPF64[$1 + 32 >> 3] < 0 ? -.5 : .5);
  $2 = $1;
  $0 = HEAPF64[$1 + 32 >> 3];
  label$5: {
   if (Math_abs($0) < 0x8000000000000000) {
    $3 = Math_abs($0) >= 1 ? ~~($0 > 0 ? Math_min(Math_floor($0 * 2.3283064365386963e-10), 4294967295) : Math_ceil(($0 - +(~~$0 >>> 0 >>> 0)) * 2.3283064365386963e-10)) >>> 0 : 0;
    $5 = ~~$0 >>> 0;
    break label$5;
   }
   $3 = -2147483648;
  }
  HEAP32[$2 + 24 >> 2] = $5;
  HEAP32[$2 + 28 >> 2] = $3;
  $3 = HEAP32[$1 + 24 >> 2];
  $2 = HEAP32[$1 + 28 >> 2];
  if (!(!!($3 | $2) | !(HEAPF64[$1 + 32 >> 3] < 0))) {
   HEAP32[$1 + 44 >> 2] = jsvNewFromFloat(-0);
   break label$1;
  }
  $2 = HEAP32[$1 + 24 >> 2];
  $3 = HEAP32[$1 + 28 >> 2];
  HEAP32[$1 + 44 >> 2] = jsvNewFromLongInteger($2, $3);
 }
 __stack_pointer = $1 + 48 | 0;
 return HEAP32[$1 + 44 >> 2];
}

function jsvIteratorSetValue($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 label$1: {
  label$2: {
   switch (HEAP32[HEAP32[$2 + 12 >> 2] >> 2] - 1 | 0) {
   case 3:
    label$6: {
     if (!(jsvIsIntegerish(HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2]) & 1)) {
      break label$6;
     }
     if ((jsvGetInteger(HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2]) | 0) != HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2]) {
      break label$6;
     }
     jsvObjectIteratorSetValue(HEAP32[$2 + 12 >> 2] + 4 | 0, HEAP32[$2 + 8 >> 2]);
    }
    jsvSetArrayItem(HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2], HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2], HEAP32[$2 + 8 >> 2]);
    break label$1;

   case 1:
    jsvObjectIteratorSetValue(HEAP32[$2 + 12 >> 2] + 4 | 0, HEAP32[$2 + 8 >> 2]);
    break label$1;

   case 0:
    $1 = HEAP32[$2 + 12 >> 2] + 4 | 0;
    label$7: {
     if (jsvIsString(HEAP32[$2 + 8 >> 2]) & 1) {
      $0 = HEAP8[HEAP32[$2 + 8 >> 2]];
      break label$7;
     }
     $0 = jsvGetInteger(HEAP32[$2 + 8 >> 2]) << 24 >> 24;
    }
    jsvStringIteratorSetChar($1, $0 << 24 >> 24);
    break label$1;

   case 2:
    break label$2;

   default:
    break label$1;
   }
  }
  jsvArrayBufferIteratorSetValueAndRewind(HEAP32[$2 + 12 >> 2] + 4 | 0, HEAP32[$2 + 8 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 8 >> 2];
}

function gemmlowp__ImplSaturatingRoundingMultiplyByPOT_1_2c_20int_2c_201___eval_28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 HEAP32[$1 + 24 >> 2] = int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(std____2__numeric_limits_int___min_28_29());
 HEAP32[$1 + 20 >> 2] = int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(std____2__numeric_limits_int___max_28_29());
 HEAP32[$1 + 16 >> 2] = 32;
 HEAP32[$1 + 12 >> 2] = 1073741823;
 HEAP32[$1 + 8 >> 2] = int_20gemmlowp__MaskIfGreaterThan_int__28int_2c_20int_29(HEAP32[$1 + 28 >> 2], int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(1073741823));
 HEAP32[$1 + 4 >> 2] = int_20gemmlowp__MaskIfLessThan_int__28int_2c_20int_29(HEAP32[$1 + 28 >> 2], int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(-1073741823));
 HEAP32[$1 >> 2] = int_20gemmlowp__ShiftLeft_int__28int_2c_20int_29(HEAP32[$1 + 28 >> 2], 1);
 HEAP32[$1 >> 2] = int_20gemmlowp__SelectUsingMask_int__28int_2c_20int_2c_20int_29(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 20 >> 2], HEAP32[$1 >> 2]);
 HEAP32[$1 >> 2] = int_20gemmlowp__SelectUsingMask_int__28int_2c_20int_2c_20int_29(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 24 >> 2], HEAP32[$1 >> 2]);
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 >> 2];
}

function gemmlowp__ImplSaturatingRoundingMultiplyByPOT_2_2c_20int_2c_201___eval_28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 HEAP32[$1 + 24 >> 2] = int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(std____2__numeric_limits_int___min_28_29());
 HEAP32[$1 + 20 >> 2] = int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(std____2__numeric_limits_int___max_28_29());
 HEAP32[$1 + 16 >> 2] = 32;
 HEAP32[$1 + 12 >> 2] = 536870911;
 HEAP32[$1 + 8 >> 2] = int_20gemmlowp__MaskIfGreaterThan_int__28int_2c_20int_29(HEAP32[$1 + 28 >> 2], int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(536870911));
 HEAP32[$1 + 4 >> 2] = int_20gemmlowp__MaskIfLessThan_int__28int_2c_20int_29(HEAP32[$1 + 28 >> 2], int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(-536870911));
 HEAP32[$1 >> 2] = int_20gemmlowp__ShiftLeft_int__28int_2c_20int_29(HEAP32[$1 + 28 >> 2], 2);
 HEAP32[$1 >> 2] = int_20gemmlowp__SelectUsingMask_int__28int_2c_20int_2c_20int_29(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 20 >> 2], HEAP32[$1 >> 2]);
 HEAP32[$1 >> 2] = int_20gemmlowp__SelectUsingMask_int__28int_2c_20int_2c_20int_29(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 24 >> 2], HEAP32[$1 >> 2]);
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 >> 2];
}

function fflush($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 if (!$0) {
  if (HEAP32[85880]) {
   $1 = fflush(HEAP32[85880]);
  }
  if (HEAP32[38506]) {
   $1 = fflush(HEAP32[38506]) | $1;
  }
  $0 = HEAP32[__ofl_lock() >> 2];
  if ($0) {
   while (1) {
    $2 = 0;
    if (HEAP32[$0 + 76 >> 2] >= 0) {
     $2 = __lockfile($0);
    }
    if (HEAP32[$0 + 20 >> 2] != HEAP32[$0 + 28 >> 2]) {
     $1 = fflush($0) | $1;
    }
    if ($2) {
     __unlockfile($0);
    }
    $0 = HEAP32[$0 + 56 >> 2];
    if ($0) {
     continue;
    }
    break;
   }
  }
  __ofl_unlock();
  return $1 | 0;
 }
 if (HEAP32[$0 + 76 >> 2] >= 0) {
  $2 = __lockfile($0);
 }
 label$10: {
  label$11: {
   label$12: {
    if (HEAP32[$0 + 20 >> 2] == HEAP32[$0 + 28 >> 2]) {
     break label$12;
    }
    FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, 0, 0) | 0;
    if (HEAP32[$0 + 20 >> 2]) {
     break label$12;
    }
    $1 = -1;
    if ($2) {
     break label$11;
    }
    break label$10;
   }
   $1 = HEAP32[$0 + 4 >> 2];
   $3 = HEAP32[$0 + 8 >> 2];
   if (($1 | 0) != ($3 | 0)) {
    $1 = $1 - $3 | 0;
    FUNCTION_TABLE[HEAP32[$0 + 40 >> 2]]($0, $1, $1 >> 31, 1) | 0;
   }
   $1 = 0;
   HEAP32[$0 + 28 >> 2] = 0;
   HEAP32[$0 + 16 >> 2] = 0;
   HEAP32[$0 + 20 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$0 + 8 >> 2] = 0;
   if (!$2) {
    break label$10;
   }
  }
  __unlockfile($0);
 }
 return $1 | 0;
}

function lcdFillRect_JS($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $6 = __stack_pointer - 48 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 44 >> 2] = $0;
 HEAP32[$6 + 40 >> 2] = $1;
 HEAP32[$6 + 36 >> 2] = $2;
 HEAP32[$6 + 32 >> 2] = $3;
 HEAP32[$6 + 28 >> 2] = $4;
 HEAP32[$6 + 24 >> 2] = $5;
 $0 = HEAP32[$6 + 44 >> 2];
 HEAP32[$6 + 20 >> 2] = jsvObjectGetChildIfExists(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 98086);
 label$1: {
  if (HEAP32[$6 + 20 >> 2]) {
   HEAP32[$6 >> 2] = jsvNewFromInteger(HEAP32[$6 + 40 >> 2]);
   HEAP32[$6 + 4 >> 2] = jsvNewFromInteger(HEAP32[$6 + 36 >> 2]);
   HEAP32[$6 + 8 >> 2] = jsvNewFromInteger(HEAP32[$6 + 32 >> 2]);
   HEAP32[$6 + 12 >> 2] = jsvNewFromInteger(HEAP32[$6 + 28 >> 2]);
   HEAP32[$6 + 16 >> 2] = jsvNewFromInteger(HEAP32[$6 + 24 >> 2]);
   $0 = HEAP32[$6 + 44 >> 2];
   jsvUnLock(jspExecuteFunction(HEAP32[$6 + 20 >> 2], HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 5, $6));
   jsvUnLockMany(5, $6);
   jsvUnLock(HEAP32[$6 + 20 >> 2]);
   break label$1;
  }
  graphicsFallbackFillRect(HEAP32[$6 + 44 >> 2], HEAP32[$6 + 40 >> 2], HEAP32[$6 + 36 >> 2], HEAP32[$6 + 32 >> 2], HEAP32[$6 + 28 >> 2], HEAP32[$6 + 24 >> 2]);
 }
 __stack_pointer = $6 + 48 | 0;
}

function graphicsFallbackBlit($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $7 = 0;
 $7 = __stack_pointer - 48 | 0;
 __stack_pointer = $7;
 HEAP32[$7 + 44 >> 2] = $0;
 HEAP32[$7 + 40 >> 2] = $1;
 HEAP32[$7 + 36 >> 2] = $2;
 HEAP32[$7 + 32 >> 2] = $3;
 HEAP32[$7 + 28 >> 2] = $4;
 HEAP32[$7 + 24 >> 2] = $5;
 HEAP32[$7 + 20 >> 2] = $6;
 HEAP32[$7 + 16 >> 2] = 0;
 while (1) {
  if (HEAP32[$7 + 16 >> 2] < HEAP32[$7 + 28 >> 2]) {
   HEAP32[$7 + 12 >> 2] = 0;
   while (1) {
    if (HEAP32[$7 + 12 >> 2] < HEAP32[$7 + 32 >> 2]) {
     $0 = HEAP32[$7 + 44 >> 2];
     $1 = HEAPU8[$0 + 52 | 0] | HEAPU8[$0 + 53 | 0] << 8 | (HEAPU8[$0 + 54 | 0] << 16 | HEAPU8[$0 + 55 | 0] << 24);
     $0 = HEAP32[$7 + 44 >> 2];
     FUNCTION_TABLE[$1 | 0](HEAP32[$7 + 44 >> 2], HEAP32[$7 + 12 >> 2] + HEAP32[$7 + 24 >> 2] | 0, HEAP32[$7 + 16 >> 2] + HEAP32[$7 + 20 >> 2] | 0, FUNCTION_TABLE[HEAPU8[$0 + 60 | 0] | HEAPU8[$0 + 61 | 0] << 8 | (HEAPU8[$0 + 62 | 0] << 16 | HEAPU8[$0 + 63 | 0] << 24)](HEAP32[$7 + 44 >> 2], HEAP32[$7 + 12 >> 2] + HEAP32[$7 + 40 >> 2] | 0, HEAP32[$7 + 16 >> 2] + HEAP32[$7 + 36 >> 2] | 0) | 0);
     HEAP32[$7 + 12 >> 2] = HEAP32[$7 + 12 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$7 + 16 >> 2] = HEAP32[$7 + 16 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $7 + 48 | 0;
}

function gemmlowp__ImplSaturatingRoundingMultiplyByPOT_5_2c_20int_2c_201___eval_28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 HEAP32[$1 + 24 >> 2] = int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(std____2__numeric_limits_int___min_28_29());
 HEAP32[$1 + 20 >> 2] = int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(std____2__numeric_limits_int___max_28_29());
 HEAP32[$1 + 16 >> 2] = 32;
 HEAP32[$1 + 12 >> 2] = 67108863;
 HEAP32[$1 + 8 >> 2] = int_20gemmlowp__MaskIfGreaterThan_int__28int_2c_20int_29(HEAP32[$1 + 28 >> 2], int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(67108863));
 HEAP32[$1 + 4 >> 2] = int_20gemmlowp__MaskIfLessThan_int__28int_2c_20int_29(HEAP32[$1 + 28 >> 2], int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(-67108863));
 HEAP32[$1 >> 2] = int_20gemmlowp__ShiftLeft_int__28int_2c_20int_29(HEAP32[$1 + 28 >> 2], 5);
 HEAP32[$1 >> 2] = int_20gemmlowp__SelectUsingMask_int__28int_2c_20int_2c_20int_29(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 20 >> 2], HEAP32[$1 >> 2]);
 HEAP32[$1 >> 2] = int_20gemmlowp__SelectUsingMask_int__28int_2c_20int_2c_20int_29(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 24 >> 2], HEAP32[$1 >> 2]);
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 >> 2];
}

function jsvUpdateMemoryAddress($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 HEAP32[$3 + 16 >> 2] = 1;
 while (1) {
  if (HEAPU32[$3 + 16 >> 2] <= 2500) {
   HEAP32[$3 + 12 >> 2] = jsvGetAddressOf(HEAP32[$3 + 16 >> 2] & 65535);
   label$3: {
    label$4: {
     if (!(jsvIsNativeString(HEAP32[$3 + 12 >> 2]) & 1)) {
      if (!(jsvIsFlashString(HEAP32[$3 + 12 >> 2]) & 1)) {
       break label$4;
      }
     }
     $0 = HEAP32[$3 + 12 >> 2];
     HEAP32[$3 + 8 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
     if (!(HEAPU32[$3 + 8 >> 2] < HEAPU32[$3 + 28 >> 2] | HEAPU32[$3 + 8 >> 2] >= HEAP32[$3 + 28 >> 2] + HEAP32[$3 + 24 >> 2] >>> 0)) {
      $0 = HEAP32[$3 + 12 >> 2];
      $1 = (HEAP32[$3 + 8 >> 2] + HEAP32[$3 + 20 >> 2] | 0) - HEAP32[$3 + 28 >> 2] | 0;
      HEAP8[$0 | 0] = $1;
      HEAP8[$0 + 1 | 0] = $1 >>> 8;
      HEAP8[$0 + 2 | 0] = $1 >>> 16;
      HEAP8[$0 + 3 | 0] = $1 >>> 24;
     }
     break label$3;
    }
    if (jsvIsFlatString(HEAP32[$3 + 12 >> 2]) & 1) {
     HEAP32[$3 + 16 >> 2] = jsvGetFlatStringBlocks(HEAP32[$3 + 12 >> 2]) + HEAP32[$3 + 16 >> 2];
    }
   }
   HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 16 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $3 + 32 | 0;
}

function match($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 368 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 364 >> 2] = $0;
 HEAP32[$4 + 360 >> 2] = $1;
 HEAP32[$4 + 356 >> 2] = $2;
 HEAP8[$4 + 355 | 0] = $3;
 HEAP32[$4 + 264 >> 2] = HEAP32[$4 + 360 >> 2];
 HEAP32[$4 + 268 >> 2] = HEAP32[$4 + 356 >> 2];
 HEAP8[$4 + 272 | 0] = HEAP8[$4 + 355 | 0] & 1;
 HEAP8[$4 + 273 | 0] = 0;
 HEAP16[$4 + 274 >> 1] = 256;
 HEAP32[$4 + 276 >> 2] = 0;
 jsvStringIteratorNew($4 + 224 | 0, HEAP32[$4 + 360 >> 2], HEAP32[$4 + 356 >> 2]);
 jsvStringIteratorClone($4 + 184 | 0, $4 + 224 | 0);
 $0 = HEAP32[$4 + 364 >> 2];
 __memcpy($4 + 96 | 0, $4 + 264 | 0, 88);
 HEAP32[$4 + 260 >> 2] = matchhere($0, $4 + 184 | 0, $4 + 96 | 0);
 jsvStringIteratorFree_9($4 + 184 | 0);
 jsvStringIteratorNext($4 + 224 | 0);
 while (1) {
  $0 = 0;
  if (!HEAP32[$4 + 260 >> 2]) {
   $0 = jsvStringIteratorHasChar_7($4 + 224 | 0);
  }
  if ($0 & 1) {
   HEAP32[$4 + 268 >> 2] = HEAP32[$4 + 268 >> 2] + 1;
   jsvStringIteratorClone($4 + 184 | 0, $4 + 224 | 0);
   $0 = HEAP32[$4 + 364 >> 2];
   __memcpy($4 + 8 | 0, $4 + 264 | 0, 88);
   HEAP32[$4 + 260 >> 2] = matchhere($0, $4 + 184 | 0, $4 + 8 | 0);
   jsvStringIteratorFree_9($4 + 184 | 0);
   jsvStringIteratorNext($4 + 224 | 0);
   continue;
  }
  break;
 }
 jsvStringIteratorFree_9($4 + 224 | 0);
 __stack_pointer = $4 + 368 | 0;
 return HEAP32[$4 + 260 >> 2];
}

function jswrap_object_removeListener($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 label$1: {
  if (!(jsvHasChildren(HEAP32[$3 + 28 >> 2]) & 1)) {
   jsExceptionHere(3, 107694, 0);
   break label$1;
  }
  if (jsvIsString(HEAP32[$3 + 24 >> 2]) & 1) {
   HEAP32[$3 >> 2] = HEAP32[$3 + 24 >> 2];
   HEAP32[$3 + 16 >> 2] = jsvVarPrintf(97042, $3);
   if (!HEAP32[$3 + 16 >> 2]) {
    break label$1;
   }
   HEAP32[$3 + 12 >> 2] = jsvFindChildFromVar(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 16 >> 2], 1);
   jsvUnLock(HEAP32[$3 + 16 >> 2]);
   HEAP32[$3 + 8 >> 2] = jsvSkipName(HEAP32[$3 + 12 >> 2]);
   if (HEAP32[$3 + 8 >> 2]) {
    label$5: {
     if (HEAP32[$3 + 8 >> 2] == HEAP32[$3 + 20 >> 2]) {
      jsvRemoveChild(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 12 >> 2]);
      break label$5;
     }
     if (jsvIsArray(HEAP32[$3 + 8 >> 2]) & 1) {
      HEAP32[$3 + 4 >> 2] = jsvGetIndexOf(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 20 >> 2], 1);
      if (HEAP32[$3 + 4 >> 2]) {
       jsvRemoveChildAndUnLock(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
      }
     }
    }
    jsvUnLock(HEAP32[$3 + 8 >> 2]);
   }
   jsvUnLock(HEAP32[$3 + 12 >> 2]);
   break label$1;
  }
  jsExceptionHere(3, 103795, 0);
 }
 __stack_pointer = $3 + 32 | 0;
}

function tflite___28anonymous_20namespace_29__CommitPlan_28tflite__ErrorReporter__2c_20tflite__MemoryPlanner__2c_20unsigned_20char__2c_20tflite___28anonymous_20namespace_29__AllocationInfo_20const__2c_20unsigned_20long_29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 48 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 40 >> 2] = $0;
 HEAP32[$5 + 36 >> 2] = $1;
 HEAP32[$5 + 32 >> 2] = $2;
 HEAP32[$5 + 28 >> 2] = $3;
 HEAP32[$5 + 24 >> 2] = $4;
 HEAP32[$5 + 20 >> 2] = 0;
 HEAP32[$5 + 16 >> 2] = 0;
 label$1: {
  while (1) {
   if (HEAPU32[$5 + 16 >> 2] < HEAPU32[$5 + 24 >> 2]) {
    HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 28 >> 2] + Math_imul(HEAP32[$5 + 16 >> 2], 24);
    if (HEAP8[HEAP32[$5 + 12 >> 2] + 20 | 0] & 1) {
     HEAP32[$5 + 8 >> 2] = -1;
     $0 = HEAP32[$5 + 36 >> 2];
     HEAP32[$5 + 4 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, HEAP32[$5 + 40 >> 2], HEAP32[$5 + 20 >> 2], $5 + 8 | 0);
     if (HEAP32[$5 + 4 >> 2]) {
      HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 4 >> 2];
      break label$1;
     }
     HEAP32[HEAP32[HEAP32[$5 + 12 >> 2] + 4 >> 2] >> 2] = HEAP32[$5 + 32 >> 2] + HEAP32[$5 + 8 >> 2];
     HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 20 >> 2] + 1;
    }
    HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$5 + 44 >> 2] = 0;
 }
 __stack_pointer = $5 + 48 | 0;
 return HEAP32[$5 + 44 >> 2];
}

function jsvGetBool($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 label$1: {
  if (jsvIsString(HEAP32[$1 + 24 >> 2]) & 1) {
   HEAP8[$1 + 31 | 0] = (jsvGetStringLength(HEAP32[$1 + 24 >> 2]) | 0) != 0;
   break label$1;
  }
  if (jsvIsPin(HEAP32[$1 + 24 >> 2]) & 1) {
   HEAP8[$1 + 31 | 0] = jshIsPinValid(jshGetPinFromVar(HEAP32[$1 + 24 >> 2]) & 255) & 1;
   break label$1;
  }
  label$4: {
   label$5: {
    if (jsvIsFunction(HEAP32[$1 + 24 >> 2]) & 1) {
     break label$5;
    }
    if (jsvIsArray(HEAP32[$1 + 24 >> 2]) & 1) {
     break label$5;
    }
    if (jsvIsObject(HEAP32[$1 + 24 >> 2]) & 1) {
     break label$5;
    }
    if (!(jsvIsArrayBuffer(HEAP32[$1 + 24 >> 2]) & 1)) {
     break label$4;
    }
   }
   HEAP8[$1 + 31 | 0] = 1;
   break label$1;
  }
  if (jsvIsFloat(HEAP32[$1 + 24 >> 2]) & 1) {
   HEAPF64[$1 + 16 >> 3] = jsvGetFloat(HEAP32[$1 + 24 >> 2]);
   $2 = __DOUBLE_BITS(HEAPF64[$1 + 16 >> 3]);
   $0 = $2;
   $3 = i64toi32_i32$HIGH_BITS;
   $2 = $3 & 2147483647;
   $3 = $0;
   HEAP8[$1 + 31 | 0] = ($2 | 0) == 2146435072 & ($3 | 0) != 0 | $2 >>> 0 > 2146435072 ? 0 : HEAPF64[$1 + 16 >> 3] != 0;
   break label$1;
  }
  HEAP8[$1 + 31 | 0] = (jsvGetInteger(HEAP32[$1 + 24 >> 2]) | 0) != 0;
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP8[$1 + 31 | 0] & 1;
}

function jswrap_io_peek($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 96 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 88 >> 2] = $0;
 HEAP32[$3 + 84 >> 2] = $1;
 HEAP32[$3 + 80 >> 2] = $2;
 HEAP32[$3 + 76 >> 2] = jshFlashGetMemMapAddress(HEAP32[$3 + 88 >> 2]);
 label$1: {
  if (HEAP32[$3 + 84 >> 2] <= 1) {
   HEAP32[$3 + 92 >> 2] = jsvNewFromLongInteger(_jswrap_io_peek(HEAP32[$3 + 76 >> 2], HEAP32[$3 + 80 >> 2]), 0);
   break label$1;
  }
  if (HEAP32[$3 + 80 >> 2] == 1) {
   HEAP8[$3 + 75 | 0] = 1;
  }
  if (HEAP32[$3 + 80 >> 2] == 2) {
   HEAP8[$3 + 75 | 0] = 2;
  }
  if (HEAP32[$3 + 80 >> 2] == 4) {
   HEAP8[$3 + 75 | 0] = 4;
  }
  HEAP32[$3 + 68 >> 2] = jsvNewTypedArray(HEAPU8[$3 + 75 | 0], HEAP32[$3 + 84 >> 2]);
  if (!HEAP32[$3 + 68 >> 2]) {
   HEAP32[$3 + 92 >> 2] = 0;
   break label$1;
  }
  jsvArrayBufferIteratorNew($3 + 8 | 0, HEAP32[$3 + 68 >> 2], 0);
  while (1) {
   if (jsvArrayBufferIteratorHasElement($3 + 8 | 0) & 1) {
    jsvArrayBufferIteratorSetIntegerValue($3 + 8 | 0, _jswrap_io_peek(HEAP32[$3 + 76 >> 2], HEAP32[$3 + 80 >> 2]));
    HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 80 >> 2] + HEAP32[$3 + 76 >> 2];
    jsvArrayBufferIteratorNext($3 + 8 | 0);
    continue;
   }
   break;
  }
  jsvArrayBufferIteratorFree($3 + 8 | 0);
  HEAP32[$3 + 92 >> 2] = HEAP32[$3 + 68 >> 2];
 }
 __stack_pointer = $3 + 96 | 0;
 return HEAP32[$3 + 92 >> 2];
}

function jslGetRawString() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP8[$0 + 15 | 0] = HEAP16[HEAP32[38615] + 2 >> 1] == 210;
 HEAP16[HEAP32[38615] + 2 >> 1] = 131;
 HEAP32[$0 + 8 >> 2] = HEAPU8[HEAP32[38615]];
 if (HEAP8[$0 + 15 | 0] & 1) {
  jslGetNextCh();
  HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] | HEAPU8[HEAP32[38615]] << 8;
 }
 jsvUnLock(HEAP32[HEAP32[38615] + 76 >> 2]);
 label$2: {
  if (HEAPU32[$0 + 8 >> 2] > 8) {
   HEAP32[$0 + 4 >> 2] = jsvStringIteratorGetIndex(HEAP32[38615] + 88 | 0);
   $1 = jsvNewFromStringVar(HEAP32[HEAP32[38615] + 84 >> 2], HEAP32[$0 + 4 >> 2], HEAP32[$0 + 8 >> 2]);
   HEAP32[HEAP32[38615] + 76 >> 2] = $1;
   jsvLockAgain(HEAP32[HEAP32[38615] + 100 >> 2]);
   jsvStringIteratorGoto(HEAP32[38615] + 88 | 0, HEAP32[HEAP32[38615] + 84 >> 2], HEAP32[$0 + 4 >> 2] + HEAP32[$0 + 8 >> 2] | 0);
   jsvUnLock(HEAP32[HEAP32[38615] + 100 >> 2]);
   break label$2;
  }
  $1 = jsvNewWithFlags(HEAP32[$0 + 8 >> 2] + 28 & 65535);
  HEAP32[HEAP32[38615] + 76 >> 2] = $1;
  HEAP32[$0 >> 2] = 0;
  while (1) {
   if (HEAPU32[$0 >> 2] < HEAPU32[$0 + 8 >> 2]) {
    jslGetNextCh();
    HEAP8[HEAP32[HEAP32[38615] + 76 >> 2] + HEAP32[$0 >> 2] | 0] = HEAPU8[HEAP32[38615]];
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
    continue;
   }
   break;
  }
 }
 jslGetNextCh();
 __stack_pointer = $0 + 16 | 0;
}

function jswrap_i2c_writeTo($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 $3 = $4;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 label$1: {
  if (!(jsvIsObject(HEAP32[$3 + 28 >> 2]) & 1)) {
   break label$1;
  }
  HEAP8[$3 + 19 | 0] = jsiGetDeviceFromClass(HEAP32[$3 + 28 >> 2]);
  HEAP8[$3 + 18 | 0] = 1;
  HEAP32[$3 + 12 >> 2] = i2c_get_address(HEAP32[$3 + 24 >> 2], $3 + 18 | 0);
  HEAP32[$3 + 8 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = jsvGetDataPointer(HEAP32[$3 + 20 >> 2], $3 + 8 | 0);
  if (!(HEAP32[$3 + 4 >> 2] | !HEAP32[$3 + 20 >> 2])) {
   HEAP32[$3 + 8 >> 2] = jsvIterateCallbackCount(HEAP32[$3 + 20 >> 2]);
   label$3: {
    if (HEAP32[$3 + 8 >> 2] + 256 >>> 0 > jsuGetFreeStack() >>> 0) {
     jsExceptionHere(1, 107864, 0);
     break label$3;
    }
    $4 = $4 - (HEAP32[$3 + 8 >> 2] + 15 & -16) | 0;
    __stack_pointer = $4;
    HEAP32[$3 + 4 >> 2] = $4;
    jsvIterateCallbackToBytes(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 4 >> 2], HEAP32[$3 + 8 >> 2]);
   }
  }
  if (!HEAP32[$3 + 4 >> 2] | !HEAP32[$3 + 8 >> 2]) {
   break label$1;
  }
  _jswrap_i2c_writeTo(HEAP32[$3 + 28 >> 2], HEAPU8[$3 + 19 | 0], HEAP32[$3 + 12 >> 2], HEAP8[$3 + 18 | 0] & 1, HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 }
 __stack_pointer = $3 + 32 | 0;
}

function jswrap_string_trim($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 80 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 72 >> 2] = $0;
 HEAP32[$1 + 68 >> 2] = jsvAsString(HEAP32[$1 + 72 >> 2]);
 label$1: {
  if (!HEAP32[$1 + 68 >> 2]) {
   HEAP32[$1 + 76 >> 2] = HEAP32[$1 + 68 >> 2];
   break label$1;
  }
  HEAP32[$1 + 64 >> 2] = 0;
  HEAP32[$1 + 60 >> 2] = -1;
  jsvStringIteratorNew($1 + 24 | 0, HEAP32[$1 + 68 >> 2], 0);
  while (1) {
   if (jsvStringIteratorHasChar_8($1 + 24 | 0) & 1) {
    HEAP32[$1 + 20 >> 2] = jsvStringIteratorGetIndex_5($1 + 24 | 0);
    HEAP8[$1 + 19 | 0] = isWhitespace(jsvStringIteratorGetCharAndNext($1 + 24 | 0) << 24 >> 24) & 1;
    if (!(HEAP8[$1 + 19 | 0] & 1)) {
     if (HEAP32[$1 + 60 >> 2] < 0) {
      HEAP32[$1 + 64 >> 2] = HEAP32[$1 + 20 >> 2];
     }
     HEAP32[$1 + 60 >> 2] = HEAP32[$1 + 20 >> 2];
    }
    continue;
   }
   break;
  }
  jsvStringIteratorFree_10($1 + 24 | 0);
  HEAP32[$1 + 12 >> 2] = 0;
  if (HEAP32[$1 + 60 >> 2] >= HEAP32[$1 + 64 >> 2]) {
   HEAP32[$1 + 12 >> 2] = (HEAP32[$1 + 60 >> 2] + 1 | 0) - HEAP32[$1 + 64 >> 2];
  }
  HEAP32[$1 + 8 >> 2] = jsvNewFromStringVar(HEAP32[$1 + 68 >> 2], HEAP32[$1 + 64 >> 2], HEAP32[$1 + 12 >> 2]);
  jsvUnLock(HEAP32[$1 + 68 >> 2]);
  HEAP32[$1 + 76 >> 2] = HEAP32[$1 + 8 >> 2];
 }
 __stack_pointer = $1 + 80 | 0;
 return HEAP32[$1 + 76 >> 2];
}

function jsvArrayInsertBefore($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 label$1: {
  if (HEAP32[$3 + 24 >> 2]) {
   HEAP32[$3 + 16 >> 2] = jsvMakeIntoVariableName(jsvNewFromInteger(0), HEAP32[$3 + 20 >> 2]);
   if (!HEAP32[$3 + 16 >> 2]) {
    break label$1;
   }
   HEAP16[$3 + 14 >> 1] = jsvGetRef(jsvRef(HEAP32[$3 + 16 >> 2]));
   HEAP16[$3 + 12 >> 1] = jsvGetPrevSibling(HEAP32[$3 + 24 >> 2]);
   label$3: {
    if (HEAPU16[$3 + 12 >> 1]) {
     HEAP32[$3 + 8 >> 2] = jsvRef(jsvLock(HEAPU16[$3 + 12 >> 1]));
     jsvSetInteger(HEAP32[$3 + 16 >> 2], jsvGetInteger(HEAP32[$3 + 8 >> 2]) + 1 | 0);
     jsvSetNextSibling(HEAP32[$3 + 8 >> 2], HEAPU16[$3 + 14 >> 1]);
     jsvUnLock(HEAP32[$3 + 8 >> 2]);
     jsvSetPrevSibling(HEAP32[$3 + 16 >> 2], HEAPU16[$3 + 12 >> 1]);
     break label$3;
    }
    jsvSetPrevSibling(HEAP32[$3 + 16 >> 2], 0);
    jsvSetFirstChild(HEAP32[$3 + 28 >> 2], HEAPU16[$3 + 14 >> 1]);
   }
   jsvSetPrevSibling(HEAP32[$3 + 24 >> 2], HEAPU16[$3 + 14 >> 1]);
   jsvSetNextSibling(HEAP32[$3 + 16 >> 2], jsvGetRef(jsvRef(HEAP32[$3 + 24 >> 2])) & 65535);
   jsvUnLock(HEAP32[$3 + 16 >> 2]);
   break label$1;
  }
  jsvArrayPush(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 20 >> 2]);
 }
 __stack_pointer = $3 + 32 | 0;
}

function jspNewObject($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = jspNewPrototype(HEAP32[$2 + 20 >> 2], 0);
 HEAP32[$2 + 12 >> 2] = jsvNewObject();
 label$1: {
  if (!HEAP32[$2 + 12 >> 2]) {
   jsvUnLock(HEAP32[$2 + 16 >> 2]);
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$2 + 24 >> 2]) {
   HEAP8[$2 + 11 | 0] = jshFromDeviceString(HEAP32[$2 + 24 >> 2]);
   if (HEAPU8[$2 + 11 | 0]) {
    HEAP8[HEAP32[$2 + 12 >> 2]] = 68;
    HEAP8[HEAP32[$2 + 12 >> 2] + 1 | 0] = 69;
    HEAP8[HEAP32[$2 + 12 >> 2] + 2 | 0] = 86;
    HEAP8[HEAP32[$2 + 12 >> 2] + 3 | 0] = HEAPU8[$2 + 11 | 0];
   }
  }
  jsvAddNamedChildAndUnLock(HEAP32[$2 + 12 >> 2], jsvSkipNameAndUnLock(HEAP32[$2 + 16 >> 2]), 107914);
  if (HEAP32[$2 + 24 >> 2]) {
   HEAP32[$2 + 4 >> 2] = jsvFindOrAddChildFromString(HEAP32[46747], HEAP32[$2 + 24 >> 2]);
   if (HEAP32[$2 + 4 >> 2]) {
    jsvSetValueOfName(HEAP32[$2 + 4 >> 2], HEAP32[$2 + 12 >> 2]);
   }
   jsvUnLock(HEAP32[$2 + 12 >> 2]);
   if (!HEAP32[$2 + 4 >> 2]) {
    HEAP32[$2 + 28 >> 2] = 0;
    break label$1;
   }
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 4 >> 2];
   break label$1;
  }
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jswrap_array_sort($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 80 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 72 >> 2] = $0;
 HEAP32[$2 + 68 >> 2] = $1;
 label$1: {
  label$2: {
   if (jsvIsUndefined(HEAP32[$2 + 68 >> 2]) & 1) {
    break label$2;
   }
   if (jsvIsFunction(HEAP32[$2 + 68 >> 2]) & 1) {
    break label$2;
   }
   HEAP32[$2 >> 2] = HEAP32[$2 + 68 >> 2];
   jsExceptionHere(1, 98920, $2);
   HEAP32[$2 + 76 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 4 >> 2] = 0;
  label$3: {
   label$4: {
    if (!(jsvIsArray(HEAP32[$2 + 72 >> 2]) & 1)) {
     if (!(jsvIsObject(HEAP32[$2 + 72 >> 2]) & 1)) {
      break label$4;
     }
    }
    jsvIteratorNew($2 + 8 | 0, HEAP32[$2 + 72 >> 2], 1);
    while (1) {
     if (jsvIteratorHasElement($2 + 8 | 0) & 1) {
      HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
      jsvIteratorNext($2 + 8 | 0);
      continue;
     }
     break;
    }
    jsvIteratorFree($2 + 8 | 0);
    break label$3;
   }
   HEAP32[$2 + 4 >> 2] = jsvGetLength(HEAP32[$2 + 72 >> 2]);
  }
  jsvIteratorNew($2 + 8 | 0, HEAP32[$2 + 72 >> 2], 1);
  _jswrap_array_sort($2 + 8 | 0, HEAP32[$2 + 4 >> 2], HEAP32[$2 + 68 >> 2]);
  jsvIteratorFree($2 + 8 | 0);
  HEAP32[$2 + 76 >> 2] = jsvLockAgain(HEAP32[$2 + 72 >> 2]);
 }
 __stack_pointer = $2 + 80 | 0;
 return HEAP32[$2 + 76 >> 2];
}

function jswrap_flash_read($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 80 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 72 >> 2] = $0;
 HEAP32[$2 + 68 >> 2] = $1;
 label$1: {
  if (HEAP32[$2 + 72 >> 2] <= 0) {
   HEAP32[$2 + 76 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 64 >> 2] = jsvNewTypedArray(1, HEAP32[$2 + 72 >> 2]);
  if (!HEAP32[$2 + 64 >> 2]) {
   HEAP32[$2 + 76 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 56 >> 2] = jsvGetArrayBufferBackingString(HEAP32[$2 + 64 >> 2], $2 + 60 | 0);
  if (HEAP32[$2 + 56 >> 2]) {
   jsvStringIteratorNew($2 + 16 | 0, HEAP32[$2 + 56 >> 2], HEAP32[$2 + 60 >> 2]);
   while (1) {
    $0 = 0;
    if (HEAP32[$2 + 72 >> 2] > 0) {
     $0 = jsvStringIteratorHasChar_10($2 + 16 | 0);
    }
    if ($0 & 1) {
     HEAP32[$2 + 8 >> 2] = 0;
     jsvStringIteratorGetPtrAndNext($2 + 16 | 0, $2 + 12 | 0, $2 + 8 | 0);
     jshFlashRead(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 68 >> 2], HEAP32[$2 + 8 >> 2]);
     HEAP32[$2 + 68 >> 2] = HEAP32[$2 + 8 >> 2] + HEAP32[$2 + 68 >> 2];
     HEAP32[$2 + 72 >> 2] = HEAP32[$2 + 72 >> 2] - HEAP32[$2 + 8 >> 2];
     continue;
    }
    break;
   }
   jsvStringIteratorFree_12($2 + 16 | 0);
   jsvUnLock(HEAP32[$2 + 56 >> 2]);
  }
  HEAP32[$2 + 76 >> 2] = HEAP32[$2 + 64 >> 2];
 }
 __stack_pointer = $2 + 80 | 0;
 return HEAP32[$2 + 76 >> 2];
}

function jsvArrayPop($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = jsvGetArrayLength(HEAP32[$1 + 12 >> 2]);
 if (HEAP32[$1 + 4 >> 2] > 0) {
  HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] - 1;
  if (jsvGetLastChild(HEAP32[$1 + 12 >> 2]) & 65535) {
   HEAP16[$1 + 2 >> 1] = jsvGetLastChild(HEAP32[$1 + 12 >> 2]);
   HEAP32[$1 + 8 >> 2] = jsvLock(HEAPU16[$1 + 2 >> 1]);
   while (1) {
    $0 = 0;
    if (HEAP32[$1 + 8 >> 2]) {
     $0 = jsvIsInt(HEAP32[$1 + 8 >> 2]) ^ -1;
    }
    if ($0 & 1) {
     HEAP16[$1 + 2 >> 1] = jsvGetPrevSibling(HEAP32[$1 + 8 >> 2]);
     jsvUnLock(HEAP32[$1 + 8 >> 2]);
     label$6: {
      if (HEAPU16[$1 + 2 >> 1]) {
       HEAP32[$1 + 8 >> 2] = jsvLock(HEAPU16[$1 + 2 >> 1]);
       break label$6;
      }
      HEAP32[$1 + 8 >> 2] = 0;
     }
     continue;
    }
    break;
   }
   if (HEAP32[$1 + 8 >> 2]) {
    label$9: {
     if ((jsvGetInteger(HEAP32[$1 + 8 >> 2]) | 0) == HEAP32[$1 + 4 >> 2]) {
      jsvRemoveChild(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 8 >> 2]);
      break label$9;
     }
     jsvUnLock(HEAP32[$1 + 8 >> 2]);
     HEAP32[$1 + 8 >> 2] = 0;
    }
   }
  }
  jsvSetArrayLength(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 4 >> 2], 0);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function OneWireWrite($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP8[$4 + 31 | 0] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $2;
 HEAP32[$4 + 20 >> 2] = $3;
 jshPinSetState(HEAPU8[$4 + 31 | 0], 3);
 HEAP32[$4 + 8 >> 2] = 1;
 HEAP32[$4 + 12 >> 2] = 0;
 while (1) {
  $0 = HEAP32[$4 + 24 >> 2];
  HEAP32[$4 + 24 >> 2] = $0 - 1;
  if (($0 | 0) > 0) {
   $3 = HEAP32[$4 + 16 >> 2];
   $5 = $3;
   $0 = HEAP32[$4 + 20 >> 2];
   $2 = $0;
   $3 = HEAP32[$4 + 12 >> 2];
   $6 = $3;
   $0 = HEAP32[$4 + 8 >> 2];
   $1 = $0;
   $3 = $2;
   $0 = $6;
   $0 = $3 & $0;
   $3 = $1 & $5;
   label$3: {
    if ($3 | $0) {
     jshInterruptOff();
     jshPinSetValue(HEAPU8[$4 + 31 | 0], 0);
     jshDelayMicroseconds(10);
     jshPinSetValue(HEAPU8[$4 + 31 | 0], 1);
     jshInterruptOn();
     jshDelayMicroseconds(55);
     break label$3;
    }
    jshInterruptOff();
    jshPinSetValue(HEAPU8[$4 + 31 | 0], 0);
    jshDelayMicroseconds(65);
    jshPinSetValue(HEAPU8[$4 + 31 | 0], 1);
    jshInterruptOn();
    jshDelayMicroseconds(5);
   }
   $0 = HEAP32[$4 + 12 >> 2];
   $3 = HEAP32[$4 + 8 >> 2];
   $1 = $3;
   $3 = $0 << 1 | $3 >>> 31;
   $0 = $1 << 1;
   HEAP32[$4 + 8 >> 2] = $0;
   HEAP32[$4 + 12 >> 2] = $3;
   continue;
  }
  break;
 }
 __stack_pointer = $4 + 32 | 0;
}

function jspeUnaryExpression() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 label$1: {
  label$2: {
   if (!(HEAP16[HEAP32[38615] + 2 >> 1] == 33 | HEAP16[HEAP32[38615] + 2 >> 1] == 126 | HEAP16[HEAP32[38615] + 2 >> 1] == 45)) {
    if (HEAP16[HEAP32[38615] + 2 >> 1] != 43) {
     break label$2;
    }
   }
   HEAP16[$0 + 10 >> 1] = HEAPU16[HEAP32[38615] + 2 >> 1];
   jslGetNextToken();
   if ((HEAP32[46755] & 63) != 1) {
    HEAP32[$0 + 12 >> 2] = jspeUnaryExpression();
    break label$1;
   }
   HEAP32[$0 + 4 >> 2] = jsvSkipNameAndUnLock(jspeUnaryExpression());
   if (HEAP16[$0 + 10 >> 1] == 33) {
    HEAP32[$0 + 12 >> 2] = jsvNewFromBool((jsvGetBoolAndUnLock(HEAP32[$0 + 4 >> 2]) ^ -1) & 1);
    break label$1;
   }
   if (HEAP16[$0 + 10 >> 1] == 126) {
    HEAP32[$0 + 12 >> 2] = jsvNewFromInteger(jsvGetIntegerAndUnLock(HEAP32[$0 + 4 >> 2]) ^ -1);
    break label$1;
   }
   if (HEAP16[$0 + 10 >> 1] == 45) {
    HEAP32[$0 + 12 >> 2] = jsvNegateAndUnLock(HEAP32[$0 + 4 >> 2]);
    break label$1;
   }
   if (HEAP16[$0 + 10 >> 1] == 43) {
    HEAP32[$0 + 12 >> 2] = jsvAsNumberAndUnLock(HEAP32[$0 + 4 >> 2]);
    break label$1;
   }
   HEAP32[$0 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$0 + 12 >> 2] = jspePostfixExpression();
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function jsfGetBootCodeFromFlash($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 144 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 139 | 0] = $0;
 jsfNameFromString($1 + 104 | 0, 97488);
 HEAP32[$1 + 64 >> 2] = HEAP32[$1 + 128 >> 2];
 $2 = HEAP32[$1 + 124 >> 2];
 $0 = HEAP32[$1 + 120 >> 2];
 HEAP32[$1 + 56 >> 2] = $0;
 HEAP32[$1 + 60 >> 2] = $2;
 $0 = HEAP32[$1 + 116 >> 2];
 $2 = HEAP32[$1 + 112 >> 2];
 HEAP32[$1 + 48 >> 2] = $2;
 HEAP32[$1 + 52 >> 2] = $0;
 $2 = HEAP32[$1 + 108 >> 2];
 $0 = HEAP32[$1 + 104 >> 2];
 HEAP32[$1 + 40 >> 2] = $0;
 HEAP32[$1 + 44 >> 2] = $2;
 HEAP32[$1 + 132 >> 2] = jsfReadFile($1 + 40 | 0, 0, 0);
 label$1: {
  if (HEAP32[$1 + 132 >> 2] ? 1 : HEAP8[$1 + 139 | 0] & 1) {
   HEAP32[$1 + 140 >> 2] = HEAP32[$1 + 132 >> 2];
   break label$1;
  }
  jsfNameFromString($1 + 72 | 0, 105438);
  HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 96 >> 2];
  $0 = HEAP32[$1 + 92 >> 2];
  $2 = HEAP32[$1 + 88 >> 2];
  HEAP32[$1 + 24 >> 2] = $2;
  HEAP32[$1 + 28 >> 2] = $0;
  $2 = HEAP32[$1 + 84 >> 2];
  $0 = HEAP32[$1 + 80 >> 2];
  HEAP32[$1 + 16 >> 2] = $0;
  HEAP32[$1 + 20 >> 2] = $2;
  $0 = HEAP32[$1 + 76 >> 2];
  $2 = HEAP32[$1 + 72 >> 2];
  HEAP32[$1 + 8 >> 2] = $2;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 140 >> 2] = jsfReadFile($1 + 8 | 0, 0, 0);
 }
 __stack_pointer = $1 + 144 | 0;
 return HEAP32[$1 + 140 >> 2];
}

function jswrap_stream_read($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1: {
  if (!(jsvIsObject(HEAP32[$2 + 24 >> 2]) & 1)) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 16 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 24 >> 2], 104027);
  HEAP32[$2 + 12 >> 2] = 0;
  label$3: {
   if (jsvIsString(HEAP32[$2 + 16 >> 2]) & 1) {
    HEAP32[$2 + 8 >> 2] = jsvGetStringLength(HEAP32[$2 + 16 >> 2]);
    label$5: {
     if (!(HEAPU32[$2 + 20 >> 2] < HEAPU32[$2 + 8 >> 2] & HEAP32[$2 + 20 >> 2] > 0)) {
      HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 16 >> 2];
      HEAP32[$2 + 16 >> 2] = 0;
      jsvObjectRemoveChild(HEAP32[$2 + 24 >> 2], 104027);
      break label$5;
     }
     HEAP32[$2 + 12 >> 2] = jsvNewFromStringVar(HEAP32[$2 + 16 >> 2], 0, HEAP32[$2 + 20 >> 2]);
     HEAP32[$2 + 4 >> 2] = jsvNewFromStringVar(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 20 >> 2], 2147483647);
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 24 >> 2], 104027, HEAP32[$2 + 4 >> 2]);
    }
    break label$3;
   }
   HEAP32[$2 + 12 >> 2] = jsvNewFromEmptyString_13();
  }
  jsvUnLock(HEAP32[$2 + 16 >> 2]);
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jsvArrayBufferIteratorSetValue($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP8[$3 + 23 | 0] = $2;
 label$1: {
  if (!HEAPU8[HEAP32[$3 + 28 >> 2] + 36 | 0]) {
   break label$1;
  }
  HEAP32[$3 + 4 >> 2] = HEAPU8[HEAP32[$3 + 28 >> 2] + 36 | 0] & 15;
  label$2: {
   if (HEAPU8[HEAP32[$3 + 28 >> 2] + 36 | 0] & 32) {
    jsvArrayBufferIteratorFloatToData($3 + 12 | 0, HEAP32[$3 + 4 >> 2], HEAPU8[HEAP32[$3 + 28 >> 2] + 36 | 0], jsvGetFloat(HEAP32[$3 + 24 >> 2]));
    break label$2;
   }
   jsvArrayBufferIteratorIntToData($3 + 12 | 0, HEAP32[$3 + 4 >> 2], HEAPU8[HEAP32[$3 + 28 >> 2] + 36 | 0], jsvGetInteger(HEAP32[$3 + 24 >> 2]));
  }
  if (HEAP8[$3 + 23 | 0] & 1) {
   reverseBytes($3 + 12 | 0, HEAP32[$3 + 4 >> 2]);
  }
  HEAP32[$3 + 8 >> 2] = 0;
  while (1) {
   if (HEAP32[$3 + 8 >> 2] < HEAP32[$3 + 4 >> 2]) {
    jsvStringIteratorSetChar(HEAP32[$3 + 28 >> 2], HEAP8[HEAP32[$3 + 8 >> 2] + ($3 + 12 | 0) | 0]);
    if (HEAP32[$3 + 4 >> 2] != 1) {
     jsvStringIteratorNext(HEAP32[$3 + 28 >> 2]);
    }
    HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 8 >> 2] + 1;
    continue;
   }
   break;
  }
  if (HEAP32[$3 + 4 >> 2] == 1) {
   break label$1;
  }
  HEAP8[HEAP32[$3 + 28 >> 2] + 52 | 0] = 1;
 }
 __stack_pointer = $3 + 32 | 0;
}

function jsspiSend8bit($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP8[$4 + 15 | 0] = $0;
 HEAP8[$4 + 14 | 0] = $1;
 HEAP32[$4 + 8 >> 2] = $2;
 HEAP32[$4 + 4 >> 2] = $3;
 $2 = HEAPU8[$4 + 15 | 0];
 if (HEAPU8[$4 + 14 | 0] >>> 6 & 1) {
  $0 = HEAP32[$4 + 4 >> 2];
 } else {
  $0 = HEAP32[$4 + 8 >> 2];
 }
 if (HEAPU8[$4 + 14 | 0] >>> 7 | 0) {
  $1 = HEAP32[$4 + 4 >> 2];
 } else {
  $1 = HEAP32[$4 + 8 >> 2];
 }
 jshSPISend($2, $0 | $1 << 8);
 $2 = HEAPU8[$4 + 15 | 0];
 if (HEAPU8[$4 + 14 | 0] >>> 4 & 1) {
  $0 = HEAP32[$4 + 4 >> 2];
 } else {
  $0 = HEAP32[$4 + 8 >> 2];
 }
 if (HEAPU8[$4 + 14 | 0] >>> 5 & 1) {
  $1 = HEAP32[$4 + 4 >> 2];
 } else {
  $1 = HEAP32[$4 + 8 >> 2];
 }
 jshSPISend($2, $0 | $1 << 8);
 $2 = HEAPU8[$4 + 15 | 0];
 if (HEAPU8[$4 + 14 | 0] >>> 2 & 1) {
  $0 = HEAP32[$4 + 4 >> 2];
 } else {
  $0 = HEAP32[$4 + 8 >> 2];
 }
 if (HEAPU8[$4 + 14 | 0] >>> 3 & 1) {
  $1 = HEAP32[$4 + 4 >> 2];
 } else {
  $1 = HEAP32[$4 + 8 >> 2];
 }
 jshSPISend($2, $0 | $1 << 8);
 $2 = HEAPU8[$4 + 15 | 0];
 if (HEAP8[$4 + 14 | 0] & 1) {
  $0 = HEAP32[$4 + 4 >> 2];
 } else {
  $0 = HEAP32[$4 + 8 >> 2];
 }
 if (HEAPU8[$4 + 14 | 0] >>> 1 & 1) {
  $1 = HEAP32[$4 + 4 >> 2];
 } else {
  $1 = HEAP32[$4 + 8 >> 2];
 }
 jshSPISend($2, $0 | $1 << 8);
 __stack_pointer = $4 + 16 | 0;
}

function jswrap_promise_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 40 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 40 >> 2]) {
   jsExceptionHere(1, 100953, 0);
   HEAP32[$1 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 32 >> 2] = jspromise_create_prombox($1 + 36 | 0);
  if (!HEAP32[$1 + 32 >> 2]) {
   HEAP32[$1 + 44 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$1 + 36 >> 2]) {
   HEAP32[$1 + 28 >> 2] = _jswrap_promise_native_with_prombox(620, HEAP32[$1 + 32 >> 2]);
   HEAP32[$1 + 24 >> 2] = _jswrap_promise_native_with_prombox(621, HEAP32[$1 + 32 >> 2]);
   HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 28 >> 2];
   HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 24 >> 2];
   HEAP32[$1 + 12 >> 2] = HEAP32[46755];
   jsvUnLock(jspeFunctionCall(HEAP32[$1 + 40 >> 2], 0, HEAP32[$1 + 36 >> 2], 0, 2, $1 + 16 | 0));
   HEAP32[46755] = HEAP32[$1 + 12 >> 2];
   HEAP32[$1 + 8 >> 2] = jspGetException();
   if (HEAP32[$1 + 8 >> 2]) {
    _jswrap_prombox_queuereject(HEAP32[$1 + 32 >> 2], HEAP32[$1 + 8 >> 2]);
    jsvUnLock(HEAP32[$1 + 8 >> 2]);
   }
   jsvUnLock2(HEAP32[$1 + 28 >> 2], HEAP32[$1 + 24 >> 2]);
  }
  jsvUnLock(HEAP32[$1 + 32 >> 2]);
  HEAP32[$1 + 44 >> 2] = jsvLockAgain(HEAP32[$1 + 36 >> 2]);
 }
 __stack_pointer = $1 + 48 | 0;
 return HEAP32[$1 + 44 >> 2];
}

function _jswrap_graphics_getVectorFontPolys_cb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 28 >> 2];
 label$1: {
  if (!HEAP32[$3 + 16 >> 2]) {
   break label$1;
  }
  HEAP32[$3 + 12 >> 2] = 0;
  while (1) {
   if (HEAP32[$3 + 12 >> 2] < HEAP32[$3 + 24 >> 2] << 1) {
    HEAP16[HEAP32[$3 + 20 >> 2] + (HEAP32[$3 + 12 >> 2] << 1) >> 1] = HEAP16[HEAP32[$3 + 20 >> 2] + (HEAP32[$3 + 12 >> 2] << 1) >> 1] + 8 << 16 >> 20;
    HEAP16[HEAP32[$3 + 20 >> 2] + (HEAP32[$3 + 12 >> 2] + 1 << 1) >> 1] = HEAP16[HEAP32[$3 + 20 >> 2] + (HEAP32[$3 + 12 >> 2] + 1 << 1) >> 1] + 8 << 16 >> 20;
    HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 2;
    continue;
   }
   break;
  }
  HEAP32[$3 + 8 >> 2] = jsvNewTypedArray(18, HEAP32[$3 + 24 >> 2] << 1);
  if (!HEAP32[$3 + 8 >> 2]) {
   break label$1;
  }
  HEAP32[$3 + 4 >> 2] = jsvGetArrayBufferBackingString(HEAP32[$3 + 8 >> 2], 0);
  if (HEAP32[$3 + 4 >> 2]) {
   jsvSetString(HEAP32[$3 + 4 >> 2], HEAP32[$3 + 20 >> 2], HEAP32[$3 + 24 >> 2] << 2);
   jsvUnLock(HEAP32[$3 + 4 >> 2]);
  }
  jsvArrayPushAndUnLock(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 8 >> 2]);
 }
 __stack_pointer = $3 + 32 | 0;
}

function tflite__ReverseSortInPlace_28int__2c_20int__2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 while (1) {
  HEAP8[$3 + 19 | 0] = 0;
  HEAP32[$3 + 12 >> 2] = 1;
  while (1) {
   if (HEAP32[$3 + 12 >> 2] < HEAP32[$3 + 20 >> 2]) {
    if (HEAP32[HEAP32[$3 + 28 >> 2] + (HEAP32[$3 + 12 >> 2] - 1 << 2) >> 2] < HEAP32[HEAP32[$3 + 28 >> 2] + (HEAP32[$3 + 12 >> 2] << 2) >> 2]) {
     HEAP32[$3 + 8 >> 2] = HEAP32[HEAP32[$3 + 28 >> 2] + (HEAP32[$3 + 12 >> 2] - 1 << 2) >> 2];
     HEAP32[HEAP32[$3 + 28 >> 2] + (HEAP32[$3 + 12 >> 2] - 1 << 2) >> 2] = HEAP32[HEAP32[$3 + 28 >> 2] + (HEAP32[$3 + 12 >> 2] << 2) >> 2];
     HEAP32[HEAP32[$3 + 28 >> 2] + (HEAP32[$3 + 12 >> 2] << 2) >> 2] = HEAP32[$3 + 8 >> 2];
     HEAP32[$3 + 4 >> 2] = HEAP32[HEAP32[$3 + 24 >> 2] + (HEAP32[$3 + 12 >> 2] - 1 << 2) >> 2];
     HEAP32[HEAP32[$3 + 24 >> 2] + (HEAP32[$3 + 12 >> 2] - 1 << 2) >> 2] = HEAP32[HEAP32[$3 + 24 >> 2] + (HEAP32[$3 + 12 >> 2] << 2) >> 2];
     HEAP32[HEAP32[$3 + 24 >> 2] + (HEAP32[$3 + 12 >> 2] << 2) >> 2] = HEAP32[$3 + 4 >> 2];
     HEAP8[$3 + 19 | 0] = 1;
    }
    HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 1;
    continue;
   }
   break;
  }
  if (HEAP8[$3 + 19 | 0] & 1) {
   continue;
  }
  break;
 }
}

function jsvGetIndexFromLineAndCol($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 80 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 72 >> 2] = $0;
 HEAP32[$3 + 68 >> 2] = $1;
 HEAP32[$3 + 64 >> 2] = $2;
 HEAP32[$3 + 60 >> 2] = 1;
 HEAP32[$3 + 56 >> 2] = 1;
 HEAP32[$3 + 52 >> 2] = 0;
 jsvStringIteratorNew($3 + 16 | 0, HEAP32[$3 + 72 >> 2], 0);
 label$1: {
  while (1) {
   if (jsvStringIteratorHasChar_1($3 + 16 | 0) & 1) {
    HEAP8[$3 + 15 | 0] = jsvStringIteratorGetCharAndNext($3 + 16 | 0);
    if (!(!(HEAP32[$3 + 56 >> 2] == HEAP32[$3 + 68 >> 2] & HEAPU32[$3 + 60 >> 2] >= HEAPU32[$3 + 64 >> 2]) & HEAPU32[$3 + 56 >> 2] <= HEAPU32[$3 + 68 >> 2])) {
     jsvStringIteratorFree_1($3 + 16 | 0);
     if (HEAPU32[$3 + 56 >> 2] > HEAPU32[$3 + 68 >> 2]) {
      $0 = HEAP32[$3 + 52 >> 2] - 1 | 0;
     } else {
      $0 = HEAP32[$3 + 52 >> 2];
     }
     HEAP32[$3 + 76 >> 2] = $0;
     break label$1;
    }
    HEAP32[$3 + 60 >> 2] = HEAP32[$3 + 60 >> 2] + 1;
    if (HEAP8[$3 + 15 | 0] == 10) {
     HEAP32[$3 + 60 >> 2] = 1;
     HEAP32[$3 + 56 >> 2] = HEAP32[$3 + 56 >> 2] + 1;
    }
    HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 52 >> 2] + 1;
    continue;
   }
   break;
  }
  jsvStringIteratorFree_1($3 + 16 | 0);
  HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 52 >> 2];
 }
 __stack_pointer = $3 + 80 | 0;
 return HEAP32[$3 + 76 >> 2];
}

function jstUtilTimerSetupBuffer($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $0 = _jsvGetAddressOf(HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8);
 $2 = HEAP32[$1 + 12 >> 2];
 HEAP8[$2 + 8 | 0] = $0;
 HEAP8[$2 + 9 | 0] = $0 >>> 8;
 HEAP8[$2 + 10 | 0] = $0 >>> 16;
 HEAP8[$2 + 11 | 0] = $0 >>> 24;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1: {
  if (jsvIsFlatString(HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 1) {
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP8[$0 + 18 | 0] = 13;
   HEAP8[$0 + 19 | 0] = 0;
   $0 = HEAP32[$1 + 12 >> 2];
   $2 = jsvGetCharactersInVar(HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24));
   $0 = HEAP32[$1 + 12 >> 2];
   $2 = $2 + 13 | 0;
   HEAP8[$0 + 20 | 0] = $2;
   HEAP8[$0 + 21 | 0] = $2 >>> 8;
   break label$1;
  }
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP8[$0 + 18 | 0] = 0;
  HEAP8[$0 + 19 | 0] = 0;
  $0 = HEAP32[$1 + 12 >> 2];
  $0 = jsvGetCharactersInVar(HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24));
  $2 = HEAP32[$1 + 12 >> 2];
  HEAP8[$2 + 20 | 0] = $0;
  HEAP8[$2 + 21 | 0] = $0 >>> 8;
 }
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_io_getPinMode($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 11 | 0] = $0;
 label$1: {
  if (!(jshIsPinValid(HEAPU8[$1 + 11 | 0]) & 1)) {
   jsExceptionHere(1, 102474, 0);
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP8[$1 + 10 | 0] = jshPinGetState(HEAPU8[$1 + 11 | 0]) & 15;
  HEAP32[$1 + 4 >> 2] = 0;
  label$3: {
   label$4: {
    switch (HEAPU8[$1 + 10 | 0] - 1 | 0) {
    case 6:
     HEAP32[$1 + 4 >> 2] = 103650;
     break label$3;

    case 3:
     HEAP32[$1 + 4 >> 2] = 97377;
     break label$3;

    case 4:
     HEAP32[$1 + 4 >> 2] = 101813;
     break label$3;

    case 5:
     HEAP32[$1 + 4 >> 2] = 102060;
     break label$3;

    case 0:
     HEAP32[$1 + 4 >> 2] = 97370;
     break label$3;

    case 1:
     HEAP32[$1 + 4 >> 2] = 102495;
     break label$3;

    case 2:
     HEAP32[$1 + 4 >> 2] = 101826;
     break label$3;

    case 7:
     HEAP32[$1 + 4 >> 2] = 97367;
     break label$3;

    case 8:
     break label$4;

    default:
     break label$3;
    }
   }
   HEAP32[$1 + 4 >> 2] = 102492;
  }
  if (HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 12 >> 2] = jsvNewFromString(HEAP32[$1 + 4 >> 2]);
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function tflite__MicroAllocator__AllocatePersistentTfLiteTensor_28tflite__Model_20const__2c_20TfLiteEvalTensor__2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 24 >> 2] = $0;
 HEAP32[$4 + 20 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $2;
 HEAP32[$4 + 12 >> 2] = $3;
 $0 = HEAP32[$4 + 24 >> 2];
 HEAP32[$4 + 8 >> 2] = tflite__MicroAllocator__GetSubGraphFromModel_28tflite__Model_20const__29($0, HEAP32[$4 + 20 >> 2]);
 label$1: {
  if (!HEAP32[$4 + 8 >> 2]) {
   break label$1;
  }
 }
 HEAP32[$4 + 4 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2], HEAP32[$4 + 12 >> 2]);
 label$2: {
  if (FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0, HEAP32[$4 + 20 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 + 12 >> 2], 0) | 0) {
   tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$0 + 8 >> 2], 127306, 0);
   HEAP32[$4 + 28 >> 2] = 0;
   break label$2;
  }
  if (HEAP32[$4 + 16 >> 2]) {
   HEAP32[HEAP32[$4 + 4 >> 2] + 16 >> 2] = HEAP32[HEAP32[$4 + 16 >> 2] + Math_imul(HEAP32[$4 + 12 >> 2], 12) >> 2];
  }
  HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 4 >> 2];
 }
 __stack_pointer = $4 + 32 | 0;
 return HEAP32[$4 + 28 >> 2];
}

function jsvGetStringLength($0) {
 var $1 = 0;
 $1 = __stack_pointer + -64 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 56 >> 2] = $0;
 HEAP32[$1 + 52 >> 2] = 0;
 label$1: {
  if (jsvIsUTF8String(HEAP32[$1 + 56 >> 2]) & 1) {
   jsvStringIteratorNew($1 + 16 | 0, HEAP32[$1 + 56 >> 2], 0);
   while (1) {
    if (jsvStringIteratorHasChar_1($1 + 16 | 0) & 1) {
     jsvStringIteratorNextUTF8($1 + 16 | 0);
     HEAP32[$1 + 52 >> 2] = HEAP32[$1 + 52 >> 2] + 1;
     continue;
    }
    break;
   }
   jsvStringIteratorFree_1($1 + 16 | 0);
   HEAP32[$1 + 60 >> 2] = HEAP32[$1 + 52 >> 2];
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 56 >> 2];
  HEAP32[$1 + 8 >> 2] = 0;
  if (!(jsvHasCharacterData(HEAP32[$1 + 56 >> 2]) & 1)) {
   HEAP32[$1 + 60 >> 2] = 0;
   break label$1;
  }
  while (1) {
   if (HEAP32[$1 + 12 >> 2]) {
    HEAP16[$1 + 6 >> 1] = jsvGetLastChild(HEAP32[$1 + 12 >> 2]);
    HEAP32[$1 + 52 >> 2] = jsvGetCharactersInVar(HEAP32[$1 + 12 >> 2]) + HEAP32[$1 + 52 >> 2];
    jsvUnLock(HEAP32[$1 + 8 >> 2]);
    $0 = jsvLockSafe(HEAPU16[$1 + 6 >> 1]);
    HEAP32[$1 + 8 >> 2] = $0;
    HEAP32[$1 + 12 >> 2] = $0;
    continue;
   }
   break;
  }
  jsvUnLock(HEAP32[$1 + 8 >> 2]);
  HEAP32[$1 + 60 >> 2] = HEAP32[$1 + 52 >> 2];
 }
 __stack_pointer = $1 - -64 | 0;
 return HEAP32[$1 + 60 >> 2];
}

function getTimeFromMilliSeconds($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAPF64[$3 + 24 >> 3] = $1;
 HEAP8[$3 + 23 | 0] = $2;
 if (HEAP8[$3 + 23 | 0] & 1) {
  $2 = 0;
 } else {
  $2 = jsdGetEffectiveTimeZone(HEAPF64[$3 + 24 >> 3], 0, $0 + 24 | 0);
 }
 HEAP32[$0 + 20 >> 2] = $2;
 HEAPF64[$3 + 24 >> 3] = HEAPF64[$3 + 24 >> 3] + +(Math_imul(HEAP32[$0 + 20 >> 2], 6e4) | 0);
 $1 = HEAPF64[$3 + 24 >> 3] / 864e5;
 label$3: {
  if (Math_abs($1) < 2147483648) {
   $2 = ~~$1;
   break label$3;
  }
  $2 = -2147483648;
 }
 HEAP32[$0 >> 2] = $2;
 if (HEAP8[$3 + 23 | 0] & 1) {
  HEAP8[$0 + 24 | 0] = 0;
 }
 $1 = +HEAP32[$0 >> 2] * -864e5 + HEAPF64[$3 + 24 >> 3];
 label$6: {
  if (Math_abs($1) < 2147483648) {
   $2 = ~~$1;
   break label$6;
  }
  $2 = -2147483648;
 }
 HEAP32[$3 + 16 >> 2] = $2;
 if (HEAP32[$3 + 16 >> 2] < 0) {
  HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 16 >> 2] + 864e5;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] - 1;
 }
 HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 16 >> 2] / 1e3;
 HEAP32[$0 + 4 >> 2] = HEAP32[$3 + 16 >> 2] % 1e3;
 HEAP32[$0 + 16 >> 2] = HEAP32[$3 + 12 >> 2] / 3600;
 HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] % 3600;
 HEAP32[$0 + 12 >> 2] = HEAP32[$3 + 12 >> 2] / 60;
 HEAP32[$0 + 8 >> 2] = HEAP32[$3 + 12 >> 2] % 60;
 __stack_pointer = $3 + 32 | 0;
}

function jsvGetCommonCharacters($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 112 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 104 >> 2] = $0;
 HEAP32[$2 + 100 >> 2] = $1;
 HEAP32[$2 + 96 >> 2] = jsvNewFromEmptyString_1();
 label$1: {
  if (!HEAP32[$2 + 96 >> 2]) {
   HEAP32[$2 + 108 >> 2] = 0;
   break label$1;
  }
  jsvStringIteratorNewUTF8($2 + 56 | 0, HEAP32[$2 + 104 >> 2], 0);
  jsvStringIteratorNewUTF8($2 + 16 | 0, HEAP32[$2 + 100 >> 2], 0);
  HEAP32[$2 + 12 >> 2] = jsvStringIteratorGetUTF8CharAndNext($2 + 56 | 0);
  HEAP32[$2 + 8 >> 2] = jsvStringIteratorGetUTF8CharAndNext($2 + 16 | 0);
  while (1) {
   $0 = 0;
   label$4: {
    if (HEAP32[$2 + 12 >> 2] <= 0) {
     break label$4;
    }
    $0 = 0;
    if (HEAP32[$2 + 8 >> 2] <= 0) {
     break label$4;
    }
    $0 = HEAP32[$2 + 12 >> 2] == HEAP32[$2 + 8 >> 2];
   }
   if ($0) {
    jsvAppendCharacter(HEAP32[$2 + 96 >> 2], HEAP32[$2 + 12 >> 2] << 24 >> 24);
    HEAP32[$2 + 12 >> 2] = jsvStringIteratorGetUTF8CharAndNext($2 + 56 | 0);
    HEAP32[$2 + 8 >> 2] = jsvStringIteratorGetUTF8CharAndNext($2 + 16 | 0);
    continue;
   }
   break;
  }
  jsvStringIteratorFree_1($2 + 56 | 0);
  jsvStringIteratorFree_1($2 + 16 | 0);
  HEAP32[$2 + 108 >> 2] = HEAP32[$2 + 96 >> 2];
 }
 __stack_pointer = $2 + 112 | 0;
 return HEAP32[$2 + 108 >> 2];
}

function tflite__reference_ops__DepthwiseConv_28tflite__DepthwiseParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0;
 $9 = __stack_pointer - 48 | 0;
 __stack_pointer = $9;
 HEAP32[$9 + 44 >> 2] = $0;
 HEAP32[$9 + 40 >> 2] = $1;
 HEAP32[$9 + 36 >> 2] = $2;
 HEAP32[$9 + 32 >> 2] = $3;
 HEAP32[$9 + 28 >> 2] = $4;
 HEAP32[$9 + 24 >> 2] = $5;
 HEAP32[$9 + 20 >> 2] = $6;
 HEAP32[$9 + 16 >> 2] = $7;
 HEAP32[$9 + 12 >> 2] = $8;
 tflite__reference_ops__depthwise_conv__DepthwiseConvBasicKernel__28tflite__DepthwiseConvOutputRounding_291___Run_28tflite__DepthwiseParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29(HEAP32[$9 + 44 >> 2], HEAP32[$9 + 40 >> 2], HEAP32[$9 + 36 >> 2], HEAP32[$9 + 32 >> 2], HEAP32[$9 + 28 >> 2], HEAP32[$9 + 24 >> 2], HEAP32[$9 + 20 >> 2], HEAP32[$9 + 16 >> 2], HEAP32[$9 + 12 >> 2]);
 __stack_pointer = $9 + 48 | 0;
}

function jswGetBasicObjectPrototypeName($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!strcmp(HEAP32[$1 + 8 >> 2], 96569)) {
   HEAP32[$1 + 12 >> 2] = 96993;
   break label$1;
  }
  if (!strcmp(HEAP32[$1 + 8 >> 2], 96551)) {
   HEAP32[$1 + 12 >> 2] = 96993;
   break label$1;
  }
  if (!strcmp(HEAP32[$1 + 8 >> 2], 96580)) {
   HEAP32[$1 + 12 >> 2] = 96993;
   break label$1;
  }
  if (!strcmp(HEAP32[$1 + 8 >> 2], 96590)) {
   HEAP32[$1 + 12 >> 2] = 96993;
   break label$1;
  }
  if (!strcmp(HEAP32[$1 + 8 >> 2], 96602)) {
   HEAP32[$1 + 12 >> 2] = 96993;
   break label$1;
  }
  if (!strcmp(HEAP32[$1 + 8 >> 2], 96626)) {
   HEAP32[$1 + 12 >> 2] = 96993;
   break label$1;
  }
  if (!strcmp(HEAP32[$1 + 8 >> 2], 96638)) {
   HEAP32[$1 + 12 >> 2] = 96993;
   break label$1;
  }
  if (!strcmp(HEAP32[$1 + 8 >> 2], 96650)) {
   HEAP32[$1 + 12 >> 2] = 96993;
   break label$1;
  }
  if (!strcmp(HEAP32[$1 + 8 >> 2], 96661)) {
   HEAP32[$1 + 12 >> 2] = 96993;
   break label$1;
  }
  if (!strcmp(HEAP32[$1 + 8 >> 2], 96613)) {
   HEAP32[$1 + 12 >> 2] = 96993;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = strcmp(HEAP32[$1 + 8 >> 2], 98070) ? 98070 : 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function std____2__vector_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29__2c_20std____2__allocator_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29_____vector_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 std____2____compressed_pair_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29___2c_20std____2__allocator_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29_______compressed_pair_std__nullptr_t_2c_20std____2____default_init_tag__28std__nullptr_t___2c_20std____2____default_init_tag___29($0 + 8 | 0, $1 + 8 | 0, $1);
 void_20std____2____debug_db_insert_c_std____2__vector_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29__2c_20std____2__allocator_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29_____28std____2__vector_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29__2c_20std____2__allocator_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29_____29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_object_getOwnPropertyDescriptors($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 40 >> 2] = $0;
 label$1: {
  if (!(jsvHasChildren(HEAP32[$1 + 40 >> 2]) & 1)) {
   HEAP32[$1 >> 2] = HEAP32[$1 + 40 >> 2];
   jsExceptionHere(3, 98650, $1);
   HEAP32[$1 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 36 >> 2] = jsvNewObject();
  if (!HEAP32[$1 + 36 >> 2]) {
   HEAP32[$1 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 32 >> 2] = jswrap_object_keys_or_property_names(HEAP32[$1 + 40 >> 2], 1);
  jsvObjectIteratorNew($1 + 24 | 0, HEAP32[$1 + 32 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_9($1 + 24 | 0) & 1) {
    HEAP32[$1 + 20 >> 2] = jsvObjectIteratorGetValue_9($1 + 24 | 0);
    HEAP32[$1 + 16 >> 2] = jswrap_object_getOwnPropertyDescriptor(HEAP32[$1 + 40 >> 2], HEAP32[$1 + 20 >> 2]);
    jsvObjectSetChildVar(HEAP32[$1 + 36 >> 2], HEAP32[$1 + 20 >> 2], HEAP32[$1 + 16 >> 2]);
    jsvUnLock2(HEAP32[$1 + 20 >> 2], HEAP32[$1 + 16 >> 2]);
    jsvObjectIteratorNext($1 + 24 | 0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree_9($1 + 24 | 0);
  jsvUnLock(HEAP32[$1 + 32 >> 2]);
  HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 36 >> 2];
 }
 __stack_pointer = $1 + 48 | 0;
 return HEAP32[$1 + 44 >> 2];
}

function graphicsVectorCharWidth($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP8[$2 + 39 | 0] = $1;
 HEAP32[$2 + 28 >> 2] = vfGetCharPtr(HEAP8[$2 + 39 | 0], $2 + 32 | 0);
 label$1: {
  if (!HEAP32[$2 + 28 >> 2]) {
   HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 40 >> 2] >>> 1;
   break label$1;
  }
  HEAP32[$2 + 24 >> 2] = 0;
  HEAP32[$2 + 20 >> 2] = 0;
  while (1) {
   if (HEAP32[$2 + 20 >> 2] < HEAP32[$2 + 32 >> 2]) {
    HEAP32[$2 + 12 >> 2] = vfGetPolyPtr(HEAPU8[HEAP32[$2 + 28 >> 2] + HEAP32[$2 + 20 >> 2] | 0], $2 + 16 | 0);
    HEAP32[$2 + 8 >> 2] = 0;
    while (1) {
     if (HEAP32[$2 + 8 >> 2] < HEAP32[$2 + 16 >> 2]) {
      HEAP8[$2 + 7 | 0] = HEAPU8[HEAP32[$2 + 12 >> 2] + HEAP32[$2 + 8 >> 2] | 0];
      HEAP32[$2 >> 2] = HEAPU8[$2 + 7 | 0] % 13;
      if (HEAP32[$2 >> 2] > HEAP32[$2 + 24 >> 2]) {
       HEAP32[$2 + 24 >> 2] = HEAP32[$2 >> 2];
      }
      HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] + 1;
      continue;
     }
     break;
    }
    HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 20 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$2 + 44 >> 2] = (Math_imul(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 24 >> 2] + 2 | 0) << 4 >>> 4 | 0) + 7 >>> 4;
 }
 __stack_pointer = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}

function jswrap_graphics_drawLineAA($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $5 = __stack_pointer - 112 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 104 >> 2] = $0;
 HEAPF64[$5 + 96 >> 3] = $1;
 HEAPF64[$5 + 88 >> 3] = $2;
 HEAPF64[$5 + 80 >> 3] = $3;
 HEAPF64[$5 + 72 >> 3] = $4;
 label$1: {
  if (!(graphicsGetFromVar($5, HEAP32[$5 + 104 >> 2]) & 1)) {
   HEAP32[$5 + 108 >> 2] = 0;
   break label$1;
  }
  $1 = HEAPF64[$5 + 96 >> 3] * 16 + .5;
  label$3: {
   if (Math_abs($1) < 2147483648) {
    $6 = ~~$1;
    break label$3;
   }
   $6 = -2147483648;
  }
  $1 = HEAPF64[$5 + 88 >> 3] * 16 + .5;
  label$5: {
   if (Math_abs($1) < 2147483648) {
    $7 = ~~$1;
    break label$5;
   }
   $7 = -2147483648;
  }
  $1 = HEAPF64[$5 + 80 >> 3] * 16 + .5;
  label$7: {
   if (Math_abs($1) < 2147483648) {
    $0 = ~~$1;
    break label$7;
   }
   $0 = -2147483648;
  }
  $1 = HEAPF64[$5 + 72 >> 3] * 16 + .5;
  label$9: {
   if (Math_abs($1) < 2147483648) {
    $8 = ~~$1;
    break label$9;
   }
   $8 = -2147483648;
  }
  graphicsDrawLineAA($5, $6, $7, $0, $8);
  graphicsSetVar($5);
  HEAP32[$5 + 108 >> 2] = jsvLockAgain(HEAP32[$5 + 104 >> 2]);
 }
 __stack_pointer = $5 + 112 | 0;
 return HEAP32[$5 + 108 >> 2];
}

function jsiSetConsoleDevice($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP8[$2 + 47 | 0] = $0;
 HEAP8[$2 + 46 | 0] = $1;
 label$1: {
  if (HEAP8[$2 + 46 | 0] & 1) {
   HEAP16[93524] = HEAPU16[93524] | 256;
   break label$1;
  }
  HEAP16[93524] = HEAPU16[93524] & -257;
 }
 label$3: {
  if (HEAPU8[$2 + 47 | 0] == HEAPU8[153824]) {
   break label$3;
  }
  label$4: {
   if (HEAPU8[$2 + 47 | 0] < 22 | HEAPU8[$2 + 47 | 0] > 22) {
    break label$4;
   }
   if (jshIsDeviceInitialised(HEAPU8[$2 + 47 | 0]) & 1) {
    break label$4;
   }
   jshUSARTInitInfo($2 + 32 | 0);
   jshUSARTSetup(HEAPU8[$2 + 47 | 0], $2 + 32 | 0);
  }
  HEAP8[$2 + 31 | 0] = jsiEcho() & 1;
  if (HEAPU8[153824] == 19) {
   HEAP8[$2 + 31 | 0] = 0;
   jshTransmitMove(19, HEAPU8[$2 + 47 | 0]);
   jshUSARTKick(HEAPU8[$2 + 47 | 0]);
  }
  if (HEAP8[$2 + 31 | 0] & 1) {
   jsiConsoleRemoveInputLine();
   HEAP32[$2 + 16 >> 2] = jshGetDeviceString(HEAPU8[$2 + 47 | 0]);
   jsiConsolePrintf(128215, $2 + 16 | 0);
  }
  HEAP8[$2 + 30 | 0] = HEAPU8[153824];
  HEAP8[153824] = HEAPU8[$2 + 47 | 0];
  if (!(HEAP8[$2 + 31 | 0] & 1)) {
   break label$3;
  }
  HEAP32[$2 >> 2] = jshGetDeviceString(HEAPU8[$2 + 30 | 0]);
  jsiConsolePrintf(128222, $2);
 }
 __stack_pointer = $2 + 48 | 0;
}

function tflite__MicroAllocator__AllocateTempTfLiteTensor_28tflite__Model_20const__2c_20TfLiteEvalTensor__2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 24 >> 2] = $0;
 HEAP32[$4 + 20 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $2;
 HEAP32[$4 + 12 >> 2] = $3;
 $0 = HEAP32[$4 + 24 >> 2];
 HEAP32[$4 + 8 >> 2] = tflite__MicroAllocator__GetSubGraphFromModel_28tflite__Model_20const__29($0, HEAP32[$4 + 20 >> 2]);
 label$1: {
  if (!HEAP32[$4 + 8 >> 2]) {
   break label$1;
  }
 }
 $1 = HEAP32[$0 + 4 >> 2];
 HEAP32[$4 + 4 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 16 >> 2]]($1, 40, 4);
 label$2: {
  if (FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0, HEAP32[$4 + 20 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 + 12 >> 2], 1) | 0) {
   tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$0 + 8 >> 2], 127380, 0);
   HEAP32[$4 + 28 >> 2] = 0;
   break label$2;
  }
  if (HEAP32[$4 + 16 >> 2]) {
   HEAP32[HEAP32[$4 + 4 >> 2] + 16 >> 2] = HEAP32[HEAP32[$4 + 16 >> 2] + Math_imul(HEAP32[$4 + 12 >> 2], 12) >> 2];
  }
  HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 4 >> 2];
 }
 __stack_pointer = $4 + 32 | 0;
 return HEAP32[$4 + 28 >> 2];
}

function jsiCountBracketsInInput() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 144 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 140 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = jslSetLex($0 + 16 | 0);
 jslInit(HEAP32[46763]);
 while (1) {
  label$2: {
   $1 = 0;
   label$3: {
    if (!HEAP16[$0 + 18 >> 1]) {
     break label$3;
    }
    $1 = 0;
    if (HEAP16[$0 + 18 >> 1] == 137) {
     break label$3;
    }
    $1 = 0;
    if (HEAP16[$0 + 18 >> 1] == 132) {
     break label$3;
    }
    $1 = HEAP16[$0 + 18 >> 1] != 134;
   }
   if (!$1) {
    break label$2;
   }
   if (!(!(HEAP16[$0 + 18 >> 1] == 123 | HEAP16[$0 + 18 >> 1] == 91) & HEAP16[$0 + 18 >> 1] != 40)) {
    HEAP32[$0 + 140 >> 2] = HEAP32[$0 + 140 >> 2] + 1;
   }
   if (!(!(HEAP16[$0 + 18 >> 1] == 125 | HEAP16[$0 + 18 >> 1] == 93) & HEAP16[$0 + 18 >> 1] != 41)) {
    HEAP32[$0 + 140 >> 2] = HEAP32[$0 + 140 >> 2] - 1;
   }
   if (HEAP32[$0 + 140 >> 2] < 0) {
    break label$2;
   }
   jslGetNextToken();
   continue;
  }
  break;
 }
 if (HEAP16[$0 + 18 >> 1] == 132) {
  HEAP32[$0 + 140 >> 2] = 0;
 }
 if (!(HEAP16[$0 + 18 >> 1] != 137 & HEAP16[$0 + 18 >> 1] != 134)) {
  HEAP32[$0 + 140 >> 2] = 1e3;
 }
 jslKill();
 jslSetLex(HEAP32[$0 + 12 >> 2]);
 __stack_pointer = $0 + 144 | 0;
 return HEAP32[$0 + 140 >> 2];
}

function jswrap_espruino_setConsole($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 112 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 108 >> 2] = $0;
 HEAP32[$2 + 104 >> 2] = $1;
 HEAP8[$2 + 103 | 0] = 0;
 HEAP32[$2 + 88 >> 2] = 105454;
 HEAP16[$2 + 92 >> 1] = 12;
 HEAP32[$2 + 96 >> 2] = $2 + 103;
 label$1: {
  if (!(jsvReadConfigObject(HEAP32[$2 + 104 >> 2], $2 + 88 | 0, 1) & 1)) {
   break label$1;
  }
  HEAP8[$2 + 87 | 0] = 0;
  label$2: {
   if (jsvIsObject(HEAP32[$2 + 108 >> 2]) & 1) {
    HEAP8[$2 + 87 | 0] = jsiGetDeviceFromClass(HEAP32[$2 + 108 >> 2]);
    break label$2;
   }
   if (jsvIsString(HEAP32[$2 + 108 >> 2]) & 1) {
    jsvGetString(HEAP32[$2 + 108 >> 2], $2 + 16 | 0, 64);
    HEAP8[$2 + 87 | 0] = jshFromDeviceString($2 + 16 | 0);
   }
  }
  label$5: {
   if (HEAPU8[$2 + 87 | 0]) {
    break label$5;
   }
   if (jsvIsNull(HEAP32[$2 + 108 >> 2]) & 1) {
    break label$5;
   }
   HEAP32[$2 >> 2] = HEAPU8[$2 + 87 | 0];
   jsExceptionHere(1, 101687, $2);
   break label$1;
  }
  if (!(!HEAPU8[$2 + 87 | 0] | HEAPU8[$2 + 87 | 0] <= 22 & HEAPU8[$2 + 87 | 0] >= 17)) {
   jsExceptionHere(1, 100482, 0);
   break label$1;
  }
  jsiSetConsoleDevice(HEAPU8[$2 + 87 | 0], HEAP8[$2 + 103 | 0] & 1);
 }
 __stack_pointer = $2 + 112 | 0;
}

function tflite__MicroAllocator__FinishModelAllocation_28tflite__Model_20const__2c_20TfLiteEvalTensor__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 $0 = HEAP32[$3 + 24 >> 2];
 label$1: {
  if (!(HEAP8[$0 + 12 | 0] & 1)) {
   tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$0 + 8 >> 2], 102818, 0);
   HEAP32[$3 + 28 >> 2] = 1;
   break label$1;
  }
  HEAP32[$3 + 12 >> 2] = tflite__MicroAllocator__GetSubGraphFromModel_28tflite__Model_20const__29($0, HEAP32[$3 + 20 >> 2]);
  label$3: {
   if (!HEAP32[$3 + 12 >> 2]) {
    break label$3;
   }
  }
  HEAP32[$3 + 8 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0, HEAP32[$3 + 20 >> 2], HEAP32[$3 + 12 >> 2], HEAP32[$3 + 16 >> 2]);
  if (HEAP32[$3 + 8 >> 2]) {
   HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 8 >> 2];
   break label$1;
  }
  HEAP32[$3 + 4 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 16 >> 2]);
  if (HEAP32[$3 + 4 >> 2]) {
   HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 4 >> 2];
   break label$1;
  }
  HEAP8[$0 + 12 | 0] = 0;
  HEAP32[$3 + 28 >> 2] = 0;
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function jsvMathsOpTypeEqual($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP8[$2 + 7 | 0] = (!HEAP32[$2 + 12 >> 2] | 0) == (!HEAP32[$2 + 8 >> 2] | 0);
 if (!(!HEAP32[$2 + 12 >> 2] | !HEAP32[$2 + 8 >> 2])) {
  label$2: {
   label$3: {
    if (!(jsvIsInt(HEAP32[$2 + 12 >> 2]) & 1)) {
     if (!(jsvIsFloat(HEAP32[$2 + 12 >> 2]) & 1)) {
      break label$3;
     }
    }
    $0 = 1;
    if (jsvIsInt(HEAP32[$2 + 8 >> 2]) & 1) {
     break label$2;
    }
    $0 = 1;
    if (jsvIsFloat(HEAP32[$2 + 8 >> 2]) & 1) {
     break label$2;
    }
   }
   if (jsvIsString(HEAP32[$2 + 12 >> 2]) & 1) {
    $0 = 1;
    if (jsvIsString(HEAP32[$2 + 8 >> 2]) & 1) {
     break label$2;
    }
   }
   $0 = HEAP32[$2 + 12 >> 2];
   $1 = HEAP32[$2 + 8 >> 2];
   $0 = ((HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63) == ((HEAPU8[$1 + 11 | 0] | HEAPU8[$1 + 12 | 0] << 8) & 63);
  }
  HEAP8[$2 + 7 | 0] = $0;
 }
 if (HEAP8[$2 + 7 | 0] & 1) {
  HEAP32[$2 >> 2] = jsvMathsOp(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 138);
  if (!(jsvGetBool(HEAP32[$2 >> 2]) & 1)) {
   HEAP8[$2 + 7 | 0] = 0;
  }
  jsvUnLock(HEAP32[$2 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP8[$2 + 7 | 0] & 1;
}

function jsvGetCharactersInVar($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[$1 + 8 >> 2];
 HEAP32[$1 + 4 >> 2] = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63;
 label$1: {
  if (HEAP32[$1 + 4 >> 2] == 37) {
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP32[$1 + 12 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
   break label$1;
  }
  if (!(HEAP32[$1 + 4 >> 2] != 38 & HEAP32[$1 + 4 >> 2] != 39)) {
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP32[$1 + 12 >> 2] = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
   break label$1;
  }
  if (HEAPU32[$1 + 4 >> 2] < 18) {
   HEAP32[$1 >> 2] = HEAP32[$1 + 4 >> 2];
   jsiConsolePrintf(128580, $1);
  }
  if (HEAPU32[$1 + 4 >> 2] <= 27) {
   if (HEAPU32[$1 + 4 >> 2] <= 22) {
    HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2] - 18;
    break label$1;
   }
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2] - 23;
   break label$1;
  }
  if (HEAPU32[$1 + 4 >> 2] <= 36) {
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2] - 28;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2] - 40;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsiTabComplete_printCommon($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 28 >> 2];
 label$1: {
  if (jsvGetStringLength(HEAP32[$2 + 24 >> 2]) >>> 0 <= HEAPU32[HEAP32[$2 + 20 >> 2] >> 2]) {
   break label$1;
  }
  if (jsvCompareString(HEAP32[HEAP32[$2 + 20 >> 2] + 4 >> 2], HEAP32[$2 + 24 >> 2], 0, 0, 1)) {
   break label$1;
  }
  label$2: {
   if (!HEAP32[HEAP32[$2 + 20 >> 2] + 16 >> 2]) {
    HEAP32[$2 >> 2] = HEAP32[$2 + 24 >> 2];
    jsiConsolePrintf(97144, $2);
    $0 = jsvGetStringLength(HEAP32[$2 + 24 >> 2]);
    HEAP32[HEAP32[$2 + 20 >> 2] + 16 >> 2] = $0;
    break label$2;
   }
   if (HEAPU32[HEAP32[$2 + 20 >> 2] + 16 >> 2] >= 20) {
    HEAP32[HEAP32[$2 + 20 >> 2] + 16 >> 2] = 19;
   }
   while (1) {
    if (HEAPU32[HEAP32[$2 + 20 >> 2] + 16 >> 2] < 20) {
     jsiConsolePrintChar(32);
     $0 = HEAP32[$2 + 20 >> 2];
     HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 16 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 24 >> 2];
   jsiConsolePrintf(127944, $2 + 16 | 0);
   HEAP32[HEAP32[$2 + 20 >> 2] + 16 >> 2] = 0;
  }
 }
 __stack_pointer = $2 + 32 | 0;
}

function jsiExtractIOEventData($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer + -64 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 60 >> 2] = $0;
 HEAP32[$2 + 56 >> 2] = $1;
 HEAP32[HEAP32[$2 + 56 >> 2] >> 2] = 0;
 HEAP32[$2 + 52 >> 2] = jsvNewFromEmptyString_5();
 if (HEAP32[$2 + 52 >> 2]) {
  jsvStringIteratorNew($2 + 16 | 0, HEAP32[$2 + 52 >> 2], 0);
  HEAP32[$2 + 8 >> 2] = ((HEAPU8[HEAP32[$2 + 60 >> 2]] & 96) >>> 5 | 0) + 1;
  while (1) {
   if (HEAP32[$2 + 8 >> 2]) {
    HEAP32[$2 + 12 >> 2] = 0;
    while (1) {
     if (HEAP32[$2 + 12 >> 2] < HEAP32[$2 + 8 >> 2]) {
      jsvStringIteratorAppend($2 + 16 | 0, HEAP8[HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 60 >> 2] + 1 | 0) | 0]);
      HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
      continue;
     }
     break;
    }
    label$6: {
     if (jshIsTopEvent(HEAPU8[HEAP32[$2 + 60 >> 2]] & 31) & 1) {
      jshPopIOEvent(HEAP32[$2 + 60 >> 2]);
      $0 = HEAP32[$2 + 56 >> 2];
      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
      HEAP32[$2 + 8 >> 2] = ((HEAPU8[HEAP32[$2 + 60 >> 2]] & 96) >>> 5 | 0) + 1;
      break label$6;
     }
     HEAP32[$2 + 8 >> 2] = 0;
    }
    continue;
   }
   break;
  }
  jsvStringIteratorFree_5($2 + 16 | 0);
 }
 __stack_pointer = $2 - -64 | 0;
 return HEAP32[$2 + 52 >> 2];
}

function jsvArrayBufferIteratorClone($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $5 = __stack_pointer - 16 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 12 >> 2] = $0;
 HEAP32[$5 + 8 >> 2] = $1;
 $3 = HEAP32[$5 + 8 >> 2];
 $0 = HEAP32[$3 >> 2];
 $2 = HEAP32[$3 + 4 >> 2];
 $4 = $0;
 $1 = HEAP32[$5 + 12 >> 2];
 $0 = $1;
 HEAP32[$0 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 52 >> 2];
 $2 = HEAP32[$3 + 48 >> 2];
 $4 = $2;
 $2 = $1;
 HEAP32[$2 + 48 >> 2] = $4;
 HEAP32[$2 + 52 >> 2] = $0;
 $2 = HEAP32[$3 + 44 >> 2];
 $0 = HEAP32[$3 + 40 >> 2];
 $4 = $0;
 $0 = $1;
 HEAP32[$0 + 40 >> 2] = $4;
 HEAP32[$0 + 44 >> 2] = $2;
 $0 = HEAP32[$3 + 36 >> 2];
 $2 = HEAP32[$3 + 32 >> 2];
 $4 = $2;
 $2 = $1;
 HEAP32[$2 + 32 >> 2] = $4;
 HEAP32[$2 + 36 >> 2] = $0;
 $2 = HEAP32[$3 + 28 >> 2];
 $0 = HEAP32[$3 + 24 >> 2];
 $4 = $0;
 $0 = $1;
 HEAP32[$0 + 24 >> 2] = $4;
 HEAP32[$0 + 28 >> 2] = $2;
 $0 = HEAP32[$3 + 20 >> 2];
 $2 = HEAP32[$3 + 16 >> 2];
 $4 = $2;
 $2 = $1;
 HEAP32[$2 + 16 >> 2] = $4;
 HEAP32[$2 + 20 >> 2] = $0;
 $2 = HEAP32[$3 + 12 >> 2];
 $0 = HEAP32[$3 + 8 >> 2];
 $4 = $0;
 $0 = $1;
 HEAP32[$0 + 8 >> 2] = $4;
 HEAP32[$0 + 12 >> 2] = $2;
 jsvStringIteratorClone(HEAP32[$5 + 12 >> 2], HEAP32[$5 + 8 >> 2]);
 __stack_pointer = $5 + 16 | 0;
}

function jswrap_storage_write($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = __stack_pointer - 96 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 92 >> 2] = $0;
 HEAP32[$4 + 88 >> 2] = $1;
 HEAP32[$4 + 84 >> 2] = $2;
 HEAP32[$4 + 80 >> 2] = $3;
 label$1: {
  if (jsvIsObject(HEAP32[$4 + 88 >> 2]) & 1) {
   HEAP32[$4 + 76 >> 2] = jswrap_json_stringify(HEAP32[$4 + 88 >> 2], 0, 0);
   HEAP32[$4 + 84 >> 2] = 0;
   HEAP32[$4 + 80 >> 2] = 0;
   break label$1;
  }
  HEAP32[$4 + 76 >> 2] = jsvLockAgainSafe(HEAP32[$4 + 88 >> 2]);
 }
 jsfNameFromVar($4 + 40 | 0, HEAP32[$4 + 92 >> 2]);
 $2 = HEAP32[$4 + 76 >> 2];
 $3 = HEAP32[$4 + 84 >> 2];
 $5 = HEAP32[$4 + 80 >> 2];
 HEAP32[$4 + 32 >> 2] = HEAP32[$4 + 64 >> 2];
 $1 = HEAP32[$4 + 60 >> 2];
 $0 = HEAP32[$4 + 56 >> 2];
 HEAP32[$4 + 24 >> 2] = $0;
 HEAP32[$4 + 28 >> 2] = $1;
 $0 = HEAP32[$4 + 52 >> 2];
 $1 = HEAP32[$4 + 48 >> 2];
 HEAP32[$4 + 16 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $0;
 $1 = HEAP32[$4 + 44 >> 2];
 $0 = HEAP32[$4 + 40 >> 2];
 HEAP32[$4 + 8 >> 2] = $0;
 HEAP32[$4 + 12 >> 2] = $1;
 HEAP8[$4 + 75 | 0] = jsfWriteFile($4 + 8 | 0, $2, 0, $3, $5) & 1;
 jsvUnLock(HEAP32[$4 + 76 >> 2]);
 __stack_pointer = $4 + 96 | 0;
 return HEAP8[$4 + 75 | 0] & 1;
}

function jswrap_object_assign($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 HEAP32[$1 + 24 >> 2] = 0;
 jsvObjectIteratorNew($1 + 16 | 0, HEAP32[$1 + 28 >> 2]);
 HEAP8[$1 + 15 | 0] = 0;
 while (1) {
  $0 = 0;
  if (!(HEAP8[$1 + 15 | 0] & 1)) {
   $0 = jsvObjectIteratorHasValue_9($1 + 16 | 0);
  }
  if ($0 & 1) {
   HEAP32[$1 + 8 >> 2] = jsvObjectIteratorGetValue_9($1 + 16 | 0);
   label$4: {
    if (jsvIsUndefined(HEAP32[$1 + 8 >> 2]) & 1) {
     break label$4;
    }
    if (jsvIsNull(HEAP32[$1 + 8 >> 2]) & 1) {
     break label$4;
    }
    label$6: {
     if (!(jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1)) {
      HEAP32[$1 >> 2] = HEAP32[$1 + 8 >> 2];
      jsExceptionHere(3, 98625, $1);
      HEAP8[$1 + 15 | 0] = 1;
      break label$6;
     }
     label$8: {
      if (!HEAP32[$1 + 24 >> 2]) {
       HEAP32[$1 + 24 >> 2] = jsvLockAgain(HEAP32[$1 + 8 >> 2]);
       break label$8;
      }
      jsvObjectAppendAll(HEAP32[$1 + 24 >> 2], HEAP32[$1 + 8 >> 2]);
     }
    }
   }
   jsvUnLock(HEAP32[$1 + 8 >> 2]);
   jsvObjectIteratorNext($1 + 16 | 0);
   continue;
  }
  break;
 }
 jsvObjectIteratorFree_9($1 + 16 | 0);
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 24 >> 2];
}

function expf($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = Math_fround(0), $5 = 0, $6 = 0, $7 = 0;
 label$1: {
  label$2: {
   $1 = top12($0) & 2047;
   if ($1 >>> 0 < top12(Math_fround(88)) >>> 0) {
    break label$2;
   }
   $4 = Math_fround(0);
   if (((wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2)) | 0) == -8388608) {
    break label$1;
   }
   if (top12(Math_fround(infinity)) >>> 0 <= $1 >>> 0) {
    return Math_fround($0 + $0);
   }
   if ($0 > Math_fround(88.72283172607422)) {
    return __math_oflowf(0);
   }
   if (!($0 < Math_fround(-103.97207641601562))) {
    break label$2;
   }
   return __math_uflowf(0);
  }
  $2 = HEAPF64[18865] * +$0;
  $5 = HEAPF64[18864];
  $6 = $2 + $5;
  $2 = $2 - ($6 - $5);
  $2 = (HEAPF64[18866] * $2 + HEAPF64[18867]) * ($2 * $2) + (HEAPF64[18868] * $2 + 1);
  wasm2js_scratch_store_f64(+$6);
  wasm2js_scratch_load_i32(1) | 0;
  $3 = wasm2js_scratch_load_i32(0) | 0;
  $1 = (($3 & 31) << 3) + 150624 | 0;
  $7 = HEAP32[$1 >> 2];
  $3 = HEAP32[$1 + 4 >> 2] + ($3 << 15) | 0;
  $1 = 0;
  $1 = $7 + $1 | 0;
  wasm2js_scratch_store_i32(0, $1 | 0);
  $3 = $7 >>> 0 > $1 >>> 0 ? $3 + 1 | 0 : $3;
  wasm2js_scratch_store_i32(1, $3 | 0);
  $4 = Math_fround($2 * +wasm2js_scratch_load_f64());
 }
 return $4;
}

function jspGetNamedField($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP8[$3 + 19 | 0] = $2;
 HEAP32[$3 + 12 >> 2] = 0;
 if (jsvHasChildren(HEAP32[$3 + 24 >> 2]) & 1) {
  HEAP32[$3 + 12 >> 2] = jsvFindChildFromString(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
 }
 if (!HEAP32[$3 + 12 >> 2]) {
  HEAP8[$3 + 11 | 0] = !strcmp(HEAP32[$3 + 20 >> 2], 104794);
  if (!(HEAP8[$3 + 11 | 0] & 1)) {
   HEAP32[$3 + 12 >> 2] = jspGetNamedFieldInParents(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], HEAP8[$3 + 19 | 0] & 1);
  }
  label$4: {
   if (HEAP32[$3 + 12 >> 2]) {
    break label$4;
   }
   if (!(jsvIsFunction(HEAP32[$3 + 24 >> 2]) & 1) | !(HEAP8[$3 + 11 | 0] & 1)) {
    break label$4;
   }
   HEAP32[$3 + 4 >> 2] = jsvNewObject();
   HEAP32[$3 + 12 >> 2] = jsvAddNamedChild(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 4 >> 2], 104794);
   jsvUnLock(HEAP32[$3 + 4 >> 2]);
  }
 }
 label$5: {
  if (HEAP8[$3 + 19 | 0] & 1) {
   HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 12 >> 2];
   break label$5;
  }
  HEAP32[$3 + 28 >> 2] = jsvSkipNameAndUnLock(HEAP32[$3 + 12 >> 2]);
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function jsvStringIteratorLoadFlashString_1($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2] + HEAP32[$0 + 8 >> 2];
 HEAP32[HEAP32[$1 + 12 >> 2] >> 2] = 0;
 $0 = HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
 label$1: {
  if (HEAPU32[HEAP32[$1 + 12 >> 2] + 8 >> 2] >= HEAPU32[$1 + 8 >> 2]) {
   HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2] = 0;
   HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] = 0;
   break label$1;
  }
  HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] = HEAP32[$1 + 8 >> 2] - HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2];
  if (HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2] > 16) {
   HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] = 16;
  }
  $0 = HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2];
  jshFlashRead(HEAP32[$1 + 12 >> 2] + 20 | 0, HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] + (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) | 0, HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2]);
  HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2] = HEAP32[$1 + 12 >> 2] + 20;
 }
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_date_toString($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $1 = __stack_pointer - 112 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 108 >> 2] = $0;
 getTimeFromDateVar($1 + 80 | 0, HEAP32[$1 + 108 >> 2], 0);
 getCalendarDate($1 + 56 | 0, HEAP32[$1 + 80 >> 2]);
 label$1: {
  if (HEAP32[$1 + 100 >> 2] < 0) {
   HEAP32[$1 + 48 >> 2] = 0 - HEAP32[$1 + 100 >> 2];
   HEAP8[$1 + 55 | 0] = 45;
   break label$1;
  }
  HEAP32[$1 + 48 >> 2] = HEAP32[$1 + 100 >> 2];
  HEAP8[$1 + 55 | 0] = 43;
 }
 $0 = HEAP32[38467];
 $2 = HEAP32[$1 + 72 >> 2] << 2;
 $3 = HEAP32[38466];
 $4 = HEAP32[$1 + 64 >> 2] << 2;
 $5 = HEAP32[$1 + 60 >> 2];
 $6 = HEAP32[$1 + 68 >> 2];
 $7 = HEAP32[$1 + 96 >> 2];
 $8 = HEAP32[$1 + 92 >> 2];
 $9 = HEAP32[$1 + 88 >> 2];
 $10 = HEAP8[$1 + 55 | 0];
 HEAP32[$1 + 32 >> 2] = Math_imul(HEAP32[$1 + 48 >> 2] / 60 | 0, 100) + (HEAP32[$1 + 48 >> 2] % 60 | 0);
 HEAP32[$1 + 28 >> 2] = $10;
 HEAP32[$1 + 24 >> 2] = $9;
 HEAP32[$1 + 20 >> 2] = $8;
 HEAP32[$1 + 16 >> 2] = $7;
 HEAP32[$1 + 12 >> 2] = $6;
 HEAP32[$1 + 8 >> 2] = $5;
 HEAP32[$1 + 4 >> 2] = $3 + $4;
 HEAP32[$1 >> 2] = $0 + $2;
 $0 = jsvVarPrintf(107061, $1);
 __stack_pointer = $1 + 112 | 0;
 return $0 | 0;
}

function jsvStringIteratorLoadFlashString($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2] + HEAP32[$0 + 8 >> 2];
 HEAP32[HEAP32[$1 + 12 >> 2] >> 2] = 0;
 $0 = HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
 label$1: {
  if (HEAPU32[HEAP32[$1 + 12 >> 2] + 8 >> 2] >= HEAPU32[$1 + 8 >> 2]) {
   HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2] = 0;
   HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] = 0;
   break label$1;
  }
  HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] = HEAP32[$1 + 8 >> 2] - HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2];
  if (HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2] > 16) {
   HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] = 16;
  }
  $0 = HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2];
  jshFlashRead(HEAP32[$1 + 12 >> 2] + 20 | 0, HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] + (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) | 0, HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2]);
  HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2] = HEAP32[$1 + 12 >> 2] + 20;
 }
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_process_env() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 12 >> 2] = jsvNewObject();
 jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 109084, jsvNewFromString(110812));
 jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 108724, jsvNewFromString(111285));
 jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 109907, jsvNewFromString(109170));
 jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 109292, jsvNewFromInteger(0));
 jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 109593, jsvNewFromInteger(4194304));
 jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 109590, jsvNewFromInteger(4194304));
 jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 109082, jsvNewFromInteger(1));
 jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 109830, jsvNewFromInteger(4194304));
 jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 109418, jswrap_interface_getSerial());
 jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 109794, jswrap_espruino_getConsole());
 jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 108842, jsvNewFromString(jswGetBuiltInLibraryNames()));
 jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 108854, jsvNewFromInteger(146656));
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function matchfound($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = jsvNewEmptyArray();
 HEAP32[$2 + 20 >> 2] = jsvStringIteratorGetIndex_4(HEAP32[$2 + 28 >> 2]);
 HEAP32[$2 + 16 >> 2] = jsvNewFromStringVar(HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2], HEAP32[$2 + 20 >> 2] - HEAP32[$1 + 4 >> 2] | 0);
 jsvSetArrayItem(HEAP32[$2 + 24 >> 2], 0, HEAP32[$2 + 16 >> 2]);
 jsvUnLock(HEAP32[$2 + 16 >> 2]);
 HEAP32[$2 + 12 >> 2] = 0;
 while (1) {
  if (HEAP32[$2 + 12 >> 2] < HEAP32[$1 + 12 >> 2]) {
   HEAP32[$2 + 16 >> 2] = jsvNewFromStringVar(HEAP32[$1 >> 2], HEAP32[($1 + 16 | 0) + (HEAP32[$2 + 12 >> 2] << 2) >> 2], HEAP32[($1 + 52 | 0) + (HEAP32[$2 + 12 >> 2] << 2) >> 2] - HEAP32[($1 + 16 | 0) + (HEAP32[$2 + 12 >> 2] << 2) >> 2] | 0);
   jsvSetArrayItem(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 12 >> 2] + 1 | 0, HEAP32[$2 + 16 >> 2]);
   jsvUnLock(HEAP32[$2 + 16 >> 2]);
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 jsvObjectSetChildAndUnLock(HEAP32[$2 + 24 >> 2], 96701, jsvNewFromInteger(HEAP32[$1 + 4 >> 2]));
 jsvObjectSetChild(HEAP32[$2 + 24 >> 2], 97377, HEAP32[$1 >> 2]);
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 24 >> 2];
}

function itostr_extra($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP8[$4 + 23 | 0] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 label$1: {
  if (!(!(HEAP8[$4 + 23 | 0] & 1) | HEAP32[$4 + 28 >> 2] >= 0)) {
   $0 = HEAP32[$4 + 24 >> 2];
   HEAP32[$4 + 24 >> 2] = $0 + 1;
   HEAP8[$0 | 0] = 45;
   HEAP32[$4 + 12 >> 2] = 0 - HEAP32[$4 + 28 >> 2];
   break label$1;
  }
  HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 28 >> 2];
 }
 HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 12 >> 2];
 HEAP32[$4 + 4 >> 2] = 1;
 while (1) {
  if (HEAPU32[$4 + 8 >> 2] >= HEAPU32[$4 + 16 >> 2]) {
   HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 4 >> 2] + 1;
   HEAP32[$4 + 8 >> 2] = HEAPU32[$4 + 8 >> 2] / HEAPU32[$4 + 16 >> 2];
   continue;
  }
  break;
 }
 HEAP32[$4 >> 2] = HEAP32[$4 + 4 >> 2] - 1;
 while (1) {
  if (HEAP32[$4 >> 2] >= 0) {
   $0 = itoch(HEAPU32[$4 + 12 >> 2] % HEAPU32[$4 + 16 >> 2] | 0);
   HEAP8[HEAP32[$4 + 24 >> 2] + HEAP32[$4 >> 2] | 0] = $0;
   HEAP32[$4 + 12 >> 2] = HEAPU32[$4 + 12 >> 2] / HEAPU32[$4 + 16 >> 2];
   HEAP32[$4 >> 2] = HEAP32[$4 >> 2] - 1;
   continue;
  }
  break;
 }
 HEAP8[HEAP32[$4 + 24 >> 2] + HEAP32[$4 + 4 >> 2] | 0] = 0;
 __stack_pointer = $4 + 32 | 0;
}

function jswrap_object_defineProperties($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 label$1: {
  if (!(jsvIsObject(HEAP32[$2 + 40 >> 2]) & 1)) {
   HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 40 >> 2];
   jsExceptionHere(1, 98650, $2 + 16 | 0);
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  if (!(jsvIsObject(HEAP32[$2 + 36 >> 2]) & 1)) {
   HEAP32[$2 >> 2] = HEAP32[$2 + 36 >> 2];
   jsExceptionHere(1, 98688, $2);
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  jsvObjectIteratorNew($2 + 32 | 0, HEAP32[$2 + 36 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_9($2 + 32 | 0) & 1) {
    HEAP32[$2 + 28 >> 2] = jsvObjectIteratorGetKey_6($2 + 32 | 0);
    HEAP32[$2 + 24 >> 2] = jsvObjectIteratorGetValue_9($2 + 32 | 0);
    jsvUnLock3(jswrap_object_defineProperty(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 28 >> 2], HEAP32[$2 + 24 >> 2]), HEAP32[$2 + 28 >> 2], HEAP32[$2 + 24 >> 2]);
    jsvObjectIteratorNext($2 + 32 | 0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree_9($2 + 32 | 0);
  HEAP32[$2 + 44 >> 2] = jsvLockAgain(HEAP32[$2 + 40 >> 2]);
 }
 __stack_pointer = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}

function jsfIsErased($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 160 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 152 >> 2] = $0;
 HEAP32[$2 + 148 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = 0;
 label$1: {
  while (1) {
   if (HEAP32[$2 + 148 >> 2]) {
    HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 148 >> 2];
    if (HEAPU32[$2 + 8 >> 2] > 128) {
     HEAP32[$2 + 8 >> 2] = 128;
    }
    jshFlashRead($2 + 16 | 0, HEAP32[$2 + 152 >> 2], HEAP32[$2 + 8 >> 2]);
    HEAP32[$2 + 4 >> 2] = 0;
    while (1) {
     if (HEAPU32[$2 + 4 >> 2] < HEAPU32[$2 + 8 >> 2]) {
      if (HEAPU8[HEAP32[$2 + 4 >> 2] + ($2 + 16 | 0) | 0] != 255) {
       HEAP8[$2 + 159 | 0] = 0;
       break label$1;
      } else {
       HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
       continue;
      }
     }
     break;
    }
    HEAP32[$2 + 152 >> 2] = HEAP32[$2 + 8 >> 2] + HEAP32[$2 + 152 >> 2];
    HEAP32[$2 + 148 >> 2] = HEAP32[$2 + 148 >> 2] - HEAP32[$2 + 8 >> 2];
    $0 = HEAP32[$2 + 12 >> 2];
    HEAP32[$2 + 12 >> 2] = $0 + 1;
    if (($0 | 0) > 500) {
     jshKickWatchDog();
     jshKickSoftWatchDog();
     HEAP32[$2 + 12 >> 2] = 0;
    }
    continue;
   }
   break;
  }
  HEAP8[$2 + 159 | 0] = 1;
 }
 __stack_pointer = $2 + 160 | 0;
 return HEAP8[$2 + 159 | 0] & 1;
}

function jswrap_string_endsWith($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 label$1: {
  if (!(jsvIsString(HEAP32[$3 + 24 >> 2]) & 1)) {
   HEAP8[$3 + 31 | 0] = 0;
   break label$1;
  }
  label$3: {
   if (jsvIsNumeric(HEAP32[$3 + 16 >> 2]) & 1) {
    $0 = jsvGetInteger(HEAP32[$3 + 16 >> 2]);
    break label$3;
   }
   $0 = jsvGetStringLength(HEAP32[$3 + 24 >> 2]);
  }
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = jsvAsString(HEAP32[$3 + 20 >> 2]);
  $0 = jsvGetStringLength(HEAP32[$3 + 8 >> 2]);
  HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] - $0;
  HEAP8[$3 + 7 | 0] = 0;
  label$5: {
   if (HEAP32[$3 + 12 >> 2] < 0) {
    break label$5;
   }
   if ((jsvGetStringLength(HEAP32[$3 + 8 >> 2]) + HEAP32[$3 + 12 >> 2] | 0) > (jsvGetStringLength(HEAP32[$3 + 24 >> 2]) | 0)) {
    break label$5;
   }
   HEAP8[$3 + 7 | 0] = !jsvCompareString(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 12 >> 2], 0, 1);
  }
  jsvUnLock(HEAP32[$3 + 8 >> 2]);
  HEAP8[$3 + 31 | 0] = HEAP8[$3 + 7 | 0] & 1;
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP8[$3 + 31 | 0] & 1;
}

function jsiAppendStringToInputLine($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsiIsAboutToEditInputLine();
 HEAP32[$1 + 8 >> 2] = 1;
 while (1) {
  if (HEAPU8[HEAP32[$1 + 12 >> 2] + HEAP32[$1 + 8 >> 2] | 0]) {
   HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
   continue;
  }
  break;
 }
 if (HEAP32[38457] < 0) {
  HEAP32[38457] = jsvGetStringLength(HEAP32[46763]);
 }
 label$4: {
  if (HEAP32[46765] >= HEAP32[38457]) {
   jsiAppendToInputLine(HEAP32[$1 + 12 >> 2]);
   break label$4;
  }
  HEAP32[$1 + 4 >> 2] = jsvNewFromEmptyString_5();
  if (HEAP32[46765]) {
   jsvAppendStringVar(HEAP32[$1 + 4 >> 2], HEAP32[46763], 0, HEAP32[46765]);
  }
  jsvAppendString(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 12 >> 2]);
  jsvAppendStringVar(HEAP32[$1 + 4 >> 2], HEAP32[46763], HEAP32[46765], 2147483647);
  jsiInputLineCursorMoved();
  jsvUnLock(HEAP32[46763]);
  HEAP32[46763] = HEAP32[$1 + 4 >> 2];
  if (jsiShowInputLine() & 1) {
   jsiConsolePrintStringVarUntilEOL(HEAP32[46763], HEAP32[46765], -1, 1);
  }
 }
 HEAP32[46765] = HEAP32[$1 + 8 >> 2] + HEAP32[46765];
 if (jsiShowInputLine() & 1) {
  jsiConsolePrintString(HEAP32[$1 + 12 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
}

function std____2____compressed_pair_TfLiteFullyConnectedParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_____compressed_pair_TfLiteFullyConnectedParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28TfLiteFullyConnectedParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 std____2____compressed_pair_elem_TfLiteFullyConnectedParams__2c_200_2c_20false_____compressed_pair_elem_TfLiteFullyConnectedParams___2c_20void__28TfLiteFullyConnectedParams___29($0, HEAP32[$3 + 8 >> 2]);
 std____2____compressed_pair_elem_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_2c_201_2c_20false_____compressed_pair_elem_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_2c_20void__28tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___29($0 + 4 | 0, HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function jswrap_date_toLocalISOString($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $1 = __stack_pointer - 112 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 108 >> 2] = $0;
 getTimeFromDateVar($1 + 80 | 0, HEAP32[$1 + 108 >> 2], 0);
 getCalendarDate($1 + 56 | 0, HEAP32[$1 + 80 >> 2]);
 label$1: {
  if (HEAP32[$1 + 100 >> 2] < 0) {
   HEAP32[$1 + 48 >> 2] = 0 - HEAP32[$1 + 100 >> 2];
   HEAP8[$1 + 55 | 0] = 45;
   break label$1;
  }
  HEAP32[$1 + 48 >> 2] = HEAP32[$1 + 100 >> 2];
  HEAP8[$1 + 55 | 0] = 43;
 }
 HEAP32[$1 + 48 >> 2] = Math_imul(HEAP32[$1 + 48 >> 2] / 60 | 0, 100) + (HEAP32[$1 + 48 >> 2] % 60 | 0);
 $0 = HEAP32[$1 + 68 >> 2];
 $2 = HEAP32[$1 + 64 >> 2];
 $3 = HEAP32[$1 + 60 >> 2];
 $4 = HEAP32[$1 + 96 >> 2];
 $5 = HEAP32[$1 + 92 >> 2];
 $6 = HEAP32[$1 + 88 >> 2];
 $7 = HEAP32[$1 + 84 >> 2];
 $8 = HEAP8[$1 + 55 | 0];
 HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 48 >> 2];
 HEAP32[$1 + 28 >> 2] = $8;
 HEAP32[$1 + 24 >> 2] = $7;
 HEAP32[$1 + 20 >> 2] = $6;
 HEAP32[$1 + 16 >> 2] = $5;
 HEAP32[$1 + 12 >> 2] = $4;
 HEAP32[$1 + 8 >> 2] = $3;
 HEAP32[$1 + 4 >> 2] = $2 + 1;
 HEAP32[$1 >> 2] = $0;
 $0 = jsvVarPrintf(107022, $1);
 __stack_pointer = $1 + 112 | 0;
 return $0 | 0;
}

function jswrap_dataview_get($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 96 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 88 >> 2] = $0;
 HEAP8[$4 + 87 | 0] = $1;
 HEAP32[$4 + 80 >> 2] = $2;
 HEAP8[$4 + 79 | 0] = $3;
 HEAP32[$4 + 72 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 88 >> 2], 101361);
 label$1: {
  if (!(jsvIsArrayBuffer(HEAP32[$4 + 72 >> 2]) & 1)) {
   jsvUnLock(HEAP32[$4 + 72 >> 2]);
   HEAP32[$4 + 92 >> 2] = 0;
   break label$1;
  }
  HEAP32[$4 + 80 >> 2] = jsvObjectGetIntegerChild(HEAP32[$4 + 88 >> 2], 98041) + HEAP32[$4 + 80 >> 2];
  HEAP32[$4 + 68 >> 2] = HEAPU8[$4 + 87 | 0] & 15;
  HEAP32[$4 + 64 >> 2] = jswrap_typedarray_constructor(HEAPU8[$4 + 87 | 0], HEAP32[$4 + 72 >> 2], HEAP32[$4 + 80 >> 2], HEAP32[$4 + 68 >> 2]);
  jsvUnLock(HEAP32[$4 + 72 >> 2]);
  if (!HEAP32[$4 + 64 >> 2]) {
   HEAP32[$4 + 92 >> 2] = 0;
   break label$1;
  }
  jsvArrayBufferIteratorNew($4 + 8 | 0, HEAP32[$4 + 64 >> 2], 0);
  HEAP32[$4 + 4 >> 2] = jsvArrayBufferIteratorGetValue($4 + 8 | 0, (HEAPU8[$4 + 79 | 0] ^ -1) & 1);
  jsvArrayBufferIteratorFree($4 + 8 | 0);
  jsvUnLock(HEAP32[$4 + 64 >> 2]);
  HEAP32[$4 + 92 >> 2] = HEAP32[$4 + 4 >> 2];
 }
 __stack_pointer = $4 + 96 | 0;
 return HEAP32[$4 + 92 >> 2];
}

function int_20gemmlowp__RoundingHalfSum_int__28int_2c_20int_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $5 = __stack_pointer - 48 | 0;
 HEAP32[$5 + 44 >> 2] = $0;
 HEAP32[$5 + 40 >> 2] = $1;
 $0 = $5;
 $1 = HEAP32[$0 + 44 >> 2];
 $2 = $1 >> 31;
 HEAP32[$0 + 32 >> 2] = $1;
 HEAP32[$0 + 36 >> 2] = $2;
 $2 = HEAP32[$0 + 40 >> 2];
 $1 = $2 >> 31;
 HEAP32[$0 + 24 >> 2] = $2;
 HEAP32[$0 + 28 >> 2] = $1;
 $1 = HEAP32[$0 + 32 >> 2];
 $6 = $1;
 $2 = HEAP32[$0 + 36 >> 2];
 $3 = $2;
 $2 = HEAP32[$0 + 24 >> 2];
 $4 = $2;
 $1 = HEAP32[$0 + 28 >> 2];
 $2 = $1;
 $1 = $3;
 $3 = $1 + $2 | 0;
 $0 = $6;
 $1 = $4;
 $4 = $0 + $1 | 0;
 $0 = $5;
 HEAP32[$0 + 16 >> 2] = $4;
 $3 = $4 >>> 0 < $1 >>> 0 ? $3 + 1 | 0 : $3;
 HEAP32[$0 + 20 >> 2] = $3;
 $0 = HEAP32[$0 + 20 >> 2];
 $0 = ($0 | 0) > 0 | ($0 | 0) >= 0 ? 1 : -1;
 $1 = $0 >> 31;
 $2 = $0;
 $0 = $5;
 HEAP32[$0 + 8 >> 2] = $2;
 HEAP32[$0 + 12 >> 2] = $1;
 $1 = HEAP32[$0 + 16 >> 2];
 $3 = $1;
 $0 = HEAP32[$0 + 20 >> 2];
 $4 = $0;
 $0 = HEAP32[$5 + 8 >> 2];
 $2 = $0;
 $1 = HEAP32[$5 + 12 >> 2];
 $0 = $1;
 $1 = $4;
 $4 = $1 + $0 | 0;
 $1 = $3;
 $3 = $2;
 $2 = $1 + $3 | 0;
 $4 = $2 >>> 0 < $3 >>> 0 ? $4 + 1 | 0 : $4;
 $1 = __wasm_i64_sdiv($2, $4, 2, 0);
 return $1;
}

function std____2____compressed_pair_TfLiteDepthwiseConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_____compressed_pair_TfLiteDepthwiseConvParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28TfLiteDepthwiseConvParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 std____2____compressed_pair_elem_TfLiteDepthwiseConvParams__2c_200_2c_20false_____compressed_pair_elem_TfLiteDepthwiseConvParams___2c_20void__28TfLiteDepthwiseConvParams___29($0, HEAP32[$3 + 8 >> 2]);
 std____2____compressed_pair_elem_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_2c_201_2c_20false_____compressed_pair_elem_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_2c_20void__28tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___29($0 + 4 | 0, HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function jsfEraseFile($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 112 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 64 >> 2] = HEAP32[$0 + 24 >> 2];
 $2 = HEAP32[$0 + 16 >> 2];
 $3 = HEAP32[$0 + 20 >> 2];
 HEAP32[$1 + 56 >> 2] = $2;
 HEAP32[$1 + 60 >> 2] = $3;
 $2 = HEAP32[$0 + 12 >> 2];
 $3 = HEAP32[$0 + 8 >> 2];
 HEAP32[$1 + 48 >> 2] = $3;
 HEAP32[$1 + 52 >> 2] = $2;
 $3 = HEAP32[$0 + 4 >> 2];
 $2 = HEAP32[$0 >> 2];
 HEAP32[$1 + 40 >> 2] = $2;
 HEAP32[$1 + 44 >> 2] = $3;
 HEAP32[$1 + 68 >> 2] = jsfFindFile($1 + 40 | 0, $1 + 72 | 0);
 label$1: {
  if (!HEAP32[$1 + 68 >> 2]) {
   HEAP8[$1 + 111 | 0] = 0;
   break label$1;
  }
  HEAP32[$1 + 32 >> 2] = HEAP32[$0 + 24 >> 2];
  $3 = HEAP32[$0 + 16 >> 2];
  $2 = HEAP32[$0 + 20 >> 2];
  HEAP32[$1 + 24 >> 2] = $3;
  HEAP32[$1 + 28 >> 2] = $2;
  $3 = HEAP32[$0 + 12 >> 2];
  $2 = HEAP32[$0 + 8 >> 2];
  HEAP32[$1 + 16 >> 2] = $2;
  HEAP32[$1 + 20 >> 2] = $3;
  $2 = HEAP32[$0 + 4 >> 2];
  $3 = HEAP32[$0 >> 2];
  HEAP32[$1 + 8 >> 2] = $3;
  HEAP32[$1 + 12 >> 2] = $2;
  jsfCacheClearFile($1 + 8 | 0);
  jsfEraseFileInternal(HEAP32[$1 + 68 >> 2], $1 + 72 | 0, 1);
  HEAP8[$1 + 111 | 0] = 1;
 }
 __stack_pointer = $1 + 112 | 0;
 return HEAP8[$1 + 111 | 0] & 1;
}

function void_20tflite__reference_ops__Dequantize_unsigned_20char_2c_20float__28tflite__DequantizationParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 48 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 44 >> 2] = $0;
 HEAP32[$5 + 40 >> 2] = $1;
 HEAP32[$5 + 36 >> 2] = $2;
 HEAP32[$5 + 32 >> 2] = $3;
 HEAP32[$5 + 28 >> 2] = $4;
 HEAP32[$5 + 24 >> 2] = HEAP32[HEAP32[$5 + 44 >> 2] + 8 >> 2];
 HEAPF64[$5 + 16 >> 3] = HEAPF64[HEAP32[$5 + 44 >> 2] >> 3];
 HEAP32[$5 + 12 >> 2] = tflite__MatchingFlatSize_28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__29(HEAP32[$5 + 40 >> 2], HEAP32[$5 + 32 >> 2]);
 HEAP32[$5 + 8 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 8 >> 2] < HEAP32[$5 + 12 >> 2]) {
   HEAP32[$5 + 4 >> 2] = HEAPU8[HEAP32[$5 + 36 >> 2] + HEAP32[$5 + 8 >> 2] | 0];
   HEAPF32[$5 >> 2] = HEAPF64[$5 + 16 >> 3] * +(HEAP32[$5 + 4 >> 2] - HEAP32[$5 + 24 >> 2] | 0);
   HEAPF32[HEAP32[$5 + 28 >> 2] + (HEAP32[$5 + 8 >> 2] << 2) >> 2] = HEAPF32[$5 >> 2];
   HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 8 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $5 + 48 | 0;
}

function void_20tflite__reference_ops__Dequantize_signed_20char_2c_20float__28tflite__DequantizationParams_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 48 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 44 >> 2] = $0;
 HEAP32[$5 + 40 >> 2] = $1;
 HEAP32[$5 + 36 >> 2] = $2;
 HEAP32[$5 + 32 >> 2] = $3;
 HEAP32[$5 + 28 >> 2] = $4;
 HEAP32[$5 + 24 >> 2] = HEAP32[HEAP32[$5 + 44 >> 2] + 8 >> 2];
 HEAPF64[$5 + 16 >> 3] = HEAPF64[HEAP32[$5 + 44 >> 2] >> 3];
 HEAP32[$5 + 12 >> 2] = tflite__MatchingFlatSize_28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__29(HEAP32[$5 + 40 >> 2], HEAP32[$5 + 32 >> 2]);
 HEAP32[$5 + 8 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 8 >> 2] < HEAP32[$5 + 12 >> 2]) {
   HEAP32[$5 + 4 >> 2] = HEAP8[HEAP32[$5 + 36 >> 2] + HEAP32[$5 + 8 >> 2] | 0];
   HEAPF32[$5 >> 2] = HEAPF64[$5 + 16 >> 3] * +(HEAP32[$5 + 4 >> 2] - HEAP32[$5 + 24 >> 2] | 0);
   HEAPF32[HEAP32[$5 + 28 >> 2] + (HEAP32[$5 + 8 >> 2] << 2) >> 2] = HEAPF32[$5 >> 2];
   HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 8 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $5 + 48 | 0;
}

function _jswrap_array_sort_compare($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 40 >> 2] = $0;
 HEAP32[$3 + 36 >> 2] = $1;
 HEAP32[$3 + 32 >> 2] = $2;
 label$1: {
  if (jsvIsUndefined(HEAP32[$3 + 40 >> 2]) & 1) {
   HEAP32[$3 + 44 >> 2] = 1;
   break label$1;
  }
  if (jsvIsUndefined(HEAP32[$3 + 36 >> 2]) & 1) {
   HEAP32[$3 + 44 >> 2] = -1;
   break label$1;
  }
  if (HEAP32[$3 + 32 >> 2]) {
   HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 40 >> 2];
   HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 36 >> 2];
   HEAPF64[$3 + 16 >> 3] = jsvGetFloatAndUnLock(jspeFunctionCall(HEAP32[$3 + 32 >> 2], 0, 0, 0, 2, $3 + 24 | 0));
   if (HEAPF64[$3 + 16 >> 3] == 0) {
    HEAP32[$3 + 44 >> 2] = 0;
    break label$1;
   }
   HEAP32[$3 + 44 >> 2] = HEAPF64[$3 + 16 >> 3] < 0 ? -1 : 1;
   break label$1;
  }
  HEAP32[$3 + 12 >> 2] = jsvAsString(HEAP32[$3 + 40 >> 2]);
  HEAP32[$3 + 8 >> 2] = jsvAsString(HEAP32[$3 + 36 >> 2]);
  HEAP32[$3 + 4 >> 2] = jsvCompareString(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], 0, 0, 0);
  jsvUnLock2(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
  HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 4 >> 2];
 }
 __stack_pointer = $3 + 48 | 0;
 return HEAP32[$3 + 44 >> 2];
}

function jswrap_io_shiftOutCallback($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 24 >> 2];
 HEAP32[$2 + 12 >> 2] = 0;
 while (1) {
  if (HEAP32[$2 + 12 >> 2] < HEAP32[HEAP32[$2 + 20 >> 2] + 16 >> 2]) {
   HEAP32[$2 + 16 >> 2] = HEAP32[HEAP32[$2 + 20 >> 2] + 12 >> 2] - 1;
   while (1) {
    if (HEAP32[$2 + 16 >> 2] >= 0) {
     if (jshIsPinValid(HEAPU8[HEAP32[$2 + 20 >> 2] + HEAP32[$2 + 16 >> 2] | 0]) & 1) {
      jshPinSetValue(HEAPU8[HEAP32[$2 + 20 >> 2] + HEAP32[$2 + 16 >> 2] | 0], HEAP32[$2 + 28 >> 2] & 1);
     }
     HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 28 >> 2] >> 1;
     HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 16 >> 2] - 1;
     continue;
    }
    break;
   }
   if (jshIsPinValid(HEAPU8[HEAP32[$2 + 20 >> 2] + 8 | 0]) & 1) {
    jshPinSetValue(HEAPU8[HEAP32[$2 + 20 >> 2] + 8 | 0], HEAP8[HEAP32[$2 + 20 >> 2] + 9 | 0] & 1);
    jshPinSetValue(HEAPU8[HEAP32[$2 + 20 >> 2] + 8 | 0], (HEAPU8[HEAP32[$2 + 20 >> 2] + 9 | 0] ^ -1) & 1);
   }
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $2 + 32 | 0;
}

function jswrap_graphics_setFontAlign($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 96 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 88 >> 2] = $0;
 HEAP32[$4 + 84 >> 2] = $1;
 HEAP32[$4 + 80 >> 2] = $2;
 HEAP32[$4 + 76 >> 2] = $3;
 label$1: {
  if (!(graphicsGetFromVar($4, HEAP32[$4 + 88 >> 2]) & 1)) {
   HEAP32[$4 + 92 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$4 + 84 >> 2] < -1) {
   HEAP32[$4 + 84 >> 2] = -1;
  }
  if (HEAP32[$4 + 84 >> 2] > 1) {
   HEAP32[$4 + 84 >> 2] = 1;
  }
  if (HEAP32[$4 + 80 >> 2] < -1) {
   HEAP32[$4 + 80 >> 2] = -1;
  }
  if (HEAP32[$4 + 80 >> 2] > 1) {
   HEAP32[$4 + 80 >> 2] = 1;
  }
  if (HEAP32[$4 + 76 >> 2] < 0) {
   HEAP32[$4 + 76 >> 2] = 0;
  }
  if (HEAP32[$4 + 76 >> 2] > 3) {
   HEAP32[$4 + 76 >> 2] = 3;
  }
  HEAP8[$4 + 31 | 0] = HEAPU8[$4 + 84 | 0] & 3 | HEAPU8[$4 + 31 | 0] & 252;
  HEAP8[$4 + 31 | 0] = HEAPU8[$4 + 31 | 0] & 243 | (HEAPU8[$4 + 80 | 0] & 3) << 2;
  HEAP8[$4 + 31 | 0] = HEAPU8[$4 + 31 | 0] & -49 | (HEAPU8[$4 + 76 | 0] & 3) << 4;
  graphicsSetVar($4);
  HEAP32[$4 + 92 >> 2] = jsvLockAgain(HEAP32[$4 + 88 >> 2]);
 }
 __stack_pointer = $4 + 96 | 0;
 return HEAP32[$4 + 92 >> 2];
}

function jsvCompareString($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 112 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 104 >> 2] = $0;
 HEAP32[$5 + 100 >> 2] = $1;
 HEAP32[$5 + 96 >> 2] = $2;
 HEAP32[$5 + 92 >> 2] = $3;
 HEAP8[$5 + 91 | 0] = $4;
 jsvStringIteratorNewUTF8($5 + 48 | 0, HEAP32[$5 + 104 >> 2], HEAP32[$5 + 96 >> 2]);
 jsvStringIteratorNewUTF8($5 + 8 | 0, HEAP32[$5 + 100 >> 2], HEAP32[$5 + 92 >> 2]);
 while (1) {
  label$2: {
   HEAP32[$5 + 4 >> 2] = jsvStringIteratorGetUTF8CharAndNext($5 + 48 | 0);
   HEAP32[$5 >> 2] = jsvStringIteratorGetUTF8CharAndNext($5 + 8 | 0);
   if (HEAP32[$5 + 4 >> 2] != HEAP32[$5 >> 2]) {
    jsvStringIteratorFree_1($5 + 48 | 0);
    jsvStringIteratorFree_1($5 + 8 | 0);
    if (!(!(HEAP8[$5 + 91 | 0] & 1) | (HEAP32[$5 + 4 >> 2] | HEAP32[$5 >> 2]) >= 0)) {
     HEAP32[$5 + 108 >> 2] = 0;
     break label$2;
    }
    HEAP32[$5 + 108 >> 2] = HEAP32[$5 + 4 >> 2] - HEAP32[$5 >> 2];
    break label$2;
   }
   if (HEAP32[$5 + 4 >> 2] >= 0) {
    continue;
   }
   jsvStringIteratorFree_1($5 + 48 | 0);
   jsvStringIteratorFree_1($5 + 8 | 0);
   HEAP32[$5 + 108 >> 2] = 0;
  }
  break;
 }
 __stack_pointer = $5 + 112 | 0;
 return HEAP32[$5 + 108 >> 2];
}

function void_20tflite__reference_ops__Dequantize_short_2c_20float__28tflite__DequantizationParams_20const__2c_20tflite__RuntimeShape_20const__2c_20short_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 48 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 44 >> 2] = $0;
 HEAP32[$5 + 40 >> 2] = $1;
 HEAP32[$5 + 36 >> 2] = $2;
 HEAP32[$5 + 32 >> 2] = $3;
 HEAP32[$5 + 28 >> 2] = $4;
 HEAP32[$5 + 24 >> 2] = HEAP32[HEAP32[$5 + 44 >> 2] + 8 >> 2];
 HEAPF64[$5 + 16 >> 3] = HEAPF64[HEAP32[$5 + 44 >> 2] >> 3];
 HEAP32[$5 + 12 >> 2] = tflite__MatchingFlatSize_28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__29(HEAP32[$5 + 40 >> 2], HEAP32[$5 + 32 >> 2]);
 HEAP32[$5 + 8 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 8 >> 2] < HEAP32[$5 + 12 >> 2]) {
   HEAP32[$5 + 4 >> 2] = HEAP16[HEAP32[$5 + 36 >> 2] + (HEAP32[$5 + 8 >> 2] << 1) >> 1];
   HEAPF32[$5 >> 2] = HEAPF64[$5 + 16 >> 3] * +(HEAP32[$5 + 4 >> 2] - HEAP32[$5 + 24 >> 2] | 0);
   HEAPF32[HEAP32[$5 + 28 >> 2] + (HEAP32[$5 + 8 >> 2] << 2) >> 2] = HEAPF32[$5 >> 2];
   HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 8 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $5 + 48 | 0;
}

function jswrap_string_toUpperLowerCase($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 112 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 104 >> 2] = $0;
 HEAP8[$2 + 103 | 0] = $1;
 HEAP32[$2 + 96 >> 2] = jsvNewFromEmptyString_8();
 label$1: {
  if (!HEAP32[$2 + 96 >> 2]) {
   HEAP32[$2 + 108 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 92 >> 2] = jsvAsString(HEAP32[$2 + 104 >> 2]);
  jsvStringIteratorNew($2 + 56 | 0, HEAP32[$2 + 92 >> 2], 0);
  jsvStringIteratorNew($2 + 16 | 0, HEAP32[$2 + 96 >> 2], 0);
  while (1) {
   if (jsvStringIteratorHasChar_8($2 + 56 | 0) & 1) {
    HEAP8[$2 + 15 | 0] = jsvStringIteratorGetCharAndNext($2 + 56 | 0);
    label$5: {
     if (HEAP8[$2 + 103 | 0] & 1) {
      $0 = charToUpperCase(HEAP8[$2 + 15 | 0]) << 24 >> 24;
      break label$5;
     }
     $0 = charToLowerCase(HEAP8[$2 + 15 | 0]) << 24 >> 24;
    }
    HEAP8[$2 + 15 | 0] = $0;
    jsvStringIteratorAppend($2 + 16 | 0, HEAP8[$2 + 15 | 0]);
    continue;
   }
   break;
  }
  jsvStringIteratorFree_10($2 + 56 | 0);
  jsvStringIteratorFree_10($2 + 16 | 0);
  jsvUnLock(HEAP32[$2 + 92 >> 2]);
  HEAP32[$2 + 108 >> 2] = HEAP32[$2 + 96 >> 2];
 }
 __stack_pointer = $2 + 112 | 0;
 return HEAP32[$2 + 108 >> 2];
}

function jswrap_onewire_read($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 80 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 72 >> 2] = $0;
 HEAP32[$2 + 68 >> 2] = $1;
 HEAP8[$2 + 67 | 0] = onewire_getpin(HEAP32[$2 + 72 >> 2]);
 label$1: {
  if (!(jshIsPinValid(HEAPU8[$2 + 67 | 0]) & 1)) {
   HEAP32[$2 + 76 >> 2] = 0;
   break label$1;
  }
  if (jsvIsNumeric(HEAP32[$2 + 68 >> 2]) & 1) {
   HEAP32[$2 + 60 >> 2] = jsvGetInteger(HEAP32[$2 + 68 >> 2]);
   HEAP32[$2 + 56 >> 2] = jsvNewTypedArray(1, HEAP32[$2 + 60 >> 2]);
   if (!HEAP32[$2 + 56 >> 2]) {
    HEAP32[$2 + 76 >> 2] = 0;
    break label$1;
   }
   jsvArrayBufferIteratorNew($2, HEAP32[$2 + 56 >> 2], 0);
   while (1) {
    $0 = HEAP32[$2 + 60 >> 2];
    HEAP32[$2 + 60 >> 2] = $0 - 1;
    if ($0) {
     jsvArrayBufferIteratorSetByteValue($2, OneWireRead(HEAPU8[$2 + 67 | 0], 8) << 24 >> 24);
     jsvArrayBufferIteratorNext($2);
     continue;
    }
    break;
   }
   jsvArrayBufferIteratorFree($2);
   HEAP32[$2 + 76 >> 2] = HEAP32[$2 + 56 >> 2];
   break label$1;
  }
  HEAP32[$2 + 76 >> 2] = jsvNewFromInteger(OneWireRead(HEAPU8[$2 + 67 | 0], 8));
 }
 __stack_pointer = $2 + 80 | 0;
 return HEAP32[$2 + 76 >> 2];
}

function jswrap_object_fromEntries($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 label$1: {
  if (!(jsvIsArray(HEAP32[$1 + 24 >> 2]) & 1)) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 20 >> 2] = jsvNewObject();
  if (!HEAP32[$1 + 20 >> 2]) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  jsvObjectIteratorNew($1 + 16 | 0, HEAP32[$1 + 24 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_9($1 + 16 | 0) & 1) {
    HEAP32[$1 + 12 >> 2] = jsvObjectIteratorGetValue_9($1 + 16 | 0);
    if (jsvIsArray(HEAP32[$1 + 12 >> 2]) & 1) {
     HEAP32[$1 + 8 >> 2] = jsvGetArrayItem(HEAP32[$1 + 12 >> 2], 0);
     HEAP32[$1 + 4 >> 2] = jsvGetArrayItem(HEAP32[$1 + 12 >> 2], 1);
     if (jsvIsString(HEAP32[$1 + 8 >> 2]) & 1) {
      jsvObjectSetChildVar(HEAP32[$1 + 20 >> 2], HEAP32[$1 + 8 >> 2], HEAP32[$1 + 4 >> 2]);
     }
     jsvUnLock2(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 4 >> 2]);
    }
    jsvUnLock(HEAP32[$1 + 12 >> 2]);
    jsvObjectIteratorNext($1 + 16 | 0);
    continue;
   }
   break;
  }
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 20 >> 2];
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function jsvClearEmptyVarList() {
 var $0 = 0, $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[154466] = 1;
 HEAP16[77234] = 0;
 HEAP16[$1 + 14 >> 1] = 1;
 while (1) {
  if (HEAPU16[$1 + 14 >> 1] <= 2500) {
   HEAP32[$1 + 8 >> 2] = jsvGetAddressOf(HEAPU16[$1 + 14 >> 1]);
   $0 = HEAP32[$1 + 8 >> 2];
   label$3: {
    if (!((HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63)) {
     $0 = HEAP32[$1 + 8 >> 2];
     HEAP8[$0 | 0] = 0;
     HEAP8[$0 + 1 | 0] = 0;
     HEAP8[$0 + 2 | 0] = 0;
     HEAP8[$0 + 3 | 0] = 0;
     HEAP8[$0 + 4 | 0] = 0;
     HEAP8[$0 + 5 | 0] = 0;
     HEAP8[$0 + 6 | 0] = 0;
     HEAP8[$0 + 7 | 0] = 0;
     HEAP8[$0 + 5 | 0] = 0;
     HEAP8[$0 + 6 | 0] = 0;
     HEAP8[$0 + 7 | 0] = 0;
     HEAP8[$0 + 8 | 0] = 0;
     HEAP8[$0 + 9 | 0] = 0;
     HEAP8[$0 + 10 | 0] = 0;
     HEAP8[$0 + 11 | 0] = 0;
     HEAP8[$0 + 12 | 0] = 0;
     break label$3;
    }
    if (jsvIsFlatString(HEAP32[$1 + 8 >> 2]) & 1) {
     HEAP16[$1 + 14 >> 1] = HEAPU16[$1 + 14 >> 1] + jsvGetFlatStringBlocks(HEAP32[$1 + 8 >> 2]);
    }
   }
   HEAP16[$1 + 14 >> 1] = HEAPU16[$1 + 14 >> 1] + 1;
   continue;
  }
  break;
 }
 HEAP8[154466] = 0;
 __stack_pointer = $1 + 16 | 0;
}

function tflite__GreedyMemoryPlanner__GetMaximumMemorySize_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 $0 = HEAP32[$1 + 24 >> 2];
 tflite__GreedyMemoryPlanner__CalculateOffsetsIfNeeded_28_29($0);
 label$1: {
  if (!HEAP32[$0 + 8 >> 2]) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 20 >> 2] = HEAP32[$0 + 24 >> 2] + Math_imul(HEAP32[$0 + 32 >> 2], 12);
  HEAP32[$1 + 16 >> 2] = 0;
  while (1) {
   label$4: {
    if (!HEAP32[$1 + 20 >> 2]) {
     break label$4;
    }
    HEAP32[$1 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + (HEAP32[HEAP32[$1 + 20 >> 2] + 4 >> 2] << 4);
    HEAP32[$1 + 8 >> 2] = HEAP32[HEAP32[$1 + 20 >> 2] >> 2] + HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
    if (HEAPU32[$1 + 8 >> 2] > HEAPU32[$1 + 16 >> 2]) {
     HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 8 >> 2];
    }
    if (HEAP32[HEAP32[$1 + 20 >> 2] + 8 >> 2] == -1) {
     break label$4;
    }
    HEAP32[$1 + 20 >> 2] = HEAP32[$0 + 24 >> 2] + Math_imul(HEAP32[HEAP32[$1 + 20 >> 2] + 8 >> 2], 12);
    continue;
   }
   break;
  }
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 16 >> 2];
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function jsvArrayBufferIteratorSetIntegerValue($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 label$1: {
  if (!HEAPU8[HEAP32[$2 + 28 >> 2] + 36 | 0]) {
   break label$1;
  }
  HEAP32[$2 + 8 >> 2] = HEAPU8[HEAP32[$2 + 28 >> 2] + 36 | 0] & 15;
  label$2: {
   if (HEAPU8[HEAP32[$2 + 28 >> 2] + 36 | 0] & 32) {
    jsvArrayBufferIteratorFloatToData($2 + 16 | 0, HEAP32[$2 + 8 >> 2], HEAPU8[HEAP32[$2 + 28 >> 2] + 36 | 0], +HEAP32[$2 + 24 >> 2]);
    break label$2;
   }
   jsvArrayBufferIteratorIntToData($2 + 16 | 0, HEAP32[$2 + 8 >> 2], HEAPU8[HEAP32[$2 + 28 >> 2] + 36 | 0], HEAP32[$2 + 24 >> 2]);
  }
  HEAP32[$2 + 12 >> 2] = 0;
  while (1) {
   if (HEAPU32[$2 + 12 >> 2] < HEAPU32[$2 + 8 >> 2]) {
    jsvStringIteratorSetChar(HEAP32[$2 + 28 >> 2], HEAP8[HEAP32[$2 + 12 >> 2] + ($2 + 16 | 0) | 0]);
    if (HEAP32[$2 + 8 >> 2] != 1) {
     jsvStringIteratorNext(HEAP32[$2 + 28 >> 2]);
    }
    HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
    continue;
   }
   break;
  }
  if (HEAP32[$2 + 8 >> 2] == 1) {
   break label$1;
  }
  HEAP8[HEAP32[$2 + 28 >> 2] + 52 | 0] = 1;
 }
 __stack_pointer = $2 + 32 | 0;
}

function graphicsSetModified($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 $0 = HEAP32[$5 + 28 >> 2];
 if (HEAP32[$5 + 24 >> 2] < (HEAPU8[$0 + 40 | 0] | HEAPU8[$0 + 41 | 0] << 8) << 16 >> 16) {
  $0 = HEAP32[$5 + 28 >> 2];
  $1 = HEAP32[$5 + 24 >> 2];
  HEAP8[$0 + 40 | 0] = $1;
  HEAP8[$0 + 41 | 0] = $1 >>> 8;
 }
 $0 = HEAP32[$5 + 28 >> 2];
 if (HEAP32[$5 + 16 >> 2] > (HEAPU8[$0 + 44 | 0] | HEAPU8[$0 + 45 | 0] << 8) << 16 >> 16) {
  $0 = HEAP32[$5 + 28 >> 2];
  $1 = HEAP32[$5 + 16 >> 2];
  HEAP8[$0 + 44 | 0] = $1;
  HEAP8[$0 + 45 | 0] = $1 >>> 8;
 }
 $0 = HEAP32[$5 + 28 >> 2];
 if (HEAP32[$5 + 20 >> 2] < (HEAPU8[$0 + 42 | 0] | HEAPU8[$0 + 43 | 0] << 8) << 16 >> 16) {
  $0 = HEAP32[$5 + 28 >> 2];
  $1 = HEAP32[$5 + 20 >> 2];
  HEAP8[$0 + 42 | 0] = $1;
  HEAP8[$0 + 43 | 0] = $1 >>> 8;
 }
 $0 = HEAP32[$5 + 28 >> 2];
 if (HEAP32[$5 + 12 >> 2] > (HEAPU8[$0 + 46 | 0] | HEAPU8[$0 + 47 | 0] << 8) << 16 >> 16) {
  $0 = HEAP32[$5 + 28 >> 2];
  $1 = HEAP32[$5 + 12 >> 2];
  HEAP8[$0 + 46 | 0] = $1;
  HEAP8[$0 + 47 | 0] = $1 >>> 8;
 }
}

function jswrap_math_minmax($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 44 >> 2] = $0;
 HEAP8[$2 + 43 | 0] = $1 & 1;
 HEAPF64[$2 + 32 >> 3] = HEAP8[$2 + 43 | 0] & 1 ? Math_fround(-infinity) : Math_fround(infinity);
 jsvObjectIteratorNew($2 + 24 | 0, HEAP32[$2 + 44 >> 2]);
 while (1) {
  if (jsvObjectIteratorHasValue_12($2 + 24 | 0) & 1) {
   HEAPF64[$2 + 16 >> 3] = jsvGetFloatAndUnLock(jsvObjectIteratorGetValue_11($2 + 24 | 0));
   label$3: {
    label$4: {
     if (HEAP8[$2 + 43 | 0] & 1 & HEAPF64[$2 + 16 >> 3] > HEAPF64[$2 + 32 >> 3] | !(HEAP8[$2 + 43 | 0] & 1) & HEAPF64[$2 + 16 >> 3] < HEAPF64[$2 + 32 >> 3]) {
      break label$4;
     }
     $1 = __DOUBLE_BITS_6(HEAPF64[$2 + 16 >> 3]);
     $0 = $1;
     $3 = i64toi32_i32$HIGH_BITS;
     $1 = $3 & 2147483647;
     $3 = $0;
     if (($1 | 0) == 2146435072 & ($3 | 0) != 0 | $1 >>> 0 > 2146435072) {
      break label$4;
     }
     break label$3;
    }
    HEAPF64[$2 + 32 >> 3] = HEAPF64[$2 + 16 >> 3];
   }
   jsvObjectIteratorNext($2 + 24 | 0);
   continue;
  }
  break;
 }
 jsvObjectIteratorFree_12($2 + 24 | 0);
 __stack_pointer = $2 + 48 | 0;
 return HEAPF64[$2 + 32 >> 3];
}

function _jswrap_drawImageLayerNextY($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 + 172 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 168 >> 2] + HEAP32[$0 + 172 >> 2];
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 + 176 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 164 >> 2] + HEAP32[$0 + 176 >> 2];
 if (HEAP8[HEAP32[$1 + 12 >> 2] + 33 | 0] & 1) {
  if (HEAP32[HEAP32[$1 + 12 >> 2] + 172 >> 2] < 0) {
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$0 + 172 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 156 >> 2] + HEAP32[$0 + 172 >> 2];
  }
  if (HEAP32[HEAP32[$1 + 12 >> 2] + 172 >> 2] >= HEAP32[HEAP32[$1 + 12 >> 2] + 156 >> 2]) {
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$0 + 172 >> 2] = HEAP32[$0 + 172 >> 2] - HEAP32[HEAP32[$1 + 12 >> 2] + 156 >> 2];
  }
  if (HEAP32[HEAP32[$1 + 12 >> 2] + 176 >> 2] < 0) {
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$0 + 176 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 160 >> 2] + HEAP32[$0 + 176 >> 2];
  }
  if (HEAP32[HEAP32[$1 + 12 >> 2] + 176 >> 2] >= HEAP32[HEAP32[$1 + 12 >> 2] + 160 >> 2]) {
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$0 + 176 >> 2] = HEAP32[$0 + 176 >> 2] - HEAP32[HEAP32[$1 + 12 >> 2] + 160 >> 2];
  }
 }
}

function lcdFillRect_ArrayBuffer_flat8($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $6 = __stack_pointer - 48 | 0;
 HEAP32[$6 + 44 >> 2] = $0;
 HEAP32[$6 + 40 >> 2] = $1;
 HEAP32[$6 + 36 >> 2] = $2;
 HEAP32[$6 + 32 >> 2] = $3;
 HEAP32[$6 + 28 >> 2] = $4;
 HEAP32[$6 + 24 >> 2] = $5;
 HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 36 >> 2];
 while (1) {
  if (HEAP32[$6 + 20 >> 2] <= HEAP32[$6 + 28 >> 2]) {
   $1 = HEAP32[$6 + 44 >> 2];
   $0 = HEAP32[$6 + 44 >> 2];
   HEAP32[$6 + 16 >> 2] = (HEAP32[$6 + 40 >> 2] + Math_imul(HEAP32[$6 + 20 >> 2], HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) | 0) + (HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24));
   HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 40 >> 2];
   while (1) {
    if (HEAP32[$6 + 12 >> 2] <= HEAP32[$6 + 32 >> 2]) {
     $1 = HEAP32[$6 + 24 >> 2];
     $0 = HEAP32[$6 + 16 >> 2];
     HEAP32[$6 + 16 >> 2] = $0 + 1;
     HEAP8[$0 | 0] = $1;
     HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 12 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 20 >> 2] + 1;
   continue;
  }
  break;
 }
}

function jspeConstruct($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP8[$3 + 19 | 0] = $2;
 label$1: {
  if (!(jsvIsFunction(HEAP32[$3 + 24 >> 2]) & 1)) {
   HEAP32[$3 >> 2] = HEAP32[$3 + 24 >> 2];
   jsExceptionHere(1, 99278, $3);
   HEAP32[$3 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 12 >> 2] = jsvNewObject();
  if (!HEAP32[$3 + 12 >> 2]) {
   HEAP32[$3 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 8 >> 2] = jsvFindOrAddChildFromString(HEAP32[$3 + 24 >> 2], 104794);
  jspEnsureIsPrototype(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 8 >> 2]);
  jsvAddNamedChildAndUnLock(HEAP32[$3 + 12 >> 2], jsvSkipNameAndUnLock(HEAP32[$3 + 8 >> 2]), 107914);
  HEAP32[$3 + 4 >> 2] = jspeFunctionCall(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], HEAP32[$3 + 12 >> 2], HEAP8[$3 + 19 | 0] & 1, 0, 0);
  label$4: {
   if (HEAP32[$3 + 4 >> 2]) {
    jsvUnLock(HEAP32[$3 + 12 >> 2]);
    HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 4 >> 2];
    break label$4;
   }
   jsvUnLock(HEAP32[$3 + 4 >> 2]);
  }
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 12 >> 2];
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function _jswrap_espruino_FFT_setData($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 96 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 92 >> 2] = $0;
 HEAP32[$4 + 88 >> 2] = $1;
 HEAP32[$4 + 84 >> 2] = $2;
 HEAP32[$4 + 80 >> 2] = $3;
 jsvIteratorNew($4 + 16 | 0, HEAP32[$4 + 92 >> 2], 1);
 HEAP32[$4 + 12 >> 2] = 0;
 while (1) {
  $0 = 0;
  if (HEAPU32[$4 + 12 >> 2] < HEAPU32[$4 + 80 >> 2]) {
   $0 = jsvIteratorHasElement($4 + 16 | 0);
  }
  if ($0 & 1) {
   label$4: {
    if (HEAP32[$4 + 84 >> 2]) {
     HEAPF64[$4 >> 3] = jswrap_math_sqrt(HEAPF64[HEAP32[$4 + 88 >> 2] + (HEAP32[$4 + 12 >> 2] << 3) >> 3] * HEAPF64[HEAP32[$4 + 88 >> 2] + (HEAP32[$4 + 12 >> 2] << 3) >> 3] + HEAPF64[HEAP32[$4 + 84 >> 2] + (HEAP32[$4 + 12 >> 2] << 3) >> 3] * HEAPF64[HEAP32[$4 + 84 >> 2] + (HEAP32[$4 + 12 >> 2] << 3) >> 3]);
     break label$4;
    }
    HEAPF64[$4 >> 3] = HEAPF64[HEAP32[$4 + 88 >> 2] + (HEAP32[$4 + 12 >> 2] << 3) >> 3];
   }
   jsvUnLock(jsvIteratorSetValue($4 + 16 | 0, jsvNewFromFloat(HEAPF64[$4 >> 3])));
   HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 12 >> 2] + 1;
   jsvIteratorNext($4 + 16 | 0);
   continue;
  }
  break;
 }
 jsvIteratorFree($4 + 16 | 0);
 __stack_pointer = $4 + 96 | 0;
}

function jsvIteratorGetValue($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  label$2: {
   switch (HEAP32[HEAP32[$1 + 8 >> 2] >> 2] - 1 | 0) {
   case 3:
    label$7: {
     if (!(jsvIsIntegerish(HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2]) & 1)) {
      break label$7;
     }
     if ((jsvGetInteger(HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2]) | 0) != HEAP32[HEAP32[$1 + 8 >> 2] + 12 >> 2]) {
      break label$7;
     }
     HEAP32[$1 + 12 >> 2] = jsvObjectIteratorGetValue_1(HEAP32[$1 + 8 >> 2] + 4 | 0);
     break label$1;
    }
    HEAP32[$1 + 12 >> 2] = 0;
    break label$1;

   case 1:
    HEAP32[$1 + 12 >> 2] = jsvObjectIteratorGetValue_1(HEAP32[$1 + 8 >> 2] + 4 | 0);
    break label$1;

   case 0:
    HEAP8[$1 + 7 | 0] = jsvStringIteratorGetChar_2(HEAP32[$1 + 8 >> 2] + 4 | 0);
    HEAP32[$1 + 12 >> 2] = jsvNewStringOfLength(1, $1 + 7 | 0);
    break label$1;

   case 2:
    HEAP32[$1 + 12 >> 2] = jsvArrayBufferIteratorGetValueAndRewind(HEAP32[$1 + 8 >> 2] + 4 | 0);
    break label$1;

   default:
    break label$2;
   }
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function std____2____compressed_pair_TfLiteSoftmaxParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_____compressed_pair_TfLiteSoftmaxParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28TfLiteSoftmaxParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 std____2____compressed_pair_elem_TfLiteSoftmaxParams__2c_200_2c_20false_____compressed_pair_elem_TfLiteSoftmaxParams___2c_20void__28TfLiteSoftmaxParams___29($0, HEAP32[$3 + 8 >> 2]);
 std____2____compressed_pair_elem_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_2c_201_2c_20false_____compressed_pair_elem_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_2c_20void__28tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___29($0 + 4 | 0, HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function std____2____compressed_pair_TfLiteReshapeParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_____compressed_pair_TfLiteReshapeParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28TfLiteReshapeParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 std____2____compressed_pair_elem_TfLiteReshapeParams__2c_200_2c_20false_____compressed_pair_elem_TfLiteReshapeParams___2c_20void__28TfLiteReshapeParams___29($0, HEAP32[$3 + 8 >> 2]);
 std____2____compressed_pair_elem_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_2c_201_2c_20false_____compressed_pair_elem_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_2c_20void__28tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___29($0 + 4 | 0, HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function jspeBlockNoBrackets() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 12 >> 2] = jspeBlockStart();
 label$1: {
  if ((HEAP32[46755] & 63) == 1) {
   while (1) {
    $1 = 0;
    label$5: {
     $1 = HEAP16[HEAP32[38615] + 2 >> 1] ? HEAP16[HEAP32[38615] + 2 >> 1] != 125 : $1;
     if (!$1) {
      break label$5;
     }
     HEAP32[$0 + 8 >> 2] = jspeStatement();
     jsvCheckReferenceError(HEAP32[$0 + 8 >> 2]);
     jsvUnLock(HEAP32[$0 + 8 >> 2]);
     if (!HEAP32[38615] | HEAP32[46755] & 128 ? 0 : HEAP32[46755] & 112) {
      HEAP32[46755] = HEAP32[46755] | 128;
      HEAP32[$0 + 4 >> 2] = jsvObjectGetChild(HEAP32[46748], 105500, 28);
      if (HEAP32[$0 + 4 >> 2]) {
       jsvAppendPrintf(HEAP32[$0 + 4 >> 2], 127516, 0);
       jspAppendStackTrace(HEAP32[$0 + 4 >> 2]);
       jsvUnLock(HEAP32[$0 + 4 >> 2]);
      }
     }
     if (HEAP32[46755] & 80) {
      break label$5;
     }
     if ((HEAP32[46755] & 63) != 1) {
      jspeSkipBlock();
      break label$5;
     }
     continue;
    }
    break;
   }
   break label$1;
  }
  jspeSkipBlock();
 }
 jspeBlockEnd(HEAP32[$0 + 12 >> 2]);
 __stack_pointer = $0 + 16 | 0;
}

function jspNewPrototype($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP8[$2 + 23 | 0] = $1;
 HEAP32[$2 + 16 >> 2] = jsvFindOrAddChildFromString(HEAP32[46747], HEAP32[$2 + 24 >> 2]);
 label$1: {
  if (!HEAP32[$2 + 16 >> 2]) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = jsvSkipName(HEAP32[$2 + 16 >> 2]);
  if (!HEAP32[$2 + 12 >> 2]) {
   HEAP32[$2 + 12 >> 2] = jspNewBuiltin(HEAP32[$2 + 24 >> 2]);
   if (!HEAP32[$2 + 12 >> 2]) {
    jsvUnLock(HEAP32[$2 + 16 >> 2]);
    HEAP32[$2 + 28 >> 2] = 0;
    break label$1;
   }
   jsvSetValueOfName(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 12 >> 2]);
  }
  HEAP32[$2 + 8 >> 2] = jsvFindOrAddChildFromString(HEAP32[$2 + 12 >> 2], 104794);
  jspEnsureIsPrototype(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
  if (HEAP8[$2 + 23 | 0] & 1) {
   $0 = HEAP32[$2 + 8 >> 2];
  } else {
   $0 = HEAP32[$2 + 12 >> 2];
  }
  jsvUnLock2($0, HEAP32[$2 + 16 >> 2]);
  if (HEAP8[$2 + 23 | 0] & 1) {
   $0 = HEAP32[$2 + 12 >> 2];
  } else {
   $0 = HEAP32[$2 + 8 >> 2];
  }
  HEAP32[$2 + 28 >> 2] = $0;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jsvNewWithFlags($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP16[$1 + 10 >> 1] = $0;
 label$1: {
  if (HEAPU8[154466]) {
   HEAP8[186986] = HEAPU8[186986] | 32;
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 4 >> 2] = 0;
  jshInterruptOff();
  if (HEAPU16[77234]) {
   HEAP32[$1 + 4 >> 2] = jsvGetAddressOf(HEAPU16[77234]);
   HEAP16[77234] = jsvGetNextSibling(HEAP32[$1 + 4 >> 2]);
   HEAP8[154465] = 1;
  }
  jshInterruptOn();
  if (HEAP32[$1 + 4 >> 2]) {
   jsvResetVariable(HEAP32[$1 + 4 >> 2], HEAPU16[$1 + 10 >> 1]);
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
   break label$1;
  }
  HEAP8[186986] = HEAPU8[186986] | 8;
  if (jshIsInInterrupt() & 1) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  if (jsvGarbageCollect()) {
   HEAP32[$1 + 12 >> 2] = jsvNewWithFlags(HEAPU16[$1 + 10 >> 1]);
   break label$1;
  }
  if (jsiFreeMoreMemory() & 1) {
   HEAP32[$1 + 12 >> 2] = jsvNewWithFlags(HEAPU16[$1 + 10 >> 1]);
   break label$1;
  }
  HEAP8[186986] = HEAPU8[186986] | 16;
  jspSetInterrupted(1);
  HEAP32[$1 + 12 >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jswrap_object_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 label$1: {
  label$2: {
   label$3: {
    if (jsvIsObject(HEAP32[$1 + 24 >> 2]) & 1) {
     break label$3;
    }
    if (jsvIsArray(HEAP32[$1 + 24 >> 2]) & 1) {
     break label$3;
    }
    if (!(jsvIsFunction(HEAP32[$1 + 24 >> 2]) & 1)) {
     break label$2;
    }
   }
   HEAP32[$1 + 28 >> 2] = jsvLockAgain(HEAP32[$1 + 24 >> 2]);
   break label$1;
  }
  HEAP32[$1 + 20 >> 2] = jswGetBasicObjectName(HEAP32[$1 + 24 >> 2]);
  label$4: {
   if (HEAP32[$1 + 20 >> 2]) {
    $0 = jspGetNamedVariable(HEAP32[$1 + 20 >> 2]);
    break label$4;
   }
   $0 = 0;
  }
  HEAP32[$1 + 16 >> 2] = $0;
  if (!HEAP32[$1 + 16 >> 2]) {
   HEAP32[$1 + 28 >> 2] = jsvNewObject();
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[$1 + 16 >> 2]);
  HEAP32[$1 + 8 >> 2] = jspeFunctionCall(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 16 >> 2], 0, 0, 1, $1 + 24 | 0);
  jsvUnLock2(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 12 >> 2]);
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 8 >> 2];
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function tflite__TfLiteEvalTensorByteLength_28TfLiteEvalTensor_20const__2c_20unsigned_20long__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1: {
  if (!HEAP32[$2 + 20 >> 2]) {
   break label$1;
  }
 }
 HEAP32[$2 + 16 >> 2] = 1;
 if (HEAP32[HEAP32[$2 + 24 >> 2] + 4 >> 2]) {
  HEAP32[$2 + 12 >> 2] = 0;
  while (1) {
   if (HEAP32[$2 + 12 >> 2] < HEAP32[HEAP32[HEAP32[$2 + 24 >> 2] + 4 >> 2] >> 2]) {
    HEAP32[$2 + 16 >> 2] = Math_imul(HEAP32[(HEAP32[HEAP32[$2 + 24 >> 2] + 4 >> 2] + 4 | 0) + (HEAP32[$2 + 12 >> 2] << 2) >> 2], HEAP32[$2 + 16 >> 2]);
    HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
    continue;
   }
   break;
  }
 }
 HEAP32[$2 + 4 >> 2] = tflite__TfLiteTypeSizeOf_28TfLiteType_2c_20unsigned_20long__29(HEAP32[HEAP32[$2 + 24 >> 2] + 8 >> 2], $2 + 8 | 0);
 label$5: {
  if (HEAP32[$2 + 4 >> 2]) {
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 4 >> 2];
   break label$5;
  }
  HEAP32[HEAP32[$2 + 20 >> 2] >> 2] = Math_imul(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 8 >> 2]);
  HEAP32[$2 + 28 >> 2] = 0;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jsvSetCharactersInVar($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP16[$2 + 2 >> 1] = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & -64;
 label$1: {
  if (HEAPU32[$2 + 4 >> 2] <= 27) {
   if (HEAPU32[$2 + 4 >> 2] <= 22) {
    $0 = HEAP32[$2 + 12 >> 2];
    $1 = HEAPU16[$2 + 2 >> 1] | HEAP32[$2 + 8 >> 2] + 18;
    HEAP8[$0 + 11 | 0] = $1;
    HEAP8[$0 + 12 | 0] = $1 >>> 8;
    break label$1;
   }
   $0 = HEAP32[$2 + 12 >> 2];
   $1 = HEAPU16[$2 + 2 >> 1] | HEAP32[$2 + 8 >> 2] + 23;
   HEAP8[$0 + 11 | 0] = $1;
   HEAP8[$0 + 12 | 0] = $1 >>> 8;
   break label$1;
  }
  label$4: {
   if (HEAPU32[$2 + 4 >> 2] <= 36) {
    $0 = HEAP32[$2 + 12 >> 2];
    $1 = HEAPU16[$2 + 2 >> 1] | HEAP32[$2 + 8 >> 2] + 28;
    HEAP8[$0 + 11 | 0] = $1;
    HEAP8[$0 + 12 | 0] = $1 >>> 8;
    break label$4;
   }
   $0 = HEAP32[$2 + 12 >> 2];
   $1 = HEAPU16[$2 + 2 >> 1] | HEAP32[$2 + 8 >> 2] + 40;
   HEAP8[$0 + 11 | 0] = $1;
   HEAP8[$0 + 12 | 0] = $1 >>> 8;
  }
 }
}

function tflite__GreedyMemoryPlanner__AddBuffer_28tflite__ErrorReporter__2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 24 >> 2] = $0;
 HEAP32[$5 + 20 >> 2] = $1;
 HEAP32[$5 + 16 >> 2] = $2;
 HEAP32[$5 + 12 >> 2] = $3;
 HEAP32[$5 + 8 >> 2] = $4;
 $0 = HEAP32[$5 + 24 >> 2];
 label$1: {
  if (HEAP32[$0 + 8 >> 2] >= HEAP32[$0 + 4 >> 2]) {
   $1 = HEAP32[$5 + 20 >> 2];
   HEAP32[$5 >> 2] = HEAP32[$0 + 4 >> 2];
   tflite__ErrorReporter__Report_28char_20const__2c_20____29($1, 126368, $5);
   HEAP32[$5 + 28 >> 2] = 1;
   break label$1;
  }
  HEAP32[$5 + 4 >> 2] = HEAP32[$0 + 12 >> 2] + (HEAP32[$0 + 8 >> 2] << 4);
  HEAP32[HEAP32[$5 + 4 >> 2] >> 2] = HEAP32[$5 + 16 >> 2];
  HEAP32[HEAP32[$5 + 4 >> 2] + 8 >> 2] = HEAP32[$5 + 12 >> 2];
  HEAP32[HEAP32[$5 + 4 >> 2] + 12 >> 2] = HEAP32[$5 + 8 >> 2];
  HEAP32[HEAP32[$5 + 4 >> 2] + 4 >> 2] = -1;
  HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
  HEAP8[$0 + 40 | 0] = 1;
  HEAP32[$5 + 28 >> 2] = 0;
 }
 __stack_pointer = $5 + 32 | 0;
 return HEAP32[$5 + 28 >> 2];
}

function std____2____compressed_pair_TfLitePoolParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_____compressed_pair_TfLitePoolParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28TfLitePoolParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 std____2____compressed_pair_elem_TfLitePoolParams__2c_200_2c_20false_____compressed_pair_elem_TfLitePoolParams___2c_20void__28TfLitePoolParams___29($0, HEAP32[$3 + 8 >> 2]);
 std____2____compressed_pair_elem_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_2c_201_2c_20false_____compressed_pair_elem_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_2c_20void__28tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___29($0 + 4 | 0, HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function std____2____compressed_pair_TfLiteConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_____compressed_pair_TfLiteConvParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28TfLiteConvParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 std____2____compressed_pair_elem_TfLiteConvParams__2c_200_2c_20false_____compressed_pair_elem_TfLiteConvParams___2c_20void__28TfLiteConvParams___29($0, HEAP32[$3 + 8 >> 2]);
 std____2____compressed_pair_elem_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_2c_201_2c_20false_____compressed_pair_elem_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_2c_20void__28tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___29($0 + 4 | 0, HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function tflite__MicroAllocator__PopulateTfLiteTensorFromFlatbuffer_28tflite__Model_20const__2c_20tflite__SubGraph_20const__2c_20TfLiteTensor__2c_20int_2c_20bool_29($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $6 = __stack_pointer - 32 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 28 >> 2] = $0;
 HEAP32[$6 + 24 >> 2] = $1;
 HEAP32[$6 + 20 >> 2] = $2;
 HEAP32[$6 + 16 >> 2] = $3;
 HEAP32[$6 + 12 >> 2] = $4;
 HEAP8[$6 + 11 | 0] = $5;
 $0 = HEAP32[$6 + 28 >> 2];
 $0 = tflite__internal__InitializeTfLiteTensorFromFlatbuffer_28tflite__SimpleMemoryAllocator__2c_20bool_2c_20tflite__Tensor_20const__2c_20flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer___20const__2c_20tflite__ErrorReporter__2c_20TfLiteTensor__29(HEAP32[$0 + 4 >> 2], HEAP8[$6 + 11 | 0] & 1, flatbuffers__Vector_flatbuffers__Offset_tflite__Tensor____Get_28unsigned_20int_29_20const(tflite__SubGraph__tensors_28_29_20const(HEAP32[$6 + 20 >> 2]), HEAP32[$6 + 12 >> 2]), tflite__Model__buffers_28_29_20const(HEAP32[$6 + 24 >> 2]), HEAP32[$0 + 8 >> 2], HEAP32[$6 + 16 >> 2]);
 __stack_pointer = $6 + 32 | 0;
 return $0 | 0;
}

function jspeGetBinaryExpressionPrecedence($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  label$2: {
   switch (HEAP32[$1 + 8 >> 2] - 37 | 0) {
   case 123:
   case 171:
    HEAP32[$1 + 12 >> 2] = 1;
    break label$1;

   case 121:
    HEAP32[$1 + 12 >> 2] = 2;
    break label$1;

   case 87:
    HEAP32[$1 + 12 >> 2] = 3;
    break label$1;

   case 57:
    HEAP32[$1 + 12 >> 2] = 4;
    break label$1;

   case 1:
    HEAP32[$1 + 12 >> 2] = 5;
    break label$1;

   case 101:
   case 102:
   case 103:
   case 104:
    HEAP32[$1 + 12 >> 2] = 6;
    break label$1;

   case 23:
   case 25:
   case 105:
   case 108:
   case 149:
    HEAP32[$1 + 12 >> 2] = 7;
    break label$1;

   case 148:
    HEAP32[$1 + 12 >> 2] = HEAP32[46755] & 256 ? 0 : 7;
    break label$1;

   case 106:
   case 109:
   case 110:
    HEAP32[$1 + 12 >> 2] = 8;
    break label$1;

   case 6:
   case 8:
    HEAP32[$1 + 12 >> 2] = 9;
    break label$1;

   case 0:
   case 5:
   case 10:
    HEAP32[$1 + 12 >> 2] = 10;
    break label$1;

   default:
    break label$2;
   }
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 return HEAP32[$1 + 12 >> 2];
}

function jswrap_promise_resolve($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 HEAP32[$1 + 20 >> 2] = 0;
 label$1: {
  if (_jswrap_promise_is_promise(HEAP32[$1 + 24 >> 2]) & 1) {
   HEAP32[$1 + 28 >> 2] = jsvLockAgain(HEAP32[$1 + 24 >> 2]);
   break label$1;
  }
  if (jsvIsObject(HEAP32[$1 + 24 >> 2]) & 1) {
   HEAP32[$1 + 16 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 24 >> 2], 102532);
   if (jsvIsFunction(HEAP32[$1 + 16 >> 2]) & 1) {
    HEAP32[$1 + 20 >> 2] = jswrap_promise_constructor(HEAP32[$1 + 16 >> 2]);
   }
   jsvUnLock(HEAP32[$1 + 16 >> 2]);
   if (HEAP32[$1 + 20 >> 2]) {
    HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 20 >> 2];
    break label$1;
   }
  }
  HEAP32[$1 + 12 >> 2] = jspromise_create_prombox($1 + 20 | 0);
  if (!HEAP32[$1 + 12 >> 2]) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$1 + 20 >> 2]) {
   _jswrap_prombox_queueresolve(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 24 >> 2]);
  }
  jsvUnLock(HEAP32[$1 + 12 >> 2]);
  HEAP32[$1 + 28 >> 2] = jsvLockAgainSafe(HEAP32[$1 + 20 >> 2]);
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function nomatchfound($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 144 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 136 >> 2] = $0;
 label$1: {
  if (!(jspCheckStackPosition() & 1)) {
   HEAP32[$2 + 140 >> 2] = 0;
   break label$1;
  }
  while (1) {
   $0 = 0;
   $0 = HEAP8[HEAP32[$2 + 136 >> 2]] ? HEAP8[HEAP32[$2 + 136 >> 2]] != 124 : $0;
   if ($0) {
    if (HEAP8[HEAP32[$2 + 136 >> 2]] == 92) {
     HEAP32[$2 + 136 >> 2] = HEAP32[$2 + 136 >> 2] + 1;
     if (!HEAPU8[HEAP32[$2 + 136 >> 2]]) {
      HEAP32[$2 + 140 >> 2] = 0;
      break label$1;
     }
    }
    HEAP32[$2 + 136 >> 2] = HEAP32[$2 + 136 >> 2] + 1;
    continue;
   }
   break;
  }
  if (HEAP8[HEAP32[$2 + 136 >> 2]] != 124) {
   HEAP32[$2 + 140 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 136 >> 2] = HEAP32[$2 + 136 >> 2] + 1;
  jsvStringIteratorNew($2 + 96 | 0, HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2]);
  $0 = HEAP32[$2 + 136 >> 2];
  __memcpy($2 + 4 | 0, $1, 88);
  HEAP32[$2 + 92 >> 2] = matchhere($0, $2 + 96 | 0, $2 + 4 | 0);
  jsvStringIteratorFree_9($2 + 96 | 0);
  HEAP32[$2 + 140 >> 2] = HEAP32[$2 + 92 >> 2];
 }
 __stack_pointer = $2 + 144 | 0;
 return HEAP32[$2 + 140 >> 2];
}

function jswrap_heatshrink_compress($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 128 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 120 >> 2] = $0;
 label$1: {
  if (!(jsvIsIterable(HEAP32[$1 + 120 >> 2]) & 1)) {
   HEAP32[$1 >> 2] = HEAP32[$1 + 120 >> 2];
   jsExceptionHere(3, 99110, $1);
   HEAP32[$1 + 124 >> 2] = 0;
   break label$1;
  }
  jsvIteratorNew($1 + 56 | 0, HEAP32[$1 + 120 >> 2], 1);
  HEAP32[$1 + 12 >> 2] = heatshrink_encode_cb(628, $1 + 56 | 0, 0, 0);
  jsvIteratorFree($1 + 56 | 0);
  HEAP32[$1 + 8 >> 2] = jsvNewStringOfLength(HEAP32[$1 + 12 >> 2], 0);
  if (!HEAP32[$1 + 8 >> 2]) {
   jsError(97823, 0);
   HEAP32[$1 + 124 >> 2] = 0;
   break label$1;
  }
  jsvIteratorNew($1 + 56 | 0, HEAP32[$1 + 120 >> 2], 1);
  jsvStringIteratorNew($1 + 16 | 0, HEAP32[$1 + 8 >> 2], 0);
  heatshrink_encode_cb(628, $1 + 56 | 0, 629, $1 + 16 | 0);
  jsvStringIteratorFree_15($1 + 16 | 0);
  jsvIteratorFree($1 + 56 | 0);
  HEAP32[$1 + 4 >> 2] = jsvNewArrayBufferFromString(HEAP32[$1 + 8 >> 2], 0);
  jsvUnLock(HEAP32[$1 + 8 >> 2]);
  HEAP32[$1 + 124 >> 2] = HEAP32[$1 + 4 >> 2];
 }
 __stack_pointer = $1 + 128 | 0;
 return HEAP32[$1 + 124 >> 2];
}

function tflite__SimpleMemoryAllocator__AllocateFromTail_28unsigned_20long_2c_20unsigned_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 40 >> 2] = $0;
 HEAP32[$3 + 36 >> 2] = $1;
 HEAP32[$3 + 32 >> 2] = $2;
 $0 = HEAP32[$3 + 40 >> 2];
 HEAP32[$3 + 28 >> 2] = tflite__AlignPointerDown_28unsigned_20char__2c_20unsigned_20long_29(HEAP32[$0 + 20 >> 2] - HEAP32[$3 + 36 >> 2] | 0, HEAP32[$3 + 32 >> 2]);
 label$1: {
  if (HEAPU32[$3 + 28 >> 2] < HEAPU32[$0 + 16 >> 2]) {
   HEAP32[$3 + 24 >> 2] = HEAP32[$0 + 16 >> 2] - HEAP32[$3 + 28 >> 2];
   $0 = HEAP32[$0 + 4 >> 2];
   $1 = HEAP32[$3 + 36 >> 2];
   $2 = HEAP32[$3 + 36 >> 2];
   $4 = HEAP32[$3 + 24 >> 2];
   HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 24 >> 2];
   HEAP32[$3 + 4 >> 2] = $2 - $4;
   HEAP32[$3 >> 2] = $1;
   tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 97220, $3);
   HEAP32[$3 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$0 + 20 >> 2] = HEAP32[$3 + 28 >> 2];
  HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 28 >> 2];
 }
 __stack_pointer = $3 + 48 | 0;
 return HEAP32[$3 + 44 >> 2];
}

function jswrap_heatshrink_decompress($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 128 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 120 >> 2] = $0;
 label$1: {
  if (!(jsvIsIterable(HEAP32[$1 + 120 >> 2]) & 1)) {
   HEAP32[$1 >> 2] = HEAP32[$1 + 120 >> 2];
   jsExceptionHere(3, 99110, $1);
   HEAP32[$1 + 124 >> 2] = 0;
   break label$1;
  }
  jsvIteratorNew($1 + 56 | 0, HEAP32[$1 + 120 >> 2], 1);
  HEAP32[$1 + 12 >> 2] = heatshrink_decode(628, $1 + 56 | 0, 0);
  jsvIteratorFree($1 + 56 | 0);
  HEAP32[$1 + 8 >> 2] = jsvNewStringOfLength(HEAP32[$1 + 12 >> 2], 0);
  if (!HEAP32[$1 + 8 >> 2]) {
   jsError(97823, 0);
   HEAP32[$1 + 124 >> 2] = 0;
   break label$1;
  }
  jsvIteratorNew($1 + 56 | 0, HEAP32[$1 + 120 >> 2], 1);
  jsvStringIteratorNew($1 + 16 | 0, HEAP32[$1 + 8 >> 2], 0);
  heatshrink_decode_cb(628, $1 + 56 | 0, 629, $1 + 16 | 0);
  jsvStringIteratorFree_15($1 + 16 | 0);
  jsvIteratorFree($1 + 56 | 0);
  HEAP32[$1 + 4 >> 2] = jsvNewArrayBufferFromString(HEAP32[$1 + 8 >> 2], 0);
  jsvUnLock(HEAP32[$1 + 8 >> 2]);
  HEAP32[$1 + 124 >> 2] = HEAP32[$1 + 4 >> 2];
 }
 __stack_pointer = $1 + 128 | 0;
 return HEAP32[$1 + 124 >> 2];
}

function jswrap_graphics_setPixel($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 112 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 104 >> 2] = $0;
 HEAP32[$4 + 100 >> 2] = $1;
 HEAP32[$4 + 96 >> 2] = $2;
 HEAP32[$4 + 92 >> 2] = $3;
 label$1: {
  if (!(graphicsGetFromVar($4 + 16 | 0, HEAP32[$4 + 104 >> 2]) & 1)) {
   HEAP32[$4 + 108 >> 2] = 0;
   break label$1;
  }
  HEAP32[$4 + 12 >> 2] = HEAPU8[$4 + 33 | 0] | HEAPU8[$4 + 34 | 0] << 8 | (HEAPU8[$4 + 35 | 0] << 16 | HEAPU8[$4 + 36 | 0] << 24);
  if (!(jsvIsUndefined(HEAP32[$4 + 92 >> 2]) & 1)) {
   HEAP32[$4 + 12 >> 2] = jswrap_graphics_toColor(HEAP32[$4 + 104 >> 2], HEAP32[$4 + 92 >> 2], 0, 0);
  }
  graphicsSetPixel($4 + 16 | 0, HEAP32[$4 + 100 >> 2], HEAP32[$4 + 96 >> 2], HEAP32[$4 + 12 >> 2]);
  $0 = HEAP32[$4 + 100 >> 2];
  HEAP8[$4 + 43 | 0] = $0;
  HEAP8[$4 + 44 | 0] = $0 >>> 8;
  $0 = HEAP32[$4 + 96 >> 2];
  HEAP8[$4 + 45 | 0] = $0;
  HEAP8[$4 + 46 | 0] = $0 >>> 8;
  graphicsSetVar($4 + 16 | 0);
  HEAP32[$4 + 108 >> 2] = jsvLockAgain(HEAP32[$4 + 104 >> 2]);
 }
 __stack_pointer = $4 + 112 | 0;
 return HEAP32[$4 + 108 >> 2];
}

function jspeFunctionArguments($0) {
 var $1 = 0;
 $1 = __stack_pointer - 96 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 88 >> 2] = $0;
 label$1: {
  if (!(jslMatch(40) & 1)) {
   HEAP8[$1 + 95 | 0] = 0;
   break label$1;
  }
  while (1) {
   if (HEAP16[HEAP32[38615] + 2 >> 1] != 41) {
    if (HEAP32[$1 + 88 >> 2]) {
     HEAP8[$1 + 16 | 0] = 255;
     strcpy($1 + 17 | 0, jslGetTokenValueAsString());
     HEAP32[$1 + 12 >> 2] = jsvAddNamedChild(HEAP32[$1 + 88 >> 2], 0, $1 + 16 | 0);
     if (!HEAP32[$1 + 12 >> 2]) {
      jspSetError(0);
      HEAP8[$1 + 95 | 0] = 0;
      break label$1;
     }
     HEAP32[$1 + 12 >> 2] = jsvMakeFunctionParameter(HEAP32[$1 + 12 >> 2]);
     jsvUnLock(HEAP32[$1 + 12 >> 2]);
    }
    if (!(jslMatch(128) & 1)) {
     HEAP8[$1 + 95 | 0] = 0;
     break label$1;
    }
    if (HEAP16[HEAP32[38615] + 2 >> 1] != 41) {
     if (!(jslMatch(44) & 1)) {
      HEAP8[$1 + 95 | 0] = 0;
      break label$1;
     }
    }
    continue;
   }
   break;
  }
  if (!(jslMatch(41) & 1)) {
   HEAP8[$1 + 95 | 0] = 0;
   break label$1;
  }
  HEAP8[$1 + 95 | 0] = 1;
 }
 __stack_pointer = $1 + 96 | 0;
 return HEAP8[$1 + 95 | 0] & 1;
}

function jshSetFlowControlXON($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 if (!(HEAPU8[$2 + 15 | 0] < 21 | HEAPU8[$2 + 15 | 0] > 22)) {
  if (!(HEAP8[$2 + 14 | 0] & 1)) {
   HEAP8[188992] = 1;
  }
  HEAP32[$2 + 8 >> 2] = HEAPU8[$2 + 15 | 0] - 21;
  HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2] + 187126;
  if (HEAPU8[HEAP32[$2 + 4 >> 2]] & 8) {
   label$4: {
    if (HEAP8[$2 + 14 | 0] & 1) {
     if ((HEAPU8[HEAP32[$2 + 4 >> 2]] & 6) == 4) {
      jshInterruptOff();
      $0 = HEAP32[$2 + 4 >> 2];
      HEAP8[$0 | 0] = HEAPU8[$0 | 0] | 2;
      jshInterruptOn();
      jshUSARTKick(HEAPU8[$2 + 15 | 0]);
     }
     break label$4;
    }
    if (!(HEAPU8[HEAP32[$2 + 4 >> 2]] & 5)) {
     jshInterruptOff();
     $0 = HEAP32[$2 + 4 >> 2];
     HEAP8[$0 | 0] = HEAPU8[$0 | 0] | 1;
     jshInterruptOn();
     jshUSARTKick(HEAPU8[$2 + 15 | 0]);
    }
   }
  }
  HEAP8[$2 + 3 | 0] = HEAPU8[HEAP32[$2 + 8 >> 2] + 187128 | 0];
  if (HEAPU8[$2 + 3 | 0] != 255) {
   jshPinSetValue(HEAPU8[$2 + 3 | 0], (HEAPU8[$2 + 14 | 0] ^ -1) & 1);
  }
 }
 __stack_pointer = $2 + 16 | 0;
}

function jshGetPinFromString($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!(!HEAP8[HEAP32[$1 + 8 >> 2] + 1 | 0] | !(HEAP8[HEAP32[$1 + 8 >> 2]] <= 73 & HEAP8[HEAP32[$1 + 8 >> 2]] >= 65) & HEAP8[HEAP32[$1 + 8 >> 2]] != 86)) {
   HEAP32[$1 + 4 >> 2] = HEAP8[HEAP32[$1 + 8 >> 2]] == 86 ? 10 : HEAP8[HEAP32[$1 + 8 >> 2]] + -64 | 0;
   HEAP32[$1 >> 2] = -1;
   if (!(HEAP8[HEAP32[$1 + 8 >> 2] + 1 | 0] < 48 | HEAP8[HEAP32[$1 + 8 >> 2] + 1 | 0] > 57)) {
    label$8: {
     if (!HEAPU8[HEAP32[$1 + 8 >> 2] + 2 | 0]) {
      HEAP32[$1 >> 2] = HEAP8[HEAP32[$1 + 8 >> 2] + 1 | 0] - 48;
      break label$8;
     }
     if (!(HEAPU8[HEAP32[$1 + 8 >> 2] + 3 | 0] ? 1 : HEAP8[HEAP32[$1 + 8 >> 2] + 2 | 0] < 48 | HEAP8[HEAP32[$1 + 8 >> 2] + 2 | 0] > 57)) {
      HEAP32[$1 >> 2] = (HEAP8[HEAP32[$1 + 8 >> 2] + 2 | 0] + Math_imul(HEAP8[HEAP32[$1 + 8 >> 2] + 1 | 0], 10) | 0) - 528;
     }
    }
   }
   if (HEAP32[$1 + 4 >> 2] == 4 & HEAP32[$1 >> 2] < 32 & HEAP32[$1 >> 2] >= 0) {
    HEAP8[$1 + 15 | 0] = HEAP32[$1 >> 2];
    break label$1;
   }
  }
  HEAP8[$1 + 15 | 0] = 255;
 }
 return HEAPU8[$1 + 15 | 0];
}

function jsvStringTrimRight($0) {
 var $1 = 0;
 $1 = __stack_pointer - 96 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 92 >> 2] = $0;
 HEAP32[$1 + 12 >> 2] = jsvNewFromEmptyString_1();
 jsvStringIteratorNew($1 + 56 | 0, HEAP32[$1 + 92 >> 2], 0);
 jsvStringIteratorNew($1 + 16 | 0, HEAP32[$1 + 12 >> 2], 0);
 HEAP32[$1 + 8 >> 2] = 0;
 while (1) {
  if (jsvStringIteratorHasChar_1($1 + 56 | 0) & 1) {
   HEAP8[$1 + 7 | 0] = jsvStringIteratorGetCharAndNext($1 + 56 | 0);
   label$3: {
    if (HEAP8[$1 + 7 | 0] == 32) {
     HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
     break label$3;
    }
    label$5: {
     if (HEAP8[$1 + 7 | 0] == 10) {
      HEAP32[$1 + 8 >> 2] = 0;
      break label$5;
     }
     while (1) {
      if (HEAP32[$1 + 8 >> 2] > 0) {
       jsvStringIteratorAppend($1 + 16 | 0, 32);
       HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] - 1;
       continue;
      }
      break;
     }
    }
    jsvStringIteratorAppend($1 + 16 | 0, HEAP8[$1 + 7 | 0]);
   }
   continue;
  }
  break;
 }
 jsvStringIteratorFree_1($1 + 56 | 0);
 jsvStringIteratorFree_1($1 + 16 | 0);
 __stack_pointer = $1 + 96 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsi2cRead($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 48 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 40 >> 2] = $0;
 HEAP8[$5 + 39 | 0] = $1;
 HEAP32[$5 + 32 >> 2] = $2;
 HEAP32[$5 + 28 >> 2] = $3;
 HEAP8[$5 + 27 | 0] = $4;
 label$1: {
  if (!(HEAPU8[HEAP32[$5 + 40 >> 2] + 4 | 0] != 255 & HEAPU8[HEAP32[$5 + 40 >> 2] + 5 | 0] != 255)) {
   HEAP8[$5 + 47 | 0] = 0;
   break label$1;
  }
  i2c_initstruct($5 + 8 | 0, HEAP32[$5 + 40 >> 2]);
  i2c_start($5 + 8 | 0);
  if (!(i2c_wr($5 + 8 | 0, HEAPU8[$5 + 39 | 0] << 1 | 1) & 1)) {
   HEAP8[$5 + 47 | 0] = 0;
   break label$1;
  }
  HEAP32[$5 + 4 >> 2] = 0;
  while (1) {
   if (HEAP32[$5 + 4 >> 2] < HEAP32[$5 + 32 >> 2]) {
    $0 = i2c_rd($5 + 8 | 0, HEAP32[$5 + 4 >> 2] == (HEAP32[$5 + 32 >> 2] - 1 | 0));
    HEAP8[HEAP32[$5 + 28 >> 2] + HEAP32[$5 + 4 >> 2] | 0] = $0;
    HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] + 1;
    continue;
   }
   break;
  }
  if (HEAP8[$5 + 27 | 0] & 1) {
   i2c_stop($5 + 8 | 0);
  }
  HEAP8[HEAP32[$5 + 40 >> 2] + 6 | 0] = HEAP8[$5 + 10 | 0] & 1;
  HEAP8[$5 + 47 | 0] = 1;
 }
 __stack_pointer = $5 + 48 | 0;
 return HEAP8[$5 + 47 | 0] & 1;
}

function jsvGetTypeOf($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (jsvIsUndefined(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 106576;
   break label$1;
  }
  label$3: {
   label$4: {
    if (jsvIsNull(HEAP32[$1 + 8 >> 2]) & 1) {
     break label$4;
    }
    if (jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1) {
     break label$4;
    }
    if (jsvIsArray(HEAP32[$1 + 8 >> 2]) & 1) {
     break label$4;
    }
    if (!(jsvIsArrayBuffer(HEAP32[$1 + 8 >> 2]) & 1)) {
     break label$3;
    }
   }
   HEAP32[$1 + 12 >> 2] = 98063;
   break label$1;
  }
  if (jsvIsFunction(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 102344;
   break label$1;
  }
  if (jsvIsString(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 103722;
   break label$1;
  }
  if (jsvIsBoolean(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 102537;
   break label$1;
  }
  if (jsvIsNumeric(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 101568;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 110303;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function _jswrap_object_keys_or_property_names_iterator($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 label$1: {
  if (!HEAP32[$3 + 28 >> 2]) {
   break label$1;
  }
  HEAP8[$3 + 15 | 0] = HEAPU8[HEAP32[$3 + 28 >> 2] + 8 | 0];
  HEAP32[$3 + 16 >> 2] = 0;
  while (1) {
   if (HEAPU32[$3 + 16 >> 2] >= HEAPU8[$3 + 15 | 0]) {
    break label$1;
   }
   $0 = HEAP32[$3 + 28 >> 2];
   $0 = (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) + (HEAP32[$3 + 16 >> 2] << 3) | 0;
   HEAP16[$3 + 12 >> 1] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8;
   $0 = HEAP32[$3 + 28 >> 2];
   HEAP32[$3 + 8 >> 2] = jsvNewFromString(HEAPU16[$3 + 12 >> 1] + (HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24)) | 0);
   FUNCTION_TABLE[HEAP32[$3 + 24 >> 2]](HEAP32[$3 + 20 >> 2], HEAP32[$3 + 8 >> 2]);
   jsvUnLock(HEAP32[$3 + 8 >> 2]);
   HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 16 >> 2] + 1;
   continue;
  }
 }
 __stack_pointer = $3 + 32 | 0;
}

function jsspiFastSoftwareFunc($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 16 >> 2];
 HEAP32[$4 + 8 >> 2] = 0;
 while (1) {
  if (HEAPU32[$4 + 8 >> 2] < HEAPU32[$4 + 20 >> 2]) {
   HEAP32[$4 + 4 >> 2] = HEAPU8[HEAP32[$4 + 28 >> 2] + HEAP32[$4 + 8 >> 2] | 0];
   $0 = HEAP32[$4 + 12 >> 2];
   HEAP32[$4 >> 2] = (HEAPU8[$0 + 10 | 0] | HEAPU8[$0 + 11 | 0] << 8 | (HEAPU8[$0 + 12 | 0] << 16 | HEAPU8[$0 + 13 | 0] << 24)) - 1;
   while (1) {
    if (HEAP32[$4 >> 2] >= 0) {
     jshPinSetValue(HEAPU8[HEAP32[$4 + 12 >> 2] + 7 | 0], HEAP32[$4 + 4 >> 2] >> HEAP32[$4 >> 2] & 1);
     jshPinSetValue(HEAPU8[HEAP32[$4 + 12 >> 2] + 5 | 0], 1);
     jshPinSetValue(HEAPU8[HEAP32[$4 + 12 >> 2] + 5 | 0], 0);
     HEAP32[$4 >> 2] = HEAP32[$4 >> 2] - 1;
     continue;
    }
    break;
   }
   HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 8 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $4 + 32 | 0;
}

function graphicsToDeviceCoordinates16x($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 16) {
  HEAP32[$3 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] >> 2];
  HEAP32[HEAP32[$3 + 8 >> 2] >> 2] = HEAP32[HEAP32[$3 + 4 >> 2] >> 2];
  HEAP32[HEAP32[$3 + 4 >> 2] >> 2] = HEAP32[$3 >> 2];
 }
 $0 = HEAP32[$3 + 12 >> 2];
 if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 32) {
  $0 = HEAP32[$3 + 12 >> 2];
  HEAP32[HEAP32[$3 + 8 >> 2] >> 2] = ((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) - 1 << 4) - HEAP32[HEAP32[$3 + 8 >> 2] >> 2];
 }
 $0 = HEAP32[$3 + 12 >> 2];
 if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 64) {
  $0 = HEAP32[$3 + 12 >> 2];
  HEAP32[HEAP32[$3 + 4 >> 2] >> 2] = ((HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8) - 1 << 4) - HEAP32[HEAP32[$3 + 4 >> 2] >> 2];
 }
}

function TfLiteTypeGetName($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  label$2: {
   switch (HEAP32[$1 + 8 >> 2]) {
   case 0:
    HEAP32[$1 + 12 >> 2] = 109779;
    break label$1;

   case 1:
    HEAP32[$1 + 12 >> 2] = 111032;
    break label$1;

   case 7:
    HEAP32[$1 + 12 >> 2] = 110728;
    break label$1;

   case 2:
    HEAP32[$1 + 12 >> 2] = 111026;
    break label$1;

   case 3:
    HEAP32[$1 + 12 >> 2] = 110474;
    break label$1;

   case 9:
    HEAP32[$1 + 12 >> 2] = 110475;
    break label$1;

   case 4:
    HEAP32[$1 + 12 >> 2] = 110798;
    break label$1;

   case 6:
    HEAP32[$1 + 12 >> 2] = 109309;
    break label$1;

   case 8:
    HEAP32[$1 + 12 >> 2] = 110788;
    break label$1;

   case 12:
    HEAP32[$1 + 12 >> 2] = 110487;
    break label$1;

   case 5:
    HEAP32[$1 + 12 >> 2] = 109619;
    break label$1;

   case 10:
    HEAP32[$1 + 12 >> 2] = 110734;
    break label$1;

   case 11:
    HEAP32[$1 + 12 >> 2] = 110804;
    break label$1;

   default:
    break label$2;
   }
  }
  HEAP32[$1 + 12 >> 2] = 104965;
 }
 return HEAP32[$1 + 12 >> 2];
}

function std____2__unique_ptr_TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteFullyConnectedParams__28_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 $3 = TfLiteFullyConnectedParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLiteFullyConnectedParams__28_29(HEAP32[$1 >> 2]);
 tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__BuiltinDataDeleter_28tflite__BuiltinDataAllocator__29($2 + 8 | 0, HEAP32[$1 >> 2]);
 std____2__unique_ptr_TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___unique_ptr_true_2c_20void__28TfLiteFullyConnectedParams__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__2c_20true_____good_rval_ref_type_29($0, $3, $2 + 8 | 0);
 __stack_pointer = $2 + 16 | 0;
}

function jswrap_object_hasOwnProperty($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 80 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 76 >> 2] = $0;
 HEAP32[$2 + 72 >> 2] = $1;
 HEAP32[$2 + 68 >> 2] = jsvAsArrayIndex(HEAP32[$2 + 72 >> 2]);
 HEAP8[$2 + 67 | 0] = 0;
 if (jsvHasChildren(HEAP32[$2 + 76 >> 2]) & 1) {
  HEAP32[$2 + 60 >> 2] = jsvFindChildFromVar(HEAP32[$2 + 76 >> 2], HEAP32[$2 + 68 >> 2], 0);
  if (HEAP32[$2 + 60 >> 2]) {
   HEAP8[$2 + 67 | 0] = 1;
   jsvUnLock(HEAP32[$2 + 60 >> 2]);
  }
 }
 label$3: {
  if (HEAP8[$2 + 67 | 0] & 1) {
   break label$3;
  }
  if (jsvIsObject(HEAP32[$2 + 76 >> 2]) & 1) {
   break label$3;
  }
  HEAP32[$2 + 56 >> 2] = jswGetSymbolListForObject(HEAP32[$2 + 76 >> 2]);
  if (HEAP32[$2 + 56 >> 2]) {
   jsvGetString(HEAP32[$2 + 68 >> 2], $2 + 16 | 0, 32);
   HEAP32[$2 + 12 >> 2] = jswBinarySearch(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 76 >> 2], $2 + 16 | 0);
   if (HEAP32[$2 + 12 >> 2]) {
    HEAP8[$2 + 67 | 0] = 1;
   }
   jsvUnLock(HEAP32[$2 + 12 >> 2]);
  }
 }
 jsvUnLock(HEAP32[$2 + 68 >> 2]);
 __stack_pointer = $2 + 80 | 0;
 return HEAP8[$2 + 67 | 0] & 1;
}

function jswrap_array_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 label$1: {
  if ((jsvGetArrayLength(HEAP32[$1 + 24 >> 2]) | 0) == 1) {
   HEAP32[$1 + 20 >> 2] = jsvSkipNameAndUnLock(jsvGetArrayItem(HEAP32[$1 + 24 >> 2], 0));
   if (jsvIsNumeric(HEAP32[$1 + 20 >> 2]) & 1) {
    HEAPF64[$1 + 8 >> 3] = jsvGetFloat(HEAP32[$1 + 20 >> 2]);
    HEAP32[$1 + 4 >> 2] = jsvGetInteger(HEAP32[$1 + 20 >> 2]);
    jsvUnLock(HEAP32[$1 + 20 >> 2]);
    if (!(HEAP32[$1 + 4 >> 2] >= 0 & HEAPF64[$1 + 8 >> 3] == +HEAP32[$1 + 4 >> 2])) {
     jsExceptionHere(1, 103344, 0);
     HEAP32[$1 + 28 >> 2] = 0;
     break label$1;
    }
    HEAP32[$1 >> 2] = jsvNewEmptyArray();
    if (!HEAP32[$1 >> 2]) {
     HEAP32[$1 + 28 >> 2] = 0;
     break label$1;
    }
    jsvSetArrayLength(HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2], 0);
    HEAP32[$1 + 28 >> 2] = HEAP32[$1 >> 2];
    break label$1;
   }
   jsvUnLock(HEAP32[$1 + 20 >> 2]);
  }
  HEAP32[$1 + 28 >> 2] = jsvLockAgain(HEAP32[$1 + 24 >> 2]);
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function graphicsToDeviceCoordinates($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 16) {
  HEAP32[$3 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] >> 2];
  HEAP32[HEAP32[$3 + 8 >> 2] >> 2] = HEAP32[HEAP32[$3 + 4 >> 2] >> 2];
  HEAP32[HEAP32[$3 + 4 >> 2] >> 2] = HEAP32[$3 >> 2];
 }
 $0 = HEAP32[$3 + 12 >> 2];
 if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 32) {
  $0 = HEAP32[$3 + 12 >> 2];
  HEAP32[HEAP32[$3 + 8 >> 2] >> 2] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) - (HEAP32[HEAP32[$3 + 8 >> 2] >> 2] + 1 | 0);
 }
 $0 = HEAP32[$3 + 12 >> 2];
 if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 64) {
  $0 = HEAP32[$3 + 12 >> 2];
  HEAP32[HEAP32[$3 + 4 >> 2] >> 2] = (HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8) - (HEAP32[HEAP32[$3 + 4 >> 2] >> 2] + 1 | 0);
 }
}

function deviceToGraphicsCoordinates($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 32) {
  $0 = HEAP32[$3 + 12 >> 2];
  HEAP32[HEAP32[$3 + 8 >> 2] >> 2] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) - (HEAP32[HEAP32[$3 + 8 >> 2] >> 2] + 1 | 0);
 }
 $0 = HEAP32[$3 + 12 >> 2];
 if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 64) {
  $0 = HEAP32[$3 + 12 >> 2];
  HEAP32[HEAP32[$3 + 4 >> 2] >> 2] = (HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8) - (HEAP32[HEAP32[$3 + 4 >> 2] >> 2] + 1 | 0);
 }
 $0 = HEAP32[$3 + 12 >> 2];
 if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 16) {
  HEAP32[$3 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] >> 2];
  HEAP32[HEAP32[$3 + 8 >> 2] >> 2] = HEAP32[HEAP32[$3 + 4 >> 2] >> 2];
  HEAP32[HEAP32[$3 + 4 >> 2] >> 2] = HEAP32[$3 >> 2];
 }
}

function tflite__SimpleMemoryAllocator__AllocateTemp_28unsigned_20long_2c_20unsigned_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 40 >> 2] = $0;
 HEAP32[$3 + 36 >> 2] = $1;
 HEAP32[$3 + 32 >> 2] = $2;
 $0 = HEAP32[$3 + 40 >> 2];
 HEAP32[$3 + 28 >> 2] = tflite__AlignPointerUp_28unsigned_20char__2c_20unsigned_20long_29(HEAP32[$0 + 24 >> 2], HEAP32[$3 + 32 >> 2]);
 HEAP32[$3 + 24 >> 2] = HEAP32[$0 + 20 >> 2] - HEAP32[$3 + 28 >> 2];
 label$1: {
  if (HEAPU32[$3 + 24 >> 2] < HEAPU32[$3 + 36 >> 2]) {
   $0 = HEAP32[$0 + 4 >> 2];
   $1 = HEAP32[$3 + 36 >> 2];
   $2 = HEAP32[$3 + 24 >> 2];
   HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 36 >> 2] - HEAP32[$3 + 24 >> 2];
   HEAP32[$3 + 4 >> 2] = $2;
   HEAP32[$3 >> 2] = $1;
   tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 97147, $3);
   HEAP32[$3 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$0 + 24 >> 2] = HEAP32[$3 + 28 >> 2] + HEAP32[$3 + 36 >> 2];
  HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 28 >> 2];
 }
 __stack_pointer = $3 + 48 | 0;
 return HEAP32[$3 + 44 >> 2];
}

function std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteDepthwiseConvParams__28_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 $3 = TfLiteDepthwiseConvParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLiteDepthwiseConvParams__28_29(HEAP32[$1 >> 2]);
 tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__BuiltinDataDeleter_28tflite__BuiltinDataAllocator__29($2 + 8 | 0, HEAP32[$1 >> 2]);
 std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___unique_ptr_true_2c_20void__28TfLiteDepthwiseConvParams__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__2c_20true_____good_rval_ref_type_29($0, $3, $2 + 8 | 0);
 __stack_pointer = $2 + 16 | 0;
}

function jswrap_dataview_set($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 96 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 92 >> 2] = $0;
 HEAP8[$5 + 91 | 0] = $1;
 HEAP32[$5 + 84 >> 2] = $2;
 HEAP32[$5 + 80 >> 2] = $3;
 HEAP8[$5 + 79 | 0] = $4;
 HEAP32[$5 + 72 >> 2] = jsvObjectGetChildIfExists(HEAP32[$5 + 92 >> 2], 101361);
 label$1: {
  if (!(jsvIsArrayBuffer(HEAP32[$5 + 72 >> 2]) & 1)) {
   jsvUnLock(HEAP32[$5 + 72 >> 2]);
   break label$1;
  }
  HEAP32[$5 + 84 >> 2] = jsvObjectGetIntegerChild(HEAP32[$5 + 92 >> 2], 98041) + HEAP32[$5 + 84 >> 2];
  HEAP32[$5 + 68 >> 2] = HEAPU8[$5 + 91 | 0] & 15;
  HEAP32[$5 + 64 >> 2] = jswrap_typedarray_constructor(HEAPU8[$5 + 91 | 0], HEAP32[$5 + 72 >> 2], HEAP32[$5 + 84 >> 2], HEAP32[$5 + 68 >> 2]);
  jsvUnLock(HEAP32[$5 + 72 >> 2]);
  if (!HEAP32[$5 + 64 >> 2]) {
   break label$1;
  }
  jsvArrayBufferIteratorNew($5 + 8 | 0, HEAP32[$5 + 64 >> 2], 0);
  jsvArrayBufferIteratorSetValue($5 + 8 | 0, HEAP32[$5 + 80 >> 2], (HEAPU8[$5 + 79 | 0] ^ -1) & 1);
  jsvArrayBufferIteratorFree($5 + 8 | 0);
  jsvUnLock(HEAP32[$5 + 64 >> 2]);
 }
 __stack_pointer = $5 + 96 | 0;
}

function jswrap_graphics_stringMetrics($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 128 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 120 >> 2] = $0;
 HEAP32[$2 + 116 >> 2] = $1;
 label$1: {
  if (!(graphicsGetFromVar($2 + 40 | 0, HEAP32[$2 + 120 >> 2]) & 1)) {
   HEAP32[$2 + 124 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = jsvNewObject();
  if (HEAP32[$2 + 12 >> 2]) {
   _jswrap_graphics_stringMetrics($2 + 40 | 0, HEAP32[$2 + 116 >> 2], -1, $2 + 16 | 0);
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 12 >> 2], 103393, jsvNewFromInteger(HEAP32[$2 + 16 >> 2]));
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 12 >> 2], 97915, jsvNewFromInteger(HEAP32[$2 + 20 >> 2]));
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 12 >> 2], 100196, jsvNewFromBool(HEAP8[$2 + 24 | 0] & 1));
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 12 >> 2], 97621, jsvNewFromInteger(HEAP32[$2 + 28 >> 2]));
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 12 >> 2], 97922, jsvNewFromInteger(HEAP32[$2 + 32 >> 2]));
  }
  HEAP32[$2 + 124 >> 2] = HEAP32[$2 + 12 >> 2];
 }
 __stack_pointer = $2 + 128 | 0;
 return HEAP32[$2 + 124 >> 2];
}

function i2c_start($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP8[HEAP32[$1 + 12 >> 2] + 2 | 0] & 1) {
  i2c_pin_wr1(HEAPU8[HEAP32[$1 + 12 >> 2] + 1 | 0]);
  dly(HEAP32[$1 + 12 >> 2]);
  i2c_pin_wr1(HEAPU8[HEAP32[$1 + 12 >> 2]]);
  HEAP32[$1 + 8 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2];
  while (1) {
   $0 = 0;
   if (!(jshPinGetValue(HEAPU8[HEAP32[$1 + 12 >> 2]]) & 1)) {
    $0 = HEAP32[$1 + 8 >> 2] != 0;
   }
   if ($0) {
    HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] - 1;
    continue;
   }
   break;
  }
  if (!(HEAP32[$1 + 8 >> 2] | !HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2])) {
   err(125936);
  }
  dly(HEAP32[$1 + 12 >> 2]);
 }
 label$6: {
  if (!HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2]) {
   break label$6;
  }
  if (jshPinGetValue(HEAPU8[HEAP32[$1 + 12 >> 2] + 1 | 0]) & 1) {
   break label$6;
  }
  err(125952);
 }
 i2c_pin_wr0(HEAPU8[HEAP32[$1 + 12 >> 2] + 1 | 0]);
 dly(HEAP32[$1 + 12 >> 2]);
 i2c_pin_wr0(HEAPU8[HEAP32[$1 + 12 >> 2]]);
 dly(HEAP32[$1 + 12 >> 2]);
 HEAP8[HEAP32[$1 + 12 >> 2] + 2 | 0] = 1;
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_string_slice($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 if (jsvIsUndefined(HEAP32[$3 + 16 >> 2]) & 1) {
  $0 = 2147483647;
 } else {
  $0 = jsvGetInteger(HEAP32[$3 + 16 >> 2]);
 }
 HEAP32[$3 + 12 >> 2] = $0;
 if (HEAP32[$3 + 20 >> 2] < 0) {
  HEAP32[$3 + 20 >> 2] = jsvGetStringLength(HEAP32[$3 + 24 >> 2]) + HEAP32[$3 + 20 >> 2];
 }
 if (HEAP32[$3 + 12 >> 2] < 0) {
  HEAP32[$3 + 12 >> 2] = jsvGetStringLength(HEAP32[$3 + 24 >> 2]) + HEAP32[$3 + 12 >> 2];
 }
 if (HEAP32[$3 + 20 >> 2] < 0) {
  HEAP32[$3 + 20 >> 2] = 0;
 }
 if (HEAP32[$3 + 12 >> 2] < 0) {
  HEAP32[$3 + 12 >> 2] = 0;
 }
 label$7: {
  if (HEAP32[$3 + 12 >> 2] <= HEAP32[$3 + 20 >> 2]) {
   HEAP32[$3 + 28 >> 2] = jsvNewFromEmptyString_8();
   break label$7;
  }
  HEAP32[$3 + 28 >> 2] = jsvNewFromStringVar(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], HEAP32[$3 + 12 >> 2] - HEAP32[$3 + 20 >> 2] | 0);
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function jsiConsolePrintStringVarUntilEOL($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer + -64 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 60 >> 2] = $0;
 HEAP32[$4 + 56 >> 2] = $1;
 HEAP32[$4 + 52 >> 2] = $2;
 HEAP8[$4 + 51 | 0] = $3;
 HEAP32[$4 + 44 >> 2] = 0;
 jsvStringIteratorNew($4 + 8 | 0, HEAP32[$4 + 60 >> 2], HEAP32[$4 + 56 >> 2]);
 while (1) {
  $0 = 0;
  if (jsvStringIteratorHasChar_5($4 + 8 | 0) & 1) {
   $0 = HEAPU32[$4 + 44 >> 2] < HEAPU32[$4 + 52 >> 2];
  }
  label$3: {
   if (!$0) {
    break label$3;
   }
   HEAP8[$4 + 7 | 0] = jsvStringIteratorGetCharAndNext($4 + 8 | 0);
   if (HEAP8[$4 + 7 | 0] == 10) {
    break label$3;
   }
   jsiConsolePrintChar(HEAP8[$4 + 7 | 0]);
   HEAP32[$4 + 44 >> 2] = HEAP32[$4 + 44 >> 2] + 1;
   continue;
  }
  break;
 }
 jsvStringIteratorFree_5($4 + 8 | 0);
 if (HEAP8[$4 + 51 | 0] & 1) {
  jsiConsolePrintChar(32);
  HEAP32[$4 + 44 >> 2] = HEAP32[$4 + 44 >> 2] + 1;
  while (1) {
   $0 = HEAP32[$4 + 44 >> 2];
   HEAP32[$4 + 44 >> 2] = $0 - 1;
   if ($0) {
    jsiConsolePrintChar(8);
    continue;
   }
   break;
  }
 }
 __stack_pointer = $4 - -64 | 0;
}

function jswrap_object_length($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  label$2: {
   if (jsvIsArray(HEAP32[$1 + 8 >> 2]) & 1) {
    HEAP32[$1 + 4 >> 2] = jsvGetArrayLength(HEAP32[$1 + 8 >> 2]);
    break label$2;
   }
   label$4: {
    if (jsvIsArrayBuffer(HEAP32[$1 + 8 >> 2]) & 1) {
     HEAP32[$1 + 4 >> 2] = jsvGetArrayBufferLength(HEAP32[$1 + 8 >> 2]);
     break label$4;
    }
    label$6: {
     if (jsvIsString(HEAP32[$1 + 8 >> 2]) & 1) {
      HEAP32[$1 + 4 >> 2] = jsvGetStringLength(HEAP32[$1 + 8 >> 2]);
      break label$6;
     }
     label$8: {
      if (jsvIsFunction(HEAP32[$1 + 8 >> 2]) & 1) {
       HEAP32[$1 >> 2] = jsvGetFunctionArgumentLength(HEAP32[$1 + 8 >> 2]);
       HEAP32[$1 + 4 >> 2] = jsvGetArrayLength(HEAP32[$1 >> 2]);
       jsvUnLock(HEAP32[$1 >> 2]);
       break label$8;
      }
      HEAP32[$1 + 12 >> 2] = 0;
      break label$1;
     }
    }
   }
  }
  HEAP32[$1 + 12 >> 2] = jsvNewFromInteger(HEAP32[$1 + 4 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvIteratorGetFloatValue($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 4 >> 2] = $0;
 label$1: {
  label$2: {
   switch (HEAP32[HEAP32[$1 + 4 >> 2] >> 2] - 2 | 0) {
   case 2:
    label$6: {
     if (!(jsvIsIntegerish(HEAP32[HEAP32[$1 + 4 >> 2] + 4 >> 2]) & 1)) {
      break label$6;
     }
     if ((jsvGetInteger(HEAP32[HEAP32[$1 + 4 >> 2] + 4 >> 2]) | 0) != HEAP32[HEAP32[$1 + 4 >> 2] + 12 >> 2]) {
      break label$6;
     }
     HEAPF64[$1 + 8 >> 3] = jsvGetFloatAndUnLock(jsvObjectIteratorGetValue_1(HEAP32[$1 + 4 >> 2] + 4 | 0));
     break label$1;
    }
    HEAPF64[$1 + 8 >> 3] = nan;
    break label$1;

   case 0:
    HEAPF64[$1 + 8 >> 3] = jsvGetFloatAndUnLock(jsvObjectIteratorGetValue_1(HEAP32[$1 + 4 >> 2] + 4 | 0));
    break label$1;

   case 1:
    HEAPF64[$1 + 8 >> 3] = jsvArrayBufferIteratorGetFloatValue(HEAP32[$1 + 4 >> 2] + 4 | 0);
    break label$1;

   default:
    break label$2;
   }
  }
  HEAPF64[$1 + 8 >> 3] = jsvIteratorGetIntegerValue(HEAP32[$1 + 4 >> 2]) | 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAPF64[$1 + 8 >> 3];
}

function std____2__unique_ptr_TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___reset_28TfLiteFullyConnectedParams__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = HEAP32[std____2____compressed_pair_TfLiteFullyConnectedParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2];
 $1 = HEAP32[$2 + 8 >> 2];
 HEAP32[std____2____compressed_pair_TfLiteFullyConnectedParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2] = $1;
 if (HEAP32[$2 + 4 >> 2]) {
  tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__operator_28_29_28void__29(std____2____compressed_pair_TfLiteFullyConnectedParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___second_28_29($0), HEAP32[$2 + 4 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
}

function jsfRemoveCodeFromFlash() {
 var $0 = 0, $1 = 0, $2 = 0;
 $0 = __stack_pointer - 128 | 0;
 __stack_pointer = $0;
 jsiConsolePrintString(112035);
 jsfNameFromString($0 + 96 | 0, 105438);
 HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 120 >> 2];
 $1 = HEAP32[$0 + 116 >> 2];
 $2 = HEAP32[$0 + 112 >> 2];
 HEAP32[$0 + 16 >> 2] = $2;
 HEAP32[$0 + 20 >> 2] = $1;
 $2 = HEAP32[$0 + 108 >> 2];
 $1 = HEAP32[$0 + 104 >> 2];
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = $2;
 $1 = HEAP32[$0 + 100 >> 2];
 $2 = HEAP32[$0 + 96 >> 2];
 HEAP32[$0 >> 2] = $2;
 HEAP32[$0 + 4 >> 2] = $1;
 jsfEraseFile($0);
 jsfNameFromString($0 - -64 | 0, 97488);
 HEAP32[$0 + 56 >> 2] = HEAP32[$0 + 88 >> 2];
 $2 = HEAP32[$0 + 84 >> 2];
 $1 = HEAP32[$0 + 80 >> 2];
 HEAP32[$0 + 48 >> 2] = $1;
 HEAP32[$0 + 52 >> 2] = $2;
 $1 = HEAP32[$0 + 76 >> 2];
 $2 = HEAP32[$0 + 72 >> 2];
 HEAP32[$0 + 40 >> 2] = $2;
 HEAP32[$0 + 44 >> 2] = $1;
 $2 = HEAP32[$0 + 68 >> 2];
 $1 = HEAP32[$0 + 64 >> 2];
 HEAP32[$0 + 32 >> 2] = $1;
 HEAP32[$0 + 36 >> 2] = $2;
 jsfEraseFile($0 + 32 | 0);
 jsiConsolePrintString(129578);
 __stack_pointer = $0 + 128 | 0;
}

function jsfFlashContainsCode() {
 var $0 = 0, $1 = 0, $2 = 0;
 $0 = __stack_pointer - 128 | 0;
 __stack_pointer = $0;
 jsfNameFromString($0 + 96 | 0, 105438);
 HEAP32[$0 + 56 >> 2] = HEAP32[$0 + 120 >> 2];
 $2 = HEAP32[$0 + 116 >> 2];
 $1 = HEAP32[$0 + 112 >> 2];
 HEAP32[$0 + 48 >> 2] = $1;
 HEAP32[$0 + 52 >> 2] = $2;
 $1 = HEAP32[$0 + 108 >> 2];
 $2 = HEAP32[$0 + 104 >> 2];
 HEAP32[$0 + 40 >> 2] = $2;
 HEAP32[$0 + 44 >> 2] = $1;
 $2 = HEAP32[$0 + 100 >> 2];
 $1 = HEAP32[$0 + 96 >> 2];
 HEAP32[$0 + 32 >> 2] = $1;
 HEAP32[$0 + 36 >> 2] = $2;
 $1 = 1;
 if (!jsfFindFile($0 + 32 | 0, 0)) {
  jsfNameFromString($0 - -64 | 0, 97488);
  HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 88 >> 2];
  $1 = HEAP32[$0 + 84 >> 2];
  $2 = HEAP32[$0 + 80 >> 2];
  HEAP32[$0 + 16 >> 2] = $2;
  HEAP32[$0 + 20 >> 2] = $1;
  $2 = HEAP32[$0 + 76 >> 2];
  $1 = HEAP32[$0 + 72 >> 2];
  HEAP32[$0 + 8 >> 2] = $1;
  HEAP32[$0 + 12 >> 2] = $2;
  $1 = HEAP32[$0 + 68 >> 2];
  $2 = HEAP32[$0 + 64 >> 2];
  HEAP32[$0 >> 2] = $2;
  HEAP32[$0 + 4 >> 2] = $1;
  $1 = (jsfFindFile($0, 0) | 0) != 0;
 }
 __stack_pointer = $0 + 128 | 0;
 return $1;
}

function std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___reset_28TfLiteDepthwiseConvParams__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = HEAP32[std____2____compressed_pair_TfLiteDepthwiseConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2];
 $1 = HEAP32[$2 + 8 >> 2];
 HEAP32[std____2____compressed_pair_TfLiteDepthwiseConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2] = $1;
 if (HEAP32[$2 + 4 >> 2]) {
  tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__operator_28_29_28void__29(std____2____compressed_pair_TfLiteDepthwiseConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___second_28_29($0), HEAP32[$2 + 4 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
}

function tflite__TfLiteTypeSizeOf_28TfLiteType_2c_20unsigned_20long__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  label$2: {
   label$3: {
    switch (HEAP32[$2 + 8 >> 2] - 1 | 0) {
    case 0:
     HEAP32[HEAP32[$2 + 4 >> 2] >> 2] = 4;
     break label$2;

    case 6:
     HEAP32[HEAP32[$2 + 4 >> 2] >> 2] = 2;
     break label$2;

    case 1:
     HEAP32[HEAP32[$2 + 4 >> 2] >> 2] = 4;
     break label$2;

    case 2:
     HEAP32[HEAP32[$2 + 4 >> 2] >> 2] = 1;
     break label$2;

    case 8:
     HEAP32[HEAP32[$2 + 4 >> 2] >> 2] = 1;
     break label$2;

    case 3:
     HEAP32[HEAP32[$2 + 4 >> 2] >> 2] = 8;
     break label$2;

    case 5:
     HEAP32[HEAP32[$2 + 4 >> 2] >> 2] = 1;
     break label$2;

    case 7:
     HEAP32[HEAP32[$2 + 4 >> 2] >> 2] = 8;
     break label$2;

    case 11:
     HEAP32[HEAP32[$2 + 4 >> 2] >> 2] = 16;
     break label$2;

    default:
     break label$3;
    }
   }
   HEAP32[$2 + 12 >> 2] = 1;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = 0;
 }
 return HEAP32[$2 + 12 >> 2];
}

function jswrap_graphics_setColorX($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 112 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 104 >> 2] = $0;
 HEAP32[$5 + 100 >> 2] = $1;
 HEAP32[$5 + 96 >> 2] = $2;
 HEAP32[$5 + 92 >> 2] = $3;
 HEAP8[$5 + 91 | 0] = $4;
 label$1: {
  if (!(graphicsGetFromVar($5 + 16 | 0, HEAP32[$5 + 104 >> 2]) & 1)) {
   HEAP32[$5 + 108 >> 2] = 0;
   break label$1;
  }
  HEAP32[$5 + 12 >> 2] = jswrap_graphics_toColor(HEAP32[$5 + 104 >> 2], HEAP32[$5 + 100 >> 2], HEAP32[$5 + 96 >> 2], HEAP32[$5 + 92 >> 2]);
  label$3: {
   if (HEAP8[$5 + 91 | 0] & 1) {
    $0 = HEAP32[$5 + 12 >> 2];
    HEAP8[$5 + 33 | 0] = $0;
    HEAP8[$5 + 34 | 0] = $0 >>> 8;
    HEAP8[$5 + 35 | 0] = $0 >>> 16;
    HEAP8[$5 + 36 | 0] = $0 >>> 24;
    break label$3;
   }
   $0 = HEAP32[$5 + 12 >> 2];
   HEAP8[$5 + 37 | 0] = $0;
   HEAP8[$5 + 38 | 0] = $0 >>> 8;
   HEAP8[$5 + 39 | 0] = $0 >>> 16;
   HEAP8[$5 + 40 | 0] = $0 >>> 24;
  }
  graphicsSetVar($5 + 16 | 0);
  HEAP32[$5 + 108 >> 2] = jsvLockAgain(HEAP32[$5 + 104 >> 2]);
 }
 __stack_pointer = $5 + 112 | 0;
 return HEAP32[$5 + 108 >> 2];
}

function jsvGetValueOfName($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP16[$1 + 6 >> 1] = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63;
  if (HEAPU16[$1 + 6 >> 1] == 14) {
   HEAP32[$1 + 12 >> 2] = jsvArrayBufferGetFromName(HEAP32[$1 + 8 >> 2]);
   break label$1;
  }
  if (!((HEAPU16[$1 + 6 >> 1] < 18 | HEAPU16[$1 + 6 >> 1] > 22) & HEAPU16[$1 + 6 >> 1] != 16)) {
   HEAP32[$1 + 12 >> 2] = jsvNewFromInteger(jsvGetFirstChildSigned(HEAP32[$1 + 8 >> 2]) << 16 >> 16);
   break label$1;
  }
  if (HEAPU16[$1 + 6 >> 1] == 17) {
   HEAP32[$1 + 12 >> 2] = jsvNewFromBool((jsvGetFirstChild(HEAP32[$1 + 8 >> 2]) & 65535) != 0);
   break label$1;
  }
  if (!(HEAPU16[$1 + 6 >> 1] < 14 | HEAPU16[$1 + 6 >> 1] > 27)) {
   HEAP32[$1 + 12 >> 2] = jsvLockSafe(jsvGetFirstChild(HEAP32[$1 + 8 >> 2]) & 65535);
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function tflite___28anonymous_20namespace_29__AllocationInfoBuilder__AddScratchBuffers_28tflite__internal__ScratchBufferHandle__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 $0 = HEAP32[$2 + 28 >> 2];
 HEAP32[$2 + 20 >> 2] = HEAP32[$0 + 8 >> 2];
 while (1) {
  if (HEAPU32[$2 + 20 >> 2] < HEAP32[$0 + 8 >> 2] + HEAP32[$0 + 12 >> 2] >>> 0) {
   HEAP32[$2 + 16 >> 2] = HEAP32[$0 + 16 >> 2] + Math_imul(HEAP32[$2 + 20 >> 2], 24);
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 24 >> 2] + Math_imul(HEAP32[$2 + 20 >> 2] - HEAP32[$0 + 8 >> 2] | 0, 12);
   HEAP32[HEAP32[$2 + 16 >> 2] + 4 >> 2] = HEAP32[$2 + 12 >> 2];
   HEAP32[HEAP32[$2 + 16 >> 2] >> 2] = HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2];
   HEAP32[HEAP32[$2 + 16 >> 2] + 8 >> 2] = HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2];
   HEAP32[HEAP32[$2 + 16 >> 2] + 12 >> 2] = HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2];
   HEAP8[HEAP32[$2 + 16 >> 2] + 20 | 0] = 1;
   HEAP32[HEAP32[$2 + 16 >> 2] + 16 >> 2] = -1;
   HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 20 >> 2] + 1;
   continue;
  }
  break;
 }
 return 0;
}

function jshTransmitMove($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 label$1: {
  if (!(HEAPU8[$2 + 14 | 0] != 17 & HEAPU8[$2 + 14 | 0] != 18)) {
   HEAP8[$2 + 13 | 0] = HEAPU8[$2 + 14 | 0] == 18 ? 17 : 18;
   HEAP32[$2 + 8 >> 2] = jshGetCharToTransmit(HEAPU8[$2 + 15 | 0]);
   while (1) {
    if (HEAP32[$2 + 8 >> 2] >= 0) {
     jshPushIOCharEvent(HEAPU8[$2 + 13 | 0], HEAP32[$2 + 8 >> 2] << 24 >> 24);
     HEAP32[$2 + 8 >> 2] = jshGetCharToTransmit(HEAPU8[$2 + 15 | 0]);
     continue;
    }
    break;
   }
   break label$1;
  }
  jshInterruptOff();
  HEAP8[$2 + 7 | 0] = HEAPU8[187123];
  while (1) {
   if (HEAPU8[$2 + 7 | 0] != HEAPU8[187122]) {
    if (HEAPU8[$2 + 15 | 0] == (HEAPU8[(HEAPU8[$2 + 7 | 0] << 1) + 187200 | 0] & 31)) {
     HEAP8[(HEAPU8[$2 + 7 | 0] << 1) + 187200 | 0] = HEAPU8[$2 + 14 | 0] | HEAPU8[(HEAPU8[$2 + 7 | 0] << 1) + 187200 | 0] & -32;
    }
    HEAP8[$2 + 7 | 0] = HEAPU8[$2 + 7 | 0] + 1;
    continue;
   }
   break;
  }
  jshInterruptOn();
 }
 __stack_pointer = $2 + 16 | 0;
}

function jsvStringIteratorClone($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = HEAP32[$2 + 8 >> 2];
 $0 = HEAP32[$3 >> 2];
 $1 = HEAP32[$3 + 4 >> 2];
 $4 = $0;
 $5 = HEAP32[$2 + 12 >> 2];
 $0 = $5;
 HEAP32[$0 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP32[$0 + 32 >> 2] = HEAP32[$3 + 32 >> 2];
 $0 = HEAP32[$3 + 28 >> 2];
 $1 = HEAP32[$3 + 24 >> 2];
 $4 = $1;
 $1 = $5;
 HEAP32[$1 + 24 >> 2] = $4;
 HEAP32[$1 + 28 >> 2] = $0;
 $1 = HEAP32[$3 + 20 >> 2];
 $0 = HEAP32[$3 + 16 >> 2];
 $4 = $0;
 $0 = $5;
 HEAP32[$0 + 16 >> 2] = $4;
 HEAP32[$0 + 20 >> 2] = $1;
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$3 + 8 >> 2];
 $4 = $1;
 $1 = $5;
 HEAP32[$1 + 8 >> 2] = $4;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2]) {
  jsvLockAgain(HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2]);
  if (HEAP32[HEAP32[$2 + 8 >> 2] + 16 >> 2] == (HEAP32[$2 + 8 >> 2] + 20 | 0)) {
   HEAP32[HEAP32[$2 + 12 >> 2] + 16 >> 2] = HEAP32[$2 + 12 >> 2] + 20;
  }
 }
 __stack_pointer = $2 + 16 | 0;
}

function jswrap_banglejs_project($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer + -64 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 60 >> 2] = $0;
 HEAPF64[$1 + 48 >> 3] = .017453292519943295;
 HEAPF64[$1 + 40 >> 3] = 85.0511287798;
 HEAPF64[$1 + 32 >> 3] = 6378137;
 HEAPF64[$1 + 24 >> 3] = jsvObjectGetFloatChild(HEAP32[$1 + 60 >> 2], 98103);
 HEAPF64[$1 + 16 >> 3] = jsvObjectGetFloatChild(HEAP32[$1 + 60 >> 2], 102110);
 if (HEAPF64[$1 + 24 >> 3] > 85.0511287798) {
  HEAPF64[$1 + 24 >> 3] = 85.0511287798;
 }
 if (HEAPF64[$1 + 24 >> 3] < -85.0511287798) {
  HEAPF64[$1 + 24 >> 3] = -85.0511287798;
 }
 HEAPF64[$1 + 8 >> 3] = sin(HEAPF64[$1 + 24 >> 3] * .017453292519943295);
 HEAP32[$1 + 4 >> 2] = jsvNewObject();
 if (HEAP32[$1 + 4 >> 2]) {
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 4 >> 2], 96763, jsvNewFromFloat(HEAPF64[$1 + 16 >> 3] * 6378137 * .017453292519943295));
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 4 >> 2], 96676, jsvNewFromFloat(log((HEAPF64[$1 + 8 >> 3] + 1) / (1 - HEAPF64[$1 + 8 >> 3])) * 6378137 * .5));
 }
 __stack_pointer = $1 - -64 | 0;
 return HEAP32[$1 + 4 >> 2];
}

function heatshrink_decoder_sink($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 24 >> 2] = $0;
 HEAP32[$4 + 20 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $2;
 HEAP32[$4 + 12 >> 2] = $3;
 label$1: {
  if (HEAP32[$4 + 12 >> 2] ? !HEAP32[$4 + 24 >> 2] | !HEAP32[$4 + 20 >> 2] : 1) {
   HEAP32[$4 + 28 >> 2] = -1;
   break label$1;
  }
  HEAP32[$4 + 8 >> 2] = 32 - HEAPU16[HEAP32[$4 + 24 >> 2] >> 1];
  if (!HEAP32[$4 + 8 >> 2]) {
   HEAP32[HEAP32[$4 + 12 >> 2] >> 2] = 0;
   HEAP32[$4 + 28 >> 2] = 1;
   break label$1;
  }
  if (HEAPU32[$4 + 8 >> 2] < HEAPU32[$4 + 16 >> 2]) {
   $0 = HEAP32[$4 + 8 >> 2];
  } else {
   $0 = HEAP32[$4 + 16 >> 2];
  }
  HEAP32[$4 + 16 >> 2] = $0;
  __memcpy(HEAPU16[HEAP32[$4 + 24 >> 2] >> 1] + (HEAP32[$4 + 24 >> 2] + 13 | 0) | 0, HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]);
  $0 = HEAP32[$4 + 24 >> 2];
  HEAP16[$0 >> 1] = HEAP32[$4 + 16 >> 2] + HEAPU16[$0 >> 1];
  HEAP32[HEAP32[$4 + 12 >> 2] >> 2] = HEAP32[$4 + 16 >> 2];
  HEAP32[$4 + 28 >> 2] = 0;
 }
 __stack_pointer = $4 + 32 | 0;
 return HEAP32[$4 + 28 >> 2];
}

function jswrap_storage_readJSON($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 80 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 72 >> 2] = $0;
 HEAP8[$2 + 71 | 0] = $1;
 jsfNameFromVar($2 + 32 | 0, HEAP32[$2 + 72 >> 2]);
 HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 56 >> 2];
 $1 = HEAP32[$2 + 52 >> 2];
 $0 = HEAP32[$2 + 48 >> 2];
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 $0 = HEAP32[$2 + 44 >> 2];
 $1 = HEAP32[$2 + 40 >> 2];
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = $0;
 $1 = HEAP32[$2 + 36 >> 2];
 $0 = HEAP32[$2 + 32 >> 2];
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 HEAP32[$2 + 64 >> 2] = jsfReadFile($2, 0, 0);
 label$1: {
  if (!HEAP32[$2 + 64 >> 2]) {
   HEAP32[$2 + 76 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 28 >> 2] = jswrap_json_parse_ext(HEAP32[$2 + 64 >> 2], 512);
  jsvUnLock(HEAP32[$2 + 64 >> 2]);
  if (HEAP8[$2 + 71 | 0] & 1) {
   jsvUnLock(jspGetException());
   HEAP32[46755] = HEAP32[46755] & -33;
  }
  HEAP32[$2 + 76 >> 2] = HEAP32[$2 + 28 >> 2];
 }
 __stack_pointer = $2 + 80 | 0;
 return HEAP32[$2 + 76 >> 2];
}

function jswrap_storage_writeJSON($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 80 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 72 >> 2] = $0;
 HEAP32[$2 + 68 >> 2] = $1;
 HEAP32[$2 + 64 >> 2] = jsvNewFromEmptyString_11();
 label$1: {
  if (!HEAP32[$2 + 64 >> 2]) {
   HEAP8[$2 + 79 | 0] = 0;
   break label$1;
  }
  jsfGetJSON(HEAP32[$2 + 68 >> 2], HEAP32[$2 + 64 >> 2], 14032);
  jsfNameFromVar($2 + 32 | 0, HEAP32[$2 + 72 >> 2]);
  $3 = HEAP32[$2 + 64 >> 2];
  HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 56 >> 2];
  $1 = HEAP32[$2 + 52 >> 2];
  $0 = HEAP32[$2 + 48 >> 2];
  HEAP32[$2 + 16 >> 2] = $0;
  HEAP32[$2 + 20 >> 2] = $1;
  $0 = HEAP32[$2 + 44 >> 2];
  $1 = HEAP32[$2 + 40 >> 2];
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 12 >> 2] = $0;
  $1 = HEAP32[$2 + 36 >> 2];
  $0 = HEAP32[$2 + 32 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP8[$2 + 63 | 0] = jsfWriteFile($2, $3, 0, 0, 0) & 1;
  jsvUnLock(HEAP32[$2 + 64 >> 2]);
  HEAP8[$2 + 79 | 0] = HEAP8[$2 + 63 | 0] & 1;
 }
 __stack_pointer = $2 + 80 | 0;
 return HEAP8[$2 + 79 | 0] & 1;
}

function jswrap_graphics_setFontSizeX($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 96 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 88 >> 2] = $0;
 HEAP32[$3 + 84 >> 2] = $1;
 HEAP8[$3 + 83 | 0] = $2;
 label$1: {
  if (!(graphicsGetFromVar($3 + 8 | 0, HEAP32[$3 + 88 >> 2]) & 1)) {
   HEAP32[$3 + 92 >> 2] = 0;
   break label$1;
  }
  if (HEAP8[$3 + 83 | 0] & 1) {
   if (HEAP32[$3 + 84 >> 2] <= 0) {
    HEAP32[$3 + 84 >> 2] = 1;
   }
   if (HEAP32[$3 + 84 >> 2] > 8191) {
    HEAP32[$3 + 84 >> 2] = 8191;
   }
  }
  if (!(!((HEAPU8[$3 + 33 | 0] | HEAPU8[$3 + 34 | 0] << 8) & 32768) | HEAP32[$3 + 84 >> 2] & 32768)) {
   jsvObjectRemoveChild(HEAP32[$3 + 88 >> 2], 110126);
   jsvObjectRemoveChild(HEAP32[$3 + 88 >> 2], 108543);
   jsvObjectRemoveChild(HEAP32[$3 + 88 >> 2], 109551);
   jsvObjectRemoveChild(HEAP32[$3 + 88 >> 2], 111161);
  }
  $0 = HEAP32[$3 + 84 >> 2];
  HEAP8[$3 + 33 | 0] = $0;
  HEAP8[$3 + 34 | 0] = $0 >>> 8;
  graphicsSetVar($3 + 8 | 0);
  HEAP32[$3 + 92 >> 2] = jsvLockAgain(HEAP32[$3 + 88 >> 2]);
 }
 __stack_pointer = $3 + 96 | 0;
 return HEAP32[$3 + 92 >> 2];
}

function std____2__unique_ptr_TfLiteSoftmaxParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteSoftmaxParams__28_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 $3 = TfLiteSoftmaxParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLiteSoftmaxParams__28_29(HEAP32[$1 >> 2]);
 tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__BuiltinDataDeleter_28tflite__BuiltinDataAllocator__29($2 + 8 | 0, HEAP32[$1 >> 2]);
 std____2__unique_ptr_TfLiteSoftmaxParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___unique_ptr_true_2c_20void__28TfLiteSoftmaxParams__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__2c_20true_____good_rval_ref_type_29($0, $3, $2 + 8 | 0);
 __stack_pointer = $2 + 16 | 0;
}

function std____2__unique_ptr_TfLiteReshapeParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteReshapeParams__28_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 $3 = TfLiteReshapeParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLiteReshapeParams__28_29(HEAP32[$1 >> 2]);
 tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__BuiltinDataDeleter_28tflite__BuiltinDataAllocator__29($2 + 8 | 0, HEAP32[$1 >> 2]);
 std____2__unique_ptr_TfLiteReshapeParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___unique_ptr_true_2c_20void__28TfLiteReshapeParams__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__2c_20true_____good_rval_ref_type_29($0, $3, $2 + 8 | 0);
 __stack_pointer = $2 + 16 | 0;
}

function jswrap_flash_write($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 $2 = $3;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 label$1: {
  if (jsvIsUndefined(HEAP32[$2 + 12 >> 2]) & 1) {
   jsExceptionHere(1, 106604, 0);
   break label$1;
  }
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$2 >> 2] = jsvGetDataPointer(HEAP32[$2 + 12 >> 2], $2 + 4 | 0);
  if (!(HEAP32[$2 >> 2] | !HEAP32[$2 + 12 >> 2])) {
   HEAP32[$2 + 4 >> 2] = jsvIterateCallbackCount(HEAP32[$2 + 12 >> 2]);
   label$4: {
    if (HEAP32[$2 + 4 >> 2] + 256 >>> 0 > jsuGetFreeStack() >>> 0) {
     jsExceptionHere(1, 107864, 0);
     break label$4;
    }
    $3 = $3 - (HEAP32[$2 + 4 >> 2] + 15 & -16) | 0;
    __stack_pointer = $3;
    HEAP32[$2 >> 2] = $3;
    jsvIterateCallbackToBytes(HEAP32[$2 + 12 >> 2], HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2]);
   }
  }
  if (!HEAP32[$2 >> 2] | !HEAP32[$2 + 4 >> 2]) {
   break label$1;
  }
  jshFlashWriteAligned(HEAP32[$2 >> 2], HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
}

function jswrap_dataview_constructor($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 label$1: {
  if (!(jsvIsArrayBuffer(HEAP32[$3 + 24 >> 2]) & 1 & HEAPU8[HEAP32[$3 + 24 >> 2] + 5 | 0] == 129)) {
   HEAP32[$3 >> 2] = HEAP32[$3 + 24 >> 2];
   jsExceptionHere(3, 98808, $3);
   HEAP32[$3 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 12 >> 2] = jspNewObject(0, 97009);
  if (HEAP32[$3 + 12 >> 2]) {
   jsvObjectSetChild(HEAP32[$3 + 12 >> 2], 101361, HEAP32[$3 + 24 >> 2]);
   jsvObjectSetChildAndUnLock(HEAP32[$3 + 12 >> 2], 98041, jsvNewFromInteger(HEAP32[$3 + 20 >> 2]));
   $1 = HEAP32[$3 + 12 >> 2];
   if (HEAP32[$3 + 16 >> 2]) {
    $0 = HEAP32[$3 + 16 >> 2];
   } else {
    $0 = jsvGetArrayBufferLength(HEAP32[$3 + 24 >> 2]);
   }
   jsvObjectSetChildAndUnLock($1, 103382, jsvNewFromInteger($0));
  }
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 12 >> 2];
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function jsvIsStringNumericStrict($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer + -64 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 56 >> 2] = $0;
 jsvStringIteratorNew($1 + 16 | 0, HEAP32[$1 + 56 >> 2], 0);
 HEAP8[$1 + 15 | 0] = 0;
 HEAP8[$1 + 14 | 0] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 label$1: {
  while (1) {
   if (jsvStringIteratorHasChar_1($1 + 16 | 0) & 1) {
    HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
    HEAP8[$1 + 7 | 0] = jsvStringIteratorGetCharAndNext($1 + 16 | 0);
    if (!(isNumeric(HEAP8[$1 + 7 | 0]) & 1)) {
     jsvStringIteratorFree_1($1 + 16 | 0);
     HEAP8[$1 + 63 | 0] = 0;
     break label$1;
    }
    if (!(HEAP8[$1 + 15 | 0] & 1 | HEAP8[$1 + 7 | 0] != 48)) {
     HEAP8[$1 + 14 | 0] = 1;
    }
    if (HEAP8[$1 + 7 | 0] != 48) {
     HEAP8[$1 + 15 | 0] = 1;
    }
    continue;
   }
   break;
  }
  jsvStringIteratorFree_1($1 + 16 | 0);
  if (HEAP32[$1 + 8 >> 2] > 0) {
   $2 = 1;
   $2 = HEAP8[$1 + 14 | 0] & 1 ? HEAP32[$1 + 8 >> 2] == 1 : $2;
  }
  HEAP8[$1 + 63 | 0] = $2 & 1;
 }
 __stack_pointer = $1 - -64 | 0;
 return HEAP8[$1 + 63 | 0] & 1;
}

function jspEnsureIsPrototype($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 if (HEAP32[$2 + 24 >> 2]) {
  HEAP32[$2 + 20 >> 2] = jsvSkipName(HEAP32[$2 + 24 >> 2]);
  label$2: {
   if (jsvIsObject(HEAP32[$2 + 20 >> 2]) & 1) {
    break label$2;
   }
   if (jsvIsFunction(HEAP32[$2 + 20 >> 2]) & 1) {
    break label$2;
   }
   if (!(jsvIsUndefined(HEAP32[$2 + 20 >> 2]) & 1)) {
    HEAP32[$2 >> 2] = HEAP32[$2 + 20 >> 2];
    jsExceptionHere(3, 98587, $2);
   }
   jsvUnLock(HEAP32[$2 + 20 >> 2]);
   HEAP32[$2 + 20 >> 2] = jsvNewObject();
   HEAP32[$2 + 16 >> 2] = jsvSkipToLastName(HEAP32[$2 + 24 >> 2]);
   jsvSetValueOfName(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 20 >> 2]);
   jsvUnLock(HEAP32[$2 + 16 >> 2]);
  }
  HEAP32[$2 + 12 >> 2] = jsvFindOrAddChildFromString(HEAP32[$2 + 20 >> 2], 100982);
  if (HEAP32[$2 + 12 >> 2]) {
   jsvSetValueOfName(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 28 >> 2]);
  }
  jsvUnLock2(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 20 >> 2]);
 }
 __stack_pointer = $2 + 32 | 0;
}

function _jswrap_i2c_writeTo($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 48 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 44 >> 2] = $0;
 HEAP8[$6 + 43 | 0] = $1;
 HEAP32[$6 + 36 >> 2] = $2;
 HEAP8[$6 + 35 | 0] = $3;
 HEAP32[$6 + 28 >> 2] = $4;
 HEAP32[$6 + 24 >> 2] = $5;
 label$1: {
  if (!(HEAPU8[$6 + 43 | 0] < 26 | HEAPU8[$6 + 43 | 0] > 26)) {
   jshI2CWrite(HEAPU8[$6 + 43 | 0], HEAP32[$6 + 36 >> 2] & 255, HEAP32[$6 + 28 >> 2], HEAP32[$6 + 24 >> 2], HEAP8[$6 + 35 | 0] & 1);
   break label$1;
  }
  if (!HEAPU8[$6 + 43 | 0]) {
   HEAP32[$6 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$6 + 44 >> 2], 100220);
   if (jsi2cPopulateI2CInfo($6 + 16 | 0, HEAP32[$6 + 12 >> 2]) & 1) {
    HEAP8[$6 + 22 | 0] = jsvObjectGetBoolChild(HEAP32[$6 + 44 >> 2], 106181) & 1;
    jsi2cWrite($6 + 16 | 0, HEAP32[$6 + 36 >> 2] & 255, HEAP32[$6 + 28 >> 2], HEAP32[$6 + 24 >> 2], HEAP8[$6 + 35 | 0] & 1);
   }
   jsvUnLock2(jsvObjectSetChild(HEAP32[$6 + 44 >> 2], 106181, jsvNewFromBool(HEAP8[$6 + 22 | 0] & 1)), HEAP32[$6 + 12 >> 2]);
  }
 }
 __stack_pointer = $6 + 48 | 0;
}

function jsvAsFlatString($0) {
 var $1 = 0;
 $1 = __stack_pointer - 96 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 88 >> 2] = $0;
 label$1: {
  if (jsvIsFlatString(HEAP32[$1 + 88 >> 2]) & 1) {
   HEAP32[$1 + 92 >> 2] = jsvLockAgain(HEAP32[$1 + 88 >> 2]);
   break label$1;
  }
  HEAP32[$1 + 84 >> 2] = jsvAsString(HEAP32[$1 + 88 >> 2]);
  HEAP32[$1 + 80 >> 2] = jsvGetStringLength(HEAP32[$1 + 84 >> 2]);
  HEAP32[$1 + 76 >> 2] = jsvNewFlatStringOfLength(HEAP32[$1 + 80 >> 2]);
  if (HEAP32[$1 + 76 >> 2]) {
   jsvStringIteratorNew($1 + 40 | 0, HEAP32[$1 + 84 >> 2], 0);
   jsvStringIteratorNew($1, HEAP32[$1 + 76 >> 2], 0);
   while (1) {
    $0 = HEAP32[$1 + 80 >> 2];
    HEAP32[$1 + 80 >> 2] = $0 - 1;
    if ($0) {
     jsvStringIteratorSetCharAndNext($1, jsvStringIteratorGetCharAndNext($1 + 40 | 0) << 24 >> 24);
     continue;
    }
    break;
   }
   jsvStringIteratorFree_1($1 + 40 | 0);
   jsvStringIteratorFree_1($1);
  }
  jsvUnLock(HEAP32[$1 + 84 >> 2]);
  HEAP32[$1 + 92 >> 2] = HEAP32[$1 + 76 >> 2];
 }
 __stack_pointer = $1 + 96 | 0;
 return HEAP32[$1 + 92 >> 2];
}

function std____2__unique_ptr_TfLiteSoftmaxParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___reset_28TfLiteSoftmaxParams__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = HEAP32[std____2____compressed_pair_TfLiteSoftmaxParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2];
 $1 = HEAP32[$2 + 8 >> 2];
 HEAP32[std____2____compressed_pair_TfLiteSoftmaxParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2] = $1;
 if (HEAP32[$2 + 4 >> 2]) {
  tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__operator_28_29_28void__29(std____2____compressed_pair_TfLiteSoftmaxParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___second_28_29($0), HEAP32[$2 + 4 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
}

function std____2__unique_ptr_TfLiteReshapeParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___reset_28TfLiteReshapeParams__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = HEAP32[std____2____compressed_pair_TfLiteReshapeParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2];
 $1 = HEAP32[$2 + 8 >> 2];
 HEAP32[std____2____compressed_pair_TfLiteReshapeParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2] = $1;
 if (HEAP32[$2 + 4 >> 2]) {
  tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__operator_28_29_28void__29(std____2____compressed_pair_TfLiteReshapeParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___second_28_29($0), HEAP32[$2 + 4 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
}

function jswrap_espruino_getPowerUsage() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 32 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 24 >> 2] = jsvNewObject();
 label$1: {
  if (!HEAP32[$0 + 24 >> 2]) {
   HEAP32[$0 + 28 >> 2] = 0;
   break label$1;
  }
  jsvGetProcessorPowerUsage(HEAP32[$0 + 24 >> 2]);
  jswGetPowerUsage(HEAP32[$0 + 24 >> 2]);
  HEAPF64[$0 + 16 >> 3] = 0;
  jsvObjectIteratorNew($0 + 8 | 0, HEAP32[$0 + 24 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_13($0 + 8 | 0) & 1) {
    $1 = jsvGetFloatAndUnLock(jsvObjectIteratorGetValue_12($0 + 8 | 0));
    HEAPF64[$0 + 16 >> 3] = HEAPF64[$0 + 16 >> 3] + $1;
    jsvObjectIteratorNext($0 + 8 | 0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree_13($0 + 8 | 0);
  HEAP32[$0 + 4 >> 2] = jsvNewObject();
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 4 >> 2], 105493, HEAP32[$0 + 24 >> 2]);
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 4 >> 2], 103043, jsvNewFromFloat(HEAPF64[$0 + 16 >> 3]));
  HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 4 >> 2];
 }
 __stack_pointer = $0 + 32 | 0;
 return HEAP32[$0 + 28 >> 2];
}

function tflite__GreedyMemoryPlanner__GreedyMemoryPlanner_28unsigned_20char__2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 tflite__MemoryPlanner__MemoryPlanner_28_29($0);
 HEAP32[$0 >> 2] = 148160;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP8[$0 + 40 | 0] = 1;
 HEAP32[$0 + 4 >> 2] = HEAPU32[$3 + 4 >> 2] / (tflite__GreedyMemoryPlanner__per_buffer_size_28_29() >>> 0);
 HEAP32[$3 >> 2] = HEAP32[$3 + 8 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + (HEAP32[$0 + 4 >> 2] << 4);
 HEAP32[$0 + 16 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + (HEAP32[$0 + 4 >> 2] << 2);
 HEAP32[$0 + 20 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + (HEAP32[$0 + 4 >> 2] << 2);
 HEAP32[$0 + 24 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + Math_imul(HEAP32[$0 + 4 >> 2], 12);
 HEAP32[$0 + 36 >> 2] = HEAP32[$3 >> 2];
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function jsi2cWrite($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 48 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 40 >> 2] = $0;
 HEAP8[$5 + 39 | 0] = $1;
 HEAP32[$5 + 32 >> 2] = $2;
 HEAP32[$5 + 28 >> 2] = $3;
 HEAP8[$5 + 27 | 0] = $4;
 label$1: {
  if (!(HEAPU8[HEAP32[$5 + 40 >> 2] + 4 | 0] != 255 & HEAPU8[HEAP32[$5 + 40 >> 2] + 5 | 0] != 255)) {
   HEAP8[$5 + 47 | 0] = 0;
   break label$1;
  }
  i2c_initstruct($5 + 8 | 0, HEAP32[$5 + 40 >> 2]);
  i2c_start($5 + 8 | 0);
  if (!(i2c_wr($5 + 8 | 0, HEAPU8[$5 + 39 | 0] << 1) & 1)) {
   HEAP8[$5 + 47 | 0] = 0;
   break label$1;
  }
  HEAP32[$5 + 4 >> 2] = 0;
  while (1) {
   if (HEAP32[$5 + 4 >> 2] < HEAP32[$5 + 32 >> 2]) {
    i2c_wr($5 + 8 | 0, HEAPU8[HEAP32[$5 + 28 >> 2] + HEAP32[$5 + 4 >> 2] | 0]);
    HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] + 1;
    continue;
   }
   break;
  }
  if (HEAP8[$5 + 27 | 0] & 1) {
   i2c_stop($5 + 8 | 0);
  }
  HEAP8[HEAP32[$5 + 40 >> 2] + 6 | 0] = HEAP8[$5 + 10 | 0] & 1;
  HEAP8[$5 + 47 | 0] = 1;
 }
 __stack_pointer = $5 + 48 | 0;
 return HEAP8[$5 + 47 | 0] & 1;
}

function void_20tflite__CalculateActivationRange_float__28TfLiteFusedActivation_2c_20float__2c_20float__29($0, $1, $2) {
 var $3 = 0, $4 = Math_fround(0);
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 label$1: {
  if (HEAP32[$3 + 12 >> 2] == 1) {
   HEAPF32[HEAP32[$3 + 8 >> 2] >> 2] = 0;
   $4 = std____2__numeric_limits_float___max_28_29();
   HEAPF32[HEAP32[$3 + 4 >> 2] >> 2] = $4;
   break label$1;
  }
  label$3: {
   if (HEAP32[$3 + 12 >> 2] == 3) {
    HEAPF32[HEAP32[$3 + 8 >> 2] >> 2] = 0;
    HEAPF32[HEAP32[$3 + 4 >> 2] >> 2] = 6;
    break label$3;
   }
   label$5: {
    if (HEAP32[$3 + 12 >> 2] == 2) {
     HEAPF32[HEAP32[$3 + 8 >> 2] >> 2] = -1;
     HEAPF32[HEAP32[$3 + 4 >> 2] >> 2] = 1;
     break label$5;
    }
    $4 = std____2__numeric_limits_float___lowest_28_29();
    HEAPF32[HEAP32[$3 + 8 >> 2] >> 2] = $4;
    $4 = std____2__numeric_limits_float___max_28_29();
    HEAPF32[HEAP32[$3 + 4 >> 2] >> 2] = $4;
   }
  }
 }
 __stack_pointer = $3 + 16 | 0;
}

function std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLitePoolParams__28_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 $3 = TfLitePoolParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLitePoolParams__28_29(HEAP32[$1 >> 2]);
 tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__BuiltinDataDeleter_28tflite__BuiltinDataAllocator__29($2 + 8 | 0, HEAP32[$1 >> 2]);
 std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___unique_ptr_true_2c_20void__28TfLitePoolParams__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__2c_20true_____good_rval_ref_type_29($0, $3, $2 + 8 | 0);
 __stack_pointer = $2 + 16 | 0;
}

function std____2__unique_ptr_TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___unique_ptr_true_2c_20void__28TfLiteFullyConnectedParams__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__2c_20true_____good_rval_ref_type_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 std____2____compressed_pair_TfLiteFullyConnectedParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_____compressed_pair_TfLiteFullyConnectedParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28TfLiteFullyConnectedParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___29($0, $3 + 8 | 0, HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteConvParams__28_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 $3 = TfLiteConvParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLiteConvParams__28_29(HEAP32[$1 >> 2]);
 tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__BuiltinDataDeleter_28tflite__BuiltinDataAllocator__29($2 + 8 | 0, HEAP32[$1 >> 2]);
 std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___unique_ptr_true_2c_20void__28TfLiteConvParams__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__2c_20true_____good_rval_ref_type_29($0, $3, $2 + 8 | 0);
 __stack_pointer = $2 + 16 | 0;
}

function jsvObjectGetChild($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP16[$3 + 18 >> 1] = $2;
 label$1: {
  if (!HEAP32[$3 + 24 >> 2]) {
   HEAP32[$3 + 28 >> 2] = 0;
   break label$1;
  }
  label$3: {
   if (HEAPU16[$3 + 18 >> 1]) {
    $0 = jsvFindOrAddChildFromString(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
    break label$3;
   }
   $0 = jsvFindChildFromString(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
  }
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = jsvSkipName(HEAP32[$3 + 12 >> 2]);
  if (!(!HEAP32[$3 + 12 >> 2] | (HEAP32[$3 + 8 >> 2] | !HEAPU16[$3 + 18 >> 1]))) {
   HEAP32[$3 + 8 >> 2] = jsvNewWithFlags(HEAPU16[$3 + 18 >> 1]);
   jsvSetValueOfName(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
   jsvUnLock(HEAP32[$3 + 12 >> 2]);
   HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 8 >> 2];
   break label$1;
  }
  jsvUnLock(HEAP32[$3 + 12 >> 2]);
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 8 >> 2];
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function numericEscapeChar($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP32[$3 + 12 >> 2] = $0 + 1;
 HEAP8[$0 | 0] = 92;
 label$1: {
  if (HEAP8[$3 + 7 | 0] & 1) {
   $0 = HEAP32[$3 + 12 >> 2];
   HEAP32[$3 + 12 >> 2] = $0 + 1;
   HEAP8[$0 | 0] = 117;
   $1 = dtohex(HEAP32[$3 + 8 >> 2] >> 12);
   $0 = HEAP32[$3 + 12 >> 2];
   HEAP32[$3 + 12 >> 2] = $0 + 1;
   HEAP8[$0 | 0] = $1;
   $1 = dtohex(HEAP32[$3 + 8 >> 2] >> 8);
   $0 = HEAP32[$3 + 12 >> 2];
   HEAP32[$3 + 12 >> 2] = $0 + 1;
   HEAP8[$0 | 0] = $1;
   break label$1;
  }
  $0 = HEAP32[$3 + 12 >> 2];
  HEAP32[$3 + 12 >> 2] = $0 + 1;
  HEAP8[$0 | 0] = 120;
 }
 $1 = dtohex(HEAP32[$3 + 8 >> 2] >> 4);
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP32[$3 + 12 >> 2] = $0 + 1;
 HEAP8[$0 | 0] = $1;
 $1 = dtohex(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP32[$3 + 12 >> 2] = $0 + 1;
 HEAP8[$0 | 0] = $1;
 __stack_pointer = $3 + 16 | 0;
 return HEAP32[$3 + 12 >> 2];
}

function jswrap_storage_getStats($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 43 | 0] = $0;
 HEAP32[$1 + 36 >> 2] = jsvNewObject();
 label$1: {
  if (!HEAP32[$1 + 36 >> 2]) {
   HEAP32[$1 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 32 >> 2] = 0;
  jsfGetStorageStats($1, HEAP32[$1 + 32 >> 2], 1);
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 36 >> 2], 100318, jsvNewFromInteger(HEAP32[$1 + 16 >> 2]));
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 36 >> 2], 100350, jsvNewFromInteger(HEAP32[$1 + 20 >> 2]));
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 36 >> 2], 100340, jsvNewFromInteger(HEAP32[$1 >> 2]));
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 36 >> 2], 97598, jsvNewFromInteger(HEAP32[$1 + 4 >> 2]));
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 36 >> 2], 100329, jsvNewFromInteger(HEAP32[$1 + 8 >> 2]));
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 36 >> 2], 97550, jsvNewFromInteger(HEAP32[$1 + 12 >> 2]));
  HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 36 >> 2];
 }
 __stack_pointer = $1 + 48 | 0;
 return HEAP32[$1 + 44 >> 2];
}

function jsvGetLineAndCol($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 80 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 76 >> 2] = $0;
 HEAP32[$4 + 72 >> 2] = $1;
 HEAP32[$4 + 68 >> 2] = $2;
 HEAP32[$4 + 64 >> 2] = $3;
 HEAP32[$4 + 60 >> 2] = 1;
 HEAP32[$4 + 56 >> 2] = 1;
 HEAP32[$4 + 52 >> 2] = 0;
 jsvStringIteratorNew($4 + 16 | 0, HEAP32[$4 + 76 >> 2], 0);
 while (1) {
  label$2: {
   if (!(jsvStringIteratorHasChar_1($4 + 16 | 0) & 1)) {
    break label$2;
   }
   HEAP8[$4 + 15 | 0] = jsvStringIteratorGetCharAndNext($4 + 16 | 0);
   if (HEAP32[$4 + 52 >> 2] == HEAP32[$4 + 72 >> 2]) {
    break label$2;
   }
   HEAP32[$4 + 60 >> 2] = HEAP32[$4 + 60 >> 2] + 1;
   if (HEAP8[$4 + 15 | 0] == 10) {
    HEAP32[$4 + 60 >> 2] = 1;
    HEAP32[$4 + 56 >> 2] = HEAP32[$4 + 56 >> 2] + 1;
   }
   HEAP32[$4 + 52 >> 2] = HEAP32[$4 + 52 >> 2] + 1;
   continue;
  }
  break;
 }
 jsvStringIteratorFree_1($4 + 16 | 0);
 HEAP32[HEAP32[$4 + 68 >> 2] >> 2] = HEAP32[$4 + 56 >> 2];
 HEAP32[HEAP32[$4 + 64 >> 2] >> 2] = HEAP32[$4 + 60 >> 2];
 __stack_pointer = $4 + 80 | 0;
}

function jshPushIOWatchEvent($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 31 | 0] = $0;
 HEAP8[$1 + 30 | 0] = jshGetWatchedPinState(HEAPU8[$1 + 31 | 0]) & 1;
 HEAP32[$1 + 24 >> 2] = HEAPU8[$1 + 31 | 0] - 1;
 label$1: {
  if (HEAP32[(HEAP32[$1 + 24 >> 2] << 2) + 187136 >> 2]) {
   label$3: {
    if ((HEAP32[(HEAP32[$1 + 24 >> 2] << 2) + 187136 >> 2] & -256) == -256) {
     HEAP8[$1 + 23 | 0] = HEAP32[(HEAP32[$1 + 24 >> 2] << 2) + 187136 >> 2];
     if (jshPinGetValue(HEAPU8[$1 + 23 | 0]) & 1) {
      HEAP8[$1 + 31 | 0] = HEAPU8[$1 + 31 | 0] | 64;
     }
     break label$3;
    }
    FUNCTION_TABLE[HEAP32[(HEAP32[$1 + 24 >> 2] << 2) + 187136 >> 2]](HEAP8[$1 + 30 | 0] & 1, HEAPU8[$1 + 31 | 0]);
    break label$1;
   }
  }
  if (HEAP8[$1 + 30 | 0] & 1) {
   HEAP8[$1 + 31 | 0] = HEAPU8[$1 + 31 | 0] | 32;
  }
  HEAP32[$1 + 8 >> 2] = jshGetSystemTime();
  HEAP32[$1 + 12 >> 2] = i64toi32_i32$HIGH_BITS;
  jshPushIOEvent(HEAPU8[$1 + 31 | 0], HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2]);
 }
 __stack_pointer = $1 + 32 | 0;
}

function tflite__ops__micro__activations__SoftmaxFloat_28TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__2c_20tflite__SoftmaxParams_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer + -64 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 60 >> 2] = $0;
 HEAP32[$3 + 56 >> 2] = $1;
 HEAP32[$3 + 52 >> 2] = $2;
 $0 = HEAP32[$3 + 52 >> 2];
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($3 + 24 | 0, HEAP32[$3 + 60 >> 2]);
 $1 = float_20const__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor_20const__29(HEAP32[$3 + 60 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($3, HEAP32[$3 + 56 >> 2]);
 tflite__reference_ops__Softmax_28tflite__SoftmaxParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($0, $3 + 24 | 0, $1, $3, float__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor__29(HEAP32[$3 + 56 >> 2]));
 tflite__RuntimeShape___RuntimeShape_28_29($3);
 tflite__RuntimeShape___RuntimeShape_28_29($3 + 24 | 0);
 __stack_pointer = $3 - -64 | 0;
}

function std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___unique_ptr_true_2c_20void__28TfLiteDepthwiseConvParams__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__2c_20true_____good_rval_ref_type_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 std____2____compressed_pair_TfLiteDepthwiseConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_____compressed_pair_TfLiteDepthwiseConvParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28TfLiteDepthwiseConvParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___29($0, $3 + 8 | 0, HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function jshResetDevices() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 jshResetPinStateIsManual();
 HEAP32[$0 + 12 >> 2] = 0;
 while (1) {
  label$2: {
   if (!HEAP32[$0 + 12 >> 2] | HEAP32[$0 + 12 >> 2] >= 2) {
    break label$2;
   }
   if (HEAP32[$0 + 12 >> 2] == ((jsiGetConsoleDevice() & 255) - 21 | 0)) {
    break label$2;
   }
   HEAP8[HEAP32[$0 + 12 >> 2] + 187126 | 0] = 0;
   HEAP8[HEAP32[$0 + 12 >> 2] + 187128 | 0] = 255;
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$0 + 8 >> 2] = 1;
 while (1) {
  if (HEAP32[$0 + 8 >> 2] <= 16) {
   HEAP32[(HEAP32[$0 + 8 >> 2] << 2) + 187132 >> 2] = 0;
   HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
   continue;
  }
  break;
 }
 jshSetPinStateIsManual(24, 1);
 jshPinSetState(24, 6);
 jshSetPinStateIsManual(22, 1);
 jshPinSetState(22, 6);
 jshSetPinStateIsManual(23, 1);
 jshPinSetState(23, 6);
 jshSetPinStateIsManual(11, 1);
 jshPinSetState(11, 6);
 jshSetPinStateIsManual(16, 1);
 jshPinSetState(16, 6);
 __stack_pointer = $0 + 16 | 0;
}

function tflite__MicroAllocator__Create_28unsigned_20char__2c_20unsigned_20long_2c_20tflite__ErrorReporter__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 HEAP32[$3 + 16 >> 2] = tflite__AlignPointerUp_28unsigned_20char__2c_20unsigned_20long_29(HEAP32[$3 + 28 >> 2], 16);
 if (HEAP32[$3 + 16 >> 2] != HEAP32[$3 + 28 >> 2]) {
  $0 = HEAP32[$3 + 20 >> 2];
  HEAP32[$3 >> 2] = HEAP32[$3 + 16 >> 2] - HEAP32[$3 + 28 >> 2];
  tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 112151, $3);
 }
 HEAP32[$3 + 12 >> 2] = (HEAP32[$3 + 28 >> 2] + HEAP32[$3 + 24 >> 2] | 0) - HEAP32[$3 + 16 >> 2];
 $0 = tflite__MicroAllocator__Create_28tflite__SimpleMemoryAllocator__2c_20tflite__ErrorReporter__29(tflite__SimpleMemoryAllocator__Create_28tflite__ErrorReporter__2c_20unsigned_20char__2c_20unsigned_20long_29(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 16 >> 2], HEAP32[$3 + 12 >> 2]), HEAP32[$3 + 20 >> 2]);
 __stack_pointer = $3 + 32 | 0;
 return $0;
}

function std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___reset_28TfLitePoolParams__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = HEAP32[std____2____compressed_pair_TfLitePoolParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2];
 $1 = HEAP32[$2 + 8 >> 2];
 HEAP32[std____2____compressed_pair_TfLitePoolParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2] = $1;
 if (HEAP32[$2 + 4 >> 2]) {
  tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__operator_28_29_28void__29(std____2____compressed_pair_TfLitePoolParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___second_28_29($0), HEAP32[$2 + 4 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
}

function std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___reset_28TfLiteConvParams__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = HEAP32[std____2____compressed_pair_TfLiteConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2];
 $1 = HEAP32[$2 + 8 >> 2];
 HEAP32[std____2____compressed_pair_TfLiteConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2] = $1;
 if (HEAP32[$2 + 4 >> 2]) {
  tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__operator_28_29_28void__29(std____2____compressed_pair_TfLiteConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___second_28_29($0), HEAP32[$2 + 4 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
}

function jsvArrayBufferIteratorGetValueAndRewind($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 44 >> 2] = $0;
 jsvStringIteratorClone($1 + 8 | 0, HEAP32[$1 + 44 >> 2]);
 HEAP32[$1 + 4 >> 2] = jsvArrayBufferIteratorGetValue(HEAP32[$1 + 44 >> 2], 0);
 jsvStringIteratorFree_2(HEAP32[$1 + 44 >> 2]);
 $2 = HEAP32[$1 + 12 >> 2];
 $0 = HEAP32[$1 + 8 >> 2];
 $3 = $0;
 $4 = HEAP32[$1 + 44 >> 2];
 $0 = $4;
 HEAP32[$0 >> 2] = $3;
 HEAP32[$0 + 4 >> 2] = $2;
 HEAP32[$0 + 32 >> 2] = HEAP32[$1 + 40 >> 2];
 $0 = HEAP32[$1 + 36 >> 2];
 $2 = HEAP32[$1 + 32 >> 2];
 $3 = $2;
 $2 = $4;
 HEAP32[$2 + 24 >> 2] = $3;
 HEAP32[$2 + 28 >> 2] = $0;
 $2 = HEAP32[$1 + 28 >> 2];
 $0 = HEAP32[$1 + 24 >> 2];
 $3 = $0;
 $0 = $4;
 HEAP32[$0 + 16 >> 2] = $3;
 HEAP32[$0 + 20 >> 2] = $2;
 $0 = HEAP32[$1 + 20 >> 2];
 $2 = HEAP32[$1 + 16 >> 2];
 $3 = $2;
 $2 = $4;
 HEAP32[$2 + 8 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[HEAP32[$1 + 44 >> 2] + 52 | 0] = 0;
 __stack_pointer = $1 + 48 | 0;
 return HEAP32[$1 + 4 >> 2];
}

function jsvIteratorClone($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
 label$1: {
  label$2: {
   switch (HEAP32[HEAP32[$2 + 8 >> 2] >> 2] - 1 | 0) {
   case 3:
    HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] + 12 >> 2];
    $0 = jsvLockAgain(HEAP32[HEAP32[$2 + 8 >> 2] + 8 >> 2]);
    HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2] = $0;
    jsvObjectIteratorClone(HEAP32[$2 + 12 >> 2] + 4 | 0, HEAP32[$2 + 8 >> 2] + 4 | 0);
    break label$1;

   case 1:
    jsvObjectIteratorClone(HEAP32[$2 + 12 >> 2] + 4 | 0, HEAP32[$2 + 8 >> 2] + 4 | 0);
    break label$1;

   case 0:
    jsvStringIteratorClone(HEAP32[$2 + 12 >> 2] + 4 | 0, HEAP32[$2 + 8 >> 2] + 4 | 0);
    break label$1;

   case 2:
    break label$2;

   default:
    break label$1;
   }
  }
  jsvArrayBufferIteratorClone(HEAP32[$2 + 12 >> 2] + 4 | 0, HEAP32[$2 + 8 >> 2] + 4 | 0);
 }
 __stack_pointer = $2 + 16 | 0;
}

function tflite__MatchingFlatSize_28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 label$1: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$2 + 12 >> 2]) | 0) != (tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$2 + 8 >> 2]) | 0)) {
   break label$1;
  }
 }
 HEAP32[$2 + 4 >> 2] = tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$2 + 12 >> 2]);
 HEAP32[$2 >> 2] = 0;
 while (1) {
  if (HEAP32[$2 >> 2] < HEAP32[$2 + 4 >> 2]) {
   label$4: {
    if ((tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$2 + 12 >> 2], HEAP32[$2 >> 2]) | 0) != (tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$2 + 8 >> 2], HEAP32[$2 >> 2]) | 0)) {
     break label$4;
    }
   }
   HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + 1;
   continue;
  }
  break;
 }
 $0 = tflite__RuntimeShape__FlatSize_28_29_20const(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function _jswrap_graphics_getFontHeightInternal($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  if (!HEAP32[HEAP32[$2 + 4 >> 2] >> 2]) {
   HEAP32[$2 + 12 >> 2] = HEAPU16[HEAP32[$2 + 4 >> 2] + 8 >> 1];
   break label$1;
  }
  if (HEAP32[HEAP32[$2 + 4 >> 2] >> 2] == 8192) {
   HEAP32[$2 + 12 >> 2] = Math_imul(HEAPU16[HEAP32[$2 + 4 >> 2] + 8 >> 1], 6);
   break label$1;
  }
  if (HEAP32[HEAP32[$2 + 4 >> 2] >> 2] == 16384) {
   HEAP32[$2 + 12 >> 2] = HEAPU16[HEAP32[$2 + 4 >> 2] + 8 >> 1] << 3;
   break label$1;
  }
  if (HEAP32[HEAP32[$2 + 4 >> 2] >> 2] & 32768) {
   $0 = HEAP32[$2 + 8 >> 2];
   HEAP32[$2 + 12 >> 2] = Math_imul(HEAPU16[HEAP32[$2 + 4 >> 2] + 8 >> 1], jsvGetIntegerAndUnLock(jsvObjectGetChildIfExists(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 109551)));
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function jswrap_banglejs_setLCDPower($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 jswrap_banglejs_setLCDPowerController(HEAP8[$1 + 15 | 0] & 1);
 jswrap_banglejs_setLCDPowerBacklight(HEAP8[$1 + 15 | 0] & 1);
 if ((HEAP8[$1 + 15 | 0] & 1) != ((HEAP32[85796] & 65536) != 0 | 0)) {
  HEAP32[$1 + 8 >> 2] = jsvObjectGetChildIfExists(HEAP32[46747], 105122);
  if (HEAP32[$1 + 8 >> 2]) {
   HEAP32[$1 + 4 >> 2] = jsvNewFromBool(HEAP8[$1 + 15 | 0] & 1);
   jsiQueueObjectCallbacks(HEAP32[$1 + 8 >> 2], 101114, $1 + 4 | 0, 1);
   jsvUnLock(HEAP32[$1 + 4 >> 2]);
  }
  jsvUnLock(HEAP32[$1 + 8 >> 2]);
 }
 label$3: {
  if (HEAP8[$1 + 15 | 0] & 1) {
   if (!(HEAP32[85798] <= 0 & HEAP32[85800] <= 0)) {
    HEAP16[171604] = 0;
   }
   HEAP32[85796] = HEAP32[85796] | 65536;
   break label$3;
  }
  HEAP32[85796] = HEAP32[85796] & -65537;
  if (!(HEAP32[85801] <= 0 | HEAP32[85801] > HEAP32[85798])) {
   _jswrap_banglejs_setLocked(1, 106741);
  }
 }
 __stack_pointer = $1 + 16 | 0;
}

function jsiIsWatchingPin($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 30 | 0] = $0;
 label$1: {
  if (jshGetPinShouldStayWatched(HEAPU8[$1 + 30 | 0]) & 1) {
   HEAP8[$1 + 31 | 0] = 1;
   break label$1;
  }
  HEAP8[$1 + 29 | 0] = 0;
  HEAP32[$1 + 24 >> 2] = jsvLock(HEAPU16[93523]);
  jsvObjectIteratorNew($1 + 16 | 0, HEAP32[$1 + 24 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_3($1 + 16 | 0) & 1) {
    HEAP32[$1 + 12 >> 2] = jsvObjectIteratorGetValue_3($1 + 16 | 0);
    HEAP32[$1 + 8 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 12 >> 2], 102482);
    if ((jshGetPinFromVar(HEAP32[$1 + 8 >> 2]) & 255) == HEAPU8[$1 + 30 | 0]) {
     HEAP8[$1 + 29 | 0] = 1;
    }
    jsvUnLock2(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2]);
    jsvObjectIteratorNext($1 + 16 | 0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree_3($1 + 16 | 0);
  jsvUnLock(HEAP32[$1 + 24 >> 2]);
  HEAP8[$1 + 31 | 0] = HEAP8[$1 + 29 | 0] & 1;
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP8[$1 + 31 | 0] & 1;
}

function jsiExecuteEvents() {
 var $0 = 0;
 $0 = __stack_pointer - 32 | 0;
 __stack_pointer = $0;
 HEAP8[$0 + 31 | 0] = (jsvArrayIsEmpty(HEAP32[46760]) ^ -1) & 1;
 if (HEAP8[$0 + 31 | 0] & 1) {
  jsiSetBusy(1, 1);
 }
 while (1) {
  if ((jsvArrayIsEmpty(HEAP32[46760]) ^ -1) & 1) {
   HEAP32[$0 + 24 >> 2] = jsvSkipNameAndUnLock(jsvArrayPopFirst(HEAP32[46760]));
   HEAP32[$0 + 20 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 24 >> 2], 107748);
   HEAP32[$0 + 16 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 24 >> 2], 100297);
   HEAP32[$0 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 24 >> 2], 100307);
   jsvUnLock(HEAP32[$0 + 24 >> 2]);
   jsiExecuteEventCallbackArgsArray(HEAP32[$0 + 16 >> 2], HEAP32[$0 + 20 >> 2], HEAP32[$0 + 12 >> 2]);
   jsvUnLock(HEAP32[$0 + 12 >> 2]);
   jsvUnLock2(HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2]);
   continue;
  }
  break;
 }
 if (HEAP8[$0 + 31 | 0] & 1) {
  jsiSetBusy(1, 0);
  if (jspIsInterrupted() & 1) {
   HEAP16[93524] = HEAPU16[93524] | 32768;
  }
 }
 __stack_pointer = $0 + 32 | 0;
}

function jswrap_modules_getCached() {
 var $0 = 0;
 $0 = __stack_pointer - 32 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 24 >> 2] = jsvNewEmptyArray();
 label$1: {
  if (!HEAP32[$0 + 24 >> 2]) {
   HEAP32[$0 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$0 + 20 >> 2] = jswrap_modules_getModuleList();
  if (!HEAP32[$0 + 20 >> 2]) {
   HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 24 >> 2];
   break label$1;
  }
  jsvObjectIteratorNew($0 + 16 | 0, HEAP32[$0 + 20 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_11($0 + 16 | 0) & 1) {
    HEAP32[$0 + 12 >> 2] = jsvObjectIteratorGetKey_7($0 + 16 | 0);
    HEAP32[$0 + 8 >> 2] = jsvCopyNameOnly(HEAP32[$0 + 12 >> 2], 0, 0);
    jsvArrayPushAndUnLock(HEAP32[$0 + 24 >> 2], HEAP32[$0 + 8 >> 2]);
    jsvUnLock(HEAP32[$0 + 12 >> 2]);
    jsvObjectIteratorNext($0 + 16 | 0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree_11($0 + 16 | 0);
  jsvUnLock(HEAP32[$0 + 20 >> 2]);
  HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 24 >> 2];
 }
 __stack_pointer = $0 + 32 | 0;
 return HEAP32[$0 + 28 >> 2];
}

function std____2__unique_ptr_TfLiteSoftmaxParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___unique_ptr_true_2c_20void__28TfLiteSoftmaxParams__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__2c_20true_____good_rval_ref_type_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 std____2____compressed_pair_TfLiteSoftmaxParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_____compressed_pair_TfLiteSoftmaxParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28TfLiteSoftmaxParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___29($0, $3 + 8 | 0, HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function std____2__unique_ptr_TfLiteReshapeParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___unique_ptr_true_2c_20void__28TfLiteReshapeParams__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__2c_20true_____good_rval_ref_type_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 std____2____compressed_pair_TfLiteReshapeParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_____compressed_pair_TfLiteReshapeParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28TfLiteReshapeParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___29($0, $3 + 8 | 0, HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function tflite__MatchingFlatSizeSkipDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 HEAP32[$3 + 16 >> 2] = tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$3 + 28 >> 2]);
 HEAP32[$3 + 12 >> 2] = 0;
 while (1) {
  if (HEAP32[$3 + 12 >> 2] < HEAP32[$3 + 16 >> 2]) {
   if (HEAP32[$3 + 12 >> 2] != HEAP32[$3 + 24 >> 2]) {
    label$4: {
     if ((tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 12 >> 2]) | 0) != (tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 12 >> 2]) | 0)) {
      break label$4;
     }
    }
   }
   HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 $0 = tflite__FlatSizeSkipDim_28tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2]);
 __stack_pointer = $3 + 32 | 0;
 return $0;
}

function jslSkipWhiteSpace() {
 var $0 = 0;
 while (1) {
  label$2: {
   while (1) {
    if (isWhitespaceInline(HEAP8[HEAP32[38615]]) & 1) {
     jslGetNextCh();
     continue;
    }
    break;
   }
   if (HEAP8[HEAP32[38615]] != 47) {
    break label$2;
   }
   if ((jslNextCh() & 255) == 47) {
    while (1) {
     $0 = 0;
     $0 = HEAP8[HEAP32[38615]] ? HEAP8[HEAP32[38615]] != 10 : $0;
     if ($0) {
      jslGetNextCh();
      continue;
     }
     break;
    }
    jslGetNextCh();
    continue;
   }
   if ((jslNextCh() & 255) == 42) {
    jslGetNextCh();
    jslGetNextCh();
    while (1) {
     $0 = 0;
     if (HEAP8[HEAP32[38615]]) {
      $0 = 0;
      if (HEAP8[HEAP32[38615]] == 42) {
       $0 = (jslNextCh() & 255) == 47;
      }
      $0 = $0 ^ -1;
     }
     if ($0 & 1) {
      jslGetNextCh();
      continue;
     }
     break;
    }
    if (!HEAPU8[HEAP32[38615]]) {
     HEAP16[HEAP32[38615] + 2 >> 1] = 137;
     break label$2;
    }
    jslGetNextCh();
    jslGetNextCh();
    continue;
   }
  }
  break;
 }
}

function getDayNumberFromDate($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 label$1: {
  if (!(HEAP32[$3 + 24 >> 2] < 125e4 & HEAP32[$3 + 24 >> 2] >= -125e4)) {
   jsExceptionHere(1, 100591, 0);
   HEAP32[$3 + 28 >> 2] = 0;
   break label$1;
  }
  while (1) {
   if (HEAP32[$3 + 20 >> 2] < 2) {
    HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 24 >> 2] - 1;
    HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 20 >> 2] + 12;
    continue;
   }
   break;
  }
  HEAP32[$3 + 12 >> 2] = integerDivideFloor(HEAP32[$3 + 24 >> 2], 100);
  HEAP32[$3 + 28 >> 2] = ((((((Math_imul(HEAP32[$3 + 24 >> 2], 365) + integerDivideFloor(HEAP32[$3 + 24 >> 2], 4) | 0) - HEAP32[$3 + 12 >> 2] | 0) + integerDivideFloor(HEAP32[$3 + 12 >> 2], 4) | 0) + Math_imul(HEAP32[$3 + 20 >> 2], 30) | 0) + ((Math_imul(HEAP32[$3 + 20 >> 2], 3) + 6 | 0) / 5 | 0) | 0) + HEAP32[$3 + 16 >> 2] | 0) - 719531;
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function graphicsStructInit($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 HEAP8[$0 + 8 | 0] = 0;
 HEAP8[$0 + 9 | 0] = 0;
 HEAP8[$0 + 10 | 0] = 0;
 HEAP8[$0 + 11 | 0] = 0;
 $0 = HEAP32[$4 + 12 >> 2];
 $1 = HEAP32[$4 + 8 >> 2];
 HEAP8[$0 + 12 | 0] = $1;
 HEAP8[$0 + 13 | 0] = $1 >>> 8;
 $0 = HEAP32[$4 + 12 >> 2];
 $1 = HEAP32[$4 + 4 >> 2];
 HEAP8[$0 + 14 | 0] = $1;
 HEAP8[$0 + 15 | 0] = $1 >>> 8;
 HEAP8[HEAP32[$4 + 12 >> 2] + 16 | 0] = HEAP32[$4 >> 2];
 graphicsStructResetState(HEAP32[$4 + 12 >> 2]);
 $0 = HEAP32[$4 + 12 >> 2];
 HEAP8[$0 + 44 | 0] = 0;
 HEAP8[$0 + 45 | 0] = 128;
 $0 = HEAP32[$4 + 12 >> 2];
 HEAP8[$0 + 46 | 0] = 0;
 HEAP8[$0 + 47 | 0] = 128;
 $0 = HEAP32[$4 + 12 >> 2];
 HEAP8[$0 + 40 | 0] = 255;
 HEAP8[$0 + 41 | 0] = 127;
 $0 = HEAP32[$4 + 12 >> 2];
 HEAP8[$0 + 42 | 0] = 255;
 HEAP8[$0 + 43 | 0] = 127;
 __stack_pointer = $4 + 16 | 0;
}

function jswrap_graphics_theme($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvNewObject();
 jsvObjectSetChildAndUnLock(HEAP32[$1 + 8 >> 2], 103993, jsvNewFromInteger(HEAPU8[189412] | HEAPU8[189413] << 8));
 jsvObjectSetChildAndUnLock(HEAP32[$1 + 8 >> 2], 103997, jsvNewFromInteger(HEAPU8[189414] | HEAPU8[189415] << 8));
 jsvObjectSetChildAndUnLock(HEAP32[$1 + 8 >> 2], 110890, jsvNewFromInteger(HEAPU8[189416] | HEAPU8[189417] << 8));
 jsvObjectSetChildAndUnLock(HEAP32[$1 + 8 >> 2], 110894, jsvNewFromInteger(HEAPU8[189418] | HEAPU8[189419] << 8));
 jsvObjectSetChildAndUnLock(HEAP32[$1 + 8 >> 2], 109556, jsvNewFromInteger(HEAPU8[189420] | HEAPU8[189421] << 8));
 jsvObjectSetChildAndUnLock(HEAP32[$1 + 8 >> 2], 109560, jsvNewFromInteger(HEAPU8[189422] | HEAPU8[189423] << 8));
 jsvObjectSetChildAndUnLock(HEAP32[$1 + 8 >> 2], 103074, jsvNewFromBool(HEAP8[189424] & 1));
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jsiExecuteEventCallbackArgsArray($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 $3 = $4;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = 0;
 label$1: {
  if (HEAP32[$3 + 16 >> 2]) {
   HEAP32[$3 + 12 >> 2] = jsvGetArrayLength(HEAP32[$3 + 16 >> 2]);
   if (HEAP32[$3 + 12 >> 2]) {
    $4 = $4 - ((HEAP32[$3 + 12 >> 2] << 2) + 15 & -16) | 0;
    __stack_pointer = $4;
    HEAP32[$3 + 8 >> 2] = $4;
    if (!HEAP32[$3 + 8 >> 2]) {
     HEAP8[$3 + 31 | 0] = 0;
     break label$1;
    }
    jsvGetArrayItems(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
   }
  }
  HEAP8[$3 + 7 | 0] = jsiExecuteEventCallback(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]) & 1;
  jsvUnLockMany(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
  HEAP8[$3 + 31 | 0] = HEAP8[$3 + 7 | 0] & 1;
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP8[$3 + 31 | 0] & 1;
}

function std____2____compressed_pair_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29___2c_20std____2__allocator_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29_______compressed_pair_std__nullptr_t_2c_20std____2____default_init_tag__28std__nullptr_t___2c_20std____2____default_init_tag___29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 std____2____compressed_pair_elem_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29___2c_200_2c_20false_____compressed_pair_elem_std__nullptr_t_2c_20void__28std__nullptr_t___29($0, HEAP32[$3 + 8 >> 2]);
 std____2____compressed_pair_elem_std____2__allocator_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29___2c_201_2c_20true_____compressed_pair_elem_28std____2____default_init_tag_29($0);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function jswrap_pipe_close_listener($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 label$1: {
  if (!(jsvIsObject(HEAP32[$2 + 28 >> 2]) & 1)) {
   break label$1;
  }
  HEAP32[$2 + 20 >> 2] = pipeGetArray(0);
  if (!HEAP32[$2 + 20 >> 2]) {
   break label$1;
  }
  jsvObjectIteratorNew($2 + 16 | 0, HEAP32[$2 + 20 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_16($2 + 16 | 0) & 1) {
    HEAP32[$2 + 12 >> 2] = jsvObjectIteratorGetValue_15($2 + 16 | 0);
    HEAP32[$2 + 8 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 24 >> 2]);
    if (HEAP32[$2 + 8 >> 2] == HEAP32[$2 + 28 >> 2]) {
     handlePipeClose(HEAP32[$2 + 20 >> 2], $2 + 16 | 0, HEAP32[$2 + 12 >> 2]);
    }
    jsvUnLock2(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2]);
    jsvObjectIteratorNext($2 + 16 | 0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree_16($2 + 16 | 0);
  jsvUnLock(HEAP32[$2 + 20 >> 2]);
 }
 __stack_pointer = $2 + 32 | 0;
}

function jswrap_regexp_constructor($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 label$1: {
  if (!(jsvIsString(HEAP32[$2 + 40 >> 2]) & 1)) {
   HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 40 >> 2];
   jsExceptionHere(3, 98544, $2 + 16 | 0);
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 32 >> 2] = jspNewObject(0, 101806);
  jsvObjectSetChild(HEAP32[$2 + 32 >> 2], 105447, HEAP32[$2 + 40 >> 2]);
  if (!(jsvIsUndefined(HEAP32[$2 + 36 >> 2]) & 1)) {
   label$4: {
    if (!(jsvIsString(HEAP32[$2 + 36 >> 2]) & 1)) {
     HEAP32[$2 >> 2] = HEAP32[$2 + 40 >> 2];
     jsExceptionHere(3, 98544, $2);
     break label$4;
    }
    jsvObjectSetChild(HEAP32[$2 + 32 >> 2], 100312, HEAP32[$2 + 36 >> 2]);
   }
  }
  jsvObjectSetChildAndUnLock(HEAP32[$2 + 32 >> 2], 96707, jsvNewFromInteger(0));
  HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
 }
 __stack_pointer = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}

function _jswrap_espruino_FFT_getData($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 80 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 76 >> 2] = $0;
 HEAP32[$3 + 72 >> 2] = $1;
 HEAP32[$3 + 68 >> 2] = $2;
 HEAP32[$3 + 4 >> 2] = 0;
 if (jsvIsIterable(HEAP32[$3 + 72 >> 2]) & 1) {
  jsvIteratorNew($3 + 8 | 0, HEAP32[$3 + 72 >> 2], 1);
  while (1) {
   $0 = 0;
   if (HEAPU32[$3 + 4 >> 2] < HEAPU32[$3 + 68 >> 2]) {
    $0 = jsvIteratorHasElement($3 + 8 | 0);
   }
   if ($0 & 1) {
    $4 = jsvIteratorGetFloatValue($3 + 8 | 0);
    $1 = HEAP32[$3 + 76 >> 2];
    $0 = HEAP32[$3 + 4 >> 2];
    HEAP32[$3 + 4 >> 2] = $0 + 1;
    HEAPF64[($0 << 3) + $1 >> 3] = $4;
    jsvIteratorNext($3 + 8 | 0);
    continue;
   }
   break;
  }
  jsvIteratorFree($3 + 8 | 0);
 }
 while (1) {
  if (HEAPU32[$3 + 4 >> 2] < HEAPU32[$3 + 68 >> 2]) {
   $1 = HEAP32[$3 + 76 >> 2];
   $0 = HEAP32[$3 + 4 >> 2];
   HEAP32[$3 + 4 >> 2] = $0 + 1;
   HEAPF64[($0 << 3) + $1 >> 3] = 0;
   continue;
  }
  break;
 }
 __stack_pointer = $3 + 80 | 0;
}

function jsvStringIteratorGotoEnd($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 while (1) {
  if (jsvGetLastChild(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]) & 65535) {
   HEAP32[$1 + 8 >> 2] = jsvLock(jsvGetLastChild(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]) & 65535);
   jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
   HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2] = HEAP32[$1 + 8 >> 2];
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$0 + 8 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] + HEAP32[$0 + 8 >> 2];
   $0 = jsvGetCharactersInVar(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
   HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] = $0;
   continue;
  }
  break;
 }
 HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2];
 label$3: {
  if (HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2]) {
   HEAP32[HEAP32[$1 + 12 >> 2] >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] - 1;
   break label$3;
  }
  HEAP32[HEAP32[$1 + 12 >> 2] >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
}

function _jswrap_prombox_all_resolve($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 HEAP32[$3 + 16 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 28 >> 2], 102677);
 if (HEAP32[$3 + 16 >> 2]) {
  HEAP32[$3 + 12 >> 2] = jsvObjectGetIntegerChild(HEAP32[$3 + 16 >> 2], 102057);
  HEAP32[$3 + 8 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 16 >> 2], 100360);
  if (HEAP32[$3 + 8 >> 2]) {
   jsvSetArrayItem(HEAP32[$3 + 8 >> 2], jsvGetInteger(HEAP32[$3 + 24 >> 2]), HEAP32[$3 + 20 >> 2]);
   HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] - 1;
   jsvObjectSetChildAndUnLock(HEAP32[$3 + 16 >> 2], 102057, jsvNewFromInteger(HEAP32[$3 + 12 >> 2]));
   if (!HEAP32[$3 + 12 >> 2]) {
    _jswrap_prombox_queueresolve(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 8 >> 2]);
   }
   jsvUnLock(HEAP32[$3 + 8 >> 2]);
  }
  jsvUnLock(HEAP32[$3 + 16 >> 2]);
 }
 __stack_pointer = $3 + 32 | 0;
}

function nativeCallGetCType() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 label$1: {
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 192) {
   jslMatch(192);
   HEAP32[$0 + 12 >> 2] = 0;
   break label$1;
  }
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 128) {
   HEAP32[$0 + 8 >> 2] = -1;
   HEAP32[$0 + 4 >> 2] = jslGetTokenValueAsString();
   if (!strcmp(HEAP32[$0 + 4 >> 2], 97700)) {
    HEAP32[$0 + 8 >> 2] = 4;
   }
   if (!strcmp(HEAP32[$0 + 4 >> 2], 105129)) {
    HEAP32[$0 + 8 >> 2] = 7;
   }
   if (!strcmp(HEAP32[$0 + 4 >> 2], 102708)) {
    HEAP32[$0 + 8 >> 2] = 3;
   }
   if (!strcmp(HEAP32[$0 + 4 >> 2], 102505)) {
    HEAP32[$0 + 8 >> 2] = 5;
   }
   if (!strcmp(HEAP32[$0 + 4 >> 2], 101591)) {
    HEAP32[$0 + 8 >> 2] = 1;
   }
   if (!strcmp(HEAP32[$0 + 4 >> 2], 98096)) {
    HEAP32[$0 + 8 >> 2] = 6;
   }
   jslMatch(128);
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2];
   break label$1;
  }
  HEAP32[$0 + 12 >> 2] = -1;
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function jsvArrayBufferIteratorGetValue($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP8[$2 + 23 | 0] = $1;
 label$1: {
  if (!HEAPU8[HEAP32[$2 + 24 >> 2] + 36 | 0]) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  jsvArrayBufferIteratorGetValueData(HEAP32[$2 + 24 >> 2], $2 + 12 | 0);
  if (HEAP8[$2 + 23 | 0] & 1) {
   reverseBytes($2 + 12 | 0, HEAPU8[HEAP32[$2 + 24 >> 2] + 36 | 0] & 15);
  }
  if (HEAPU8[HEAP32[$2 + 24 >> 2] + 36 | 0] & 32) {
   HEAP32[$2 + 28 >> 2] = jsvNewFromFloat(jsvArrayBufferIteratorDataToFloat(HEAP32[$2 + 24 >> 2], $2 + 12 | 0));
   break label$1;
  }
  HEAP32[$2 + 8 >> 2] = jsvArrayBufferIteratorDataToInt(HEAP32[$2 + 24 >> 2], $2 + 12 | 0);
  if (HEAPU8[HEAP32[$2 + 24 >> 2] + 36 | 0] == 4) {
   HEAP32[$2 + 28 >> 2] = jsvNewFromLongInteger(HEAP32[$2 + 8 >> 2], 0);
   break label$1;
  }
  HEAP32[$2 + 28 >> 2] = jsvNewFromInteger(HEAP32[$2 + 8 >> 2]);
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___unique_ptr_true_2c_20void__28TfLitePoolParams__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__2c_20true_____good_rval_ref_type_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 std____2____compressed_pair_TfLitePoolParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_____compressed_pair_TfLitePoolParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28TfLitePoolParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___29($0, $3 + 8 | 0, HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___unique_ptr_true_2c_20void__28TfLiteConvParams__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__2c_20true_____good_rval_ref_type_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 std____2____compressed_pair_TfLiteConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_____compressed_pair_TfLiteConvParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28TfLiteConvParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___29($0, $3 + 8 | 0, HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function jswrap_spi_setup($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 label$1: {
  if (!(jsvIsObject(HEAP32[$2 + 28 >> 2]) & 1)) {
   break label$1;
  }
  HEAP8[$2 + 23 | 0] = jsiGetDeviceFromClass(HEAP32[$2 + 28 >> 2]);
  if (!(jsspiPopulateSPIInfo($2 + 8 | 0, HEAP32[$2 + 24 >> 2]) & 1)) {
   break label$1;
  }
  label$2: {
   if (!(HEAPU8[$2 + 23 | 0] < 25 | HEAPU8[$2 + 23 | 0] > 25)) {
    jshSPISetup(HEAPU8[$2 + 23 | 0], $2 + 8 | 0);
    break label$2;
   }
   if (HEAPU8[$2 + 23 | 0]) {
    break label$1;
   }
   if (HEAPU8[$2 + 13 | 0] != 255) {
    jshPinSetState(HEAPU8[$2 + 13 | 0], 1);
   }
   if (HEAPU8[$2 + 14 | 0] != 255) {
    jshPinSetState(HEAPU8[$2 + 14 | 0], 4);
   }
   if (HEAPU8[$2 + 15 | 0] != 255) {
    jshPinSetState(HEAPU8[$2 + 15 | 0], 1);
   }
  }
  jsvObjectSetOrRemoveChild(HEAP32[$2 + 28 >> 2], 100220, HEAP32[$2 + 24 >> 2]);
 }
 __stack_pointer = $2 + 32 | 0;
}

function jsvStringIteratorUpdatePtr($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1: {
  if (jsvIsFlatString(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]) & 1) {
   $0 = jsvGetFlatStringPointer(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
   HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2] = $0;
   break label$1;
  }
  label$3: {
   if (jsvIsNativeString(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]) & 1) {
    $0 = HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2];
    HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
    break label$3;
   }
   if (!(jsvIsFlashString(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]) & 1)) {
    label$6: {
     if (HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]) {
      HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2];
      break label$6;
     }
     HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2] = 0;
    }
   }
  }
 }
 __stack_pointer = $1 + 16 | 0;
}

function jsi2cPopulateI2CInfo($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer + -64 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 56 >> 2] = $0;
 HEAP32[$2 + 52 >> 2] = $1;
 jshI2CInitInfo(HEAP32[$2 + 56 >> 2]);
 HEAP32[$2 + 16 >> 2] = 102987;
 HEAP16[$2 + 20 >> 1] = 13;
 HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 56 >> 2] + 4;
 HEAP32[$2 + 28 >> 2] = 107910;
 HEAP16[$2 + 32 >> 1] = 13;
 HEAP32[$2 + 36 >> 2] = HEAP32[$2 + 56 >> 2] + 5;
 HEAP32[$2 + 40 >> 2] = 104653;
 HEAP16[$2 + 44 >> 1] = 10;
 HEAP32[$2 + 48 >> 2] = HEAP32[$2 + 56 >> 2];
 label$1: {
  if (jsvReadConfigObject(HEAP32[$2 + 52 >> 2], $2 + 16 | 0, 3) & 1) {
   HEAP8[$2 + 15 | 0] = 1;
   $0 = HEAP32[$2 + 56 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) < 100) {
    jsExceptionHere(1, 104641, 0);
    HEAP8[$2 + 15 | 0] = 0;
   }
   HEAP8[$2 + 63 | 0] = HEAP8[$2 + 15 | 0] & 1;
   break label$1;
  }
  HEAP8[$2 + 63 | 0] = 0;
 }
 __stack_pointer = $2 - -64 | 0;
 return HEAP8[$2 + 63 | 0] & 1;
}

function jswrap_spi_send_cb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = $3 - (HEAP32[$3 + 8 >> 2] + 15 & -16) | 0;
 __stack_pointer = $0;
 HEAP32[$3 >> 2] = $0;
 FUNCTION_TABLE[HEAP32[HEAP32[$3 + 4 >> 2] >> 2]](HEAP32[$3 + 12 >> 2], HEAP32[$3 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2] + 4 | 0);
 $0 = HEAP32[$3 + 4 >> 2];
 HEAP32[$0 + 24 >> 2] = HEAP32[$3 + 8 >> 2] + HEAP32[$0 + 24 >> 2];
 $0 = HEAP32[$3 + 4 >> 2];
 HEAP32[$0 + 20 >> 2] = HEAP32[$3 + 8 >> 2] + HEAP32[$0 + 20 >> 2];
 while (1) {
  $0 = HEAP32[$3 + 8 >> 2];
  HEAP32[$3 + 8 >> 2] = $0 - 1;
  if ($0) {
   $1 = HEAP32[$3 + 4 >> 2];
   $0 = HEAP32[$3 >> 2];
   HEAP32[$3 >> 2] = $0 + 1;
   jsvArrayBufferIteratorSetByteValue($1 + 28 | 0, HEAP8[$0 | 0]);
   jsvArrayBufferIteratorNext(HEAP32[$3 + 4 >> 2] + 28 | 0);
   continue;
  }
  break;
 }
 __stack_pointer = $3 + 16 | 0;
}

function jsfNameFromVar($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 44 >> 2] = $1;
 $2 = $3;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP8[$2 + 21 | 0] = 0;
 HEAP8[$2 + 22 | 0] = 0;
 HEAP8[$2 + 23 | 0] = 0;
 HEAP8[$2 + 24 | 0] = 0;
 HEAP8[$2 + 25 | 0] = 0;
 HEAP8[$2 + 26 | 0] = 0;
 HEAP8[$2 + 27 | 0] = 0;
 HEAP8[$2 + 28 | 0] = 0;
 HEAP32[$2 + 16 >> 2] = 0;
 HEAP32[$2 + 20 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$2 + 12 >> 2] = 0;
 jsvGetString(HEAP32[$2 + 44 >> 2], $2, 29);
 $1 = HEAP32[$2 >> 2];
 $2 = HEAP32[$2 + 4 >> 2];
 $4 = $1;
 $1 = $0;
 HEAP32[$1 >> 2] = $4;
 HEAP32[$1 + 4 >> 2] = $2;
 HEAP32[$1 + 24 >> 2] = HEAP32[$3 + 24 >> 2];
 $1 = HEAP32[$3 + 20 >> 2];
 $2 = HEAP32[$3 + 16 >> 2];
 $4 = $2;
 $2 = $0;
 HEAP32[$2 + 16 >> 2] = $4;
 HEAP32[$2 + 20 >> 2] = $1;
 $2 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$3 + 8 >> 2];
 $4 = $1;
 $1 = $0;
 HEAP32[$1 + 8 >> 2] = $4;
 HEAP32[$1 + 12 >> 2] = $2;
 __stack_pointer = $3 + 48 | 0;
}

function jswrap_espruino_getErrorFlagArray($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 11 | 0] = $0;
 HEAP32[$1 + 4 >> 2] = jsvNewEmptyArray();
 label$1: {
  if (!HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  if (HEAP8[$1 + 11 | 0] & 1) {
   jsvArrayPushString(HEAP32[$1 + 4 >> 2], 109326);
  }
  if (HEAPU8[$1 + 11 | 0] & 2) {
   jsvArrayPushString(HEAP32[$1 + 4 >> 2], 109314);
  }
  if (HEAPU8[$1 + 11 | 0] & 4) {
   jsvArrayPushString(HEAP32[$1 + 4 >> 2], 109441);
  }
  if (HEAPU8[$1 + 11 | 0] & 8) {
   jsvArrayPushString(HEAP32[$1 + 4 >> 2], 108371);
  }
  if (HEAPU8[$1 + 11 | 0] & 16) {
   jsvArrayPushString(HEAP32[$1 + 4 >> 2], 108375);
  }
  if (HEAPU8[$1 + 11 | 0] & 32) {
   jsvArrayPushString(HEAP32[$1 + 4 >> 2], 108359);
  }
  if (HEAPU8[$1 + 11 | 0] & 64) {
   jsvArrayPushString(HEAP32[$1 + 4 >> 2], 108552);
  }
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jswrap_waveform_kill() {
 var $0 = 0;
 $0 = __stack_pointer - 32 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 28 >> 2] = jsvObjectGetChildIfExists(HEAP32[46748], 104344);
 if (HEAP32[$0 + 28 >> 2]) {
  jsvObjectIteratorNew($0 + 24 | 0, HEAP32[$0 + 28 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_18($0 + 24 | 0) & 1) {
    HEAP32[$0 + 20 >> 2] = jsvObjectIteratorGetValue_17($0 + 24 | 0);
    HEAP8[$0 + 19 | 0] = jsvObjectGetBoolChild(HEAP32[$0 + 20 >> 2], 103945) & 1;
    if (HEAP8[$0 + 19 | 0] & 1) {
     HEAP32[$0 + 12 >> 2] = jswrap_waveform_getBuffer(HEAP32[$0 + 20 >> 2], 0, 0);
     if (!(jstStopBufferTimerTask(HEAP32[$0 + 12 >> 2]) & 1)) {
      jsExceptionHere(1, 106428, 0);
     }
     jsvUnLock(HEAP32[$0 + 12 >> 2]);
    }
    jsvUnLock(HEAP32[$0 + 20 >> 2]);
    jsvObjectIteratorRemoveAndGotoNext($0 + 24 | 0, HEAP32[$0 + 28 >> 2]);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree_18($0 + 24 | 0);
  jsvUnLock(HEAP32[$0 + 28 >> 2]);
 }
 __stack_pointer = $0 + 32 | 0;
}

function jswrap_i2c_setup($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 label$1: {
  if (!(jsvIsObject(HEAP32[$2 + 28 >> 2]) & 1)) {
   break label$1;
  }
  HEAP8[$2 + 23 | 0] = jsiGetDeviceFromClass(HEAP32[$2 + 28 >> 2]);
  if (!(jsi2cPopulateI2CInfo($2 + 8 | 0, HEAP32[$2 + 24 >> 2]) & 1)) {
   break label$1;
  }
  label$2: {
   if (!(HEAPU8[$2 + 23 | 0] < 26 | HEAPU8[$2 + 23 | 0] > 26)) {
    jshI2CSetup(HEAPU8[$2 + 23 | 0], $2 + 8 | 0);
    break label$2;
   }
   if (!HEAPU8[$2 + 23 | 0]) {
    if (HEAPU8[$2 + 12 | 0] != 255) {
     jshPinSetValue(HEAPU8[$2 + 12 | 0], 1);
     jshPinSetState(HEAPU8[$2 + 12 | 0], 3);
    }
    if (HEAPU8[$2 + 13 | 0] != 255) {
     jshPinSetValue(HEAPU8[$2 + 13 | 0], 1);
     jshPinSetState(HEAPU8[$2 + 13 | 0], 3);
    }
   }
  }
  jsvObjectSetOrRemoveChild(HEAP32[$2 + 28 >> 2], 100220, HEAP32[$2 + 24 >> 2]);
 }
 __stack_pointer = $2 + 32 | 0;
}

function jsfNameFromString($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 44 >> 2] = $1;
 $2 = $3;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP8[$2 + 21 | 0] = 0;
 HEAP8[$2 + 22 | 0] = 0;
 HEAP8[$2 + 23 | 0] = 0;
 HEAP8[$2 + 24 | 0] = 0;
 HEAP8[$2 + 25 | 0] = 0;
 HEAP8[$2 + 26 | 0] = 0;
 HEAP8[$2 + 27 | 0] = 0;
 HEAP8[$2 + 28 | 0] = 0;
 HEAP32[$2 + 16 >> 2] = 0;
 HEAP32[$2 + 20 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$2 + 12 >> 2] = 0;
 strcpy($2, HEAP32[$2 + 44 >> 2]);
 $1 = HEAP32[$2 >> 2];
 $2 = HEAP32[$2 + 4 >> 2];
 $4 = $1;
 $1 = $0;
 HEAP32[$1 >> 2] = $4;
 HEAP32[$1 + 4 >> 2] = $2;
 HEAP32[$1 + 24 >> 2] = HEAP32[$3 + 24 >> 2];
 $1 = HEAP32[$3 + 20 >> 2];
 $2 = HEAP32[$3 + 16 >> 2];
 $4 = $2;
 $2 = $0;
 HEAP32[$2 + 16 >> 2] = $4;
 HEAP32[$2 + 20 >> 2] = $1;
 $2 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$3 + 8 >> 2];
 $4 = $1;
 $1 = $0;
 HEAP32[$1 + 8 >> 2] = $4;
 HEAP32[$1 + 12 >> 2] = $2;
 __stack_pointer = $3 + 48 | 0;
}

function lcdSetPixel_ArrayBuffer_flat1($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 $0 = HEAP32[$4 + 28 >> 2];
 HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 24 >> 2] + Math_imul(HEAP32[$4 + 20 >> 2], HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8);
 label$1: {
  if (HEAP32[$4 + 16 >> 2]) {
   $0 = HEAP32[$4 + 28 >> 2];
   $0 = (HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24)) + (HEAP32[$4 + 12 >> 2] >> 3) | 0;
   HEAP8[$0 | 0] = HEAPU8[$0 | 0] | 128 >> (HEAP32[$4 + 12 >> 2] & 7) & 255;
   break label$1;
  }
  $0 = HEAP32[$4 + 28 >> 2];
  $0 = (HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24)) + (HEAP32[$4 + 12 >> 2] >> 3) | 0;
  HEAP8[$0 | 0] = HEAPU8[$0 | 0] & (65407 >> (HEAP32[$4 + 12 >> 2] & 7) & 255);
 }
}

function jswrap_modules_addCached($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 label$1: {
  label$2: {
   if (jsvIsString(HEAP32[$2 + 28 >> 2]) & 1) {
    if (jsvIsString(HEAP32[$2 + 24 >> 2]) & 1) {
     break label$2;
    }
    if (jsvIsFunction(HEAP32[$2 + 24 >> 2]) & 1) {
     break label$2;
    }
   }
   jsExceptionHere(1, 126174, 0);
   break label$1;
  }
  HEAP32[$2 + 20 >> 2] = jswrap_modules_getModuleList();
  if (!HEAP32[$2 + 20 >> 2]) {
   break label$1;
  }
  HEAP32[$2 + 16 >> 2] = jspEvaluateModule(HEAP32[$2 + 24 >> 2]);
  label$4: {
   if (!HEAP32[$2 + 16 >> 2]) {
    HEAP32[$2 >> 2] = HEAP32[$2 + 28 >> 2];
    jsExceptionHere(1, 101732, $2);
    break label$4;
   }
   jsvObjectSetChildVar(HEAP32[$2 + 20 >> 2], HEAP32[$2 + 28 >> 2], HEAP32[$2 + 16 >> 2]);
   jsvUnLock(HEAP32[$2 + 16 >> 2]);
  }
  jsvUnLock(HEAP32[$2 + 20 >> 2]);
 }
 __stack_pointer = $2 + 32 | 0;
}

function jsvCreateEmptyVarList() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 32 | 0;
 __stack_pointer = $0;
 HEAP8[154466] = 1;
 HEAP16[77234] = 0;
 jsvSetNextSibling($0 + 16 | 0, 0);
 HEAP32[$0 + 12 >> 2] = $0 + 16;
 HEAP16[$0 + 10 >> 1] = 1;
 while (1) {
  if (HEAPU16[$0 + 10 >> 1] <= 2500) {
   HEAP32[$0 + 4 >> 2] = jsvGetAddressOf(HEAPU16[$0 + 10 >> 1]);
   $1 = HEAP32[$0 + 4 >> 2];
   label$3: {
    if (!((HEAPU8[$1 + 11 | 0] | HEAPU8[$1 + 12 | 0] << 8) & 63)) {
     jsvSetNextSibling(HEAP32[$0 + 12 >> 2], HEAPU16[$0 + 10 >> 1]);
     HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 4 >> 2];
     break label$3;
    }
    if (jsvIsFlatString(HEAP32[$0 + 4 >> 2]) & 1) {
     HEAP16[$0 + 10 >> 1] = HEAPU16[$0 + 10 >> 1] + jsvGetFlatStringBlocks(HEAP32[$0 + 4 >> 2]);
    }
   }
   HEAP16[$0 + 10 >> 1] = HEAPU16[$0 + 10 >> 1] + 1;
   continue;
  }
  break;
 }
 jsvSetNextSibling(HEAP32[$0 + 12 >> 2], 0);
 HEAP16[77234] = jsvGetNextSibling($0 + 16 | 0);
 HEAP8[154466] = 0;
 __stack_pointer = $0 + 32 | 0;
}

function i2c_stop($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 i2c_pin_wr0(HEAPU8[HEAP32[$1 + 12 >> 2] + 1 | 0]);
 dly(HEAP32[$1 + 12 >> 2]);
 i2c_pin_wr1(HEAPU8[HEAP32[$1 + 12 >> 2]]);
 HEAP32[$1 + 8 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2];
 while (1) {
  $0 = 0;
  if (!(jshPinGetValue(HEAPU8[HEAP32[$1 + 12 >> 2]]) & 1)) {
   $0 = HEAP32[$1 + 8 >> 2] != 0;
  }
  if ($0) {
   HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] - 1;
   continue;
  }
  break;
 }
 if (!(HEAP32[$1 + 8 >> 2] | !HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2])) {
  err(126140);
 }
 dly(HEAP32[$1 + 12 >> 2]);
 i2c_pin_wr1(HEAPU8[HEAP32[$1 + 12 >> 2] + 1 | 0]);
 dly(HEAP32[$1 + 12 >> 2]);
 label$5: {
  if (!HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2]) {
   break label$5;
  }
  if (jshPinGetValue(HEAPU8[HEAP32[$1 + 12 >> 2] + 1 | 0]) & 1) {
   break label$5;
  }
  err(126155);
 }
 dly(HEAP32[$1 + 12 >> 2]);
 HEAP8[HEAP32[$1 + 12 >> 2] + 2 | 0] = 0;
 __stack_pointer = $1 + 16 | 0;
}

function tflite__MicroInterpreter__Init_28tflite__Profiler__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = tflite__Model__subgraphs_28_29_20const(HEAP32[$0 + 4 >> 2]);
 label$1: {
  if ((flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph____size_28_29_20const(HEAP32[$2 + 4 >> 2]) | 0) != 1) {
   tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$0 + 12 >> 2], 129146, 0);
   HEAP32[$0 + 112 >> 2] = 1;
   break label$1;
  }
  HEAP32[$0 + 116 >> 2] = flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph____operator_5b_5d_28unsigned_20int_29_20const(HEAP32[$2 + 4 >> 2], 0);
  HEAP32[$0 + 28 >> 2] = $0 + 124;
  HEAP32[$0 + 36 >> 2] = 643;
  HEAP32[$0 + 96 >> 2] = 644;
  HEAP32[$0 + 100 >> 2] = 645;
  HEAP32[$0 + 52 >> 2] = 1;
  HEAP32[$0 + 68 >> 2] = HEAP32[$2 + 8 >> 2];
  HEAP32[$0 + 112 >> 2] = 0;
 }
 __stack_pointer = $2 + 16 | 0;
}

function st_d_yield_literal($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1: {
  if (HEAPU32[HEAP32[HEAP32[$2 + 20 >> 2] + 8 >> 2] >> 2] < HEAPU32[HEAP32[$2 + 20 >> 2] + 4 >> 2]) {
   HEAP16[$2 + 18 >> 1] = get_bits(HEAP32[$2 + 24 >> 2], 8);
   if (HEAPU16[$2 + 18 >> 1] == 65535) {
    HEAP32[$2 + 28 >> 2] = 1;
    break label$1;
   }
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 24 >> 2] + 45;
   HEAP16[$2 + 10 >> 1] = 255;
   HEAP8[$2 + 9 | 0] = HEAPU16[$2 + 18 >> 1];
   $3 = HEAPU8[$2 + 9 | 0];
   $4 = HEAP32[$2 + 12 >> 2];
   $0 = HEAP32[$2 + 24 >> 2];
   $1 = HEAPU16[$0 + 8 >> 1];
   HEAP16[$0 + 8 >> 1] = $1 + 1;
   HEAP8[(HEAPU16[$2 + 10 >> 1] & $1) + $4 | 0] = $3;
   push_byte(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], HEAPU8[$2 + 9 | 0]);
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 28 >> 2] = 1;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jswrap_graphics_blendColor($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = __stack_pointer - 112 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 104 >> 2] = $0;
 HEAP32[$4 + 100 >> 2] = $1;
 HEAP32[$4 + 96 >> 2] = $2;
 HEAP32[$4 + 92 >> 2] = $3;
 label$1: {
  if (!(graphicsGetFromVar($4 + 16 | 0, HEAP32[$4 + 104 >> 2]) & 1)) {
   HEAP32[$4 + 108 >> 2] = 0;
   break label$1;
  }
  HEAP32[$4 + 12 >> 2] = jswrap_graphics_toColor(HEAP32[$4 + 104 >> 2], HEAP32[$4 + 100 >> 2], 0, 0);
  HEAP32[$4 + 8 >> 2] = jswrap_graphics_toColor(HEAP32[$4 + 104 >> 2], HEAP32[$4 + 96 >> 2], 0, 0);
  $1 = $4 + 16 | 0;
  $2 = HEAP32[$4 + 8 >> 2];
  $3 = HEAP32[$4 + 12 >> 2];
  $5 = jsvGetFloat(HEAP32[$4 + 92 >> 2]) * 256;
  label$3: {
   if (Math_abs($5) < 2147483648) {
    $0 = ~~$5;
    break label$3;
   }
   $0 = -2147483648;
  }
  HEAP32[$4 + 108 >> 2] = graphicsBlendColor($1, $2, $3, $0);
 }
 __stack_pointer = $4 + 112 | 0;
 return HEAP32[$4 + 108 >> 2];
}

function tflite__GreedyMemoryPlanner__GetOffsetForBuffer_28tflite__ErrorReporter__2c_20int_2c_20int__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 24 >> 2] = $0;
 HEAP32[$4 + 20 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $2;
 HEAP32[$4 + 12 >> 2] = $3;
 $0 = HEAP32[$4 + 24 >> 2];
 tflite__GreedyMemoryPlanner__CalculateOffsetsIfNeeded_28_29($0);
 label$1: {
  if (!(HEAP32[$4 + 16 >> 2] < HEAP32[$0 + 8 >> 2] & HEAP32[$4 + 16 >> 2] >= 0)) {
   $1 = HEAP32[$4 + 20 >> 2];
   $2 = HEAP32[$4 + 16 >> 2];
   HEAP32[$4 + 4 >> 2] = HEAP32[$0 + 8 >> 2];
   HEAP32[$4 >> 2] = $2;
   tflite__ErrorReporter__Report_28char_20const__2c_20____29($1, 107450, $4);
   HEAP32[$4 + 28 >> 2] = 1;
   break label$1;
  }
  HEAP32[HEAP32[$4 + 12 >> 2] >> 2] = HEAP32[HEAP32[$0 + 36 >> 2] + (HEAP32[$4 + 16 >> 2] << 2) >> 2];
  HEAP32[$4 + 28 >> 2] = 0;
 }
 __stack_pointer = $4 + 32 | 0;
 return HEAP32[$4 + 28 >> 2];
}

function jswrap_array_concat($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP32[$2 + 20 >> 2] = jsvNewEmptyArray();
 jsvObjectIteratorNew($2 + 16 | 0, HEAP32[$2 + 24 >> 2]);
 HEAP32[$2 + 12 >> 2] = jsvLockAgain(HEAP32[$2 + 28 >> 2]);
 while (1) {
  label$2: {
   if (jsvIsArray(HEAP32[$2 + 12 >> 2]) & 1) {
    jsvArrayPushAll(HEAP32[$2 + 20 >> 2], HEAP32[$2 + 12 >> 2], 0);
    break label$2;
   }
   jsvArrayPush(HEAP32[$2 + 20 >> 2], HEAP32[$2 + 12 >> 2]);
  }
  jsvUnLock(HEAP32[$2 + 12 >> 2]);
  label$4: {
   if (jsvObjectIteratorHasValue_6($2 + 16 | 0) & 1) {
    $0 = jsvObjectIteratorGetValue_6($2 + 16 | 0);
    break label$4;
   }
   $0 = 0;
  }
  HEAP32[$2 + 12 >> 2] = $0;
  jsvObjectIteratorNext($2 + 16 | 0);
  if (HEAP32[$2 + 12 >> 2]) {
   continue;
  }
  break;
 }
 jsvObjectIteratorFree_6($2 + 16 | 0);
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 20 >> 2];
}

function jswrap_pipe_drain_listener($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 label$1: {
  if (!(jsvIsObject(HEAP32[$1 + 28 >> 2]) & 1)) {
   break label$1;
  }
  HEAP32[$1 + 24 >> 2] = pipeGetArray(0);
  if (!HEAP32[$1 + 24 >> 2]) {
   break label$1;
  }
  jsvObjectIteratorNew($1 + 16 | 0, HEAP32[$1 + 24 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_16($1 + 16 | 0) & 1) {
    HEAP32[$1 + 12 >> 2] = jsvObjectIteratorGetValue_15($1 + 16 | 0);
    HEAP32[$1 + 8 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 12 >> 2], 102458);
    if (HEAP32[$1 + 8 >> 2] == HEAP32[$1 + 28 >> 2]) {
     jsvObjectSetChildAndUnLock(HEAP32[$1 + 12 >> 2], 97874, jsvNewFromBool(0));
    }
    jsvUnLock2(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2]);
    jsvObjectIteratorNext($1 + 16 | 0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree_16($1 + 16 | 0);
  jsvUnLock(HEAP32[$1 + 24 >> 2]);
 }
 __stack_pointer = $1 + 32 | 0;
}

function jspeFunctionDefinition($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 27 | 0] = $0;
 HEAP32[$1 + 20 >> 2] = 0;
 HEAP8[$1 + 19 | 0] = (HEAP32[46755] & 63) == 1;
 if (HEAP8[$1 + 19 | 0] & 1) {
  HEAP32[$1 + 20 >> 2] = jsvNewWithFlags(7);
 }
 HEAP32[$1 + 12 >> 2] = 0;
 if (!(!(HEAP8[$1 + 27 | 0] & 1) | HEAP16[HEAP32[38615] + 2 >> 1] != 128)) {
  if (HEAP32[$1 + 20 >> 2]) {
   HEAP32[$1 + 12 >> 2] = jslGetTokenValueAsVar();
  }
  jslGetNextToken();
 }
 label$4: {
  if (!(jspeFunctionArguments(HEAP32[$1 + 20 >> 2]) & 1)) {
   jsvUnLock2(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 20 >> 2]);
   HEAP32[$1 + 28 >> 2] = 0;
   break label$4;
  }
  jspeFunctionDefinitionInternal(HEAP32[$1 + 20 >> 2], 0);
  if (!(!HEAP32[$1 + 20 >> 2] | !HEAP32[$1 + 12 >> 2])) {
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 20 >> 2], 102698, HEAP32[$1 + 12 >> 2]);
  }
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 20 >> 2];
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function jswrap_espruino_variance($0, $1) {
 $0 = $0 | 0;
 $1 = +$1;
 var $2 = 0;
 $2 = __stack_pointer - 112 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 100 >> 2] = $0;
 HEAPF64[$2 + 88 >> 3] = $1;
 label$1: {
  if (!(jsvIsIterable(HEAP32[$2 + 100 >> 2]) & 1)) {
   HEAP32[$2 >> 2] = HEAP32[$2 + 100 >> 2];
   jsExceptionHere(1, 98330, $2);
   HEAPF64[$2 + 104 >> 3] = nan;
   break label$1;
  }
  HEAPF64[$2 + 80 >> 3] = 0;
  jsvIteratorNew($2 + 16 | 0, HEAP32[$2 + 100 >> 2], 1);
  while (1) {
   if (jsvIteratorHasElement($2 + 16 | 0) & 1) {
    HEAPF64[$2 + 8 >> 3] = jsvIteratorGetFloatValue($2 + 16 | 0);
    HEAPF64[$2 + 8 >> 3] = HEAPF64[$2 + 8 >> 3] - HEAPF64[$2 + 88 >> 3];
    HEAPF64[$2 + 80 >> 3] = HEAPF64[$2 + 8 >> 3] * HEAPF64[$2 + 8 >> 3] + HEAPF64[$2 + 80 >> 3];
    jsvIteratorNext($2 + 16 | 0);
    continue;
   }
   break;
  }
  jsvIteratorFree($2 + 16 | 0);
  HEAPF64[$2 + 104 >> 3] = HEAPF64[$2 + 80 >> 3];
 }
 __stack_pointer = $2 + 112 | 0;
 return +HEAPF64[$2 + 104 >> 3];
}

function jsiTabComplete_findCommon($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 12 >> 2];
 label$1: {
  if (jsvGetStringLength(HEAP32[$2 + 8 >> 2]) >>> 0 <= HEAPU32[HEAP32[$2 + 4 >> 2] >> 2]) {
   break label$1;
  }
  if (jsvCompareString(HEAP32[HEAP32[$2 + 4 >> 2] + 4 >> 2], HEAP32[$2 + 8 >> 2], 0, 0, 1)) {
   break label$1;
  }
  $0 = HEAP32[$2 + 4 >> 2];
  HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
  label$2: {
   if (HEAP32[HEAP32[$2 + 4 >> 2] + 8 >> 2]) {
    HEAP32[$2 >> 2] = jsvGetCommonCharacters(HEAP32[HEAP32[$2 + 4 >> 2] + 8 >> 2], HEAP32[$2 + 8 >> 2]);
    jsvUnLock(HEAP32[HEAP32[$2 + 4 >> 2] + 8 >> 2]);
    HEAP32[HEAP32[$2 + 4 >> 2] + 8 >> 2] = HEAP32[$2 >> 2];
    break label$2;
   }
   $0 = jsvLockAgain(HEAP32[$2 + 8 >> 2]);
   HEAP32[HEAP32[$2 + 4 >> 2] + 8 >> 2] = $0;
  }
 }
 __stack_pointer = $2 + 16 | 0;
}

function int_20gemmlowp__ShiftLeft_int__28int_2c_20int_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 32 | 0;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 $0 = HEAP32[$2 + 28 >> 2];
 $1 = $0 >> 31;
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 $1 = HEAP32[$2 + 16 >> 2];
 $4 = $1;
 $0 = HEAP32[$2 + 20 >> 2];
 $3 = $0;
 $1 = 1 << HEAP32[$2 + 24 >> 2];
 $0 = $1 >> 31;
 $5 = $0;
 $0 = $3;
 $3 = $1;
 $1 = $5;
 $1 = __wasm_i64_mul($4, $0, $3, $1);
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = i64toi32_i32$HIGH_BITS;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = -2147483648;
 HEAP32[$2 >> 2] = 2147483647;
 $0 = HEAP32[$2 + 8 >> 2];
 $1 = HEAP32[$2 + 12 >> 2];
 if (($1 | 0) < 0 & $0 >>> 0 < 2147483648 | ($1 | 0) < -1) {
  $0 = -2147483648;
 } else {
  $0 = HEAP32[$2 + 8 >> 2];
  $1 = HEAP32[$2 + 12 >> 2];
  if ($0 >>> 0 > 2147483647 & ($1 | 0) >= 0 | ($1 | 0) > 0) {
   $0 = 2147483647;
  } else {
   $0 = HEAP32[$2 + 8 >> 2];
  }
 }
 return $0;
}

function jswrap_espruino_sum($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 96 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 84 >> 2] = $0;
 label$1: {
  label$2: {
   if (jsvIsString(HEAP32[$1 + 84 >> 2]) & 1) {
    break label$2;
   }
   if (jsvIsArray(HEAP32[$1 + 84 >> 2]) & 1) {
    break label$2;
   }
   if (jsvIsArrayBuffer(HEAP32[$1 + 84 >> 2]) & 1) {
    break label$2;
   }
   HEAP32[$1 >> 2] = HEAP32[$1 + 84 >> 2];
   jsExceptionHere(1, 98122, $1);
   HEAPF64[$1 + 88 >> 3] = nan;
   break label$1;
  }
  HEAPF64[$1 + 72 >> 3] = 0;
  jsvIteratorNew($1 + 8 | 0, HEAP32[$1 + 84 >> 2], 0);
  while (1) {
   if (jsvIteratorHasElement($1 + 8 | 0) & 1) {
    $2 = jsvIteratorGetFloatValue($1 + 8 | 0);
    HEAPF64[$1 + 72 >> 3] = HEAPF64[$1 + 72 >> 3] + $2;
    jsvIteratorNext($1 + 8 | 0);
    continue;
   }
   break;
  }
  jsvIteratorFree($1 + 8 | 0);
  HEAPF64[$1 + 88 >> 3] = HEAPF64[$1 + 72 >> 3];
 }
 __stack_pointer = $1 + 96 | 0;
 return +HEAPF64[$1 + 88 >> 3];
}

function jsvIteratorNext($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1: {
  label$2: {
   switch (HEAP32[HEAP32[$1 + 12 >> 2] >> 2] - 1 | 0) {
   case 3:
    $0 = HEAP32[$1 + 12 >> 2];
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
    label$6: {
     if (!(jsvIsIntegerish(HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2]) & 1)) {
      break label$6;
     }
     if ((jsvGetInteger(HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2]) | 0) >= HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]) {
      break label$6;
     }
     jsvObjectIteratorNext(HEAP32[$1 + 12 >> 2] + 4 | 0);
    }
    break label$1;

   case 1:
    jsvObjectIteratorNext(HEAP32[$1 + 12 >> 2] + 4 | 0);
    break label$1;

   case 0:
    jsvStringIteratorNext(HEAP32[$1 + 12 >> 2] + 4 | 0);
    break label$1;

   case 2:
    break label$2;

   default:
    break label$1;
   }
  }
  jsvArrayBufferIteratorNext(HEAP32[$1 + 12 >> 2] + 4 | 0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function jsvArrayPopFirst($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (jsvGetFirstChild(HEAP32[$1 + 8 >> 2]) & 65535) {
   HEAP32[$1 + 4 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$1 + 8 >> 2]) & 65535);
   if ((jsvGetFirstChild(HEAP32[$1 + 8 >> 2]) & 65535) == (jsvGetLastChild(HEAP32[$1 + 8 >> 2]) & 65535)) {
    jsvSetLastChild(HEAP32[$1 + 8 >> 2], 0);
   }
   jsvSetFirstChild(HEAP32[$1 + 8 >> 2], jsvGetNextSibling(HEAP32[$1 + 4 >> 2]) & 65535);
   jsvUnRef(HEAP32[$1 + 4 >> 2]);
   if (jsvGetNextSibling(HEAP32[$1 + 4 >> 2]) & 65535) {
    HEAP32[$1 >> 2] = jsvLock(jsvGetNextSibling(HEAP32[$1 + 4 >> 2]) & 65535);
    jsvSetPrevSibling(HEAP32[$1 >> 2], 0);
    jsvUnLock(HEAP32[$1 >> 2]);
   }
   jsvSetNextSibling(HEAP32[$1 + 4 >> 2], 0);
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function i2c_wr_bit($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 label$1: {
  if (HEAP8[$2 + 11 | 0] & 1) {
   i2c_pin_wr1(HEAPU8[HEAP32[$2 + 12 >> 2] + 1 | 0]);
   break label$1;
  }
  i2c_pin_wr0(HEAPU8[HEAP32[$2 + 12 >> 2] + 1 | 0]);
 }
 dly(HEAP32[$2 + 12 >> 2]);
 i2c_pin_wr1(HEAPU8[HEAP32[$2 + 12 >> 2]]);
 dly(HEAP32[$2 + 12 >> 2]);
 dly(HEAP32[$2 + 12 >> 2]);
 HEAP32[$2 + 4 >> 2] = HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2];
 while (1) {
  $0 = 0;
  if (!(jshPinGetValue(HEAPU8[HEAP32[$2 + 12 >> 2]]) & 1)) {
   $0 = HEAP32[$2 + 4 >> 2] != 0;
  }
  if ($0) {
   HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] - 1;
   continue;
  }
  break;
 }
 if (!(HEAP32[$2 + 4 >> 2] | !HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2])) {
  err(126127);
 }
 i2c_pin_wr0(HEAPU8[HEAP32[$2 + 12 >> 2]]);
 i2c_pin_wr1(HEAPU8[HEAP32[$2 + 12 >> 2] + 1 | 0]);
 dly(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function jswrap_storage_readArrayBuffer($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 80 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 72 >> 2] = $0;
 jsfNameFromVar($1 + 40 | 0, HEAP32[$1 + 72 >> 2]);
 HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 64 >> 2];
 $2 = HEAP32[$1 + 60 >> 2];
 $0 = HEAP32[$1 + 56 >> 2];
 HEAP32[$1 + 24 >> 2] = $0;
 HEAP32[$1 + 28 >> 2] = $2;
 $0 = HEAP32[$1 + 52 >> 2];
 $2 = HEAP32[$1 + 48 >> 2];
 HEAP32[$1 + 16 >> 2] = $2;
 HEAP32[$1 + 20 >> 2] = $0;
 $2 = HEAP32[$1 + 44 >> 2];
 $0 = HEAP32[$1 + 40 >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 12 >> 2] = $2;
 HEAP32[$1 + 68 >> 2] = jsfReadFile($1 + 8 | 0, 0, 0);
 label$1: {
  if (!HEAP32[$1 + 68 >> 2]) {
   HEAP32[$1 + 76 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 36 >> 2] = jsvNewArrayBufferFromString(HEAP32[$1 + 68 >> 2], 0);
  jsvUnLock(HEAP32[$1 + 68 >> 2]);
  HEAP32[$1 + 76 >> 2] = HEAP32[$1 + 36 >> 2];
 }
 __stack_pointer = $1 + 80 | 0;
 return HEAP32[$1 + 76 >> 2];
}

function jswrap_array_push($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1: {
  if (!(jsvIsArray(HEAP32[$2 + 24 >> 2]) & 1)) {
   HEAP32[$2 + 28 >> 2] = -1;
   break label$1;
  }
  HEAP32[$2 + 16 >> 2] = -1;
  jsvObjectIteratorNew($2 + 8 | 0, HEAP32[$2 + 20 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_6($2 + 8 | 0) & 1) {
    HEAP32[$2 + 4 >> 2] = jsvObjectIteratorGetValue_6($2 + 8 | 0);
    HEAP32[$2 + 16 >> 2] = jsvArrayPush(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 4 >> 2]);
    jsvUnLock(HEAP32[$2 + 4 >> 2]);
    jsvObjectIteratorNext($2 + 8 | 0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree_6($2 + 8 | 0);
  if (HEAP32[$2 + 16 >> 2] < 0) {
   HEAP32[$2 + 16 >> 2] = jsvGetArrayLength(HEAP32[$2 + 24 >> 2]);
  }
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 16 >> 2];
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jshPinWatch($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP8[$3 + 14 | 0] = $0;
 HEAP8[$3 + 13 | 0] = $1;
 HEAP32[$3 + 8 >> 2] = $2;
 label$1: {
  if (HEAP8[$3 + 13 | 0] & 1) {
   HEAP32[$3 + 4 >> 2] = 0;
   while (1) {
    if (HEAP32[$3 + 4 >> 2] < 16) {
     if (HEAPU8[HEAP32[$3 + 4 >> 2] + 343168 | 0] == 255) {
      HEAP8[HEAP32[$3 + 4 >> 2] + 343168 | 0] = HEAPU8[$3 + 14 | 0];
      HEAP8[$3 + 15 | 0] = HEAP32[$3 + 4 >> 2] + 1;
      break label$1;
     } else {
      HEAP32[$3 >> 2] = 0;
      while (1) {
       if (HEAP32[$3 >> 2] < 16) {
        if (HEAPU8[HEAP32[$3 >> 2] + 343168 | 0] == HEAPU8[$3 + 14 | 0]) {
         HEAP8[HEAP32[$3 >> 2] + 343168 | 0] = 255;
        }
        HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
        continue;
       }
       break;
      }
      HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
      continue;
     }
    }
    break;
   }
  }
  HEAP8[$3 + 15 | 0] = 0;
 }
 return HEAPU8[$3 + 15 | 0];
}

function _jswrap_drawImageLayerNextXRepeat($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP8[HEAP32[$1 + 12 >> 2] + 33 | 0] & 1) {
  if (HEAP32[HEAP32[$1 + 12 >> 2] + 180 >> 2] < 0) {
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$0 + 180 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 156 >> 2] + HEAP32[$0 + 180 >> 2];
  }
  if (HEAP32[HEAP32[$1 + 12 >> 2] + 180 >> 2] >= HEAP32[HEAP32[$1 + 12 >> 2] + 156 >> 2]) {
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$0 + 180 >> 2] = HEAP32[$0 + 180 >> 2] - HEAP32[HEAP32[$1 + 12 >> 2] + 156 >> 2];
  }
  if (HEAP32[HEAP32[$1 + 12 >> 2] + 184 >> 2] < 0) {
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$0 + 184 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 160 >> 2] + HEAP32[$0 + 184 >> 2];
  }
  if (HEAP32[HEAP32[$1 + 12 >> 2] + 184 >> 2] >= HEAP32[HEAP32[$1 + 12 >> 2] + 160 >> 2]) {
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$0 + 184 >> 2] = HEAP32[$0 + 184 >> 2] - HEAP32[HEAP32[$1 + 12 >> 2] + 160 >> 2];
  }
 }
}

function jswrap_object_toString($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 96 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 88 >> 2] = $0;
 HEAP32[$2 + 84 >> 2] = $1;
 label$1: {
  label$2: {
   if (!(jsvIsInt(HEAP32[$2 + 84 >> 2]) & 1)) {
    break label$2;
   }
   if (!(jsvIsNumeric(HEAP32[$2 + 88 >> 2]) & 1)) {
    break label$2;
   }
   HEAP32[$2 + 80 >> 2] = jsvGetInteger(HEAP32[$2 + 84 >> 2]);
   if (!(HEAP32[$2 + 80 >> 2] < 2 | HEAP32[$2 + 80 >> 2] > 36)) {
    label$4: {
     if (jsvIsInt(HEAP32[$2 + 88 >> 2]) & 1) {
      itostr_3(jsvGetInteger(HEAP32[$2 + 88 >> 2]), $2, HEAP32[$2 + 80 >> 2]);
      break label$4;
     }
     ftoa_bounded_extra(jsvGetFloat(HEAP32[$2 + 88 >> 2]), $2, 70, HEAP32[$2 + 80 >> 2], -1);
    }
    HEAP32[$2 + 92 >> 2] = jsvNewFromString($2);
    break label$1;
   }
  }
  HEAP32[$2 + 92 >> 2] = jsvAsString(HEAP32[$2 + 88 >> 2]);
 }
 __stack_pointer = $2 + 96 | 0;
 return HEAP32[$2 + 92 >> 2];
}

function lcdSetPixel_JS($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 $0 = HEAP32[$4 + 28 >> 2];
 HEAP32[$4 + 12 >> 2] = jsvObjectGetChildIfExists(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 102791);
 if (HEAP32[$4 + 12 >> 2]) {
  HEAP32[$4 >> 2] = jsvNewFromInteger(HEAP32[$4 + 24 >> 2]);
  HEAP32[$4 + 4 >> 2] = jsvNewFromInteger(HEAP32[$4 + 20 >> 2]);
  HEAP32[$4 + 8 >> 2] = jsvNewFromInteger(HEAP32[$4 + 16 >> 2]);
  $0 = HEAP32[$4 + 28 >> 2];
  jsvUnLock(jspExecuteFunction(HEAP32[$4 + 12 >> 2], HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 3, $4));
  jsvUnLockMany(3, $4);
  jsvUnLock(HEAP32[$4 + 12 >> 2]);
 }
 __stack_pointer = $4 + 32 | 0;
}

function jswrap_arraybuffer_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (HEAP32[$1 + 8 >> 2] < 0) {
   jsExceptionHere(1, 101407, 0);
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$1 + 8 >> 2] > 16777215) {
   jsExceptionHere(1, 103657, 0);
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 4 >> 2] = 0;
  if (HEAP32[$1 + 8 >> 2] > 17) {
   HEAP32[$1 + 4 >> 2] = jsvNewFlatStringOfLength(HEAP32[$1 + 8 >> 2]);
  }
  if (!HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 4 >> 2] = jsvNewStringOfLength(HEAP32[$1 + 8 >> 2], 0);
  }
  if (!HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 >> 2] = jsvNewArrayBufferFromString(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 8 >> 2]);
  jsvUnLock(HEAP32[$1 + 4 >> 2]);
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function lcdST7789_scroll($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $7 = 0;
 $7 = __stack_pointer - 32 | 0;
 __stack_pointer = $7;
 HEAP32[$7 + 28 >> 2] = $0;
 HEAP32[$7 + 24 >> 2] = $1;
 HEAP32[$7 + 20 >> 2] = $2;
 HEAP32[$7 + 16 >> 2] = $3;
 HEAP32[$7 + 12 >> 2] = $4;
 HEAP32[$7 + 8 >> 2] = $5;
 HEAP32[$7 + 4 >> 2] = $6;
 label$1: {
  if (HEAP32[$7 + 16 >> 2] | HEAP32[85782] != 1 | (HEAP32[$7 + 12 >> 2] | HEAP32[$7 + 8 >> 2] != 239)) {
   break label$1;
  }
  if (HEAP32[$7 + 4 >> 2] != 239) {
   break label$1;
  }
  HEAP32[85780] = HEAP32[85780] - HEAP32[$7 + 20 >> 2];
  while (1) {
   if (HEAP32[85780] < 0) {
    HEAP32[85780] = HEAP32[85780] + 320;
    continue;
   }
   break;
  }
  while (1) {
   if (HEAP32[85780] >= 320) {
    HEAP32[85780] = HEAP32[85780] - 320;
    continue;
   }
   break;
  }
  lcdST7789_scrollCmd();
 }
 __stack_pointer = $7 + 32 | 0;
}

function jswrap_graphics_getFonts_callback($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 12 >> 2];
 label$1: {
  if (jsvGetStringLength(HEAP32[$2 + 8 >> 2]) >>> 0 <= 7) {
   break label$1;
  }
  if (!(jsvIsStringEqualOrStartsWith(HEAP32[$2 + 8 >> 2], 97638, 1) & 1)) {
   break label$1;
  }
  if (jsvIsStringEqual(HEAP32[$2 + 8 >> 2], 101978) & 1) {
   break label$1;
  }
  if (jsvIsStringEqual(HEAP32[$2 + 8 >> 2], 102514) & 1) {
   break label$1;
  }
  if (jsvIsStringEqual(HEAP32[$2 + 8 >> 2], 109670) & 1) {
   break label$1;
  }
  if (jsvIsStringEqual(HEAP32[$2 + 8 >> 2], 102663) & 1) {
   break label$1;
  }
  HEAP32[$2 >> 2] = jsvNewFromStringVar(HEAP32[$2 + 8 >> 2], 7, 2147483647);
  jsvArrayPush(HEAP32[$2 + 4 >> 2], HEAP32[$2 >> 2]);
  jsvUnLock(HEAP32[$2 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
}

function jsvIsIntegerish($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63;
  $0 = 1;
  label$3: {
   if (HEAP8[$1 + 7 | 0] == 10) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 13) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 15) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 16) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 17) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 13) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 12) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 17) {
    break label$3;
   }
   $0 = HEAP8[$1 + 7 | 0] == 2;
  }
  HEAP8[$1 + 15 | 0] = $0;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function __jspePostfixExpression($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 while (1) {
  $0 = 1;
  $0 = HEAP16[HEAP32[38615] + 2 >> 1] != 152 ? HEAP16[HEAP32[38615] + 2 >> 1] == 153 : $0;
  if ($0) {
   HEAP32[$1 + 24 >> 2] = HEAP16[HEAP32[38615] + 2 >> 1];
   jslGetNextToken();
   if ((HEAP32[46755] & 63) == 1) {
    HEAP32[$1 + 20 >> 2] = jsvNewFromInteger(1);
    HEAP32[$1 + 16 >> 2] = jsvAsNumberAndUnLock(jsvSkipName(HEAP32[$1 + 28 >> 2]));
    HEAP32[$1 + 12 >> 2] = jsvMathsOpSkipNames(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 20 >> 2], HEAP32[$1 + 24 >> 2] == 152 ? 43 : 45);
    jsvUnLock(HEAP32[$1 + 20 >> 2]);
    jsvReplaceWith(HEAP32[$1 + 28 >> 2], HEAP32[$1 + 12 >> 2]);
    jsvUnLock(HEAP32[$1 + 12 >> 2]);
    jsvUnLock(HEAP32[$1 + 28 >> 2]);
    HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 16 >> 2];
   }
   continue;
  }
  break;
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function jspeiFindInScopes($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 label$1: {
  if (HEAP32[46749]) {
   HEAP32[$1 + 20 >> 2] = jsvLockSafe(jsvGetLastChild(HEAP32[46749]) & 65535);
   while (1) {
    if (HEAP32[$1 + 20 >> 2]) {
     HEAP32[$1 + 16 >> 2] = jsvSkipName(HEAP32[$1 + 20 >> 2]);
     HEAP16[$1 + 14 >> 1] = jsvGetPrevSibling(HEAP32[$1 + 20 >> 2]);
     HEAP32[$1 + 8 >> 2] = jsvFindChildFromString(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 24 >> 2]);
     jsvUnLock2(HEAP32[$1 + 20 >> 2], HEAP32[$1 + 16 >> 2]);
     if (HEAP32[$1 + 8 >> 2]) {
      HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 8 >> 2];
      break label$1;
     } else {
      HEAP32[$1 + 20 >> 2] = jsvLockSafe(HEAPU16[$1 + 14 >> 1]);
      continue;
     }
    }
    break;
   }
  }
  HEAP32[$1 + 28 >> 2] = jsvFindChildFromString(HEAP32[46747], HEAP32[$1 + 24 >> 2]);
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function jsiMoveCursor($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 while (1) {
  if (HEAPU32[$4 + 12 >> 2] < HEAPU32[$4 + 4 >> 2]) {
   jsiConsolePrintString(110105);
   HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 while (1) {
  if (HEAPU32[$4 + 12 >> 2] > HEAPU32[$4 + 4 >> 2]) {
   jsiConsolePrintString(109903);
   HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 12 >> 2] - 1;
   continue;
  }
  break;
 }
 while (1) {
  if (HEAPU32[$4 + 8 >> 2] < HEAPU32[$4 >> 2]) {
   jsiConsolePrintString(110141);
   HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 8 >> 2] + 1;
   continue;
  }
  break;
 }
 while (1) {
  if (HEAPU32[$4 + 8 >> 2] > HEAPU32[$4 >> 2]) {
   jsiConsolePrintString(110163);
   HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 8 >> 2] - 1;
   continue;
  }
  break;
 }
 __stack_pointer = $4 + 16 | 0;
}

function jsvGetStringChars($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer + -64 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 56 >> 2] = $0;
 HEAP32[$4 + 52 >> 2] = $1;
 HEAP32[$4 + 48 >> 2] = $2;
 HEAP32[$4 + 44 >> 2] = $3;
 HEAP32[$4 + 40 >> 2] = HEAP32[$4 + 44 >> 2];
 jsvStringIteratorNew($4, HEAP32[$4 + 56 >> 2], HEAP32[$4 + 52 >> 2]);
 label$1: {
  while (1) {
   if (jsvStringIteratorHasChar_1($4) & 1) {
    $0 = HEAP32[$4 + 40 >> 2];
    HEAP32[$4 + 40 >> 2] = $0 - 1;
    if ($0) {
     $1 = jsvStringIteratorGetCharAndNext($4);
     $0 = HEAP32[$4 + 48 >> 2];
     HEAP32[$4 + 48 >> 2] = $0 + 1;
     HEAP8[$0 | 0] = $1;
     continue;
    } else {
     jsvStringIteratorFree_1($4);
     HEAP32[$4 + 60 >> 2] = HEAP32[$4 + 44 >> 2];
     break label$1;
    }
   }
   break;
  }
  jsvStringIteratorFree_1($4);
  HEAP32[$4 + 60 >> 2] = HEAP32[$4 + 44 >> 2] - HEAP32[$4 + 40 >> 2];
 }
 __stack_pointer = $4 - -64 | 0;
 return HEAP32[$4 + 60 >> 2];
}

function jswrap_banglejs_setLCDTimeout($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAPF64[$2 + 24 >> 3] = $0;
 __DOUBLE_BITS_2(HEAPF64[$2 + 24 >> 3]);
 $1 = i64toi32_i32$HIGH_BITS & 2147483647;
 label$1: {
  if (($1 | 0) == 2146435072 | $1 >>> 0 > 2146435072) {
   HEAPF64[$2 + 24 >> 3] = 0;
   break label$1;
  }
  if (HEAPF64[$2 + 24 >> 3] < 0) {
   HEAPF64[$2 + 24 >> 3] = 0;
  }
 }
 $0 = HEAPF64[$2 + 24 >> 3] * 1e3;
 label$4: {
  if (Math_abs($0) < 2147483648) {
   $1 = ~~$0;
   break label$4;
  }
  $1 = -2147483648;
 }
 HEAP32[85798] = $1;
 $0 = HEAPF64[$2 + 24 >> 3] * 1e3;
 label$6: {
  if (Math_abs($0) < 2147483648) {
   $1 = ~~$0;
   break label$6;
  }
  $1 = -2147483648;
 }
 HEAP32[85800] = $1;
 $0 = HEAPF64[$2 + 24 >> 3] * 1e3;
 label$8: {
  if (Math_abs($0) < 2147483648) {
   $1 = ~~$0;
   break label$8;
  }
  $1 = -2147483648;
 }
 HEAP32[85801] = $1;
 __stack_pointer = $2 + 32 | 0;
}

function tflite__GetQuantizedConvolutionMultipler_28TfLiteContext__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20double__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 48 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 40 >> 2] = $0;
 HEAP32[$5 + 36 >> 2] = $1;
 HEAP32[$5 + 32 >> 2] = $2;
 HEAP32[$5 + 28 >> 2] = $3;
 HEAP32[$5 + 24 >> 2] = $4;
 HEAPF64[$5 + 16 >> 3] = Math_fround(HEAPF32[HEAP32[$5 + 36 >> 2] + 8 >> 2] * HEAPF32[HEAP32[$5 + 32 >> 2] + 8 >> 2]);
 label$1: {
  if (!(HEAPF64[$5 + 16 >> 3] >= 0)) {
   $0 = HEAP32[HEAP32[$5 + 40 >> 2] + 20 >> 2];
   $1 = HEAP32[$5 + 40 >> 2];
   HEAP32[$5 >> 2] = 111367;
   FUNCTION_TABLE[$0 | 0]($1, 111890, $5);
   HEAP32[$5 + 44 >> 2] = 1;
   break label$1;
  }
  HEAPF64[HEAP32[$5 + 24 >> 2] >> 3] = HEAPF64[$5 + 16 >> 3] / +HEAPF32[HEAP32[$5 + 28 >> 2] + 8 >> 2];
  HEAP32[$5 + 44 >> 2] = 0;
 }
 __stack_pointer = $5 + 48 | 0;
 return HEAP32[$5 + 44 >> 2];
}

function jsvGetArrayItems($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 jsvObjectIteratorNew($3 + 16 | 0, HEAP32[$3 + 28 >> 2]);
 HEAP32[$3 + 12 >> 2] = 0;
 while (1) {
  if (jsvObjectIteratorHasValue($3 + 16 | 0) & 1) {
   if (HEAPU32[$3 + 12 >> 2] < HEAPU32[$3 + 24 >> 2]) {
    $1 = jsvObjectIteratorGetValue($3 + 16 | 0);
    $2 = HEAP32[$3 + 20 >> 2];
    $0 = HEAP32[$3 + 12 >> 2];
    HEAP32[$3 + 12 >> 2] = $0 + 1;
    HEAP32[($0 << 2) + $2 >> 2] = $1;
   }
   jsvObjectIteratorNext($3 + 16 | 0);
   continue;
  }
  break;
 }
 jsvObjectIteratorFree($3 + 16 | 0);
 while (1) {
  if (HEAPU32[$3 + 12 >> 2] < HEAPU32[$3 + 24 >> 2]) {
   $1 = HEAP32[$3 + 20 >> 2];
   $0 = HEAP32[$3 + 12 >> 2];
   HEAP32[$3 + 12 >> 2] = $0 + 1;
   HEAP32[($0 << 2) + $1 >> 2] = 0;
   continue;
  }
  break;
 }
 __stack_pointer = $3 + 32 | 0;
}

function jswrap_arraybufferview_sort($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1: {
  if (!(jsvIsArrayBuffer(HEAP32[$2 + 24 >> 2]) & 1)) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP8[$2 + 19 | 0] = (HEAPU8[HEAP32[$2 + 24 >> 2] + 5 | 0] & 32) != 0;
  if (HEAP32[$2 + 20 >> 2]) {
   HEAP32[$2 + 28 >> 2] = jswrap_array_sort(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2]);
   break label$1;
  }
  label$4: {
   if (HEAP8[$2 + 19 | 0] & 1) {
    $0 = jsvNewNativeFunction(589, 511);
    break label$4;
   }
   $0 = jsvNewNativeFunction(590, 292);
  }
  HEAP32[$2 + 20 >> 2] = $0;
  HEAP32[$2 + 12 >> 2] = jswrap_array_sort(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2]);
  jsvUnLock(HEAP32[$2 + 20 >> 2]);
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jsfIsEqual($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 160 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 152 >> 2] = $0;
 HEAP32[$3 + 148 >> 2] = $1;
 HEAP32[$3 + 144 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = 0;
 label$1: {
  while (1) {
   if (HEAP32[$3 + 144 >> 2]) {
    HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 144 >> 2];
    if (HEAPU32[$3 + 8 >> 2] > 128) {
     HEAP32[$3 + 8 >> 2] = 128;
    }
    jshFlashRead($3 + 16 | 0, HEAP32[$3 + 152 >> 2] + HEAP32[$3 + 12 >> 2] | 0, HEAP32[$3 + 8 >> 2]);
    if (memcmp($3 + 16 | 0, HEAP32[$3 + 148 >> 2] + HEAP32[$3 + 12 >> 2] | 0, HEAP32[$3 + 8 >> 2])) {
     HEAP8[$3 + 159 | 0] = 0;
     break label$1;
    } else {
     HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 8 >> 2] + HEAP32[$3 + 12 >> 2];
     HEAP32[$3 + 144 >> 2] = HEAP32[$3 + 144 >> 2] - HEAP32[$3 + 8 >> 2];
     continue;
    }
   }
   break;
  }
  HEAP8[$3 + 159 | 0] = 1;
 }
 __stack_pointer = $3 + 160 | 0;
 return HEAP8[$3 + 159 | 0] & 1;
}

function _jswrap_banglejs_setLocked($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP8[$2 + 31 | 0] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 if ((HEAP32[85796] & 262144) != (HEAP8[$2 + 31 | 0] & 1)) {
  HEAP32[$2 + 20 >> 2] = jsvObjectGetChildIfExists(HEAP32[46747], 105122);
  if (HEAP32[$2 + 20 >> 2]) {
   HEAP32[$2 + 12 >> 2] = jsvNewFromBool(HEAP8[$2 + 31 | 0] & 1);
   $1 = $2 + 12 | 0;
   label$3: {
    if (HEAP32[$2 + 24 >> 2]) {
     $0 = jsvNewFromString(HEAP32[$2 + 24 >> 2]);
     break label$3;
    }
    $0 = 0;
   }
   HEAP32[$1 + 4 >> 2] = $0;
   jsiQueueObjectCallbacks(HEAP32[$2 + 20 >> 2], 103104, $2 + 12 | 0, 2);
   jsvUnLockMany(2, $2 + 12 | 0);
  }
  jsvUnLock(HEAP32[$2 + 20 >> 2]);
 }
 label$5: {
  if (HEAP8[$2 + 31 | 0] & 1) {
   HEAP32[85796] = HEAP32[85796] | 262144;
   break label$5;
  }
  HEAP16[171604] = 0;
  HEAP32[85796] = HEAP32[85796] & -262145;
 }
 __stack_pointer = $2 + 32 | 0;
}

function jsvFindChildFromVar($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP8[$3 + 19 | 0] = $2;
 HEAP16[$3 + 10 >> 1] = jsvGetFirstChild(HEAP32[$3 + 24 >> 2]);
 label$1: {
  while (1) {
   if (HEAPU16[$3 + 10 >> 1]) {
    HEAP32[$3 + 12 >> 2] = jsvLock(HEAPU16[$3 + 10 >> 1]);
    if (jsvIsBasicVarEqual(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 20 >> 2]) & 1) {
     break label$1;
    }
    HEAP16[$3 + 10 >> 1] = jsvGetNextSibling(HEAP32[$3 + 12 >> 2]);
    jsvUnLock(HEAP32[$3 + 12 >> 2]);
    continue;
   }
   break;
  }
  HEAP32[$3 + 12 >> 2] = 0;
  if (!(!(HEAP8[$3 + 19 | 0] & 1) | !HEAP32[$3 + 20 >> 2])) {
   HEAP32[$3 + 12 >> 2] = jsvAsName(HEAP32[$3 + 20 >> 2]);
   jsvAddName(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 12 >> 2]);
  }
 }
 HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 12 >> 2];
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function jsiExecuteEventCallback($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 24 >> 2] = $0;
 HEAP32[$4 + 20 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $2;
 HEAP32[$4 + 12 >> 2] = $3;
 HEAP32[$4 + 8 >> 2] = jsvSkipName(HEAP32[$4 + 20 >> 2]);
 label$1: {
  if (!HEAP32[$4 + 8 >> 2]) {
   HEAP8[$4 + 31 | 0] = 0;
   break label$1;
  }
  HEAP16[93524] = HEAPU16[93524] | 8192;
  HEAP8[$4 + 7 | 0] = jsiExecuteEventCallbackInner(HEAP32[$4 + 24 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 16 >> 2], HEAP32[$4 + 12 >> 2]) & 1;
  jsvUnLock(HEAP32[$4 + 8 >> 2]);
  HEAP16[93524] = HEAPU16[93524] & -24577;
  label$3: {
   if (HEAP8[$4 + 7 | 0] & 1) {
    if (!(jspIsInterrupted() & 1)) {
     break label$3;
    }
   }
   HEAP16[93524] = HEAPU16[93524] | 32768;
   HEAP8[$4 + 31 | 0] = 0;
   break label$1;
  }
  HEAP8[$4 + 31 | 0] = 1;
 }
 __stack_pointer = $4 + 32 | 0;
 return HEAP8[$4 + 31 | 0] & 1;
}

function graphicsGetPixelDevice($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 8 >> 2] = $0;
 HEAP32[$3 + 4 >> 2] = $1;
 HEAP32[$3 >> 2] = $2;
 label$1: {
  label$2: {
   label$3: {
    if ((HEAP32[$3 + 4 >> 2] | HEAP32[$3 >> 2]) < 0) {
     break label$3;
    }
    $0 = HEAP32[$3 + 8 >> 2];
    if (HEAP32[$3 + 4 >> 2] >= (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8)) {
     break label$3;
    }
    $0 = HEAP32[$3 + 8 >> 2];
    if (HEAP32[$3 >> 2] < (HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8)) {
     break label$2;
    }
   }
   HEAP32[$3 + 12 >> 2] = 0;
   break label$1;
  }
  $0 = HEAP32[$3 + 8 >> 2];
  HEAP32[$3 + 12 >> 2] = FUNCTION_TABLE[HEAPU8[$0 + 60 | 0] | HEAPU8[$0 + 61 | 0] << 8 | (HEAPU8[$0 + 62 | 0] << 16 | HEAPU8[$0 + 63 | 0] << 24)](HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], HEAP32[$3 >> 2]);
 }
 __stack_pointer = $3 + 16 | 0;
 return HEAP32[$3 + 12 >> 2];
}

function jslPreserveSpaceBetweenTokens($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  if (!(!(HEAP32[$2 + 8 >> 2] == 128 | HEAP32[$2 + 8 >> 2] == 130) & HEAP32[$2 + 8 >> 2] != 129 | !(HEAP32[$2 + 4 >> 2] == 128 | HEAP32[$2 + 4 >> 2] == 130) & HEAP32[$2 + 4 >> 2] != 129)) {
   HEAP8[$2 + 15 | 0] = 1;
   break label$1;
  }
  label$5: {
   label$6: {
    if (HEAP32[$2 + 8 >> 2] == 47 & HEAP32[$2 + 4 >> 2] == 135 | (HEAP32[$2 + 8 >> 2] == 45 & HEAP32[$2 + 4 >> 2] == 45 | HEAP32[$2 + 8 >> 2] == 43 & HEAP32[$2 + 4 >> 2] == 43)) {
     break label$6;
    }
    if (HEAP32[$2 + 8 >> 2] != 135) {
     break label$5;
    }
    if (HEAP32[$2 + 4 >> 2] == 47) {
     break label$6;
    }
    if (HEAP32[$2 + 4 >> 2] != 128) {
     break label$5;
    }
   }
   HEAP8[$2 + 15 | 0] = 1;
   break label$1;
  }
  HEAP8[$2 + 15 | 0] = 0;
 }
 return HEAP8[$2 + 15 | 0] & 1;
}

function jswrap_espruino_lookupNoCase($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 96 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 88 >> 2] = $0;
 HEAP32[$3 + 84 >> 2] = $1;
 HEAP8[$3 + 83 | 0] = $2;
 label$1: {
  if (!(jsvHasChildren(HEAP32[$3 + 88 >> 2]) & 1)) {
   HEAP32[$3 + 92 >> 2] = 0;
   break label$1;
  }
  if ((jsvGetString(HEAP32[$3 + 84 >> 2], $3 + 16 | 0, 64) | 0) == 64) {
   HEAP32[$3 >> 2] = 64;
   jsExceptionHere(1, 125997, $3);
  }
  if (HEAP8[$3 + 83 | 0] & 1) {
   HEAP32[$3 + 12 >> 2] = jsvFindChildFromStringI(HEAP32[$3 + 88 >> 2], $3 + 16 | 0);
   if (HEAP32[$3 + 12 >> 2]) {
    HEAP32[$3 + 92 >> 2] = jsvAsStringAndUnLock(HEAP32[$3 + 12 >> 2]);
    break label$1;
   }
   HEAP32[$3 + 92 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 92 >> 2] = jsvObjectGetChildI(HEAP32[$3 + 88 >> 2], $3 + 16 | 0);
 }
 __stack_pointer = $3 + 96 | 0;
 return HEAP32[$3 + 92 >> 2];
}

function tflite__internal__GetFlatbufferTensorBuffer_28tflite__Tensor_20const__2c_20flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer___20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP32[$2 + 20 >> 2] = 0;
 HEAP32[$2 + 16 >> 2] = flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer____operator_5b_5d_28unsigned_20int_29_20const(HEAP32[$2 + 24 >> 2], tflite__Tensor__buffer_28_29_20const(HEAP32[$2 + 28 >> 2]));
 if (HEAP32[$2 + 16 >> 2]) {
  HEAP32[$2 + 12 >> 2] = tflite__Buffer__data_28_29_20const(HEAP32[$2 + 16 >> 2]);
  if (HEAP32[$2 + 12 >> 2]) {
   if (flatbuffers__Vector_unsigned_20char___size_28_29_20const(HEAP32[$2 + 12 >> 2])) {
    HEAP32[$2 + 20 >> 2] = flatbuffers__Vector_unsigned_20char___data_28_29_20const(HEAP32[$2 + 12 >> 2]);
   }
  }
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 20 >> 2];
}

function jswrap_string_startsWith($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 label$1: {
  if (!(jsvIsString(HEAP32[$3 + 24 >> 2]) & 1)) {
   HEAP8[$3 + 31 | 0] = 0;
   break label$1;
  }
  HEAP32[$3 + 12 >> 2] = jsvAsString(HEAP32[$3 + 20 >> 2]);
  HEAP8[$3 + 11 | 0] = 0;
  label$3: {
   if (HEAP32[$3 + 16 >> 2] < 0) {
    break label$3;
   }
   if ((jsvGetStringLength(HEAP32[$3 + 12 >> 2]) + HEAP32[$3 + 16 >> 2] | 0) > (jsvGetStringLength(HEAP32[$3 + 24 >> 2]) | 0)) {
    break label$3;
   }
   HEAP8[$3 + 11 | 0] = !jsvCompareString(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 12 >> 2], HEAP32[$3 + 16 >> 2], 0, 1);
  }
  jsvUnLock(HEAP32[$3 + 12 >> 2]);
  HEAP8[$3 + 31 | 0] = HEAP8[$3 + 11 | 0] & 1;
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP8[$3 + 31 | 0] & 1;
}

function jswrap_object_create($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1: {
  label$2: {
   if (jsvIsObject(HEAP32[$2 + 24 >> 2]) & 1) {
    break label$2;
   }
   if (jsvIsNull(HEAP32[$2 + 24 >> 2]) & 1) {
    break label$2;
   }
   HEAP32[$2 >> 2] = HEAP32[$2 + 24 >> 2];
   jsExceptionHere(3, 99656, $2);
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  if (jsvIsObject(HEAP32[$2 + 20 >> 2]) & 1) {
   jsExceptionHere(1, 97957, 0);
  }
  HEAP32[$2 + 16 >> 2] = jsvNewObject();
  if (!HEAP32[$2 + 16 >> 2]) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  if (jsvIsObject(HEAP32[$2 + 24 >> 2]) & 1) {
   jsvObjectSetChild(HEAP32[$2 + 16 >> 2], 107914, HEAP32[$2 + 24 >> 2]);
  }
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 16 >> 2];
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jsvGetFunctionArgumentLength($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 HEAP32[$1 + 20 >> 2] = jsvNewEmptyArray();
 label$1: {
  if (!HEAP32[$1 + 20 >> 2]) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  jsvObjectIteratorNew($1 + 16 | 0, HEAP32[$1 + 24 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue($1 + 16 | 0) & 1) {
    HEAP32[$1 + 12 >> 2] = jsvObjectIteratorGetKey($1 + 16 | 0);
    if (jsvIsFunctionParameter(HEAP32[$1 + 12 >> 2]) & 1) {
     HEAP32[$1 + 8 >> 2] = jsvSkipOneName(HEAP32[$1 + 12 >> 2]);
     jsvArrayPushAndUnLock(HEAP32[$1 + 20 >> 2], HEAP32[$1 + 8 >> 2]);
    }
    jsvUnLock(HEAP32[$1 + 12 >> 2]);
    jsvObjectIteratorNext($1 + 16 | 0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree($1 + 16 | 0);
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 20 >> 2];
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function jsiHandleMoveUpDown($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 HEAP32[$1 + 16 >> 2] = jsvGetLinesInString(HEAP32[46763]);
 jsvGetLineAndCol(HEAP32[46763], HEAP32[46765], $1 + 20 | 0, $1 + 24 | 0);
 HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 24 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 20 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + HEAP32[$1 + 28 >> 2];
 if (!HEAP32[$1 + 8 >> 2]) {
  HEAP32[$1 + 8 >> 2] = 1;
 }
 if (HEAPU32[$1 + 8 >> 2] > HEAPU32[$1 + 16 >> 2]) {
  HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 16 >> 2];
 }
 HEAP32[46765] = jsvGetIndexFromLineAndCol(HEAP32[46763], HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2]);
 jsvGetLineAndCol(HEAP32[46763], HEAP32[46765], $1 + 8 | 0, $1 + 12 | 0);
 if (jsiShowInputLine() & 1) {
  jsiMoveCursor(HEAP32[$1 + 24 >> 2], HEAP32[$1 + 20 >> 2], HEAP32[$1 + 12 >> 2], HEAP32[$1 + 8 >> 2]);
 }
 __stack_pointer = $1 + 32 | 0;
}

function jsvIsIterable($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63;
  $0 = 1;
  label$3: {
   if (HEAP8[$1 + 7 | 0] == 3) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 5) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 1) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 7) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 9) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 8) {
    break label$3;
   }
   if (HEAP8[$1 + 7 | 0] >= 18) {
    $0 = 1;
    if (HEAP8[$1 + 7 | 0] <= 39) {
     break label$3;
    }
   }
   $0 = HEAP8[$1 + 7 | 0] == 4;
  }
  HEAP8[$1 + 15 | 0] = $0;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function jsvGetArrayBufferBackingString($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  if (!HEAP32[$2 + 8 >> 2]) {
   HEAP32[$2 + 12 >> 2] = 0;
   break label$1;
  }
  jsvLockAgain(HEAP32[$2 + 8 >> 2]);
  if (HEAP32[$2 + 4 >> 2]) {
   HEAP32[HEAP32[$2 + 4 >> 2] >> 2] = 0;
  }
  while (1) {
   if (jsvIsArrayBuffer(HEAP32[$2 + 8 >> 2]) & 1) {
    if (HEAP32[$2 + 4 >> 2]) {
     $0 = HEAP32[$2 + 4 >> 2];
     $1 = HEAP32[$2 + 8 >> 2];
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + (HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8);
    }
    HEAP32[$2 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$2 + 8 >> 2]) & 65535);
    jsvUnLock(HEAP32[$2 + 8 >> 2]);
    HEAP32[$2 + 8 >> 2] = HEAP32[$2 >> 2];
    continue;
   }
   break;
  }
  HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 8 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function graphicsGetSetPixelUnclippedFn($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 32 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 24 >> 2] = $0;
 HEAP32[$6 + 20 >> 2] = $1;
 HEAP32[$6 + 16 >> 2] = $2;
 HEAP32[$6 + 12 >> 2] = $3;
 HEAP32[$6 + 8 >> 2] = $4;
 HEAP8[$6 + 7 | 0] = $5;
 label$1: {
  label$2: {
   $0 = HEAP32[$6 + 24 >> 2];
   if (!((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 112)) {
    if (!(graphicsSetModifiedAndClip(HEAP32[$6 + 24 >> 2], $6 + 20 | 0, $6 + 16 | 0, $6 + 12 | 0, $6 + 8 | 0, HEAP8[$6 + 7 | 0] & 1) & 1)) {
     break label$2;
    }
   }
   HEAP32[$6 + 28 >> 2] = 563;
   break label$1;
  }
  $0 = HEAP32[$6 + 24 >> 2];
  HEAP32[$6 + 28 >> 2] = HEAPU8[$0 + 52 | 0] | HEAPU8[$0 + 53 | 0] << 8 | (HEAPU8[$0 + 54 | 0] << 16 | HEAPU8[$0 + 55 | 0] << 24);
 }
 __stack_pointer = $6 + 32 | 0;
 return HEAP32[$6 + 28 >> 2];
}

function jswrap_espruino_enableWatchdog($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAPF64[$2 + 24 >> 3] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1: {
  label$2: {
   if (HEAPF64[$2 + 24 >> 3] < 0) {
    break label$2;
   }
   $3 = __DOUBLE_BITS_7(HEAPF64[$2 + 24 >> 3]);
   $1 = $3;
   $4 = i64toi32_i32$HIGH_BITS;
   $3 = $4 & 2147483647;
   $4 = $1;
   if (($3 | 0) == 2146435072 & ($4 | 0) != 0 | $3 >>> 0 > 2146435072) {
    break label$2;
   }
   break label$1;
  }
  HEAPF64[$2 + 24 >> 3] = 1;
 }
 label$3: {
  label$4: {
   if (!(jsvIsUndefined(HEAP32[$2 + 20 >> 2]) & 1)) {
    if (!(jsvGetBool(HEAP32[$2 + 20 >> 2]) & 1)) {
     break label$4;
    }
   }
   HEAP16[93524] = HEAPU16[93524] | 512;
   break label$3;
  }
  HEAP16[93524] = HEAPU16[93524] & -513;
 }
 jshEnableWatchDog(HEAPF64[$2 + 24 >> 3]);
 __stack_pointer = $2 + 32 | 0;
}

function jshFlashErasePages($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 24 >> 2] + HEAP32[$2 + 20 >> 2];
 label$1: {
  if (!(jshFlashGetPage(HEAP32[$2 + 24 >> 2], $2 + 12 | 0, $2 + 8 | 0) & 1)) {
   HEAP8[$2 + 31 | 0] = 0;
   break label$1;
  }
  while (1) {
   $0 = 0;
   if (HEAPU32[$2 + 12 >> 2] < HEAPU32[$2 + 16 >> 2]) {
    $0 = jspIsInterrupted() ^ -1;
   }
   if ($0 & 1) {
    jshFlashErasePage(HEAP32[$2 + 12 >> 2]);
    if (!(jshFlashGetPage(HEAP32[$2 + 12 >> 2] + HEAP32[$2 + 8 >> 2] | 0, $2 + 12 | 0, $2 + 8 | 0) & 1)) {
     HEAP8[$2 + 31 | 0] = 1;
     break label$1;
    }
    jshKickWatchDog();
    jshKickSoftWatchDog();
    continue;
   }
   break;
  }
  HEAP8[$2 + 31 | 0] = (jspIsInterrupted() ^ -1) & 1;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP8[$2 + 31 | 0] & 1;
}

function __stpcpy($0, $1) {
 var $2 = 0;
 label$1: {
  label$2: {
   if (($0 ^ $1) & 3) {
    $2 = HEAPU8[$1 | 0];
    break label$2;
   }
   if ($1 & 3) {
    while (1) {
     $2 = HEAPU8[$1 | 0];
     HEAP8[$0 | 0] = $2;
     if (!$2) {
      break label$1;
     }
     $0 = $0 + 1 | 0;
     $1 = $1 + 1 | 0;
     if ($1 & 3) {
      continue;
     }
     break;
    }
   }
   $2 = HEAP32[$1 >> 2];
   if (($2 ^ -1) & $2 - 16843009 & -2139062144) {
    break label$2;
   }
   while (1) {
    HEAP32[$0 >> 2] = $2;
    $2 = HEAP32[$1 + 4 >> 2];
    $0 = $0 + 4 | 0;
    $1 = $1 + 4 | 0;
    if (!($2 - 16843009 & ($2 ^ -1) & -2139062144)) {
     continue;
    }
    break;
   }
  }
  HEAP8[$0 | 0] = $2;
  if (!($2 & 255)) {
   break label$1;
  }
  while (1) {
   $2 = HEAPU8[$1 + 1 | 0];
   HEAP8[$0 + 1 | 0] = $2;
   $0 = $0 + 1 | 0;
   $1 = $1 + 1 | 0;
   if ($2) {
    continue;
   }
   break;
  }
 }
 return $0;
}

function tflite__MicroMutableOpResolver_9u___FindOp_28char_20const__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 $0 = HEAP32[$2 + 24 >> 2];
 HEAP32[$2 + 16 >> 2] = 0;
 label$1: {
  while (1) {
   if (HEAPU32[$2 + 16 >> 2] < HEAPU32[$0 + 292 >> 2]) {
    HEAP32[$2 + 12 >> 2] = ($0 + 4 | 0) + (HEAP32[$2 + 16 >> 2] << 5);
    label$4: {
     if (HEAP32[HEAP32[$2 + 12 >> 2] + 20 >> 2] != 32) {
      break label$4;
     }
     if (strcmp(HEAP32[HEAP32[$2 + 12 >> 2] + 24 >> 2], HEAP32[$2 + 20 >> 2])) {
      break label$4;
     }
     HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
     break label$1;
    }
    HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 16 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$2 + 28 >> 2] = 0;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function tflite__CalculateInputRadius_28int_2c_20int_2c_20int_29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 32 | 0;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 $0 = $3;
 $1 = HEAP32[$3 + 20 >> 2] - HEAP32[$3 + 28 >> 2] | 0;
 $2 = $1 & 31;
 $4 = +((1 << HEAP32[$3 + 28 >> 2]) - 1 | 0) * 1;
 if (($1 & 63) >>> 0 >= 32) {
  $1 = 1 << $2;
  $2 = 0;
 } else {
  $1 = (1 << $2) - 1 & 1 >>> 32 - $2;
  $2 = 1 << $2;
 }
 $4 = $4 * (+($2 >>> 0) + +($1 | 0) * 4294967296);
 $1 = HEAP32[$3 + 24 >> 2];
 $2 = $1 & 31;
 if (($1 & 63) >>> 0 >= 32) {
  $1 = 1 << $2;
  $2 = 0;
 } else {
  $1 = (1 << $2) - 1 & 1 >>> 32 - $2;
  $2 = 1 << $2;
 }
 HEAPF64[$0 + 8 >> 3] = $4 / (+($2 >>> 0) + +($1 | 0) * 4294967296);
 $4 = Math_floor(HEAPF64[$3 + 8 >> 3]);
 label$1: {
  if (Math_abs($4) < 2147483648) {
   $0 = ~~$4;
   break label$1;
  }
  $0 = -2147483648;
 }
 return $0;
}

function jshGetDeviceFor($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP16[$3 + 12 >> 1] = $0;
 HEAP16[$3 + 10 >> 1] = $1;
 HEAP8[$3 + 9 | 0] = $2;
 label$1: {
  if (!(jshIsPinValid(HEAPU8[$3 + 9 | 0]) & 1)) {
   HEAP16[$3 + 14 >> 1] = 0;
   break label$1;
  }
  HEAP32[$3 + 4 >> 2] = 0;
  while (1) {
   if (HEAP32[$3 + 4 >> 2] < 0) {
    $0 = (Math_imul(HEAPU8[$3 + 9 | 0], 3) + 145059 | 0) + (HEAP32[$3 + 4 >> 2] << 1) | 0;
    HEAP16[$3 + 2 >> 1] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8;
    if (!(HEAPU16[$3 + 10 >> 1] < (HEAPU16[$3 + 2 >> 1] & 4080) | HEAPU16[$3 + 12 >> 1] > (HEAPU16[$3 + 2 >> 1] & 4080))) {
     HEAP16[$3 + 14 >> 1] = HEAPU16[$3 + 2 >> 1];
     break label$1;
    }
    HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP16[$3 + 14 >> 1] = 0;
 }
 __stack_pointer = $3 + 16 | 0;
 return HEAPU16[$3 + 14 >> 1];
}

function jsvArrayPushAll($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP8[$3 + 23 | 0] = $2;
 jsvObjectIteratorNew($3 + 16 | 0, HEAP32[$3 + 24 >> 2]);
 while (1) {
  if (jsvObjectIteratorHasValue($3 + 16 | 0) & 1) {
   HEAP32[$3 + 12 >> 2] = jsvObjectIteratorGetValue($3 + 16 | 0);
   HEAP8[$3 + 11 | 0] = 1;
   if (HEAP8[$3 + 23 | 0] & 1) {
    HEAP32[$3 + 4 >> 2] = jsvGetIndexOf(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 12 >> 2], 0);
    if (HEAP32[$3 + 4 >> 2]) {
     HEAP8[$3 + 11 | 0] = 0;
     jsvUnLock(HEAP32[$3 + 4 >> 2]);
    }
   }
   if (HEAP8[$3 + 11 | 0] & 1) {
    jsvArrayPush(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 12 >> 2]);
   }
   jsvUnLock(HEAP32[$3 + 12 >> 2]);
   jsvObjectIteratorNext($3 + 16 | 0);
   continue;
  }
  break;
 }
 jsvObjectIteratorFree($3 + 16 | 0);
 __stack_pointer = $3 + 32 | 0;
}

function jswrap_graphics_lineTo($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 96 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 88 >> 2] = $0;
 HEAP32[$3 + 84 >> 2] = $1;
 HEAP32[$3 + 80 >> 2] = $2;
 label$1: {
  if (!(graphicsGetFromVar($3 + 8 | 0, HEAP32[$3 + 88 >> 2]) & 1)) {
   HEAP32[$3 + 92 >> 2] = 0;
   break label$1;
  }
  graphicsDrawLine($3 + 8 | 0, (HEAPU8[$3 + 35 | 0] | HEAPU8[$3 + 36 | 0] << 8) << 16 >> 16, (HEAPU8[$3 + 37 | 0] | HEAPU8[$3 + 38 | 0] << 8) << 16 >> 16, HEAP32[$3 + 84 >> 2], HEAP32[$3 + 80 >> 2]);
  $0 = HEAP32[$3 + 84 >> 2];
  HEAP8[$3 + 35 | 0] = $0;
  HEAP8[$3 + 36 | 0] = $0 >>> 8;
  $0 = HEAP32[$3 + 80 >> 2];
  HEAP8[$3 + 37 | 0] = $0;
  HEAP8[$3 + 38 | 0] = $0 >>> 8;
  graphicsSetVar($3 + 8 | 0);
  HEAP32[$3 + 92 >> 2] = jsvLockAgain(HEAP32[$3 + 88 >> 2]);
 }
 __stack_pointer = $3 + 96 | 0;
 return HEAP32[$3 + 92 >> 2];
}

function jswrap_date_setHours($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0;
 $5 = __stack_pointer - 48 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 44 >> 2] = $0;
 HEAP32[$5 + 40 >> 2] = $1;
 HEAP32[$5 + 36 >> 2] = $2;
 HEAP32[$5 + 32 >> 2] = $3;
 HEAP32[$5 + 28 >> 2] = $4;
 getTimeFromDateVar($5, HEAP32[$5 + 44 >> 2], 0);
 HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 40 >> 2];
 if (jsvIsNumeric(HEAP32[$5 + 36 >> 2]) & 1) {
  HEAP32[$5 + 12 >> 2] = jsvGetInteger(HEAP32[$5 + 36 >> 2]);
 }
 if (jsvIsNumeric(HEAP32[$5 + 32 >> 2]) & 1) {
  HEAP32[$5 + 8 >> 2] = jsvGetInteger(HEAP32[$5 + 32 >> 2]);
 }
 if (jsvIsNumeric(HEAP32[$5 + 28 >> 2]) & 1) {
  HEAP32[$5 + 4 >> 2] = jsvGetInteger(HEAP32[$5 + 28 >> 2]);
 }
 setCorrectTimeZone($5);
 $6 = jswrap_date_setTime(HEAP32[$5 + 44 >> 2], fromTimeInDay($5));
 __stack_pointer = $5 + 48 | 0;
 return +$6;
}

function jsvStringIteratorNew($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jsvLockAgain(HEAP32[$3 + 8 >> 2]);
 HEAP32[HEAP32[$3 + 12 >> 2] + 12 >> 2] = $0;
 HEAP32[HEAP32[$3 + 12 >> 2] + 8 >> 2] = 0;
 $0 = jsvGetCharactersInVar(HEAP32[HEAP32[$3 + 12 >> 2] + 12 >> 2]);
 HEAP32[HEAP32[$3 + 12 >> 2] + 4 >> 2] = $0;
 label$1: {
  if (jsvIsFlashString(HEAP32[HEAP32[$3 + 12 >> 2] + 12 >> 2]) & 1) {
   HEAP32[HEAP32[$3 + 12 >> 2] + 4 >> 2] = 0;
   HEAP32[HEAP32[$3 + 12 >> 2] >> 2] = HEAP32[$3 + 4 >> 2];
   jsvStringIteratorLoadFlashString_1(HEAP32[$3 + 12 >> 2]);
   break label$1;
  }
  jsvStringIteratorUpdatePtr(HEAP32[$3 + 12 >> 2]);
  HEAP32[HEAP32[$3 + 12 >> 2] >> 2] = HEAP32[$3 + 4 >> 2];
  jsvStringIteratorCatchUp(HEAP32[$3 + 12 >> 2]);
 }
 __stack_pointer = $3 + 16 | 0;
}

function jsfResetStorage_progress($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = 0;
 while (1) {
  if (HEAP32[$3 + 20 >> 2]) {
   HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 20 >> 2];
   if (HEAPU32[$3 + 16 >> 2] > 8192) {
    HEAP32[$3 + 16 >> 2] = 8192;
   }
   jshFlashWrite(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 16 >> 2]);
   HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 16 >> 2] + HEAP32[$3 + 28 >> 2];
   HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 16 >> 2] + HEAP32[$3 + 24 >> 2];
   HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 20 >> 2] - HEAP32[$3 + 16 >> 2];
   HEAP32[$3 >> 2] = HEAP8[(HEAP32[$3 + 12 >> 2] & 3) + 96366 | 0];
   jsiConsolePrintf(107762, $3);
   HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $3 + 32 | 0;
}

function _jswrap_graphics_floodFill_inside($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 24 >> 2] = $0;
 HEAP32[$4 + 20 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $2;
 HEAP32[$4 + 12 >> 2] = $3;
 label$1: {
  label$2: {
   label$3: {
    if ((HEAP32[$4 + 20 >> 2] | HEAP32[$4 + 16 >> 2]) < 0) {
     break label$3;
    }
    $0 = HEAP32[$4 + 24 >> 2];
    if (HEAP32[$4 + 20 >> 2] >= (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8)) {
     break label$3;
    }
    $0 = HEAP32[$4 + 24 >> 2];
    if (HEAP32[$4 + 16 >> 2] < (HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8)) {
     break label$2;
    }
   }
   HEAP8[$4 + 31 | 0] = 0;
   break label$1;
  }
  HEAP8[$4 + 31 | 0] = (graphicsGetPixel(HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]) | 0) == HEAP32[$4 + 12 >> 2];
 }
 __stack_pointer = $4 + 32 | 0;
 return HEAP8[$4 + 31 | 0] & 1;
}

function sin($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 wasm2js_scratch_store_f64(+$0);
 $2 = wasm2js_scratch_load_i32(1) | 0;
 wasm2js_scratch_load_i32(0) | 0;
 $2 = $2 & 2147483647;
 label$1: {
  if ($2 >>> 0 <= 1072243195) {
   if ($2 >>> 0 < 1045430272) {
    break label$1;
   }
   $0 = __sin($0, 0, 0);
   break label$1;
  }
  if ($2 >>> 0 >= 2146435072) {
   $0 = $0 - $0;
   break label$1;
  }
  label$4: {
   switch (__rem_pio2($0, $1) & 3) {
   case 0:
    $0 = __sin(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3], 1);
    break label$1;

   case 1:
    $0 = __cos(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3]);
    break label$1;

   case 2:
    $0 = -__sin(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3], 1);
    break label$1;

   default:
    break label$4;
   }
  }
  $0 = -__cos(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3]);
 }
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_banglejs_getHealthStatus($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  label$2: {
   if (!(jsvIsUndefined(HEAP32[$1 + 8 >> 2]) & 1)) {
    if (!(jsvIsStringEqual(HEAP32[$1 + 8 >> 2], 102486) & 1)) {
     break label$2;
    }
   }
   HEAP32[$1 + 12 >> 2] = _jswrap_banglejs_getHealthStatusObject(343272);
   break label$1;
  }
  if (jsvIsStringEqual(HEAP32[$1 + 8 >> 2], 97527) & 1) {
   HEAP32[$1 + 12 >> 2] = _jswrap_banglejs_getHealthStatusObject(343288);
   break label$1;
  }
  if (jsvIsStringEqual(HEAP32[$1 + 8 >> 2], 96674) & 1) {
   HEAP32[$1 + 12 >> 2] = _jswrap_banglejs_getHealthStatusObject(343304);
   break label$1;
  }
  HEAP32[$1 >> 2] = HEAP32[$1 + 8 >> 2];
  jsExceptionHere(1, 101710, $1);
  HEAP32[$1 + 12 >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function graphicsFallbackFillRect($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $6 = __stack_pointer - 32 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 28 >> 2] = $0;
 HEAP32[$6 + 24 >> 2] = $1;
 HEAP32[$6 + 20 >> 2] = $2;
 HEAP32[$6 + 16 >> 2] = $3;
 HEAP32[$6 + 12 >> 2] = $4;
 HEAP32[$6 + 8 >> 2] = $5;
 HEAP32[$6 >> 2] = HEAP32[$6 + 20 >> 2];
 while (1) {
  if (HEAP32[$6 >> 2] <= HEAP32[$6 + 12 >> 2]) {
   HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 24 >> 2];
   while (1) {
    if (HEAP32[$6 + 4 >> 2] <= HEAP32[$6 + 16 >> 2]) {
     graphicsSetPixelDevice(HEAP32[$6 + 28 >> 2], HEAP32[$6 + 4 >> 2], HEAP32[$6 >> 2], HEAP32[$6 + 8 >> 2]);
     HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 4 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$6 >> 2] = HEAP32[$6 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $6 + 32 | 0;
}

function jswrap_banglejs_setLCDPowerBacklight($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 if ((HEAP8[$1 + 15 | 0] & 1) != ((HEAP32[85796] & 131072) != 0 | 0)) {
  HEAP32[$1 + 8 >> 2] = jsvObjectGetChildIfExists(HEAP32[46747], 105122);
  if (HEAP32[$1 + 8 >> 2]) {
   HEAP32[$1 + 4 >> 2] = jsvNewFromBool(HEAP8[$1 + 15 | 0] & 1);
   jsiQueueObjectCallbacks(HEAP32[$1 + 8 >> 2], 97902, $1 + 4 | 0, 1);
   jsvUnLock(HEAP32[$1 + 4 >> 2]);
  }
  jsvUnLock(HEAP32[$1 + 8 >> 2]);
 }
 label$3: {
  if (HEAP8[$1 + 15 | 0] & 1) {
   if (HEAP32[85800] > 0) {
    HEAP16[171604] = 0;
   }
   HEAP32[85796] = HEAP32[85796] | 131072;
   break label$3;
  }
  if (!(HEAP32[85801] <= 0 | HEAP32[85801] > HEAP32[85800])) {
   _jswrap_banglejs_setLocked(1, 97905);
  }
  HEAP32[85796] = HEAP32[85796] & -131073;
 }
 __stack_pointer = $1 + 16 | 0;
}

function jsvAddGetterOrSetter($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP8[$4 + 23 | 0] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = jsvFindChildFromVar(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 24 >> 2], 1);
 if (jsvIsName(HEAP32[$4 + 12 >> 2]) & 1) {
  HEAP32[$4 + 8 >> 2] = jsvGetValueOfName(HEAP32[$4 + 12 >> 2]);
  if (!(jsvIsGetterOrSetter(HEAP32[$4 + 8 >> 2]) & 1)) {
   jsvUnLock(HEAP32[$4 + 8 >> 2]);
   HEAP32[$4 + 8 >> 2] = jsvNewWithFlags(6);
   jsvSetValueOfName(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2]);
  }
  if (jsvIsGetterOrSetter(HEAP32[$4 + 8 >> 2]) & 1) {
   jsvObjectSetChild(HEAP32[$4 + 8 >> 2], HEAP8[$4 + 23 | 0] & 1 ? 98052 : 98048, HEAP32[$4 + 16 >> 2]);
  }
  jsvUnLock(HEAP32[$4 + 8 >> 2]);
 }
 jsvUnLock(HEAP32[$4 + 12 >> 2]);
 __stack_pointer = $4 + 32 | 0;
}

function jsvGetLongInteger($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 4 >> 2] = $0;
 label$1: {
  if (jsvIsInt(HEAP32[$1 + 4 >> 2]) & 1) {
   $0 = jsvGetInteger(HEAP32[$1 + 4 >> 2]);
   $3 = $0 >> 31;
   HEAP32[$1 + 8 >> 2] = $0;
   HEAP32[$1 + 12 >> 2] = $3;
   break label$1;
  }
  $0 = $1;
  $2 = jsvGetFloat(HEAP32[$1 + 4 >> 2]);
  label$3: {
   if (Math_abs($2) < 0x8000000000000000) {
    $3 = Math_abs($2) >= 1 ? ~~($2 > 0 ? Math_min(Math_floor($2 * 2.3283064365386963e-10), 4294967295) : Math_ceil(($2 - +(~~$2 >>> 0 >>> 0)) * 2.3283064365386963e-10)) >>> 0 : 0;
    $4 = ~~$2 >>> 0;
    break label$3;
   }
   $3 = -2147483648;
  }
  HEAP32[$0 + 8 >> 2] = $4;
  HEAP32[$0 + 12 >> 2] = $3;
 }
 __stack_pointer = $1 + 16 | 0;
 $0 = HEAP32[$1 + 12 >> 2];
 i64toi32_i32$HIGH_BITS = $0;
 $3 = HEAP32[$1 + 8 >> 2];
 return $3;
}

function _jswrap_promise_add_reaction($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP8[$4 + 19 | 0] = $3;
 HEAP32[$4 + 12 >> 2] = _jswrap_promise_new_reaction(HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2]);
 if (HEAP32[$4 + 12 >> 2]) {
  HEAP32[$4 + 8 >> 2] = HEAP8[$4 + 19 | 0] & 1 ? 102509 : 98114;
  HEAP32[$4 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 8 >> 2]);
  label$2: {
   if (jsvIsArray(HEAP32[$4 + 4 >> 2]) & 1) {
    jsvArrayPush(HEAP32[$4 + 4 >> 2], HEAP32[$4 + 12 >> 2]);
    break label$2;
   }
   jsvUnLock(HEAP32[$4 + 4 >> 2]);
   jsvObjectSetChildAndUnLock(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 8 >> 2], jsvNewArray($4 + 12 | 0, 1));
  }
  jsvUnLock2(HEAP32[$4 + 4 >> 2], HEAP32[$4 + 12 >> 2]);
 }
 __stack_pointer = $4 + 32 | 0;
}

function jswrap_error_toString($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 HEAP32[$1 + 20 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 24 >> 2], 104973);
 if (!HEAP32[$1 + 20 >> 2]) {
  HEAP32[$1 + 20 >> 2] = jsvNewFromString(101100);
 }
 label$2: {
  if (!HEAP32[$1 + 20 >> 2]) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$2;
  }
  HEAP32[$1 + 16 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 24 >> 2], 105323);
  if (HEAP32[$1 + 16 >> 2]) {
   $0 = HEAP32[$1 + 20 >> 2];
   HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 16 >> 2];
   HEAP32[$1 >> 2] = $0;
   HEAP32[$1 + 12 >> 2] = jsvVarPrintf(97108, $1);
   jsvUnLock2(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 20 >> 2]);
   HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 12 >> 2];
  }
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 20 >> 2];
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function jsiDumpDeviceInitialisation($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 HEAP32[$3 + 16 >> 2] = jsvObjectGetChildIfExists(HEAP32[46747], HEAP32[$3 + 20 >> 2]);
 if (HEAP32[$3 + 16 >> 2]) {
  HEAP32[$3 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 16 >> 2], 100220);
  if (HEAP32[$3 + 12 >> 2]) {
   $0 = HEAP32[$3 + 28 >> 2];
   $1 = HEAP32[$3 + 24 >> 2];
   HEAP32[$3 >> 2] = HEAP32[$3 + 20 >> 2];
   cbprintf($0, $1, 126642, $3);
   if (jsvIsObject(HEAP32[$3 + 12 >> 2]) & 1) {
    jsfGetJSONWithCallback(HEAP32[$3 + 12 >> 2], 0, 32, 0, HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2]);
   }
   FUNCTION_TABLE[HEAP32[$3 + 28 >> 2]](128774, HEAP32[$3 + 24 >> 2]);
  }
  jsvUnLock2(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 16 >> 2]);
 }
 __stack_pointer = $3 + 32 | 0;
}

function jspGetNamedVariable($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1: {
  if ((HEAP32[46755] & 63) == 1) {
   $0 = jspeiFindInScopes(HEAP32[$1 + 12 >> 2]);
   break label$1;
  }
  $0 = 0;
 }
 HEAP32[$1 + 8 >> 2] = $0;
 if (!(HEAP32[$1 + 8 >> 2] | (HEAP32[46755] & 63) != 1)) {
  HEAP32[$1 + 8 >> 2] = jswFindBuiltInFunction(0, HEAP32[$1 + 12 >> 2]);
  label$4: {
   if (HEAP32[$1 + 8 >> 2]) {
    if (jswIsBuiltInObject(HEAP32[$1 + 12 >> 2]) & 1) {
     HEAP32[$1 + 4 >> 2] = jsvAddNamedChild(HEAP32[46747], HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2]);
     jsvUnLock(HEAP32[$1 + 8 >> 2]);
     HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 4 >> 2];
    }
    break label$4;
   }
   HEAP32[$1 + 8 >> 2] = jsvNewNameFromString(HEAP32[$1 + 12 >> 2]);
  }
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jswrap_string_substring($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 if (jsvIsUndefined(HEAP32[$3 + 20 >> 2]) & 1) {
  $0 = 2147483647;
 } else {
  $0 = jsvGetInteger(HEAP32[$3 + 20 >> 2]);
 }
 HEAP32[$3 + 16 >> 2] = $0;
 if (HEAP32[$3 + 24 >> 2] < 0) {
  HEAP32[$3 + 24 >> 2] = 0;
 }
 if (HEAP32[$3 + 16 >> 2] < 0) {
  HEAP32[$3 + 16 >> 2] = 0;
 }
 if (HEAP32[$3 + 16 >> 2] < HEAP32[$3 + 24 >> 2]) {
  HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 24 >> 2];
  HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 16 >> 2];
  HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 12 >> 2];
 }
 $0 = jsvNewFromStringVar(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 16 >> 2] - HEAP32[$3 + 24 >> 2] | 0);
 __stack_pointer = $3 + 32 | 0;
 return $0 | 0;
}

function jswrap_date_setFullYear($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = __stack_pointer - 80 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 76 >> 2] = $0;
 HEAP32[$4 + 72 >> 2] = $1;
 HEAP32[$4 + 68 >> 2] = $2;
 HEAP32[$4 + 64 >> 2] = $3;
 getTimeFromDateVar($4 + 32 | 0, HEAP32[$4 + 76 >> 2], 0);
 getCalendarDate($4 + 8 | 0, HEAP32[$4 + 32 >> 2]);
 HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 72 >> 2];
 if (jsvIsNumeric(HEAP32[$4 + 68 >> 2]) & 1) {
  HEAP32[$4 + 16 >> 2] = jsvGetInteger(HEAP32[$4 + 68 >> 2]);
 }
 if (jsvIsNumeric(HEAP32[$4 + 64 >> 2]) & 1) {
  HEAP32[$4 + 12 >> 2] = jsvGetInteger(HEAP32[$4 + 64 >> 2]);
 }
 HEAP32[$4 + 32 >> 2] = fromCalendarDate($4 + 8 | 0);
 setCorrectTimeZone($4 + 32 | 0);
 $5 = jswrap_date_setTime(HEAP32[$4 + 76 >> 2], fromTimeInDay($4 + 32 | 0));
 __stack_pointer = $4 + 80 | 0;
 return +$5;
}

function jsvArrayAddToEnd($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 16 >> 2];
 if (jsvGetLastChild(HEAP32[$3 + 24 >> 2]) & 65535) {
  HEAP32[$3 + 8 >> 2] = jsvLock(jsvGetLastChild(HEAP32[$3 + 24 >> 2]) & 65535);
  HEAP32[$3 + 12 >> 2] = jsvGetInteger(HEAP32[$3 + 8 >> 2]) + 1;
  jsvUnLock(HEAP32[$3 + 8 >> 2]);
 }
 HEAP32[$3 + 4 >> 2] = jsvMakeIntoVariableName(jsvNewFromInteger(HEAP32[$3 + 12 >> 2]), HEAP32[$3 + 20 >> 2]);
 label$2: {
  if (!HEAP32[$3 + 4 >> 2]) {
   HEAP32[$3 + 28 >> 2] = 0;
   break label$2;
  }
  jsvAddName(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 4 >> 2]);
  jsvUnLock(HEAP32[$3 + 4 >> 2]);
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 12 >> 2] + 1;
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function jsvHasChildren($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63;
  $0 = 1;
  label$3: {
   if (HEAP8[$1 + 7 | 0] == 7) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 9) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 8) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 5) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 1) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 3) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 1) {
    break label$3;
   }
   $0 = HEAP8[$1 + 7 | 0] == 6;
  }
  HEAP8[$1 + 15 | 0] = $0;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function tflite__GetReciprocal_28int_2c_20int_2c_20int__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 HEAP32[$3 + 16 >> 2] = int_20tflite__CountLeadingZeros_unsigned_20int__28unsigned_20int_29(HEAP32[$3 + 28 >> 2]);
 HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = HEAP32[$3 + 24 >> 2] - HEAP32[$3 + 16 >> 2];
 HEAP32[$3 + 12 >> 2] = (HEAP32[$3 + 28 >> 2] << HEAP32[$3 + 16 >> 2]) - -2147483648;
 HEAP32[$3 >> 2] = gemmlowp__FixedPoint_int_2c_200___FromRaw_28int_29(HEAP32[$3 + 12 >> 2]);
 HEAP32[$3 + 8 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__one_over_one_plus_x_for_x_in_0_1_int__28gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$3 >> 2]);
 $0 = gemmlowp__FixedPoint_int_2c_200___raw_28_29($3 + 8 | 0);
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$0 >> 2];
}

function jswrap_i2c_readReg($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 24 >> 2] = $0;
 HEAP32[$4 + 20 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $2;
 HEAP32[$4 + 12 >> 2] = $3;
 label$1: {
  if (!(jsvIsObject(HEAP32[$4 + 24 >> 2]) & 1)) {
   HEAP32[$4 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP8[$4 + 11 | 0] = jsiGetDeviceFromClass(HEAP32[$4 + 24 >> 2]);
  HEAP8[$4 + 10 | 0] = 0;
  HEAP8[$4 + 9 | 0] = HEAP32[$4 + 16 >> 2];
  _jswrap_i2c_writeTo(HEAP32[$4 + 24 >> 2], HEAPU8[$4 + 11 | 0], HEAP32[$4 + 20 >> 2], HEAP8[$4 + 10 | 0] & 1, 1, $4 + 9 | 0);
  HEAP32[$4 + 28 >> 2] = _jswrap_i2c_readFrom(HEAP32[$4 + 24 >> 2], HEAPU8[$4 + 11 | 0], HEAP32[$4 + 20 >> 2], HEAP8[$4 + 10 | 0] & 1, HEAP32[$4 + 12 >> 2]);
 }
 __stack_pointer = $4 + 32 | 0;
 return HEAP32[$4 + 28 >> 2];
}

function jsvGetCharsOnLine($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer + -64 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 60 >> 2] = $0;
 HEAP32[$2 + 56 >> 2] = $1;
 HEAP32[$2 + 52 >> 2] = 1;
 HEAP32[$2 + 48 >> 2] = 0;
 jsvStringIteratorNew($2 + 8 | 0, HEAP32[$2 + 60 >> 2], 0);
 while (1) {
  label$2: {
   if (!(jsvStringIteratorHasChar_1($2 + 8 | 0) & 1)) {
    break label$2;
   }
   label$3: {
    if ((jsvStringIteratorGetCharAndNext($2 + 8 | 0) & 255) == 10) {
     HEAP32[$2 + 52 >> 2] = HEAP32[$2 + 52 >> 2] + 1;
     if (HEAPU32[$2 + 52 >> 2] > HEAPU32[$2 + 56 >> 2]) {
      break label$2;
     }
     break label$3;
    }
    if (HEAP32[$2 + 52 >> 2] == HEAP32[$2 + 56 >> 2]) {
     HEAP32[$2 + 48 >> 2] = HEAP32[$2 + 48 >> 2] + 1;
    }
   }
   continue;
  }
  break;
 }
 jsvStringIteratorFree_1($2 + 8 | 0);
 __stack_pointer = $2 - -64 | 0;
 return HEAP32[$2 + 48 >> 2];
}

function jsfEraseFileInternal($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP8[$3 + 39 | 0] = $2;
 HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 44 >> 2] - 32;
 HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 44 >> 2] + ((HEAP32[$3 + 40 >> 2] + 4 | 0) - HEAP32[$3 + 40 >> 2] | 0);
 HEAP32[HEAP32[$3 + 40 >> 2] + 4 >> 2] = 0;
 jshFlashWrite(HEAP32[$3 + 40 >> 2] + 4 | 0, HEAP32[$3 + 44 >> 2], 4);
 if (!(!(HEAP8[$3 + 39 | 0] & 1) | HEAPU32[$3 + 44 >> 2] < 134217728 | HEAPU32[$3 + 44 >> 2] >= 138412032)) {
  HEAP32[$3 + 32 >> 2] = 0;
  if (HEAP32[46756]) {
   HEAP32[$3 + 32 >> 2] = HEAP32[46756] + HEAP32[46757];
  }
  jsfGetStorageStats($3, HEAP32[$3 + 32 >> 2], 1);
  if (HEAP32[$3 + 12 >> 2] + HEAP32[$3 + 4 >> 2] >>> 0 > 200) {
   jsfBankCreateFileTable(134217728);
  }
 }
 __stack_pointer = $3 + 48 | 0;
}

function i2c_rd_bit($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 i2c_pin_wr1(HEAPU8[HEAP32[$1 + 12 >> 2] + 1 | 0]);
 dly(HEAP32[$1 + 12 >> 2]);
 i2c_pin_wr1(HEAPU8[HEAP32[$1 + 12 >> 2]]);
 dly(HEAP32[$1 + 12 >> 2]);
 HEAP32[$1 + 8 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2];
 while (1) {
  $0 = 0;
  if (!(jshPinGetValue(HEAPU8[HEAP32[$1 + 12 >> 2]]) & 1)) {
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP32[$1 + 8 >> 2] = $0 - 1;
   $0 = ($0 | 0) != 0;
  }
  if ($0) {
   continue;
  }
  break;
 }
 if (!(HEAP32[$1 + 8 >> 2] | !HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2])) {
  err(126319);
 }
 dly(HEAP32[$1 + 12 >> 2]);
 HEAP8[$1 + 7 | 0] = jshPinGetValue(HEAPU8[HEAP32[$1 + 12 >> 2] + 1 | 0]) & 1;
 i2c_pin_wr0(HEAPU8[HEAP32[$1 + 12 >> 2]]);
 dly(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP8[$1 + 7 | 0] & 1;
}

function tflite__SimpleMemoryAllocator__Create_28tflite__ErrorReporter__2c_20unsigned_20char__2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP32[$3 + 36 >> 2] = $2;
 label$1: {
  if (!HEAP32[$3 + 44 >> 2]) {
   break label$1;
  }
 }
 label$2: {
  if (!HEAP32[$3 + 40 >> 2]) {
   break label$2;
  }
 }
 FUNCTION_TABLE[635]($3 + 8 | 0, HEAP32[$3 + 44 >> 2], HEAP32[$3 + 40 >> 2], HEAP32[$3 + 36 >> 2]) | 0;
 HEAP32[$3 + 4 >> 2] = tflite__SimpleMemoryAllocator__AllocateFromTail_28unsigned_20long_2c_20unsigned_20long_29($3 + 8 | 0, 28, 4);
 $0 = HEAP32[$3 + 4 >> 2];
 tflite__SimpleMemoryAllocator__SimpleMemoryAllocator_28tflite__SimpleMemoryAllocator_20const__29($0, $3 + 8 | 0);
 FUNCTION_TABLE[636]($3 + 8 | 0) | 0;
 __stack_pointer = $3 + 48 | 0;
 return $0;
}

function jsvIteratorGetKey($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  label$2: {
   switch (HEAP32[HEAP32[$1 + 8 >> 2] >> 2] - 1 | 0) {
   case 3:
    HEAP32[$1 + 12 >> 2] = jsvNewFromInteger(HEAP32[HEAP32[$1 + 8 >> 2] + 12 >> 2]);
    break label$1;

   case 1:
    HEAP32[$1 + 12 >> 2] = jsvObjectIteratorGetKey_1(HEAP32[$1 + 8 >> 2] + 4 | 0);
    break label$1;

   case 0:
    HEAP32[$1 + 12 >> 2] = jsvMakeIntoVariableName(jsvNewFromInteger(jsvStringIteratorGetIndex_2(HEAP32[$1 + 8 >> 2] + 4 | 0)), 0);
    break label$1;

   case 2:
    HEAP32[$1 + 12 >> 2] = jsvMakeIntoVariableName(jsvArrayBufferIteratorGetIndex(HEAP32[$1 + 8 >> 2] + 4 | 0), 0);
    break label$1;

   default:
    break label$2;
   }
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jshPushIOCharEventAppend($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP8[$2 + 14 | 0] = $0;
 HEAP8[$2 + 13 | 0] = $1;
 HEAP8[$2 + 12 | 0] = HEAPU8[187124] + 255;
 label$1: {
  if (!(HEAPU8[187124] == HEAPU8[187125] | HEAPU8[$2 + 12 | 0] == HEAPU8[187125]) & HEAPU8[$2 + 14 | 0] == (HEAPU8[Math_imul(HEAPU8[$2 + 12 | 0], 5) + 187712 | 0] & 31)) {
   HEAP8[$2 + 11 | 0] = ((HEAPU8[Math_imul(HEAPU8[$2 + 12 | 0], 5) + 187712 | 0] & 96) >>> 5 | 0) + 1;
   if (HEAPU8[$2 + 11 | 0] < 4) {
    HEAP8[HEAPU8[$2 + 11 | 0] + (Math_imul(HEAPU8[$2 + 12 | 0], 5) + 187713 | 0) | 0] = HEAPU8[$2 + 13 | 0];
    HEAP8[Math_imul(HEAPU8[$2 + 12 | 0], 5) + 187712 | 0] = HEAPU8[Math_imul(HEAPU8[$2 + 12 | 0], 5) + 187712 | 0] & 159 | HEAPU8[$2 + 11 | 0] << 5;
    HEAP8[$2 + 15 | 0] = 1;
    break label$1;
   }
  }
  HEAP8[$2 + 15 | 0] = 0;
 }
 return HEAP8[$2 + 15 | 0] & 1;
}

function jsvFindChildFromStringI($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP16[$2 + 18 >> 1] = jsvGetFirstChild(HEAP32[$2 + 24 >> 2]);
 label$1: {
  while (1) {
   if (HEAPU16[$2 + 18 >> 1]) {
    HEAP32[$2 + 12 >> 2] = jsvGetAddressOf(HEAPU16[$2 + 18 >> 1]);
    label$4: {
     if (!(jsvHasCharacterData(HEAP32[$2 + 12 >> 2]) & 1)) {
      break label$4;
     }
     if (!(jsvIsStringEqualOrStartsWithOffset(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 20 >> 2], 0, 0, 1) & 1)) {
      break label$4;
     }
     HEAP32[$2 + 28 >> 2] = jsvLockAgain(HEAP32[$2 + 12 >> 2]);
     break label$1;
    }
    HEAP16[$2 + 18 >> 1] = jsvGetNextSibling(HEAP32[$2 + 12 >> 2]);
    continue;
   }
   break;
  }
  HEAP32[$2 + 28 >> 2] = 0;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function _jswrap_graphics_parseImage_palette($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] + 28 >> 2] = 0;
 if (!(!(jsvIsArrayBuffer(HEAP32[$2 + 8 >> 2]) & 1) | HEAPU8[HEAP32[$2 + 8 >> 2] + 5 | 0] != 2)) {
  HEAP32[$2 + 4 >> 2] = 0;
  $0 = jsvGetDataPointer(HEAP32[$2 + 8 >> 2], $2 + 4 | 0);
  HEAP32[HEAP32[$2 + 12 >> 2] + 28 >> 2] = $0;
  label$2: {
   if (!(HEAP32[$2 + 4 >> 2] == 2 | HEAP32[$2 + 4 >> 2] == 4 | (HEAP32[$2 + 4 >> 2] == 8 | HEAP32[$2 + 4 >> 2] == 16))) {
    if (HEAP32[$2 + 4 >> 2] != 256) {
     break label$2;
    }
   }
   HEAP32[HEAP32[$2 + 12 >> 2] + 32 >> 2] = HEAP32[$2 + 4 >> 2] - 1;
  }
 }
 if (!HEAP32[HEAP32[$2 + 12 >> 2] + 28 >> 2]) {
  jsExceptionHere(1, 99892, 0);
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 8 >> 2];
}

function jsvGetLength($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (jsvIsArray(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = jsvGetArrayLength(HEAP32[$1 + 8 >> 2]);
   break label$1;
  }
  if (jsvIsArrayBuffer(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = jsvGetArrayBufferLength(HEAP32[$1 + 8 >> 2]);
   break label$1;
  }
  if (jsvIsString(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = jsvGetStringLength(HEAP32[$1 + 8 >> 2]);
   break label$1;
  }
  label$5: {
   if (!(jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1)) {
    if (!(jsvIsFunction(HEAP32[$1 + 8 >> 2]) & 1)) {
     break label$5;
    }
   }
   HEAP32[$1 + 12 >> 2] = jsvGetChildren(HEAP32[$1 + 8 >> 2]);
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 1;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jswrap_interactive_setTime($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAPF64[$1 + 24 >> 3] = $0;
 jshInterruptOff();
 $2 = jshGetTimeFromMilliseconds(HEAPF64[$1 + 24 >> 3] * 1e3);
 HEAP32[$1 + 16 >> 2] = $2;
 HEAP32[$1 + 20 >> 2] = i64toi32_i32$HIGH_BITS;
 $2 = HEAP32[$1 + 20 >> 2];
 HEAP32[46778] = HEAP32[$1 + 16 >> 2];
 HEAP32[46779] = $2;
 $2 = jshGetSystemTime();
 HEAP32[$1 + 8 >> 2] = $2;
 HEAP32[$1 + 12 >> 2] = i64toi32_i32$HIGH_BITS;
 $2 = HEAP32[$1 + 20 >> 2];
 jshSetSystemTime(HEAP32[$1 + 16 >> 2], $2);
 $2 = HEAP32[$1 + 16 >> 2];
 $4 = $2;
 $2 = HEAP32[$1 + 12 >> 2];
 $5 = HEAP32[$1 + 8 >> 2];
 $3 = $2 + ($5 >>> 0 > $4 >>> 0) | 0;
 $2 = HEAP32[$1 + 20 >> 2];
 $3 = $2 - $3 | 0;
 jstSystemTimeChanged($4 - $5 | 0, $3);
 jshInterruptOn();
 __stack_pointer = $1 + 32 | 0;
}

function jswrap_banglejs_lcdWr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 $2 = $3;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 >> 2] = jsvGetDataPointer(HEAP32[$2 + 8 >> 2], $2 + 4 | 0);
 if (!(HEAP32[$2 >> 2] | !HEAP32[$2 + 8 >> 2])) {
  HEAP32[$2 + 4 >> 2] = jsvIterateCallbackCount(HEAP32[$2 + 8 >> 2]);
  label$2: {
   if (HEAP32[$2 + 4 >> 2] + 256 >>> 0 > jsuGetFreeStack() >>> 0) {
    jsExceptionHere(1, 107864, 0);
    break label$2;
   }
   $3 = $3 - (HEAP32[$2 + 4 >> 2] + 15 & -16) | 0;
   __stack_pointer = $3;
   HEAP32[$2 >> 2] = $3;
   jsvIterateCallbackToBytes(HEAP32[$2 + 8 >> 2], HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2]);
  }
 }
 lcdST7789_cmd(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 4 >> 2], HEAP32[$2 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function jshGetDeviceString($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 11 | 0] = $0;
 label$1: {
  label$2: {
   switch (HEAPU8[$1 + 11 | 0]) {
   case 0:
    HEAP32[$1 + 12 >> 2] = 102720;
    break label$1;

   case 17:
    HEAP32[$1 + 12 >> 2] = 110153;
    break label$1;

   case 18:
    HEAP32[$1 + 12 >> 2] = 110131;
    break label$1;

   case 19:
    HEAP32[$1 + 12 >> 2] = 102051;
    break label$1;

   case 21:
    HEAP32[$1 + 12 >> 2] = 110149;
    break label$1;

   case 20:
    HEAP32[$1 + 12 >> 2] = 103049;
    break label$1;

   case 22:
    HEAP32[$1 + 12 >> 2] = 111166;
    break label$1;

   case 25:
    HEAP32[$1 + 12 >> 2] = 111198;
    break label$1;

   case 26:
    HEAP32[$1 + 12 >> 2] = 111207;
    break label$1;

   default:
    break label$2;
   }
  }
  HEAP32[$1 + 12 >> 2] = 129588;
 }
 return HEAP32[$1 + 12 >> 2];
}

function jswrap_interface_getSerial() {
 var $0 = 0;
 $0 = __stack_pointer + -64 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 8 >> 2] = jshGetSerialNumber($0 + 16 | 0, 32);
 HEAP32[$0 + 4 >> 2] = jsvNewFromEmptyString_10();
 label$1: {
  if (!HEAP32[$0 + 4 >> 2]) {
   HEAP32[$0 + 60 >> 2] = 0;
   break label$1;
  }
  HEAP32[$0 + 12 >> 2] = 0;
  while (1) {
   if (HEAP32[$0 + 12 >> 2] < HEAP32[$0 + 8 >> 2]) {
    if (!(!HEAP32[$0 + 12 >> 2] | HEAP32[$0 + 12 >> 2] & 3)) {
     jsvAppendString(HEAP32[$0 + 4 >> 2], 112567);
    }
    itostr_4(HEAPU8[HEAP32[$0 + 12 >> 2] + ($0 + 16 | 0) | 0] | 256, $0 + 52 | 0, 16);
    jsvAppendString(HEAP32[$0 + 4 >> 2], $0 + 53 | 0);
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$0 + 60 >> 2] = HEAP32[$0 + 4 >> 2];
 }
 __stack_pointer = $0 - -64 | 0;
 return HEAP32[$0 + 60 >> 2];
}

function jswrap_graphics_drawRect($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 112 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 104 >> 2] = $0;
 HEAP32[$5 + 100 >> 2] = $1;
 HEAP32[$5 + 96 >> 2] = $2;
 HEAP32[$5 + 92 >> 2] = $3;
 HEAP32[$5 + 88 >> 2] = $4;
 _jswrap_graphics_getRect(HEAP32[$5 + 100 >> 2], $5 + 84 | 0, $5 + 96 | 0, $5 + 92 | 0, $5 + 88 | 0, $5 + 80 | 0);
 label$1: {
  if (!(graphicsGetFromVar($5 + 8 | 0, HEAP32[$5 + 104 >> 2]) & 1)) {
   HEAP32[$5 + 108 >> 2] = 0;
   break label$1;
  }
  graphicsDrawRect($5 + 8 | 0, HEAP32[$5 + 84 >> 2], HEAP32[$5 + 96 >> 2], HEAP32[$5 + 92 >> 2], HEAP32[$5 + 88 >> 2]);
  graphicsSetVar($5 + 8 | 0);
  HEAP32[$5 + 108 >> 2] = jsvLockAgain(HEAP32[$5 + 104 >> 2]);
 }
 __stack_pointer = $5 + 112 | 0;
 return HEAP32[$5 + 108 >> 2];
}

function jstPinTaskChecker($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1: {
  if (HEAPU8[HEAP32[$2 + 24 >> 2] + 24 | 0] != 2) {
   HEAP8[$2 + 31 | 0] = 0;
   break label$1;
  }
  HEAP8[$2 + 19 | 0] = HEAPU8[HEAP32[$2 + 20 >> 2]];
  HEAP32[$2 + 12 >> 2] = 0;
  while (1) {
   if (HEAP32[$2 + 12 >> 2] < 4) {
    if (HEAPU8[HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 24 >> 2] + 8 | 0) | 0] == HEAPU8[$2 + 19 | 0]) {
     HEAP8[$2 + 31 | 0] = 1;
     break label$1;
    }
    if (HEAPU8[HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 24 >> 2] + 8 | 0) | 0] == 255) {
     HEAP8[$2 + 31 | 0] = 0;
     break label$1;
    } else {
     HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
     continue;
    }
   }
   break;
  }
  HEAP8[$2 + 31 | 0] = 0;
 }
 return HEAP8[$2 + 31 | 0] & 1;
}

function jsvAppendStringVar($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 112 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 108 >> 2] = $0;
 HEAP32[$4 + 104 >> 2] = $1;
 HEAP32[$4 + 100 >> 2] = $2;
 HEAP32[$4 + 96 >> 2] = $3;
 jsvStringIteratorNew($4 + 56 | 0, HEAP32[$4 + 108 >> 2], 0);
 jsvStringIteratorGotoEnd($4 + 56 | 0);
 jsvStringIteratorNew($4 + 16 | 0, HEAP32[$4 + 104 >> 2], HEAP32[$4 + 100 >> 2]);
 while (1) {
  $0 = 0;
  if (jsvStringIteratorHasChar_1($4 + 16 | 0) & 1) {
   $0 = HEAP32[$4 + 96 >> 2];
   HEAP32[$4 + 96 >> 2] = $0 - 1;
   $0 = ($0 | 0) != 0;
  }
  if ($0) {
   HEAP8[$4 + 15 | 0] = jsvStringIteratorGetCharAndNext($4 + 16 | 0);
   jsvStringIteratorAppend($4 + 56 | 0, HEAP8[$4 + 15 | 0]);
   continue;
  }
  break;
 }
 jsvStringIteratorFree_1($4 + 16 | 0);
 jsvStringIteratorFree_1($4 + 56 | 0);
 __stack_pointer = $4 + 112 | 0;
}

function jswrap_io_poke($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 80 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 76 >> 2] = $0;
 HEAP32[$3 + 72 >> 2] = $1;
 HEAP32[$3 + 68 >> 2] = $2;
 label$1: {
  if (jsvIsNumeric(HEAP32[$3 + 72 >> 2]) & 1) {
   _jswrap_io_poke(HEAP32[$3 + 76 >> 2], jsvGetInteger(HEAP32[$3 + 72 >> 2]), HEAP32[$3 + 68 >> 2]);
   break label$1;
  }
  if (jsvIsIterable(HEAP32[$3 + 72 >> 2]) & 1) {
   jsvIteratorNew($3 + 8 | 0, HEAP32[$3 + 72 >> 2], 1);
   while (1) {
    if (jsvIteratorHasElement($3 + 8 | 0) & 1) {
     _jswrap_io_poke(HEAP32[$3 + 76 >> 2], jsvIteratorGetIntegerValue($3 + 8 | 0), HEAP32[$3 + 68 >> 2]);
     HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 68 >> 2] + HEAP32[$3 + 76 >> 2];
     jsvIteratorNext($3 + 8 | 0);
     continue;
    }
    break;
   }
   jsvIteratorFree($3 + 8 | 0);
  }
 }
 __stack_pointer = $3 + 80 | 0;
}

function jsvIteratorHasElement($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  label$2: {
   switch (HEAP32[HEAP32[$1 + 8 >> 2] >> 2] - 1 | 0) {
   case 3:
    HEAP8[$1 + 15 | 0] = HEAP32[HEAP32[$1 + 8 >> 2] + 12 >> 2] < (jsvGetArrayLength(HEAP32[HEAP32[$1 + 8 >> 2] + 8 >> 2]) | 0);
    break label$1;

   case 1:
    HEAP8[$1 + 15 | 0] = jsvObjectIteratorHasValue_1(HEAP32[$1 + 8 >> 2] + 4 | 0) & 1;
    break label$1;

   case 0:
    HEAP8[$1 + 15 | 0] = jsvStringIteratorHasChar_2(HEAP32[$1 + 8 >> 2] + 4 | 0) & 1;
    break label$1;

   case 2:
    HEAP8[$1 + 15 | 0] = jsvArrayBufferIteratorHasElement(HEAP32[$1 + 8 >> 2] + 4 | 0) & 1;
    break label$1;

   default:
    break label$2;
   }
  }
  HEAP8[$1 + 15 | 0] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP8[$1 + 15 | 0] & 1;
}

function jshSetFlowControlEnabled($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP8[$3 + 15 | 0] = $0;
 HEAP8[$3 + 14 | 0] = $1;
 HEAP8[$3 + 13 | 0] = $2;
 if (!(HEAPU8[$3 + 15 | 0] < 21 | HEAPU8[$3 + 15 | 0] > 22)) {
  HEAP32[$3 + 8 >> 2] = HEAPU8[$3 + 15 | 0] - 21;
  HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 8 >> 2] + 187126;
  label$2: {
   if (HEAP8[$3 + 14 | 0] & 1) {
    $0 = HEAP32[$3 + 4 >> 2];
    HEAP8[$0 | 0] = HEAPU8[$0 | 0] | 8;
    break label$2;
   }
   $0 = HEAP32[$3 + 4 >> 2];
   HEAP8[$0 | 0] = HEAPU8[$0 | 0] & -9;
  }
  HEAP8[HEAP32[$3 + 8 >> 2] + 187128 | 0] = 255;
  if (jshIsPinValid(HEAPU8[$3 + 13 | 0]) & 1) {
   jshPinSetState(HEAPU8[$3 + 13 | 0], 1);
   jshPinSetValue(HEAPU8[$3 + 13 | 0], 0);
   HEAP8[HEAP32[$3 + 8 >> 2] + 187128 | 0] = HEAPU8[$3 + 13 | 0];
  }
 }
 __stack_pointer = $3 + 16 | 0;
}

function tflite__NumElements_28TfLiteIntArray_20const__29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = __stack_pointer - 32 | 0;
 HEAP32[$1 + 28 >> 2] = $0;
 HEAP32[$1 + 16 >> 2] = 1;
 HEAP32[$1 + 20 >> 2] = 0;
 HEAP32[$1 + 12 >> 2] = 0;
 while (1) {
  if (HEAP32[$1 + 12 >> 2] < HEAP32[HEAP32[$1 + 28 >> 2] >> 2]) {
   $2 = HEAP32[(HEAP32[$1 + 28 >> 2] + 4 | 0) + (HEAP32[$1 + 12 >> 2] << 2) >> 2];
   $0 = $2 >> 31;
   $3 = $2;
   $2 = HEAP32[$1 + 20 >> 2];
   $4 = $2;
   $2 = $0;
   $0 = HEAP32[$1 + 16 >> 2];
   $5 = $0;
   $0 = $4;
   $0 = __wasm_i64_mul($3, $2, $5, $0);
   HEAP32[$1 + 16 >> 2] = $0;
   $2 = i64toi32_i32$HIGH_BITS;
   HEAP32[$1 + 20 >> 2] = $2;
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 $0 = HEAP32[$1 + 20 >> 2];
 i64toi32_i32$HIGH_BITS = $0;
 $2 = HEAP32[$1 + 16 >> 2];
 return $2;
}

function jsvFreePtrStringExt($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP16[$1 + 10 >> 1] = jsvGetLastChild(HEAP32[$1 + 12 >> 2]);
 if (HEAPU16[$1 + 10 >> 1]) {
  HEAP32[$1 + 4 >> 2] = jsvGetAddressOf(HEAPU16[$1 + 10 >> 1]);
  while (1) {
   $0 = HEAP32[$1 + 4 >> 2];
   HEAP8[$0 + 11 | 0] = 0;
   HEAP8[$0 + 12 | 0] = 0;
   HEAP16[$1 + 10 >> 1] = jsvGetLastChild(HEAP32[$1 + 4 >> 2]);
   if (HEAPU16[$1 + 10 >> 1]) {
    jsvSetNextSibling(HEAP32[$1 + 4 >> 2], HEAPU16[$1 + 10 >> 1]);
    HEAP32[$1 + 4 >> 2] = jsvGetAddressOf(HEAPU16[$1 + 10 >> 1]);
    continue;
   }
   break;
  }
  jshInterruptOff();
  jsvSetNextSibling(HEAP32[$1 + 4 >> 2], HEAPU16[77234]);
  HEAP16[77234] = jsvGetLastChild(HEAP32[$1 + 12 >> 2]);
  HEAP8[154465] = 1;
  jshInterruptOn();
 }
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_waveform_getBuffer($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2] ? 110882 : 101361);
 label$1: {
  if (!HEAP32[$3 + 12 >> 2]) {
   HEAP32[$3 + 28 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$3 + 16 >> 2]) {
   HEAP8[HEAP32[$3 + 16 >> 2]] = 0;
   if (!(!(jsvIsArrayBuffer(HEAP32[$3 + 12 >> 2]) & 1) | (HEAPU8[HEAP32[$3 + 12 >> 2] + 5 | 0] & 15) != 2)) {
    HEAP8[HEAP32[$3 + 16 >> 2]] = 1;
   }
  }
  HEAP32[$3 + 8 >> 2] = jsvGetArrayBufferBackingString(HEAP32[$3 + 12 >> 2], 0);
  jsvUnLock(HEAP32[$3 + 12 >> 2]);
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 8 >> 2];
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function jswrap_espruino_CRC32($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 80 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 76 >> 2] = $0;
 jsvIteratorNew($1 + 16 | 0, HEAP32[$1 + 76 >> 2], 1);
 HEAP32[$1 + 12 >> 2] = -1;
 while (1) {
  if (jsvIteratorHasElement($1 + 16 | 0) & 1) {
   HEAP32[$1 + 12 >> 2] = jsvIteratorGetIntegerValue($1 + 16 | 0) & 255 ^ HEAP32[$1 + 12 >> 2];
   HEAP32[$1 + 8 >> 2] = 0;
   while (1) {
    if (HEAP32[$1 + 8 >> 2] < 8) {
     HEAP32[$1 + 12 >> 2] = 0 - (HEAP32[$1 + 12 >> 2] & 1) & -306674912 ^ HEAP32[$1 + 12 >> 2] >>> 1;
     HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
     continue;
    }
    break;
   }
   jsvIteratorNext($1 + 16 | 0);
   continue;
  }
  break;
 }
 jsvIteratorFree($1 + 16 | 0);
 $0 = jsvNewFromLongInteger(HEAP32[$1 + 12 >> 2] ^ -1, 0);
 __stack_pointer = $1 + 80 | 0;
 return $0 | 0;
}

function jsvObjectGetIntegerChild($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1: {
  if (!HEAP32[$2 + 24 >> 2]) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 16 >> 2] = jsvFindChildFromString(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2]);
  label$3: {
   if (!(jsvIsNameInt(HEAP32[$2 + 16 >> 2]) & 1)) {
    if (!(jsvIsNameIntBool(HEAP32[$2 + 16 >> 2]) & 1)) {
     break label$3;
    }
   }
   HEAP32[$2 + 12 >> 2] = jsvGetFirstChildSigned(HEAP32[$2 + 16 >> 2]) << 16 >> 16;
   jsvUnLock(HEAP32[$2 + 16 >> 2]);
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
   break label$1;
  }
  HEAP32[$2 + 28 >> 2] = jsvGetIntegerAndUnLock(jsvSkipNameAndUnLock(HEAP32[$2 + 16 >> 2]));
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jspePostfixExpression() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 label$1: {
  if (!(HEAP16[HEAP32[38615] + 2 >> 1] != 152 & HEAP16[HEAP32[38615] + 2 >> 1] != 153)) {
   HEAP32[$0 + 8 >> 2] = HEAP16[HEAP32[38615] + 2 >> 1];
   jslGetNextToken();
   HEAP32[$0 + 12 >> 2] = jspePostfixExpression();
   if ((HEAP32[46755] & 63) == 1) {
    HEAP32[$0 + 4 >> 2] = jsvNewFromInteger(1);
    HEAP32[$0 >> 2] = jsvMathsOpSkipNames(HEAP32[$0 + 12 >> 2], HEAP32[$0 + 4 >> 2], HEAP32[$0 + 8 >> 2] == 152 ? 43 : 45);
    jsvUnLock(HEAP32[$0 + 4 >> 2]);
    jsvReplaceWith(HEAP32[$0 + 12 >> 2], HEAP32[$0 >> 2]);
    jsvUnLock(HEAP32[$0 >> 2]);
   }
   break label$1;
  }
  HEAP32[$0 + 12 >> 2] = jspeFactorFunctionCall();
 }
 $1 = __jspePostfixExpression(HEAP32[$0 + 12 >> 2]);
 __stack_pointer = $0 + 16 | 0;
 return $1;
}

function jsserialEventCallbackKill($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP32[$2 + 20 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 28 >> 2], 103316);
 if (HEAP32[$2 + 20 >> 2]) {
  HEAP8[$2 + 19 | 0] = jsvGetIntegerAndUnLock(HEAP32[$2 + 20 >> 2]);
  jshPinWatch(HEAPU8[$2 + 19 | 0], 0, 0);
  HEAP32[$2 + 12 >> 2] = jsserialGetSerialList(0);
  if (HEAP32[$2 + 12 >> 2]) {
   HEAP32[$2 + 8 >> 2] = jsvGetArrayIndex(HEAP32[$2 + 12 >> 2], HEAPU8[$2 + 19 | 0]);
   if (HEAP32[$2 + 8 >> 2]) {
    jsvRemoveChild(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
   }
   if (!jsvGetChildren(HEAP32[$2 + 12 >> 2])) {
    jsvObjectRemoveChild(HEAP32[46748], 103058);
   }
   jsvUnLock2(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2]);
  }
 }
 __stack_pointer = $2 + 32 | 0;
}

function graphicsGetFromVar($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 $0 = HEAP32[$2 + 8 >> 2];
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP8[$0 | 0] = $1;
 HEAP8[$0 + 1 | 0] = $1 >>> 8;
 HEAP8[$0 + 2 | 0] = $1 >>> 16;
 HEAP8[$0 + 3 | 0] = $1 >>> 24;
 HEAP32[$2 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 4 >> 2], 96684);
 label$1: {
  if (!HEAP32[$2 >> 2]) {
   __memcpy(HEAP32[$2 + 8 >> 2], 189428, 72);
   HEAP8[$2 + 15 | 0] = 1;
   break label$1;
  }
  if (HEAP32[$2 >> 2]) {
   jsvGetStringChars(HEAP32[$2 >> 2], 0, HEAP32[$2 + 8 >> 2] + 4 | 0, 44);
   jsvUnLock(HEAP32[$2 >> 2]);
   HEAP8[$2 + 15 | 0] = graphicsSetCallbacks(HEAP32[$2 + 8 >> 2]) & 1;
   break label$1;
  }
  HEAP8[$2 + 15 | 0] = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP8[$2 + 15 | 0] & 1;
}

function tflite__ComputeOutSize_28TfLitePadding_2c_20int_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 HEAP32[$5 + 24 >> 2] = $0;
 HEAP32[$5 + 20 >> 2] = $1;
 HEAP32[$5 + 16 >> 2] = $2;
 HEAP32[$5 + 12 >> 2] = $3;
 HEAP32[$5 + 8 >> 2] = $4;
 HEAP32[$5 + 4 >> 2] = Math_imul(HEAP32[$5 + 8 >> 2], HEAP32[$5 + 16 >> 2] - 1 | 0) + 1;
 label$1: {
  label$2: {
   switch (HEAP32[$5 + 24 >> 2] - 1 | 0) {
   case 0:
    HEAP32[$5 + 28 >> 2] = ((HEAP32[$5 + 20 >> 2] + HEAP32[$5 + 12 >> 2] | 0) - 1 | 0) / HEAP32[$5 + 12 >> 2];
    break label$1;

   case 1:
    HEAP32[$5 + 28 >> 2] = ((HEAP32[$5 + 20 >> 2] + HEAP32[$5 + 12 >> 2] | 0) - HEAP32[$5 + 4 >> 2] | 0) / HEAP32[$5 + 12 >> 2];
    break label$1;

   default:
    break label$2;
   }
  }
  HEAP32[$5 + 28 >> 2] = 0;
 }
 return HEAP32[$5 + 28 >> 2];
}

function tflite__GetOptionalInputTensor_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 $4 = HEAP32[$3 + 16 >> 2] < HEAP32[HEAP32[HEAP32[$3 + 20 >> 2] >> 2] >> 2] ? HEAP32[(HEAP32[HEAP32[$3 + 20 >> 2] >> 2] + 4 | 0) + (HEAP32[$3 + 16 >> 2] << 2) >> 2] != -1 : $4;
 HEAP8[$3 + 15 | 0] = $4;
 label$2: {
  if (HEAP8[$3 + 15 | 0] & 1) {
   HEAP32[$3 + 28 >> 2] = tflite___28anonymous_20namespace_29__GetMutableInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], HEAP32[$3 + 16 >> 2]);
   break label$2;
  }
  HEAP32[$3 + 28 >> 2] = 0;
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 label$1: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$5 + 28 >> 2]) | 0) != 4) {
   break label$1;
  }
 }
 HEAP32[$5 + 8 >> 2] = tflite__RuntimeShape__DimsDataUpTo5D_28_29_20const(HEAP32[$5 + 28 >> 2]);
 __stack_pointer = $5 + 32 | 0;
 return HEAP32[$5 + 12 >> 2] + Math_imul(HEAP32[HEAP32[$5 + 8 >> 2] + 12 >> 2], HEAP32[$5 + 16 >> 2] + Math_imul(HEAP32[HEAP32[$5 + 8 >> 2] + 8 >> 2], HEAP32[$5 + 20 >> 2] + Math_imul(HEAP32[$5 + 24 >> 2], HEAP32[HEAP32[$5 + 8 >> 2] + 4 >> 2]) | 0) | 0) | 0;
}

function jswrap_print($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsiConsoleRemoveInputLine();
 jsvObjectIteratorNew($1 + 8 | 0, HEAP32[$1 + 12 >> 2]);
 while (1) {
  if (jsvObjectIteratorHasValue_7($1 + 8 | 0) & 1) {
   HEAP32[$1 + 4 >> 2] = jsvObjectIteratorGetValue_7($1 + 8 | 0);
   label$3: {
    if (jsvIsString(HEAP32[$1 + 4 >> 2]) & 1) {
     jsiConsolePrintStringVar(HEAP32[$1 + 4 >> 2]);
     break label$3;
    }
    jsfPrintJSON(HEAP32[$1 + 4 >> 2], 261);
   }
   jsvUnLock(HEAP32[$1 + 4 >> 2]);
   jsvObjectIteratorNext($1 + 8 | 0);
   if (jsvObjectIteratorHasValue_7($1 + 8 | 0) & 1) {
    jsiConsolePrintString(127850);
   }
   continue;
  }
  break;
 }
 jsvObjectIteratorFree_7($1 + 8 | 0);
 jsiConsolePrintString(129587);
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_io_analogWrite($0, $1, $2) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP8[$3 + 47 | 0] = $0;
 HEAPF64[$3 + 32 >> 3] = $1;
 HEAP32[$3 + 28 >> 2] = $2;
 HEAPF64[$3 + 16 >> 3] = 0;
 HEAP32[$3 + 12 >> 2] = 0;
 if (jsvIsObject(HEAP32[$3 + 28 >> 2]) & 1) {
  HEAPF64[$3 + 16 >> 3] = jsvObjectGetFloatChild(HEAP32[$3 + 28 >> 2], 101604);
  label$2: {
   if (jsvObjectGetBoolChild(HEAP32[$3 + 28 >> 2], 97942) & 1) {
    HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] | 2;
    break label$2;
   }
   if (jsvObjectGetBoolChild(HEAP32[$3 + 28 >> 2], 97937) & 1) {
    HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] | 1;
   }
  }
 }
 jshPinAnalogOutput(HEAPU8[$3 + 47 | 0], HEAPF64[$3 + 32 >> 3], HEAPF64[$3 + 16 >> 3], HEAP32[$3 + 12 >> 2]);
 __stack_pointer = $3 + 48 | 0;
}

function jswrap_object_setPrototypeOf($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 label$1: {
  label$2: {
   if (!(jsvIsFunction(HEAP32[$2 + 12 >> 2]) & 1)) {
    if (!(jsvIsObject(HEAP32[$2 + 12 >> 2]) & 1)) {
     break label$2;
    }
   }
   $0 = jsvFindOrAddChildFromString(HEAP32[$2 + 12 >> 2], 107914);
   break label$1;
  }
  $0 = 0;
 }
 HEAP32[$2 + 4 >> 2] = $0;
 label$4: {
  if (!(jsvIsName(HEAP32[$2 + 4 >> 2]) & 1)) {
   HEAP32[$2 >> 2] = HEAP32[$2 + 4 >> 2];
   jsExceptionHere(3, 99472, $2);
   break label$4;
  }
  jsvSetValueOfName(HEAP32[$2 + 4 >> 2], HEAP32[$2 + 8 >> 2]);
 }
 jsvUnLock(HEAP32[$2 + 4 >> 2]);
 $0 = jsvLockAgainSafe(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function tflite__MicroMutableOpResolver_9u___FindOp_28tflite__BuiltinOperator_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 $0 = HEAP32[$2 + 24 >> 2];
 label$1: {
  if (HEAP32[$2 + 20 >> 2] == 32) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 16 >> 2] = 0;
  while (1) {
   if (HEAPU32[$2 + 16 >> 2] < HEAPU32[$0 + 292 >> 2]) {
    HEAP32[$2 + 12 >> 2] = ($0 + 4 | 0) + (HEAP32[$2 + 16 >> 2] << 5);
    if (HEAP32[HEAP32[$2 + 12 >> 2] + 20 >> 2] == HEAP32[$2 + 20 >> 2]) {
     HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
     break label$1;
    } else {
     HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 16 >> 2] + 1;
     continue;
    }
   }
   break;
  }
  HEAP32[$2 + 28 >> 2] = 0;
 }
 return HEAP32[$2 + 28 >> 2];
}

function tflite__GreedyMemoryPlanner__AddBuffer_28tflite__ErrorReporter__2c_20int_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 32 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 24 >> 2] = $0;
 HEAP32[$6 + 20 >> 2] = $1;
 HEAP32[$6 + 16 >> 2] = $2;
 HEAP32[$6 + 12 >> 2] = $3;
 HEAP32[$6 + 8 >> 2] = $4;
 HEAP32[$6 + 4 >> 2] = $5;
 $0 = HEAP32[$6 + 24 >> 2];
 HEAP32[$6 >> 2] = HEAP32[$0 + 12 >> 2] + (HEAP32[$0 + 8 >> 2] << 4);
 label$1: {
  if (FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$6 + 20 >> 2], HEAP32[$6 + 16 >> 2], HEAP32[$6 + 12 >> 2], HEAP32[$6 + 8 >> 2]) | 0) {
   HEAP32[$6 + 28 >> 2] = 1;
   break label$1;
  }
  HEAP32[HEAP32[$6 >> 2] + 4 >> 2] = HEAP32[$6 + 4 >> 2];
  HEAP32[$6 + 28 >> 2] = 0;
 }
 __stack_pointer = $6 + 32 | 0;
 return HEAP32[$6 + 28 >> 2];
}

function jsvArrayBufferIteratorGetValueData($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 label$1: {
  if (!HEAPU8[HEAP32[$2 + 12 >> 2] + 36 | 0]) {
   break label$1;
  }
  HEAP32[$2 >> 2] = HEAPU8[HEAP32[$2 + 12 >> 2] + 36 | 0] & 15;
  HEAP32[$2 + 4 >> 2] = 0;
  while (1) {
   if (HEAP32[$2 + 4 >> 2] < HEAP32[$2 >> 2]) {
    $0 = jsvStringIteratorGetChar_2(HEAP32[$2 + 12 >> 2]);
    HEAP8[HEAP32[$2 + 8 >> 2] + HEAP32[$2 + 4 >> 2] | 0] = $0;
    if (HEAP32[$2 >> 2] != 1) {
     jsvStringIteratorNext(HEAP32[$2 + 12 >> 2]);
    }
    HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
    continue;
   }
   break;
  }
  if (HEAP32[$2 >> 2] == 1) {
   break label$1;
  }
  HEAP8[HEAP32[$2 + 12 >> 2] + 52 | 0] = 1;
 }
 __stack_pointer = $2 + 16 | 0;
}

function jswrap_date_toUTCString($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $1 = __stack_pointer - 96 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 92 >> 2] = $0;
 getTimeFromDateVar($1 - -64 | 0, HEAP32[$1 + 92 >> 2], 1);
 getCalendarDate($1 + 40 | 0, HEAP32[$1 + 64 >> 2]);
 $0 = HEAP32[38467];
 $2 = HEAP32[$1 + 56 >> 2] << 2;
 $3 = HEAP32[$1 + 44 >> 2];
 $4 = HEAP32[38466];
 $5 = HEAP32[$1 + 48 >> 2] << 2;
 $6 = HEAP32[$1 + 52 >> 2];
 $7 = HEAP32[$1 + 80 >> 2];
 $8 = HEAP32[$1 + 76 >> 2];
 HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 72 >> 2];
 HEAP32[$1 + 20 >> 2] = $8;
 HEAP32[$1 + 16 >> 2] = $7;
 HEAP32[$1 + 12 >> 2] = $6;
 HEAP32[$1 + 8 >> 2] = $4 + $5;
 HEAP32[$1 + 4 >> 2] = $3;
 HEAP32[$1 >> 2] = $0 + $2;
 $0 = jsvVarPrintf(108692, $1);
 __stack_pointer = $1 + 96 | 0;
 return $0 | 0;
}

function tflite__FlatSizeSkipDim_28tflite__RuntimeShape_20const__2c_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP32[$2 + 20 >> 2] = tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$2 + 28 >> 2]);
 HEAP32[$2 + 16 >> 2] = tflite__RuntimeShape__DimsData_28_29_20const(HEAP32[$2 + 28 >> 2]);
 HEAP32[$2 + 12 >> 2] = 1;
 HEAP32[$2 + 8 >> 2] = 0;
 while (1) {
  if (HEAP32[$2 + 8 >> 2] < HEAP32[$2 + 20 >> 2]) {
   HEAP32[$2 + 12 >> 2] = Math_imul(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2] == HEAP32[$2 + 24 >> 2] ? 1 : HEAP32[HEAP32[$2 + 16 >> 2] + (HEAP32[$2 + 8 >> 2] << 2) >> 2]);
   HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function push_outgoing_bits($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP8[$2 + 7 | 0] = 0;
 HEAP8[$2 + 6 | 0] = 0;
 label$1: {
  if (HEAPU8[HEAP32[$2 + 12 >> 2] + 10 | 0] > 8) {
   HEAP8[$2 + 7 | 0] = 8;
   HEAP8[$2 + 6 | 0] = HEAPU16[HEAP32[$2 + 12 >> 2] + 8 >> 1] >> HEAPU8[HEAP32[$2 + 12 >> 2] + 10 | 0] - 8;
   break label$1;
  }
  HEAP8[$2 + 7 | 0] = HEAPU8[HEAP32[$2 + 12 >> 2] + 10 | 0];
  HEAP8[$2 + 6 | 0] = HEAPU16[HEAP32[$2 + 12 >> 2] + 8 >> 1];
 }
 if (HEAPU8[$2 + 7 | 0]) {
  push_bits(HEAP32[$2 + 12 >> 2], HEAPU8[$2 + 7 | 0], HEAPU8[$2 + 6 | 0], HEAP32[$2 + 8 >> 2]);
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP8[$0 + 10 | 0] = HEAPU8[$0 + 10 | 0] - HEAPU8[$2 + 7 | 0];
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAPU8[$2 + 7 | 0];
}

function jsvGetMemoryUsage() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 1;
 while (1) {
  if (HEAPU32[$0 + 8 >> 2] <= 2500) {
   HEAP32[$0 + 4 >> 2] = jsvGetAddressOf(HEAP32[$0 + 8 >> 2] & 65535);
   $1 = HEAP32[$0 + 4 >> 2];
   if ((HEAPU8[$1 + 11 | 0] | HEAPU8[$1 + 12 | 0] << 8) & 63) {
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
    if (jsvIsFlatString(HEAP32[$0 + 4 >> 2]) & 1) {
     HEAP32[$0 >> 2] = jsvGetFlatStringBlocks(HEAP32[$0 + 4 >> 2]);
     HEAP32[$0 + 8 >> 2] = HEAP32[$0 >> 2] + HEAP32[$0 + 8 >> 2];
     HEAP32[$0 + 12 >> 2] = HEAP32[$0 >> 2] + HEAP32[$0 + 12 >> 2];
    }
   }
   HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function jslNewTokenisedStringFromLexer($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 192 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 188 >> 2] = $0;
 HEAP32[$2 + 184 >> 2] = $1;
 HEAP32[$2 + 180 >> 2] = HEAP32[38615];
 HEAP32[38615] = $2 + 56;
 jslInit(HEAP32[HEAP32[$2 + 180 >> 2] + 84 >> 2]);
 HEAP32[$2 + 52 >> 2] = _jslNewTokenisedStringFromLexer(0, 0, HEAP32[$2 + 188 >> 2], HEAP32[$2 + 184 >> 2]);
 HEAP32[$2 + 48 >> 2] = jsvNewStringOfLength(HEAP32[$2 + 52 >> 2], 0);
 if (HEAP32[$2 + 48 >> 2]) {
  jsvStringIteratorNew($2 + 8 | 0, HEAP32[$2 + 48 >> 2], 0);
  _jslNewTokenisedStringFromLexer($2 + 8 | 0, HEAP32[$2 + 48 >> 2], HEAP32[$2 + 188 >> 2], HEAP32[$2 + 184 >> 2]);
  jsvStringIteratorFree($2 + 8 | 0);
 }
 jslKill();
 HEAP32[38615] = HEAP32[$2 + 180 >> 2];
 __stack_pointer = $2 + 192 | 0;
 return HEAP32[$2 + 48 >> 2];
}

function _ZN17compiler_builtins3int4sdiv3Div3div17he78fc483e41d7ec7E($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $4 = $1 >> 31;
 $8 = $4;
 $5 = $1;
 $5 = $4 ^ $5;
 $7 = $1 >> 31;
 $4 = $0 ^ $7;
 $9 = $4 - $7 | 0;
 $0 = $8;
 $6 = $0 + ($4 >>> 0 < $7 >>> 0) | 0;
 $6 = $5 - $6 | 0;
 $10 = $6;
 $6 = $3;
 $4 = $6 >> 31;
 $8 = $4;
 $5 = $6;
 $5 = $4 ^ $5;
 $7 = $6 >> 31;
 $6 = $7;
 $4 = $6 ^ $2;
 $0 = $4 - $6 | 0;
 $6 = $8;
 $4 = $5 - ($6 + ($4 >>> 0 < $7 >>> 0) | 0) | 0;
 $4 = __wasm_i64_udiv($9, $10, $0, $4);
 $6 = $4;
 $4 = $1;
 $4 = $3 ^ $4;
 $0 = $4 >> 31;
 $5 = $4 >> 31;
 $1 = $5;
 $5 = i64toi32_i32$HIGH_BITS;
 $2 = $1 ^ $5;
 $4 = $6;
 $5 = $0 ^ $4;
 $6 = $5 - $0 | 0;
 $4 = $1;
 $0 = $4 + ($0 >>> 0 > $5 >>> 0) | 0;
 $0 = $2 - $0 | 0;
 $5 = $6;
 i64toi32_i32$HIGH_BITS = $0;
 return $5;
}

function jsvGetNativeFunctionPtr($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = jsvFindChildFromString(HEAP32[$1 + 8 >> 2], 105817);
 label$1: {
  if (HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 4 >> 2] = jsvSkipNameAndUnLock(HEAP32[$1 + 4 >> 2]);
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP32[$1 >> 2] = (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) + jsvGetFlatStringPointer(HEAP32[$1 + 4 >> 2]);
   jsvUnLock(HEAP32[$1 + 4 >> 2]);
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP32[$1 + 12 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function fromCalendarDate($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 while (1) {
  if (HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] < 0) {
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] - 1;
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 12;
   continue;
  }
  break;
 }
 while (1) {
  if (HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] > 11) {
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] - 12;
   continue;
  }
  break;
 }
 $0 = getDayNumberFromDate(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2], HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2], HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function _jswrap_drawImageLayerSetStart($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 HEAP32[$3 + 16 >> 2] = (HEAP32[$3 + 24 >> 2] << 8) - HEAP32[HEAP32[$3 + 28 >> 2] >> 2];
 HEAP32[$3 + 12 >> 2] = (HEAP32[$3 + 20 >> 2] << 8) - HEAP32[HEAP32[$3 + 28 >> 2] + 4 >> 2];
 $0 = HEAP32[$3 + 28 >> 2];
 HEAP32[$0 + 172 >> 2] = HEAP32[$0 + 172 >> 2] + (Math_imul(HEAP32[HEAP32[$3 + 28 >> 2] + 164 >> 2], HEAP32[$3 + 16 >> 2]) + Math_imul(HEAP32[HEAP32[$3 + 28 >> 2] + 168 >> 2], HEAP32[$3 + 12 >> 2]) >> 8);
 $0 = HEAP32[$3 + 28 >> 2];
 HEAP32[$0 + 176 >> 2] = HEAP32[$0 + 176 >> 2] + (Math_imul(HEAP32[HEAP32[$3 + 28 >> 2] + 164 >> 2], HEAP32[$3 + 12 >> 2]) - Math_imul(HEAP32[HEAP32[$3 + 28 >> 2] + 168 >> 2], HEAP32[$3 + 16 >> 2]) >> 8);
}

function jsfGetFileHeader($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP8[$3 + 19 | 0] = $2;
 label$1: {
  if (!HEAP32[$3 + 24 >> 2]) {
   HEAP8[$3 + 31 | 0] = 0;
   break label$1;
  }
  jshFlashRead(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 24 >> 2], HEAP8[$3 + 19 | 0] & 1 ? 32 : 8);
  HEAP32[$3 + 12 >> 2] = (HEAP32[$3 + 24 >> 2] + 32 | 0) + jsfGetFileSize(HEAP32[$3 + 20 >> 2]);
  $0 = 0;
  label$3: {
   if (HEAP32[HEAP32[$3 + 20 >> 2] >> 2] == -1) {
    break label$3;
   }
   $0 = 0;
   if (!HEAP32[HEAP32[$3 + 20 >> 2] >> 2]) {
    break label$3;
   }
   $0 = HEAPU32[$3 + 12 >> 2] <= jsfGetBankEndAddress(HEAP32[$3 + 24 >> 2]) >>> 0;
  }
  HEAP8[$3 + 31 | 0] = $0;
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP8[$3 + 31 | 0] & 1;
}

function jshFlashRead($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 label$1: {
  if (HEAPU32[$3 + 24 >> 2] < 134217728) {
   break label$1;
  }
  HEAP32[$3 + 16 >> 2] = 0;
  while (1) {
   if (HEAPU32[$3 + 16 >> 2] >= HEAPU32[$3 + 20 >> 2]) {
    break label$1;
   }
   HEAP32[$3 + 12 >> 2] = 154367;
   $0 = HEAP32[$3 + 12 >> 2];
   HEAP8[$3 + 10 | 0] = 105;
   HEAP8[$3 + 11 | 0] = 0;
   HEAP32[$3 >> 2] = (HEAP32[$3 + 24 >> 2] + HEAP32[$3 + 16 >> 2] | 0) + -134217728;
   $0 = emscripten_asm_const_int($0 | 0, $3 + 10 | 0, $3 | 0) | 0;
   HEAP8[HEAP32[$3 + 28 >> 2] + HEAP32[$3 + 16 >> 2] | 0] = $0;
   HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 16 >> 2] + 1;
   continue;
  }
 }
 __stack_pointer = $3 + 32 | 0;
}

function jsvIsInstanceOf($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP8[$2 + 19 | 0] = 0;
 label$1: {
  if (!(jsvHasChildren(HEAP32[$2 + 24 >> 2]) & 1)) {
   HEAP8[$2 + 31 | 0] = 0;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 24 >> 2], 107914);
  if (jsvIsObject(HEAP32[$2 + 12 >> 2]) & 1) {
   HEAP32[$2 + 8 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 12 >> 2], 100982);
   if (HEAP32[$2 + 8 >> 2]) {
    HEAP8[$2 + 19 | 0] = jspIsConstructor(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 20 >> 2]) & 1;
   }
   jsvUnLock(HEAP32[$2 + 8 >> 2]);
  }
  jsvUnLock(HEAP32[$2 + 12 >> 2]);
  HEAP8[$2 + 31 | 0] = HEAP8[$2 + 19 | 0] & 1;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP8[$2 + 31 | 0] & 1;
}

function jsiQueueEvents($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = jsvNewObject();
 if (HEAP32[$4 + 12 >> 2]) {
  jsvUnLock(jsvAddNamedChild(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 24 >> 2], 107748));
  if (HEAP32[$4 + 16 >> 2]) {
   HEAP32[$4 + 8 >> 2] = jsvNewArray(HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]);
   if (HEAP32[$4 + 8 >> 2]) {
    jsvAddNamedChildAndUnLock(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], 100307);
   }
  }
  if (HEAP32[$4 + 28 >> 2]) {
   jsvUnLock(jsvAddNamedChild(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 28 >> 2], 100297));
  }
  jsvArrayPushAndUnLock(HEAP32[46760], HEAP32[$4 + 12 >> 2]);
 }
 __stack_pointer = $4 + 32 | 0;
}

function jswrap_storage_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 80 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 76 >> 2] = $0;
 HEAP32[$3 + 72 >> 2] = $1;
 HEAP32[$3 + 68 >> 2] = $2;
 jsfNameFromVar($3 + 40 | 0, HEAP32[$3 + 76 >> 2]);
 $2 = HEAP32[$3 + 72 >> 2];
 $4 = HEAP32[$3 + 68 >> 2];
 HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 64 >> 2];
 $1 = HEAP32[$3 + 60 >> 2];
 $0 = HEAP32[$3 + 56 >> 2];
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 28 >> 2] = $1;
 $0 = HEAP32[$3 + 52 >> 2];
 $1 = HEAP32[$3 + 48 >> 2];
 HEAP32[$3 + 16 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $0;
 $1 = HEAP32[$3 + 44 >> 2];
 $0 = HEAP32[$3 + 40 >> 2];
 HEAP32[$3 + 8 >> 2] = $0;
 HEAP32[$3 + 12 >> 2] = $1;
 $0 = jsfReadFile($3 + 8 | 0, $2, $4);
 __stack_pointer = $3 + 80 | 0;
 return $0 | 0;
}

function jsvNewFromFloat($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAPF64[$1 + 16 >> 3] = $0;
 HEAP32[$1 + 12 >> 2] = jsvNewWithFlags(11);
 label$1: {
  if (!HEAP32[$1 + 12 >> 2]) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  $2 = HEAP32[$1 + 12 >> 2];
  wasm2js_scratch_store_f64(+HEAPF64[$1 + 16 >> 3]);
  $3 = wasm2js_scratch_load_i32(1) | 0;
  $4 = wasm2js_scratch_load_i32(0) | 0;
  HEAP8[$2 | 0] = $4;
  HEAP8[$2 + 1 | 0] = $4 >>> 8;
  HEAP8[$2 + 2 | 0] = $4 >>> 16;
  HEAP8[$2 + 3 | 0] = $4 >>> 24;
  HEAP8[$2 + 4 | 0] = $3;
  HEAP8[$2 + 5 | 0] = $3 >>> 8;
  HEAP8[$2 + 6 | 0] = $3 >>> 16;
  HEAP8[$2 + 7 | 0] = $3 >>> 24;
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 12 >> 2];
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function jswrap_atob_decode($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] & 255;
 label$1: {
  if (!(HEAP32[$1 + 8 >> 2] < 65 | HEAP32[$1 + 8 >> 2] > 90)) {
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2] - 65;
   break label$1;
  }
  if (!(HEAP32[$1 + 8 >> 2] < 97 | HEAP32[$1 + 8 >> 2] > 122)) {
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2] - 71;
   break label$1;
  }
  if (!(HEAP32[$1 + 8 >> 2] < 48 | HEAP32[$1 + 8 >> 2] > 57)) {
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2] + 4;
   break label$1;
  }
  if (HEAP32[$1 + 8 >> 2] == 43) {
   HEAP32[$1 + 12 >> 2] = 62;
   break label$1;
  }
  if (HEAP32[$1 + 8 >> 2] == 47) {
   HEAP32[$1 + 12 >> 2] = 63;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = -1;
 }
 return HEAP32[$1 + 12 >> 2];
}

function vfGetCharPtr($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 HEAP8[$2 + 27 | 0] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP8[$2 + 19 | 0] = HEAPU8[$2 + 27 | 0];
 label$1: {
  if (!(HEAPU8[$2 + 19 | 0] <= 255 & HEAPU8[$2 + 19 | 0] >= 33)) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP8[$2 + 19 | 0] = HEAPU8[$2 + 19 | 0] - 33;
  HEAP32[$2 + 12 >> 2] = 144480;
  HEAP8[$2 + 11 | 0] = 0;
  while (1) {
   if (HEAPU8[$2 + 11 | 0] < HEAPU8[$2 + 19 | 0]) {
    HEAP32[$2 + 12 >> 2] = HEAPU8[HEAPU8[$2 + 11 | 0] + 144832 | 0] + HEAP32[$2 + 12 >> 2];
    HEAP8[$2 + 11 | 0] = HEAPU8[$2 + 11 | 0] + 1;
    continue;
   }
   break;
  }
  HEAP32[HEAP32[$2 + 20 >> 2] >> 2] = HEAPU8[HEAPU8[$2 + 19 | 0] + 144832 | 0];
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 }
 return HEAP32[$2 + 28 >> 2];
}

function jspGetBuiltinPrototype($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (jsvIsArray(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 4 >> 2] = jspFindPrototypeFor(96668);
   if (HEAP32[$1 + 4 >> 2]) {
    HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
    break label$1;
   }
  }
  label$4: {
   if (!(jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1)) {
    if (!(jsvIsArray(HEAP32[$1 + 8 >> 2]) & 1)) {
     break label$4;
    }
   }
   HEAP32[$1 >> 2] = jspFindPrototypeFor(98070);
   if (HEAP32[$1 >> 2] == HEAP32[$1 + 8 >> 2]) {
    jsvUnLock(HEAP32[$1 >> 2]);
    HEAP32[$1 >> 2] = 0;
   }
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvHasStringExt($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63;
  label$3: {
   if (!(HEAP8[$1 + 7 | 0] <= 39 & HEAP8[$1 + 7 | 0] >= 18)) {
    $0 = 0;
    if (HEAP8[$1 + 7 | 0] < 40) {
     break label$3;
    }
    $0 = 0;
    if (HEAP8[$1 + 7 | 0] > 49) {
     break label$3;
    }
   }
   $0 = 1;
   label$6: {
    if (HEAP8[$1 + 7 | 0] == 37) {
     break label$6;
    }
    $0 = 1;
    if (HEAP8[$1 + 7 | 0] == 38) {
     break label$6;
    }
    $0 = HEAP8[$1 + 7 | 0] == 39;
   }
   $0 = $0 ^ -1;
  }
  HEAP8[$1 + 15 | 0] = $0 & 1;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function tflite__MicroAllocator__GetSubGraphFromModel_28tflite__Model_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 $0 = HEAP32[$2 + 8 >> 2];
 HEAP32[$2 >> 2] = tflite__Model__subgraphs_28_29_20const(HEAP32[$2 + 4 >> 2]);
 label$1: {
  if ((flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph____size_28_29_20const(HEAP32[$2 >> 2]) | 0) != 1) {
   tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$0 + 8 >> 2], 129146, 0);
   HEAP32[$2 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph____operator_5b_5d_28unsigned_20int_29_20const(HEAP32[$2 >> 2], 0);
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function terminalScroll() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 80 | 0;
 __stack_pointer = $0;
 HEAP8[153876] = HEAPU8[153876] - 1;
 if (terminalGetGFX($0 + 8 | 0) & 1) {
  HEAP32[$0 + 4 >> 2] = HEAPU8[$0 + 29 | 0] | HEAPU8[$0 + 30 | 0] << 8 | (HEAPU8[$0 + 31 | 0] << 16 | HEAPU8[$0 + 32 | 0] << 24);
  $1 = HEAPU8[189414] | HEAPU8[189415] << 8;
  HEAP8[$0 + 29 | 0] = $1;
  HEAP8[$0 + 30 | 0] = $1 >>> 8;
  HEAP8[$0 + 31 | 0] = $1 >>> 16;
  HEAP8[$0 + 32 | 0] = $1 >>> 24;
  graphicsScroll($0 + 8 | 0, 0, -8);
  $1 = HEAP32[$0 + 4 >> 2];
  HEAP8[$0 + 29 | 0] = $1;
  HEAP8[$0 + 30 | 0] = $1 >>> 8;
  HEAP8[$0 + 31 | 0] = $1 >>> 16;
  HEAP8[$0 + 32 | 0] = $1 >>> 24;
  terminalSetGFX($0 + 8 | 0);
  if (!(jshIsInInterrupt() & 1)) {
   jswrap_terminal_idle();
  }
 }
 __stack_pointer = $0 + 80 | 0;
}

function jswrap_string_fromCharCode($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 HEAP32[$1 + 20 >> 2] = jsvNewFromEmptyString_8();
 label$1: {
  if (!HEAP32[$1 + 20 >> 2]) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  jsvObjectIteratorNew($1 + 16 | 0, HEAP32[$1 + 24 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_10($1 + 16 | 0) & 1) {
    HEAP8[$1 + 15 | 0] = jsvGetIntegerAndUnLock(jsvObjectIteratorGetValue_10($1 + 16 | 0));
    jsvAppendStringBuf(HEAP32[$1 + 20 >> 2], $1 + 15 | 0, 1);
    jsvObjectIteratorNext($1 + 16 | 0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree_10($1 + 16 | 0);
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 20 >> 2];
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function tflite___28anonymous_20namespace_29__AllocationInfoBuilder__Allocate_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[$1 + 8 >> 2];
 HEAP32[$1 + 4 >> 2] = Math_imul(tflite___28anonymous_20namespace_29__AllocationInfoBuilder__Size_28_29_20const($0), 24);
 $2 = HEAP32[$0 + 4 >> 2];
 HEAP32[$0 + 16 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 12 >> 2]]($2, HEAP32[$1 + 4 >> 2], 4);
 label$1: {
  if (!HEAP32[$0 + 16 >> 2]) {
   $0 = HEAP32[$0 >> 2];
   HEAP32[$1 >> 2] = HEAP32[$1 + 4 >> 2];
   tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 106348, $1);
   HEAP32[$1 + 12 >> 2] = 1;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jswrap_array_join($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  if (!(jsvIsIterable(HEAP32[$2 + 8 >> 2]) & 1)) {
   HEAP32[$2 + 12 >> 2] = 0;
   break label$1;
  }
  label$3: {
   if (jsvIsUndefined(HEAP32[$2 + 4 >> 2]) & 1) {
    HEAP32[$2 + 4 >> 2] = jsvNewFromString(112648);
    break label$3;
   }
   HEAP32[$2 + 4 >> 2] = jsvAsString(HEAP32[$2 + 4 >> 2]);
  }
  if (!HEAP32[$2 + 4 >> 2]) {
   HEAP32[$2 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 >> 2] = jsvArrayJoin(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2], 1);
  jsvUnLock(HEAP32[$2 + 4 >> 2]);
  HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function OneWireRead($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 jshPinSetState(HEAPU8[$2 + 15 | 0], 3);
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 >> 2] = 1;
 while (1) {
  $0 = HEAP32[$2 + 8 >> 2];
  HEAP32[$2 + 8 >> 2] = $0 - 1;
  if (($0 | 0) > 0) {
   jshInterruptOff();
   jshPinSetValue(HEAPU8[$2 + 15 | 0], 0);
   jshDelayMicroseconds(3);
   jshPinSetValue(HEAPU8[$2 + 15 | 0], 1);
   jshDelayMicroseconds(10);
   if (jshPinGetValue(HEAPU8[$2 + 15 | 0]) & 1) {
    HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | HEAP32[$2 >> 2];
   }
   jshInterruptOn();
   jshDelayMicroseconds(53);
   HEAP32[$2 >> 2] = HEAP32[$2 >> 2] << 1;
   continue;
  }
  break;
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 4 >> 2];
}

function lcdST7789_setMode($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[85782] != HEAP32[$1 + 12 >> 2]) {
  HEAP32[85782] = HEAP32[$1 + 12 >> 2];
  label$2: {
   label$3: {
    switch (HEAP32[85782] - 1 | 0) {
    case 0:
    case 2:
    case 3:
     HEAP8[189504] = 0;
     lcdST7789_cmd(19, 0, 0);
     HEAP32[85780] = 0;
     lcdST7789_scrollCmd();
     break label$2;

    case 1:
     break label$3;

    default:
     break label$2;
    }
   }
   HEAP8[189504] = 1;
   HEAP8[$1 + 8 | 0] = 0;
   HEAP8[$1 + 9 | 0] = 40;
   HEAP8[$1 + 10 | 0] = 0;
   HEAP8[$1 + 11 | 0] = 199;
   lcdST7789_cmd(48, 4, $1 + 8 | 0);
   lcdST7789_cmd(18, 0, 0);
   HEAP32[85780] = 0;
   lcdST7789_scrollCmd();
  }
 }
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_banglejs_getAccel() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 12 >> 2] = jsvNewObject();
 if (HEAP32[$0 + 12 >> 2]) {
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 96763, jsvNewFromFloat(+HEAP16[171628] * .0001220703125));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 96676, jsvNewFromFloat(+HEAP16[171629] * .0001220703125));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 96406, jsvNewFromFloat(+HEAP16[171630] * .0001220703125));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 104010, jsvNewFromFloat(Math_sqrt(+HEAP32[85816]) * .0001220703125));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 104081, jsvNewFromFloat(+HEAPU32[85817] * .0001220703125));
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function jsvGetMaxCharactersInVar($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (jsvIsStringExt(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 9;
   break label$1;
  }
  if (jsvIsName(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 4;
   break label$1;
  }
  label$4: {
   label$5: {
    if (jsvIsFlatString(HEAP32[$1 + 8 >> 2]) & 1) {
     break label$5;
    }
    if (jsvIsFlashString(HEAP32[$1 + 8 >> 2]) & 1) {
     break label$5;
    }
    if (!(jsvIsNativeString(HEAP32[$1 + 8 >> 2]) & 1)) {
     break label$4;
    }
   }
   HEAP32[$1 + 12 >> 2] = jsvGetCharactersInVar(HEAP32[$1 + 8 >> 2]);
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 8;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__OperatorCode___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__OperatorCode___20const___28unsigned_20short_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP16[$2 + 8 >> 1] = flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, HEAPU16[$2 + 10 >> 1]);
 HEAP32[$2 + 4 >> 2] = HEAPU16[$2 + 8 >> 1] + $0;
 label$1: {
  if (HEAPU16[$2 + 8 >> 1]) {
   $0 = HEAP32[$2 + 4 >> 2] + unsigned_20int_20flatbuffers__ReadScalar_unsigned_20int__28void_20const__29(HEAP32[$2 + 4 >> 2]) | 0;
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function jsvGetStringIndexOf($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer + -64 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 56 >> 2] = $0;
 HEAP8[$2 + 55 | 0] = $1;
 jsvStringIteratorNew($2 + 16 | 0, HEAP32[$2 + 56 >> 2], 0);
 label$1: {
  while (1) {
   if (jsvStringIteratorHasChar_1($2 + 16 | 0) & 1) {
    if ((jsvStringIteratorGetChar_1($2 + 16 | 0) & 255) == HEAPU8[$2 + 55 | 0]) {
     HEAP32[$2 + 12 >> 2] = jsvStringIteratorGetIndex_1($2 + 16 | 0);
     jsvStringIteratorFree_1($2 + 16 | 0);
     HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 12 >> 2];
     break label$1;
    } else {
     jsvStringIteratorNext($2 + 16 | 0);
     continue;
    }
   }
   break;
  }
  jsvStringIteratorFree_1($2 + 16 | 0);
  HEAP32[$2 + 60 >> 2] = -1;
 }
 __stack_pointer = $2 - -64 | 0;
 return HEAP32[$2 + 60 >> 2];
}

function jsspiSend4bit($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP8[$4 + 15 | 0] = $0;
 HEAP8[$4 + 14 | 0] = $1;
 HEAP32[$4 + 8 >> 2] = $2;
 HEAP32[$4 + 4 >> 2] = $3;
 HEAP8[$4 | 0] = HEAP32[$4 + 8 >> 2] | HEAP32[$4 + 8 >> 2] << 4;
 HEAP8[$4 + 1 | 0] = HEAP32[$4 + 4 >> 2] | HEAP32[$4 + 8 >> 2] << 4;
 HEAP8[$4 + 2 | 0] = HEAP32[$4 + 8 >> 2] | HEAP32[$4 + 4 >> 2] << 4;
 HEAP8[$4 + 3 | 0] = HEAP32[$4 + 4 >> 2] | HEAP32[$4 + 4 >> 2] << 4;
 jshSPISend16(HEAPU8[$4 + 15 | 0], HEAPU8[(HEAPU8[$4 + 14 | 0] >>> 4 & 3) + $4 | 0] | HEAPU8[(HEAPU8[$4 + 14 | 0] >>> 6 | 0) + $4 | 0] << 8);
 jshSPISend16(HEAPU8[$4 + 15 | 0], HEAPU8[(HEAPU8[$4 + 14 | 0] & 3) + $4 | 0] | HEAPU8[(HEAPU8[$4 + 14 | 0] >>> 2 & 3) + $4 | 0] << 8);
 __stack_pointer = $4 + 16 | 0;
}

function jsiDumpJSON($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = jsvGetIndexOf(HEAP32[46747], HEAP32[$4 + 20 >> 2], 1);
 label$1: {
  label$2: {
   if (!HEAP32[$4 + 12 >> 2]) {
    break label$2;
   }
   if (!(jsvIsString(HEAP32[$4 + 12 >> 2]) & 1) | HEAP32[$4 + 12 >> 2] == HEAP32[$4 + 16 >> 2]) {
    break label$2;
   }
   $0 = HEAP32[$4 + 28 >> 2];
   $1 = HEAP32[$4 + 24 >> 2];
   HEAP32[$4 >> 2] = HEAP32[$4 + 12 >> 2];
   cbprintf($0, $1, 97144, $4);
   break label$1;
  }
  jsfGetJSONWithCallback(HEAP32[$4 + 20 >> 2], 0, 37, 0, HEAP32[$4 + 28 >> 2], HEAP32[$4 + 24 >> 2]);
 }
 __stack_pointer = $4 + 32 | 0;
}

function tflite__PreprocessSoftmaxScaling_28double_2c_20double_2c_20int_2c_20int__2c_20int__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer + -64 | 0;
 __stack_pointer = $5;
 HEAPF64[$5 + 56 >> 3] = $0;
 HEAPF64[$5 + 48 >> 3] = $1;
 HEAP32[$5 + 44 >> 2] = $2;
 HEAP32[$5 + 40 >> 2] = $3;
 HEAP32[$5 + 36 >> 2] = $4;
 HEAPF64[$5 + 16 >> 3] = HEAPF64[$5 + 56 >> 3] * HEAPF64[$5 + 48 >> 3] * +(1 << 31 - HEAP32[$5 + 44 >> 2]);
 HEAPF64[$5 + 8 >> 3] = 2147483647;
 HEAPF64[$5 + 24 >> 3] = HEAPF64[double_20const__20std____2__min_double__28double_20const__2c_20double_20const__29($5 + 16 | 0, $5 + 8 | 0) >> 3];
 tflite__QuantizeMultiplierGreaterThanOne_28double_2c_20int__2c_20int__29(HEAPF64[$5 + 24 >> 3], HEAP32[$5 + 40 >> 2], HEAP32[$5 + 36 >> 2]);
 __stack_pointer = $5 - -64 | 0;
}

function jspeSkipBlock() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 12 >> 2] = 1;
 HEAP32[$0 + 8 >> 2] = HEAP32[46755];
 HEAP32[46755] = HEAP32[46755] & -64;
 while (1) {
  $1 = 0;
  label$3: {
   $1 = HEAP16[HEAP32[38615] + 2 >> 1] ? HEAP32[$0 + 12 >> 2] != 0 : $1;
   if (!$1) {
    break label$3;
   }
   label$4: {
    if (HEAP16[HEAP32[38615] + 2 >> 1] == 123) {
     HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
     break label$4;
    }
    if (HEAP16[HEAP32[38615] + 2 >> 1] == 125) {
     HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] - 1;
     if (!HEAP32[$0 + 12 >> 2]) {
      break label$3;
     }
    }
   }
   jslGetNextToken();
   continue;
  }
  break;
 }
 HEAP32[46755] = HEAP32[$0 + 8 >> 2];
 __stack_pointer = $0 + 16 | 0;
}

function jslCheckToken($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP16[$2 + 6 >> 1] = $1;
 HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] - 1;
 HEAP32[$2 >> 2] = 1;
 label$1: {
  while (1) {
   if (HEAP32[$2 >> 2] < HEAPU8[HEAP32[38615] + 80 | 0]) {
    if (HEAP8[HEAP32[$2 >> 2] + (HEAP32[38615] + 12 | 0) | 0] != HEAP8[HEAP32[$2 + 8 >> 2] + HEAP32[$2 >> 2] | 0]) {
     HEAP8[$2 + 15 | 0] = 0;
     break label$1;
    } else {
     HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + 1;
     continue;
    }
   }
   break;
  }
  if (!HEAP8[HEAP32[$2 + 8 >> 2] + HEAPU8[HEAP32[38615] + 80 | 0] | 0]) {
   HEAP16[HEAP32[38615] + 2 >> 1] = HEAPU16[$2 + 6 >> 1];
   HEAP8[$2 + 15 | 0] = 1;
   break label$1;
  }
  HEAP8[$2 + 15 | 0] = 0;
 }
 return HEAP8[$2 + 15 | 0] & 1;
}

function graphicsGetVectorChar($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0;
 $7 = __stack_pointer - 48 | 0;
 __stack_pointer = $7;
 HEAP32[$7 + 40 >> 2] = $0;
 HEAP32[$7 + 36 >> 2] = $1;
 HEAP32[$7 + 32 >> 2] = $2;
 HEAP32[$7 + 28 >> 2] = $3;
 HEAP32[$7 + 24 >> 2] = $4;
 HEAP32[$7 + 20 >> 2] = $5;
 HEAP8[$7 + 19 | 0] = $6;
 HEAP32[$7 + 8 >> 2] = vfGetCharPtr(HEAP8[$7 + 19 | 0], $7 + 12 | 0);
 label$1: {
  if (!HEAP32[$7 + 8 >> 2]) {
   HEAP32[$7 + 44 >> 2] = HEAP32[$7 + 24 >> 2] / 2;
   break label$1;
  }
  HEAP32[$7 + 44 >> 2] = vfGetCharFromPtr(HEAP32[$7 + 40 >> 2], HEAP32[$7 + 36 >> 2], HEAP32[$7 + 32 >> 2], HEAP32[$7 + 28 >> 2], HEAP32[$7 + 24 >> 2], HEAP32[$7 + 20 >> 2], HEAP32[$7 + 8 >> 2], HEAP32[$7 + 12 >> 2]);
 }
 __stack_pointer = $7 + 48 | 0;
 return HEAP32[$7 + 44 >> 2];
}

function jsfGetSpaceLeftInPage($0) {
 var $1 = 0;
 $1 = __stack_pointer + -64 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 56 >> 2] = $0;
 label$1: {
  if (!(jshFlashGetPage(HEAP32[$1 + 56 >> 2], $1 + 52 | 0, $1 + 48 | 0) & 1)) {
   HEAP32[$1 + 60 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 44 >> 2] = jsfGetBankEndAddress(HEAP32[$1 + 56 >> 2]);
  HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 52 >> 2] + HEAP32[$1 + 48 >> 2];
  label$3: {
   if (HEAPU32[$1 + 40 >> 2] >= HEAPU32[$1 + 44 >> 2]) {
    break label$3;
   }
   if (jsfGetFileHeader(HEAP32[$1 + 40 >> 2], $1 + 8 | 0, 0) & 1) {
    break label$3;
   }
   HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 44 >> 2];
  }
  HEAP32[$1 + 60 >> 2] = HEAP32[$1 + 40 >> 2] - HEAP32[$1 + 56 >> 2];
 }
 __stack_pointer = $1 - -64 | 0;
 return HEAP32[$1 + 60 >> 2];
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph___20const___28unsigned_20short_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP16[$2 + 8 >> 1] = flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, HEAPU16[$2 + 10 >> 1]);
 HEAP32[$2 + 4 >> 2] = HEAPU16[$2 + 8 >> 1] + $0;
 label$1: {
  if (HEAPU16[$2 + 8 >> 1]) {
   $0 = HEAP32[$2 + 4 >> 2] + unsigned_20int_20flatbuffers__ReadScalar_unsigned_20int__28void_20const__29(HEAP32[$2 + 4 >> 2]) | 0;
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__Operator___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__Operator___20const___28unsigned_20short_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP16[$2 + 8 >> 1] = flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, HEAPU16[$2 + 10 >> 1]);
 HEAP32[$2 + 4 >> 2] = HEAPU16[$2 + 8 >> 1] + $0;
 label$1: {
  if (HEAPU16[$2 + 8 >> 1]) {
   $0 = HEAP32[$2 + 4 >> 2] + unsigned_20int_20flatbuffers__ReadScalar_unsigned_20int__28void_20const__29(HEAP32[$2 + 4 >> 2]) | 0;
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__Metadata___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__Metadata___20const___28unsigned_20short_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP16[$2 + 8 >> 1] = flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, HEAPU16[$2 + 10 >> 1]);
 HEAP32[$2 + 4 >> 2] = HEAPU16[$2 + 8 >> 1] + $0;
 label$1: {
  if (HEAPU16[$2 + 8 >> 1]) {
   $0 = HEAP32[$2 + 4 >> 2] + unsigned_20int_20flatbuffers__ReadScalar_unsigned_20int__28void_20const__29(HEAP32[$2 + 4 >> 2]) | 0;
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function jspGetException() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 8 >> 2] = jsvFindChildFromString(HEAP32[46748], 97537);
 label$1: {
  if (HEAP32[$0 + 8 >> 2]) {
   HEAP32[$0 + 4 >> 2] = jsvSkipName(HEAP32[$0 + 8 >> 2]);
   jsvRemoveChildAndUnLock(HEAP32[46748], HEAP32[$0 + 8 >> 2]);
   HEAP32[$0 >> 2] = jspGetStackTrace();
   label$3: {
    if (!HEAP32[$0 >> 2]) {
     break label$3;
    }
    if (!(jsvHasChildren(HEAP32[$0 + 4 >> 2]) & 1)) {
     break label$3;
    }
    jsvObjectSetChild(HEAP32[$0 + 4 >> 2], 103112, HEAP32[$0 >> 2]);
   }
   jsvUnLock(HEAP32[$0 >> 2]);
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 4 >> 2];
   break label$1;
  }
  HEAP32[$0 + 12 >> 2] = 0;
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__Tensor___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__Tensor___20const___28unsigned_20short_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP16[$2 + 8 >> 1] = flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, HEAPU16[$2 + 10 >> 1]);
 HEAP32[$2 + 4 >> 2] = HEAPU16[$2 + 8 >> 1] + $0;
 label$1: {
  if (HEAPU16[$2 + 8 >> 1]) {
   $0 = HEAP32[$2 + 4 >> 2] + unsigned_20int_20flatbuffers__ReadScalar_unsigned_20int__28void_20const__29(HEAP32[$2 + 4 >> 2]) | 0;
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer___20const___28unsigned_20short_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP16[$2 + 8 >> 1] = flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, HEAPU16[$2 + 10 >> 1]);
 HEAP32[$2 + 4 >> 2] = HEAPU16[$2 + 8 >> 1] + $0;
 label$1: {
  if (HEAPU16[$2 + 8 >> 1]) {
   $0 = HEAP32[$2 + 4 >> 2] + unsigned_20int_20flatbuffers__ReadScalar_unsigned_20int__28void_20const__29(HEAP32[$2 + 4 >> 2]) | 0;
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function jswrap_banglejs_powerusage($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (jswrap_banglejs_isLCDOn()) {
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 12 >> 2], 110033, jsvNewFromInteger(4e4));
 }
 if (jswrap_banglejs_isHRMOn()) {
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 12 >> 2], 109271, jsvNewFromInteger(700));
 }
 if (jswrap_banglejs_isGPSOn()) {
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 12 >> 2], 108804, jsvNewFromInteger(2e4));
 }
 if (jswrap_banglejs_isCompassOn()) {
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 12 >> 2], 100019, jsvNewFromInteger(600));
 }
 if (jswrap_banglejs_isBarometerOn()) {
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 12 >> 2], 102041, jsvNewFromInteger(200));
 }
 __stack_pointer = $1 + 16 | 0;
}

function lcdFillRect_ArrayBuffer_flat($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $6 = __stack_pointer - 32 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 28 >> 2] = $0;
 HEAP32[$6 + 24 >> 2] = $1;
 HEAP32[$6 + 20 >> 2] = $2;
 HEAP32[$6 + 16 >> 2] = $3;
 HEAP32[$6 + 12 >> 2] = $4;
 HEAP32[$6 + 8 >> 2] = $5;
 HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 20 >> 2];
 while (1) {
  if (HEAP32[$6 + 4 >> 2] <= HEAP32[$6 + 12 >> 2]) {
   lcdSetPixels_ArrayBuffer_flat(HEAP32[$6 + 28 >> 2], HEAP32[$6 + 24 >> 2], HEAP32[$6 + 4 >> 2], (HEAP32[$6 + 16 >> 2] + 1 | 0) - HEAP32[$6 + 24 >> 2] | 0, HEAP32[$6 + 8 >> 2]);
   HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 4 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $6 + 32 | 0;
}

function jswrap_banglejs_getLCDMode() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 8 >> 2] = 0;
 label$1: {
  label$2: {
   switch (lcdST7789_getMode() | 0) {
   case 0:
    HEAP32[$0 + 8 >> 2] = 102720;
    break label$1;

   case 1:
    HEAP32[$0 + 8 >> 2] = 98056;
    break label$1;

   case 2:
    HEAP32[$0 + 8 >> 2] = 106413;
    break label$1;

   case 3:
    HEAP32[$0 + 8 >> 2] = 111295;
    break label$1;

   case 4:
    break label$2;

   default:
    break label$1;
   }
  }
  HEAP32[$0 + 8 >> 2] = 111279;
 }
 label$7: {
  if (!HEAP32[$0 + 8 >> 2]) {
   HEAP32[$0 + 12 >> 2] = 0;
   break label$7;
  }
  HEAP32[$0 + 12 >> 2] = jsvNewFromString(HEAP32[$0 + 8 >> 2]);
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function jslGetTokenString($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 label$1: {
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 128) {
   $0 = HEAP32[$2 + 28 >> 2];
   $1 = HEAP32[$2 + 24 >> 2];
   HEAP32[$2 >> 2] = jslGetTokenValueAsString();
   espruino_snprintf($0, $1, 100646, $2);
   break label$1;
  }
  label$3: {
   if (HEAP16[HEAP32[38615] + 2 >> 1] == 131) {
    $0 = HEAP32[$2 + 28 >> 2];
    $1 = HEAP32[$2 + 24 >> 2];
    HEAP32[$2 + 16 >> 2] = jslGetTokenValueAsString();
    espruino_snprintf($0, $1, 126730, $2 + 16 | 0);
    break label$3;
   }
   jslTokenAsString(HEAP16[HEAP32[38615] + 2 >> 1], HEAP32[$2 + 28 >> 2], HEAP32[$2 + 24 >> 2]);
  }
 }
 __stack_pointer = $2 + 32 | 0;
}

function tflite__MicroMutableOpResolver_9u___GetOpDataParser_28tflite__BuiltinOperator_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 $0 = HEAP32[$2 + 8 >> 2];
 label$1: {
  if (HEAPU32[$0 + 368 >> 2] > 9) {
   break label$1;
  }
 }
 HEAP32[$2 >> 2] = 0;
 label$2: {
  while (1) {
   if (HEAPU32[$2 >> 2] < HEAPU32[$0 + 368 >> 2]) {
    if (HEAP32[($0 + 296 | 0) + (HEAP32[$2 >> 2] << 2) >> 2] == HEAP32[$2 + 4 >> 2]) {
     HEAP32[$2 + 12 >> 2] = HEAP32[($0 + 332 | 0) + (HEAP32[$2 >> 2] << 2) >> 2];
     break label$2;
    } else {
     HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + 1;
     continue;
    }
   }
   break;
  }
  HEAP32[$2 + 12 >> 2] = 0;
 }
 return HEAP32[$2 + 12 >> 2];
}

function st_backref_index_lsb($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP8[$1 + 7 | 0] = 8;
 $2 = HEAP32[$1 + 8 >> 2];
 if (HEAPU8[$1 + 7 | 0] < 8) {
  $0 = HEAPU8[$1 + 7 | 0];
 } else {
  $0 = 8;
 }
 HEAP16[$1 + 4 >> 1] = get_bits($2, $0);
 label$3: {
  if (HEAPU16[$1 + 4 >> 1] == 65535) {
   HEAP32[$1 + 12 >> 2] = 3;
   break label$3;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP16[$0 + 6 >> 1] = HEAPU16[$1 + 4 >> 1] | HEAPU16[$0 + 6 >> 1];
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP16[$0 + 6 >> 1] = HEAPU16[$0 + 6 >> 1] + 1;
  HEAP8[$1 + 3 | 0] = 6;
  HEAP16[HEAP32[$1 + 8 >> 2] + 4 >> 1] = 0;
  HEAP32[$1 + 12 >> 2] = HEAPU8[$1 + 3 | 0] > 8 ? 4 : 5;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jshGetDeviceObjectFor($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP16[$3 + 42 >> 1] = $0;
 HEAP16[$3 + 40 >> 1] = $1;
 HEAP8[$3 + 39 | 0] = $2;
 HEAP16[$3 + 36 >> 1] = jshGetDeviceFor(HEAPU16[$3 + 42 >> 1], HEAPU16[$3 + 40 >> 1], HEAPU8[$3 + 39 | 0]);
 label$1: {
  if (!HEAPU16[$3 + 36 >> 1]) {
   HEAP32[$3 + 44 >> 2] = 0;
   break label$1;
  }
  jshPinFunctionToString(HEAPU16[$3 + 36 >> 1], 19, $3 + 16 | 0, 16);
  HEAP32[$3 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[46747], $3 + 16 | 0);
  if (HEAP32[$3 + 12 >> 2]) {
   HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 12 >> 2];
   break label$1;
  }
  HEAP32[$3 + 44 >> 2] = jswFindBuiltInFunction(0, $3 + 16 | 0);
 }
 __stack_pointer = $3 + 48 | 0;
 return HEAP32[$3 + 44 >> 2];
}

function specialcase($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0;
 if (!(0 | $3 & -2147483648)) {
  wasm2js_scratch_store_i32(0, $1 | 0);
  $1 = $2;
  wasm2js_scratch_store_i32(1, $1 - 1058013184 | 0);
  $5 = +wasm2js_scratch_load_f64();
  return ($5 * $0 + $5) * 5486124068793689e288;
 }
 $3 = __stack_pointer - 16 | 0;
 wasm2js_scratch_store_i32(0, $1 | 0);
 wasm2js_scratch_store_i32(1, $2 + 1071644672 | 0);
 $5 = +wasm2js_scratch_load_f64();
 $6 = $5 * $0;
 $0 = $6 + $5;
 if ($0 < 1) {
  $1 = $3;
  HEAP32[$1 + 8 >> 2] = 0;
  HEAP32[$1 + 12 >> 2] = 1048576;
  HEAPF64[$1 + 8 >> 3] = HEAPF64[$1 + 8 >> 3] * 22250738585072014e-324;
  $7 = $0 + 1;
  $0 = $7 + ($6 + ($5 - $0) + ($0 + (1 - $7))) + -1;
  $0 = $0 == 0 ? 0 : $0;
 }
 return $0 * 22250738585072014e-324;
}

function lcdFillRect_ArrayBuffer($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $6 = __stack_pointer - 32 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 28 >> 2] = $0;
 HEAP32[$6 + 24 >> 2] = $1;
 HEAP32[$6 + 20 >> 2] = $2;
 HEAP32[$6 + 16 >> 2] = $3;
 HEAP32[$6 + 12 >> 2] = $4;
 HEAP32[$6 + 8 >> 2] = $5;
 HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 20 >> 2];
 while (1) {
  if (HEAP32[$6 + 4 >> 2] <= HEAP32[$6 + 12 >> 2]) {
   lcdSetPixels_ArrayBuffer(HEAP32[$6 + 28 >> 2], HEAP32[$6 + 24 >> 2], HEAP32[$6 + 4 >> 2], (HEAP32[$6 + 16 >> 2] + 1 | 0) - HEAP32[$6 + 24 >> 2] | 0, HEAP32[$6 + 8 >> 2]);
   HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 4 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $6 + 32 | 0;
}

function tflite___28anonymous_20namespace_29__GetMutableInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 8 >> 2] = $0;
 HEAP32[$3 + 4 >> 2] = $1;
 HEAP32[$3 >> 2] = $2;
 label$1: {
  if (HEAP32[HEAP32[$3 + 8 >> 2] + 8 >> 2]) {
   HEAP32[$3 + 12 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] + 8 >> 2] + Math_imul(HEAP32[(HEAP32[HEAP32[$3 + 4 >> 2] >> 2] + 4 | 0) + (HEAP32[$3 >> 2] << 2) >> 2], 40);
   break label$1;
  }
  HEAP32[$3 + 12 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$3 + 8 >> 2] + 80 >> 2]](HEAP32[$3 + 8 >> 2], HEAP32[(HEAP32[HEAP32[$3 + 4 >> 2] >> 2] + 4 | 0) + (HEAP32[$3 >> 2] << 2) >> 2]);
 }
 __stack_pointer = $3 + 16 | 0;
 return HEAP32[$3 + 12 >> 2];
}

function _jswrap_promise_queue_reaction($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 44 >> 2] = $0;
 HEAP32[$4 + 40 >> 2] = $1;
 HEAP32[$4 + 36 >> 2] = $2;
 HEAP8[$4 + 35 | 0] = $3;
 HEAP32[$4 + 28 >> 2] = jsvNewNativeFunction(624, 33352);
 if (HEAP32[$4 + 28 >> 2]) {
  jsvObjectSetChild(HEAP32[$4 + 28 >> 2], 100302, HEAP32[$4 + 44 >> 2]);
  HEAP32[$4 + 24 >> 2] = jsvNewFromBool(HEAP8[$4 + 35 | 0] & 1);
  HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 40 >> 2];
  HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 36 >> 2];
  HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 24 >> 2];
  jsiQueueEvents(HEAP32[$4 + 44 >> 2], HEAP32[$4 + 28 >> 2], $4 + 12 | 0, 3);
  jsvUnLock2(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 24 >> 2]);
 }
 __stack_pointer = $4 + 48 | 0;
}

function jsvNewArrayBufferFromString($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 HEAP32[$2 >> 2] = jsvNewWithFlags(4);
 label$1: {
  if (!HEAP32[$2 >> 2]) {
   HEAP32[$2 + 12 >> 2] = 0;
   break label$1;
  }
  jsvSetFirstChild(HEAP32[$2 >> 2], jsvGetRef(jsvRef(HEAP32[$2 + 8 >> 2])) & 65535);
  HEAP8[HEAP32[$2 >> 2] + 5 | 0] = 129;
  if (!HEAP32[$2 + 4 >> 2]) {
   HEAP32[$2 + 4 >> 2] = jsvGetStringLength(HEAP32[$2 + 8 >> 2]);
  }
  $0 = HEAP32[$2 >> 2];
  $1 = HEAP32[$2 + 4 >> 2];
  HEAP8[$0 + 2 | 0] = $1;
  HEAP8[$0 + 3 | 0] = $1 >>> 8;
  HEAP8[$0 + 4 | 0] = $1 >>> 16;
  HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function jstBufferTaskChecker($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  if (!(HEAPU8[HEAP32[$2 + 8 >> 2] + 24 | 0] == 4 | HEAPU8[HEAP32[$2 + 8 >> 2] + 24 | 0] == 5 | (HEAPU8[HEAP32[$2 + 8 >> 2] + 24 | 0] == 6 | HEAPU8[HEAP32[$2 + 8 >> 2] + 24 | 0] == 7))) {
   HEAP8[$2 + 15 | 0] = 0;
   break label$1;
  }
  HEAP16[$2 + 2 >> 1] = HEAPU16[HEAP32[$2 + 4 >> 2] >> 1];
  $0 = 1;
  $1 = HEAP32[$2 + 8 >> 2];
  if (HEAPU16[$2 + 2 >> 1] != (HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8)) {
   $0 = HEAP32[$2 + 8 >> 2];
   $0 = HEAPU16[$2 + 2 >> 1] == (HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8);
  }
  HEAP8[$2 + 15 | 0] = $0;
 }
 return HEAP8[$2 + 15 | 0] & 1;
}

function jshPushEvent($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jshInterruptOff();
 HEAP8[$1 + 11 | 0] = HEAPU8[187124] + 1;
 label$1: {
  if (HEAPU8[187125] == HEAPU8[$1 + 11 | 0]) {
   jshInterruptOn();
   jshIOEventOverflowed();
   break label$1;
  }
  $0 = Math_imul(HEAPU8[187124], 5) + 187712 | 0;
  $2 = HEAP32[$1 + 12 >> 2];
  $3 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
  HEAP8[$0 | 0] = $3;
  HEAP8[$0 + 1 | 0] = $3 >>> 8;
  HEAP8[$0 + 2 | 0] = $3 >>> 16;
  HEAP8[$0 + 3 | 0] = $3 >>> 24;
  HEAP8[$0 + 4 | 0] = HEAPU8[$2 + 4 | 0];
  HEAP8[187124] = HEAPU8[$1 + 11 | 0];
  jshInterruptOn();
 }
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_pipe_idle() {
 var $0 = 0;
 $0 = __stack_pointer - 32 | 0;
 __stack_pointer = $0;
 HEAP8[$0 + 31 | 0] = 0;
 HEAP32[$0 + 24 >> 2] = pipeGetArray(0);
 if (HEAP32[$0 + 24 >> 2]) {
  jsvObjectIteratorNew($0 + 16 | 0, HEAP32[$0 + 24 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_16($0 + 16 | 0) & 1) {
    HEAP32[$0 + 12 >> 2] = jsvObjectIteratorGetValue_15($0 + 16 | 0);
    HEAP8[$0 + 31 | 0] = handlePipe(HEAP32[$0 + 24 >> 2], $0 + 16 | 0, HEAP32[$0 + 12 >> 2]) & 1 | HEAP8[$0 + 31 | 0] & 1;
    jsvUnLock(HEAP32[$0 + 12 >> 2]);
    jsvObjectIteratorNext($0 + 16 | 0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree_16($0 + 16 | 0);
  jsvUnLock(HEAP32[$0 + 24 >> 2]);
 }
 __stack_pointer = $0 + 32 | 0;
 return HEAP8[$0 + 31 | 0] & 1;
}

function jsvArrayBufferIteratorGetIntegerValue($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAPU8[HEAP32[$1 + 8 >> 2] + 36 | 0]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  jsvArrayBufferIteratorGetValueData(HEAP32[$1 + 8 >> 2], $1);
  if (HEAPU8[HEAP32[$1 + 8 >> 2] + 36 | 0] & 32) {
   $2 = jsvArrayBufferIteratorDataToFloat(HEAP32[$1 + 8 >> 2], $1);
   label$4: {
    if (Math_abs($2) < 2147483648) {
     $0 = ~~$2;
     break label$4;
    }
    $0 = -2147483648;
   }
   HEAP32[$1 + 12 >> 2] = $0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvArrayBufferIteratorDataToInt(HEAP32[$1 + 8 >> 2], $1);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function tflite__MicroAllocator__GetScratchBuffer_28int_29_20const($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 $0 = HEAP32[$2 + 24 >> 2];
 label$1: {
  if (HEAPU32[$2 + 20 >> 2] >= HEAPU32[$0 + 20 >> 2]) {
   $1 = HEAP32[$0 + 8 >> 2];
   $3 = HEAP32[$2 + 20 >> 2];
   HEAP32[$2 + 4 >> 2] = HEAP32[$0 + 20 >> 2];
   HEAP32[$2 >> 2] = $3;
   tflite__ErrorReporter__Report_28char_20const__2c_20____29($1, 111907, $2);
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 28 >> 2] = HEAP32[HEAP32[$0 + 16 >> 2] + Math_imul((HEAP32[$0 + 20 >> 2] - HEAP32[$2 + 20 >> 2] | 0) - 1 | 0, 12) >> 2];
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jshGetSerialNumber($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 32 | 0;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP32[$2 + 20 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = -559030611;
 HEAP32[$2 + 12 >> 2] = -559030611;
 $1 = HEAP32[$2 + 28 >> 2];
 $0 = HEAP32[$2 + 20 >> 2];
 HEAP8[$1 | 0] = $0;
 HEAP8[$1 + 1 | 0] = $0 >>> 8;
 HEAP8[$1 + 2 | 0] = $0 >>> 16;
 HEAP8[$1 + 3 | 0] = $0 >>> 24;
 $1 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$2 + 8 >> 2];
 $0 = $3;
 $3 = HEAP32[$2 + 28 >> 2];
 HEAP8[$3 + 4 | 0] = $0;
 HEAP8[$3 + 5 | 0] = $0 >>> 8;
 HEAP8[$3 + 6 | 0] = $0 >>> 16;
 HEAP8[$3 + 7 | 0] = $0 >>> 24;
 HEAP8[$3 + 8 | 0] = $1;
 HEAP8[$3 + 9 | 0] = $1 >>> 8;
 HEAP8[$3 + 10 | 0] = $1 >>> 16;
 HEAP8[$3 + 11 | 0] = $1 >>> 24;
 return 12;
}

function _jswrap_serial_print($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP8[$4 + 23 | 0] = $2;
 HEAP8[$4 + 22 | 0] = $3;
 label$1: {
  if (!(jsserialGetSendFunction(HEAP32[$4 + 28 >> 2], $4 + 16 | 0, $4) & 1)) {
   break label$1;
  }
  if (HEAP8[$4 + 23 | 0] & 1) {
   HEAP32[$4 + 24 >> 2] = jsvAsString(HEAP32[$4 + 24 >> 2]);
  }
  jsvIterateCallback(HEAP32[$4 + 24 >> 2], HEAP32[$4 + 16 >> 2], $4);
  if (HEAP8[$4 + 23 | 0] & 1) {
   jsvUnLock(HEAP32[$4 + 24 >> 2]);
  }
  if (!(HEAP8[$4 + 22 | 0] & 1)) {
   break label$1;
  }
  FUNCTION_TABLE[HEAP32[$4 + 16 >> 2]](13, $4);
  FUNCTION_TABLE[HEAP32[$4 + 16 >> 2]](10, $4);
 }
 __stack_pointer = $4 + 32 | 0;
}

function jsvObjectAppendAll($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 jsvObjectIteratorNew($2 + 16 | 0, HEAP32[$2 + 24 >> 2]);
 while (1) {
  if (jsvObjectIteratorHasValue($2 + 16 | 0) & 1) {
   HEAP32[$2 + 12 >> 2] = jsvObjectIteratorGetKey($2 + 16 | 0);
   HEAP32[$2 + 8 >> 2] = jsvSkipName(HEAP32[$2 + 12 >> 2]);
   if (!(jsvIsInternalObjectKey(HEAP32[$2 + 12 >> 2]) & 1)) {
    jsvObjectSetChildVar(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
   }
   jsvUnLock2(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
   jsvObjectIteratorNext($2 + 16 | 0);
   continue;
  }
  break;
 }
 jsvObjectIteratorFree($2 + 16 | 0);
 __stack_pointer = $2 + 32 | 0;
}

function jsvCreateNewChild($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = jsvAsName(HEAP32[$3 + 20 >> 2]);
 label$1: {
  if (!HEAP32[$3 + 12 >> 2]) {
   HEAP32[$3 + 28 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$3 + 16 >> 2]) {
   jsvSetValueOfName(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 16 >> 2]);
  }
  HEAP16[$3 + 10 >> 1] = jsvGetRef(jsvRef(jsvRef(HEAP32[$3 + 24 >> 2])));
  jsvSetNextSibling(HEAP32[$3 + 12 >> 2], HEAPU16[$3 + 10 >> 1]);
  jsvSetPrevSibling(HEAP32[$3 + 12 >> 2], HEAPU16[$3 + 10 >> 1]);
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 12 >> 2];
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function jspEvaluate($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP8[$2 + 23 | 0] = $1;
 label$1: {
  if (HEAP8[$2 + 23 | 0] & 1) {
   HEAP32[$2 + 16 >> 2] = jsvNewNativeString(HEAP32[$2 + 24 >> 2], strlen(HEAP32[$2 + 24 >> 2]));
   break label$1;
  }
  HEAP32[$2 + 16 >> 2] = jsvNewFromString(HEAP32[$2 + 24 >> 2]);
 }
 label$3: {
  if (!HEAP32[$2 + 16 >> 2]) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$3;
  }
  HEAP32[$2 + 12 >> 2] = 0;
  if (!(jsvIsMemoryFull() & 1)) {
   HEAP32[$2 + 12 >> 2] = jspEvaluateVar(HEAP32[$2 + 16 >> 2], 0, 0);
  }
  jsvUnLock(HEAP32[$2 + 16 >> 2]);
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jslNeedSpaceBetween($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 label$1: {
  if (HEAPU8[$2 + 15 | 0] < 163) {
   $0 = 0;
   if (HEAPU8[$2 + 14 | 0] < 163) {
    break label$1;
   }
  }
  label$3: {
   if (HEAPU8[$2 + 15 | 0] >= 163) {
    break label$3;
   }
   if (isAlpha(HEAP8[$2 + 15 | 0]) & 1) {
    break label$3;
   }
   $0 = 0;
   if (!(isNumeric(HEAP8[$2 + 15 | 0]) & 1)) {
    break label$1;
   }
  }
  $0 = 1;
  label$4: {
   if (HEAPU8[$2 + 14 | 0] >= 163) {
    break label$4;
   }
   $0 = 1;
   if (isAlpha(HEAP8[$2 + 14 | 0]) & 1) {
    break label$4;
   }
   $0 = isNumeric(HEAP8[$2 + 14 | 0]);
  }
 }
 __stack_pointer = $2 + 16 | 0;
 return $0 & 1;
}

function jswrap_modules_removeCached($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1: {
  if (!(jsvIsString(HEAP32[$1 + 12 >> 2]) & 1)) {
   jsExceptionHere(1, 103795, 0);
   break label$1;
  }
  HEAP32[$1 + 8 >> 2] = jswrap_modules_getModuleList();
  if (!HEAP32[$1 + 8 >> 2]) {
   break label$1;
  }
  HEAP32[$1 + 4 >> 2] = jsvFindChildFromVar(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2], 0);
  label$3: {
   if (!HEAP32[$1 + 4 >> 2]) {
    HEAP32[$1 >> 2] = HEAP32[$1 + 12 >> 2];
    jsExceptionHere(1, 105822, $1);
    break label$3;
   }
   jsvRemoveChildAndUnLock(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 4 >> 2]);
  }
  jsvUnLock(HEAP32[$1 + 8 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_date_toISOString($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $1 = __stack_pointer - 96 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 92 >> 2] = $0;
 getTimeFromDateVar($1 - -64 | 0, HEAP32[$1 + 92 >> 2], 1);
 getCalendarDate($1 + 40 | 0, HEAP32[$1 + 64 >> 2]);
 $0 = HEAP32[$1 + 52 >> 2];
 $2 = HEAP32[$1 + 48 >> 2];
 $3 = HEAP32[$1 + 44 >> 2];
 $4 = HEAP32[$1 + 80 >> 2];
 $5 = HEAP32[$1 + 76 >> 2];
 $6 = HEAP32[$1 + 72 >> 2];
 HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 68 >> 2];
 HEAP32[$1 + 20 >> 2] = $6;
 HEAP32[$1 + 16 >> 2] = $5;
 HEAP32[$1 + 12 >> 2] = $4;
 HEAP32[$1 + 8 >> 2] = $3;
 HEAP32[$1 + 4 >> 2] = $2 + 1;
 HEAP32[$1 >> 2] = $0;
 $0 = jsvVarPrintf(108315, $1);
 __stack_pointer = $1 + 96 | 0;
 return $0 | 0;
}

function jsvCountJsVarsUsed($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (!(!HEAP32[46747] | HEAP32[$1 + 12 >> 2] == HEAP32[46747])) {
  $0 = HEAP32[46747];
  $2 = HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8 | 512;
  HEAP8[$0 + 11 | 0] = $2;
  HEAP8[$0 + 12 | 0] = $2 >>> 8;
 }
 HEAP32[$1 + 8 >> 2] = _jsvCountJsVarsUsedRecursive(HEAP32[$1 + 12 >> 2], 0);
 _jsvCountJsVarsUsedRecursive(HEAP32[$1 + 12 >> 2], 1);
 if (!(!HEAP32[46747] | HEAP32[$1 + 12 >> 2] == HEAP32[46747])) {
  $0 = HEAP32[46747];
  $2 = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & -513;
  HEAP8[$0 + 11 | 0] = $2;
  HEAP8[$0 + 12 | 0] = $2 >>> 8;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jswrap_string_substr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 if (jsvIsUndefined(HEAP32[$3 + 4 >> 2]) & 1) {
  $0 = 2147483647;
 } else {
  $0 = jsvGetInteger(HEAP32[$3 + 4 >> 2]);
 }
 HEAP32[$3 >> 2] = $0;
 if (HEAP32[$3 >> 2] < 0) {
  HEAP32[$3 >> 2] = 0;
 }
 if (HEAP32[$3 + 8 >> 2] < 0) {
  HEAP32[$3 + 8 >> 2] = jsvGetStringLength(HEAP32[$3 + 12 >> 2]) + HEAP32[$3 + 8 >> 2];
 }
 if (HEAP32[$3 + 8 >> 2] < 0) {
  HEAP32[$3 + 8 >> 2] = 0;
 }
 $0 = jsvNewFromStringVar(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function jsvGetValueOf($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!(jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1)) {
   HEAP32[$1 + 12 >> 2] = jsvLockAgainSafe(HEAP32[$1 + 8 >> 2]);
   break label$1;
  }
  HEAP32[$1 + 4 >> 2] = jspGetNamedField(HEAP32[$1 + 8 >> 2], 104112, 0);
  if (!(jsvIsFunction(HEAP32[$1 + 4 >> 2]) & 1)) {
   jsvUnLock(HEAP32[$1 + 4 >> 2]);
   HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[$1 + 8 >> 2]);
   break label$1;
  }
  HEAP32[$1 + 8 >> 2] = jspeFunctionCall(HEAP32[$1 + 4 >> 2], 0, HEAP32[$1 + 8 >> 2], 0, 0, 0);
  jsvUnLock(HEAP32[$1 + 4 >> 2]);
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2];
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jswrap_storage_list($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP32[$2 + 20 >> 2] = 0;
 HEAP32[$2 + 16 >> 2] = 0;
 if (jsvIsObject(HEAP32[$2 + 24 >> 2]) & 1) {
  HEAP32[$2 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 24 >> 2], 104032);
  if (HEAP32[$2 + 12 >> 2]) {
   label$3: {
    if (jsvGetBoolAndUnLock(HEAP32[$2 + 12 >> 2]) & 1) {
     HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 20 >> 2] | 64;
     break label$3;
    }
    HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 16 >> 2] | 64;
   }
  }
 }
 $0 = jsfListFiles(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 16 >> 2]);
 __stack_pointer = $2 + 32 | 0;
 return $0 | 0;
}

function jsiConsolePrintStringVarWithNewLineChar($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer + -64 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 60 >> 2] = $0;
 HEAP32[$3 + 56 >> 2] = $1;
 HEAP8[$3 + 55 | 0] = $2;
 jsvStringIteratorNew($3 + 16 | 0, HEAP32[$3 + 60 >> 2], HEAP32[$3 + 56 >> 2]);
 while (1) {
  if (jsvStringIteratorHasChar_5($3 + 16 | 0) & 1) {
   HEAP8[$3 + 15 | 0] = jsvStringIteratorGetCharAndNext($3 + 16 | 0);
   if (HEAP8[$3 + 15 | 0] == 10) {
    jsiConsolePrintChar(13);
   }
   jsiConsolePrintChar(HEAP8[$3 + 15 | 0]);
   if (!(!HEAP8[$3 + 55 | 0] | HEAP8[$3 + 15 | 0] != 10)) {
    jsiConsolePrintChar(HEAP8[$3 + 55 | 0]);
   }
   continue;
  }
  break;
 }
 jsvStringIteratorFree_5($3 + 16 | 0);
 __stack_pointer = $3 - -64 | 0;
}

function jsfGetFlags() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 8 >> 2] = jsvNewWithFlags(5);
 label$1: {
  if (!HEAP32[$0 + 8 >> 2]) {
   HEAP32[$0 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$0 + 4 >> 2] = HEAP32[38453];
  HEAP8[$0 + 3 | 0] = 1;
  while (1) {
   if (HEAPU8[HEAP32[$0 + 4 >> 2]]) {
    jsvObjectSetChildAndUnLock(HEAP32[$0 + 8 >> 2], HEAP32[$0 + 4 >> 2], jsvNewFromInteger(jsfGetFlag(HEAPU8[$0 + 3 | 0]) & 1));
    HEAP32[$0 + 4 >> 2] = (strlen(HEAP32[$0 + 4 >> 2]) + 1 | 0) + HEAP32[$0 + 4 >> 2];
    HEAP8[$0 + 3 | 0] = HEAPU8[$0 + 3 | 0] << 1;
    continue;
   }
   break;
  }
  HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2];
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function jsvIsChild($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP16[$2 + 18 >> 1] = jsvGetRef(HEAP32[$2 + 20 >> 2]);
 HEAP16[$2 + 16 >> 1] = jsvGetFirstChild(HEAP32[$2 + 24 >> 2]);
 label$1: {
  while (1) {
   if (HEAPU16[$2 + 16 >> 1]) {
    if (HEAPU16[$2 + 16 >> 1] == HEAPU16[$2 + 18 >> 1]) {
     HEAP8[$2 + 31 | 0] = 1;
     break label$1;
    } else {
     HEAP32[$2 + 12 >> 2] = jsvLock(HEAPU16[$2 + 16 >> 1]);
     HEAP16[$2 + 16 >> 1] = jsvGetNextSibling(HEAP32[$2 + 12 >> 2]);
     jsvUnLock(HEAP32[$2 + 12 >> 2]);
     continue;
    }
   }
   break;
  }
  HEAP8[$2 + 31 | 0] = 0;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP8[$2 + 31 | 0] & 1;
}

function jsvArrayBufferIteratorNext($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 + 48 >> 2] = HEAP32[$0 + 48 >> 2] + 1;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] + (HEAPU8[HEAP32[$1 + 12 >> 2] + 36 | 0] & 15);
 label$1: {
  if (!(HEAP8[HEAP32[$1 + 12 >> 2] + 52 | 0] & 1)) {
   HEAP32[$1 + 8 >> 2] = HEAPU8[HEAP32[$1 + 12 >> 2] + 36 | 0] & 15;
   while (1) {
    $0 = HEAP32[$1 + 8 >> 2];
    HEAP32[$1 + 8 >> 2] = $0 - 1;
    if ($0) {
     jsvStringIteratorNext(HEAP32[$1 + 12 >> 2]);
     continue;
    }
    break;
   }
   break label$1;
  }
  HEAP8[HEAP32[$1 + 12 >> 2] + 52 | 0] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_date_setMinutes($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 44 >> 2] = $0;
 HEAP32[$4 + 40 >> 2] = $1;
 HEAP32[$4 + 36 >> 2] = $2;
 HEAP32[$4 + 32 >> 2] = $3;
 getTimeFromDateVar($4, HEAP32[$4 + 44 >> 2], 0);
 HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 40 >> 2];
 if (jsvIsNumeric(HEAP32[$4 + 36 >> 2]) & 1) {
  HEAP32[$4 + 8 >> 2] = jsvGetInteger(HEAP32[$4 + 36 >> 2]);
 }
 if (jsvIsNumeric(HEAP32[$4 + 32 >> 2]) & 1) {
  HEAP32[$4 + 4 >> 2] = jsvGetInteger(HEAP32[$4 + 32 >> 2]);
 }
 setCorrectTimeZone($4);
 $5 = jswrap_date_setTime(HEAP32[$4 + 44 >> 2], fromTimeInDay($4));
 __stack_pointer = $4 + 48 | 0;
 return +$5;
}

function jsfSetFlags($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1: {
  if (!(jsvIsObject(HEAP32[$1 + 12 >> 2]) & 1)) {
   break label$1;
  }
  HEAP32[$1 + 8 >> 2] = HEAP32[38453];
  HEAP8[$1 + 7 | 0] = 1;
  while (1) {
   if (!HEAPU8[HEAP32[$1 + 8 >> 2]]) {
    break label$1;
   }
   HEAP32[$1 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 8 >> 2]);
   if (HEAP32[$1 >> 2]) {
    jsfSetFlag(HEAPU8[$1 + 7 | 0], jsvGetBoolAndUnLock(HEAP32[$1 >> 2]) & 1);
   }
   HEAP32[$1 + 8 >> 2] = (strlen(HEAP32[$1 + 8 >> 2]) + 1 | 0) + HEAP32[$1 + 8 >> 2];
   HEAP8[$1 + 7 | 0] = HEAPU8[$1 + 7 | 0] << 1;
   continue;
  }
 }
 __stack_pointer = $1 + 16 | 0;
}

function jsvArrayBufferIteratorDataToInt($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP32[$2 + 20 >> 2] = HEAPU8[HEAP32[$2 + 28 >> 2] + 36 | 0] & 15;
 HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 20 >> 2] << 3;
 $0 = HEAP32[$2 + 16 >> 2];
 $1 = $0 & 31;
 $0 = ($0 & 63) >>> 0 >= 32 ? 0 : 1 << $1;
 $1 = $0 - 1 | 0;
 HEAP32[$2 + 12 >> 2] = $1;
 HEAP32[$2 + 8 >> 2] = HEAP32[HEAP32[$2 + 24 >> 2] >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] & HEAP32[$2 + 12 >> 2];
 if (!(!(HEAPU8[HEAP32[$2 + 28 >> 2] + 36 | 0] & 16) | !(HEAP32[$2 + 8 >> 2] & 1 << HEAP32[$2 + 16 >> 2] - 1))) {
  HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] | HEAP32[$2 + 12 >> 2] ^ -1;
 }
 return HEAP32[$2 + 8 >> 2];
}

function tflite__ComputePaddingWithOffset_28int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 32 | 0;
 HEAP32[$6 + 28 >> 2] = $0;
 HEAP32[$6 + 24 >> 2] = $1;
 HEAP32[$6 + 20 >> 2] = $2;
 HEAP32[$6 + 16 >> 2] = $3;
 HEAP32[$6 + 12 >> 2] = $4;
 HEAP32[$6 + 8 >> 2] = $5;
 HEAP32[$6 + 4 >> 2] = Math_imul(HEAP32[$6 + 24 >> 2], HEAP32[$6 + 16 >> 2] - 1 | 0) + 1;
 HEAP32[$6 >> 2] = (HEAP32[$6 + 4 >> 2] + Math_imul(HEAP32[$6 + 28 >> 2], HEAP32[$6 + 12 >> 2] - 1 | 0) | 0) - HEAP32[$6 + 20 >> 2];
 if (HEAP32[$6 >> 2] > 0) {
  $0 = HEAP32[$6 >> 2];
 } else {
  $0 = 0;
 }
 HEAP32[$6 >> 2] = $0;
 HEAP32[HEAP32[$6 + 8 >> 2] >> 2] = HEAP32[$6 >> 2] % 2;
 return HEAP32[$6 >> 2] / 2 | 0;
}

function flatbuffers__Vector_unsigned_20char__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_unsigned_20char__20const___28unsigned_20short_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP16[$2 + 8 >> 1] = flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, HEAPU16[$2 + 10 >> 1]);
 HEAP32[$2 + 4 >> 2] = HEAPU16[$2 + 8 >> 1] + $0;
 label$1: {
  if (HEAPU16[$2 + 8 >> 1]) {
   $0 = HEAP32[$2 + 4 >> 2] + unsigned_20int_20flatbuffers__ReadScalar_unsigned_20int__28void_20const__29(HEAP32[$2 + 4 >> 2]) | 0;
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function jswrap_regexp_hasFlag($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer + -64 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 60 >> 2] = $0;
 HEAP8[$2 + 59 | 0] = $1;
 HEAP32[$2 + 52 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 60 >> 2], 100312);
 HEAP8[$2 + 51 | 0] = 0;
 if (jsvIsString(HEAP32[$2 + 52 >> 2]) & 1) {
  jsvStringIteratorNew($2 + 8 | 0, HEAP32[$2 + 52 >> 2], 0);
  while (1) {
   if (jsvStringIteratorHasChar_7($2 + 8 | 0) & 1) {
    HEAP8[$2 + 51 | 0] = (jsvStringIteratorGetCharAndNext($2 + 8 | 0) & 255) == HEAPU8[$2 + 59 | 0] | HEAP8[$2 + 51 | 0] & 1;
    continue;
   }
   break;
  }
  jsvStringIteratorFree_9($2 + 8 | 0);
 }
 jsvUnLock(HEAP32[$2 + 52 >> 2]);
 __stack_pointer = $2 - -64 | 0;
 return HEAP8[$2 + 51 | 0] & 1;
}

function jsvNewNativeString($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 HEAP32[$2 >> 2] = jsvNewWithFlags(38);
 label$2: {
  if (!HEAP32[$2 >> 2]) {
   HEAP32[$2 + 12 >> 2] = 0;
   break label$2;
  }
  $0 = HEAP32[$2 >> 2];
  $1 = HEAP32[$2 + 8 >> 2];
  HEAP8[$0 | 0] = $1;
  HEAP8[$0 + 1 | 0] = $1 >>> 8;
  HEAP8[$0 + 2 | 0] = $1 >>> 16;
  HEAP8[$0 + 3 | 0] = $1 >>> 24;
  $0 = HEAP32[$2 >> 2];
  $1 = HEAP32[$2 + 4 >> 2];
  HEAP8[$0 + 4 | 0] = $1;
  HEAP8[$0 + 5 | 0] = $1 >>> 8;
  HEAP8[$0 + 6 | 0] = $1 >>> 16;
  HEAP8[$0 + 7 | 0] = $1 >>> 24;
  HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function jsvSkipToLastName($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvLockAgain(HEAP32[$1 + 8 >> 2]);
 while (1) {
  label$2: {
   if (!(jsvGetFirstChild(HEAP32[$1 + 8 >> 2]) & 65535)) {
    break label$2;
   }
   HEAP32[$1 + 4 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$1 + 8 >> 2]) & 65535);
   label$4: {
    if (jsvIsName(HEAP32[$1 + 4 >> 2]) & 1) {
     jsvUnLock(HEAP32[$1 + 8 >> 2]);
     HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 4 >> 2];
     break label$4;
    }
    jsvUnLock(HEAP32[$1 + 4 >> 2]);
    break label$2;
   }
   continue;
  }
  break;
 }
 HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2];
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvNewFlashString($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 HEAP32[$2 >> 2] = jsvNewWithFlags(39);
 label$2: {
  if (!HEAP32[$2 >> 2]) {
   HEAP32[$2 + 12 >> 2] = 0;
   break label$2;
  }
  $0 = HEAP32[$2 >> 2];
  $1 = HEAP32[$2 + 8 >> 2];
  HEAP8[$0 | 0] = $1;
  HEAP8[$0 + 1 | 0] = $1 >>> 8;
  HEAP8[$0 + 2 | 0] = $1 >>> 16;
  HEAP8[$0 + 3 | 0] = $1 >>> 24;
  $0 = HEAP32[$2 >> 2];
  $1 = HEAP32[$2 + 4 >> 2];
  HEAP8[$0 + 4 | 0] = $1;
  HEAP8[$0 + 5 | 0] = $1 >>> 8;
  HEAP8[$0 + 6 | 0] = $1 >>> 16;
  HEAP8[$0 + 7 | 0] = $1 >>> 24;
  HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function jsvExecuteGetter($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1: {
  if (!(jsvIsGetterOrSetter(HEAP32[$2 + 20 >> 2]) & 1)) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 16 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 20 >> 2], 98052);
  if (!(jsvIsFunction(HEAP32[$2 + 16 >> 2]) & 1)) {
   jsvUnLock(HEAP32[$2 + 16 >> 2]);
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = jspExecuteFunction(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 24 >> 2], 0, 0);
  jsvUnLock(HEAP32[$2 + 16 >> 2]);
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jswrap_i2c_readFrom($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 label$1: {
  if (!(jsvIsObject(HEAP32[$3 + 24 >> 2]) & 1)) {
   HEAP32[$3 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP8[$3 + 15 | 0] = jsiGetDeviceFromClass(HEAP32[$3 + 24 >> 2]);
  HEAP8[$3 + 14 | 0] = 1;
  HEAP32[$3 + 8 >> 2] = i2c_get_address(HEAP32[$3 + 20 >> 2], $3 + 14 | 0);
  HEAP32[$3 + 28 >> 2] = _jswrap_i2c_readFrom(HEAP32[$3 + 24 >> 2], HEAPU8[$3 + 15 | 0], HEAP32[$3 + 8 >> 2], HEAP8[$3 + 14 | 0] & 1, HEAP32[$3 + 16 >> 2]);
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function jspromise_create_prombox($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = jspromise_create();
 label$1: {
  if (!HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 >> 2] = jsvNewObject();
  if (!HEAP32[$1 >> 2]) {
   jsvUnLock(HEAP32[$1 + 4 >> 2]);
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 4 >> 2], 104628, jsvNewFromInteger(0));
  jsvObjectSetChildAndUnLock(HEAP32[$1 >> 2], 102677, HEAP32[$1 + 4 >> 2]);
  HEAP32[HEAP32[$1 + 8 >> 2] >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function tflite__EnumNameBuiltinOperator_28tflite__BuiltinOperator_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 HEAP32[$1 + 20 >> 2] = 0;
 HEAP32[$1 + 16 >> 2] = 126;
 label$1: {
  if (bool_20flatbuffers__IsOutRange_tflite__BuiltinOperator__28tflite__BuiltinOperator_20const__2c_20tflite__BuiltinOperator_20const__2c_20tflite__BuiltinOperator_20const__29($1 + 24 | 0, $1 + 20 | 0, $1 + 16 | 0) & 1) {
   HEAP32[$1 + 28 >> 2] = 129588;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 24 >> 2];
  HEAP32[$1 + 28 >> 2] = HEAP32[tflite__EnumNamesBuiltinOperator_28_29() + (HEAP32[$1 + 12 >> 2] << 2) >> 2];
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function reverseBytes($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 24 >> 2] >> 1;
 HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 24 >> 2] - 1;
 HEAP32[$2 + 12 >> 2] = 0;
 while (1) {
  if (HEAP32[$2 + 12 >> 2] < HEAP32[$2 + 20 >> 2]) {
   HEAP8[$2 + 11 | 0] = HEAPU8[HEAP32[$2 + 28 >> 2] + HEAP32[$2 + 12 >> 2] | 0];
   HEAP8[HEAP32[$2 + 28 >> 2] + HEAP32[$2 + 12 >> 2] | 0] = HEAPU8[HEAP32[$2 + 28 >> 2] + HEAP32[$2 + 16 >> 2] | 0];
   HEAP8[HEAP32[$2 + 28 >> 2] + HEAP32[$2 + 16 >> 2] | 0] = HEAPU8[$2 + 11 | 0];
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
   HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 16 >> 2] - 1;
   continue;
  }
  break;
 }
}

function tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode_20const__2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 8 >> 2] = $0;
 HEAP32[$3 + 4 >> 2] = $1;
 HEAP32[$3 >> 2] = $2;
 label$1: {
  if (HEAP32[HEAP32[$3 + 8 >> 2] + 8 >> 2]) {
   HEAP32[$3 + 12 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] + 8 >> 2] + Math_imul(HEAP32[(HEAP32[HEAP32[$3 + 4 >> 2] + 4 >> 2] + 4 | 0) + (HEAP32[$3 >> 2] << 2) >> 2], 40);
   break label$1;
  }
  HEAP32[$3 + 12 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$3 + 8 >> 2] + 80 >> 2]](HEAP32[$3 + 8 >> 2], HEAP32[(HEAP32[HEAP32[$3 + 4 >> 2] + 4 >> 2] + 4 | 0) + (HEAP32[$3 >> 2] << 2) >> 2]);
 }
 __stack_pointer = $3 + 16 | 0;
 return HEAP32[$3 + 12 >> 2];
}

function jsiHistoryAddLine($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 12 >> 2]) {
   break label$1;
  }
  HEAP32[$1 + 8 >> 2] = jsvGetStringLength(HEAP32[$1 + 12 >> 2]);
  if (!HEAP32[$1 + 8 >> 2] | HEAPU32[$1 + 8 >> 2] > 500) {
   break label$1;
  }
  HEAP32[$1 + 4 >> 2] = jsiGetHistory();
  if (!HEAP32[$1 + 4 >> 2]) {
   break label$1;
  }
  HEAP32[$1 >> 2] = jsvGetIndexOf(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 12 >> 2], 0);
  if (HEAP32[$1 >> 2]) {
   jsvRemoveChildAndUnLock(HEAP32[$1 + 4 >> 2], HEAP32[$1 >> 2]);
  }
  jsvArrayPush(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 12 >> 2]);
  jsvUnLock(HEAP32[$1 + 4 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
}

function graphicsSetPixelDeviceBlended($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = graphicsGetPixelDevice(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2]);
 $0 = HEAP32[$4 + 28 >> 2];
 HEAP32[$4 + 8 >> 2] = graphicsBlendColor(HEAP32[$4 + 28 >> 2], HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24), HEAP32[$4 + 12 >> 2], HEAP32[$4 + 16 >> 2]);
 graphicsSetPixelDevice(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 8 >> 2]);
 __stack_pointer = $4 + 32 | 0;
}

function flatbuffers__Vector_long_20long__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_long_20long__20const___28unsigned_20short_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP16[$2 + 8 >> 1] = flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, HEAPU16[$2 + 10 >> 1]);
 HEAP32[$2 + 4 >> 2] = HEAPU16[$2 + 8 >> 1] + $0;
 label$1: {
  if (HEAPU16[$2 + 8 >> 1]) {
   $0 = HEAP32[$2 + 4 >> 2] + unsigned_20int_20flatbuffers__ReadScalar_unsigned_20int__28void_20const__29(HEAP32[$2 + 4 >> 2]) | 0;
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function tflite__GreedyMemoryPlanner__DoesEntryOverlapInTime_28tflite__GreedyMemoryPlanner__ListEntry_20const__2c_20int_2c_20int_29_20const($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 HEAP32[$4 + 24 >> 2] = $0;
 HEAP32[$4 + 20 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $2;
 HEAP32[$4 + 12 >> 2] = $3;
 HEAP32[$4 + 8 >> 2] = HEAP32[HEAP32[$4 + 24 >> 2] + 12 >> 2] + (HEAP32[HEAP32[$4 + 20 >> 2] + 4 >> 2] << 4);
 label$1: {
  if (HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2] > HEAP32[$4 + 12 >> 2]) {
   HEAP8[$4 + 31 | 0] = 0;
   break label$1;
  }
  if (HEAP32[$4 + 16 >> 2] > HEAP32[HEAP32[$4 + 8 >> 2] + 12 >> 2]) {
   HEAP8[$4 + 31 | 0] = 0;
   break label$1;
  }
  HEAP8[$4 + 31 | 0] = 1;
 }
 return HEAP8[$4 + 31 | 0] & 1;
}

function tf_get($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAP8[$3 + 11 | 0] = $2;
 HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 12 >> 2];
 HEAP32[$0 >> 2] = 0;
 label$1: {
  if (HEAP8[$3 + 11 | 0] & 1) {
   $1 = tflite__MicroInterpreter__input_28unsigned_20long_29(HEAP32[$3 + 4 >> 2] + 400 | 0, 0);
   break label$1;
  }
  $1 = tflite__MicroInterpreter__output_28unsigned_20long_29(HEAP32[$3 + 4 >> 2] + 400 | 0, 0);
 }
 HEAP32[$3 >> 2] = $1;
 if (HEAP32[$3 >> 2]) {
  HEAP32[$0 + 4 >> 2] = HEAP32[HEAP32[$3 >> 2] + 28 >> 2];
  HEAP32[$0 >> 2] = HEAP32[HEAP32[$3 >> 2] + 16 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[HEAP32[$3 >> 2] + 24 >> 2];
 }
 __stack_pointer = $3 + 16 | 0;
}

function tflite__QuantizationParameters_20const__20flatbuffers__Table__GetPointer_tflite__QuantizationParameters_20const___28unsigned_20short_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP16[$2 + 8 >> 1] = flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, HEAPU16[$2 + 10 >> 1]);
 HEAP32[$2 + 4 >> 2] = HEAPU16[$2 + 8 >> 1] + $0;
 label$1: {
  if (HEAPU16[$2 + 8 >> 1]) {
   $0 = HEAP32[$2 + 4 >> 2] + unsigned_20int_20flatbuffers__ReadScalar_unsigned_20int__28void_20const__29(HEAP32[$2 + 4 >> 2]) | 0;
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function jswrap_string_repeat($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  if (HEAP32[$2 + 4 >> 2] < 0) {
   jsExceptionHere(1, 104409, 0);
   HEAP32[$2 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 >> 2] = jsvNewFromEmptyString_8();
  while (1) {
   $0 = HEAP32[$2 + 4 >> 2];
   HEAP32[$2 + 4 >> 2] = $0 - 1;
   $1 = 0;
   if ($0) {
    $1 = jspIsInterrupted() ^ -1;
   }
   if ($1 & 1) {
    jsvAppendStringVarComplete(HEAP32[$2 >> 2], HEAP32[$2 + 8 >> 2]);
    continue;
   }
   break;
  }
  HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function jsvSetFirstChild($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP16[$3 + 10 >> 1] = $1;
 $2 = HEAP32[$3 + 12 >> 2];
 $1 = HEAPU8[$2 + 10 | 0];
 $0 = $1;
 $0 = HEAPU8[$2 + 8 | 0] | HEAPU8[$2 + 9 | 0] << 8 | $0 << 16;
 $4 = $0;
 $0 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
 $5 = $0 & 16777215;
 $0 = HEAPU16[$3 + 10 >> 1] & 4095;
 HEAP8[$2 + 10 | 0] = $1;
 $1 = $5 | $0 << 24;
 $0 = $0 >>> 8 | 0;
 $0 = $0 | $4 & 16777200;
 HEAP8[$2 + 8 | 0] = $0;
 HEAP8[$2 + 9 | 0] = $0 >>> 8;
 HEAP8[$2 + 4 | 0] = $1;
 HEAP8[$2 + 5 | 0] = $1 >>> 8;
 HEAP8[$2 + 6 | 0] = $1 >>> 16;
 HEAP8[$2 + 7 | 0] = $1 >>> 24;
}

function jsiDumpEvent($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 HEAP32[$5 + 8 >> 2] = jsvNewFromStringVar(HEAP32[$5 + 16 >> 2], 3, 2147483647);
 $0 = HEAP32[$5 + 28 >> 2];
 $1 = HEAP32[$5 + 24 >> 2];
 $2 = HEAP32[$5 + 20 >> 2];
 HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 8 >> 2];
 HEAP32[$5 >> 2] = $2;
 cbprintf($0, $1, 127780, $5);
 jsvUnLock(HEAP32[$5 + 8 >> 2]);
 jsiDumpJSON(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 24 >> 2], HEAP32[$5 + 12 >> 2], 0);
 FUNCTION_TABLE[HEAP32[$5 + 28 >> 2]](128774, HEAP32[$5 + 24 >> 2]);
 __stack_pointer = $5 + 32 | 0;
}

function jswrap_parseFloat($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 112 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 100 >> 2] = $0;
 jsvGetString(HEAP32[$1 + 100 >> 2], $1 + 16 | 0, 70);
 label$1: {
  if (!strcmp($1 + 16 | 0, 96419)) {
   HEAPF64[$1 + 104 >> 3] = infinity;
   break label$1;
  }
  if (!strcmp($1 + 16 | 0, 96418)) {
   HEAPF64[$1 + 104 >> 3] = -infinity;
   break label$1;
  }
  HEAPF64[$1 >> 3] = stringToFloatWithRadix($1 + 16 | 0, 0, $1 + 12 | 0);
  if (HEAP32[$1 + 12 >> 2] == ($1 + 85 | 0)) {
   jsExceptionHere(1, 101497, 0);
   HEAPF64[$1 + 104 >> 3] = nan;
   break label$1;
  }
  HEAPF64[$1 + 104 >> 3] = HEAPF64[$1 >> 3];
 }
 __stack_pointer = $1 + 112 | 0;
 return +HEAPF64[$1 + 104 >> 3];
}

function jswrap_graphics_asURL($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 HEAP32[$1 + 20 >> 2] = jswrap_graphics_asBMP_X(HEAP32[$1 + 24 >> 2], 0);
 label$1: {
  if (!HEAP32[$1 + 20 >> 2]) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 16 >> 2] = jswrap_btoa(HEAP32[$1 + 20 >> 2]);
  jsvUnLock(HEAP32[$1 + 20 >> 2]);
  if (!HEAP32[$1 + 16 >> 2]) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 >> 2] = HEAP32[$1 + 16 >> 2];
  HEAP32[$1 + 12 >> 2] = jsvVarPrintf(97054, $1);
  jsvUnLock(HEAP32[$1 + 16 >> 2]);
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 12 >> 2];
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function save_backlog($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = get_input_buffer_size(HEAP32[$1 + 12 >> 2]) & 65535;
 HEAP16[$1 + 6 >> 1] = HEAPU16[HEAP32[$1 + 12 >> 2] + 2 >> 1];
 HEAP16[$1 + 4 >> 1] = HEAP32[$1 + 8 >> 2] - HEAPU16[$1 + 6 >> 1];
 HEAP16[$1 + 2 >> 1] = HEAP32[$1 + 8 >> 2] + HEAPU16[$1 + 4 >> 1];
 memmove(HEAP32[$1 + 12 >> 2] + 15 | 0, HEAP32[$1 + 12 >> 2] + 15 + (HEAP32[$1 + 8 >> 2] - HEAPU16[$1 + 4 >> 1]) | 0, HEAPU16[$1 + 2 >> 1]);
 HEAP16[HEAP32[$1 + 12 >> 2] + 2 >> 1] = 0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP16[$0 >> 1] = HEAPU16[$0 >> 1] - (HEAP32[$1 + 8 >> 2] - HEAPU16[$1 + 4 >> 1] | 0);
 __stack_pointer = $1 + 16 | 0;
}

function std____2__unique_ptr_TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAP32[std____2____compressed_pair_TfLiteFullyConnectedParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2];
 HEAP32[std____2____compressed_pair_TfLiteFullyConnectedParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2] = 0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jswrap_banglejs_kill() {
 jsvUnLock(HEAP32[85832]);
 HEAP32[85832] = 0;
 jsvUnLock(HEAP32[85833]);
 HEAP32[85833] = 0;
 if (HEAPU16[171661]) {
  jswrap_banglejs_beep_callback();
 }
 if (HEAPU8[343320]) {
  jswrap_banglejs_buzz_callback();
 }
 jshPinWatch(24, 0, 0);
 jshSetPinShouldStayWatched(24, 0);
 jshPinWatch(22, 0, 0);
 jshSetPinShouldStayWatched(22, 0);
 jshPinWatch(23, 0, 0);
 jshSetPinShouldStayWatched(23, 0);
 jshSetPinShouldStayWatched(11, 0);
 jshPinWatch(11, 0, 0);
 jshPinWatch(16, 0, 0);
 jshSetPinShouldStayWatched(16, 0);
 jsvUnLock(HEAPU8[189428] | HEAPU8[189429] << 8 | (HEAPU8[189430] << 16 | HEAPU8[189431] << 24));
 HEAP8[189428] = 0;
 HEAP8[189429] = 0;
 HEAP8[189430] = 0;
 HEAP8[189431] = 0;
}

function jsvSetPrevSibling($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP16[$3 + 10 >> 1] = $1;
 $1 = HEAP32[$3 + 12 >> 2];
 $2 = $1;
 $0 = HEAPU8[$2 + 8 | 0] | HEAPU8[$2 + 9 | 0] << 8;
 $4 = $0;
 $2 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
 $5 = $2 & -16773121;
 $0 = $3;
 $0 = HEAPU16[$0 + 10 >> 1];
 $2 = $0 & 4095;
 $3 = $5 | $2 << 12;
 $0 = $2 >>> 20 | 0;
 $0 = $1;
 $2 = HEAPU8[$0 + 10 | 0];
 HEAP8[$0 + 10 | 0] = $2;
 HEAP8[$0 + 8 | 0] = $4;
 HEAP8[$0 + 9 | 0] = $4 >>> 8;
 HEAP8[$0 + 4 | 0] = $3;
 HEAP8[$0 + 5 | 0] = $3 >>> 8;
 HEAP8[$0 + 6 | 0] = $3 >>> 16;
 HEAP8[$0 + 7 | 0] = $3 >>> 24;
}

function jsvCompareInteger($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  label$2: {
   if (!(jsvIsInt(HEAP32[$2 + 8 >> 2]) & 1)) {
    break label$2;
   }
   if (!(jsvIsInt(HEAP32[$2 + 4 >> 2]) & 1)) {
    break label$2;
   }
   HEAP32[$2 + 12 >> 2] = jsvGetInteger(HEAP32[$2 + 8 >> 2]) - jsvGetInteger(HEAP32[$2 + 4 >> 2]);
   break label$1;
  }
  if (jsvIsInt(HEAP32[$2 + 8 >> 2]) & 1) {
   HEAP32[$2 + 12 >> 2] = -1;
   break label$1;
  }
  if (jsvIsInt(HEAP32[$2 + 4 >> 2]) & 1) {
   HEAP32[$2 + 12 >> 2] = 1;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function tflite__MultiplyByQuantizedMultiplier_28int_2c_20int_2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 if (HEAP32[$3 + 20 >> 2] > 0) {
  $0 = HEAP32[$3 + 20 >> 2];
 } else {
  $0 = 0;
 }
 HEAP32[$3 + 16 >> 2] = $0;
 HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 20 >> 2] > 0 ? 0 : 0 - HEAP32[$3 + 20 >> 2] | 0;
 $0 = int_20gemmlowp__RoundingDivideByPOT_int__28int_2c_20int_29(int_20gemmlowp__SaturatingRoundingDoublingHighMul_int__28int_2c_20int_29(Math_imul(HEAP32[$3 + 28 >> 2], 1 << HEAP32[$3 + 16 >> 2]), HEAP32[$3 + 24 >> 2]), HEAP32[$3 + 12 >> 2]);
 __stack_pointer = $3 + 32 | 0;
 return $0;
}

function std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAP32[std____2____compressed_pair_TfLiteDepthwiseConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2];
 HEAP32[std____2____compressed_pair_TfLiteDepthwiseConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2] = 0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jswrap_flash_getPage($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 label$1: {
  if (!(jshFlashGetPage(HEAP32[$1 + 24 >> 2], $1 + 20 | 0, $1 + 16 | 0) & 1)) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvNewObject();
  if (!HEAP32[$1 + 12 >> 2]) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 12 >> 2], 101582, jsvNewFromInteger(HEAP32[$1 + 20 >> 2]));
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 12 >> 2], 103358, jsvNewFromInteger(HEAP32[$1 + 16 >> 2]));
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 12 >> 2];
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function flatbuffers__Vector_float__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_float__20const___28unsigned_20short_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP16[$2 + 8 >> 1] = flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, HEAPU16[$2 + 10 >> 1]);
 HEAP32[$2 + 4 >> 2] = HEAPU16[$2 + 8 >> 1] + $0;
 label$1: {
  if (HEAPU16[$2 + 8 >> 1]) {
   $0 = HEAP32[$2 + 4 >> 2] + unsigned_20int_20flatbuffers__ReadScalar_unsigned_20int__28void_20const__29(HEAP32[$2 + 4 >> 2]) | 0;
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function jswrap_graphics_fillEllipse($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 96 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 88 >> 2] = $0;
 HEAP32[$5 + 84 >> 2] = $1;
 HEAP32[$5 + 80 >> 2] = $2;
 HEAP32[$5 + 76 >> 2] = $3;
 HEAP32[$5 + 72 >> 2] = $4;
 label$1: {
  if (!(graphicsGetFromVar($5, HEAP32[$5 + 88 >> 2]) & 1)) {
   HEAP32[$5 + 92 >> 2] = 0;
   break label$1;
  }
  graphicsFillEllipse($5, HEAP32[$5 + 84 >> 2], HEAP32[$5 + 80 >> 2], HEAP32[$5 + 76 >> 2], HEAP32[$5 + 72 >> 2]);
  graphicsSetVar($5);
  HEAP32[$5 + 92 >> 2] = jsvLockAgain(HEAP32[$5 + 88 >> 2]);
 }
 __stack_pointer = $5 + 96 | 0;
 return HEAP32[$5 + 92 >> 2];
}

function jswrap_graphics_drawEllipse($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 96 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 88 >> 2] = $0;
 HEAP32[$5 + 84 >> 2] = $1;
 HEAP32[$5 + 80 >> 2] = $2;
 HEAP32[$5 + 76 >> 2] = $3;
 HEAP32[$5 + 72 >> 2] = $4;
 label$1: {
  if (!(graphicsGetFromVar($5, HEAP32[$5 + 88 >> 2]) & 1)) {
   HEAP32[$5 + 92 >> 2] = 0;
   break label$1;
  }
  graphicsDrawEllipse($5, HEAP32[$5 + 84 >> 2], HEAP32[$5 + 80 >> 2], HEAP32[$5 + 76 >> 2], HEAP32[$5 + 72 >> 2]);
  graphicsSetVar($5);
  HEAP32[$5 + 92 >> 2] = jsvLockAgain(HEAP32[$5 + 88 >> 2]);
 }
 __stack_pointer = $5 + 96 | 0;
 return HEAP32[$5 + 92 >> 2];
}

function jswrap_espruino_setDST($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1: {
  if (jsvIsUndefined(HEAP32[$1 + 12 >> 2]) & 1) {
   jsvObjectRemoveChild(HEAP32[46748], 97523);
   break label$1;
  }
  label$3: {
   if (jsvIsArray(HEAP32[$1 + 12 >> 2]) & 1) {
    if ((jsvGetLength(HEAP32[$1 + 12 >> 2]) | 0) == 12) {
     break label$3;
    }
   }
   jsExceptionHere(1, 99832, 0);
   break label$1;
  }
  jsvObjectRemoveChild(HEAP32[46748], 96373);
  HEAP32[$1 + 8 >> 2] = jswrap_typedarray_constructor(18, HEAP32[$1 + 12 >> 2], 0, 0);
  jsvObjectSetChildAndUnLock(HEAP32[46748], 97523, HEAP32[$1 + 8 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
}

function _jswrap_object_entries_cb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 28 >> 2];
 HEAP32[$2 + 16 >> 2] = jsvNewEmptyArray();
 if (HEAP32[$2 + 16 >> 2]) {
  jsvArrayPush(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 24 >> 2]);
  HEAP32[$2 + 12 >> 2] = jsvAsArrayIndex(HEAP32[$2 + 24 >> 2]);
  jsvArrayPushAndUnLock(HEAP32[$2 + 16 >> 2], jspGetVarNamedField(HEAP32[HEAP32[$2 + 20 >> 2] + 4 >> 2], HEAP32[$2 + 12 >> 2], 0));
  jsvUnLock(HEAP32[$2 + 12 >> 2]);
  jsvArrayPushAndUnLock(HEAP32[HEAP32[$2 + 20 >> 2] >> 2], HEAP32[$2 + 16 >> 2]);
 }
 __stack_pointer = $2 + 32 | 0;
}

function jspeParseFunctionCallBrackets() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 label$1: {
  if (!(jslMatch(40) & 1)) {
   break label$1;
  }
  while (1) {
   $1 = 0;
   $1 = HEAP32[46755] & 80 ? $1 : HEAP16[HEAP32[38615] + 2 >> 1] != 41;
   if ($1) {
    jsvUnLock(jspeAssignmentExpression());
    if (HEAP16[HEAP32[38615] + 2 >> 1] == 162) {
     jsvUnLock(jspeArrowFunction(0, 0));
    }
    if (HEAP16[HEAP32[38615] + 2 >> 1] != 41) {
     if (!(jslMatch(44) & 1)) {
      break label$1;
     }
    }
    continue;
   }
   break;
  }
  if (!(HEAP32[46755] & 80)) {
   jslMatch(41);
  }
 }
 HEAP8[$0 + 15 | 0] = 0;
 __stack_pointer = $0 + 16 | 0;
 return HEAP8[$0 + 15 | 0] & 1;
}

function flatbuffers__Vector_int__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_int__20const___28unsigned_20short_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP16[$2 + 8 >> 1] = flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, HEAPU16[$2 + 10 >> 1]);
 HEAP32[$2 + 4 >> 2] = HEAPU16[$2 + 8 >> 1] + $0;
 label$1: {
  if (HEAPU16[$2 + 8 >> 1]) {
   $0 = HEAP32[$2 + 4 >> 2] + unsigned_20int_20flatbuffers__ReadScalar_unsigned_20int__28void_20const__29(HEAP32[$2 + 4 >> 2]) | 0;
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 HEAP32[$2 + 4 >> 2] = flatbuffers__Table__GetVTable_28_29_20const(HEAP32[$2 + 12 >> 2]);
 HEAP16[$2 + 2 >> 1] = unsigned_20short_20flatbuffers__ReadScalar_unsigned_20short__28void_20const__29(HEAP32[$2 + 4 >> 2]);
 label$1: {
  if (HEAPU16[$2 + 10 >> 1] < HEAPU16[$2 + 2 >> 1]) {
   $0 = unsigned_20short_20flatbuffers__ReadScalar_unsigned_20short__28void_20const__29(HEAP32[$2 + 4 >> 2] + HEAPU16[$2 + 10 >> 1] | 0) & 65535;
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function jswrap_graphics_getFonts($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 96 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 88 >> 2] = $0;
 label$1: {
  if (!(graphicsGetFromVar($1 + 16 | 0, HEAP32[$1 + 88 >> 2]) & 1)) {
   HEAP32[$1 + 92 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvNewEmptyArray();
  if (!HEAP32[$1 + 12 >> 2]) {
   HEAP32[$1 + 92 >> 2] = 0;
   break label$1;
  }
  jsvArrayPushString(HEAP32[$1 + 12 >> 2], 110503);
  jsvArrayPushString(HEAP32[$1 + 12 >> 2], 110366);
  jswrap_object_keys_or_property_names_cb(HEAP32[$1 + 88 >> 2], 3, 630, HEAP32[$1 + 12 >> 2]);
  HEAP32[$1 + 92 >> 2] = HEAP32[$1 + 12 >> 2];
 }
 __stack_pointer = $1 + 96 | 0;
 return HEAP32[$1 + 92 >> 2];
}

function jswrap_graphics_drawLine($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 96 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 88 >> 2] = $0;
 HEAP32[$5 + 84 >> 2] = $1;
 HEAP32[$5 + 80 >> 2] = $2;
 HEAP32[$5 + 76 >> 2] = $3;
 HEAP32[$5 + 72 >> 2] = $4;
 label$1: {
  if (!(graphicsGetFromVar($5, HEAP32[$5 + 88 >> 2]) & 1)) {
   HEAP32[$5 + 92 >> 2] = 0;
   break label$1;
  }
  graphicsDrawLine($5, HEAP32[$5 + 84 >> 2], HEAP32[$5 + 80 >> 2], HEAP32[$5 + 76 >> 2], HEAP32[$5 + 72 >> 2]);
  graphicsSetVar($5);
  HEAP32[$5 + 92 >> 2] = jsvLockAgain(HEAP32[$5 + 88 >> 2]);
 }
 __stack_pointer = $5 + 96 | 0;
 return HEAP32[$5 + 92 >> 2];
}

function jswrap_banglejs_dbg() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 8 >> 2] = jsvNewObject();
 label$1: {
  if (!HEAP32[$0 + 8 >> 2]) {
   HEAP32[$0 + 12 >> 2] = 0;
   break label$1;
  }
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 8 >> 2], 96717, jsvNewFromInteger(HEAPU8[343338]));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 8 >> 2], 97582, jsvNewFromInteger(HEAPU8[343496]));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 8 >> 2], 97608, jsvNewFromInteger(HEAPU8[343497]));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 8 >> 2], 103013, jsvNewFromInteger(HEAPU16[171605]));
  HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2];
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function st_yield_tag_bit($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  if (can_take_byte(HEAP32[$2 + 4 >> 2])) {
   if (!HEAPU16[HEAP32[$2 + 8 >> 2] + 4 >> 1]) {
    add_tag_bit(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2], 1);
    HEAP32[$2 + 12 >> 2] = 4;
    break label$1;
   }
   add_tag_bit(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2], 0);
   HEAP16[HEAP32[$2 + 8 >> 2] + 8 >> 1] = HEAPU16[HEAP32[$2 + 8 >> 2] + 6 >> 1] - 1;
   HEAP8[HEAP32[$2 + 8 >> 2] + 10 | 0] = 8;
   HEAP32[$2 + 12 >> 2] = 5;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = 3;
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function jspeStatementReturn() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 12 >> 2] = 0;
 jslGetNextToken();
 if (!(HEAP16[HEAP32[38615] + 2 >> 1] == 59 | HEAP16[HEAP32[38615] + 2 >> 1] == 125)) {
  HEAP32[$0 + 12 >> 2] = jsvSkipNameAndUnLock(jspeExpression());
 }
 if ((HEAP32[46755] & 63) == 1) {
  HEAP32[$0 + 8 >> 2] = jspeiFindInScopes(102075);
  label$3: {
   if (HEAP32[$0 + 8 >> 2]) {
    jsvReplaceWith(HEAP32[$0 + 8 >> 2], HEAP32[$0 + 12 >> 2]);
    jsvUnLock(HEAP32[$0 + 8 >> 2]);
    HEAP32[46755] = HEAP32[46755] | 8;
    break label$3;
   }
   jsExceptionHere(2, 111849, 0);
  }
 }
 jsvUnLock(HEAP32[$0 + 12 >> 2]);
 __stack_pointer = $0 + 16 | 0;
 return 0;
}

function flatbuffers__String_20const__20flatbuffers__Table__GetPointer_flatbuffers__String_20const___28unsigned_20short_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP16[$2 + 8 >> 1] = flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, HEAPU16[$2 + 10 >> 1]);
 HEAP32[$2 + 4 >> 2] = HEAPU16[$2 + 8 >> 1] + $0;
 label$1: {
  if (HEAPU16[$2 + 8 >> 1]) {
   $0 = HEAP32[$2 + 4 >> 2] + unsigned_20int_20flatbuffers__ReadScalar_unsigned_20int__28void_20const__29(HEAP32[$2 + 4 >> 2]) | 0;
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function unsigned_20char_20const__20std____2__min_unsigned_20char_2c_20std____2____less_unsigned_20char_2c_20unsigned_20char___28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20std____2____less_unsigned_20char_2c_20unsigned_20char__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 4 >> 2] = $0;
 HEAP32[$2 >> 2] = $1;
 label$1: {
  if (std____2____less_unsigned_20char_2c_20unsigned_20char___operator_28_29_28unsigned_20char_20const__2c_20unsigned_20char_20const__29_20const($2 + 8 | 0, HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2]) & 1) {
   $0 = HEAP32[$2 >> 2];
   break label$1;
  }
  $0 = HEAP32[$2 + 4 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function unsigned_20char_20const__20std____2__max_unsigned_20char_2c_20std____2____less_unsigned_20char_2c_20unsigned_20char___28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20std____2____less_unsigned_20char_2c_20unsigned_20char__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 4 >> 2] = $0;
 HEAP32[$2 >> 2] = $1;
 label$1: {
  if (std____2____less_unsigned_20char_2c_20unsigned_20char___operator_28_29_28unsigned_20char_20const__2c_20unsigned_20char_20const__29_20const($2 + 8 | 0, HEAP32[$2 + 4 >> 2], HEAP32[$2 >> 2]) & 1) {
   $0 = HEAP32[$2 >> 2];
   break label$1;
  }
  $0 = HEAP32[$2 + 4 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function getMonth($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = 0;
 label$1: {
  while (1) {
   if (HEAP32[$1 + 4 >> 2] < 12) {
    if (!(HEAP8[HEAP32[$1 + 8 >> 2]] != HEAP8[HEAP32[38466] + (HEAP32[$1 + 4 >> 2] << 2) | 0] | HEAP8[HEAP32[$1 + 8 >> 2] + 1 | 0] != HEAP8[HEAP32[38466] + ((HEAP32[$1 + 4 >> 2] << 2) + 1 | 0) | 0] | HEAP8[HEAP32[$1 + 8 >> 2] + 2 | 0] != HEAP8[HEAP32[38466] + ((HEAP32[$1 + 4 >> 2] << 2) + 2 | 0) | 0])) {
     HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
     break label$1;
    }
    HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$1 + 12 >> 2] = -1;
 }
 return HEAP32[$1 + 12 >> 2];
}

function jswrap_date_setMonth($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer + -64 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 60 >> 2] = $0;
 HEAP32[$3 + 56 >> 2] = $1;
 HEAP32[$3 + 52 >> 2] = $2;
 getTimeFromDateVar($3 + 24 | 0, HEAP32[$3 + 60 >> 2], 0);
 getCalendarDate($3, HEAP32[$3 + 24 >> 2]);
 HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 56 >> 2];
 if (jsvIsNumeric(HEAP32[$3 + 52 >> 2]) & 1) {
  HEAP32[$3 + 4 >> 2] = jsvGetInteger(HEAP32[$3 + 52 >> 2]);
 }
 HEAP32[$3 + 24 >> 2] = fromCalendarDate($3);
 setCorrectTimeZone($3 + 24 | 0);
 $4 = jswrap_date_setTime(HEAP32[$3 + 60 >> 2], fromTimeInDay($3 + 24 | 0));
 __stack_pointer = $3 - -64 | 0;
 return +$4;
}

function std____2__unique_ptr_TfLiteSoftmaxParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAP32[std____2____compressed_pair_TfLiteSoftmaxParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2];
 HEAP32[std____2____compressed_pair_TfLiteSoftmaxParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2] = 0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function std____2__unique_ptr_TfLiteReshapeParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAP32[std____2____compressed_pair_TfLiteReshapeParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2];
 HEAP32[std____2____compressed_pair_TfLiteReshapeParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2] = 0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jswrap_graphics_moveTo($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 96 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 88 >> 2] = $0;
 HEAP32[$3 + 84 >> 2] = $1;
 HEAP32[$3 + 80 >> 2] = $2;
 label$1: {
  if (!(graphicsGetFromVar($3 + 8 | 0, HEAP32[$3 + 88 >> 2]) & 1)) {
   HEAP32[$3 + 92 >> 2] = 0;
   break label$1;
  }
  $0 = HEAP32[$3 + 84 >> 2];
  HEAP8[$3 + 35 | 0] = $0;
  HEAP8[$3 + 36 | 0] = $0 >>> 8;
  $0 = HEAP32[$3 + 80 >> 2];
  HEAP8[$3 + 37 | 0] = $0;
  HEAP8[$3 + 38 | 0] = $0 >>> 8;
  graphicsSetVar($3 + 8 | 0);
  HEAP32[$3 + 92 >> 2] = jsvLockAgain(HEAP32[$3 + 88 >> 2]);
 }
 __stack_pointer = $3 + 96 | 0;
 return HEAP32[$3 + 92 >> 2];
}

function jswrap_banglejs_setPollInterval($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAPF64[$1 + 24 >> 3] = $0;
 __DOUBLE_BITS_2(HEAPF64[$1 + 24 >> 3]);
 $2 = i64toi32_i32$HIGH_BITS & 2147483647;
 label$1: {
  if (HEAPF64[$1 + 24 >> 3] > 4e3 ? 1 : ($2 | 0) == 2146435072 | $2 >>> 0 > 2146435072 | HEAPF64[$1 + 24 >> 3] < 10) {
   jsExceptionHere(1, 102996, 0);
   break label$1;
  }
  HEAP32[85796] = HEAP32[85796] & -2049;
  $0 = HEAPF64[$1 + 24 >> 3];
  label$5: {
   if ($0 < 4294967296 & $0 >= 0) {
    $2 = ~~$0 >>> 0;
    break label$5;
   }
   $2 = 0;
  }
  jswrap_banglejs_setPollInterval_internal($2 & 65535);
 }
 __stack_pointer = $1 + 32 | 0;
}

function jsvGetConstString($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (jsvIsUndefined(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 106576;
   break label$1;
  }
  if (jsvIsNull(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 102720;
   break label$1;
  }
  label$4: {
   if (!(jsvIsBoolean(HEAP32[$1 + 8 >> 2]) & 1)) {
    break label$4;
   }
   if (jsvIsNameIntBool(HEAP32[$1 + 8 >> 2]) & 1) {
    break label$4;
   }
   HEAP32[$1 + 12 >> 2] = jsvGetBool(HEAP32[$1 + 8 >> 2]) & 1 ? 104396 : 104720;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function tflite___28anonymous_20namespace_29__ConvertActivation_28tflite__ActivationFunctionType_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  label$2: {
   switch (HEAP32[$1 + 8 >> 2]) {
   case 0:
    HEAP32[$1 + 12 >> 2] = 0;
    break label$1;

   case 1:
    HEAP32[$1 + 12 >> 2] = 1;
    break label$1;

   case 2:
    HEAP32[$1 + 12 >> 2] = 2;
    break label$1;

   case 3:
    HEAP32[$1 + 12 >> 2] = 3;
    break label$1;

   case 4:
    HEAP32[$1 + 12 >> 2] = 4;
    break label$1;

   case 5:
    HEAP32[$1 + 12 >> 2] = 5;
    break label$1;

   default:
    break label$2;
   }
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 return HEAP32[$1 + 12 >> 2];
}

function unsigned_20char_20flatbuffers__Table__GetField_unsigned_20char__28unsigned_20short_2c_20unsigned_20char_29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP16[$3 + 10 >> 1] = $1;
 HEAP8[$3 + 9 | 0] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP16[$3 + 6 >> 1] = flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, HEAPU16[$3 + 10 >> 1]);
 label$1: {
  if (HEAPU16[$3 + 6 >> 1]) {
   $0 = unsigned_20char_20flatbuffers__ReadScalar_unsigned_20char__28void_20const__29(HEAPU16[$3 + 6 >> 1] + $0 | 0);
   break label$1;
  }
  $0 = HEAPU8[$3 + 9 | 0];
 }
 __stack_pointer = $3 + 16 | 0;
 return $0 & 255;
}

function jswrap_graphics_getColorX($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 96 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 88 >> 2] = $0;
 HEAP8[$2 + 87 | 0] = $1;
 label$1: {
  if (!(graphicsGetFromVar($2 + 8 | 0, HEAP32[$2 + 88 >> 2]) & 1)) {
   HEAP32[$2 + 92 >> 2] = 0;
   break label$1;
  }
  if (HEAP8[$2 + 87 | 0] & 1) {
   $0 = HEAPU8[$2 + 25 | 0] | HEAPU8[$2 + 26 | 0] << 8 | (HEAPU8[$2 + 27 | 0] << 16 | HEAPU8[$2 + 28 | 0] << 24);
  } else {
   $0 = HEAPU8[$2 + 29 | 0] | HEAPU8[$2 + 30 | 0] << 8 | (HEAPU8[$2 + 31 | 0] << 16 | HEAPU8[$2 + 32 | 0] << 24);
  }
  HEAP32[$2 + 92 >> 2] = $0 & (1 << HEAPU8[$2 + 24 | 0]) - 1;
 }
 __stack_pointer = $2 + 96 | 0;
 return HEAP32[$2 + 92 >> 2];
}

function jsvStringIteratorAppendString($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer + -64 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 60 >> 2] = $0;
 HEAP32[$4 + 56 >> 2] = $1;
 HEAP32[$4 + 52 >> 2] = $2;
 HEAP32[$4 + 48 >> 2] = $3;
 jsvStringIteratorNew($4 + 8 | 0, HEAP32[$4 + 56 >> 2], HEAP32[$4 + 52 >> 2]);
 while (1) {
  $0 = 0;
  if (jsvStringIteratorHasChar_2($4 + 8 | 0) & 1) {
   $0 = HEAP32[$4 + 48 >> 2] > 0;
  }
  if ($0) {
   jsvStringIteratorAppend(HEAP32[$4 + 60 >> 2], jsvStringIteratorGetCharAndNext($4 + 8 | 0) << 24 >> 24);
   HEAP32[$4 + 48 >> 2] = HEAP32[$4 + 48 >> 2] - 1;
   continue;
  }
  break;
 }
 jsvStringIteratorFree_2($4 + 8 | 0);
 __stack_pointer = $4 - -64 | 0;
}

function jsvObjectSetChild($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 label$1: {
  if (!(jsvHasChildren(HEAP32[$3 + 24 >> 2]) & 1)) {
   HEAP32[$3 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 12 >> 2] = jsvFindOrAddChildFromString(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
  if (!HEAP32[$3 + 12 >> 2]) {
   HEAP32[$3 + 28 >> 2] = 0;
   break label$1;
  }
  jsvSetValueOfName(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 16 >> 2]);
  jsvUnLock(HEAP32[$3 + 12 >> 2]);
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 16 >> 2];
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAP32[std____2____compressed_pair_TfLitePoolParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2];
 HEAP32[std____2____compressed_pair_TfLitePoolParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2] = 0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAP32[std____2____compressed_pair_TfLiteConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2];
 HEAP32[std____2____compressed_pair_TfLiteConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2] = 0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jsvObjectSetChildVar($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 label$1: {
  if (!(jsvHasChildren(HEAP32[$3 + 24 >> 2]) & 1)) {
   HEAP32[$3 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 12 >> 2] = jsvFindChildFromVar(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], 1);
  if (!HEAP32[$3 + 12 >> 2]) {
   HEAP32[$3 + 28 >> 2] = 0;
   break label$1;
  }
  jsvSetValueOfName(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 16 >> 2]);
  jsvUnLock(HEAP32[$3 + 12 >> 2]);
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 16 >> 2];
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function jspSetException($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvFindOrAddChildFromString(HEAP32[46748], 97537);
 if (HEAP32[$1 + 8 >> 2]) {
  jsvSetValueOfName(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2]);
  jsvUnLock(HEAP32[$1 + 8 >> 2]);
 }
 HEAP32[46755] = HEAP32[46755] | 32;
 if (HEAP32[38615]) {
  HEAP32[$1 + 4 >> 2] = jsvObjectGetChild(HEAP32[46748], 105500, 28);
  if (HEAP32[$1 + 4 >> 2]) {
   jsvAppendPrintf(HEAP32[$1 + 4 >> 2], 127515, 0);
   jspAppendStackTrace(HEAP32[$1 + 4 >> 2]);
   jsvUnLock(HEAP32[$1 + 4 >> 2]);
   HEAP32[46755] = HEAP32[46755] | 128;
  }
 }
 __stack_pointer = $1 + 16 | 0;
}

function bool_20std____2__operator___TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28std____2__unique_ptr_TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20const__2c_20std__nullptr_t_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = std____2__unique_ptr_TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator_20bool_28_29_20const(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 & 1;
}

function tflite__SimpleMemoryAllocator__SimpleMemoryAllocator_28tflite__SimpleMemoryAllocator_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 HEAP32[$1 >> 2] = 147384;
 $3 = HEAP32[$2 + 8 >> 2];
 $0 = HEAP32[$3 + 4 >> 2];
 $2 = HEAP32[$3 + 8 >> 2];
 $4 = $0;
 $0 = $1;
 HEAP32[$0 + 4 >> 2] = $4;
 HEAP32[$0 + 8 >> 2] = $2;
 $0 = HEAP32[$3 + 24 >> 2];
 $2 = HEAP32[$3 + 20 >> 2];
 HEAP32[$1 + 20 >> 2] = $2;
 HEAP32[$1 + 24 >> 2] = $0;
 $2 = HEAP32[$3 + 16 >> 2];
 $0 = HEAP32[$3 + 12 >> 2];
 $4 = $0;
 $0 = $1;
 HEAP32[$0 + 12 >> 2] = $4;
 HEAP32[$0 + 16 >> 2] = $2;
 return $0;
}

function jsvIteratorFree($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1: {
  label$2: {
   switch (HEAP32[HEAP32[$1 + 12 >> 2] >> 2] - 1 | 0) {
   case 3:
    jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2]);
    jsvObjectIteratorFree_1(HEAP32[$1 + 12 >> 2] + 4 | 0);
    break label$1;

   case 1:
    jsvObjectIteratorFree_1(HEAP32[$1 + 12 >> 2] + 4 | 0);
    break label$1;

   case 0:
    jsvStringIteratorFree_2(HEAP32[$1 + 12 >> 2] + 4 | 0);
    break label$1;

   case 2:
    break label$2;

   default:
    break label$1;
   }
  }
  jsvArrayBufferIteratorFree(HEAP32[$1 + 12 >> 2] + 4 | 0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function jsGfxGetPtr($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (HEAP32[$1 + 8 >> 2] < 200 & HEAP32[$1 + 8 >> 2] >= 40 ? 0 : HEAP8[189504] & 1) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 8 >> 2] = HEAP32[47375] + HEAP32[$1 + 8 >> 2];
  if (HEAP8[189504] & 1) {
   HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] - 40;
  }
  if (HEAP32[$1 + 8 >> 2] < 0) {
   HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 320;
  }
  if (HEAP32[$1 + 8 >> 2] >= 320) {
   HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] - 320;
  }
  HEAP32[$1 + 12 >> 2] = (Math_imul(HEAP32[$1 + 8 >> 2], 240) << 1) + 189520;
 }
 return HEAP32[$1 + 12 >> 2];
}

function tflite___28anonymous_20namespace_29__CalculateActivationRangeQuantizedImpl_28TfLiteFusedActivation_2c_20int_2c_20int_2c_20TfLiteTensor__2c_20int__2c_20int__29__$_0__operator_28_29_28float_29_20const($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $1 = float_20tflite__TfLiteRound_float__28float_29(Math_fround(HEAPF32[$2 + 8 >> 2] / HEAPF32[$0 >> 2]));
 label$1: {
  if (Math_fround(Math_abs($1)) < Math_fround(2147483648)) {
   $0 = ~~$1;
   break label$1;
  }
  $0 = -2147483648;
 }
 __stack_pointer = $2 + 16 | 0;
 return $3 + $0 | 0;
}

function st_flush_bit_buffer($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  if (HEAPU8[HEAP32[$2 + 8 >> 2] + 14 | 0] == 128) {
   HEAP32[$2 + 12 >> 2] = 9;
   break label$1;
  }
  if (can_take_byte(HEAP32[$2 + 4 >> 2])) {
   $3 = HEAPU8[HEAP32[$2 + 8 >> 2] + 13 | 0];
   $4 = HEAP32[HEAP32[$2 + 4 >> 2] >> 2];
   $0 = HEAP32[HEAP32[$2 + 4 >> 2] + 8 >> 2];
   $1 = HEAP32[$0 >> 2];
   HEAP32[$0 >> 2] = $1 + 1;
   HEAP8[$1 + $4 | 0] = $3;
   HEAP32[$2 + 12 >> 2] = 9;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = 8;
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function signed_20char_20flatbuffers__Table__GetField_signed_20char__28unsigned_20short_2c_20signed_20char_29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP16[$3 + 10 >> 1] = $1;
 HEAP8[$3 + 9 | 0] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP16[$3 + 6 >> 1] = flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, HEAPU16[$3 + 10 >> 1]);
 label$1: {
  if (HEAPU16[$3 + 6 >> 1]) {
   $0 = signed_20char_20flatbuffers__ReadScalar_signed_20char__28void_20const__29(HEAPU16[$3 + 6 >> 1] + $0 | 0);
   break label$1;
  }
  $0 = HEAPU8[$3 + 9 | 0];
 }
 __stack_pointer = $3 + 16 | 0;
 return $0 << 24 >> 24;
}

function jsvMathsOpSkipNames($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 HEAP32[$3 + 16 >> 2] = jsvSkipName(HEAP32[$3 + 28 >> 2]);
 HEAP32[$3 + 12 >> 2] = jsvSkipName(HEAP32[$3 + 24 >> 2]);
 HEAP32[$3 + 8 >> 2] = jsvGetValueOf(HEAP32[$3 + 16 >> 2]);
 HEAP32[$3 + 4 >> 2] = jsvGetValueOf(HEAP32[$3 + 12 >> 2]);
 jsvUnLock2(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 12 >> 2]);
 HEAP32[$3 >> 2] = jsvMathsOp(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], HEAP32[$3 + 20 >> 2]);
 jsvUnLock2(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 >> 2];
}

function jsvNewFromLongInteger($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  label$2: {
   $0 = HEAP32[$2 + 4 >> 2];
   if (($0 | 0) < 0 & HEAPU32[$2 >> 2] < 2147483648 | ($0 | 0) < -1) {
    break label$2;
   }
   $0 = HEAP32[$2 + 4 >> 2];
   if (HEAPU32[$2 >> 2] > 2147483647 & ($0 | 0) >= 0 | ($0 | 0) > 0) {
    break label$2;
   }
   HEAP32[$2 + 12 >> 2] = jsvNewFromInteger(HEAP32[$2 >> 2]);
   break label$1;
  }
  $0 = HEAP32[$2 >> 2];
  HEAP32[$2 + 12 >> 2] = jsvNewFromFloat(+($0 >>> 0) + +HEAP32[$2 + 4 >> 2] * 4294967296);
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function gemmlowp__FixedPoint_int_2c_200__20gemmlowp__SelectUsingMask_int_2c_200__28int_2c_20gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 16 >> 2] = $1;
 HEAP32[$3 + 8 >> 2] = $2;
 HEAP32[$3 + 4 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = gemmlowp__FixedPoint_int_2c_200___FromRaw_28int_29(int_20gemmlowp__SelectUsingMask_int__28int_2c_20int_2c_20int_29(HEAP32[$3 + 4 >> 2], HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($3 + 16 | 0) >> 2], HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($3 + 8 | 0) >> 2]));
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 24 >> 2];
}

function bool_20std____2__operator___TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20const__2c_20std__nullptr_t_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator_20bool_28_29_20const(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 & 1;
}

function isIDString($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!(isAlpha(HEAP8[HEAP32[$1 + 8 >> 2]]) & 1)) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  while (1) {
   if (HEAPU8[HEAP32[$1 + 8 >> 2]]) {
    label$5: {
     if (isAlpha(HEAP8[HEAP32[$1 + 8 >> 2]]) & 1) {
      break label$5;
     }
     if (isNumeric(HEAP8[HEAP32[$1 + 8 >> 2]]) & 1) {
      break label$5;
     }
     HEAP8[$1 + 15 | 0] = 0;
     break label$1;
    }
    HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP8[$1 + 15 | 0] = 1;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP8[$1 + 15 | 0] & 1;
}

function unsigned_20int_20flatbuffers__Table__GetField_unsigned_20int__28unsigned_20short_2c_20unsigned_20int_29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP16[$3 + 10 >> 1] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP16[$3 + 2 >> 1] = flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, HEAPU16[$3 + 10 >> 1]);
 label$1: {
  if (HEAPU16[$3 + 2 >> 1]) {
   $0 = unsigned_20int_20flatbuffers__ReadScalar_unsigned_20int__28void_20const__29(HEAPU16[$3 + 2 >> 1] + $0 | 0);
   break label$1;
  }
  $0 = HEAP32[$3 + 4 >> 2];
 }
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function jsvNewArray($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = jsvNewEmptyArray();
 label$1: {
  if (!HEAP32[$2 + 16 >> 2]) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = 0;
  while (1) {
   if (HEAP32[$2 + 12 >> 2] < HEAP32[$2 + 20 >> 2]) {
    jsvArrayPush(HEAP32[$2 + 16 >> 2], HEAP32[HEAP32[$2 + 24 >> 2] + (HEAP32[$2 + 12 >> 2] << 2) >> 2]);
    HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 16 >> 2];
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jswrap_onewire_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 HEAP8[$3 + 6 | 0] = onewire_getpin(HEAP32[$3 + 12 >> 2]);
 label$1: {
  if (!(jshIsPinValid(HEAPU8[$3 + 6 | 0]) & 1)) {
   break label$1;
  }
  jsvIterateCallback(HEAP32[$3 + 8 >> 2], 617, $3 + 6 | 0);
  if (HEAP8[$3 + 7 | 0] & 1) {
   jshPinSetValue(HEAPU8[$3 + 6 | 0], 1);
   jshPinSetState(HEAPU8[$3 + 6 | 0], 1);
   break label$1;
  }
  jshPinSetState(HEAPU8[$3 + 6 | 0], 4);
  jshPinSetValue(HEAPU8[$3 + 6 | 0], 1);
 }
 __stack_pointer = $3 + 16 | 0;
}

function jspeAddNamedFunctionParameter($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 96 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 92 >> 2] = $0;
 HEAP32[$2 + 88 >> 2] = $1;
 if (!HEAP32[$2 + 92 >> 2]) {
  HEAP32[$2 + 92 >> 2] = jsvNewWithFlags(7);
 }
 if (HEAP32[$2 + 88 >> 2]) {
  HEAP8[$2 + 16 | 0] = 255;
  HEAP32[$2 + 12 >> 2] = jsvGetString(HEAP32[$2 + 88 >> 2], $2 + 17 | 0, 64);
  HEAP8[(HEAP32[$2 + 12 >> 2] + $2 | 0) + 17 | 0] = 0;
  HEAP32[$2 + 8 >> 2] = jsvAddNamedChild(HEAP32[$2 + 92 >> 2], 0, $2 + 16 | 0);
  HEAP32[$2 + 8 >> 2] = jsvMakeFunctionParameter(HEAP32[$2 + 8 >> 2]);
  jsvUnLock(HEAP32[$2 + 8 >> 2]);
 }
 __stack_pointer = $2 + 96 | 0;
 return HEAP32[$2 + 92 >> 2];
}

function graphicsSetVarInitial($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = jsvFindOrAddChildFromString(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 96684);
 HEAP32[$1 + 4 >> 2] = jsvSkipName(HEAP32[$1 + 8 >> 2]);
 if (!HEAP32[$1 + 4 >> 2]) {
  HEAP32[$1 + 4 >> 2] = jsvNewStringOfLength(44, 0);
  jsvSetValueOfName(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 4 >> 2]);
 }
 jsvUnLock(HEAP32[$1 + 8 >> 2]);
 jsvSetString(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 12 >> 2] + 4 | 0, 44);
 jsvUnLock(HEAP32[$1 + 4 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function vfGetPolyPtr($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 HEAP8[$2 + 27 | 0] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1: {
  if (HEAPU8[$2 + 27 | 0] >= 201) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[HEAP32[$2 + 20 >> 2] >> 2] = HEAPU8[HEAPU8[$2 + 27 | 0] + 142368 | 0];
  HEAP32[$2 + 16 >> 2] = 142576;
  HEAP8[$2 + 15 | 0] = 0;
  while (1) {
   if (HEAPU8[$2 + 15 | 0] < HEAPU8[$2 + 27 | 0]) {
    HEAP32[$2 + 16 >> 2] = HEAPU8[HEAPU8[$2 + 15 | 0] + 142368 | 0] + HEAP32[$2 + 16 >> 2];
    HEAP8[$2 + 15 | 0] = HEAPU8[$2 + 15 | 0] + 1;
    continue;
   }
   break;
  }
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 16 >> 2];
 }
 return HEAP32[$2 + 28 >> 2];
}

function jsvSetNextSibling($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 $1 = $0;
 $3 = HEAPU8[$1 + 8 | 0] | HEAPU8[$1 + 9 | 0] << 8;
 $4 = $3;
 $1 = $2;
 $2 = HEAPU16[$1 + 10 >> 1];
 $1 = $2 & 4095;
 $3 = $0;
 $2 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
 $1 = $1 | $2 & -4096;
 $2 = $0;
 $3 = HEAPU8[$2 + 10 | 0];
 HEAP8[$2 + 10 | 0] = $3;
 HEAP8[$2 + 8 | 0] = $4;
 HEAP8[$2 + 9 | 0] = $4 >>> 8;
 HEAP8[$2 + 4 | 0] = $1;
 HEAP8[$2 + 5 | 0] = $1 >>> 8;
 HEAP8[$2 + 6 | 0] = $1 >>> 16;
 HEAP8[$2 + 7 | 0] = $1 >>> 24;
}

function heatshrink_decoder_finish($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP32[$1 + 12 >> 2] = -1;
   break label$1;
  }
  label$3: {
   switch (HEAPU8[HEAP32[$1 + 8 >> 2] + 10 | 0]) {
   case 0:
    HEAP32[$1 + 12 >> 2] = !!HEAPU16[HEAP32[$1 + 8 >> 2] >> 1];
    break label$1;

   case 2:
   case 3:
   case 4:
   case 5:
    HEAP32[$1 + 12 >> 2] = !!HEAPU16[HEAP32[$1 + 8 >> 2] >> 1];
    break label$1;

   case 1:
    HEAP32[$1 + 12 >> 2] = !!HEAPU16[HEAP32[$1 + 8 >> 2] >> 1];
    break label$1;

   default:
    break label$3;
   }
  }
  HEAP32[$1 + 12 >> 2] = 1;
 }
 return HEAP32[$1 + 12 >> 2];
}

function jsiChangeToHistory($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 HEAP32[$1 + 8 >> 2] = jsiGetHistoryLine(HEAP8[$1 + 15 | 0] & 1);
 label$1: {
  if (HEAP32[$1 + 8 >> 2]) {
   jsiReplaceInputLine(HEAP32[$1 + 8 >> 2]);
   jsvUnLock(HEAP32[$1 + 8 >> 2]);
   HEAP8[187065] = 1;
   break label$1;
  }
  if (!(HEAP8[$1 + 15 | 0] & 1)) {
   if (jsiShowInputLine() & 1) {
    jsiMoveCursorChar(HEAP32[46763], HEAP32[46765], 0);
    jsiConsoleEraseAfterCursor();
   }
   jsiInputLineCursorMoved();
   jsvUnLock(HEAP32[46763]);
   HEAP32[46763] = jsvNewFromEmptyString_5();
   HEAP32[46765] = 0;
  }
 }
 __stack_pointer = $1 + 16 | 0;
}

function tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 label$1: {
  if (!(HEAP32[HEAP32[$2 + 24 >> 2] + 4 >> 2] ? HEAP32[$2 + 24 >> 2] : 0)) {
   tflite__RuntimeShape__RuntimeShape_28_29($0);
   break label$1;
  }
  HEAP32[$2 + 20 >> 2] = HEAP32[HEAP32[$2 + 24 >> 2] + 4 >> 2];
  HEAP32[$2 + 16 >> 2] = HEAP32[HEAP32[$2 + 20 >> 2] >> 2];
  HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 20 >> 2] + 4;
  tflite__RuntimeShape__RuntimeShape_28int_2c_20int_20const__29($0, HEAP32[$2 + 16 >> 2], HEAP32[$2 + 12 >> 2]);
 }
 __stack_pointer = $2 + 32 | 0;
}

function signed_20char_20const__20std____2__min_signed_20char_2c_20std____2____less_signed_20char_2c_20signed_20char___28signed_20char_20const__2c_20signed_20char_20const__2c_20std____2____less_signed_20char_2c_20signed_20char__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 4 >> 2] = $0;
 HEAP32[$2 >> 2] = $1;
 label$1: {
  if (std____2____less_signed_20char_2c_20signed_20char___operator_28_29_28signed_20char_20const__2c_20signed_20char_20const__29_20const($2 + 8 | 0, HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2]) & 1) {
   $0 = HEAP32[$2 >> 2];
   break label$1;
  }
  $0 = HEAP32[$2 + 4 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function signed_20char_20const__20std____2__max_signed_20char_2c_20std____2____less_signed_20char_2c_20signed_20char___28signed_20char_20const__2c_20signed_20char_20const__2c_20std____2____less_signed_20char_2c_20signed_20char__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 4 >> 2] = $0;
 HEAP32[$2 >> 2] = $1;
 label$1: {
  if (std____2____less_signed_20char_2c_20signed_20char___operator_28_29_28signed_20char_20const__2c_20signed_20char_20const__29_20const($2 + 8 | 0, HEAP32[$2 + 4 >> 2], HEAP32[$2 >> 2]) & 1) {
   $0 = HEAP32[$2 >> 2];
   break label$1;
  }
  $0 = HEAP32[$2 + 4 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function void_20const__20flatbuffers__Table__GetPointer_void_20const___28unsigned_20short_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP16[$2 + 8 >> 1] = flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, HEAPU16[$2 + 10 >> 1]);
 HEAP32[$2 + 4 >> 2] = HEAPU16[$2 + 8 >> 1] + $0;
 label$1: {
  if (HEAPU16[$2 + 8 >> 1]) {
   $0 = HEAP32[$2 + 4 >> 2] + unsigned_20int_20flatbuffers__ReadScalar_unsigned_20int__28void_20const__29(HEAP32[$2 + 4 >> 2]) | 0;
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function st_backref_count_lsb($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP8[$1 + 7 | 0] = 6;
 $2 = HEAP32[$1 + 8 >> 2];
 if (HEAPU8[$1 + 7 | 0] < 8) {
  $0 = HEAPU8[$1 + 7 | 0];
 } else {
  $0 = 8;
 }
 HEAP16[$1 + 4 >> 1] = get_bits($2, $0);
 label$3: {
  if (HEAPU16[$1 + 4 >> 1] == 65535) {
   HEAP32[$1 + 12 >> 2] = 5;
   break label$3;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP16[$0 + 4 >> 1] = HEAPU16[$1 + 4 >> 1] | HEAPU16[$0 + 4 >> 1];
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP16[$0 + 4 >> 1] = HEAPU16[$0 + 4 >> 1] + 1;
  HEAP32[$1 + 12 >> 2] = 6;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvNewNativeFunction($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP16[$2 + 6 >> 1] = $1;
 HEAP32[$2 >> 2] = jsvNewWithFlags(8);
 label$1: {
  if (!HEAP32[$2 >> 2]) {
   HEAP32[$2 + 12 >> 2] = 0;
   break label$1;
  }
  $0 = HEAP32[$2 >> 2];
  $1 = HEAP32[$2 + 8 >> 2];
  HEAP8[$0 | 0] = $1;
  HEAP8[$0 + 1 | 0] = $1 >>> 8;
  HEAP8[$0 + 2 | 0] = $1 >>> 16;
  HEAP8[$0 + 3 | 0] = $1 >>> 24;
  $0 = HEAP32[$2 >> 2];
  $1 = HEAPU16[$2 + 6 >> 1];
  HEAP8[$0 + 4 | 0] = $1;
  HEAP8[$0 + 5 | 0] = $1 >>> 8;
  HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function jsvGetFirstChildSigned($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[$1 + 8 >> 2];
 label$1: {
  if (((HEAPU8[$0 + 7 | 0] | HEAPU8[$0 + 8 | 0] << 8 | (HEAPU8[$0 + 9 | 0] << 16 | HEAPU8[$0 + 10 | 0] << 24)) & 4095) >>> 0 > 2047) {
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP16[$1 + 14 >> 1] = ((HEAPU8[$0 + 7 | 0] | HEAPU8[$0 + 8 | 0] << 8 | (HEAPU8[$0 + 9 | 0] << 16 | HEAPU8[$0 + 10 | 0] << 24)) & 4095) - 4096;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP16[$1 + 14 >> 1] = (HEAPU8[$0 + 7 | 0] | HEAPU8[$0 + 8 | 0] << 8 | (HEAPU8[$0 + 9 | 0] << 16 | HEAPU8[$0 + 10 | 0] << 24)) & 4095;
 }
 return HEAP16[$1 + 14 >> 1];
}

function jsiExecuteEventCallbackName($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP8[$4 + 15 | 0] = 0;
 if (jsvHasChildren(HEAP32[$4 + 28 >> 2]) & 1) {
  HEAP32[$4 + 8 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 24 >> 2]);
  if (HEAP32[$4 + 8 >> 2]) {
   jsiExecuteEventCallback(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]);
   HEAP8[$4 + 15 | 0] = 1;
  }
  jsvUnLock(HEAP32[$4 + 8 >> 2]);
 }
 __stack_pointer = $4 + 32 | 0;
 return HEAP8[$4 + 15 | 0] & 1;
}

function jsvIsInt($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63;
  $0 = 1;
  label$3: {
   if (HEAP8[$1 + 7 | 0] == 10) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 13) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 15) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 16) {
    break label$3;
   }
   $0 = HEAP8[$1 + 7 | 0] == 17;
  }
  HEAP8[$1 + 15 | 0] = $0;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function bool_20std____2__operator___TfLiteSoftmaxParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28std____2__unique_ptr_TfLiteSoftmaxParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20const__2c_20std__nullptr_t_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = std____2__unique_ptr_TfLiteSoftmaxParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator_20bool_28_29_20const(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 & 1;
}

function bool_20std____2__operator___TfLiteReshapeParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28std____2__unique_ptr_TfLiteReshapeParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20const__2c_20std__nullptr_t_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = std____2__unique_ptr_TfLiteReshapeParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator_20bool_28_29_20const(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 & 1;
}

function espruino_snprintf_va($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 >> 2] = HEAP32[$4 + 28 >> 2];
 HEAP32[$4 + 4 >> 2] = 0;
 HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 24 >> 2];
 vcbprintf(8, $4, HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]);
 label$1: {
  if (HEAPU32[$4 + 4 >> 2] < HEAPU32[$4 + 8 >> 2]) {
   HEAP8[HEAP32[$4 >> 2] + HEAP32[$4 + 4 >> 2] | 0] = 0;
   break label$1;
  }
  HEAP8[HEAP32[$4 >> 2] + (HEAP32[$4 + 8 >> 2] - 1 | 0) | 0] = 0;
 }
 __stack_pointer = $4 + 32 | 0;
 return HEAP32[$4 + 4 >> 2];
}

function tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 label$1: {
  if ((tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2]) | 0) != (tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]) | 0)) {
   break label$1;
  }
 }
 $0 = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2]);
 __stack_pointer = $4 + 16 | 0;
 return $0;
}

function jshFlashErasePage($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 4144 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 4140 >> 2] = $0;
 if (jshFlashGetPage(HEAP32[$1 + 4140 >> 2], $1 + 4136 | 0, $1 + 4132 | 0) & 1) {
  memset($1 + 32 | 0, 255, 4096);
  HEAP32[$1 + 28 >> 2] = 154336;
  $0 = HEAP32[$1 + 28 >> 2];
  HEAP8[$1 + 24 | 0] = 105;
  HEAP8[$1 + 25 | 0] = 105;
  HEAP8[$1 + 26 | 0] = 105;
  HEAP8[$1 + 27 | 0] = 0;
  $2 = HEAP32[$1 + 4136 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 4132 >> 2];
  HEAP32[$1 + 4 >> 2] = $1 + 32;
  HEAP32[$1 >> 2] = $2 + -134217728;
  emscripten_asm_const_int($0 | 0, $1 + 24 | 0, $1 | 0) | 0;
 }
 __stack_pointer = $1 + 4144 | 0;
}

function jsvSetLastChild($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP16[$3 + 10 >> 1] = $1;
 $2 = HEAP32[$3 + 12 >> 2];
 $0 = $2;
 $4 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
 $0 = HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8;
 $1 = $0 & 4095;
 $0 = $3;
 $3 = HEAPU16[$0 + 10 >> 1];
 $0 = $3;
 $0 = $0 << 12;
 $0 = $1 | $0;
 $1 = $0;
 HEAP8[$2 + 10 | 0] = $3 >>> 4;
 $0 = $4;
 HEAP8[$2 + 8 | 0] = $1;
 HEAP8[$2 + 9 | 0] = $1 >>> 8;
 HEAP8[$2 + 4 | 0] = $0;
 HEAP8[$2 + 5 | 0] = $0 >>> 8;
 HEAP8[$2 + 6 | 0] = $0 >>> 16;
 HEAP8[$2 + 7 | 0] = $0 >>> 24;
}

function jslReservedWordAsString($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 12 >> 2] - 138;
 while (1) {
  $0 = 0;
  $0 = HEAP32[$1 + 4 >> 2] > 0 ? HEAPU32[$1 + 8 >> 2] < 312 : $0;
  if ($0) {
   while (1) {
    $0 = 0;
    $0 = HEAP8[HEAP32[$1 + 8 >> 2] + 129600 | 0] ? HEAPU32[$1 + 8 >> 2] < 312 : $0;
    if ($0) {
     HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
   HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] - 1;
   continue;
  }
  break;
 }
 return HEAP32[$1 + 8 >> 2] + 129600 | 0;
}

function i2c_get_address($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 HEAP8[HEAP32[$2 + 4 >> 2]] = 1;
 label$1: {
  if (jsvIsObject(HEAP32[$2 + 8 >> 2]) & 1) {
   HEAP32[$2 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 8 >> 2], 101847);
   if (HEAP32[$2 >> 2]) {
    $0 = jsvGetBoolAndUnLock(HEAP32[$2 >> 2]);
    HEAP8[HEAP32[$2 + 4 >> 2]] = $0 & 1;
   }
   HEAP32[$2 + 12 >> 2] = jsvObjectGetIntegerChild(HEAP32[$2 + 8 >> 2], 100003);
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = jsvGetInteger(HEAP32[$2 + 8 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function tflite__SimpleMemoryAllocator__SimpleMemoryAllocator_28tflite__ErrorReporter__2c_20unsigned_20char__2c_20unsigned_20long_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 tflite__SimpleMemoryAllocator__SimpleMemoryAllocator_28tflite__ErrorReporter__2c_20unsigned_20char__2c_20unsigned_20char__29($0, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 + 4 >> 2] + HEAP32[$4 >> 2] | 0);
 __stack_pointer = $4 + 16 | 0;
 return $0 | 0;
}

function jslGetTokenValueAsVar() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 label$1: {
  if (HEAP32[HEAP32[38615] + 76 >> 2]) {
   HEAP32[$0 + 12 >> 2] = jsvLockAgain(HEAP32[HEAP32[38615] + 76 >> 2]);
   break label$1;
  }
  if (!(HEAP16[HEAP32[38615] + 2 >> 1] < 163 | HEAP16[HEAP32[38615] + 2 >> 1] > 198)) {
   HEAP32[$0 + 12 >> 2] = jsvNewFromString(jslReservedWordAsString(HEAP16[HEAP32[38615] + 2 >> 1]));
   break label$1;
  }
  HEAP8[HEAPU8[HEAP32[38615] + 80 | 0] + (HEAP32[38615] + 12 | 0) | 0] = 0;
  HEAP32[$0 + 12 >> 2] = jsvNewFromString(HEAP32[38615] + 12 | 0);
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function jswrap_string_concat($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1: {
  if (!(jsvIsString(HEAP32[$2 + 24 >> 2]) & 1)) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 16 >> 2] = jsvNewFromStringVarComplete(HEAP32[$2 + 24 >> 2]);
  HEAP32[$2 + 12 >> 2] = jsvArrayJoin(HEAP32[$2 + 20 >> 2], 0, 0);
  jsvAppendStringVarComplete(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 12 >> 2]);
  jsvUnLock(HEAP32[$2 + 12 >> 2]);
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 16 >> 2];
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jswrap_pin_writeAtTime($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP8[$3 + 27 | 0] = $1;
 HEAPF64[$3 + 16 >> 3] = $2;
 HEAP8[$3 + 15 | 0] = jshGetPinFromVar(HEAP32[$3 + 28 >> 2]);
 $0 = jshGetTimeFromMilliseconds(HEAPF64[$3 + 16 >> 3] * 1e3);
 $4 = i64toi32_i32$HIGH_BITS;
 $1 = jshGetSystemTime();
 HEAP32[$3 >> 2] = $0 - $1;
 HEAP32[$3 + 4 >> 2] = $4 - (i64toi32_i32$HIGH_BITS + ($0 >>> 0 < $1 >>> 0) | 0);
 jstPinOutputAtTime(HEAP32[$3 >> 2], HEAP32[$3 + 4 >> 2], 0, $3 + 15 | 0, 1, HEAP8[$3 + 27 | 0] & 1);
 __stack_pointer = $3 + 32 | 0;
}

function jsvMoreFreeVariablesThan($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  HEAP16[$1 + 6 >> 1] = HEAPU16[77234];
  while (1) {
   if (HEAPU16[$1 + 6 >> 1]) {
    $0 = HEAP32[$1 + 8 >> 2];
    HEAP32[$1 + 8 >> 2] = $0 - 1;
    if ($0) {
     HEAP16[$1 + 6 >> 1] = jsvGetNextSibling(jsvGetAddressOf(HEAPU16[$1 + 6 >> 1]));
     continue;
    } else {
     HEAP8[$1 + 15 | 0] = 1;
     break label$1;
    }
   }
   break;
  }
  HEAP8[$1 + 15 | 0] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP8[$1 + 15 | 0] & 1;
}

function jshFlashWrite($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 if (HEAPU32[$3 + 24 >> 2] >= 134217728) {
  HEAP32[$3 + 16 >> 2] = 154394;
  $0 = HEAP32[$3 + 16 >> 2];
  HEAP8[$3 + 12 | 0] = 105;
  HEAP8[$3 + 13 | 0] = 105;
  HEAP8[$3 + 14 | 0] = 105;
  HEAP8[$3 + 15 | 0] = 0;
  $1 = HEAP32[$3 + 24 >> 2];
  $2 = HEAP32[$3 + 28 >> 2];
  HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 20 >> 2];
  HEAP32[$3 + 4 >> 2] = $2;
  HEAP32[$3 >> 2] = $1 + -134217728;
  emscripten_asm_const_int($0 | 0, $3 + 12 | 0, $3 | 0) | 0;
 }
 __stack_pointer = $3 + 32 | 0;
}

function bool_20std____2__operator___TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20const__2c_20std__nullptr_t_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator_20bool_28_29_20const(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 & 1;
}

function bool_20std____2__operator___TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20const__2c_20std__nullptr_t_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator_20bool_28_29_20const(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 & 1;
}

function jsvArrayBufferIteratorGetFloatValue($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 20 >> 2] = $0;
 label$1: {
  if (!HEAPU8[HEAP32[$1 + 20 >> 2] + 36 | 0]) {
   HEAPF64[$1 + 24 >> 3] = 0;
   break label$1;
  }
  jsvArrayBufferIteratorGetValueData(HEAP32[$1 + 20 >> 2], $1 + 12 | 0);
  if (HEAPU8[HEAP32[$1 + 20 >> 2] + 36 | 0] & 32) {
   HEAPF64[$1 + 24 >> 3] = jsvArrayBufferIteratorDataToFloat(HEAP32[$1 + 20 >> 2], $1 + 12 | 0);
   break label$1;
  }
  HEAPF64[$1 + 24 >> 3] = jsvArrayBufferIteratorDataToInt(HEAP32[$1 + 20 >> 2], $1 + 12 | 0) | 0;
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAPF64[$1 + 24 >> 3];
}

function int_sqrt32($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 HEAP32[$1 + 28 >> 2] = $0;
 HEAP16[$1 + 26 >> 1] = 0;
 HEAP16[$1 + 24 >> 1] = 32768;
 HEAP32[$1 + 20 >> 2] = 0;
 while (1) {
  if (HEAP32[$1 + 20 >> 2] < 16) {
   HEAP16[$1 + 18 >> 1] = HEAPU16[$1 + 26 >> 1] | HEAPU16[$1 + 24 >> 1];
   HEAP32[$1 + 12 >> 2] = Math_imul(HEAPU16[$1 + 18 >> 1], HEAPU16[$1 + 18 >> 1]);
   if (HEAPU32[$1 + 28 >> 2] >= HEAPU32[$1 + 12 >> 2]) {
    HEAP16[$1 + 26 >> 1] = HEAPU16[$1 + 18 >> 1];
   }
   HEAP16[$1 + 24 >> 1] = HEAPU16[$1 + 24 >> 1] >>> 1;
   HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 20 >> 2] + 1;
   continue;
  }
  break;
 }
 return HEAPU16[$1 + 26 >> 1];
}

function jsvHasSingleChild($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63;
  $0 = 1;
  if (HEAP8[$1 + 7 | 0] != 4) {
   $0 = 0;
   label$4: {
    if (HEAP8[$1 + 7 | 0] < 14) {
     break label$4;
    }
    $0 = 0;
    if (HEAP8[$1 + 7 | 0] > 27) {
     break label$4;
    }
    $2 = HEAP8[$1 + 7 | 0] >= 16 ? HEAP8[$1 + 7 | 0] <= 22 : $2;
    $0 = $2 ^ -1;
   }
  }
  HEAP8[$1 + 15 | 0] = $0 & 1;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function tflite__MicroAllocator__Create_28tflite__SimpleMemoryAllocator__2c_20tflite__ErrorReporter__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 label$1: {
  if (!HEAP32[$2 + 12 >> 2]) {
   break label$1;
  }
 }
 label$2: {
  if (!HEAP32[$2 + 8 >> 2]) {
   break label$2;
  }
 }
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, 24, 4);
 $0 = HEAP32[$2 + 4 >> 2];
 FUNCTION_TABLE[650]($0, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]) | 0;
 HEAP32[$2 >> 2] = $0;
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 >> 2];
}

function jsserialCheckForCharacter($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAPU8[HEAP32[$1 + 12 >> 2] + 88 | 0] >= HEAPU8[HEAP32[$1 + 12 >> 2] + 89 | 0]) {
  HEAP32[$1 + 8 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 84 >> 2] >>> 1 & 255;
  if (HEAPU8[HEAP32[$1 + 12 >> 2] + 64 | 0] < 64) {
   $3 = HEAP32[$1 + 8 >> 2];
   $0 = HEAP32[$1 + 12 >> 2];
   $2 = HEAPU8[$0 + 64 | 0];
   HEAP8[$0 + 64 | 0] = $2 + 1;
   HEAP8[$0 + $2 | 0] = $3;
   jshHasEvents();
  }
  HEAP8[HEAP32[$1 + 12 >> 2] + 88 | 0] = 0;
  HEAP32[HEAP32[$1 + 12 >> 2] + 84 >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
}

function jshPopIOEvent($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (HEAPU8[187124] == HEAPU8[187125]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  $2 = Math_imul(HEAPU8[187125], 5) + 187712 | 0;
  $3 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
  HEAP8[$0 | 0] = $3;
  HEAP8[$0 + 1 | 0] = $3 >>> 8;
  HEAP8[$0 + 2 | 0] = $3 >>> 16;
  HEAP8[$0 + 3 | 0] = $3 >>> 24;
  HEAP8[$0 + 4 | 0] = HEAPU8[$2 + 4 | 0];
  HEAP8[187125] = HEAPU8[187125] + 1;
  HEAP8[$1 + 15 | 0] = 1;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function jsvAsName($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  if (!(jsvGetRefs(HEAP32[$1 + 8 >> 2]) & 65535)) {
   if (!(jsvIsName(HEAP32[$1 + 8 >> 2]) & 1)) {
    HEAP32[$1 + 12 >> 2] = jsvMakeIntoVariableName(jsvLockAgain(HEAP32[$1 + 8 >> 2]), 0);
    break label$1;
   }
   HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[$1 + 8 >> 2]);
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvMakeIntoVariableName(jsvCopy(HEAP32[$1 + 8 >> 2], 0), 0);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function gemmlowp__FixedPoint_int_2c_202_20__202__20gemmlowp__operator__int_2c_202_2c_202__28gemmlowp__FixedPoint_int_2c_202__2c_20gemmlowp__FixedPoint_int_2c_202__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = int_20gemmlowp__SaturatingRoundingDoublingHighMul_int__28int_2c_20int_29(HEAP32[gemmlowp__FixedPoint_int_2c_202___raw_28_29($2 + 16 | 0) >> 2], HEAP32[gemmlowp__FixedPoint_int_2c_202___raw_28_29($2 + 8 | 0) >> 2]);
 HEAP32[gemmlowp__FixedPoint_int_2c_204___raw_28_29($2 + 24 | 0) >> 2] = $0;
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 24 >> 2];
}

function gemmlowp__FixedPoint_int_2c_200_20__202__20gemmlowp__operator__int_2c_200_2c_202__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_202__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = int_20gemmlowp__SaturatingRoundingDoublingHighMul_int__28int_2c_20int_29(HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($2 + 16 | 0) >> 2], HEAP32[gemmlowp__FixedPoint_int_2c_202___raw_28_29($2 + 8 | 0) >> 2]);
 HEAP32[gemmlowp__FixedPoint_int_2c_202___raw_28_29($2 + 24 | 0) >> 2] = $0;
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 24 >> 2];
}

function gemmlowp__FixedPoint_int_2c_200_20__200__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = int_20gemmlowp__SaturatingRoundingDoublingHighMul_int__28int_2c_20int_29(HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($2 + 16 | 0) >> 2], HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($2 + 8 | 0) >> 2]);
 HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($2 + 24 | 0) >> 2] = $0;
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 24 >> 2];
}

function jswrap_graphics_drawCircleAA($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 96 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 88 >> 2] = $0;
 HEAP32[$4 + 84 >> 2] = $1;
 HEAP32[$4 + 80 >> 2] = $2;
 HEAP32[$4 + 76 >> 2] = $3;
 label$1: {
  if (!(graphicsGetFromVar($4, HEAP32[$4 + 88 >> 2]) & 1)) {
   HEAP32[$4 + 92 >> 2] = 0;
   break label$1;
  }
  graphicsDrawCircleAA($4, HEAP32[$4 + 84 >> 2], HEAP32[$4 + 80 >> 2], HEAP32[$4 + 76 >> 2]);
  graphicsSetVar($4);
  HEAP32[$4 + 92 >> 2] = jsvLockAgain(HEAP32[$4 + 88 >> 2]);
 }
 __stack_pointer = $4 + 96 | 0;
 return HEAP32[$4 + 92 >> 2];
}

function jswrap_array_shift($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 HEAP32[$1 + 24 >> 2] = jsvNewFromInteger(1);
 HEAP32[$1 + 20 >> 2] = jsvNewEmptyArray();
 HEAP32[$1 + 16 >> 2] = jswrap_array_splice(HEAP32[$1 + 28 >> 2], 0, HEAP32[$1 + 24 >> 2], HEAP32[$1 + 20 >> 2]);
 jsvUnLock2(HEAP32[$1 + 20 >> 2], HEAP32[$1 + 24 >> 2]);
 HEAP32[$1 + 12 >> 2] = 0;
 if (jsvIsArray(HEAP32[$1 + 16 >> 2]) & 1) {
  HEAP32[$1 + 12 >> 2] = jsvSkipNameAndUnLock(jsvArrayPop(HEAP32[$1 + 16 >> 2]));
 }
 jsvUnLock(HEAP32[$1 + 16 >> 2]);
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function heatshrink_decoder_reset($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = 256;
 HEAP32[$1 + 4 >> 2] = 32;
 memset(HEAP32[$1 + 12 >> 2] + 13 | 0, 0, HEAP32[$1 + 8 >> 2] + HEAP32[$1 + 4 >> 2] | 0);
 HEAP8[HEAP32[$1 + 12 >> 2] + 10 | 0] = 0;
 HEAP16[HEAP32[$1 + 12 >> 2] >> 1] = 0;
 HEAP16[HEAP32[$1 + 12 >> 2] + 2 >> 1] = 0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 12 | 0] = 0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 11 | 0] = 0;
 HEAP16[HEAP32[$1 + 12 >> 2] + 4 >> 1] = 0;
 HEAP16[HEAP32[$1 + 12 >> 2] + 6 >> 1] = 0;
 HEAP16[HEAP32[$1 + 12 >> 2] + 8 >> 1] = 0;
 __stack_pointer = $1 + 16 | 0;
}

function wrapAround($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 32 | 0;
 HEAPF64[$2 + 16 >> 3] = $0;
 HEAPF64[$2 + 8 >> 3] = $1;
 label$1: {
  if (HEAPF64[$2 + 8 >> 3] < 0) {
   HEAPF64[$2 + 24 >> 3] = 0;
   break label$1;
  }
  HEAPF64[$2 + 16 >> 3] = HEAPF64[$2 + 16 >> 3] / HEAPF64[$2 + 8 >> 3];
  $0 = HEAPF64[$2 + 16 >> 3];
  $1 = HEAPF64[$2 + 16 >> 3];
  label$3: {
   if (Math_abs($1) < 2147483648) {
    $3 = ~~$1;
    break label$3;
   }
   $3 = -2147483648;
  }
  HEAPF64[$2 + 16 >> 3] = $0 - +($3 | 0);
  HEAPF64[$2 + 24 >> 3] = HEAPF64[$2 + 16 >> 3] * HEAPF64[$2 + 8 >> 3];
 }
 return +HEAPF64[$2 + 24 >> 3];
}

function jsiHandlePageUpDown($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 31 | 0] = $0;
 jsvGetLineAndCol(HEAP32[46763], HEAP32[46765], $1 + 20 | 0, $1 + 24 | 0);
 label$1: {
  if (!(HEAP8[$1 + 31 | 0] & 1)) {
   HEAP32[46765] = 0;
   break label$1;
  }
  HEAP32[46765] = jsvGetStringLength(HEAP32[46763]);
 }
 HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 24 >> 2];
 HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 20 >> 2];
 jsvGetLineAndCol(HEAP32[46763], HEAP32[46765], $1 + 12 | 0, $1 + 16 | 0);
 jsiMoveCursor(HEAP32[$1 + 24 >> 2], HEAP32[$1 + 20 >> 2], HEAP32[$1 + 16 >> 2], HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 32 | 0;
}

function jsvSetRefs($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 $3 = HEAPU8[$1 + 10 | 0];
 $0 = $3;
 $0 = HEAPU8[$1 + 8 | 0] | HEAPU8[$1 + 9 | 0] << 8 | $0 << 16;
 $4 = $0;
 $0 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
 $2 = HEAPU8[$2 + 10 | 0] << 4;
 HEAP8[$1 + 10 | 0] = $3;
 $3 = $2 | $4 & 16773135;
 HEAP8[$1 + 8 | 0] = $3;
 HEAP8[$1 + 9 | 0] = $3 >>> 8;
 HEAP8[$1 + 4 | 0] = $0;
 HEAP8[$1 + 5 | 0] = $0 >>> 8;
 HEAP8[$1 + 6 | 0] = $0 >>> 16;
 HEAP8[$1 + 7 | 0] = $0 >>> 24;
}

function st_yield_br_length($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  if (can_take_byte(HEAP32[$2 + 4 >> 2])) {
   if (push_outgoing_bits(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]) & 255) {
    HEAP32[$2 + 12 >> 2] = 6;
    break label$1;
   }
   $0 = HEAP32[$2 + 8 >> 2];
   HEAP16[$0 + 2 >> 1] = HEAPU16[HEAP32[$2 + 8 >> 2] + 4 >> 1] + HEAPU16[$0 + 2 >> 1];
   HEAP16[HEAP32[$2 + 8 >> 2] + 4 >> 1] = 0;
   HEAP32[$2 + 12 >> 2] = 2;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = 6;
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function jshPushIOCharEvent($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 label$1: {
  if (jshPushIOCharEventHandler(HEAPU8[$2 + 15 | 0], HEAP8[$2 + 14 | 0]) & 1) {
   break label$1;
  }
  if (jshPushIOCharEventAppend(HEAPU8[$2 + 15 | 0], HEAP8[$2 + 14 | 0]) & 1) {
   break label$1;
  }
  HEAP8[$2 + 8 | 0] = HEAPU8[$2 + 15 | 0];
  HEAP8[$2 + 8 | 0] = HEAPU8[$2 + 8 | 0] & 159;
  HEAP8[$2 + 9 | 0] = HEAPU8[$2 + 14 | 0];
  jshPushEvent($2 + 8 | 0);
  jshPushIOCharEventFlowControl(HEAPU8[$2 + 15 | 0]);
 }
 __stack_pointer = $2 + 16 | 0;
}

function jsvArrayPush($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = jsvGetArrayLength(HEAP32[$2 + 24 >> 2]);
 HEAP32[$2 + 12 >> 2] = jsvMakeIntoVariableName(jsvNewFromInteger(HEAP32[$2 + 16 >> 2]), HEAP32[$2 + 20 >> 2]);
 label$1: {
  if (!HEAP32[$2 + 12 >> 2]) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  jsvAddName(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 12 >> 2]);
  jsvUnLock(HEAP32[$2 + 12 >> 2]);
  HEAP32[$2 + 28 >> 2] = jsvGetArrayLength(HEAP32[$2 + 24 >> 2]);
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jsvAddNamedChild($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = jsvNewNameFromString(HEAP32[$3 + 16 >> 2]);
 label$1: {
  if (!HEAP32[$3 + 12 >> 2]) {
   HEAP32[$3 + 28 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$3 + 20 >> 2]) {
   jsvSetFirstChild(HEAP32[$3 + 12 >> 2], jsvGetRef(jsvRef(HEAP32[$3 + 20 >> 2])) & 65535);
  }
  jsvAddName(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 12 >> 2]);
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 12 >> 2];
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function jshTransmitFlushDevice($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 jsiSetBusy(2, 1);
 HEAP8[$1 + 14 | 0] = 0;
 while (1) {
  HEAP8[$1 + 14 | 0] = 0;
  HEAP8[$1 + 13 | 0] = HEAPU8[187123];
  while (1) {
   if (HEAPU8[187122] != HEAPU8[$1 + 13 | 0]) {
    if (HEAPU8[$1 + 15 | 0] == (HEAPU8[(HEAPU8[$1 + 13 | 0] << 1) + 187200 | 0] & 31)) {
     HEAP8[$1 + 14 | 0] = 1;
    } else {
     HEAP8[$1 + 13 | 0] = HEAPU8[$1 + 13 | 0] + 1;
     continue;
    }
   }
   break;
  }
  if (HEAP8[$1 + 14 | 0] & 1) {
   continue;
  }
  break;
 }
 jsiSetBusy(2, 0);
 __stack_pointer = $1 + 16 | 0;
}

function float_20flatbuffers__Table__GetField_float__28unsigned_20short_2c_20float_29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP16[$3 + 10 >> 1] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP16[$3 + 2 >> 1] = flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, HEAPU16[$3 + 10 >> 1]);
 label$1: {
  if (HEAPU16[$3 + 2 >> 1]) {
   $2 = float_20flatbuffers__ReadScalar_float__28void_20const__29(HEAPU16[$3 + 2 >> 1] + $0 | 0);
   break label$1;
  }
  $2 = HEAPF32[$3 + 4 >> 2];
 }
 __stack_pointer = $3 + 16 | 0;
 return $2;
}

function scalbn($0, $1) {
 label$1: {
  if (($1 | 0) >= 1024) {
   $0 = $0 * 898846567431158e293;
   if ($1 >>> 0 < 2047) {
    $1 = $1 - 1023 | 0;
    break label$1;
   }
   $0 = $0 * 898846567431158e293;
   $1 = (($1 | 0) < 3069 ? $1 : 3069) - 2046 | 0;
   break label$1;
  }
  if (($1 | 0) > -1023) {
   break label$1;
  }
  $0 = $0 * 2004168360008973e-307;
  if ($1 >>> 0 > 4294965304) {
   $1 = $1 + 969 | 0;
   break label$1;
  }
  $0 = $0 * 2004168360008973e-307;
  $1 = (($1 | 0) > -2960 ? $1 : -2960) + 1938 | 0;
 }
 wasm2js_scratch_store_i32(0, 0);
 wasm2js_scratch_store_i32(1, $1 + 1023 << 20);
 return $0 * +wasm2js_scratch_load_f64();
}

function heatshrink_encoder_reset($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = 512;
 memset(HEAP32[$1 + 12 >> 2] + 15 | 0, 0, HEAP32[$1 + 8 >> 2]);
 HEAP16[HEAP32[$1 + 12 >> 2] >> 1] = 0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 12 | 0] = 0;
 HEAP16[HEAP32[$1 + 12 >> 2] + 2 >> 1] = 0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 11 | 0] = 0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 14 | 0] = 128;
 HEAP8[HEAP32[$1 + 12 >> 2] + 13 | 0] = 0;
 HEAP16[HEAP32[$1 + 12 >> 2] + 4 >> 1] = 0;
 HEAP16[HEAP32[$1 + 12 >> 2] + 8 >> 1] = 0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 10 | 0] = 0;
 __stack_pointer = $1 + 16 | 0;
}

function jstUtilTimerWaitEmpty() {
 var $0 = 0, $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = 2e6;
 while (1) {
  $0 = 0;
  label$2: {
   if (!(jstUtilTimerIsRunning() & 1)) {
    break label$2;
   }
   $0 = 0;
   if (jspIsInterrupted() & 1) {
    break label$2;
   }
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$1 + 12 >> 2] = $0 - 1;
   $0 = ($0 | 0) > 0;
  }
  if ($0) {
   continue;
  }
  break;
 }
 label$3: {
  if (jspIsInterrupted() & 1) {
   jsExceptionHere(4, 101216, 0);
   break label$3;
  }
  if (HEAP32[$1 + 12 >> 2] <= 0) {
   jsExceptionHere(4, 101191, 0);
  }
 }
 __stack_pointer = $1 + 16 | 0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__OperatorCode___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__OperatorCode___20const___28unsigned_20short_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = flatbuffers__Vector_flatbuffers__Offset_tflite__OperatorCode___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__OperatorCode___20const___28unsigned_20short_29(HEAP32[$2 + 12 >> 2], HEAPU16[$2 + 10 >> 1]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function jsvExecuteSetter($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 label$1: {
  if (!(jsvIsGetterOrSetter(HEAP32[$3 + 8 >> 2]) & 1)) {
   break label$1;
  }
  HEAP32[$3 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 8 >> 2], 98048);
  if (!(jsvIsFunction(HEAP32[$3 >> 2]) & 1)) {
   jsvUnLock(HEAP32[$3 >> 2]);
   break label$1;
  }
  if (!HEAP32[$3 >> 2]) {
   break label$1;
  }
  jsvUnLock2(jspExecuteFunction(HEAP32[$3 >> 2], HEAP32[$3 + 12 >> 2], 1, $3 + 4 | 0), HEAP32[$3 >> 2]);
 }
 __stack_pointer = $3 + 16 | 0;
}

function jsvSetArrayItem($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[$3 >> 2] = jsvGetArrayIndex(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
 label$1: {
  if (HEAP32[$3 >> 2]) {
   jsvSetValueOfName(HEAP32[$3 >> 2], HEAP32[$3 + 4 >> 2]);
   break label$1;
  }
  HEAP32[$3 >> 2] = jsvMakeIntoVariableName(jsvNewFromInteger(HEAP32[$3 + 8 >> 2]), HEAP32[$3 + 4 >> 2]);
  if (HEAP32[$3 >> 2]) {
   jsvAddName(HEAP32[$3 + 12 >> 2], HEAP32[$3 >> 2]);
  }
 }
 jsvUnLock(HEAP32[$3 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function jsvReplaceWithOrAddToRoot($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 label$1: {
  if (jsvGetRefs(HEAP32[$2 + 12 >> 2]) & 65535) {
   break label$1;
  }
  if (!(jsvIsName(HEAP32[$2 + 12 >> 2]) & 1)) {
   break label$1;
  }
  label$2: {
   if (jsvIsArrayBufferName(HEAP32[$2 + 12 >> 2]) & 1) {
    break label$2;
   }
   if (jsvIsNewChild(HEAP32[$2 + 12 >> 2]) & 1) {
    break label$2;
   }
   jsvAddName(HEAP32[46747], HEAP32[$2 + 12 >> 2]);
  }
 }
 jsvReplaceWith(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function tflite__internal__ContextHelper__RequestScratchBufferInArena_28TfLiteContext__2c_20unsigned_20long_2c_20int__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[$3 >> 2] = HEAP32[HEAP32[$3 + 12 >> 2] + 12 >> 2];
 $0 = tflite__MicroAllocator__RequestScratchBufferInArena_28int_2c_20unsigned_20long_2c_20int__29(HEAP32[HEAP32[$3 >> 2] >> 2], HEAP32[HEAP32[$3 >> 2] + 16 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function jswrap_arguments() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 8 >> 2] = 0;
 if (HEAP32[46750]) {
  HEAP32[$0 + 8 >> 2] = jsvLockAgain(HEAP32[46750]);
 }
 label$2: {
  if (!(jsvIsFunction(HEAP32[$0 + 8 >> 2]) & 1)) {
   jsExceptionHere(1, 102237, 0);
   HEAP32[$0 + 12 >> 2] = 0;
   break label$2;
  }
  HEAP32[$0 + 4 >> 2] = jsvGetFunctionArgumentLength(HEAP32[$0 + 8 >> 2]);
  jsvObjectSetChild(HEAP32[$0 + 8 >> 2], 99843, HEAP32[$0 + 4 >> 2]);
  jsvUnLock(HEAP32[$0 + 8 >> 2]);
  HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 4 >> 2];
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function jswrap_btoa_encode($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] & 63;
 label$1: {
  if (HEAP32[$1 + 8 >> 2] < 26) {
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2] + 65;
   break label$1;
  }
  if (HEAP32[$1 + 8 >> 2] < 52) {
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2] + 71;
   break label$1;
  }
  if (HEAP32[$1 + 8 >> 2] < 62) {
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2] - 4;
   break label$1;
  }
  if (HEAP32[$1 + 8 >> 2] == 62) {
   HEAP32[$1 + 12 >> 2] = 43;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 47;
 }
 return HEAP32[$1 + 12 >> 2];
}

function jspeArrowFunction($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 jslGetNextToken();
 if ((HEAP32[46755] & 63) == 1) {
  HEAP32[$2 + 12 >> 2] = jspeAddNamedFunctionParameter(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 }
 HEAP8[$2 + 7 | 0] = HEAP16[HEAP32[38615] + 2 >> 1] != 123;
 HEAP8[$2 + 6 | 0] = jspeFunctionDefinitionInternal(HEAP32[$2 + 12 >> 2], HEAP8[$2 + 7 | 0] & 1) & 1;
 if (HEAP8[$2 + 6 | 0] & 1) {
  jsvObjectSetChild(HEAP32[$2 + 12 >> 2], 100302, HEAP32[46753]);
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function _jswrap_prombox_all_reject($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 12 >> 2], 102677);
 if (HEAP32[$2 + 4 >> 2]) {
  HEAP32[$2 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 4 >> 2], 100360);
  if (HEAP32[$2 >> 2]) {
   jsvUnLock(HEAP32[$2 >> 2]);
   jsvObjectRemoveChild(HEAP32[$2 + 4 >> 2], 100360);
   _jswrap_prombox_queuereject(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
  }
  jsvUnLock(HEAP32[$2 + 4 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
}

function int_20flatbuffers__Table__GetField_int__28unsigned_20short_2c_20int_29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP16[$3 + 10 >> 1] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP16[$3 + 2 >> 1] = flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, HEAPU16[$3 + 10 >> 1]);
 label$1: {
  if (HEAPU16[$3 + 2 >> 1]) {
   $0 = int_20flatbuffers__ReadScalar_int__28void_20const__29(HEAPU16[$3 + 2 >> 1] + $0 | 0);
   break label$1;
  }
  $0 = HEAP32[$3 + 4 >> 2];
 }
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function _jswrap_error_constructor($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 HEAP32[$2 >> 2] = jspNewObject(0, HEAP32[$2 + 4 >> 2]);
 label$1: {
  if (!HEAP32[$2 >> 2]) {
   HEAP32[$2 + 12 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$2 + 8 >> 2]) {
   jsvObjectSetChildAndUnLock(HEAP32[$2 >> 2], 105323, jsvAsString(HEAP32[$2 + 8 >> 2]));
  }
  jsvObjectSetChildAndUnLock(HEAP32[$2 >> 2], 104973, jsvNewFromString(HEAP32[$2 + 4 >> 2]));
  HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function jsfGetAddressOfNextPage($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 label$1: {
  if (!(jshFlashGetPage(HEAP32[$1 + 24 >> 2], $1 + 20 | 0, $1 + 16 | 0) & 1)) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsfGetBankEndAddress(HEAP32[$1 + 24 >> 2]);
  HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 20 >> 2] + HEAP32[$1 + 16 >> 2];
  if (HEAPU32[$1 + 24 >> 2] >= HEAPU32[$1 + 12 >> 2]) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 24 >> 2];
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function gemmlowp__FixedPoint_int_2c_200__20gemmlowp__AddSaturatingIf16Bit_int_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 24 >> 2] = gemmlowp__FixedPoint_int_2c_200___FromRaw_28int_29(int_20gemmlowp__AddSaturatingIf16Bit_int__28int_2c_20int_29(HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($2 + 16 | 0) >> 2], HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($2 + 8 | 0) >> 2]));
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 24 >> 2];
}

function espruino_snprintf_cb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
 while (1) {
  if (HEAPU8[HEAP32[$2 + 12 >> 2]]) {
   if (HEAPU32[HEAP32[$2 + 4 >> 2] + 4 >> 2] < HEAPU32[HEAP32[$2 + 4 >> 2] + 8 >> 2]) {
    HEAP8[HEAP32[HEAP32[$2 + 4 >> 2] >> 2] + HEAP32[HEAP32[$2 + 4 >> 2] + 4 >> 2] | 0] = HEAPU8[HEAP32[$2 + 12 >> 2]];
   }
   $0 = HEAP32[$2 + 4 >> 2];
   HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
}

function jswrap_storage_erase($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer + -64 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 60 >> 2] = $0;
 jsfNameFromVar($1 + 32 | 0, HEAP32[$1 + 60 >> 2]);
 HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 56 >> 2];
 $2 = HEAP32[$1 + 52 >> 2];
 $0 = HEAP32[$1 + 48 >> 2];
 HEAP32[$1 + 16 >> 2] = $0;
 HEAP32[$1 + 20 >> 2] = $2;
 $0 = HEAP32[$1 + 44 >> 2];
 $2 = HEAP32[$1 + 40 >> 2];
 HEAP32[$1 + 8 >> 2] = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = HEAP32[$1 + 36 >> 2];
 $0 = HEAP32[$1 + 32 >> 2];
 HEAP32[$1 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = $2;
 jsfEraseFile($1);
 __stack_pointer = $1 - -64 | 0;
}

function jsvVarPrintf($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer + -64 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 56 >> 2] = $0;
 HEAP32[$2 + 52 >> 2] = jsvNewFromEmptyString_1();
 label$1: {
  if (!HEAP32[$2 + 52 >> 2]) {
   HEAP32[$2 + 60 >> 2] = 0;
   break label$1;
  }
  jsvStringIteratorNew($2 + 16 | 0, HEAP32[$2 + 52 >> 2], 0);
  jsvStringIteratorGotoEnd($2 + 16 | 0);
  HEAP32[$2 + 12 >> 2] = $1;
  vcbprintf(2, $2 + 16 | 0, HEAP32[$2 + 56 >> 2], HEAP32[$2 + 12 >> 2]);
  jsvStringIteratorFree_1($2 + 16 | 0);
  HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 52 >> 2];
 }
 __stack_pointer = $2 - -64 | 0;
 return HEAP32[$2 + 60 >> 2];
}

function graphicsSetVar($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = jsvSkipNameAndUnLock(jsvFindChildFromString(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 96684));
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   __memcpy(189428, HEAP32[$1 + 12 >> 2], 72);
   break label$1;
  }
  if (!HEAP32[$1 + 8 >> 2]) {
   break label$1;
  }
  jsvSetString(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2] + 4 | 0, 44);
  jsvUnLock(HEAP32[$1 + 8 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
}

function graphicsFillRect($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 32 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 28 >> 2] = $0;
 HEAP32[$6 + 24 >> 2] = $1;
 HEAP32[$6 + 20 >> 2] = $2;
 HEAP32[$6 + 16 >> 2] = $3;
 HEAP32[$6 + 12 >> 2] = $4;
 HEAP32[$6 + 8 >> 2] = $5;
 graphicsToDeviceCoordinates(HEAP32[$6 + 28 >> 2], $6 + 24 | 0, $6 + 20 | 0);
 graphicsToDeviceCoordinates(HEAP32[$6 + 28 >> 2], $6 + 16 | 0, $6 + 12 | 0);
 graphicsFillRectDevice(HEAP32[$6 + 28 >> 2], HEAP32[$6 + 24 >> 2], HEAP32[$6 + 20 >> 2], HEAP32[$6 + 16 >> 2], HEAP32[$6 + 12 >> 2], HEAP32[$6 + 8 >> 2]);
 __stack_pointer = $6 + 32 | 0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph___20const___28unsigned_20short_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph___20const___28unsigned_20short_29(HEAP32[$2 + 12 >> 2], HEAPU16[$2 + 10 >> 1]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__Operator___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__Operator___20const___28unsigned_20short_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = flatbuffers__Vector_flatbuffers__Offset_tflite__Operator___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__Operator___20const___28unsigned_20short_29(HEAP32[$2 + 12 >> 2], HEAPU16[$2 + 10 >> 1]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__Metadata___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__Metadata___20const___28unsigned_20short_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = flatbuffers__Vector_flatbuffers__Offset_tflite__Metadata___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__Metadata___20const___28unsigned_20short_29(HEAP32[$2 + 12 >> 2], HEAPU16[$2 + 10 >> 1]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function tflite__SimpleMemoryAllocator__SimpleMemoryAllocator_28tflite__ErrorReporter__2c_20unsigned_20char__2c_20unsigned_20char__29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 HEAP32[$0 >> 2] = 147384;
 HEAP32[$0 + 4 >> 2] = HEAP32[$4 + 8 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$4 + 4 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$0 + 16 >> 2] = HEAP32[$4 + 4 >> 2];
 HEAP32[$0 + 20 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 8 >> 2];
 return $0;
}

function jswrap_date_setTime($0, $1) {
 $0 = $0 | 0;
 $1 = +$1;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 20 >> 2] = $0;
 HEAPF64[$2 + 8 >> 3] = $1;
 label$1: {
  if (HEAPF64[$2 + 8 >> 3] >= 393840543168e5 ? 1 : HEAPF64[$2 + 8 >> 3] < -395083256832e5) {
   jsExceptionHere(1, 100591, 0);
   HEAPF64[$2 + 24 >> 3] = 0;
   break label$1;
  }
  if (HEAP32[$2 + 20 >> 2]) {
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 20 >> 2], 100278, jsvNewFromFloat(HEAPF64[$2 + 8 >> 3]));
  }
  HEAPF64[$2 + 24 >> 3] = HEAPF64[$2 + 8 >> 3];
 }
 __stack_pointer = $2 + 32 | 0;
 return +HEAPF64[$2 + 24 >> 3];
}

function jsvArrayBufferIteratorIntToData($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 if (HEAP32[$4 + 4 >> 2] & 64) {
  if (HEAP32[$4 >> 2] < 0) {
   HEAP32[$4 >> 2] = 0;
  }
  if (HEAP32[$4 >> 2] > 255) {
   HEAP32[$4 >> 2] = 255;
  }
 }
 label$4: {
  if (HEAP32[$4 + 8 >> 2] == 8) {
   $0 = HEAP32[$4 >> 2];
   $2 = $0 >> 31;
   $1 = $0;
   $0 = HEAP32[$4 + 12 >> 2];
   HEAP32[$0 >> 2] = $1;
   HEAP32[$0 + 4 >> 2] = $2;
   break label$4;
  }
  HEAP32[HEAP32[$4 + 12 >> 2] >> 2] = HEAP32[$4 >> 2];
 }
}

function jswGetBuiltInLibrary($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!strcmp(HEAP32[$1 + 8 >> 2], 103453)) {
   HEAP32[$1 + 12 >> 2] = 40;
   break label$1;
  }
  if (!strcmp(HEAP32[$1 + 8 >> 2], 105331)) {
   HEAP32[$1 + 12 >> 2] = 43;
   break label$1;
  }
  if (!strcmp(HEAP32[$1 + 8 >> 2], 103085)) {
   HEAP32[$1 + 12 >> 2] = 44;
   break label$1;
  }
  if (!strcmp(HEAP32[$1 + 8 >> 2], 96770)) {
   HEAP32[$1 + 12 >> 2] = 45;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function gemmlowp__FixedPoint_int_2c_200__20gemmlowp__RoundingHalfSum_int_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 24 >> 2] = gemmlowp__FixedPoint_int_2c_200___FromRaw_28int_29(int_20gemmlowp__RoundingHalfSum_int__28int_2c_20int_29(HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($2 + 16 | 0) >> 2], HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($2 + 8 | 0) >> 2]));
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 24 >> 2];
}

function jspeFactorTypeOf() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 jslGetNextToken();
 HEAP32[$0 + 12 >> 2] = jspeUnaryExpression();
 HEAP32[$0 + 8 >> 2] = 0;
 if ((HEAP32[46755] & 63) == 1) {
  label$2: {
   if (!(jsvIsVariableDefined(HEAP32[$0 + 12 >> 2]) & 1)) {
    HEAP32[$0 + 8 >> 2] = jsvNewFromString(106576);
    break label$2;
   }
   HEAP32[$0 + 12 >> 2] = jsvSkipNameAndUnLock(HEAP32[$0 + 12 >> 2]);
   HEAP32[$0 + 8 >> 2] = jsvNewFromString(jsvGetTypeOf(HEAP32[$0 + 12 >> 2]));
  }
 }
 jsvUnLock(HEAP32[$0 + 12 >> 2]);
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 8 >> 2];
}

function jsvStringIteratorGoto($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 label$1: {
  if (HEAPU32[$3 + 4 >> 2] >= HEAPU32[HEAP32[$3 + 12 >> 2] + 8 >> 2]) {
   HEAP32[HEAP32[$3 + 12 >> 2] >> 2] = HEAP32[$3 + 4 >> 2] - HEAP32[HEAP32[$3 + 12 >> 2] + 8 >> 2];
   jsvStringIteratorCatchUp(HEAP32[$3 + 12 >> 2]);
   break label$1;
  }
  jsvStringIteratorFree_2(HEAP32[$3 + 12 >> 2]);
  jsvStringIteratorNew(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 }
 __stack_pointer = $3 + 16 | 0;
}

function jsvAddressToVar($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  if (!HEAP32[$2 + 4 >> 2]) {
   HEAP32[$2 + 12 >> 2] = jsvNewFromEmptyString_4();
   break label$1;
  }
  HEAP32[$2 >> 2] = jshFlashGetMemMapAddress(HEAP32[$2 + 8 >> 2]);
  if (!HEAP32[$2 >> 2]) {
   HEAP32[$2 + 12 >> 2] = jsvNewFlashString(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]);
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = jsvNewNativeString(HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function tflite__micro__GetMutableEvalInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 label$1: {
  if (!HEAP32[$3 + 12 >> 2]) {
   break label$1;
  }
 }
 label$2: {
  if (!HEAP32[$3 + 8 >> 2]) {
   break label$2;
  }
 }
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$3 + 12 >> 2] + 84 >> 2]](HEAP32[$3 + 12 >> 2], HEAP32[(HEAP32[HEAP32[$3 + 8 >> 2] >> 2] + 4 | 0) + (HEAP32[$3 + 4 >> 2] << 2) >> 2]) | 0;
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function i2c_initstruct($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP8[HEAP32[$2 + 12 >> 2] + 1 | 0] = HEAPU8[HEAP32[$2 + 8 >> 2] + 5 | 0];
 HEAP8[HEAP32[$2 + 12 >> 2]] = HEAPU8[HEAP32[$2 + 8 >> 2] + 4 | 0];
 HEAP8[HEAP32[$2 + 12 >> 2] + 2 | 0] = HEAP8[HEAP32[$2 + 8 >> 2] + 6 | 0] & 1;
 $0 = HEAP32[$2 + 8 >> 2];
 HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2] = 25e4 / (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24));
 HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2] = HEAP8[HEAP32[$2 + 8 >> 2] + 7 | 0] & 1 ? 1e5 : 0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__Tensor___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__Tensor___20const___28unsigned_20short_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = flatbuffers__Vector_flatbuffers__Offset_tflite__Tensor___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__Tensor___20const___28unsigned_20short_29(HEAP32[$2 + 12 >> 2], HEAPU16[$2 + 10 >> 1]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer___20const___28unsigned_20short_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer___20const___28unsigned_20short_29(HEAP32[$2 + 12 >> 2], HEAPU16[$2 + 10 >> 1]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function jswrap_array_indexOf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = jsvGetIndexOfFull(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], 0, 1, HEAP32[$3 + 16 >> 2]);
 label$1: {
  if (!HEAP32[$3 + 12 >> 2]) {
   HEAP32[$3 + 28 >> 2] = jsvNewFromInteger(-1);
   break label$1;
  }
  HEAP32[$3 + 28 >> 2] = jsvNewFromInteger(jsvGetIntegerAndUnLock(HEAP32[$3 + 12 >> 2]));
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function tflite__micro__GetEvalOutput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 label$1: {
  if (!HEAP32[$3 + 12 >> 2]) {
   break label$1;
  }
 }
 label$2: {
  if (!HEAP32[$3 + 8 >> 2]) {
   break label$2;
  }
 }
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$3 + 12 >> 2] + 84 >> 2]](HEAP32[$3 + 12 >> 2], HEAP32[(HEAP32[HEAP32[$3 + 8 >> 2] + 4 >> 2] + 4 | 0) + (HEAP32[$3 + 4 >> 2] << 2) >> 2]) | 0;
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function jswrap_espruino_toUint8Array($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 80 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 72 >> 2] = $0;
 HEAP32[$1 + 68 >> 2] = jsvNewTypedArray(1, jsvIterateCallbackCount(HEAP32[$1 + 72 >> 2]));
 label$1: {
  if (!HEAP32[$1 + 68 >> 2]) {
   HEAP32[$1 + 76 >> 2] = 0;
   break label$1;
  }
  jsvArrayBufferIteratorNew($1 + 8 | 0, HEAP32[$1 + 68 >> 2], 0);
  jsvIterateCallback(HEAP32[$1 + 72 >> 2], 595, $1 + 8 | 0);
  jsvArrayBufferIteratorFree($1 + 8 | 0);
  HEAP32[$1 + 76 >> 2] = HEAP32[$1 + 68 >> 2];
 }
 __stack_pointer = $1 + 80 | 0;
 return HEAP32[$1 + 76 >> 2];
}

function jswrap_isFinite($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 HEAPF64[$1 + 16 >> 3] = jsvGetFloat(HEAP32[$1 + 28 >> 2]);
 $2 = __DOUBLE_BITS_4(HEAPF64[$1 + 16 >> 3]);
 $0 = $2;
 $3 = i64toi32_i32$HIGH_BITS;
 $2 = $3 & 2147483647;
 $3 = $0;
 $0 = 0;
 label$1: {
  if (($2 | 0) == 2146435072 & ($3 | 0) != 0 | $2 >>> 0 > 2146435072) {
   break label$1;
  }
  $0 = 0;
  if (HEAPF64[$1 + 16 >> 3] == infinity) {
   break label$1;
  }
  $0 = HEAPF64[$1 + 16 >> 3] != -infinity;
 }
 __stack_pointer = $1 + 32 | 0;
 return $0 | 0;
}

function jsiAtEndOfInputLine() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 8 >> 2] = HEAP32[46765];
 HEAP32[$0 + 4 >> 2] = jsvGetStringLength(HEAP32[46763]);
 label$1: {
  while (1) {
   if (HEAPU32[$0 + 8 >> 2] < HEAPU32[$0 + 4 >> 2]) {
    if (isWhitespace(jsvGetCharInString(HEAP32[46763], HEAP32[$0 + 8 >> 2]) << 24 >> 24) & 1) {
     HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
     continue;
    } else {
     HEAP8[$0 + 15 | 0] = 0;
     break label$1;
    }
   }
   break;
  }
  HEAP8[$0 + 15 | 0] = 1;
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP8[$0 + 15 | 0] & 1;
}

function frexp($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 wasm2js_scratch_store_f64(+$0);
 $2 = wasm2js_scratch_load_i32(1) | 0;
 $3 = wasm2js_scratch_load_i32(0) | 0;
 $4 = $2;
 $2 = $2 >>> 20 & 2047;
 if (($2 | 0) != 2047) {
  if (!$2) {
   if ($0 == 0) {
    $2 = 0;
   } else {
    $0 = frexp($0 * 0x10000000000000000, $1);
    $2 = HEAP32[$1 >> 2] + -64 | 0;
   }
   HEAP32[$1 >> 2] = $2;
   return $0;
  }
  HEAP32[$1 >> 2] = $2 - 1022;
  $2 = $3;
  wasm2js_scratch_store_i32(0, $2 | 0);
  $2 = $4 & -2146435073 | 1071644672;
  wasm2js_scratch_store_i32(1, $2 | 0);
  $0 = +wasm2js_scratch_load_f64();
 }
 return $0;
}

function st_yield_br_index($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  if (can_take_byte(HEAP32[$2 + 4 >> 2])) {
   if (push_outgoing_bits(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]) & 255) {
    HEAP32[$2 + 12 >> 2] = 5;
    break label$1;
   }
   HEAP16[HEAP32[$2 + 8 >> 2] + 8 >> 1] = HEAPU16[HEAP32[$2 + 8 >> 2] + 4 >> 1] - 1;
   HEAP8[HEAP32[$2 + 8 >> 2] + 10 | 0] = 6;
   HEAP32[$2 + 12 >> 2] = 6;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = 5;
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function jsvSetArrayLength($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 label$1: {
  if (!(HEAP8[$3 + 7 | 0] & 1)) {
   break label$1;
  }
  $0 = HEAP32[$3 + 12 >> 2];
  if (HEAP32[$3 + 8 >> 2] >= (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24))) {
   break label$1;
  }
 }
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$3 + 8 >> 2];
 HEAP8[$0 | 0] = $1;
 HEAP8[$0 + 1 | 0] = $1 >>> 8;
 HEAP8[$0 + 2 | 0] = $1 >>> 16;
 HEAP8[$0 + 3 | 0] = $1 >>> 24;
 return HEAP32[$3 + 8 >> 2];
}

function jswrap_date_setSeconds($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP32[$3 + 36 >> 2] = $2;
 getTimeFromDateVar($3 + 8 | 0, HEAP32[$3 + 44 >> 2], 0);
 HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 40 >> 2];
 if (jsvIsNumeric(HEAP32[$3 + 36 >> 2]) & 1) {
  HEAP32[$3 + 12 >> 2] = jsvGetInteger(HEAP32[$3 + 36 >> 2]);
 }
 setCorrectTimeZone($3 + 8 | 0);
 $4 = jswrap_date_setTime(HEAP32[$3 + 44 >> 2], fromTimeInDay($3 + 8 | 0));
 __stack_pointer = $3 + 48 | 0;
 return +$4;
}

function jshUSARTInitInfo($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP8[$0 | 0] = 128;
 HEAP8[$0 + 1 | 0] = 37;
 HEAP8[$0 + 2 | 0] = 0;
 HEAP8[$0 + 3 | 0] = 0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 4 | 0] = 255;
 HEAP8[HEAP32[$1 + 12 >> 2] + 5 | 0] = 255;
 HEAP8[HEAP32[$1 + 12 >> 2] + 6 | 0] = 255;
 HEAP8[HEAP32[$1 + 12 >> 2] + 7 | 0] = 255;
 HEAP8[HEAP32[$1 + 12 >> 2] + 8 | 0] = 8;
 HEAP8[HEAP32[$1 + 12 >> 2] + 9 | 0] = 0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 10 | 0] = 1;
 HEAP8[HEAP32[$1 + 12 >> 2] + 11 | 0] = 0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 12 | 0] = 0;
}

function jswrap_stream_available($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!(jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1)) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 8 >> 2], 104027);
  HEAP32[$1 >> 2] = 0;
  if (jsvIsString(HEAP32[$1 + 4 >> 2]) & 1) {
   HEAP32[$1 >> 2] = jsvGetStringLength(HEAP32[$1 + 4 >> 2]);
  }
  jsvUnLock(HEAP32[$1 + 4 >> 2]);
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function gemmlowp__FixedPoint_int_2c_2012__20gemmlowp__operator__int_2c_2012__28gemmlowp__FixedPoint_int_2c_2012__2c_20gemmlowp__FixedPoint_int_2c_2012__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 24 >> 2] = gemmlowp__FixedPoint_int_2c_2012___FromRaw_28int_29(int_20gemmlowp__Add_int__28int_2c_20int_29(HEAP32[gemmlowp__FixedPoint_int_2c_2012___raw_28_29($2 + 16 | 0) >> 2], HEAP32[gemmlowp__FixedPoint_int_2c_2012___raw_28_29($2 + 8 | 0) >> 2]));
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 24 >> 2];
}

function jshSPIInitInfo($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP8[$0 | 0] = 160;
 HEAP8[$0 + 1 | 0] = 134;
 HEAP8[$0 + 2 | 0] = 1;
 HEAP8[$0 + 3 | 0] = 0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 4 | 0] = 0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 5 | 0] = 255;
 HEAP8[HEAP32[$1 + 12 >> 2] + 6 | 0] = 255;
 HEAP8[HEAP32[$1 + 12 >> 2] + 7 | 0] = 255;
 HEAP8[HEAP32[$1 + 12 >> 2] + 8 | 0] = 0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 9 | 0] = 1;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP8[$0 + 10 | 0] = 8;
 HEAP8[$0 + 11 | 0] = 0;
 HEAP8[$0 + 12 | 0] = 0;
 HEAP8[$0 + 13 | 0] = 0;
}

function gemmlowp__FixedPoint_int_2c_205__20gemmlowp__operator__int_2c_205__28gemmlowp__FixedPoint_int_2c_205__2c_20gemmlowp__FixedPoint_int_2c_205__29_1($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 24 >> 2] = gemmlowp__FixedPoint_int_2c_205___FromRaw_28int_29(int_20gemmlowp__BitAnd_int__28int_2c_20int_29(HEAP32[gemmlowp__FixedPoint_int_2c_205___raw_28_29($2 + 16 | 0) >> 2], HEAP32[gemmlowp__FixedPoint_int_2c_205___raw_28_29($2 + 8 | 0) >> 2]));
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 24 >> 2];
}

function memcpy_circular($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 while (1) {
  $0 = HEAP32[$5 + 12 >> 2];
  HEAP32[$5 + 12 >> 2] = $0 - 1;
  if ($0) {
   $0 = HEAP32[$5 + 16 >> 2];
   HEAP32[$5 + 16 >> 2] = $0 + 1;
   HEAP8[HEAP32[$5 + 28 >> 2] + HEAP32[HEAP32[$5 + 24 >> 2] >> 2] | 0] = HEAPU8[$0 | 0];
   HEAP32[HEAP32[$5 + 24 >> 2] >> 2] = (HEAP32[HEAP32[$5 + 24 >> 2] >> 2] + 1 >>> 0) % HEAPU32[$5 + 20 >> 2];
   continue;
  }
  break;
 }
}

function jsvIsEqual($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  label$2: {
   if (!(jsvIsBasic(HEAP32[$2 + 8 >> 2]) & 1)) {
    break label$2;
   }
   if (!(jsvIsBasic(HEAP32[$2 + 4 >> 2]) & 1)) {
    break label$2;
   }
   HEAP8[$2 + 15 | 0] = jsvIsBasicVarEqual(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]) & 1;
   break label$1;
  }
  HEAP8[$2 + 15 | 0] = (jsvGetRef(HEAP32[$2 + 8 >> 2]) & 65535) == (jsvGetRef(HEAP32[$2 + 4 >> 2]) & 65535);
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP8[$2 + 15 | 0] & 1;
}

function jswrap_banglejs_setLCDBrightness($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAPF64[$1 + 8 >> 3] = $0;
 $0 = HEAPF64[$1 + 8 >> 3] * 256 + .5;
 label$1: {
  if (Math_abs($0) < 2147483648) {
   $2 = ~~$0;
   break label$1;
  }
  $2 = -2147483648;
 }
 HEAP32[$1 + 4 >> 2] = $2;
 if (HEAP32[$1 + 4 >> 2] < 0) {
  HEAP32[$1 + 4 >> 2] = 0;
 }
 if (HEAP32[$1 + 4 >> 2] > 255) {
  HEAP32[$1 + 4 >> 2] = 255;
 }
 HEAP8[343244] = HEAP32[$1 + 4 >> 2];
 if (HEAP32[85796] & 131072) {
  jswrap_banglejs_setLCDPowerBacklight(1);
 }
 __stack_pointer = $1 + 16 | 0;
}

function gemmlowp__FixedPoint_int_2c_202__20gemmlowp__operator__int_2c_202__28gemmlowp__FixedPoint_int_2c_202__2c_20gemmlowp__FixedPoint_int_2c_202__29_1($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 24 >> 2] = gemmlowp__FixedPoint_int_2c_202___FromRaw_28int_29(int_20gemmlowp__Sub_int__28int_2c_20int_29(HEAP32[gemmlowp__FixedPoint_int_2c_202___raw_28_29($2 + 16 | 0) >> 2], HEAP32[gemmlowp__FixedPoint_int_2c_202___raw_28_29($2 + 8 | 0) >> 2]));
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 24 >> 2];
}

function tflite___28anonymous_20namespace_29__CheckParsePointerParams_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 label$1: {
  if (!HEAP32[$4 + 12 >> 2]) {
   break label$1;
  }
 }
 label$2: {
  if (!HEAP32[$4 + 8 >> 2]) {
   break label$2;
  }
 }
 label$3: {
  if (!HEAP32[$4 + 4 >> 2]) {
   break label$3;
  }
 }
 label$4: {
  if (!HEAP32[$4 >> 2]) {
   break label$4;
  }
 }
}

function tflite__RuntimeShape__FlatSize_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = 1;
 HEAP32[$1 + 4 >> 2] = tflite__RuntimeShape__DimsData_28_29_20const($0);
 HEAP32[$1 >> 2] = 0;
 while (1) {
  if (HEAP32[$1 >> 2] < HEAP32[$0 >> 2]) {
   HEAP32[$1 + 8 >> 2] = Math_imul(HEAP32[HEAP32[$1 + 4 >> 2] + (HEAP32[$1 >> 2] << 2) >> 2], HEAP32[$1 + 8 >> 2]);
   HEAP32[$1 >> 2] = HEAP32[$1 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jsbangle_exec_pending($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP16[$1 + 10 >> 1] = HEAPU8[$0 + 2 | 0] << 8 | HEAPU8[$0 + 3 | 0];
 if (!HEAP8[HEAP32[$1 + 12 >> 2] + 1 | 0]) {
  HEAP32[$1 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[46747], 105122);
  if (HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 >> 2] = jsvNewFromInteger(HEAPU16[$1 + 10 >> 1]);
   jsiQueueObjectCallbacks(HEAP32[$1 + 4 >> 2], 97018, $1, 1);
   jsvUnLock(HEAP32[$1 >> 2]);
  }
  jsvUnLock(HEAP32[$1 + 4 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
}

function wakeUpBangle($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP8[$1 + 11 | 0] = 0;
 if (!(!HEAP32[85798] | HEAP32[85796] & 65536)) {
  HEAP8[$1 + 11 | 0] = 1;
  HEAP32[85799] = HEAP32[85799] | 2;
 }
 if (!(!HEAP32[85800] | HEAP32[85796] & 131072)) {
  HEAP8[$1 + 11 | 0] = 1;
  HEAP32[85799] = HEAP32[85799] | 8;
 }
 if (!(!HEAP32[85801] | !(HEAP32[85796] & 262144))) {
  HEAP8[$1 + 11 | 0] = 1;
  HEAP32[85797] = HEAP32[$1 + 12 >> 2];
  HEAP32[85799] = HEAP32[85799] | 64;
 }
 if (HEAP8[$1 + 11 | 0] & 1) {
  HEAP16[171604] = 0;
 }
 return HEAP8[$1 + 11 | 0] & 1;
}

function jshPinSetValue($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP8[$2 + 31 | 0] = $0;
 HEAP8[$2 + 30 | 0] = $1;
 if (HEAPU8[Math_imul(HEAPU8[$2 + 31 | 0], 3) + 145056 | 0] & 16) {
  HEAP8[$2 + 30 | 0] = (HEAPU8[$2 + 30 | 0] ^ -1) & 1;
 }
 HEAP32[$2 + 24 >> 2] = 154259;
 $0 = HEAP32[$2 + 24 >> 2];
 HEAP8[$2 + 21 | 0] = 105;
 HEAP8[$2 + 22 | 0] = 105;
 HEAP8[$2 + 23 | 0] = 0;
 $1 = HEAPU8[$2 + 31 | 0];
 HEAP32[$2 + 4 >> 2] = HEAP8[$2 + 30 | 0] & 1;
 HEAP32[$2 >> 2] = $1;
 emscripten_asm_const_int($0 | 0, $2 + 21 | 0, $2 | 0) | 0;
 __stack_pointer = $2 + 32 | 0;
}

function gemmlowp__FixedPoint_int_2c_205__20gemmlowp__operator__int_2c_205__28gemmlowp__FixedPoint_int_2c_205__2c_20gemmlowp__FixedPoint_int_2c_205__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 24 >> 2] = gemmlowp__FixedPoint_int_2c_205___FromRaw_28int_29(int_20gemmlowp__Sub_int__28int_2c_20int_29(HEAP32[gemmlowp__FixedPoint_int_2c_205___raw_28_29($2 + 16 | 0) >> 2], HEAP32[gemmlowp__FixedPoint_int_2c_205___raw_28_29($2 + 8 | 0) >> 2]));
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 24 >> 2];
}

function gemmlowp__FixedPoint_int_2c_202__20gemmlowp__operator__int_2c_202__28gemmlowp__FixedPoint_int_2c_202__2c_20gemmlowp__FixedPoint_int_2c_202__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 24 >> 2] = gemmlowp__FixedPoint_int_2c_202___FromRaw_28int_29(int_20gemmlowp__Add_int__28int_2c_20int_29(HEAP32[gemmlowp__FixedPoint_int_2c_202___raw_28_29($2 + 16 | 0) >> 2], HEAP32[gemmlowp__FixedPoint_int_2c_202___raw_28_29($2 + 8 | 0) >> 2]));
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 24 >> 2];
}

function gemmlowp__FixedPoint_int_2c_200__20gemmlowp__operator__int_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 24 >> 2] = gemmlowp__FixedPoint_int_2c_200___FromRaw_28int_29(int_20gemmlowp__Add_int__28int_2c_20int_29(HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($2 + 16 | 0) >> 2], HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($2 + 8 | 0) >> 2]));
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 24 >> 2];
}

function jslSeekToP($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[HEAP32[38615] + 100 >> 2]) {
  jsvLockAgain(HEAP32[HEAP32[38615] + 100 >> 2]);
 }
 jsvStringIteratorFree(HEAP32[38615] + 88 | 0);
 jsvStringIteratorClone(HEAP32[38615] + 88 | 0, HEAP32[$1 + 12 >> 2]);
 jsvUnLock(HEAP32[HEAP32[38615] + 100 >> 2]);
 HEAP8[HEAP32[38615]] = HEAPU8[HEAP32[$1 + 12 >> 2] + 36 | 0];
 HEAP32[HEAP32[38615] + 4 >> 2] = 0;
 HEAP32[HEAP32[38615] + 8 >> 2] = 0;
 HEAP16[HEAP32[38615] + 2 >> 1] = 0;
 jslGetNextToken();
 __stack_pointer = $1 + 16 | 0;
}

function jspGetConstructor($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = jspGetPrototype(HEAP32[$1 + 8 >> 2]);
 label$1: {
  if (HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 4 >> 2], 100982);
   if (jsvIsFunction(HEAP32[$1 >> 2]) & 1) {
    jsvUnLock(HEAP32[$1 + 4 >> 2]);
    HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
    break label$1;
   }
   jsvUnLock2(HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2]);
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvSetString($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer + -64 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 60 >> 2] = $0;
 HEAP32[$3 + 56 >> 2] = $1;
 HEAP32[$3 + 52 >> 2] = $2;
 jsvStringIteratorNew($3 + 16 | 0, HEAP32[$3 + 60 >> 2], 0);
 HEAP32[$3 + 12 >> 2] = 0;
 while (1) {
  if (HEAPU32[$3 + 12 >> 2] < HEAPU32[$3 + 52 >> 2]) {
   jsvStringIteratorSetCharAndNext($3 + 16 | 0, HEAP8[HEAP32[$3 + 56 >> 2] + HEAP32[$3 + 12 >> 2] | 0]);
   HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 jsvStringIteratorFree_1($3 + 16 | 0);
 __stack_pointer = $3 - -64 | 0;
}

function double_20const__20std____2__min_double_2c_20std____2____less_double_2c_20double___28double_20const__2c_20double_20const__2c_20std____2____less_double_2c_20double__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 4 >> 2] = $0;
 HEAP32[$2 >> 2] = $1;
 label$1: {
  if (std____2____less_double_2c_20double___operator_28_29_28double_20const__2c_20double_20const__29_20const($2 + 8 | 0, HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2]) & 1) {
   $0 = HEAP32[$2 >> 2];
   break label$1;
  }
  $0 = HEAP32[$2 + 4 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function jswrap_graphics_scroll($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 96 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 88 >> 2] = $0;
 HEAP32[$3 + 84 >> 2] = $1;
 HEAP32[$3 + 80 >> 2] = $2;
 label$1: {
  if (!(graphicsGetFromVar($3 + 8 | 0, HEAP32[$3 + 88 >> 2]) & 1)) {
   HEAP32[$3 + 92 >> 2] = 0;
   break label$1;
  }
  graphicsScroll($3 + 8 | 0, HEAP32[$3 + 84 >> 2], HEAP32[$3 + 80 >> 2]);
  graphicsSetVar($3 + 8 | 0);
  HEAP32[$3 + 92 >> 2] = jsvLockAgain(HEAP32[$3 + 88 >> 2]);
 }
 __stack_pointer = $3 + 96 | 0;
 return HEAP32[$3 + 92 >> 2];
}

function jswrap_waveform_stop($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP8[$1 + 11 | 0] = jsvObjectGetBoolChild(HEAP32[$1 + 12 >> 2], 103945) & 1;
 label$1: {
  if (!(HEAP8[$1 + 11 | 0] & 1)) {
   jsExceptionHere(1, 103929, 0);
   break label$1;
  }
  HEAP32[$1 + 4 >> 2] = jswrap_waveform_getBuffer(HEAP32[$1 + 12 >> 2], 0, 0);
  if (!(jstStopBufferTimerTask(HEAP32[$1 + 4 >> 2]) & 1)) {
   jsExceptionHere(1, 106428, 0);
  }
  jsvUnLock(HEAP32[$1 + 4 >> 2]);
  jswrap_waveform_idle();
 }
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_graphics_clear($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 96 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 88 >> 2] = $0;
 HEAP8[$2 + 87 | 0] = $1;
 if (HEAP8[$2 + 87 | 0] & 1) {
  jsvUnLock(jswrap_graphics_reset(HEAP32[$2 + 88 >> 2]));
 }
 label$2: {
  if (!(graphicsGetFromVar($2 + 8 | 0, HEAP32[$2 + 88 >> 2]) & 1)) {
   HEAP32[$2 + 92 >> 2] = 0;
   break label$2;
  }
  graphicsClear($2 + 8 | 0);
  graphicsSetVar($2 + 8 | 0);
  HEAP32[$2 + 92 >> 2] = jsvLockAgain(HEAP32[$2 + 88 >> 2]);
 }
 __stack_pointer = $2 + 96 | 0;
 return HEAP32[$2 + 92 >> 2];
}

function TfLiteStatus_20tflite__internal__FlatBufferVectorToTfLiteTypeArray_float_2c_20TfLiteFloatArray__28tflite__SimpleMemoryAllocator__2c_20tflite__ErrorReporter__2c_20flatbuffers__Vector_float__20const__2c_20TfLiteFloatArray___29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 label$1: {
  if (!HEAP32[$4 + 8 >> 2]) {
   break label$1;
  }
 }
 label$2: {
  if (!HEAP32[$4 + 4 >> 2]) {
   break label$2;
  }
 }
 HEAP32[HEAP32[$4 >> 2] >> 2] = HEAP32[$4 + 4 >> 2];
 return 0;
}

function _jswrap_string_charCodeAt($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer + -64 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 56 >> 2] = $0;
 HEAP32[$2 + 52 >> 2] = $1;
 label$1: {
  if (!(jsvIsString(HEAP32[$2 + 56 >> 2]) & 1)) {
   HEAP32[$2 + 60 >> 2] = -1;
   break label$1;
  }
  jsvStringIteratorNewUTF8($2 + 16 | 0, HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2]);
  HEAP32[$2 + 12 >> 2] = jsvStringIteratorGetUTF8CharAndNext($2 + 16 | 0);
  jsvStringIteratorFree_10($2 + 16 | 0);
  HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 12 >> 2];
 }
 __stack_pointer = $2 - -64 | 0;
 return HEAP32[$2 + 60 >> 2];
}

function jswrap_graphics_getFontHeight($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 112 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 104 >> 2] = $0;
 label$1: {
  if (!(graphicsGetFromVar($1 + 32 | 0, HEAP32[$1 + 104 >> 2]) & 1)) {
   HEAP32[$1 + 108 >> 2] = 0;
   break label$1;
  }
  _jswrap_graphics_getFontInfo($1 + 32 | 0, $1 + 8 | 0);
  HEAP32[$1 + 4 >> 2] = _jswrap_graphics_getFontHeightInternal($1 + 32 | 0, $1 + 8 | 0);
  _jswrap_graphics_freeFontInfo($1 + 8 | 0);
  HEAP32[$1 + 108 >> 2] = HEAP32[$1 + 4 >> 2];
 }
 __stack_pointer = $1 + 112 | 0;
 return HEAP32[$1 + 108 >> 2];
}

function jspeExpression() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 label$1: {
  while (1) {
   if (((HEAP32[46755] & 80) != 0 ^ -1) & 1) {
    HEAP32[$0 + 8 >> 2] = jspeAssignmentExpression();
    if (HEAP16[HEAP32[38615] + 2 >> 1] != 44) {
     HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2];
     break label$1;
    } else {
     jsvCheckReferenceError(HEAP32[$0 + 8 >> 2]);
     jsvUnLock(HEAP32[$0 + 8 >> 2]);
     jslGetNextToken();
     continue;
    }
   }
   break;
  }
  HEAP32[$0 + 12 >> 2] = 0;
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function tflite__SimpleMemoryAllocator__GetAvailableMemory_28unsigned_20long_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = tflite__AlignPointerUp_28unsigned_20char__2c_20unsigned_20long_29(HEAP32[$0 + 16 >> 2], HEAP32[$2 + 8 >> 2]);
 HEAP32[$2 >> 2] = tflite__AlignPointerDown_28unsigned_20char__2c_20unsigned_20long_29(HEAP32[$0 + 20 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 >> 2] - HEAP32[$2 + 4 >> 2] | 0;
}

function jshFlashGetPage($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 8 >> 2] = $0;
 HEAP32[$3 + 4 >> 2] = $1;
 HEAP32[$3 >> 2] = $2;
 label$1: {
  if (HEAPU32[$3 + 8 >> 2] < 134217728) {
   HEAP8[$3 + 15 | 0] = 0;
   break label$1;
  }
  $1 = HEAP32[$3 + 4 >> 2];
  $4 = Math_floor(+(HEAP32[$3 + 8 >> 2] >>> 12 >>> 0)) * 4096;
  label$3: {
   if ($4 < 4294967296 & $4 >= 0) {
    $0 = ~~$4 >>> 0;
    break label$3;
   }
   $0 = 0;
  }
  HEAP32[$1 >> 2] = $0;
  HEAP32[HEAP32[$3 >> 2] >> 2] = 4096;
  HEAP8[$3 + 15 | 0] = 1;
 }
 return HEAP8[$3 + 15 | 0] & 1;
}

function round($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 wasm2js_scratch_store_f64(+$0);
 $1 = wasm2js_scratch_load_i32(1) | 0;
 $4 = wasm2js_scratch_load_i32(0) | 0;
 $3 = $1 >>> 20 & 2047;
 if ($3 >>> 0 <= 1074) {
  if ($3 >>> 0 <= 1021) {
   return $0 * 0;
  }
  $0 = ($1 | 0) > 0 | ($1 | 0) >= 0 ? $0 : -$0;
  $2 = $0 + 4503599627370496 + -4503599627370496 - $0;
  label$3: {
   if ($2 > .5) {
    $0 = $0 + $2 + -1;
    break label$3;
   }
   $0 = $0 + $2;
   if (!($2 <= -.5)) {
    break label$3;
   }
   $0 = $0 + 1;
  }
  $0 = ($1 | 0) > 0 | ($1 | 0) >= 0 ? $0 : -$0;
 }
 return $0;
}

function unsigned_20char_20const__20std____2__min_unsigned_20char__28unsigned_20char_20const__2c_20unsigned_20char_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = unsigned_20char_20const__20std____2__min_unsigned_20char_2c_20std____2____less_unsigned_20char_2c_20unsigned_20char___28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20std____2____less_unsigned_20char_2c_20unsigned_20char__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function unsigned_20char_20const__20std____2__max_unsigned_20char__28unsigned_20char_20const__2c_20unsigned_20char_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = unsigned_20char_20const__20std____2__max_unsigned_20char_2c_20std____2____less_unsigned_20char_2c_20unsigned_20char___28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20std____2____less_unsigned_20char_2c_20unsigned_20char__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function TfLiteStatus_20tflite__internal__FlatBufferVectorToTfLiteTypeArray_int_2c_20TfLiteIntArray__28tflite__SimpleMemoryAllocator__2c_20tflite__ErrorReporter__2c_20flatbuffers__Vector_int__20const__2c_20TfLiteIntArray___29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 label$1: {
  if (!HEAP32[$4 + 8 >> 2]) {
   break label$1;
  }
 }
 label$2: {
  if (!HEAP32[$4 + 4 >> 2]) {
   break label$2;
  }
 }
 HEAP32[HEAP32[$4 >> 2] >> 2] = HEAP32[$4 + 4 >> 2];
 return 0;
}

function jsvStringIteratorGetPtrAndNext($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[HEAP32[$3 + 8 >> 2] >> 2] = HEAP32[HEAP32[$3 + 12 >> 2] + 16 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2];
 HEAP32[HEAP32[$3 + 4 >> 2] >> 2] = HEAP32[HEAP32[$3 + 12 >> 2] + 4 >> 2] - HEAP32[HEAP32[$3 + 12 >> 2] >> 2];
 HEAP32[HEAP32[$3 + 12 >> 2] >> 2] = HEAP32[HEAP32[$3 + 12 >> 2] + 4 >> 2] - 1;
 jsvStringIteratorNextInline(HEAP32[$3 + 12 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function float_20const__20std____2__min_float_2c_20std____2____less_float_2c_20float___28float_20const__2c_20float_20const__2c_20std____2____less_float_2c_20float__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 4 >> 2] = $0;
 HEAP32[$2 >> 2] = $1;
 label$1: {
  if (std____2____less_float_2c_20float___operator_28_29_28float_20const__2c_20float_20const__29_20const($2 + 8 | 0, HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2]) & 1) {
   $0 = HEAP32[$2 >> 2];
   break label$1;
  }
  $0 = HEAP32[$2 + 4 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function float_20const__20std____2__max_float_2c_20std____2____less_float_2c_20float___28float_20const__2c_20float_20const__2c_20std____2____less_float_2c_20float__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 4 >> 2] = $0;
 HEAP32[$2 >> 2] = $1;
 label$1: {
  if (std____2____less_float_2c_20float___operator_28_29_28float_20const__2c_20float_20const__29_20const($2 + 8 | 0, HEAP32[$2 + 4 >> 2], HEAP32[$2 >> 2]) & 1) {
   $0 = HEAP32[$2 >> 2];
   break label$1;
  }
  $0 = HEAP32[$2 + 4 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function jswrap_graphics_drawCString($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = jsvNewFromString(HEAP32[$4 + 16 >> 2]);
 $0 = HEAP32[$4 + 28 >> 2];
 jsvUnLock2(jswrap_graphics_drawString(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), HEAP32[$4 + 12 >> 2], HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2], 0), HEAP32[$4 + 12 >> 2]);
 __stack_pointer = $4 + 32 | 0;
}

function jsvGetCharInString($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer + -64 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 56 >> 2] = $0;
 HEAP32[$2 + 52 >> 2] = $1;
 label$1: {
  if (!(jsvIsString(HEAP32[$2 + 56 >> 2]) & 1)) {
   HEAP32[$2 + 60 >> 2] = 0;
   break label$1;
  }
  jsvStringIteratorNewUTF8($2 + 16 | 0, HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2]);
  HEAP32[$2 + 12 >> 2] = jsvStringIteratorGetUTF8CharAndNext($2 + 16 | 0);
  jsvStringIteratorFree_1($2 + 16 | 0);
  HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 12 >> 2];
 }
 __stack_pointer = $2 - -64 | 0;
 return HEAP32[$2 + 60 >> 2];
}

function jslPrintTokenisedString($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer + -64 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 60 >> 2] = $0;
 HEAP32[$3 + 56 >> 2] = $1;
 HEAP32[$3 + 52 >> 2] = $2;
 HEAP8[$3 + 51 | 0] = 0;
 HEAP32[$3 + 44 >> 2] = 0;
 HEAP32[$3 + 40 >> 2] = 0;
 jsvStringIteratorNew($3, HEAP32[$3 + 60 >> 2], 0);
 while (1) {
  if (jsvStringIteratorHasChar($3) & 1) {
   jslPrintTokenisedChar($3, $3 + 51 | 0, $3 + 44 | 0, $3 + 40 | 0, HEAP32[$3 + 56 >> 2], HEAP32[$3 + 52 >> 2]);
   continue;
  }
  break;
 }
 jsvStringIteratorFree($3);
 __stack_pointer = $3 - -64 | 0;
}

function jsfVarFromName($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 28 | 0] = 0;
 $2 = $0;
 $0 = HEAP32[$2 >> 2];
 $3 = HEAP32[$2 + 4 >> 2];
 HEAP32[$1 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = $3;
 HEAP32[$1 + 24 >> 2] = HEAP32[$2 + 24 >> 2];
 $0 = HEAP32[$2 + 20 >> 2];
 $3 = HEAP32[$2 + 16 >> 2];
 HEAP32[$1 + 16 >> 2] = $3;
 HEAP32[$1 + 20 >> 2] = $0;
 $3 = HEAP32[$2 + 12 >> 2];
 $0 = HEAP32[$2 + 8 >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 12 >> 2] = $3;
 $0 = jsvNewFromString($1);
 __stack_pointer = $1 + 32 | 0;
 return $0;
}

function tf_invoke($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 24 >> 2];
 HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 20 >> 2];
 HEAP32[$1 + 12 >> 2] = tflite__MicroInterpreter__Invoke_28_29(HEAP32[$1 + 20 >> 2] + 400 | 0);
 label$1: {
  if (HEAP32[$1 + 12 >> 2]) {
   tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$1 + 16 >> 2], 106699, 0);
   HEAP8[$1 + 31 | 0] = 0;
   break label$1;
  }
  HEAP8[$1 + 31 | 0] = 1;
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP8[$1 + 31 | 0] & 1;
}

function _jswrap_io_peek($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  if (HEAP32[$2 + 4 >> 2] == 1) {
   HEAP32[$2 + 12 >> 2] = HEAPU8[HEAP32[$2 + 8 >> 2]];
   break label$1;
  }
  if (HEAP32[$2 + 4 >> 2] == 2) {
   HEAP32[$2 + 12 >> 2] = HEAPU8[HEAP32[$2 + 8 >> 2]] | HEAPU8[HEAP32[$2 + 8 >> 2] + 1 | 0] << 8;
   break label$1;
  }
  if (HEAP32[$2 + 4 >> 2] == 4) {
   HEAP32[$2 + 12 >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = 0;
 }
 return HEAP32[$2 + 12 >> 2];
}

function jswIsBuiltInObject($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = 140491;
 HEAP32[$1 >> 2] = HEAP32[$1 + 4 >> 2];
 label$1: {
  while (1) {
   if (HEAPU8[HEAP32[$1 >> 2]]) {
    if (strcmp(HEAP32[$1 >> 2], HEAP32[$1 + 8 >> 2])) {
     HEAP32[$1 >> 2] = (strlen(HEAP32[$1 >> 2]) + 1 | 0) + HEAP32[$1 >> 2];
     continue;
    } else {
     HEAP8[$1 + 15 | 0] = 1;
     break label$1;
    }
   }
   break;
  }
  HEAP8[$1 + 15 | 0] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP8[$1 + 15 | 0] & 1;
}

function jswrap_object_values_or_entries($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP8[$2 + 23 | 0] = $1;
 HEAP32[$2 + 12 >> 2] = jsvNewEmptyArray();
 HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 24 >> 2];
 label$1: {
  if (!HEAP32[$2 + 12 >> 2]) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  jswrap_object_keys_or_property_names_cb(HEAP32[$2 + 24 >> 2], 0, HEAP8[$2 + 23 | 0] & 1 ? 592 : 593, $2 + 12 | 0);
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function tflite__MicroMutableOpResolver_9u___AddDepthwiseConv2D_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 44 >> 2] = $0;
 $0 = HEAP32[$1 + 44 >> 2];
 tflite__ops__micro__Register_DEPTHWISE_CONV_2D_28_29($1 + 8 | 0);
 $0 = tflite__MicroMutableOpResolver_9u___AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration_20const__2c_20TfLiteStatus_20_28__29_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29_29($0, 4, $1 + 8 | 0, 701);
 __stack_pointer = $1 + 48 | 0;
 return $0;
}

function jsvSetCharInString($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 44 >> 2] = $0;
 HEAP32[$4 + 40 >> 2] = $1;
 HEAP8[$4 + 39 | 0] = $2;
 HEAP8[$4 + 38 | 0] = $3;
 if (jsvIsString(HEAP32[$4 + 44 >> 2]) & 1) {
  jsvStringIteratorNew($4, HEAP32[$4 + 44 >> 2], HEAP32[$4 + 40 >> 2]);
  if (HEAP8[$4 + 38 | 0] & 1) {
   HEAP8[$4 + 39 | 0] = jsvStringIteratorGetChar_1($4) << 24 >> 24 | HEAP8[$4 + 39 | 0];
  }
  jsvStringIteratorSetChar($4, HEAP8[$4 + 39 | 0]);
  jsvStringIteratorFree_1($4);
 }
 __stack_pointer = $4 + 48 | 0;
}

function tflite__MicroMutableOpResolver_9u___AddFullyConnected_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 44 >> 2] = $0;
 $0 = HEAP32[$1 + 44 >> 2];
 tflite__ops__micro__Register_FULLY_CONNECTED_28_29($1 + 8 | 0);
 $0 = tflite__MicroMutableOpResolver_9u___AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration_20const__2c_20TfLiteStatus_20_28__29_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29_29($0, 9, $1 + 8 | 0, 704);
 __stack_pointer = $1 + 48 | 0;
 return $0;
}

function jsvHasCharacterData($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63;
  label$3: {
   if (HEAP8[$1 + 7 | 0] >= 18) {
    $0 = 1;
    if (HEAP8[$1 + 7 | 0] <= 39) {
     break label$3;
    }
   }
   $2 = HEAP8[$1 + 7 | 0] >= 40 ? HEAP8[$1 + 7 | 0] <= 49 : $2;
   $0 = $2;
  }
  HEAP8[$1 + 15 | 0] = $0 & 1;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function _jswrap_banglejs_setVibration() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 12 >> 2] = 0;
 if (HEAP32[85796] & 128) {
  HEAP32[$0 + 12 >> 2] = HEAPU16[171661];
 }
 label$2: {
  if (!(HEAPU8[343320] | HEAP32[$0 + 12 >> 2])) {
   jshPinOutput(13, 0);
   break label$2;
  }
  label$4: {
   if (!HEAP32[$0 + 12 >> 2]) {
    jshPinAnalogOutput(13, +HEAPU8[343320] * .6 / 255 + .4, 1e3, 0);
    break label$4;
   }
   jshPinAnalogOutput(13, +HEAPU8[343320] * .6 / 255 + .2, +HEAP32[$0 + 12 >> 2], 0);
  }
 }
 __stack_pointer = $0 + 16 | 0;
}

function tflite__MicroMutableOpResolver_9u___AddAveragePool2D_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 44 >> 2] = $0;
 $0 = HEAP32[$1 + 44 >> 2];
 tflite__ops__micro__Register_AVERAGE_POOL_2D_28_29($1 + 8 | 0);
 $0 = tflite__MicroMutableOpResolver_9u___AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration_20const__2c_20TfLiteStatus_20_28__29_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29_29($0, 1, $1 + 8 | 0, 703);
 __stack_pointer = $1 + 48 | 0;
 return $0;
}

function lcdST7789_scrollCmd() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 12 >> 2] = HEAP32[85780] + HEAP32[85781];
 if (HEAP32[85782] == 2) {
  HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 120;
 }
 if (HEAP32[$0 + 12 >> 2] >= 320) {
  HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] - 320;
 }
 if (HEAP32[$0 + 12 >> 2] < 0) {
  HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 320;
 }
 HEAP8[$0 + 10 | 0] = HEAP32[$0 + 12 >> 2] >> 8;
 HEAP8[$0 + 11 | 0] = HEAP32[$0 + 12 >> 2];
 lcdST7789_cmd(55, 2, $0 + 10 | 0);
 __stack_pointer = $0 + 16 | 0;
}

function jspParse() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 12 >> 2] = 0;
 while (1) {
  $1 = 0;
  $1 = HEAP32[46755] & 80 ? $1 : HEAP16[HEAP32[38615] + 2 >> 1] != 0;
  if ($1) {
   jsvUnLock(HEAP32[$0 + 12 >> 2]);
   HEAP32[$0 + 12 >> 2] = jspeBlockOrStatement();
   while (1) {
    if (HEAP16[HEAP32[38615] + 2 >> 1] == 59) {
     jslGetNextToken();
     continue;
    }
    break;
   }
   jsvCheckReferenceError(HEAP32[$0 + 12 >> 2]);
   continue;
  }
  break;
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function tflite__MicroMutableOpResolver_9u___AddMaxPool2D_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 44 >> 2] = $0;
 $0 = HEAP32[$1 + 44 >> 2];
 tflite__ops__micro__Register_MAX_POOL_2D_28_29($1 + 8 | 0);
 $0 = tflite__MicroMutableOpResolver_9u___AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration_20const__2c_20TfLiteStatus_20_28__29_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29_29($0, 17, $1 + 8 | 0, 703);
 __stack_pointer = $1 + 48 | 0;
 return $0;
}

function jsvNewFromInteger($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = jsvNewWithFlags(10);
 label$1: {
  if (!HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 4 >> 2];
  $2 = HEAP32[$1 + 8 >> 2];
  HEAP8[$0 | 0] = $2;
  HEAP8[$0 + 1 | 0] = $2 >>> 8;
  HEAP8[$0 + 2 | 0] = $2 >>> 16;
  HEAP8[$0 + 3 | 0] = $2 >>> 24;
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvAppendStringBuf($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP32[$3 + 36 >> 2] = $2;
 jsvStringIteratorNew($3, HEAP32[$3 + 44 >> 2], 0);
 jsvStringIteratorGotoEnd($3);
 while (1) {
  if (HEAP32[$3 + 36 >> 2]) {
   $0 = HEAP32[$3 + 40 >> 2];
   HEAP32[$3 + 40 >> 2] = $0 + 1;
   jsvStringIteratorAppend($3, HEAP8[$0 | 0]);
   HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 36 >> 2] - 1;
   continue;
  }
  break;
 }
 jsvStringIteratorFree_1($3);
 __stack_pointer = $3 + 48 | 0;
}

function jsonNewLine($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 FUNCTION_TABLE[HEAP32[$4 + 20 >> 2]](129587, HEAP32[$4 + 16 >> 2]);
 HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 28 >> 2] >>> 14;
 while (1) {
  $0 = HEAP32[$4 + 12 >> 2];
  HEAP32[$4 + 12 >> 2] = $0 - 1;
  if ($0) {
   FUNCTION_TABLE[HEAP32[$4 + 20 >> 2]](HEAP32[$4 + 24 >> 2], HEAP32[$4 + 16 >> 2]);
   continue;
  }
  break;
 }
 __stack_pointer = $4 + 32 | 0;
}

function tflite__MicroMutableOpResolver_9u___AddDequantize_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 44 >> 2] = $0;
 $0 = HEAP32[$1 + 44 >> 2];
 tflite__ops__micro__Register_DEQUANTIZE_28_29($1 + 8 | 0);
 $0 = tflite__MicroMutableOpResolver_9u___AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration_20const__2c_20TfLiteStatus_20_28__29_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29_29($0, 6, $1 + 8 | 0, 707);
 __stack_pointer = $1 + 48 | 0;
 return $0;
}

function jsvNewFromBool($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 11 | 0] = $0;
 HEAP32[$1 + 4 >> 2] = jsvNewWithFlags(12);
 label$1: {
  if (!HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 4 >> 2];
  $2 = HEAP8[$1 + 11 | 0] & 1;
  HEAP8[$0 | 0] = $2;
  HEAP8[$0 + 1 | 0] = $2 >>> 8;
  HEAP8[$0 + 2 | 0] = $2 >>> 16;
  HEAP8[$0 + 3 | 0] = $2 >>> 24;
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvIsBasic($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63;
  label$3: {
   if (HEAP8[$1 + 7 | 0] >= 10) {
    $0 = 1;
    if (HEAP8[$1 + 7 | 0] <= 17) {
     break label$3;
    }
   }
   $2 = HEAP8[$1 + 7 | 0] >= 18 ? HEAP8[$1 + 7 | 0] <= 39 : $2;
   $0 = $2;
  }
  HEAP8[$1 + 15 | 0] = $0 & 1;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function chtod($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 11 | 0] = $0;
 label$1: {
  if (!(HEAP8[$1 + 11 | 0] < 48 | HEAP8[$1 + 11 | 0] > 57)) {
   HEAP32[$1 + 12 >> 2] = HEAP8[$1 + 11 | 0] - 48;
   break label$1;
  }
  if (!(HEAP8[$1 + 11 | 0] < 97 | HEAP8[$1 + 11 | 0] > 122)) {
   HEAP32[$1 + 12 >> 2] = HEAP8[$1 + 11 | 0] - 87;
   break label$1;
  }
  if (!(HEAP8[$1 + 11 | 0] < 65 | HEAP8[$1 + 11 | 0] > 90)) {
   HEAP32[$1 + 12 >> 2] = HEAP8[$1 + 11 | 0] - 55;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = -1;
 }
 return HEAP32[$1 + 12 >> 2];
}

function tflite__MicroMutableOpResolver_9u___AddQuantize_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 44 >> 2] = $0;
 $0 = HEAP32[$1 + 44 >> 2];
 tflite__ops__micro__Register_QUANTIZE_28_29($1 + 8 | 0);
 $0 = tflite__MicroMutableOpResolver_9u___AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration_20const__2c_20TfLiteStatus_20_28__29_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29_29($0, 114, $1 + 8 | 0, 706);
 __stack_pointer = $1 + 48 | 0;
 return $0;
}

function i2c_rd($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 while (1) {
  if (HEAP32[$2 + 4 >> 2] < 8) {
   HEAP32[$2 >> 2] = HEAP32[$2 >> 2] << 1 | i2c_rd_bit(HEAP32[$2 + 12 >> 2]) & 1;
   HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
   continue;
  }
  break;
 }
 i2c_wr_bit(HEAP32[$2 + 12 >> 2], HEAP8[$2 + 11 | 0] & 1);
 i2c_pin_wr1(HEAPU8[HEAP32[$2 + 12 >> 2] + 1 | 0]);
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 >> 2];
}

function jsiSetTimeout($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAPF64[$2 + 16 >> 3] = $1;
 HEAP32[$2 + 12 >> 2] = jsvNewNativeFunction(HEAP32[$2 + 24 >> 2], 0);
 label$1: {
  if (!HEAP32[$2 + 12 >> 2]) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 8 >> 2] = jswrap_interface_setTimeout(HEAP32[$2 + 12 >> 2], HEAPF64[$2 + 16 >> 3], 0);
  jsvUnLock(HEAP32[$2 + 12 >> 2]);
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 8 >> 2];
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jsvNewTypedArray($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP8[$2 + 27 | 0] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = jsvNewFromInteger(HEAP32[$2 + 20 >> 2]);
 label$1: {
  if (!HEAP32[$2 + 16 >> 2]) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = jswrap_typedarray_constructor(HEAPU8[$2 + 27 | 0], HEAP32[$2 + 16 >> 2], 0, 0);
  jsvUnLock(HEAP32[$2 + 16 >> 2]);
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function tflite__MicroMutableOpResolver_9u___AddSoftmax_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 44 >> 2] = $0;
 $0 = HEAP32[$1 + 44 >> 2];
 tflite__ops__micro__Register_SOFTMAX_28_29($1 + 8 | 0);
 $0 = tflite__MicroMutableOpResolver_9u___AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration_20const__2c_20TfLiteStatus_20_28__29_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29_29($0, 25, $1 + 8 | 0, 705);
 __stack_pointer = $1 + 48 | 0;
 return $0;
}

function tflite__MicroMutableOpResolver_9u___AddReshape_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 44 >> 2] = $0;
 $0 = HEAP32[$1 + 44 >> 2];
 tflite__ops__micro__Register_RESHAPE_28_29($1 + 8 | 0);
 $0 = tflite__MicroMutableOpResolver_9u___AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration_20const__2c_20TfLiteStatus_20_28__29_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29_29($0, 22, $1 + 8 | 0, 708);
 __stack_pointer = $1 + 48 | 0;
 return $0;
}

function signed_20char_20const__20std____2__min_signed_20char__28signed_20char_20const__2c_20signed_20char_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = signed_20char_20const__20std____2__min_signed_20char_2c_20std____2____less_signed_20char_2c_20signed_20char___28signed_20char_20const__2c_20signed_20char_20const__2c_20std____2____less_signed_20char_2c_20signed_20char__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function signed_20char_20const__20std____2__max_signed_20char__28signed_20char_20const__2c_20signed_20char_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = signed_20char_20const__20std____2__max_signed_20char_2c_20std____2____less_signed_20char_2c_20signed_20char___28signed_20char_20const__2c_20signed_20char_20const__2c_20std____2____less_signed_20char_2c_20signed_20char__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function jswrap_graphics_getWidthOrHeight($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 96 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 88 >> 2] = $0;
 HEAP8[$2 + 87 | 0] = $1;
 label$1: {
  if (!(graphicsGetFromVar($2 + 8 | 0, HEAP32[$2 + 88 >> 2]) & 1)) {
   HEAP32[$2 + 92 >> 2] = 0;
   break label$1;
  }
  label$3: {
   if (HEAP8[$2 + 87 | 0] & 1) {
    $0 = graphicsGetHeight($2 + 8 | 0) & 65535;
    break label$3;
   }
   $0 = graphicsGetWidth($2 + 8 | 0) & 65535;
  }
  HEAP32[$2 + 92 >> 2] = $0;
 }
 __stack_pointer = $2 + 96 | 0;
 return HEAP32[$2 + 92 >> 2];
}

function jsvAddFunctionParameter($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 if (!HEAP32[$3 + 8 >> 2]) {
  HEAP32[$3 + 8 >> 2] = jsvNewFromEmptyString_1();
 }
 if (HEAP32[$3 + 8 >> 2]) {
  HEAP32[$3 + 8 >> 2] = jsvMakeFunctionParameter(HEAP32[$3 + 8 >> 2]);
  jsvSetValueOfName(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
  jsvAddName(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
  jsvUnLock(HEAP32[$3 + 8 >> 2]);
 }
 __stack_pointer = $3 + 16 | 0;
}

function jsiIsInHistory($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 HEAP32[$1 + 20 >> 2] = jsiGetHistory();
 label$1: {
  if (!HEAP32[$1 + 20 >> 2]) {
   HEAP8[$1 + 31 | 0] = 0;
   break label$1;
  }
  HEAP32[$1 + 16 >> 2] = jsvGetIndexOf(HEAP32[$1 + 20 >> 2], HEAP32[$1 + 24 >> 2], 1);
  HEAP8[$1 + 15 | 0] = HEAP32[$1 + 16 >> 2] != 0;
  jsvUnLock2(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 20 >> 2]);
  HEAP8[$1 + 31 | 0] = HEAP8[$1 + 15 | 0] & 1;
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP8[$1 + 31 | 0] & 1;
}

function int_20const__20std____2__min_int_2c_20std____2____less_int_2c_20int___28int_20const__2c_20int_20const__2c_20std____2____less_int_2c_20int__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 4 >> 2] = $0;
 HEAP32[$2 >> 2] = $1;
 label$1: {
  if (std____2____less_int_2c_20int___operator_28_29_28int_20const__2c_20int_20const__29_20const($2 + 8 | 0, HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2]) & 1) {
   $0 = HEAP32[$2 >> 2];
   break label$1;
  }
  $0 = HEAP32[$2 + 4 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function int_20const__20std____2__max_int_2c_20std____2____less_int_2c_20int___28int_20const__2c_20int_20const__2c_20std____2____less_int_2c_20int__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 4 >> 2] = $0;
 HEAP32[$2 >> 2] = $1;
 label$1: {
  if (std____2____less_int_2c_20int___operator_28_29_28int_20const__2c_20int_20const__29_20const($2 + 8 | 0, HEAP32[$2 + 4 >> 2], HEAP32[$2 >> 2]) & 1) {
   $0 = HEAP32[$2 >> 2];
   break label$1;
  }
  $0 = HEAP32[$2 + 4 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function tflite__MicroMutableOpResolver_9u___AddConv2D_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 44 >> 2] = $0;
 $0 = HEAP32[$1 + 44 >> 2];
 tflite__ops__micro__Register_CONV_2D_28_29($1 + 8 | 0);
 $0 = tflite__MicroMutableOpResolver_9u___AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration_20const__2c_20TfLiteStatus_20_28__29_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29_29($0, 3, $1 + 8 | 0, 702);
 __stack_pointer = $1 + 48 | 0;
 return $0;
}

function lcdSetPixel_ArrayBuffer_flat8($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $1 = HEAP32[$4 + 12 >> 2];
 $0 = HEAP32[$4 + 12 >> 2];
 HEAP8[(HEAP32[$4 + 8 >> 2] + Math_imul(HEAP32[$4 + 4 >> 2], HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) | 0) + (HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24)) | 0] = HEAP32[$4 >> 2];
}

function jswrap_pin_toggle($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP8[$1 + 7 | 0] = jshGetPinFromVar(HEAP32[$1 + 8 >> 2]);
 label$1: {
  if (!(jshIsPinValid(HEAPU8[$1 + 7 | 0]) & 1)) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  HEAP8[$1 + 6 | 0] = ((jshPinGetState(HEAPU8[$1 + 7 | 0]) & 16) != 0 ^ -1) & 1;
  jshPinOutput(HEAPU8[$1 + 7 | 0], HEAP8[$1 + 6 | 0] & 1);
  HEAP8[$1 + 15 | 0] = HEAP8[$1 + 6 | 0] & 1;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP8[$1 + 15 | 0] & 1;
}

function lcdInit_JS($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 jsvObjectSetChild(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 102791, HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 jsvObjectSetChild(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 98086, HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function jsvFindOrCreateRoot() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP16[$0 + 10 >> 1] = 1;
 label$1: {
  while (1) {
   if (HEAPU16[$0 + 10 >> 1] <= 2500) {
    if (jsvIsRoot(jsvGetAddressOf(HEAPU16[$0 + 10 >> 1])) & 1) {
     HEAP32[$0 + 12 >> 2] = jsvLock(HEAPU16[$0 + 10 >> 1]);
     break label$1;
    } else {
     HEAP16[$0 + 10 >> 1] = HEAPU16[$0 + 10 >> 1] + 1;
     continue;
    }
   }
   break;
  }
  HEAP32[$0 + 12 >> 2] = jsvRef(jsvNewWithFlags(1));
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function jswrap_object_addEventListener($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP16[$4 + 18 >> 1] = $3;
 HEAP32[$4 + 12 >> 2] = jsvNewFromString(HEAP32[$4 + 24 >> 2]);
 HEAP32[$4 + 8 >> 2] = jsvNewNativeFunction(HEAP32[$4 + 20 >> 2], HEAPU16[$4 + 18 >> 1]);
 jswrap_object_on(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2]);
 jsvUnLock2(HEAP32[$4 + 8 >> 2], HEAP32[$4 + 12 >> 2]);
 __stack_pointer = $4 + 32 | 0;
}

function isValidBPP($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = 1;
 label$1: {
  if (HEAP32[$1 + 12 >> 2] == 1) {
   break label$1;
  }
  $0 = 1;
  if (HEAP32[$1 + 12 >> 2] == 2) {
   break label$1;
  }
  $0 = 1;
  if (HEAP32[$1 + 12 >> 2] == 4) {
   break label$1;
  }
  $0 = 1;
  if (HEAP32[$1 + 12 >> 2] == 8) {
   break label$1;
  }
  $0 = 1;
  if (HEAP32[$1 + 12 >> 2] == 16) {
   break label$1;
  }
  $0 = 1;
  if (HEAP32[$1 + 12 >> 2] == 24) {
   break label$1;
  }
  $0 = HEAP32[$1 + 12 >> 2] == 32;
 }
 return $0;
}

function tflite__internal__ContextHelper__GetTensor_28TfLiteContext_20const__2c_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2];
 $0 = HEAP32[HEAP32[$2 + 4 >> 2] >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, HEAP32[HEAP32[$2 + 4 >> 2] + 8 >> 2], HEAP32[HEAP32[$2 + 4 >> 2] + 12 >> 2], HEAP32[$2 + 8 >> 2]) | 0;
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function jsiMoveCursorChar($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 if (HEAP32[$3 + 24 >> 2] != HEAP32[$3 + 20 >> 2]) {
  jsvGetLineAndCol(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2], $3 + 12 | 0, $3 + 16 | 0);
  jsvGetLineAndCol(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 20 >> 2], $3 + 4 | 0, $3 + 8 | 0);
  jsiMoveCursor(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 }
 __stack_pointer = $3 + 32 | 0;
}

function jsiExecuteEventCallbackOn($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[46747], HEAP32[$4 + 28 >> 2]);
 HEAP8[$4 + 11 | 0] = jsiExecuteEventCallbackName(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]) & 1;
 jsvUnLock(HEAP32[$4 + 12 >> 2]);
 __stack_pointer = $4 + 32 | 0;
 return HEAP8[$4 + 11 | 0] & 1;
}

function _jswrap_banglejs_getHealthStatusObject($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvNewObject();
 if (HEAP32[$1 + 8 >> 2]) {
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 8 >> 2], 97789, jsvNewFromInteger(HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2] / HEAPU16[HEAP32[$1 + 12 >> 2] + 8 >> 1] | 0));
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 8 >> 2], 100214, jsvNewFromInteger(HEAPU16[HEAP32[$1 + 12 >> 2] + 10 >> 1]));
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function tflite__internal__ContextHelper__ContextHelper_28tflite__ErrorReporter__2c_20tflite__MicroAllocator__2c_20tflite__Model_20const__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$4 + 4 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$4 + 8 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$0 + 16 >> 2] = -1;
 return $0 | 0;
}

function jslInit($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jsvLockAgain(HEAP32[$1 + 12 >> 2]);
 HEAP32[HEAP32[38615] + 84 >> 2] = $0;
 HEAP16[HEAP32[38615] + 2 >> 1] = 0;
 HEAP32[HEAP32[38615] + 4 >> 2] = 0;
 HEAP32[HEAP32[38615] + 8 >> 2] = 0;
 HEAP8[HEAP32[38615] + 80 | 0] = 0;
 HEAP32[HEAP32[38615] + 76 >> 2] = 0;
 jsvStringIteratorNew(HEAP32[38615] + 88 | 0, HEAP32[HEAP32[38615] + 84 >> 2], 0);
 jsvUnLock(HEAP32[HEAP32[38615] + 100 >> 2]);
 jslPreload();
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_graphics_fillCircle($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = jswrap_graphics_fillEllipse(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2] - HEAP32[$4 >> 2] | 0, HEAP32[$4 + 4 >> 2] - HEAP32[$4 >> 2] | 0, HEAP32[$4 + 8 >> 2] + HEAP32[$4 >> 2] | 0, HEAP32[$4 + 4 >> 2] + HEAP32[$4 >> 2] | 0);
 __stack_pointer = $4 + 16 | 0;
 return $0 | 0;
}

function jswrap_graphics_drawCircle($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = jswrap_graphics_drawEllipse(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2] - HEAP32[$4 >> 2] | 0, HEAP32[$4 + 4 >> 2] - HEAP32[$4 >> 2] | 0, HEAP32[$4 + 8 >> 2] + HEAP32[$4 >> 2] | 0, HEAP32[$4 + 4 >> 2] + HEAP32[$4 >> 2] | 0);
 __stack_pointer = $4 + 16 | 0;
 return $0 | 0;
}

function jspGetPrototype($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!(jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1)) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 8 >> 2], 107914);
  if (jsvIsObject(HEAP32[$1 + 4 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
   break label$1;
  }
  jsvUnLock(HEAP32[$1 + 4 >> 2]);
  HEAP32[$1 + 12 >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsfListFiles($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = jsvNewEmptyArray();
 label$1: {
  if (!HEAP32[$3 + 12 >> 2]) {
   HEAP32[$3 + 28 >> 2] = 0;
   break label$1;
  }
  jsfBankListFiles(HEAP32[$3 + 12 >> 2], 134217728, HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], HEAP32[$3 + 16 >> 2], 0);
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 12 >> 2];
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function jspIsConstructor($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = jsvObjectGetChildIfExists(HEAP32[46747], HEAP32[$2 + 20 >> 2]);
 label$1: {
  if (!HEAP32[$2 + 16 >> 2]) {
   HEAP8[$2 + 31 | 0] = 0;
   break label$1;
  }
  HEAP8[$2 + 15 | 0] = HEAP32[$2 + 16 >> 2] == HEAP32[$2 + 24 >> 2];
  jsvUnLock(HEAP32[$2 + 16 >> 2]);
  HEAP8[$2 + 31 | 0] = HEAP8[$2 + 15 | 0] & 1;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP8[$2 + 31 | 0] & 1;
}

function getDay($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = 0;
 label$1: {
  while (1) {
   if (HEAP32[$1 + 4 >> 2] < 7) {
    if (strcmp(HEAP32[$1 + 8 >> 2], HEAP32[38467] + (HEAP32[$1 + 4 >> 2] << 2) | 0)) {
     HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
     continue;
    } else {
     HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
     break label$1;
    }
   }
   break;
  }
  HEAP32[$1 + 12 >> 2] = -1;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jswIdle() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP8[$0 + 15 | 0] = 0;
 if (jswrap_banglejs_idle() & 1) {
  HEAP8[$0 + 15 | 0] = 1;
 }
 if (jswrap_pipe_idle() & 1) {
  HEAP8[$0 + 15 | 0] = 1;
 }
 if (jswrap_serial_idle() & 1) {
  HEAP8[$0 + 15 | 0] = 1;
 }
 if (jswrap_waveform_idle() & 1) {
  HEAP8[$0 + 15 | 0] = 1;
 }
 if (jswrap_graphics_idle() & 1) {
  HEAP8[$0 + 15 | 0] = 1;
 }
 if (jswrap_terminal_idle() & 1) {
  HEAP8[$0 + 15 | 0] = 1;
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP8[$0 + 15 | 0] & 1;
}

function jsvUnRef($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP16[$1 + 10 >> 1] = jsvGetRefs(HEAP32[$1 + 12 >> 2]);
 if (HEAPU16[$1 + 10 >> 1] < 255) {
  HEAP16[$1 + 10 >> 1] = HEAPU16[$1 + 10 >> 1] - 1;
  jsvSetRefs(HEAP32[$1 + 12 >> 2], HEAPU16[$1 + 10 >> 1]);
  label$2: {
   if (HEAPU16[$1 + 10 >> 1]) {
    break label$2;
   }
   if (jsvGetLocks(HEAP32[$1 + 12 >> 2]) & 255) {
    break label$2;
   }
   jsvUnLockFreeIfNeeded(HEAP32[$1 + 12 >> 2]);
  }
 }
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_promise_reject($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 >> 2] = jspromise_create_prombox($1 + 4 | 0);
 label$1: {
  if (!HEAP32[$1 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2]) {
   _jswrap_prombox_queuereject(HEAP32[$1 >> 2], HEAP32[$1 + 8 >> 2]);
  }
  jsvUnLock(HEAP32[$1 >> 2]);
  HEAP32[$1 + 12 >> 2] = jsvLockAgainSafe(HEAP32[$1 + 4 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsfFindFileFromAddr($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  if (!(HEAPU32[$2 + 8 >> 2] < 134217728 | HEAPU32[$2 + 8 >> 2] > 138412032)) {
   HEAP32[$2 >> 2] = jsfBankFindFileFromAddr(134217728, 138412032, HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]);
   if (HEAP32[$2 >> 2]) {
    HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
    break label$1;
   }
  }
  HEAP32[$2 + 12 >> 2] = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function jsvCheckReferenceError($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1: {
  if (!(jsvIsBasicName(HEAP32[$1 + 12 >> 2]) & 1)) {
   break label$1;
  }
  if (jsvGetRefs(HEAP32[$1 + 12 >> 2]) & 65535) {
   break label$1;
  }
  if (jsvIsNewChild(HEAP32[$1 + 12 >> 2]) & 1) {
   break label$1;
  }
  if (jsvGetFirstChild(HEAP32[$1 + 12 >> 2]) & 65535) {
   break label$1;
  }
  HEAP32[$1 >> 2] = HEAP32[$1 + 12 >> 2];
  jsExceptionHere(5, 106586, $1);
 }
 __stack_pointer = $1 + 16 | 0;
}

function std____2____compressed_pair_elem_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_2c_201_2c_20false_____compressed_pair_elem_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_2c_20void__28tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
 return $0;
}

function jsiShouldExecuteWatch($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 HEAP32[$2 + 4 >> 2] = jsvObjectGetIntegerChild(HEAP32[$2 + 12 >> 2], 105312);
 __stack_pointer = $2 + 16 | 0;
 $0 = 1;
 label$1: {
  if (!HEAP32[$2 + 4 >> 2]) {
   break label$1;
  }
  if (HEAP8[$2 + 11 | 0] & 1) {
   $0 = 1;
   if (HEAP32[$2 + 4 >> 2] > 0) {
    break label$1;
   }
  }
  $3 = HEAP8[$2 + 11 | 0] & 1 ? $3 : HEAP32[$2 + 4 >> 2] < 0;
  $0 = $3;
 }
 return $0 & 1;
}

function int_20gemmlowp__SelectUsingMask_int__28int_2c_20int_2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = int_20gemmlowp__BitXor_int__28int_2c_20int_29(int_20gemmlowp__BitAnd_int__28int_2c_20int_29(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]), int_20gemmlowp__BitAnd_int__28int_2c_20int_29(int_20gemmlowp__BitNot_int__28int_29(HEAP32[$3 + 12 >> 2]), HEAP32[$3 + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function jswrap_date_setDate($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer + -64 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 60 >> 2] = $0;
 HEAP32[$2 + 56 >> 2] = $1;
 getTimeFromDateVar($2 + 24 | 0, HEAP32[$2 + 60 >> 2], 0);
 getCalendarDate($2, HEAP32[$2 + 24 >> 2]);
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 56 >> 2];
 HEAP32[$2 + 24 >> 2] = fromCalendarDate($2);
 setCorrectTimeZone($2 + 24 | 0);
 $3 = jswrap_date_setTime(HEAP32[$2 + 60 >> 2], fromTimeInDay($2 + 24 | 0));
 __stack_pointer = $2 - -64 | 0;
 return +$3;
}

function jswrap_graphics_reset($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 80 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 72 >> 2] = $0;
 label$1: {
  if (!(graphicsGetFromVar($1, HEAP32[$1 + 72 >> 2]) & 1)) {
   HEAP32[$1 + 76 >> 2] = 0;
   break label$1;
  }
  jsvUnLock(jswrap_graphics_setFontSizeX(HEAP32[$1 + 72 >> 2], 8193, 0));
  graphicsStructResetState($1);
  graphicsSetVar($1);
  HEAP32[$1 + 76 >> 2] = jswrap_graphics_setFontSizeX(HEAP32[$1 + 72 >> 2], 8193, 0);
 }
 __stack_pointer = $1 + 80 | 0;
 return HEAP32[$1 + 76 >> 2];
}

function jshPushIOCharEventHandler($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP8[$2 + 14 | 0] = $0;
 HEAP8[$2 + 13 | 0] = $1;
 label$1: {
  label$2: {
   if (HEAP8[$2 + 13 | 0] != 3) {
    break label$2;
   }
   if (HEAPU8[$2 + 14 | 0] != (jsiGetConsoleDevice() & 255)) {
    break label$2;
   }
   jsiCtrlC();
   HEAP8[$2 + 15 | 0] = 1;
   break label$1;
  }
  HEAP8[$2 + 15 | 0] = jswOnCharEvent(HEAPU8[$2 + 14 | 0], HEAP8[$2 + 13 | 0]) & 1;
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP8[$2 + 15 | 0] & 1;
}

function jshPinGetValue($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 HEAP32[$1 + 8 >> 2] = 154284;
 $0 = HEAP32[$1 + 8 >> 2];
 HEAP8[$1 + 6 | 0] = 105;
 HEAP8[$1 + 7 | 0] = 0;
 HEAP32[$1 >> 2] = HEAPU8[$1 + 15 | 0];
 HEAP8[$1 + 14 | 0] = (emscripten_asm_const_int($0 | 0, $1 + 6 | 0, $1 | 0) | 0) != 0;
 if (HEAPU8[Math_imul(HEAPU8[$1 + 15 | 0], 3) + 145056 | 0] & 16) {
  HEAP8[$1 + 14 | 0] = (HEAPU8[$1 + 14 | 0] ^ -1) & 1;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP8[$1 + 14 | 0] & 1;
}

function tflite__ops__micro__activations__SoftmaxInit_28TfLiteContext__2c_20char_20const__2c_20unsigned_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 label$1: {
  if (!HEAP32[HEAP32[$3 + 12 >> 2] + 56 >> 2]) {
   break label$1;
  }
 }
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$3 + 12 >> 2] + 56 >> 2]](HEAP32[$3 + 12 >> 2], 56) | 0;
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function tflite___28anonymous_20namespace_29__OpNameFromRegistration_28TfLiteRegistration_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (HEAP32[HEAP32[$1 + 8 >> 2] + 20 >> 2] == 32) {
   HEAP32[$1 + 12 >> 2] = HEAP32[HEAP32[$1 + 8 >> 2] + 24 >> 2];
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = tflite__EnumNameBuiltinOperator_28tflite__BuiltinOperator_29(HEAP32[HEAP32[$1 + 8 >> 2] + 20 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function graphicsBlendGfxColor($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 $1 = HEAP32[$2 + 12 >> 2];
 $0 = graphicsBlendColor(HEAP32[$2 + 12 >> 2], HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24), HEAPU8[$1 + 21 | 0] | HEAPU8[$1 + 22 | 0] << 8 | (HEAPU8[$1 + 23 | 0] << 16 | HEAPU8[$1 + 24 | 0] << 24), HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function tflite__MicroAllocator__AllocatePersistentTfLiteTensorInternal_28tflite__Model_20const__2c_20TfLiteEvalTensor__2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[HEAP32[$4 + 12 >> 2] + 4 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, 40, 4) | 0;
 __stack_pointer = $4 + 16 | 0;
 return $0 | 0;
}

function tflite__ops__micro__fully_connected__Init_28TfLiteContext__2c_20char_20const__2c_20unsigned_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 label$1: {
  if (!HEAP32[HEAP32[$3 + 12 >> 2] + 56 >> 2]) {
   break label$1;
  }
 }
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$3 + 12 >> 2] + 56 >> 2]](HEAP32[$3 + 12 >> 2], 32) | 0;
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function jsvIsFunction($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63;
  $0 = 1;
  label$3: {
   if (HEAP8[$1 + 7 | 0] == 7) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 9) {
    break label$3;
   }
   $0 = HEAP8[$1 + 7 | 0] == 8;
  }
  HEAP8[$1 + 15 | 0] = $0;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function jslMatchError($0) {
 var $1 = 0;
 $1 = __stack_pointer - 96 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 92 >> 2] = $0;
 jslGetTokenString($1 + 48 | 0, 30);
 jslTokenAsString(HEAP32[$1 + 92 >> 2], $1 + 16 | 0, 30);
 HEAP32[$1 + 12 >> 2] = HEAP32[HEAP32[38615] + 8 >> 2];
 HEAP32[HEAP32[38615] + 8 >> 2] = HEAP32[HEAP32[38615] + 4 >> 2];
 HEAP32[$1 + 4 >> 2] = $1 + 16;
 HEAP32[$1 >> 2] = $1 + 48;
 jsExceptionHere(2, 100803, $1);
 HEAP32[HEAP32[38615] + 8 >> 2] = HEAP32[$1 + 12 >> 2];
 jslGetNextToken();
 __stack_pointer = $1 + 96 | 0;
}

function flatbuffers__Vector_unsigned_20char__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_unsigned_20char__20const___28unsigned_20short_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = flatbuffers__Vector_unsigned_20char__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_unsigned_20char__20const___28unsigned_20short_29(HEAP32[$2 + 12 >> 2], HEAPU16[$2 + 10 >> 1]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__OperatorCode____Get_28unsigned_20int_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = flatbuffers__IndirectHelper_flatbuffers__Offset_tflite__OperatorCode____Read_28unsigned_20char_20const__2c_20unsigned_20int_29(flatbuffers__Vector_flatbuffers__Offset_tflite__OperatorCode____Data_28_29_20const(HEAP32[$2 + 12 >> 2]), HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function tflite__ops__micro__depthwise_conv__Init_28TfLiteContext__2c_20char_20const__2c_20unsigned_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 label$1: {
  if (!HEAP32[HEAP32[$3 + 12 >> 2] + 56 >> 2]) {
   break label$1;
  }
 }
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$3 + 12 >> 2] + 56 >> 2]](HEAP32[$3 + 12 >> 2], 52) | 0;
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function tflite__internal__ContextHelper__ReportOpError_28TfLiteContext__2c_20char_20const__2c_20____29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = HEAP32[HEAP32[$3 + 12 >> 2] + 12 >> 2];
 HEAP32[$3 >> 2] = $2;
 $0 = HEAP32[HEAP32[$3 + 4 >> 2] + 4 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$3 + 8 >> 2], HEAP32[$3 >> 2]) | 0;
 __stack_pointer = $3 + 16 | 0;
}

function jsvGetChildren($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP16[$1 + 6 >> 1] = jsvGetFirstChild(HEAP32[$1 + 12 >> 2]);
 while (1) {
  if (HEAPU16[$1 + 6 >> 1]) {
   HEAP32[$1 >> 2] = jsvLock(HEAPU16[$1 + 6 >> 1]);
   HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
   HEAP16[$1 + 6 >> 1] = jsvGetNextSibling(HEAP32[$1 >> 2]);
   jsvUnLock(HEAP32[$1 >> 2]);
   continue;
  }
  break;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jsiHandleEnd() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 12 >> 2] = jsvGetStringLength(HEAP32[46763]);
 while (1) {
  $1 = 0;
  if (HEAPU32[46765] < HEAPU32[$0 + 12 >> 2]) {
   $1 = (jsvGetCharInString(HEAP32[46763], HEAP32[46765]) | 0) != 10;
  }
  if ($1) {
   if (jsiShowInputLine() & 1) {
    jsiConsolePrintChar(jsvGetCharInString(HEAP32[46763], HEAP32[46765]) << 24 >> 24);
   }
   HEAP32[46765] = HEAP32[46765] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $0 + 16 | 0;
}

function jsiFreeMoreMemory() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 8 >> 2] = jsvObjectGetChildIfExists(HEAP32[46748], 96428);
 label$1: {
  if (!HEAP32[$0 + 8 >> 2]) {
   HEAP8[$0 + 15 | 0] = 0;
   break label$1;
  }
  HEAP32[$0 + 4 >> 2] = jsvArrayPopFirst(HEAP32[$0 + 8 >> 2]);
  HEAP8[$0 + 3 | 0] = HEAP32[$0 + 4 >> 2] != 0;
  jsvUnLock2(HEAP32[$0 + 4 >> 2], HEAP32[$0 + 8 >> 2]);
  HEAP8[$0 + 15 | 0] = HEAP8[$0 + 3 | 0] & 1;
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP8[$0 + 15 | 0] & 1;
}

function std____2__unique_ptr_TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator_20bool_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[std____2____compressed_pair_TfLiteFullyConnectedParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29_20const(HEAP32[$1 + 12 >> 2]) >> 2];
 __stack_pointer = $1 + 16 | 0;
 return ($0 | 0) != 0;
}

function jswrap_string_charAt_undefined($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = _jswrap_string_charCodeAt(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2]);
 label$1: {
  if (HEAP32[$2 + 16 >> 2] < 0) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP8[$2 + 15 | 0] = HEAP32[$2 + 16 >> 2];
  HEAP32[$2 + 28 >> 2] = jsvNewStringOfLength(1, $2 + 15 | 0);
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function tflite__ops__micro__dequantize__Init_28TfLiteContext__2c_20char_20const__2c_20unsigned_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 label$1: {
  if (!HEAP32[HEAP32[$3 + 12 >> 2] + 56 >> 2]) {
   break label$1;
  }
 }
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$3 + 12 >> 2] + 56 >> 2]](HEAP32[$3 + 12 >> 2], 32) | 0;
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator_20bool_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[std____2____compressed_pair_TfLiteDepthwiseConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29_20const(HEAP32[$1 + 12 >> 2]) >> 2];
 __stack_pointer = $1 + 16 | 0;
 return ($0 | 0) != 0;
}

function jswrap_graphics_getPixel($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 96 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 88 >> 2] = $0;
 HEAP32[$3 + 84 >> 2] = $1;
 HEAP32[$3 + 80 >> 2] = $2;
 label$1: {
  if (!(graphicsGetFromVar($3 + 8 | 0, HEAP32[$3 + 88 >> 2]) & 1)) {
   HEAP32[$3 + 92 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 92 >> 2] = graphicsGetPixel($3 + 8 | 0, HEAP32[$3 + 84 >> 2], HEAP32[$3 + 80 >> 2]);
 }
 __stack_pointer = $3 + 96 | 0;
 return HEAP32[$3 + 92 >> 2];
}

function jswrap_espruino_memoryArea($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  if (!(HEAP32[$2 + 4 >> 2] >= 0 ? HEAP32[$2 + 8 >> 2] : 0)) {
   HEAP32[$2 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 >> 2] = jshFlashGetMemMapAddress(HEAP32[$2 + 8 >> 2]);
  HEAP32[$2 + 12 >> 2] = jsvNewNativeString(HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function tflite__ops__micro__quantize__Init_28TfLiteContext__2c_20char_20const__2c_20unsigned_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 label$1: {
  if (!HEAP32[HEAP32[$3 + 12 >> 2] + 56 >> 2]) {
   break label$1;
  }
 }
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$3 + 12 >> 2] + 56 >> 2]](HEAP32[$3 + 12 >> 2], 32) | 0;
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function jsiHandleIOEventForConsole($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = ((HEAPU8[HEAP32[$1 + 12 >> 2]] & 96) >>> 5 | 0) + 1;
 jsiSetBusy(1, 1);
 HEAP32[$1 + 8 >> 2] = 0;
 while (1) {
  if (HEAP32[$1 + 8 >> 2] < HEAP32[$1 + 4 >> 2]) {
   jsiHandleChar(HEAP8[HEAP32[$1 + 8 >> 2] + (HEAP32[$1 + 12 >> 2] + 1 | 0) | 0]);
   HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
   continue;
  }
  break;
 }
 jsiSetBusy(1, 0);
 __stack_pointer = $1 + 16 | 0;
}

function tflite__ops__micro__pooling__Init_28TfLiteContext__2c_20char_20const__2c_20unsigned_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 label$1: {
  if (!HEAP32[HEAP32[$3 + 12 >> 2] + 56 >> 2]) {
   break label$1;
  }
 }
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$3 + 12 >> 2] + 56 >> 2]](HEAP32[$3 + 12 >> 2], 32) | 0;
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function strncmp($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 if (!$2) {
  return 0;
 }
 $3 = HEAPU8[$0 | 0];
 label$2: {
  if (!$3) {
   break label$2;
  }
  while (1) {
   label$4: {
    $4 = HEAPU8[$1 | 0];
    if (!$4) {
     break label$4;
    }
    $2 = $2 - 1 | 0;
    if (!$2 | ($3 | 0) != ($4 | 0)) {
     break label$4;
    }
    $1 = $1 + 1 | 0;
    $3 = HEAPU8[$0 + 1 | 0];
    $0 = $0 + 1 | 0;
    if ($3) {
     continue;
    }
    break label$2;
   }
   break;
  }
  $5 = $3;
 }
 return ($5 & 255) - HEAPU8[$1 | 0] | 0;
}

function _jswrap_promise_new_reaction($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 HEAP32[$2 >> 2] = jsvNewObject();
 label$1: {
  if (!HEAP32[$2 >> 2]) {
   HEAP32[$2 + 12 >> 2] = 0;
   break label$1;
  }
  jsvObjectSetChild(HEAP32[$2 >> 2], 107791, HEAP32[$2 + 4 >> 2]);
  jsvObjectSetChild(HEAP32[$2 >> 2], 97362, HEAP32[$2 + 8 >> 2]);
  HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function tflite__MicroAllocator__MicroAllocator_28tflite__SimpleMemoryAllocator__2c_20tflite__ErrorReporter__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP32[$0 >> 2] = 147932;
 HEAP32[$0 + 4 >> 2] = HEAP32[$3 + 8 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$3 + 4 >> 2];
 HEAP8[$0 + 12 | 0] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 return $0 | 0;
}

function jswrap_graphics_clearRect($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 $0 = _jswrap_graphics_fillRect_col(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 24 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], HEAP32[$5 + 12 >> 2], 0);
 __stack_pointer = $5 + 32 | 0;
 return $0 | 0;
}

function jshGetPinFromVar($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!(!(jsvIsString(HEAP32[$1 + 8 >> 2]) & 1) | HEAP8[HEAP32[$1 + 8 >> 2] + 5 | 0])) {
   HEAP8[$1 + 15 | 0] = jshGetPinFromString(HEAP32[$1 + 8 >> 2]);
   break label$1;
  }
  if (jsvIsInt(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP8[$1 + 15 | 0] = jsvGetInteger(HEAP32[$1 + 8 >> 2]);
   break label$1;
  }
  HEAP8[$1 + 15 | 0] = 255;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAPU8[$1 + 15 | 0];
}

function tflite__ops__micro__conv__Init_28TfLiteContext__2c_20char_20const__2c_20unsigned_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 label$1: {
  if (!HEAP32[HEAP32[$3 + 12 >> 2] + 56 >> 2]) {
   break label$1;
  }
 }
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$3 + 12 >> 2] + 56 >> 2]](HEAP32[$3 + 12 >> 2], 52) | 0;
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function tflite__RuntimeShape__Dims_28int_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 label$1: {
  if (HEAP32[$2 + 8 >> 2] < 0) {
   break label$1;
  }
 }
 label$2: {
  if (HEAP32[$2 + 8 >> 2] >= HEAP32[$0 >> 2]) {
   break label$2;
  }
 }
 if (HEAP32[$0 >> 2] > 5) {
  $0 = HEAP32[HEAP32[$0 + 4 >> 2] + (HEAP32[$2 + 8 >> 2] << 2) >> 2];
 } else {
  $0 = HEAP32[($0 + 4 | 0) + (HEAP32[$2 + 8 >> 2] << 2) >> 2];
 }
 return $0;
}

function jswrap_graphics_fillRect($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 $0 = _jswrap_graphics_fillRect_col(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 24 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], HEAP32[$5 + 12 >> 2], 1);
 __stack_pointer = $5 + 32 | 0;
 return $0 | 0;
}

function jswrap_espruino_setBootCode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 label$1: {
  if (jsvIsString(HEAP32[$2 + 12 >> 2]) & 1) {
   HEAP32[$2 + 12 >> 2] = jsvLockAgain(HEAP32[$2 + 12 >> 2]);
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = jsvNewFromEmptyString_9();
 }
 jsfSaveBootCodeToFlash(HEAP32[$2 + 12 >> 2], HEAP8[$2 + 11 | 0] & 1);
 jsvUnLock(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function graphicsClear($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$1 + 12 >> 2];
 $0 = HEAP32[$1 + 12 >> 2];
 graphicsFillRectDevice(HEAP32[$1 + 12 >> 2], 0, 0, (HEAPU8[$2 + 12 | 0] | HEAPU8[$2 + 13 | 0] << 8) - 1 | 0, (HEAPU8[$3 + 14 | 0] | HEAPU8[$3 + 15 | 0] << 8) - 1 | 0, HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24));
 __stack_pointer = $1 + 16 | 0;
}

function jsiQueueObjectCallbacks($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 24 >> 2]);
 if (HEAP32[$4 + 12 >> 2]) {
  jsiQueueEvents(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 12 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]);
  jsvUnLock(HEAP32[$4 + 12 >> 2]);
 }
 __stack_pointer = $4 + 32 | 0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph____Get_28unsigned_20int_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = flatbuffers__IndirectHelper_flatbuffers__Offset_tflite__SubGraph____Read_28unsigned_20char_20const__2c_20unsigned_20int_29(flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph____Data_28_29_20const(HEAP32[$2 + 12 >> 2]), HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__Operator____Get_28unsigned_20int_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = flatbuffers__IndirectHelper_flatbuffers__Offset_tflite__Operator____Read_28unsigned_20char_20const__2c_20unsigned_20int_29(flatbuffers__Vector_flatbuffers__Offset_tflite__Operator____Data_28_29_20const(HEAP32[$2 + 12 >> 2]), HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__Metadata____Get_28unsigned_20int_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = flatbuffers__IndirectHelper_flatbuffers__Offset_tflite__Metadata____Read_28unsigned_20char_20const__2c_20unsigned_20int_29(flatbuffers__Vector_flatbuffers__Offset_tflite__Metadata____Data_28_29_20const(HEAP32[$2 + 12 >> 2]), HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function tflite___28anonymous_20namespace_29__MicroBuiltinDataAllocator__Allocate_28unsigned_20long_2c_20unsigned_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[HEAP32[$3 + 12 >> 2] + 4 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]) | 0;
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function flatbuffers__IndirectHelper_flatbuffers__Offset_tflite__OperatorCode____Read_28unsigned_20char_20const__2c_20unsigned_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 8 >> 2] << 2);
 $0 = HEAP32[$2 + 12 >> 2];
 $1 = unsigned_20int_20flatbuffers__ReadScalar_unsigned_20int__28void_20const__29(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 + $1 | 0;
}

function jsvUnLockInline($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 12 >> 2]) {
   break label$1;
  }
  $0 = HEAP32[$1 + 12 >> 2];
  $2 = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) - 1024 | 0;
  HEAP8[$0 + 11 | 0] = $2;
  HEAP8[$0 + 12 | 0] = $2 >>> 8;
  HEAP16[$1 + 10 >> 1] = $2;
  if (HEAPU16[$1 + 10 >> 1] & 15360) {
   break label$1;
  }
  jsvUnLockFreeIfNeeded(HEAP32[$1 + 12 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
}

function jslGetTokenValueAsString() {
 var $0 = 0;
 HEAP8[HEAPU8[HEAP32[38615] + 80 | 0] + (HEAP32[38615] + 12 | 0) | 0] = 0;
 if (!(HEAPU8[HEAP32[38615] + 80 | 0] | HEAP16[HEAP32[38615] + 2 >> 1] < 163 | HEAP16[HEAP32[38615] + 2 >> 1] > 198)) {
  jslTokenAsString(HEAP16[HEAP32[38615] + 2 >> 1], HEAP32[38615] + 12 | 0, 64);
  strcpy(HEAP32[38615] + 12 | 0, jslReservedWordAsString(HEAP16[HEAP32[38615] + 2 >> 1]));
  $0 = strlen(HEAP32[38615] + 12 | 0);
  HEAP8[HEAP32[38615] + 80 | 0] = $0;
 }
 return HEAP32[38615] + 12 | 0;
}

function _jswrap_io_poke($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 label$1: {
  if (HEAP32[$3 + 4 >> 2] == 1) {
   HEAP8[HEAP32[$3 + 12 >> 2]] = HEAP32[$3 + 8 >> 2];
   break label$1;
  }
  label$3: {
   if (HEAP32[$3 + 4 >> 2] == 2) {
    HEAP16[HEAP32[$3 + 12 >> 2] >> 1] = HEAP32[$3 + 8 >> 2];
    break label$3;
   }
   if (HEAP32[$3 + 4 >> 2] == 4) {
    HEAP32[HEAP32[$3 + 12 >> 2] >> 2] = HEAP32[$3 + 8 >> 2];
   }
  }
 }
}

function lcdST7789_setPixel($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 HEAP32[$4 + 4 >> 2] = HEAP32[85780] + HEAP32[$4 + 4 >> 2];
 if (HEAP32[$4 + 4 >> 2] >= 320) {
  HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 4 >> 2] - 320;
 }
 HEAP16[(HEAP32[$4 + 8 >> 2] + Math_imul(HEAP32[$4 + 4 >> 2], 240) << 1) + 189520 >> 1] = HEAP32[$4 >> 2];
 HEAP8[189505] = 1;
}

function float_20tflite__ActivationFunctionWithMinMax_float__28float_2c_20float_2c_20float_29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAPF32[$3 + 12 >> 2] = $0;
 HEAPF32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $4 = float_20const__20std____2__min_float__28float_20const__2c_20float_20const__29(float_20const__20std____2__max_float__28float_20const__2c_20float_20const__29($3 + 12 | 0, $3 + 8 | 0), $3 + 4 | 0);
 __stack_pointer = $3 + 16 | 0;
 return HEAPF32[$4 >> 2];
}

function tflite___28anonymous_20namespace_29__AllocationInfoBuilder__Init_28unsigned_20long_2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$3 + 4 >> 2];
 $0 = tflite___28anonymous_20namespace_29__AllocationInfoBuilder__Allocate_28_29($0);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function flatbuffers__Vector_long_20long__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_long_20long__20const___28unsigned_20short_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = flatbuffers__Vector_long_20long__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_long_20long__20const___28unsigned_20short_29(HEAP32[$2 + 12 >> 2], HEAPU16[$2 + 10 >> 1]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function std____2__unique_ptr_TfLiteSoftmaxParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator_20bool_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[std____2____compressed_pair_TfLiteSoftmaxParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29_20const(HEAP32[$1 + 12 >> 2]) >> 2];
 __stack_pointer = $1 + 16 | 0;
 return ($0 | 0) != 0;
}

function std____2__unique_ptr_TfLiteReshapeParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator_20bool_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[std____2____compressed_pair_TfLiteReshapeParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29_20const(HEAP32[$1 + 12 >> 2]) >> 2];
 __stack_pointer = $1 + 16 | 0;
 return ($0 | 0) != 0;
}

function jswrap_json_parse_ext($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 160 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 156 >> 2] = $0;
 HEAP32[$2 + 152 >> 2] = $1;
 HEAP32[$2 + 20 >> 2] = jsvAsString(HEAP32[$2 + 156 >> 2]);
 HEAP32[$2 + 16 >> 2] = jslSetLex($2 + 24 | 0);
 jslInit(HEAP32[$2 + 20 >> 2]);
 jsvUnLock(HEAP32[$2 + 20 >> 2]);
 HEAP32[$2 + 12 >> 2] = jswrap_json_parse_internal(HEAP32[$2 + 152 >> 2]);
 jslKill();
 jslSetLex(HEAP32[$2 + 16 >> 2]);
 __stack_pointer = $2 + 160 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function jspFindPrototypeFor($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[46747], HEAP32[$1 + 8 >> 2]);
 label$1: {
  if (!HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 4 >> 2], 104794);
  jsvUnLock(HEAP32[$1 + 4 >> 2]);
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function flatbuffers__IndirectHelper_flatbuffers__Offset_tflite__SubGraph____Read_28unsigned_20char_20const__2c_20unsigned_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 8 >> 2] << 2);
 $0 = HEAP32[$2 + 12 >> 2];
 $1 = unsigned_20int_20flatbuffers__ReadScalar_unsigned_20int__28void_20const__29(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 + $1 | 0;
}

function flatbuffers__IndirectHelper_flatbuffers__Offset_tflite__Operator____Read_28unsigned_20char_20const__2c_20unsigned_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 8 >> 2] << 2);
 $0 = HEAP32[$2 + 12 >> 2];
 $1 = unsigned_20int_20flatbuffers__ReadScalar_unsigned_20int__28void_20const__29(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 + $1 | 0;
}

function flatbuffers__IndirectHelper_flatbuffers__Offset_tflite__Metadata____Read_28unsigned_20char_20const__2c_20unsigned_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 8 >> 2] << 2);
 $0 = HEAP32[$2 + 12 >> 2];
 $1 = unsigned_20int_20flatbuffers__ReadScalar_unsigned_20int__28void_20const__29(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 + $1 | 0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__Tensor____Get_28unsigned_20int_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = flatbuffers__IndirectHelper_flatbuffers__Offset_tflite__Tensor____Read_28unsigned_20char_20const__2c_20unsigned_20int_29(flatbuffers__Vector_flatbuffers__Offset_tflite__Tensor____Data_28_29_20const(HEAP32[$2 + 12 >> 2]), HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer____Get_28unsigned_20int_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = flatbuffers__IndirectHelper_flatbuffers__Offset_tflite__Buffer____Read_28unsigned_20char_20const__2c_20unsigned_20int_29(flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer____Data_28_29_20const(HEAP32[$2 + 12 >> 2]), HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function std____2__unique_ptr_TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_TfLiteFullyConnectedParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$0 >> 2];
}

function flatbuffers__IndirectHelper_flatbuffers__Offset_tflite__Tensor____Read_28unsigned_20char_20const__2c_20unsigned_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 8 >> 2] << 2);
 $0 = HEAP32[$2 + 12 >> 2];
 $1 = unsigned_20int_20flatbuffers__ReadScalar_unsigned_20int__28void_20const__29(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 + $1 | 0;
}

function flatbuffers__IndirectHelper_flatbuffers__Offset_tflite__Buffer____Read_28unsigned_20char_20const__2c_20unsigned_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 8 >> 2] << 2);
 $0 = HEAP32[$2 + 12 >> 2];
 $1 = unsigned_20int_20flatbuffers__ReadScalar_unsigned_20int__28void_20const__29(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 + $1 | 0;
}

function std____2__unique_ptr_TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 std____2__unique_ptr_TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___reset_28TfLiteFullyConnectedParams__29($0, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__QuantizeMultiplierGreaterThanOne_28double_2c_20int__2c_20int__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAPF64[$3 + 8 >> 3] = $0;
 HEAP32[$3 + 4 >> 2] = $1;
 HEAP32[$3 >> 2] = $2;
 if (!(HEAPF64[$3 + 8 >> 3] > 1)) {
  abort();
  abort();
 }
 tflite__QuantizeMultiplier_28double_2c_20int__2c_20int__29(HEAPF64[$3 + 8 >> 3], HEAP32[$3 + 4 >> 2], HEAP32[$3 >> 2]);
 if (HEAP32[HEAP32[$3 >> 2] >> 2] < 0) {
  abort();
  abort();
 }
 __stack_pointer = $3 + 16 | 0;
}

function strlen($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = $0;
 label$1: {
  if ($1 & 3) {
   while (1) {
    if (!HEAPU8[$1 | 0]) {
     break label$1;
    }
    $1 = $1 + 1 | 0;
    if ($1 & 3) {
     continue;
    }
    break;
   }
  }
  while (1) {
   $2 = $1;
   $1 = $1 + 4 | 0;
   $3 = HEAP32[$2 >> 2];
   if (!(($3 ^ -1) & $3 - 16843009 & -2139062144)) {
    continue;
   }
   break;
  }
  while (1) {
   $1 = $2;
   $2 = $1 + 1 | 0;
   if (HEAPU8[$1 | 0]) {
    continue;
   }
   break;
  }
 }
 return $1 - $0 | 0;
}

function std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_TfLiteDepthwiseConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$0 >> 2];
}

function push_literal_byte($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP16[$2 + 6 >> 1] = HEAPU16[HEAP32[$2 + 12 >> 2] + 2 >> 1] - 1;
 HEAP16[$2 + 4 >> 1] = (get_input_offset(HEAP32[$2 + 12 >> 2]) & 65535) + HEAPU16[$2 + 6 >> 1];
 HEAP8[$2 + 3 | 0] = HEAPU8[HEAPU16[$2 + 4 >> 1] + (HEAP32[$2 + 12 >> 2] + 15 | 0) | 0];
 push_bits(HEAP32[$2 + 12 >> 2], 8, HEAPU8[$2 + 3 | 0], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator_20bool_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[std____2____compressed_pair_TfLitePoolParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29_20const(HEAP32[$1 + 12 >> 2]) >> 2];
 __stack_pointer = $1 + 16 | 0;
 return ($0 | 0) != 0;
}

function std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___reset_28TfLiteDepthwiseConvParams__29($0, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator_20bool_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[std____2____compressed_pair_TfLiteConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29_20const(HEAP32[$1 + 12 >> 2]) >> 2];
 __stack_pointer = $1 + 16 | 0;
 return ($0 | 0) != 0;
}

function jswrap_object_keys_or_property_names($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 HEAP32[$2 >> 2] = jsvNewEmptyArray();
 label$1: {
  if (!HEAP32[$2 >> 2]) {
   HEAP32[$2 + 12 >> 2] = 0;
   break label$1;
  }
  jswrap_object_keys_or_property_names_cb(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2], 591, HEAP32[$2 >> 2]);
  HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function tflite__QuantizationParameters_20const__20flatbuffers__Table__GetPointer_tflite__QuantizationParameters_20const___28unsigned_20short_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = tflite__QuantizationParameters_20const__20flatbuffers__Table__GetPointer_tflite__QuantizationParameters_20const___28unsigned_20short_29(HEAP32[$2 + 12 >> 2], HEAPU16[$2 + 10 >> 1]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function jswrap_string_charCodeAt($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 HEAP32[$2 >> 2] = _jswrap_string_charCodeAt(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]);
 label$1: {
  if (HEAP32[$2 >> 2] < 0) {
   HEAP32[$2 + 12 >> 2] = jsvNewFromFloat(nan);
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = jsvNewFromInteger(HEAP32[$2 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function jsvArrayBufferIteratorSetValueAndRewind($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 44 >> 2] = $0;
 HEAP32[$2 + 40 >> 2] = $1;
 jsvStringIteratorClone($2, HEAP32[$2 + 44 >> 2]);
 jsvArrayBufferIteratorSetValue(HEAP32[$2 + 44 >> 2], HEAP32[$2 + 40 >> 2], 0);
 jsvStringIteratorFree_2(HEAP32[$2 + 44 >> 2]);
 jsvStringIteratorClone(HEAP32[$2 + 44 >> 2], $2);
 jsvStringIteratorFree_2($2);
 HEAP8[HEAP32[$2 + 44 >> 2] + 52 | 0] = 0;
 __stack_pointer = $2 + 48 | 0;
}

function jshSleep($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $1;
 HEAPF64[$2 >> 3] = jshGetMillisecondsFromTime(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2]);
 if (HEAPF64[$2 >> 3] > 2147483647) {
  HEAPF64[$2 >> 3] = 2147483647;
 }
 $3 = HEAPF64[$2 >> 3];
 label$2: {
  if (Math_abs($3) < 2147483648) {
   $0 = ~~$3;
   break label$2;
  }
  $0 = -2147483648;
 }
 HEAP32[38458] = $0;
 __stack_pointer = $2 + 16 | 0;
 return 0;
}

function tflite__OpResolver__GetDelegates_28int_29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 std____2__vector_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29__2c_20std____2__allocator_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29_____vector_28_29($0);
 __stack_pointer = $3 + 16 | 0;
}

function jswrap_array_findIndex($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 HEAP32[$2 >> 2] = _jswrap_array_iterate_with_callback(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2], 0, 3, 1, 1);
 label$1: {
  if (HEAP32[$2 >> 2]) {
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = jsvNewFromInteger(-1);
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function jsvArrayBufferIteratorHasElement($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAPU8[HEAP32[$1 + 8 >> 2] + 36 | 0]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  if (HEAP8[HEAP32[$1 + 8 >> 2] + 52 | 0] & 1) {
   HEAP8[$1 + 15 | 0] = 1;
   break label$1;
  }
  HEAP8[$1 + 15 | 0] = HEAPU32[HEAP32[$1 + 8 >> 2] + 40 >> 2] >= HEAP32[HEAP32[$1 + 8 >> 2] + 44 >> 2] + (HEAPU8[HEAP32[$1 + 8 >> 2] + 36 | 0] & 15) >>> 0;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function jspExecuteJSFunction($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = jspEvaluate(HEAP32[$4 + 28 >> 2], 1);
 HEAP32[$4 + 8 >> 2] = jspExecuteFunction(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]);
 jsvUnLock(HEAP32[$4 + 12 >> 2]);
 __stack_pointer = $4 + 32 | 0;
 return HEAP32[$4 + 8 >> 2];
}

function lcdGetPixel_ArrayBuffer_flat8($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $1 = HEAP32[$3 + 12 >> 2];
 $0 = HEAP32[$3 + 12 >> 2];
 return HEAPU8[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) | 0) + (HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24)) | 0];
}

function jsiReplaceInputLine($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (jsiShowInputLine() & 1) {
  jsiMoveCursorChar(HEAP32[46763], HEAP32[46765], 0);
  jsiConsoleEraseAfterCursor();
  jsiConsolePrintStringVarWithNewLineChar(HEAP32[$1 + 12 >> 2], 0, 58);
 }
 jsiInputLineCursorMoved();
 jsvUnLock(HEAP32[46763]);
 HEAP32[46763] = jsvLockAgain(HEAP32[$1 + 12 >> 2]);
 HEAP32[46765] = jsvGetStringLength(HEAP32[46763]);
 __stack_pointer = $1 + 16 | 0;
}

function jsfCompact($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 14 | 0] = $0;
 label$1: {
  if ((jswrap_banglejs_getBattery() | 0) < 10) {
   jsiConsolePrintf(127948, 0);
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  jsfCacheClear();
  HEAP32[46756] = 0;
  HEAP32[46757] = 0;
  HEAP8[$1 + 13 | 0] = jsfBankCompact(134217728, HEAP8[$1 + 14 | 0] & 1) & 1;
  HEAP8[$1 + 15 | 0] = HEAP8[$1 + 13 | 0] & 1;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP8[$1 + 15 | 0] & 1;
}

function jsvArrayBufferIteratorDataToFloat($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP32[$2 + 20 >> 2] = HEAPU8[HEAP32[$2 + 28 >> 2] + 36 | 0] & 15;
 HEAPF64[$2 + 8 >> 3] = 0;
 label$1: {
  if (HEAP32[$2 + 20 >> 2] == 4) {
   HEAPF64[$2 + 8 >> 3] = HEAPF32[HEAP32[$2 + 24 >> 2] >> 2];
   break label$1;
  }
  if (HEAP32[$2 + 20 >> 2] == 8) {
   HEAPF64[$2 + 8 >> 3] = HEAPF64[HEAP32[$2 + 24 >> 2] >> 3];
  }
 }
 return HEAPF64[$2 + 8 >> 3];
}

function graphicsGetSetPixelFn($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[$1 + 8 >> 2];
 label$1: {
  if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 112) {
   HEAP32[$1 + 12 >> 2] = 563;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP32[$1 + 12 >> 2] = HEAPU8[$0 + 52 | 0] | HEAPU8[$0 + 53 | 0] << 8 | (HEAPU8[$0 + 54 | 0] << 16 | HEAPU8[$0 + 55 | 0] << 24);
 }
 return HEAP32[$1 + 12 >> 2];
}

function void_20std____2____debug_db_insert_c_std____2__vector_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29__2c_20std____2__allocator_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29_____28std____2__vector_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29__2c_20std____2__allocator_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29_____29($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function std____2____compressed_pair_elem_std____2__allocator_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29___2c_201_2c_20true_____compressed_pair_elem_28std____2____default_init_tag_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 4 >> 2] = $0;
 $0 = HEAP32[$1 + 4 >> 2];
 std____2__allocator_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29____allocator_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jsvFindOrAddChildFromString($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = jsvFindChildFromString(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 if (!HEAP32[$2 + 4 >> 2]) {
  HEAP32[$2 + 4 >> 2] = jsvNewNameFromString(HEAP32[$2 + 8 >> 2]);
  if (HEAP32[$2 + 4 >> 2]) {
   jsvAddName(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 4 >> 2]);
  }
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 4 >> 2];
}

function std____2__unique_ptr_TfLiteSoftmaxParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_TfLiteSoftmaxParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$0 >> 2];
}

function std____2__unique_ptr_TfLiteReshapeParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_TfLiteReshapeParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$0 >> 2];
}

function gemmlowp__FixedPoint_int_2c_200__20gemmlowp__SaturatingRoundingMultiplyByPOT__2_2c_20int_2c_200__28gemmlowp__FixedPoint_int_2c_200__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = gemmlowp__FixedPoint_int_2c_200___FromRaw_28int_29(int_20gemmlowp__SaturatingRoundingMultiplyByPOT__2_2c_20int__28int_29(HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($1) >> 2]));
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function gemmlowp__FixedPoint_int_2c_200__20gemmlowp__SaturatingRoundingMultiplyByPOT__1_2c_20int_2c_200__28gemmlowp__FixedPoint_int_2c_200__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = gemmlowp__FixedPoint_int_2c_200___FromRaw_28int_29(int_20gemmlowp__SaturatingRoundingMultiplyByPOT__1_2c_20int__28int_29(HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($1) >> 2]));
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jsiAppendToInputLine($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (!HEAP32[46772]) {
  jsvStringIteratorNew(187076, HEAP32[46763], 0);
  jsvStringIteratorGotoEnd(187076);
 }
 while (1) {
  if (HEAPU8[HEAP32[$1 + 12 >> 2]]) {
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$1 + 12 >> 2] = $0 + 1;
   jsvStringIteratorAppend(187076, HEAP8[$0 | 0]);
   HEAP32[38457] = HEAP32[38457] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $1 + 16 | 0;
}

function jsfGetJSONWhitespace($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer + -64 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 60 >> 2] = $0;
 HEAP32[$4 + 56 >> 2] = $1;
 HEAP32[$4 + 52 >> 2] = $2;
 HEAP32[$4 + 48 >> 2] = $3;
 jsvStringIteratorNew($4 + 8 | 0, HEAP32[$4 + 56 >> 2], 0);
 jsvStringIteratorGotoEnd($4 + 8 | 0);
 jsfGetJSONWithCallback(HEAP32[$4 + 60 >> 2], 0, HEAP32[$4 + 52 >> 2], HEAP32[$4 + 48 >> 2], 2, $4 + 8 | 0);
 jsvStringIteratorFree_8($4 + 8 | 0);
 __stack_pointer = $4 - -64 | 0;
}

function tflite__ElementCount_28TfLiteIntArray_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = 1;
 HEAP32[$1 + 4 >> 2] = 0;
 while (1) {
  if (HEAP32[$1 + 4 >> 2] < HEAP32[HEAP32[$1 + 12 >> 2] >> 2]) {
   HEAP32[$1 + 8 >> 2] = Math_imul(HEAP32[(HEAP32[$1 + 12 >> 2] + 4 | 0) + (HEAP32[$1 + 4 >> 2] << 2) >> 2], HEAP32[$1 + 8 >> 2]);
   HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
   continue;
  }
  break;
 }
 return HEAP32[$1 + 8 >> 2];
}

function jsvGetLinesInString($0) {
 var $1 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 44 >> 2] = $0;
 HEAP32[$1 + 40 >> 2] = 1;
 jsvStringIteratorNew($1, HEAP32[$1 + 44 >> 2], 0);
 while (1) {
  if (jsvStringIteratorHasChar_1($1) & 1) {
   if ((jsvStringIteratorGetCharAndNext($1) & 255) == 10) {
    HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 1;
   }
   continue;
  }
  break;
 }
 jsvStringIteratorFree_1($1);
 __stack_pointer = $1 + 48 | 0;
 return HEAP32[$1 + 40 >> 2];
}

function jspGetPrototypeOwner($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  label$2: {
   if (!(jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1)) {
    if (!(jsvIsArray(HEAP32[$1 + 8 >> 2]) & 1)) {
     break label$2;
    }
   }
   HEAP32[$1 + 12 >> 2] = jsvSkipNameAndUnLock(jsvObjectGetChildIfExists(HEAP32[$1 + 8 >> 2], 100982));
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvMakeFunctionParameter($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (!(jsvIsName(HEAP32[$1 + 12 >> 2]) & 1)) {
  HEAP32[$1 + 12 >> 2] = jsvMakeIntoVariableName(HEAP32[$1 + 12 >> 2], 0);
 }
 $0 = HEAP32[$1 + 12 >> 2];
 $2 = HEAP32[$1 + 12 >> 2];
 $2 = HEAPU8[$2 + 11 | 0] | HEAPU8[$2 + 12 | 0] << 8 | 128;
 HEAP8[$0 + 11 | 0] = $2;
 HEAP8[$0 + 12 | 0] = $2 >>> 8;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jshGetEventFlagsForPin($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 14 | 0] = $0;
 HEAP32[$1 + 8 >> 2] = 0;
 label$1: {
  while (1) {
   if (HEAP32[$1 + 8 >> 2] < 16) {
    if (HEAPU8[HEAP32[$1 + 8 >> 2] + 343168 | 0] == HEAPU8[$1 + 14 | 0]) {
     HEAP8[$1 + 15 | 0] = HEAP32[$1 + 8 >> 2] + 1;
     break label$1;
    } else {
     HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
     continue;
    }
   }
   break;
  }
  HEAP8[$1 + 15 | 0] = 0;
 }
 return HEAPU8[$1 + 15 | 0];
}

function std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_TfLitePoolParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$0 >> 2];
}

function std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_TfLiteConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$0 >> 2];
}

function st_tag_bit($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = get_bits(HEAP32[$1 + 8 >> 2], 1) & 65535;
 label$1: {
  if (HEAP32[$1 + 4 >> 2] == 65535) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 1;
   break label$1;
  }
  HEAP16[HEAP32[$1 + 8 >> 2] + 6 >> 1] = 0;
  HEAP32[$1 + 12 >> 2] = 3;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jshPinInput($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 HEAP8[$1 + 14 | 0] = 0;
 label$1: {
  if (jshIsPinValid(HEAPU8[$1 + 15 | 0]) & 1) {
   if (!(jshGetPinStateIsManual(HEAPU8[$1 + 15 | 0]) & 1)) {
    jshPinSetState(HEAPU8[$1 + 15 | 0], 4);
   }
   HEAP8[$1 + 14 | 0] = jshPinGetValue(HEAPU8[$1 + 15 | 0]) & 1;
   break label$1;
  }
  jsExceptionHere(1, 102474, 0);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP8[$1 + 14 | 0] & 1;
}

function flatbuffers__Vector_float__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_float__20const___28unsigned_20short_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = flatbuffers__Vector_float__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_float__20const___28unsigned_20short_29(HEAP32[$2 + 12 >> 2], HEAPU16[$2 + 10 >> 1]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function _jswrap_promise_is_promise($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jspGetConstructor(HEAP32[$1 + 12 >> 2]);
 if (HEAP32[$1 + 8 >> 2]) {
  $0 = HEAP32[$1 + 8 >> 2];
  $2 = (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 19;
 }
 HEAP8[$1 + 7 | 0] = $2;
 jsvUnLock(HEAP32[$1 + 8 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP8[$1 + 7 | 0] & 1;
}

function std____2__unique_ptr_TfLiteSoftmaxParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 std____2__unique_ptr_TfLiteSoftmaxParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___reset_28TfLiteSoftmaxParams__29($0, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2__unique_ptr_TfLiteReshapeParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 std____2__unique_ptr_TfLiteReshapeParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___reset_28TfLiteReshapeParams__29($0, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function st_backref_index_msb($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP8[$1 + 7 | 0] = 8;
 HEAP16[$1 + 4 >> 1] = get_bits(HEAP32[$1 + 8 >> 2], HEAPU8[$1 + 7 | 0] - 8 & 255);
 label$1: {
  if (HEAPU16[$1 + 4 >> 1] == 65535) {
   HEAP32[$1 + 12 >> 2] = 2;
   break label$1;
  }
  HEAP16[HEAP32[$1 + 8 >> 2] + 6 >> 1] = HEAPU16[$1 + 4 >> 1] << 8;
  HEAP32[$1 + 12 >> 2] = 3;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function st_backref_count_msb($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP8[$1 + 7 | 0] = 6;
 HEAP16[$1 + 4 >> 1] = get_bits(HEAP32[$1 + 8 >> 2], HEAPU8[$1 + 7 | 0] - 8 & 255);
 label$1: {
  if (HEAPU16[$1 + 4 >> 1] == 65535) {
   HEAP32[$1 + 12 >> 2] = 4;
   break label$1;
  }
  HEAP16[HEAP32[$1 + 8 >> 2] + 4 >> 1] = HEAPU16[$1 + 4 >> 1] << 8;
  HEAP32[$1 + 12 >> 2] = 5;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jswrap_string_charAt($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 HEAP32[$2 >> 2] = jswrap_string_charAt_undefined(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]);
 label$1: {
  if (HEAP32[$2 >> 2]) {
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = jsvNewFromEmptyString_8();
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function tflite___28anonymous_20namespace_29__AllocationInfoBuilder__AllocationInfoBuilder_28tflite__ErrorReporter__2c_20tflite__SimpleMemoryAllocator__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$3 + 8 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 return $0;
}

function jsvIsInternalObjectKey($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (jsvIsString(HEAP32[$1 + 12 >> 2]) & 1) {
  $2 = 1;
  label$2: {
   if (HEAP8[HEAP32[$1 + 12 >> 2]] == -1) {
    break label$2;
   }
   $2 = 1;
   if (jsvIsStringEqual(HEAP32[$1 + 12 >> 2], 107914) & 1) {
    break label$2;
   }
   $2 = jsvIsStringEqual(HEAP32[$1 + 12 >> 2], 100982);
  }
 }
 __stack_pointer = $1 + 16 | 0;
 return $2 & 1;
}

function i2c_wr($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = 0;
 while (1) {
  if (HEAP32[$2 + 4 >> 2] < 8) {
   i2c_wr_bit(HEAP32[$2 + 12 >> 2], (HEAP32[$2 + 8 >> 2] & 128) != 0);
   HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] << 1;
   HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
   continue;
  }
  break;
 }
 i2c_rd_bit(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return 1;
}

function jsvObjectIteratorRemoveAndGotoNext($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 if (HEAP32[HEAP32[$2 + 12 >> 2] >> 2]) {
  HEAP16[$2 + 6 >> 1] = jsvGetNextSibling(HEAP32[HEAP32[$2 + 12 >> 2] >> 2]);
  jsvRemoveChildAndUnLock(HEAP32[$2 + 8 >> 2], HEAP32[HEAP32[$2 + 12 >> 2] >> 2]);
  $0 = jsvLockSafe(HEAPU16[$2 + 6 >> 1]);
  HEAP32[HEAP32[$2 + 12 >> 2] >> 2] = $0;
 }
 __stack_pointer = $2 + 16 | 0;
}

function jshGetTimeFromMilliseconds($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAPF64[$1 + 8 >> 3] = $0;
 $0 = HEAPF64[$1 + 8 >> 3] * 1e3;
 label$1: {
  if (Math_abs($0) < 0x8000000000000000) {
   $1 = Math_abs($0) >= 1 ? ~~($0 > 0 ? Math_min(Math_floor($0 * 2.3283064365386963e-10), 4294967295) : Math_ceil(($0 - +(~~$0 >>> 0 >>> 0)) * 2.3283064365386963e-10)) >>> 0 : 0;
   $2 = ~~$0 >>> 0;
   break label$1;
  }
  $1 = -2147483648;
 }
 i64toi32_i32$HIGH_BITS = $1;
 return $2;
}

function std____2____compressed_pair_TfLiteFullyConnectedParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___second_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_2c_201_2c_20false_____get_28_29(HEAP32[$1 + 12 >> 2] + 4 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_onewire_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 11 | 0] = $0;
 HEAP32[$1 + 4 >> 2] = jspNewObject(0, 104785);
 label$1: {
  if (!HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 4 >> 2], 102482, jsvNewFromPin(HEAPU8[$1 + 11 | 0]));
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function std____2____compressed_pair_TfLiteDepthwiseConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___second_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_2c_201_2c_20false_____get_28_29(HEAP32[$1 + 12 >> 2] + 4 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_serial_setConsole($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 HEAP8[$2 + 10 | 0] = jsiGetDeviceFromClass(HEAP32[$2 + 12 >> 2]);
 label$1: {
  if (!(HEAPU8[$2 + 10 | 0] < 17 | HEAPU8[$2 + 10 | 0] > 22)) {
   jsiSetConsoleDevice(HEAPU8[$2 + 10 | 0], HEAP8[$2 + 11 | 0] & 1);
   break label$1;
  }
  jsExceptionHere(1, 100539, 0);
 }
 __stack_pointer = $2 + 16 | 0;
}

function hexToByte($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP8[$2 + 11 | 0] = $0;
 HEAP8[$2 + 10 | 0] = $1;
 HEAP32[$2 + 4 >> 2] = chtod(HEAP8[$2 + 11 | 0]);
 HEAP32[$2 >> 2] = chtod(HEAP8[$2 + 10 | 0]);
 label$1: {
  if ((HEAP32[$2 + 4 >> 2] | HEAP32[$2 >> 2]) < 0) {
   HEAP32[$2 + 12 >> 2] = -1;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2] | HEAP32[$2 + 4 >> 2] << 4;
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function gemmlowp__FixedPoint_int_2c_2012__20gemmlowp__Rescale_12_2c_20int_2c_200__28gemmlowp__FixedPoint_int_2c_200__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 >> 2] = $0;
 $0 = int_20gemmlowp__SaturatingRoundingMultiplyByPOT__12_2c_20int__28int_29(HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($1) >> 2]);
 HEAP32[gemmlowp__FixedPoint_int_2c_2012___raw_28_29($1 + 8 | 0) >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function tflite__RuntimeShape__ReplaceWith_28int_2c_20int_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 tflite__RuntimeShape__Resize_28int_29($0, HEAP32[$3 + 8 >> 2]);
 HEAP32[$3 >> 2] = tflite__RuntimeShape__DimsData_28_29($0);
 __memcpy(HEAP32[$3 >> 2], HEAP32[$3 + 4 >> 2], HEAP32[$3 + 8 >> 2] << 2);
 __stack_pointer = $3 + 16 | 0;
}

function jsvAppendString($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 44 >> 2] = $0;
 HEAP32[$2 + 40 >> 2] = $1;
 jsvStringIteratorNew($2, HEAP32[$2 + 44 >> 2], 0);
 jsvStringIteratorGotoEnd($2);
 while (1) {
  if (HEAPU8[HEAP32[$2 + 40 >> 2]]) {
   $0 = HEAP32[$2 + 40 >> 2];
   HEAP32[$2 + 40 >> 2] = $0 + 1;
   jsvStringIteratorAppend($2, HEAP8[$0 | 0]);
   continue;
  }
  break;
 }
 jsvStringIteratorFree_1($2);
 __stack_pointer = $2 + 48 | 0;
}

function isWhitespaceInline_1($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 $0 = 1;
 label$1: {
  if (HEAP8[$1 + 15 | 0] == 9) {
   break label$1;
  }
  $0 = 1;
  if (HEAP8[$1 + 15 | 0] == 11) {
   break label$1;
  }
  $0 = 1;
  if (HEAP8[$1 + 15 | 0] == 12) {
   break label$1;
  }
  $0 = 1;
  if (HEAP8[$1 + 15 | 0] == 32) {
   break label$1;
  }
  $0 = 1;
  if (HEAP8[$1 + 15 | 0] == 10) {
   break label$1;
  }
  $0 = HEAP8[$1 + 15 | 0] == 13;
 }
 return $0;
}

function flatbuffers__Vector_int__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_int__20const___28unsigned_20short_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = flatbuffers__Vector_int__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_int__20const___28unsigned_20short_29(HEAP32[$2 + 12 >> 2], HEAPU16[$2 + 10 >> 1]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function _jswrap_object_values_cb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 >> 2] = jsvAsArrayIndex(HEAP32[$2 + 8 >> 2]);
 jsvArrayPushAndUnLock(HEAP32[HEAP32[$2 + 4 >> 2] >> 2], jspGetVarNamedField(HEAP32[HEAP32[$2 + 4 >> 2] + 4 >> 2], HEAP32[$2 >> 2], 0));
 jsvUnLock(HEAP32[$2 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function jswrap_tfmicrointerpreter_getTFMI($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 12 >> 2], 103326);
 HEAP32[$1 >> 2] = jsvGetDataPointer(HEAP32[$1 + 8 >> 2], $1 + 4 | 0);
 jsvUnLock(HEAP32[$1 + 8 >> 2]);
 if (!HEAP32[$1 >> 2]) {
  jsExceptionHere(1, 106189, 0);
 }
 HEAP32[$1 >> 2] = HEAP32[$1 >> 2] + 15 & -16;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 >> 2];
}

function jspromise_resolve_or_reject($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 HEAP32[$3 >> 2] = jsvNewObject();
 if (HEAP32[$3 >> 2]) {
  jsvObjectSetChild(HEAP32[$3 >> 2], 102677, HEAP32[$3 + 12 >> 2]);
  _jswrap_prombox_queueresolve_or_reject(HEAP32[$3 >> 2], HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1);
  jsvUnLock(HEAP32[$3 >> 2]);
 }
 __stack_pointer = $3 + 16 | 0;
}

function jspGetStackTrace() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 8 >> 2] = jsvFindChildFromString(HEAP32[46748], 105500);
 label$1: {
  if (HEAP32[$0 + 8 >> 2]) {
   HEAP32[$0 + 4 >> 2] = jsvSkipName(HEAP32[$0 + 8 >> 2]);
   jsvRemoveChildAndUnLock(HEAP32[46748], HEAP32[$0 + 8 >> 2]);
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 4 >> 2];
   break label$1;
  }
  HEAP32[$0 + 12 >> 2] = 0;
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function bool_20flatbuffers__IsOutRange_tflite__BuiltinOperator__28tflite__BuiltinOperator_20const__2c_20tflite__BuiltinOperator_20const__2c_20tflite__BuiltinOperator_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = 1;
 $0 = HEAP32[HEAP32[$3 + 12 >> 2] >> 2] >= HEAP32[HEAP32[$3 + 8 >> 2] >> 2] ? HEAP32[HEAP32[$3 + 4 >> 2] >> 2] < HEAP32[HEAP32[$3 + 12 >> 2] >> 2] : $0;
 return $0;
}

function tflite__ErrorReporter__ReportError_28void__2c_20char_20const__2c_20____29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 $0 = HEAP32[$4 + 28 >> 2];
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]);
 __stack_pointer = $4 + 32 | 0;
 return HEAP32[$4 + 12 >> 2];
}

function std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___reset_28TfLitePoolParams__29($0, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___reset_28TfLiteConvParams__29($0, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jsvIsNameInt($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63;
  $0 = 1;
  if (HEAP8[$1 + 7 | 0] != 16) {
   $2 = HEAP8[$1 + 7 | 0] >= 18 ? HEAP8[$1 + 7 | 0] <= 22 : $2;
   $0 = $2;
  }
  HEAP8[$1 + 15 | 0] = $0 & 1;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function isWhitespaceInline($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 $0 = 1;
 label$1: {
  if (HEAP8[$1 + 15 | 0] == 9) {
   break label$1;
  }
  $0 = 1;
  if (HEAP8[$1 + 15 | 0] == 11) {
   break label$1;
  }
  $0 = 1;
  if (HEAP8[$1 + 15 | 0] == 12) {
   break label$1;
  }
  $0 = 1;
  if (HEAP8[$1 + 15 | 0] == 32) {
   break label$1;
  }
  $0 = 1;
  if (HEAP8[$1 + 15 | 0] == 10) {
   break label$1;
  }
  $0 = HEAP8[$1 + 15 | 0] == 13;
 }
 return $0;
}

function jsvIterateCallbackToBytesCb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
 if (HEAPU32[HEAP32[$2 + 4 >> 2] + 4 >> 2] < HEAPU32[HEAP32[$2 + 4 >> 2] + 8 >> 2]) {
  HEAP8[HEAP32[HEAP32[$2 + 4 >> 2] >> 2] + HEAP32[HEAP32[$2 + 4 >> 2] + 4 >> 2] | 0] = HEAP32[$2 + 12 >> 2];
 }
 $0 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
}

function jswrap_eval($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 4 >> 2] = jsvAsString(HEAP32[$1 + 8 >> 2]);
  HEAP32[$1 >> 2] = jspEvaluateVar(HEAP32[$1 + 4 >> 2], 0, 0);
  jsvUnLock(HEAP32[$1 + 4 >> 2]);
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function gemmlowp__FixedPoint_int_2c_202__20gemmlowp__Rescale_2_2c_20int_2c_204__28gemmlowp__FixedPoint_int_2c_204__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 >> 2] = $0;
 $0 = int_20gemmlowp__SaturatingRoundingMultiplyByPOT_2_2c_20int__28int_29(HEAP32[gemmlowp__FixedPoint_int_2c_204___raw_28_29($1) >> 2]);
 HEAP32[gemmlowp__FixedPoint_int_2c_202___raw_28_29($1 + 8 | 0) >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function gemmlowp__FixedPoint_int_2c_200__20gemmlowp__Rescale_0_2c_20int_2c_205__28gemmlowp__FixedPoint_int_2c_205__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 >> 2] = $0;
 $0 = int_20gemmlowp__SaturatingRoundingMultiplyByPOT_5_2c_20int__28int_29(HEAP32[gemmlowp__FixedPoint_int_2c_205___raw_28_29($1) >> 2]);
 HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($1 + 8 | 0) >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function gemmlowp__FixedPoint_int_2c_200__20gemmlowp__Rescale_0_2c_20int_2c_201__28gemmlowp__FixedPoint_int_2c_201__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 >> 2] = $0;
 $0 = int_20gemmlowp__SaturatingRoundingMultiplyByPOT_1_2c_20int__28int_29(HEAP32[gemmlowp__FixedPoint_int_2c_201___raw_28_29($1) >> 2]);
 HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($1 + 8 | 0) >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = $2 >>> 16 | 0;
 $5 = $0 >>> 16 | 0;
 $3 = (Math_imul($4, $5) + Math_imul($1, $2) | 0) + Math_imul($3, $0) | 0;
 $2 = $2 & 65535;
 $0 = $0 & 65535;
 $1 = Math_imul($2, $0);
 $2 = ($1 >>> 16 | 0) + Math_imul($2, $5) | 0;
 $3 = $3 + ($2 >>> 16 | 0) | 0;
 $2 = Math_imul($0, $4) + ($2 & 65535) | 0;
 i64toi32_i32$HIGH_BITS = $3 + ($2 >>> 16 | 0) | 0;
 return $1 & 65535 | $2 << 16;
}

function std____2____compressed_pair_TfLiteSoftmaxParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___second_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_2c_201_2c_20false_____get_28_29(HEAP32[$1 + 12 >> 2] + 4 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____compressed_pair_TfLiteReshapeParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___second_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_2c_201_2c_20false_____get_28_29(HEAP32[$1 + 12 >> 2] + 4 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_number_toFixed($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 80 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 76 >> 2] = $0;
 HEAP32[$2 + 72 >> 2] = $1;
 if (HEAP32[$2 + 72 >> 2] < 0) {
  HEAP32[$2 + 72 >> 2] = 0;
 }
 if (HEAP32[$2 + 72 >> 2] > 20) {
  HEAP32[$2 + 72 >> 2] = 20;
 }
 ftoa_bounded_extra(jsvGetFloat(HEAP32[$2 + 76 >> 2]), $2, 70, 10, HEAP32[$2 + 72 >> 2]);
 $0 = jsvNewFromString($2);
 __stack_pointer = $2 + 80 | 0;
 return $0 | 0;
}

function jswrap_graphics_stringWidth($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 96 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 88 >> 2] = $0;
 HEAP32[$2 + 84 >> 2] = $1;
 label$1: {
  if (!(graphicsGetFromVar($2 + 8 | 0, HEAP32[$2 + 88 >> 2]) & 1)) {
   HEAP32[$2 + 92 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 92 >> 2] = _jswrap_graphics_stringWidth($2 + 8 | 0, HEAP32[$2 + 84 >> 2], -1);
 }
 __stack_pointer = $2 + 96 | 0;
 return HEAP32[$2 + 92 >> 2];
}

function jswrap_interface_setSleepIndicator($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP8[$1 + 11 | 0] = HEAPU8[153826];
 HEAP8[153826] = jshGetPinFromVar(HEAP32[$1 + 12 >> 2]);
 if (HEAPU8[153826] != HEAPU8[$1 + 11 | 0]) {
  if (HEAPU8[$1 + 11 | 0] != 255) {
   jshPinOutput(HEAPU8[$1 + 11 | 0], 0);
  }
  if (HEAPU8[153826] != 255) {
   jshPinOutput(HEAPU8[153826], 1);
  }
 }
 __stack_pointer = $1 + 16 | 0;
}

function jspeiGetScopesAsVar() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 label$1: {
  if (!HEAP32[46749]) {
   HEAP32[$0 + 12 >> 2] = 0;
   break label$1;
  }
  if ((jsvGetArrayLength(HEAP32[46749]) | 0) == 1) {
   HEAP32[$0 + 8 >> 2] = jsvGetLastArrayItem(HEAP32[46749]);
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2];
   break label$1;
  }
  HEAP32[$0 + 12 >> 2] = jsvCopy(HEAP32[46749], 1);
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function int_20tflite__reference_ops__depthwise_conv__DepthwiseConvRound__28tflite__DepthwiseConvOutputRounding_291__28int_2c_20int_2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = tflite__MultiplyByQuantizedMultiplier_28int_2c_20int_2c_20int_29(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function std____2____compressed_pair_TfLitePoolParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___second_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_2c_201_2c_20false_____get_28_29(HEAP32[$1 + 12 >> 2] + 4 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____compressed_pair_TfLiteConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___second_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_2c_201_2c_20false_____get_28_29(HEAP32[$1 + 12 >> 2] + 4 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_interface_setBusyIndicator($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP8[$1 + 11 | 0] = HEAPU8[153825];
 HEAP8[153825] = jshGetPinFromVar(HEAP32[$1 + 12 >> 2]);
 if (HEAPU8[153825] != HEAPU8[$1 + 11 | 0]) {
  if (HEAPU8[$1 + 11 | 0] != 255) {
   jshPinOutput(HEAPU8[$1 + 11 | 0], 0);
  }
  if (HEAPU8[153825] != 255) {
   jshPinOutput(HEAPU8[153825], 1);
  }
 }
 __stack_pointer = $1 + 16 | 0;
}

function graphicsSetPixel($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 graphicsToDeviceCoordinates(HEAP32[$4 + 12 >> 2], $4 + 8 | 0, $4 + 4 | 0);
 graphicsSetPixelDevice(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 __stack_pointer = $4 + 16 | 0;
}

function tflite___28anonymous_20namespace_29__MicroBuiltinDataAllocator___MicroBuiltinDataAllocator_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 tflite___28anonymous_20namespace_29__MicroBuiltinDataAllocator___MicroBuiltinDataAllocator_28_29($0);
 tflite___28anonymous_20namespace_29__MicroBuiltinDataAllocator__operator_20delete_28void__29($0);
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_waveform_startInput($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP8[$4 + 27 | 0] = $1;
 HEAPF64[$4 + 16 >> 3] = $2;
 HEAP32[$4 + 12 >> 2] = $3;
 if (!(jshPinAnalog(HEAPU8[$4 + 27 | 0]) < 0)) {
  jswrap_waveform_start(HEAP32[$4 + 28 >> 2], HEAPU8[$4 + 27 | 0], HEAPF64[$4 + 16 >> 3], HEAP32[$4 + 12 >> 2], 0);
 }
 __stack_pointer = $4 + 32 | 0;
}

function double_20const__20std____2__min_double__28double_20const__2c_20double_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = double_20const__20std____2__min_double_2c_20std____2____less_double_2c_20double___28double_20const__2c_20double_20const__2c_20std____2____less_double_2c_20double__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function _jswrap_prombox_queueresolve_or_reject($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 HEAP32[$3 >> 2] = _jswrap_promise_native_with_prombox(HEAP8[$3 + 7 | 0] & 1 ? 618 : 619, HEAP32[$3 + 12 >> 2]);
 if (HEAP32[$3 >> 2]) {
  jsiQueueEvents(HEAP32[$3 + 12 >> 2], HEAP32[$3 >> 2], $3 + 8 | 0, 1);
  jsvUnLock(HEAP32[$3 >> 2]);
 }
 __stack_pointer = $3 + 16 | 0;
}

function tflite__MicroMutableOpResolver_9u___MicroMutableOpResolver_28tflite__ErrorReporter__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 tflite__MicroOpResolver__MicroOpResolver_28_29($0);
 HEAP32[$0 >> 2] = 148232;
 HEAP32[$0 + 292 >> 2] = 0;
 HEAP32[$0 + 368 >> 2] = 0;
 HEAP32[$0 + 372 >> 2] = HEAP32[$2 + 8 >> 2];
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function jswrap_regexp_test($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = jswrap_regexp_exec(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 if (HEAP32[$2 + 4 >> 2]) {
  $3 = jsvIsNull(HEAP32[$2 + 4 >> 2]) ^ -1;
 }
 HEAP8[$2 + 3 | 0] = $3 & 1;
 jsvUnLock(HEAP32[$2 + 4 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return HEAP8[$2 + 3 | 0] & 1;
}

function tflite__GetInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = tflite___28anonymous_20namespace_29__GetMutableInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function tflite__EspruinoErrorReporter__Report_28char_20const__2c_20void__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 288 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 284 >> 2] = $0;
 HEAP32[$3 + 280 >> 2] = $1;
 HEAP32[$3 + 276 >> 2] = $2;
 espruino_snprintf_va($3 + 16 | 0, 256, HEAP32[$3 + 280 >> 2], HEAP32[$3 + 276 >> 2]);
 HEAP32[$3 >> 2] = $3 + 16;
 jsExceptionHere(1, 100833, $3);
 __stack_pointer = $3 + 288 | 0;
 return 0;
}

function jswrap_banglejs_getLogo() {
 var $0 = 0;
 $0 = __stack_pointer - 1440 | 0;
 __stack_pointer = $0;
 __memcpy($0 + 16 | 0, 145152, 1419);
 HEAP32[$0 + 12 >> 2] = jsvNewNativeString($0 + 16 | 0, 1419);
 HEAP32[$0 + 8 >> 2] = jswrap_heatshrink_decompress(HEAP32[$0 + 12 >> 2]);
 HEAP32[$0 + 4 >> 2] = jsvGetArrayBufferBackingString(HEAP32[$0 + 8 >> 2], 0);
 jsvUnLock2(HEAP32[$0 + 12 >> 2], HEAP32[$0 + 8 >> 2]);
 __stack_pointer = $0 + 1440 | 0;
 return HEAP32[$0 + 4 >> 2];
}

function jsvObjectSetOrRemoveChild($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 label$1: {
  if (HEAP32[$3 + 4 >> 2]) {
   jsvObjectSetChild(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
   break label$1;
  }
  jsvObjectRemoveChild(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
 }
 __stack_pointer = $3 + 16 | 0;
 return HEAP32[$3 + 4 >> 2];
}

function heatshrink_encoder_finish($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP32[$1 + 12 >> 2] = -1;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$0 + 11 | 0] = HEAPU8[$0 + 11 | 0] | 1;
  if (!HEAPU8[HEAP32[$1 + 8 >> 2] + 12 | 0]) {
   HEAP8[HEAP32[$1 + 8 >> 2] + 12 | 0] = 1;
  }
  HEAP32[$1 + 12 >> 2] = HEAPU8[HEAP32[$1 + 8 >> 2] + 12 | 0] != 9;
 }
 return HEAP32[$1 + 12 >> 2];
}

function jslFunctionCharAsString($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP8[$3 + 15 | 0] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 label$1: {
  if (HEAPU8[$3 + 15 | 0] >= 128) {
   jslTokenAsString(HEAPU8[$3 + 15 | 0], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
   break label$1;
  }
  HEAP8[HEAP32[$3 + 8 >> 2]] = HEAPU8[$3 + 15 | 0];
  HEAP8[HEAP32[$3 + 8 >> 2] + 1 | 0] = 0;
 }
 __stack_pointer = $3 + 16 | 0;
}

function jshPinOutput($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 label$1: {
  if (jshIsPinValid(HEAPU8[$2 + 15 | 0]) & 1) {
   jshPinSetValue(HEAPU8[$2 + 15 | 0], HEAP8[$2 + 14 | 0] & 1);
   if (!(jshGetPinStateIsManual(HEAPU8[$2 + 15 | 0]) & 1)) {
    jshPinSetState(HEAPU8[$2 + 15 | 0], 1);
   }
   break label$1;
  }
  jsExceptionHere(1, 102474, 0);
 }
 __stack_pointer = $2 + 16 | 0;
}

function tflite__micro__GetEvalInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = tflite__micro__GetMutableEvalInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function jsvUnLockFreeIfNeeded($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1: {
  if (jsvGetRefs(HEAP32[$1 + 12 >> 2]) & 65535) {
   break label$1;
  }
  if (!(jsvHasRef(HEAP32[$1 + 12 >> 2]) & 1)) {
   break label$1;
  }
  $0 = HEAP32[$1 + 12 >> 2];
  if (!((HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63)) {
   break label$1;
  }
  jsvFreePtr(HEAP32[$1 + 12 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
}

function flatbuffers__String_20const__20flatbuffers__Table__GetPointer_flatbuffers__String_20const___28unsigned_20short_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = flatbuffers__String_20const__20flatbuffers__Table__GetPointer_flatbuffers__String_20const___28unsigned_20short_29(HEAP32[$2 + 12 >> 2], HEAPU16[$2 + 10 >> 1]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function tflite___28anonymous_20namespace_29__MicroBuiltinDataAllocator__MicroBuiltinDataAllocator_28tflite__SimpleMemoryAllocator__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 tflite__BuiltinDataAllocator__BuiltinDataAllocator_28_29($0);
 HEAP32[$0 >> 2] = 147988;
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function jsvResetVariable($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 HEAP32[$2 + 4 >> 2] = 0;
 while (1) {
  if (HEAPU32[$2 + 4 >> 2] < 13) {
   HEAP8[HEAP32[$2 + 12 >> 2] + HEAP32[$2 + 4 >> 2] | 0] = 0;
   HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
   continue;
  }
  break;
 }
 $0 = HEAP32[$2 + 12 >> 2];
 $1 = HEAPU16[$2 + 10 >> 1] | 1024;
 HEAP8[$0 + 11 | 0] = $1;
 HEAP8[$0 + 12 | 0] = $1 >>> 8;
}

function jsvNewFromPin($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvNewFromInteger(HEAP32[$1 + 12 >> 2]);
 if (HEAP32[$1 + 8 >> 2]) {
  $0 = HEAP32[$1 + 8 >> 2];
  $2 = HEAP32[$1 + 8 >> 2];
  $2 = (HEAPU8[$2 + 11 | 0] | HEAPU8[$2 + 12 | 0] << 8) & -64 | 13;
  HEAP8[$0 + 11 | 0] = $2;
  HEAP8[$0 + 12 | 0] = $2 >>> 8;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jsspiHardwareFunc($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP8[$4 + 15 | 0] = HEAPU8[HEAP32[$4 + 16 >> 2]];
 jshSPISendMany(HEAPU8[$4 + 15 | 0], HEAP32[$4 + 28 >> 2], HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2], 0);
 __stack_pointer = $4 + 32 | 0;
}

function graphicsGetHeight($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1: {
  if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 16) {
   $0 = HEAP32[$1 + 12 >> 2];
   $0 = HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8;
   break label$1;
  }
  $0 = HEAP32[$1 + 12 >> 2];
  $0 = HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8;
 }
 return $0;
}

function float_20const__20std____2__min_float__28float_20const__2c_20float_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = float_20const__20std____2__min_float_2c_20std____2____less_float_2c_20float___28float_20const__2c_20float_20const__2c_20std____2____less_float_2c_20float__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function float_20const__20std____2__max_float__28float_20const__2c_20float_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = float_20const__20std____2__max_float_2c_20std____2____less_float_2c_20float___28float_20const__2c_20float_20const__2c_20std____2____less_float_2c_20float__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function jsvStringIteratorGetUTF8CharAndNext($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!(jsvStringIteratorHasChar_2(HEAP32[$1 + 8 >> 2]) & 1)) {
   jsvStringIteratorNext(HEAP32[$1 + 8 >> 2]);
   HEAP32[$1 + 12 >> 2] = -1;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvStringIteratorGetCharAndNext(HEAP32[$1 + 8 >> 2]) & 255;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function graphicsGetWidth($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1: {
  if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 16) {
   $0 = HEAP32[$1 + 12 >> 2];
   $0 = HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8;
   break label$1;
  }
  $0 = HEAP32[$1 + 12 >> 2];
  $0 = HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8;
 }
 return $0;
}

function tflite__internal__ContextHelper__AllocatePersistentBuffer_28TfLiteContext__2c_20unsigned_20long_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = tflite__MicroAllocator__AllocatePersistentBuffer_28unsigned_20long_29(HEAP32[HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2] >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function lcdST7789_blitStartRaw($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 HEAP32[85783] = -1;
 HEAP32[85784] = -1;
 HEAP32[85785] = HEAP32[$4 + 12 >> 2];
 HEAP32[85786] = HEAP32[$4 + 8 >> 2];
 HEAP32[85787] = HEAP32[$4 + 12 >> 2];
 HEAP32[85788] = HEAP32[$4 + 8 >> 2];
 HEAP32[85789] = HEAP32[$4 + 4 >> 2];
 HEAP32[85790] = HEAP32[$4 >> 2];
}

function jswrap_banglejs_hwinit() {
 jshPinOutput(18, 0);
 graphicsStructInit(189428, 240, 240, 16);
 HEAP8[189432] = 5;
 HEAP8[189433] = 0;
 HEAP8[189434] = 0;
 HEAP8[189435] = 0;
 HEAP8[189436] = 0;
 HEAP8[189437] = 0;
 HEAP8[189438] = 0;
 HEAP8[189439] = 0;
 HEAP8[189453] = 1;
 HEAP8[189454] = 64;
 lcdST7789_init(189428);
 graphicsSetCallbacks(189428);
 jswrap_banglejs_setTheme();
 graphicsFillRect(189428, 0, 0, 239, 239, HEAPU8[189414] | HEAPU8[189415] << 8);
}

function std____2__allocator_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29____allocator_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 std____2____non_trivial_if_true_2c_20std____2__allocator_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29_______non_trivial_if_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_espruino_getAddressOf($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP8[$2 + 7 | 0] = $1;
 label$1: {
  if (HEAP8[$2 + 7 | 0] & 1) {
   HEAP32[$2 >> 2] = 0;
   HEAP32[$2 + 12 >> 2] = jsvGetDataPointer(HEAP32[$2 + 8 >> 2], $2);
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 8 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function jsvIsNewChild($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = 0;
 label$1: {
  if (!(jsvIsName(HEAP32[$1 + 12 >> 2]) & 1)) {
   break label$1;
  }
  $0 = 0;
  if (!(jsvGetNextSibling(HEAP32[$1 + 12 >> 2]) & 65535)) {
   break label$1;
  }
  $0 = (jsvGetNextSibling(HEAP32[$1 + 12 >> 2]) & 65535) == (jsvGetPrevSibling(HEAP32[$1 + 12 >> 2]) & 65535);
 }
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_date_setMilliseconds($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 44 >> 2] = $0;
 HEAP32[$2 + 40 >> 2] = $1;
 getTimeFromDateVar($2 + 8 | 0, HEAP32[$2 + 44 >> 2], 0);
 HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 40 >> 2];
 setCorrectTimeZone($2 + 8 | 0);
 $3 = jswrap_date_setTime(HEAP32[$2 + 44 >> 2], fromTimeInDay($2 + 8 | 0));
 __stack_pointer = $2 + 48 | 0;
 return +$3;
}

function jsvArrayAddUnique($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = jsvGetIndexOf(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 0);
 label$1: {
  if (!HEAP32[$2 + 4 >> 2]) {
   jsvArrayPush(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
   break label$1;
  }
  jsvUnLock(HEAP32[$2 + 4 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
}

function jswrap_e_dumpStr() {
 var $0 = 0;
 $0 = __stack_pointer - 48 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 40 >> 2] = jsvNewFromEmptyString_9();
 label$1: {
  if (!HEAP32[$0 + 40 >> 2]) {
   HEAP32[$0 + 44 >> 2] = 0;
   break label$1;
  }
  jsvStringIteratorNew($0, HEAP32[$0 + 40 >> 2], 0);
  jsiDumpState(2, $0);
  jsvStringIteratorFree_11($0);
  HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 40 >> 2];
 }
 __stack_pointer = $0 + 48 | 0;
 return HEAP32[$0 + 44 >> 2];
}

function OneWireReset($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 jshPinSetState(HEAPU8[$1 + 15 | 0], 3);
 jshPinSetValue(HEAPU8[$1 + 15 | 0], 0);
 jshDelayMicroseconds(500);
 jshPinSetValue(HEAPU8[$1 + 15 | 0], 1);
 jshDelayMicroseconds(80);
 HEAP8[$1 + 14 | 0] = (jshPinGetValue(HEAPU8[$1 + 15 | 0]) ^ -1) & 1;
 jshDelayMicroseconds(420);
 __stack_pointer = $1 + 16 | 0;
 return HEAP8[$1 + 14 | 0] & 1;
}

function jsvStringIteratorGetCharOrMinusOne($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!(HEAPU32[HEAP32[$1 + 8 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 8 >> 2] + 4 >> 2] ? HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2] : 0)) {
   HEAP32[$1 + 12 >> 2] = -1;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = HEAPU8[HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2] + HEAP32[HEAP32[$1 + 8 >> 2] >> 2] | 0];
 }
 return HEAP32[$1 + 12 >> 2];
}

function flatbuffers__IndirectHelper_long_20long___Read_28unsigned_20char_20const__2c_20unsigned_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 8 >> 2] << 3) | 0;
 $0 = long_20long_20flatbuffers__EndianScalar_long_20long__28long_20long_29(HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function jsiSetBusy($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 label$1: {
  if (HEAP8[$2 + 11 | 0] & 1) {
   HEAP32[46767] = HEAP32[$2 + 12 >> 2] | HEAP32[46767];
   break label$1;
  }
  HEAP32[46767] = HEAP32[46767] & (HEAP32[$2 + 12 >> 2] ^ -1);
 }
 if (HEAPU8[153825] != 255) {
  jshPinOutput(HEAPU8[153825], HEAP32[46767] != 0);
 }
 __stack_pointer = $2 + 16 | 0;
}

function heatshrink_var_input_cb($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 4 >> 2] = -1;
 if (jsvIteratorHasElement(HEAP32[$1 + 8 >> 2]) & 1) {
  HEAP32[$1 + 4 >> 2] = jsvIteratorGetIntegerValue(HEAP32[$1 + 8 >> 2]) & 255;
 }
 jsvIteratorNext(HEAP32[$1 + 8 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 4 >> 2];
}

function lcdST7789_cmd($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 if (HEAP32[$3 + 12 >> 2] == 55) {
  HEAP32[47375] = HEAPU8[HEAP32[$3 + 4 >> 2] + 1 | 0] | HEAPU8[HEAP32[$3 + 4 >> 2]] << 8;
  if (HEAP8[189504] & 1) {
   HEAP32[47375] = HEAP32[47375] + 40;
  }
  if (HEAP32[47375] >= 320) {
   HEAP32[47375] = HEAP32[47375] - 320;
  }
  HEAP8[189505] = 1;
 }
}

function tflite__MultiplyByQuantizedMultiplierGreaterThanOne_28int_2c_20int_2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = int_20gemmlowp__SaturatingRoundingDoublingHighMul_int__28int_2c_20int_29(Math_imul(HEAP32[$3 + 12 >> 2], 1 << HEAP32[$3 + 4 >> 2]), HEAP32[$3 + 8 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function flatbuffers__Vector_float___Get_28unsigned_20int_29_20const($0, $1) {
 var $2 = 0, $3 = Math_fround(0);
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = flatbuffers__IndirectHelper_float___Read_28unsigned_20char_20const__2c_20unsigned_20int_29(flatbuffers__Vector_float___Data_28_29_20const(HEAP32[$2 + 12 >> 2]), HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $3;
}

function tflite__MicroOpResolver__FindOp_28tflite__BuiltinOperator_2c_20int_29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, HEAP32[$3 + 8 >> 2]) | 0;
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function jsiHandleIOEventForSerial($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 >> 2] = jsiExtractIOEventData(HEAP32[$2 + 8 >> 2], $2 + 4 | 0);
 if (HEAP32[$2 >> 2]) {
  jswrap_stream_pushData(HEAP32[$2 + 12 >> 2], HEAP32[$2 >> 2], 1);
  jsvUnLock(HEAP32[$2 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 4 >> 2];
}

function jsvStringIteratorPrintfCallback($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 while (1) {
  if (HEAPU8[HEAP32[$2 + 12 >> 2]]) {
   $1 = HEAP32[$2 + 8 >> 2];
   $0 = HEAP32[$2 + 12 >> 2];
   HEAP32[$2 + 12 >> 2] = $0 + 1;
   jsvStringIteratorAppend($1, HEAP8[$0 | 0]);
   continue;
  }
  break;
 }
 __stack_pointer = $2 + 16 | 0;
}

function jsvArrayBufferIteratorFloatToData($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAPF64[$4 + 8 >> 3] = $3;
 label$1: {
  if (HEAP32[$4 + 24 >> 2] == 4) {
   HEAPF32[HEAP32[$4 + 28 >> 2] >> 2] = HEAPF64[$4 + 8 >> 3];
   break label$1;
  }
  if (HEAP32[$4 + 24 >> 2] == 8) {
   HEAPF64[HEAP32[$4 + 28 >> 2] >> 3] = HEAPF64[$4 + 8 >> 3];
  }
 }
}

function flatbuffers__Vector_long_20long___Get_28unsigned_20int_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = flatbuffers__IndirectHelper_long_20long___Read_28unsigned_20char_20const__2c_20unsigned_20int_29(flatbuffers__Vector_long_20long___Data_28_29_20const(HEAP32[$2 + 12 >> 2]), HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function lcdST7789_blitPixel($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP16[(HEAP32[85785] + Math_imul(HEAP32[85786], 240) << 1) + 189520 >> 1] = HEAP32[$1 + 12 >> 2];
 HEAP8[189505] = 1;
 HEAP32[85785] = HEAP32[85785] + 1;
 if (HEAP32[85785] > HEAP32[85789]) {
  HEAP32[85785] = HEAP32[85787];
  HEAP32[85786] = HEAP32[85786] + 1;
  if (HEAP32[85786] > HEAP32[85790]) {
   HEAP32[85786] = HEAP32[85788];
  }
 }
}

function gen_jswrap_Graphics_setBgColor($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = jswrap_graphics_setColorX(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2], 0);
 __stack_pointer = $4 + 16 | 0;
 return $0 | 0;
}

function std____2____compressed_pair_TfLiteFullyConnectedParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_TfLiteFullyConnectedParams__2c_200_2c_20false_____get_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function lcdInit_ArrayBuffer($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jswrap_arraybuffer_constructor(graphicsGetMemoryRequired(HEAP32[$1 + 12 >> 2]));
 $0 = HEAP32[$1 + 12 >> 2];
 jsvAddNamedChildAndUnLock(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), HEAP32[$1 + 8 >> 2], 101361);
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_espruino_clip($0, $1, $2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 HEAPF64[$3 + 24 >> 3] = $0;
 HEAPF64[$3 + 16 >> 3] = $1;
 HEAPF64[$3 + 8 >> 3] = $2;
 if (HEAPF64[$3 + 24 >> 3] < HEAPF64[$3 + 16 >> 3]) {
  HEAPF64[$3 + 24 >> 3] = HEAPF64[$3 + 16 >> 3];
 }
 if (HEAPF64[$3 + 24 >> 3] > HEAPF64[$3 + 8 >> 3]) {
  HEAPF64[$3 + 24 >> 3] = HEAPF64[$3 + 8 >> 3];
 }
 return +HEAPF64[$3 + 24 >> 3];
}

function jsiGetClassNameFromDevice($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 11 | 0] = $0;
 HEAP32[$1 + 4 >> 2] = jshGetDeviceString(HEAPU8[$1 + 11 | 0]);
 label$1: {
  if (!HEAPU8[HEAP32[$1 + 4 >> 2]]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvFindChildFromString(HEAP32[46747], HEAP32[$1 + 4 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function gen_jswrap_Graphics_setColor($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = jswrap_graphics_setColorX(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2], 1);
 __stack_pointer = $4 + 16 | 0;
 return $0 | 0;
}

function jswrap_espruino_setTimeZone($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAPF64[$1 + 8 >> 3] = $0;
 jswrap_espruino_setDST(0);
 $3 = HEAP32[46748];
 $0 = HEAPF64[$1 + 8 >> 3] * 60;
 label$1: {
  if (Math_abs($0) < 2147483648) {
   $2 = ~~$0;
   break label$1;
  }
  $2 = -2147483648;
 }
 jsvObjectSetChildAndUnLock($3, 96373, jsvNewFromInteger($2));
 __stack_pointer = $1 + 16 | 0;
}

function std____2____compressed_pair_TfLiteDepthwiseConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_TfLiteDepthwiseConvParams__2c_200_2c_20false_____get_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_array_unshift($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = jsvNewFromInteger(0);
 jsvUnLock2(jswrap_array_splice(HEAP32[$2 + 12 >> 2], 0, HEAP32[$2 + 4 >> 2], HEAP32[$2 + 8 >> 2]), HEAP32[$2 + 4 >> 2]);
 $0 = jsvGetLength(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function isNegativeZero($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = __stack_pointer - 32 | 0;
 HEAPF64[$1 + 24 >> 3] = $0;
 HEAPF64[$1 + 16 >> 3] = -0;
 HEAP32[$1 + 12 >> 2] = $1 + 16;
 HEAP32[$1 + 8 >> 2] = $1 + 24;
 $2 = HEAP32[$1 + 8 >> 2];
 $3 = HEAP32[$2 >> 2];
 $4 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$1 + 12 >> 2];
 $1 = HEAP32[$2 + 4 >> 2];
 $5 = HEAP32[$2 >> 2];
 $2 = $3;
 return ($5 | 0) == ($2 | 0) & ($4 | 0) == ($1 | 0);
}

function int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = int_20const__20std____2__min_int_2c_20std____2____less_int_2c_20int___28int_20const__2c_20int_20const__2c_20std____2____less_int_2c_20int__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = int_20const__20std____2__max_int_2c_20std____2____less_int_2c_20int___28int_20const__2c_20int_20const__2c_20std____2____less_int_2c_20int__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function jsvArrayBufferGetFromName($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvGetInteger(HEAP32[$1 + 12 >> 2]);
 HEAP32[$1 + 4 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$1 + 12 >> 2]) & 65535);
 HEAP32[$1 >> 2] = jsvArrayBufferGet(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 8 >> 2]);
 jsvUnLock(HEAP32[$1 + 4 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 >> 2];
}

function jswrap_math_sign($0) {
 $0 = +$0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAPF64[$1 >> 3] = $0;
 label$1: {
  label$2: {
   if (HEAPF64[$1 >> 3] != 0) {
    if (!(isNegativeZero(HEAPF64[$1 >> 3]) & 1)) {
     break label$2;
    }
   }
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = HEAPF64[$1 >> 3] > 0 ? 1 : -1;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jswrap_math_clip($0, $1, $2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 HEAPF64[$3 + 24 >> 3] = $0;
 HEAPF64[$3 + 16 >> 3] = $1;
 HEAPF64[$3 + 8 >> 3] = $2;
 if (HEAPF64[$3 + 24 >> 3] < HEAPF64[$3 + 16 >> 3]) {
  HEAPF64[$3 + 24 >> 3] = HEAPF64[$3 + 16 >> 3];
 }
 if (HEAPF64[$3 + 24 >> 3] > HEAPF64[$3 + 8 >> 3]) {
  HEAPF64[$3 + 24 >> 3] = HEAPF64[$3 + 8 >> 3];
 }
 return +HEAPF64[$3 + 24 >> 3];
}

function tflite__MicroOpResolver__FindOp_28char_20const__2c_20int_29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, HEAP32[$3 + 8 >> 2]) | 0;
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function jswrap_pin_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP8[$1 + 7 | 0] = jshGetPinFromVar(HEAP32[$1 + 8 >> 2]);
 label$1: {
  if (!(jshIsPinValid(HEAPU8[$1 + 7 | 0]) & 1)) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvNewFromPin(HEAPU8[$1 + 7 | 0]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvGetInternalFunctionCheckerFor($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (jsvIsFunction(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 3;
   break label$1;
  }
  if (jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 4;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function tflite___28anonymous_20namespace_29__ConvertPadding_28tflite__Padding_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  label$2: {
   switch (HEAP32[$1 + 8 >> 2]) {
   case 0:
    HEAP32[$1 + 12 >> 2] = 1;
    break label$1;

   case 1:
    HEAP32[$1 + 12 >> 2] = 2;
    break label$1;

   default:
    break label$2;
   }
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 return HEAP32[$1 + 12 >> 2];
}

function tflite__Operator__builtin_options_as_DepthwiseConv2DOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1: {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 2) {
   $0 = tflite__Operator__builtin_options_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_onewire_reset($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP8[$1 + 7 | 0] = onewire_getpin(HEAP32[$1 + 8 >> 2]);
 label$1: {
  if (!(jshIsPinValid(HEAPU8[$1 + 7 | 0]) & 1)) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  HEAP8[$1 + 15 | 0] = OneWireReset(HEAPU8[$1 + 7 | 0]) & 1;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP8[$1 + 15 | 0] & 1;
}

function jspAppendStackTrace($0) {
 var $1 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 44 >> 2] = $0;
 jsvStringIteratorNew($1 + 8 | 0, HEAP32[$1 + 44 >> 2], 0);
 jsvStringIteratorGotoEnd($1 + 8 | 0);
 jslPrintPosition(2, $1 + 8 | 0, HEAP32[HEAP32[38615] + 8 >> 2]);
 jslPrintTokenLineMarker(2, $1 + 8 | 0, HEAP32[HEAP32[38615] + 8 >> 2], 0);
 jsvStringIteratorFree_4($1 + 8 | 0);
 __stack_pointer = $1 + 48 | 0;
}

function tflite__Operator__builtin_options_as_FullyConnectedOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1: {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 8) {
   $0 = tflite__Operator__builtin_options_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function lcd_flip($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 if (HEAP8[$2 + 11 | 0] & 1) {
  HEAP8[189468] = 0;
  HEAP8[189469] = 0;
  HEAP8[189470] = 0;
  HEAP8[189471] = 0;
  HEAP8[189472] = 239;
  HEAP8[189473] = 0;
  HEAP8[189474] = 239;
  HEAP8[189475] = 0;
 }
 graphicsInternalFlip();
 __stack_pointer = $2 + 16 | 0;
}

function jswrap_object_valueOf($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP32[$1 >> 2] = HEAP32[$1 + 8 >> 2];
   jsExceptionHere(3, 104092, $1);
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[$1 + 8 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsiConsolePrintString($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 while (1) {
  if (HEAPU8[HEAP32[$1 + 12 >> 2]]) {
   if (HEAP8[HEAP32[$1 + 12 >> 2]] == 10) {
    jsiConsolePrintChar(13);
   }
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$1 + 12 >> 2] = $0 + 1;
   jsiConsolePrintChar(HEAP8[$0 | 0]);
   continue;
  }
  break;
 }
 __stack_pointer = $1 + 16 | 0;
}

function jshPushIOEvent($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP8[$3 + 31 | 0] = $0;
 HEAP32[$3 + 16 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 HEAP8[$3 + 8 | 0] = HEAPU8[$3 + 31 | 0];
 $0 = HEAP32[$3 + 16 >> 2];
 HEAP8[$3 + 9 | 0] = $0;
 HEAP8[$3 + 10 | 0] = $0 >>> 8;
 HEAP8[$3 + 11 | 0] = $0 >>> 16;
 HEAP8[$3 + 12 | 0] = $0 >>> 24;
 jshPushEvent($3 + 8 | 0);
 __stack_pointer = $3 + 32 | 0;
}

function tflite__Model__operator_codes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_flatbuffers__Offset_tflite__OperatorCode___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__OperatorCode___20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 6);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_string_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!jsvGetArrayLength(HEAP32[$1 + 8 >> 2])) {
   HEAP32[$1 + 12 >> 2] = jsvNewFromEmptyString_8();
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvAsStringAndUnLock(jsvGetArrayItem(HEAP32[$1 + 8 >> 2], 0));
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvIterateCallbackToBytes($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 24 >> 2];
 HEAP32[$3 + 12 >> 2] = 0;
 HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 20 >> 2];
 jsvIterateCallback(HEAP32[$3 + 28 >> 2], 6, $3 + 8 | 0);
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 12 >> 2];
}

function jshGetPinString($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 HEAP8[HEAP32[$2 + 12 >> 2]] = 0;
 label$1: {
  if (HEAPU8[$2 + 11 | 0] < 32) {
   HEAP8[HEAP32[$2 + 12 >> 2]] = 68;
   itostr_2(HEAPU8[$2 + 11 | 0], HEAP32[$2 + 12 >> 2] + 1 | 0, 10);
   break label$1;
  }
  strcpy(HEAP32[$2 + 12 >> 2], 106576);
 }
 __stack_pointer = $2 + 16 | 0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__OperatorCode____operator_5b_5d_28unsigned_20int_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = flatbuffers__Vector_flatbuffers__Offset_tflite__OperatorCode____Get_28unsigned_20int_29_20const(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function tflite__RuntimeShape__RuntimeShape_28int_2c_20int_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP32[$0 >> 2] = 0;
 tflite__RuntimeShape__ReplaceWith_28int_2c_20int_20const__29($0, HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function jsvObjectGetChildIfExists($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  if (!HEAP32[$2 + 8 >> 2]) {
   HEAP32[$2 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = jsvSkipNameAndUnLock(jsvFindChildFromString(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]));
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function jsvIsFunctionParameter($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = 0;
 label$1: {
  if (!HEAP32[$1 + 12 >> 2]) {
   break label$1;
  }
  $2 = HEAP32[$1 + 12 >> 2];
  $0 = 0;
  if (!((HEAPU8[$2 + 11 | 0] | HEAPU8[$2 + 12 | 0] << 8) & 128)) {
   break label$1;
  }
  $0 = jsvIsString(HEAP32[$1 + 12 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return $0 & 1;
}

function jsvAppendPrintf($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer + -64 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 60 >> 2] = $0;
 HEAP32[$3 + 56 >> 2] = $1;
 jsvStringIteratorNew($3 + 16 | 0, HEAP32[$3 + 60 >> 2], 0);
 jsvStringIteratorGotoEnd($3 + 16 | 0);
 HEAP32[$3 + 12 >> 2] = $2;
 vcbprintf(2, $3 + 16 | 0, HEAP32[$3 + 56 >> 2], HEAP32[$3 + 12 >> 2]);
 jsvStringIteratorFree_1($3 + 16 | 0);
 __stack_pointer = $3 - -64 | 0;
}

function jsnCallFunction($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP16[$5 + 26 >> 1] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 $0 = jswCallFunctionHack(HEAP32[$5 + 28 >> 2], HEAPU16[$5 + 26 >> 1], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], HEAP32[$5 + 12 >> 2]);
 __stack_pointer = $5 + 32 | 0;
 return $0;
}

function gemmlowp__FixedPoint_int_2c_20_1_20__202__20gemmlowp__ExactMulByPot__1_2c_20int_2c_202__28gemmlowp__FixedPoint_int_2c_202__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 >> 2] = $0;
 $0 = HEAP32[gemmlowp__FixedPoint_int_2c_202___raw_28_29($1) >> 2];
 HEAP32[gemmlowp__FixedPoint_int_2c_201___raw_28_29($1 + 8 | 0) >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function tflite__internal__ContextHelper__GetScratchBuffer_28TfLiteContext__2c_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = tflite__MicroAllocator__GetScratchBuffer_28int_29_20const(HEAP32[HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2] >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function std____2____compressed_pair_TfLiteSoftmaxParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_TfLiteSoftmaxParams__2c_200_2c_20false_____get_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____compressed_pair_TfLiteReshapeParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_TfLiteReshapeParams__2c_200_2c_20false_____get_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_tfmicrointerpreter_invoke($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jswrap_tfmicrointerpreter_getTFMI(HEAP32[$1 + 12 >> 2]);
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   break label$1;
  }
  if (tf_invoke(HEAP32[$1 + 8 >> 2]) & 1) {
   break label$1;
  }
  jsExceptionHere(3, 106666, 0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function tflite__Operator__builtin_options_as_ReshapeOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1: {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 17) {
   $0 = tflite__Operator__builtin_options_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jsvIsNameWithValue($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63;
  $2 = HEAP8[$1 + 7 | 0] >= 16 ? HEAP8[$1 + 7 | 0] <= 22 : $2;
  HEAP8[$1 + 15 | 0] = $2;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function jspeiLoadScopesFromVar($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[46749]);
 HEAP32[46749] = 0;
 if (HEAP32[$1 + 12 >> 2]) {
  label$2: {
   if (jsvIsArray(HEAP32[$1 + 12 >> 2]) & 1) {
    HEAP32[46749] = jsvCopy(HEAP32[$1 + 12 >> 2], 1);
    break label$2;
   }
   HEAP32[46749] = jsvNewArray($1 + 12 | 0, 1);
  }
 }
 __stack_pointer = $1 + 16 | 0;
}

function tflite__ops__micro__conv__RuntimePaddingType_28TfLitePadding_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  label$2: {
   switch (HEAP32[$1 + 8 >> 2] - 1 | 0) {
   case 0:
    HEAP8[$1 + 15 | 0] = 1;
    break label$1;

   case 1:
    HEAP8[$1 + 15 | 0] = 2;
    break label$1;

   default:
    break label$2;
   }
  }
  HEAP8[$1 + 15 | 0] = 0;
 }
 return HEAPU8[$1 + 15 | 0];
}

function tflite__Operator__builtin_options_as_SoftmaxOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1: {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 9) {
   $0 = tflite__Operator__builtin_options_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____compressed_pair_TfLiteFullyConnectedParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_TfLiteFullyConnectedParams__2c_200_2c_20false_____get_28_29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_waveform_startOutput($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP8[$4 + 27 | 0] = $1;
 HEAPF64[$4 + 16 >> 3] = $2;
 HEAP32[$4 + 12 >> 2] = $3;
 jswrap_waveform_start(HEAP32[$4 + 28 >> 2], HEAPU8[$4 + 27 | 0], HEAPF64[$4 + 16 >> 3], HEAP32[$4 + 12 >> 2], 1);
 __stack_pointer = $4 + 32 | 0;
}

function gen_jswrap_DataView_setFloat64($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP8[$4 + 3 | 0] = $3;
 jswrap_dataview_set(HEAP32[$4 + 12 >> 2], 40, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP8[$4 + 3 | 0] & 1);
 __stack_pointer = $4 + 16 | 0;
}

function gen_jswrap_DataView_setFloat32($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP8[$4 + 3 | 0] = $3;
 jswrap_dataview_set(HEAP32[$4 + 12 >> 2], 36, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP8[$4 + 3 | 0] & 1);
 __stack_pointer = $4 + 16 | 0;
}

function tflite__Operator__builtin_options_as_Pool2DOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1: {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 5) {
   $0 = tflite__Operator__builtin_options_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__Operator__builtin_options_as_Conv2DOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1: {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 1) {
   $0 = tflite__Operator__builtin_options_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function lcdSetPixel_ArrayBuffer_flat($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 lcdSetPixels_ArrayBuffer_flat(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], 1, HEAP32[$4 >> 2]);
 __stack_pointer = $4 + 16 | 0;
}

function jsvIsBasicString($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63;
  $2 = HEAP8[$1 + 7 | 0] >= 28 ? HEAP8[$1 + 7 | 0] <= 36 : $2;
  HEAP8[$1 + 15 | 0] = $2;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function std____2____compressed_pair_TfLiteDepthwiseConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_TfLiteDepthwiseConvParams__2c_200_2c_20false_____get_28_29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jsvStringIteratorSetCharAndNext($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 if (jsvStringIteratorHasChar_2(HEAP32[$2 + 12 >> 2]) & 1) {
  HEAP8[HEAP32[HEAP32[$2 + 12 >> 2] + 16 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0] = HEAPU8[$2 + 11 | 0];
 }
 jsvStringIteratorNextInline(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function jsvObjectGetChildI($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  if (!HEAP32[$2 + 8 >> 2]) {
   HEAP32[$2 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = jsvSkipNameAndUnLock(jsvFindChildFromStringI(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]));
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function isHexadecimal($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 label$1: {
  if (HEAP8[$1 + 15 | 0] >= 48) {
   $0 = 1;
   if (HEAP8[$1 + 15 | 0] <= 57) {
    break label$1;
   }
  }
  if (HEAP8[$1 + 15 | 0] >= 97) {
   $0 = 1;
   if (HEAP8[$1 + 15 | 0] <= 102) {
    break label$1;
   }
  }
  $2 = HEAP8[$1 + 15 | 0] >= 65 ? HEAP8[$1 + 15 | 0] <= 70 : $2;
  $0 = $2;
 }
 return $0 & 1;
}

function gen_jswrap_DataView_setUint32($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP8[$4 + 3 | 0] = $3;
 jswrap_dataview_set(HEAP32[$4 + 12 >> 2], 4, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP8[$4 + 3 | 0] & 1);
 __stack_pointer = $4 + 16 | 0;
}

function gen_jswrap_DataView_setUint16($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP8[$4 + 3 | 0] = $3;
 jswrap_dataview_set(HEAP32[$4 + 12 >> 2], 2, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP8[$4 + 3 | 0] & 1);
 __stack_pointer = $4 + 16 | 0;
}

function gen_jswrap_DataView_setInt32($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP8[$4 + 3 | 0] = $3;
 jswrap_dataview_set(HEAP32[$4 + 12 >> 2], 20, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP8[$4 + 3 | 0] & 1);
 __stack_pointer = $4 + 16 | 0;
}

function gen_jswrap_DataView_setInt16($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP8[$4 + 3 | 0] = $3;
 jswrap_dataview_set(HEAP32[$4 + 12 >> 2], 18, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP8[$4 + 3 | 0] & 1);
 __stack_pointer = $4 + 16 | 0;
}

function tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[$3 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return HEAP32[$3 >> 2];
}

function jsvIsStringExt($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63;
  $2 = HEAP8[$1 + 7 | 0] >= 40 ? HEAP8[$1 + 7 | 0] <= 49 : $2;
  HEAP8[$1 + 15 | 0] = $2;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function jsvIsBoolean($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63;
  $0 = 1;
  $0 = HEAP8[$1 + 7 | 0] != 12 ? HEAP8[$1 + 7 | 0] == 17 : $0;
  HEAP8[$1 + 15 | 0] = $0;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function jsvIsBasicName($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63;
  $2 = HEAP8[$1 + 7 | 0] >= 23 ? HEAP8[$1 + 7 | 0] <= 27 : $2;
  HEAP8[$1 + 15 | 0] = $2;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function gen_jswrap_DataView_setUint8($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP8[$4 + 3 | 0] = $3;
 jswrap_dataview_set(HEAP32[$4 + 12 >> 2], 1, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP8[$4 + 3 | 0] & 1);
 __stack_pointer = $4 + 16 | 0;
}

function gen_jswrap_DataView_setInt8($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP8[$4 + 3 | 0] = $3;
 jswrap_dataview_set(HEAP32[$4 + 12 >> 2], 17, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP8[$4 + 3 | 0] & 1);
 __stack_pointer = $4 + 16 | 0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph____operator_5b_5d_28unsigned_20int_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph____Get_28unsigned_20int_29_20const(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function charToUpperCase($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 label$1: {
  if (!(!(HEAP8[$1 + 15 | 0] <= 122 & HEAP8[$1 + 15 | 0] >= 97 | HEAP8[$1 + 15 | 0] >>> 0 <= 246 & HEAP8[$1 + 15 | 0] >>> 0 >= 224) & (HEAP8[$1 + 15 | 0] >>> 0 < 248 | HEAP8[$1 + 15 | 0] >>> 0 > 254))) {
   $0 = HEAP8[$1 + 15 | 0] - 32 | 0;
   break label$1;
  }
  $0 = HEAP8[$1 + 15 | 0];
 }
 return $0 << 24 >> 24;
}

function tflite__SubGraph__operators_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_flatbuffers__Offset_tflite__Operator___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__Operator___20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 10);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____compressed_pair_TfLitePoolParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_TfLitePoolParams__2c_200_2c_20false_____get_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____compressed_pair_TfLiteConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_TfLiteConvParams__2c_200_2c_20false_____get_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function charToLowerCase($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 label$1: {
  if (!(!(HEAP8[$1 + 15 | 0] <= 90 & HEAP8[$1 + 15 | 0] >= 65 | HEAP8[$1 + 15 | 0] >>> 0 <= 214 & HEAP8[$1 + 15 | 0] >>> 0 >= 192) & (HEAP8[$1 + 15 | 0] >>> 0 < 216 | HEAP8[$1 + 15 | 0] >>> 0 > 222))) {
   $0 = HEAP8[$1 + 15 | 0] + 32 | 0;
   break label$1;
  }
  $0 = HEAP8[$1 + 15 | 0];
 }
 return $0 << 24 >> 24;
}

function jsvIsNumeric($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63;
  $2 = HEAP8[$1 + 7 | 0] >= 10 ? HEAP8[$1 + 7 | 0] <= 17 : $2;
  HEAP8[$1 + 15 | 0] = $2;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function flatbuffers__Vector_int___Get_28unsigned_20int_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = flatbuffers__IndirectHelper_int___Read_28unsigned_20char_20const__2c_20unsigned_20int_29(flatbuffers__Vector_int___Data_28_29_20const(HEAP32[$2 + 12 >> 2]), HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function jsvIsString($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63;
  $2 = HEAP8[$1 + 7 | 0] >= 18 ? HEAP8[$1 + 7 | 0] <= 39 : $2;
  HEAP8[$1 + 15 | 0] = $2;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function jsvIsObject($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63;
  $0 = 1;
  $0 = HEAP8[$1 + 7 | 0] != 5 ? HEAP8[$1 + 7 | 0] == 1 : $0;
  HEAP8[$1 + 15 | 0] = $0;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function jsvGetLastArrayItem($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP16[$1 + 6 >> 1] = jsvGetLastChild(HEAP32[$1 + 8 >> 2]);
 label$1: {
  if (!HEAPU16[$1 + 6 >> 1]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvSkipNameAndUnLock(jsvLock(HEAPU16[$1 + 6 >> 1]));
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsiIsAboutToEditInputLine() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 if (HEAP8[187065] & 1) {
  HEAP8[187065] = 0;
  if (jsiIsInHistory(HEAP32[46763]) & 1) {
   HEAP32[$0 + 12 >> 2] = jsvCopy(HEAP32[46763], 0);
   if (HEAP32[$0 + 12 >> 2]) {
    jsiInputLineCursorMoved();
    jsvUnLock(HEAP32[46763]);
    HEAP32[46763] = HEAP32[$0 + 12 >> 2];
   }
  }
 }
 __stack_pointer = $0 + 16 | 0;
}

function getCalendarDate($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 getDateFromDayNumber(HEAP32[$2 + 12 >> 2], $0 + 12 | 0, $0 + 8 | 0, $0 + 4 | 0);
 HEAP32[$0 >> 2] = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 + 16 >> 2] = (HEAP32[$0 >> 2] + 4 | 0) % 7;
 if (HEAP32[$0 + 16 >> 2] < 0) {
  HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 16 >> 2] + 7;
 }
 __stack_pointer = $2 + 16 | 0;
}

function _jsiInitNamedArray($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvObjectGetChild(HEAP32[46748], HEAP32[$1 + 12 >> 2], 3);
 HEAP16[$1 + 6 >> 1] = 0;
 if (HEAP32[$1 + 8 >> 2]) {
  HEAP16[$1 + 6 >> 1] = jsvGetRef(jsvRef(HEAP32[$1 + 8 >> 2]));
 }
 jsvUnLock(HEAP32[$1 + 8 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAPU16[$1 + 6 >> 1];
}

function tflite__Model__20flatbuffers__GetMutableRoot_tflite__Model__28void__29($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 flatbuffers__EndianCheck_28_29();
 $0 = HEAP32[$1 + 12 >> 2];
 $2 = unsigned_20int_20flatbuffers__EndianScalar_unsigned_20int__28unsigned_20int_29(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 + $2 | 0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer____operator_5b_5d_28unsigned_20int_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer____Get_28unsigned_20int_29_20const(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function tflite__Model__subgraphs_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph___20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 8);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__Model__metadata_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_flatbuffers__Offset_tflite__Metadata___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__Metadata___20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 16);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jsvIsName($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63;
  $2 = HEAP8[$1 + 7 | 0] >= 14 ? HEAP8[$1 + 7 | 0] <= 27 : $2;
  HEAP8[$1 + 15 | 0] = $2;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function st_e_yield_literal($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  if (can_take_byte(HEAP32[$2 + 4 >> 2])) {
   push_literal_byte(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]);
   HEAP32[$2 + 12 >> 2] = 2;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = 4;
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function fromTimeInDay($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return +HEAP32[HEAP32[$1 + 12 >> 2] >> 2] * 864e5 + +(HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] + Math_imul(HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] + Math_imul((HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2] + Math_imul(HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2], 60) | 0) - HEAP32[HEAP32[$1 + 12 >> 2] + 20 >> 2] | 0, 60) | 0, 1e3) | 0);
}

function tflite__SubGraph__tensors_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_flatbuffers__Offset_tflite__Tensor___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__Tensor___20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 4);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function lcdSetPixel_ArrayBuffer($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 lcdSetPixels_ArrayBuffer(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], 1, HEAP32[$4 >> 2]);
 __stack_pointer = $4 + 16 | 0;
}

function jsvObjectIteratorNext($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[HEAP32[$1 + 12 >> 2] >> 2]) {
  HEAP16[$1 + 10 >> 1] = jsvGetNextSibling(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
  jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
  $0 = jsvLockSafe(HEAPU16[$1 + 10 >> 1]);
  HEAP32[HEAP32[$1 + 12 >> 2] >> 2] = $0;
 }
 __stack_pointer = $1 + 16 | 0;
}

function jsvArrayBufferGet($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 80 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 76 >> 2] = $0;
 HEAP32[$2 + 72 >> 2] = $1;
 jsvArrayBufferIteratorNew($2 + 16 | 0, HEAP32[$2 + 76 >> 2], HEAP32[$2 + 72 >> 2]);
 HEAP32[$2 + 12 >> 2] = jsvArrayBufferIteratorGetValue($2 + 16 | 0, 0);
 jsvArrayBufferIteratorFree($2 + 16 | 0);
 __stack_pointer = $2 + 80 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function jsiObjectHasCallbacks($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 HEAP8[$2 + 3 | 0] = (jsvIsUndefined(HEAP32[$2 + 4 >> 2]) ^ -1) & 1;
 jsvUnLock(HEAP32[$2 + 4 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return HEAP8[$2 + 3 | 0] & 1;
}

function flatbuffers__IndirectHelper_float___Read_28unsigned_20char_20const__2c_20unsigned_20int_29($0, $1) {
 var $2 = 0, $3 = Math_fround(0);
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = float_20flatbuffers__EndianScalar_float__28float_29(HEAPF32[HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 8 >> 2] << 2) >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $3;
}

function tflite__Model__buffers_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer___20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 12);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function terminalGetGFX($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!(HEAPU8[189480] | HEAPU8[189481] << 8 | (HEAPU8[189482] << 16 | HEAPU8[189483] << 24))) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  __memcpy(HEAP32[$1 + 8 >> 2], 189428, 72);
  HEAP8[$1 + 15 | 0] = 1;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP8[$1 + 15 | 0] & 1;
}

function espruino_snprintf($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = espruino_snprintf_va(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]);
 __stack_pointer = $4 + 32 | 0;
 return HEAP32[$4 + 12 >> 2];
}

function std____2____compressed_pair_TfLiteSoftmaxParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_TfLiteSoftmaxParams__2c_200_2c_20false_____get_28_29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____compressed_pair_TfLiteReshapeParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_TfLiteReshapeParams__2c_200_2c_20false_____get_28_29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jsvArrayBufferSet($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 80 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 76 >> 2] = $0;
 HEAP32[$3 + 72 >> 2] = $1;
 HEAP32[$3 + 68 >> 2] = $2;
 jsvArrayBufferIteratorNew($3 + 8 | 0, HEAP32[$3 + 76 >> 2], HEAP32[$3 + 72 >> 2]);
 jsvArrayBufferIteratorSetValue($3 + 8 | 0, HEAP32[$3 + 68 >> 2], 0);
 jsvArrayBufferIteratorFree($3 + 8 | 0);
 __stack_pointer = $3 + 80 | 0;
}

function jswrap_object_removeAllListeners_cstr($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = jsvNewFromString(HEAP32[$2 + 8 >> 2]);
 if (HEAP32[$2 + 4 >> 2]) {
  jswrap_object_removeAllListeners(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 4 >> 2]);
  jsvUnLock(HEAP32[$2 + 4 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
}

function jsvIsVariableDefined($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = 1;
 label$1: {
  if (!(jsvIsName(HEAP32[$1 + 12 >> 2]) & 1)) {
   break label$1;
  }
  $0 = 1;
  if (jsvIsNameWithValue(HEAP32[$1 + 12 >> 2]) & 1) {
   break label$1;
  }
  $0 = (jsvGetFirstChild(HEAP32[$1 + 12 >> 2]) & 65535) != 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jspeiAddScope($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 if (!HEAP32[46749]) {
  HEAP32[46749] = jsvNewEmptyArray();
 }
 label$2: {
  if (!HEAP32[46749]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$2;
  }
  jsvArrayPush(HEAP32[46749], HEAP32[$1 + 8 >> 2]);
  HEAP8[$1 + 15 | 0] = 1;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP8[$1 + 15 | 0] & 1;
}

function jsiGetDeviceFromClass($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!(!HEAP32[$1 + 8 >> 2] | HEAP8[HEAP32[$1 + 8 >> 2]] != 68 | (HEAP8[HEAP32[$1 + 8 >> 2] + 1 | 0] != 69 | HEAP8[HEAP32[$1 + 8 >> 2] + 2 | 0] != 86))) {
   HEAP8[$1 + 15 | 0] = HEAPU8[HEAP32[$1 + 8 >> 2] + 3 | 0];
   break label$1;
  }
  HEAP8[$1 + 15 | 0] = 0;
 }
 return HEAPU8[$1 + 15 | 0];
}

function gemmlowp__FixedPoint_int_2c_2012___FromScalarRaw_28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 4 >> 2] = $0;
 $0 = int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(HEAP32[$1 + 4 >> 2]);
 HEAP32[gemmlowp__FixedPoint_int_2c_2012___raw_28_29($1 + 8 | 0) >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jsvGetPathTo($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = 0;
 $0 = jsvGetPathTo_int(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2], $4 + 12 | 0);
 __stack_pointer = $4 + 32 | 0;
 return $0;
}

function gemmlowp__FixedPoint_int_2c_205___FromScalarRaw_28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 4 >> 2] = $0;
 $0 = int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(HEAP32[$1 + 4 >> 2]);
 HEAP32[gemmlowp__FixedPoint_int_2c_205___raw_28_29($1 + 8 | 0) >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function gemmlowp__FixedPoint_int_2c_202___FromScalarRaw_28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 4 >> 2] = $0;
 $0 = int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(HEAP32[$1 + 4 >> 2]);
 HEAP32[gemmlowp__FixedPoint_int_2c_202___raw_28_29($1 + 8 | 0) >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function gemmlowp__FixedPoint_int_2c_200___FromScalarRaw_28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 4 >> 2] = $0;
 $0 = int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(HEAP32[$1 + 4 >> 2]);
 HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($1 + 8 | 0) >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20const__20flatbuffers__Table__GetPointer_void_20const___28unsigned_20short_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = void_20const__20flatbuffers__Table__GetPointer_void_20const___28unsigned_20short_29(HEAP32[$2 + 12 >> 2], HEAPU16[$2 + 10 >> 1]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function jswrap_banglejs_setLCDPowerController($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 label$1: {
  if (HEAP8[$1 + 15 | 0] & 1) {
   lcdST7789_cmd(17, 0, 0);
   jshDelayMicroseconds(20);
   lcdST7789_cmd(41, 0, 0);
   break label$1;
  }
  lcdST7789_cmd(40, 0, 0);
  jshDelayMicroseconds(20);
  lcdST7789_cmd(16, 0, 0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function jsvRemoveAllChildren($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 while (1) {
  if (jsvGetFirstChild(HEAP32[$1 + 12 >> 2]) & 65535) {
   HEAP32[$1 + 8 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$1 + 12 >> 2]) & 65535);
   jsvRemoveChildAndUnLock(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 8 >> 2]);
   continue;
  }
  break;
 }
 __stack_pointer = $1 + 16 | 0;
}

function gen_jswrap_Uint8ClampedArray_Uint8ClampedArray($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jswrap_typedarray_constructor(65, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function std____2____compressed_pair_TfLitePoolParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_TfLitePoolParams__2c_200_2c_20false_____get_28_29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____compressed_pair_TfLiteConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_TfLiteConvParams__2c_200_2c_20false_____get_28_29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jshSetFlowControlAllReady() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 if (HEAP8[188992] & 1) {
  HEAP32[$0 + 12 >> 2] = 0;
  while (1) {
   if (HEAP32[$0 + 12 >> 2] < 2) {
    jshSetFlowControlXON(HEAP32[$0 + 12 >> 2] + 21 & 255, 1);
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP8[188992] = 0;
 }
 __stack_pointer = $0 + 16 | 0;
}

function jswrap_serial_inject($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP8[$2 + 7 | 0] = jsiGetDeviceFromClass(HEAP32[$2 + 12 >> 2]);
 if (!(HEAPU8[$2 + 7 | 0] < 17 | HEAPU8[$2 + 7 | 0] > 22)) {
  jsvIterateCallback(HEAP32[$2 + 8 >> 2], 625, $2 + 7 | 0);
 }
 __stack_pointer = $2 + 16 | 0;
}

function jsvStringIteratorCatchUp($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 while (1) {
  $0 = 0;
  $0 = HEAP32[HEAP32[$1 + 12 >> 2] >> 2] ? HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] >= HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2] : $0;
  if ($0) {
   jsvStringIteratorLoadInline(HEAP32[$1 + 12 >> 2]);
   continue;
  }
  break;
 }
 __stack_pointer = $1 + 16 | 0;
}

function jsvNewWritableStringFromStringVar($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[$3 >> 2] = jsvNewFromEmptyString_1();
 jsvAppendStringVar(HEAP32[$3 >> 2], HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return HEAP32[$3 >> 2];
}

function jslCharPosNew($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 jsvStringIteratorNew(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 $0 = jsvStringIteratorGetCharAndNext(HEAP32[$3 + 12 >> 2]);
 HEAP8[HEAP32[$3 + 12 >> 2] + 36 | 0] = $0;
 __stack_pointer = $3 + 16 | 0;
}

function jswrap_espruino_toArrayBuffer($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!(jsvIsString(HEAP32[$1 + 8 >> 2]) & 1)) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvNewArrayBufferFromString(HEAP32[$1 + 8 >> 2], 0);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jswrap_interface_setInterval($0, $1, $2) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAPF64[$3 + 16 >> 3] = $1;
 HEAP32[$3 + 12 >> 2] = $2;
 $0 = _jswrap_interface_setTimeoutOrInterval(HEAP32[$3 + 28 >> 2], HEAPF64[$3 + 16 >> 3], HEAP32[$3 + 12 >> 2], 0);
 __stack_pointer = $3 + 32 | 0;
 return $0 | 0;
}

function jswrap_espruino_getConsole() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP8[$0 + 11 | 0] = jsiGetConsoleDevice();
 label$1: {
  if (!HEAPU8[$0 + 11 | 0]) {
   HEAP32[$0 + 12 >> 2] = jsvNewNull_1();
   break label$1;
  }
  HEAP32[$0 + 12 >> 2] = jsvNewFromString(jshGetDeviceString(HEAPU8[$0 + 11 | 0]));
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function jsvTraceLockInfo($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jsvGetRef(HEAP32[$1 + 12 >> 2]);
 $2 = jsvGetRefs(HEAP32[$1 + 12 >> 2]);
 HEAP32[$1 + 8 >> 2] = jsvGetLocks(HEAP32[$1 + 12 >> 2]) & 255;
 HEAP32[$1 + 4 >> 2] = $2 & 65535;
 HEAP32[$1 >> 2] = $0 & 65535;
 jsiConsolePrintf(127607, $1);
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_interface_setTimeout($0, $1, $2) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAPF64[$3 + 16 >> 3] = $1;
 HEAP32[$3 + 12 >> 2] = $2;
 $0 = _jswrap_interface_setTimeoutOrInterval(HEAP32[$3 + 28 >> 2], HEAPF64[$3 + 16 >> 3], HEAP32[$3 + 12 >> 2], 1);
 __stack_pointer = $3 + 32 | 0;
 return $0 | 0;
}

function jsvFreePtrInternal($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP8[$0 + 11 | 0] = 0;
 HEAP8[$0 + 12 | 0] = 0;
 jshInterruptOff();
 jsvSetNextSibling(HEAP32[$1 + 12 >> 2], HEAPU16[77234]);
 HEAP16[77234] = jsvGetRef(HEAP32[$1 + 12 >> 2]);
 HEAP8[154465] = 1;
 jshInterruptOn();
 __stack_pointer = $1 + 16 | 0;
}

function heatshrink_decode($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[$3 >> 2] = HEAP32[$3 + 4 >> 2];
 $0 = heatshrink_decode_cb(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2] ? 557 : 0, HEAP32[$3 + 4 >> 2] ? $3 : 0);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function jsvUnLockMany($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 while (1) {
  if (HEAP32[$2 + 12 >> 2]) {
   $1 = HEAP32[$2 + 8 >> 2];
   $0 = HEAP32[$2 + 12 >> 2] - 1 | 0;
   HEAP32[$2 + 12 >> 2] = $0;
   jsvUnLockInline(HEAP32[($0 << 2) + $1 >> 2]);
   continue;
  }
  break;
 }
 __stack_pointer = $2 + 16 | 0;
}

function jshSetPinShouldStayWatched($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 $1 = (HEAPU8[$2 + 15 | 0] >>> 5 << 2) + 187036 | 0;
 if (HEAP8[$2 + 14 | 0] & 1) {
  $0 = 1 << HEAPU8[$2 + 15 | 0];
 } else {
  $0 = 0;
 }
 HEAP32[$1 >> 2] = $0 | HEAP32[(HEAPU8[$2 + 15 | 0] >>> 5 << 2) + 187036 >> 2] & __wasm_rotl_i32(-2, HEAPU8[$2 + 15 | 0]);
}

function gen_jswrap_Float64Array_Float64Array($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jswrap_typedarray_constructor(40, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function gen_jswrap_Float32Array_Float32Array($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jswrap_typedarray_constructor(36, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function graphicsGetPixel($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 graphicsToDeviceCoordinates(HEAP32[$3 + 12 >> 2], $3 + 8 | 0, $3 + 4 | 0);
 $0 = graphicsGetPixelDevice(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function jsvLock($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP16[$1 + 14 >> 1] = $0;
 HEAP32[$1 + 8 >> 2] = jsvGetAddressOf(HEAPU16[$1 + 14 >> 1]);
 $0 = HEAP32[$1 + 8 >> 2];
 $2 = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) + 1024 | 0;
 HEAP8[$0 + 11 | 0] = $2;
 HEAP8[$0 + 12 | 0] = $2 >>> 8;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jshSetPinStateIsManual($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 $1 = (HEAPU8[$2 + 15 | 0] >>> 5 << 2) + 187032 | 0;
 if (HEAP8[$2 + 14 | 0] & 1) {
  $0 = 1 << HEAPU8[$2 + 15 | 0];
 } else {
  $0 = 0;
 }
 HEAP32[$1 >> 2] = $0 | HEAP32[(HEAPU8[$2 + 15 | 0] >>> 5 << 2) + 187032 >> 2] & __wasm_rotl_i32(-2, HEAPU8[$2 + 15 | 0]);
}

function gen_jswrap_Uint32Array_Uint32Array($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jswrap_typedarray_constructor(4, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function gen_jswrap_Uint24Array_Uint24Array($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jswrap_typedarray_constructor(3, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function gen_jswrap_Uint16Array_Uint16Array($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jswrap_typedarray_constructor(2, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function gen_jswrap_Int32Array_Int32Array($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jswrap_typedarray_constructor(20, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function gen_jswrap_Int16Array_Int16Array($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jswrap_typedarray_constructor(18, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__operator_28_29_28void__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[HEAP32[$2 + 12 >> 2] >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function jspEvaluateExpressionVar($0) {
 var $1 = 0;
 $1 = __stack_pointer - 144 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 140 >> 2] = $0;
 HEAP32[$1 + 12 >> 2] = jslSetLex($1 + 16 | 0);
 jslInit(HEAP32[$1 + 140 >> 2]);
 HEAP32[$1 + 8 >> 2] = jspeExpression();
 jslKill();
 jslSetLex(HEAP32[$1 + 12 >> 2]);
 $0 = jsvSkipNameAndUnLock(HEAP32[$1 + 8 >> 2]);
 __stack_pointer = $1 + 144 | 0;
 return $0;
}

function jsiClearInputLine($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 if (!(jsvIsEmptyString(HEAP32[46763]) & 1)) {
  if (HEAP8[$1 + 15 | 0] & 1) {
   jsiConsoleRemoveInputLine();
  }
  jsiInputLineCursorMoved();
  jsvUnLock(HEAP32[46763]);
  HEAP32[46763] = jsvNewFromEmptyString_5();
  HEAP32[46765] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
}

function gen_jswrap_Uint8Array_Uint8Array($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jswrap_typedarray_constructor(1, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function jswrap_flash_erasePage($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1: {
  if (!(jsvIsInt(HEAP32[$1 + 12 >> 2]) & 1)) {
   HEAP32[$1 >> 2] = HEAP32[$1 + 12 >> 2];
   jsExceptionHere(1, 98771, $1);
   break label$1;
  }
  jshFlashErasePage(jsvGetInteger(HEAP32[$1 + 12 >> 2]));
 }
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_array_filter($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = _jswrap_array_iterate_with_callback(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 1, 1, 1);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function jspNewBuiltin($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = jswFindBuiltInFunction(0, HEAP32[$1 + 8 >> 2]);
 label$1: {
  if (!HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsonNeedsNewLine($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = 1;
 label$1: {
  if (jsvIsUndefined(HEAP32[$1 + 12 >> 2]) & 1) {
   break label$1;
  }
  $0 = 1;
  if (jsvIsNull(HEAP32[$1 + 12 >> 2]) & 1) {
   break label$1;
  }
  $0 = jsvIsNumeric(HEAP32[$1 + 12 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return ($0 ^ -1) & 1;
}

function jshI2CInitInfo($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 4 | 0] = 255;
 HEAP8[HEAP32[$1 + 12 >> 2] + 5 | 0] = 255;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP8[$0 | 0] = 160;
 HEAP8[$0 + 1 | 0] = 134;
 HEAP8[$0 + 2 | 0] = 1;
 HEAP8[$0 + 3 | 0] = 0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 6 | 0] = 0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 7 | 0] = 1;
}

function gen_jswrap_Int8Array_Int8Array($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jswrap_typedarray_constructor(17, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function jswrap_array_every($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = _jswrap_array_iterate_with_callback(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 0, 1, 1);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function strcmp($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = HEAPU8[$0 | 0];
 $3 = HEAPU8[$1 | 0];
 label$1: {
  if (!$2 | ($3 | 0) != ($2 | 0)) {
   break label$1;
  }
  while (1) {
   $3 = HEAPU8[$1 + 1 | 0];
   $2 = HEAPU8[$0 + 1 | 0];
   if (!$2) {
    break label$1;
   }
   $1 = $1 + 1 | 0;
   $0 = $0 + 1 | 0;
   if (($2 | 0) == ($3 | 0)) {
    continue;
   }
   break;
  }
 }
 return $2 - $3 | 0;
}

function jswrap_array_some($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = _jswrap_array_iterate_with_callback(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 0, 1, 0);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function gen_jswrap_String_includes($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jswrap_string_indexOf(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 0);
 __stack_pointer = $3 + 16 | 0;
 return ($0 | 0) >= 0 | 0;
}

function tflite__MicroMutableOpResolver_9u____MicroMutableOpResolver_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 tflite__MicroMutableOpResolver_9u____MicroMutableOpResolver_28_29($0);
 tflite__MicroMutableOpResolver_9u___operator_20delete_28void__29($0);
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_array_map($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = _jswrap_array_iterate_with_callback(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 1, 0, 0);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function jsvUnLock4($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 jsvUnLockInline(HEAP32[$4 + 12 >> 2]);
 jsvUnLockInline(HEAP32[$4 + 8 >> 2]);
 jsvUnLockInline(HEAP32[$4 + 4 >> 2]);
 jsvUnLockInline(HEAP32[$4 >> 2]);
 __stack_pointer = $4 + 16 | 0;
}

function jsvIsInternalFunctionKey($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1: {
  if (jsvIsString(HEAP32[$1 + 12 >> 2]) & 1) {
   $0 = 1;
   if (HEAP8[HEAP32[$1 + 12 >> 2]] == -1) {
    break label$1;
   }
  }
  $0 = jsvIsFunctionParameter(HEAP32[$1 + 12 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return $0 & 1;
}

function jslMatch($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (HEAP16[HEAP32[38615] + 2 >> 1] != HEAP32[$1 + 8 >> 2]) {
   jslMatchError(HEAP32[$1 + 8 >> 2]);
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  jslGetNextToken();
  HEAP8[$1 + 15 | 0] = 1;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP8[$1 + 15 | 0] & 1;
}

function jshGetEventDataPin($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 14 | 0] = $0;
 HEAP32[$1 + 8 >> 2] = HEAPU8[$1 + 14 | 0] - 1;
 label$1: {
  if ((HEAP32[(HEAP32[$1 + 8 >> 2] << 2) + 187136 >> 2] & -256) == -256) {
   HEAP8[$1 + 15 | 0] = HEAP32[(HEAP32[$1 + 8 >> 2] << 2) + 187136 >> 2];
   break label$1;
  }
  HEAP8[$1 + 15 | 0] = 255;
 }
 return HEAPU8[$1 + 15 | 0];
}

function tflite__FullyConnectedOptions__asymmetric_quantize_inputs_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20char_20flatbuffers__Table__GetField_unsigned_20char__28unsigned_20short_2c_20unsigned_20char_29_20const(HEAP32[$1 + 12 >> 2], 10, 0) & 255;
 __stack_pointer = $1 + 16 | 0;
 return ($0 | 0) != 0;
}

function jswrap_espruino_toJS($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = 8896;
 HEAP32[$1 + 4 >> 2] = jsvNewFromEmptyString_9();
 if (HEAP32[$1 + 4 >> 2]) {
  jsfGetJSON(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 4 >> 2], HEAP32[$1 + 8 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 4 >> 2];
}

function jswOnCharEvent($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP8[$2 + 14 | 0] = $0;
 HEAP8[$2 + 13 | 0] = $1;
 label$1: {
  if (HEAPU8[$2 + 14 | 0] == 22) {
   HEAP8[$2 + 15 | 0] = jswrap_banglejs_gps_character(HEAP8[$2 + 13 | 0]) & 1;
   break label$1;
  }
  HEAP8[$2 + 15 | 0] = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP8[$2 + 15 | 0] & 1;
}

function gen_jswrap_Graphics_drawPolyAA($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = jswrap_graphics_drawPoly_X(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1, 1);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function tflite__AlignPointerUp_28unsigned_20char__2c_20unsigned_20long_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 >> 2] = Math_imul(HEAP32[$2 + 8 >> 2], (HEAP32[$2 + 4 >> 2] + (HEAP32[$2 + 8 >> 2] - 1 | 0) >>> 0) / HEAPU32[$2 + 8 >> 2] | 0);
 return HEAP32[$2 >> 2];
}

function jsvArrayPush2Int($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 jsvArrayPushAndUnLock(HEAP32[$3 + 12 >> 2], jsvNewFromInteger(HEAP32[$3 + 8 >> 2]));
 jsvArrayPushAndUnLock(HEAP32[$3 + 12 >> 2], jsvNewFromInteger(HEAP32[$3 + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function tflite__QuantizationParameters__zero_point_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_long_20long__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_long_20long__20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 10);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_spi_write_cb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 FUNCTION_TABLE[HEAP32[HEAP32[$3 + 4 >> 2] >> 2]](HEAP32[$3 + 12 >> 2], 0, HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2] + 4 | 0);
 __stack_pointer = $3 + 16 | 0;
}

function jspeCheckBreakContinue() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 label$1: {
  label$2: {
   if (HEAP32[46755] & 4) {
    HEAP32[46755] = HEAP32[46755] & -64 | 1;
    break label$2;
   }
   if (HEAP32[46755] & 2) {
    HEAP32[46755] = HEAP32[46755] & -64 | 1;
    HEAP8[$0 + 15 | 0] = 1;
    break label$1;
   }
  }
  HEAP8[$0 + 15 | 0] = 0;
 }
 return HEAP8[$0 + 15 | 0] & 1;
}

function gen_jswrap_Graphics_drawPoly($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = jswrap_graphics_drawPoly_X(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1, 0);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function flatbuffers__IndirectHelper_int___Read_28unsigned_20char_20const__2c_20unsigned_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = int_20flatbuffers__EndianScalar_int__28int_29(HEAP32[HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 8 >> 2] << 2) >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function tflite__Operator__custom_options_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_unsigned_20char__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_unsigned_20char__20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 14);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__MicroAllocator__AllocatePersistentBuffer_28unsigned_20long_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, HEAP32[$2 + 8 >> 2], 16) | 0;
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function tflite__RuntimeShape__Resize_28int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if (HEAP32[$0 >> 2] > 5) {
  abort();
  abort();
 }
 HEAP32[$0 >> 2] = HEAP32[$2 + 8 >> 2];
 if (HEAP32[$2 + 8 >> 2] > 5) {
  abort();
  abort();
 }
 __stack_pointer = $2 + 16 | 0;
}

function std____2____compressed_pair_elem_TfLiteFullyConnectedParams__2c_200_2c_20false_____compressed_pair_elem_TfLiteFullyConnectedParams___2c_20void__28TfLiteFullyConnectedParams___29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
 return $0;
}

function gen_jswrap_String_lastIndexOf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jswrap_string_indexOf(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 1);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function gen_jswrap_DataView_getFloat64($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = jswrap_dataview_get(HEAP32[$3 + 12 >> 2], 40, HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function gen_jswrap_DataView_getFloat32($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = jswrap_dataview_get(HEAP32[$3 + 12 >> 2], 36, HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function std____2____compressed_pair_elem_TfLiteDepthwiseConvParams__2c_200_2c_20false_____compressed_pair_elem_TfLiteDepthwiseConvParams___2c_20void__28TfLiteDepthwiseConvParams___29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
 return $0;
}

function jswrap_storagefile_read($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 if (HEAP32[$2 + 8 >> 2] < 0) {
  HEAP32[$2 + 8 >> 2] = 0;
 }
 $0 = jswrap_storagefile_read_internal(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function jsvTrace($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP8[$2 + 7 | 0] = HEAPU8[154466];
 HEAP8[154466] = 0;
 _jsvTrace(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2], 0);
 HEAP8[154466] = HEAPU8[$2 + 7 | 0];
 jsiConsolePrintf(129587, 0);
 __stack_pointer = $2 + 16 | 0;
}

function gen_jswrap_DataView_getUint32($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = jswrap_dataview_get(HEAP32[$3 + 12 >> 2], 4, HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function gen_jswrap_DataView_getUint16($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = jswrap_dataview_get(HEAP32[$3 + 12 >> 2], 2, HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function gen_jswrap_DataView_getInt32($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = jswrap_dataview_get(HEAP32[$3 + 12 >> 2], 20, HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function gen_jswrap_DataView_getInt16($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = jswrap_dataview_get(HEAP32[$3 + 12 >> 2], 18, HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function __sin($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $3 = $0 * $0;
 $5 = $3 * ($3 * $3) * ($3 * 1.58969099521155e-10 + -2.5050760253406863e-8) + ($3 * ($3 * 27557313707070068e-22 + -.0001984126982985795) + .00833333333332249);
 $4 = $3 * $0;
 if (!$2) {
  return $4 * ($3 * $5 + -.16666666666666632) + $0;
 }
 return $0 - ($3 * ($1 * .5 - $5 * $4) - $1 + $4 * .16666666666666632);
}

function jsvObjectRemoveChild($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = jsvFindChildFromString(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 if (HEAP32[$2 + 4 >> 2]) {
  jsvRemoveChildAndUnLock(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 4 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
}

function gen_jswrap_DataView_getUint8($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = jswrap_dataview_get(HEAP32[$3 + 12 >> 2], 1, HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function gen_jswrap_DataView_getInt8($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = jswrap_dataview_get(HEAP32[$3 + 12 >> 2], 17, HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function TfLiteFullyConnectedParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLiteFullyConnectedParams__28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, 12, 4);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jswrap_string_replaceAll($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = _jswrap_string_replace(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 1);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function jsvIsGetterOrSetter($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63;
  HEAP8[$1 + 15 | 0] = HEAP8[$1 + 7 | 0] == 6;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function gen_jswrap_String_indexOf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jswrap_string_indexOf(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 0);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function tflite__DepthwiseConv2DOptions__fused_activation_function_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = signed_20char_20flatbuffers__Table__GetField_signed_20char__28unsigned_20short_2c_20signed_20char_29_20const(HEAP32[$1 + 12 >> 2], 12, 0) << 24;
 __stack_pointer = $1 + 16 | 0;
 return $0 >> 24;
}

function std____2____compressed_pair_elem_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29___2c_200_2c_20false_____compressed_pair_elem_std__nullptr_t_2c_20void__28std__nullptr_t___29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = 0;
 return $0;
}

function jsvIsNativeString($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63;
  HEAP8[$1 + 15 | 0] = HEAP8[$1 + 7 | 0] == 38;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function TfLiteDepthwiseConvParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLiteDepthwiseConvParams__28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, 28, 4);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jswrap_graphics_getBPP($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 80 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 72 >> 2] = $0;
 label$1: {
  if (!(graphicsGetFromVar($1, HEAP32[$1 + 72 >> 2]) & 1)) {
   HEAP32[$1 + 76 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 76 >> 2] = HEAPU8[$1 + 16 | 0];
 }
 __stack_pointer = $1 + 80 | 0;
 return HEAP32[$1 + 76 >> 2];
}

function jsvNegateAndUnLock($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvNewFromInteger(0);
 HEAP32[$1 + 4 >> 2] = jsvMathsOpSkipNames(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2], 45);
 jsvUnLock2(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 4 >> 2];
}

function jsvIsFlashString($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63;
  HEAP8[$1 + 15 | 0] = HEAP8[$1 + 7 | 0] == 39;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function jsvGetLongIntegerAndUnLock($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 >> 2] = jsvGetLongInteger(HEAP32[$1 + 12 >> 2]);
 HEAP32[$1 + 4 >> 2] = i64toi32_i32$HIGH_BITS;
 jsvUnLock(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
 return HEAP32[$1 >> 2];
}

function gen_jswrap_String_padStart($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jswrap_string_padX(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 1);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function _jswrap_promise_native_with_prombox($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = jsvNewNativeFunction(HEAP32[$2 + 12 >> 2], 32776);
 jsvObjectSetChild(HEAP32[$2 + 4 >> 2], 100302, HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 4 >> 2];
}

function tflite__internal__ContextHelper__GetEvalTensor_28TfLiteContext_20const__2c_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2];
 return HEAP32[HEAP32[$2 + 4 >> 2] + 12 >> 2] + Math_imul(HEAP32[$2 + 8 >> 2], 12) | 0;
}

function tflite__FullyConnectedOptions__fused_activation_function_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = signed_20char_20flatbuffers__Table__GetField_signed_20char__28unsigned_20short_2c_20signed_20char_29_20const(HEAP32[$1 + 12 >> 2], 4, 0) << 24;
 __stack_pointer = $1 + 16 | 0;
 return $0 >> 24;
}

function jswrap_string_replace($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = _jswrap_string_replace(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 0);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function jsvObjectIteratorGetValue_17($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetValue_16($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetValue_15($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetValue_14($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetValue_13($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetValue_12($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetValue_11($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetValue_10($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvIsFlatString($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63;
  HEAP8[$1 + 15 | 0] = HEAP8[$1 + 7 | 0] == 37;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function jsvGetArrayLength($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP32[$1 + 12 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
 }
 return HEAP32[$1 + 12 >> 2];
}

function tflite__FullyConnectedOptions__keep_num_dims_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20char_20flatbuffers__Table__GetField_unsigned_20char__28unsigned_20short_2c_20unsigned_20char_29_20const(HEAP32[$1 + 12 >> 2], 8, 0) & 255;
 __stack_pointer = $1 + 16 | 0;
 return ($0 | 0) != 0;
}

function jsvObjectIteratorGetValue_9($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetValue_8($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetValue_7($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetValue_6($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetValue_5($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetValue_4($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetValue_3($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetValue_2($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetValue_1($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function gen_jswrap_String_padEnd($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jswrap_string_padX(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 0);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function jsvStringIteratorNextInline($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
 if (HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] >= HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2]) {
  jsvStringIteratorLoadInline(HEAP32[$1 + 12 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
}

function jsvObjectIteratorGetKey_9($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetKey_8($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetKey_7($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetKey_6($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetKey_5($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetKey_4($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetKey_3($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetKey_2($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetKey_1($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvIsEmptyString($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!(jsvHasCharacterData(HEAP32[$1 + 8 >> 2]) & 1)) {
   HEAP8[$1 + 15 | 0] = 1;
   break label$1;
  }
  HEAP8[$1 + 15 | 0] = !jsvGetCharactersInVar(HEAP32[$1 + 8 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP8[$1 + 15 | 0] & 1;
}

function jspeBlockOrStatement() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 label$1: {
  if (HEAP16[HEAP32[38615] + 2 >> 1] == 123) {
   jspeBlock();
   HEAP32[$0 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$0 + 8 >> 2] = jspeStatement();
  HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2];
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function jshPushIOCharEventFlowControl($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 label$1: {
  if (HEAPU8[$1 + 15 | 0] < 21 | HEAPU8[$1 + 15 | 0] > 22) {
   break label$1;
  }
  if ((jshGetEventsUsed() | 0) <= 191) {
   break label$1;
  }
  jshSetFlowControlXON(HEAPU8[$1 + 15 | 0], 0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function tflite__EspruinoErrorReporter___EspruinoErrorReporter_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 tflite__EspruinoErrorReporter___EspruinoErrorReporter_28_29($0);
 tflite__EspruinoErrorReporter__operator_20delete_28void__29($0);
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_pin_pulse($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP8[$3 + 11 | 0] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 jswrap_io_digitalPulse(jshGetPinFromVar(HEAP32[$3 + 12 >> 2]) & 255, HEAP8[$3 + 11 | 0] & 1, HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function jswrap_array_forEach($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 _jswrap_array_iterate_with_callback(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 0, 0, 0);
 __stack_pointer = $3 + 16 | 0;
}

function jsvObjectIteratorGetValue($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function isAlphaInline_1($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 label$1: {
  if (HEAP8[$1 + 15 | 0] >= 97) {
   $0 = 1;
   if (HEAP8[$1 + 15 | 0] <= 122) {
    break label$1;
   }
  }
  if (HEAP8[$1 + 15 | 0] >= 65) {
   $0 = 1;
   if (HEAP8[$1 + 15 | 0] <= 90) {
    break label$1;
   }
  }
  $0 = HEAP8[$1 + 15 | 0] == 95;
 }
 return $0;
}

function _jswrap_espruino_toUint8Array_char($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 jsvArrayBufferIteratorSetByteValue(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2] << 24 >> 24);
 jsvArrayBufferIteratorNext(HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function tflite__Buffer__data_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_unsigned_20char__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_unsigned_20char__20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 4);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jsvObjectIteratorGetKey($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jswrap_pin_pwm($0, $1, $2) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAPF64[$3 + 16 >> 3] = $1;
 HEAP32[$3 + 12 >> 2] = $2;
 jswrap_io_analogWrite(jshGetPinFromVar(HEAP32[$3 + 28 >> 2]) & 255, HEAPF64[$3 + 16 >> 3], HEAP32[$3 + 12 >> 2]);
 __stack_pointer = $3 + 32 | 0;
}

function isAlphaInline($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 label$1: {
  if (HEAP8[$1 + 15 | 0] >= 97) {
   $0 = 1;
   if (HEAP8[$1 + 15 | 0] <= 122) {
    break label$1;
   }
  }
  if (HEAP8[$1 + 15 | 0] >= 65) {
   $0 = 1;
   if (HEAP8[$1 + 15 | 0] <= 90) {
    break label$1;
   }
  }
  $0 = HEAP8[$1 + 15 | 0] == 95;
 }
 return $0;
}

function jsfHashFiles($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[$3 >> 2] = -1412571974;
 jsfBankListFiles(0, 134217728, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], $3);
 __stack_pointer = $3 + 16 | 0;
 return HEAP32[$3 >> 2];
}

function gemmlowp__FixedPoint_int_2c_202___ScalarRawType_20gemmlowp__RescaleConstantInitializer_gemmlowp__FixedPoint_int_2c_202___28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20gemmlowp__RoundingDivideByPOT_int__28int_2c_20int_29(HEAP32[$1 + 12 >> 2], 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function gemmlowp__FixedPoint_int_2c_200___ScalarRawType_20gemmlowp__RescaleConstantInitializer_gemmlowp__FixedPoint_int_2c_200___28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20gemmlowp__RoundingDivideByPOT_int__28int_2c_20int_29(HEAP32[$1 + 12 >> 2], 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__Tensor__quantization_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = tflite__QuantizationParameters_20const__20flatbuffers__Table__GetPointer_tflite__QuantizationParameters_20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 12);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__QuantizationParameters__scale_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_float__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_float__20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 8);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__Pool2DOptions__fused_activation_function_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = signed_20char_20flatbuffers__Table__GetField_signed_20char__28unsigned_20short_2c_20signed_20char_29_20const(HEAP32[$1 + 12 >> 2], 14, 0) << 24;
 __stack_pointer = $1 + 16 | 0;
 return $0 >> 24;
}

function tflite__Conv2DOptions__fused_activation_function_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = signed_20char_20flatbuffers__Table__GetField_signed_20char__28unsigned_20short_2c_20signed_20char_29_20const(HEAP32[$1 + 12 >> 2], 10, 0) << 24;
 __stack_pointer = $1 + 16 | 0;
 return $0 >> 24;
}

function jswrap_espruino_memoryMap($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 >> 2] = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
 $0 = jspExecuteJSFunction(118445, 0, 2, $2);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function jsvIsRoot($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63;
  HEAP8[$1 + 15 | 0] = HEAP8[$1 + 7 | 0] == 1;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function jsvIsPin($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63;
  HEAP8[$1 + 15 | 0] = HEAP8[$1 + 7 | 0] == 13;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function jslGetTokenLength() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 label$1: {
  if (HEAP32[HEAP32[38615] + 76 >> 2]) {
   HEAP32[$0 + 12 >> 2] = jsvGetStringLength(HEAP32[HEAP32[38615] + 76 >> 2]);
   break label$1;
  }
  HEAP32[$0 + 12 >> 2] = HEAPU8[HEAP32[38615] + 80 | 0];
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function tflite__ParseDequantize_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 return 0;
}

function jsiConsoleReturnInputLine() {
 if (HEAP8[187056] & 1) {
  HEAP8[187056] = 0;
  if (jsiEcho() & 1) {
   if (jsiPasswordProtected() & 1) {
    jsiConsolePrintString(105516);
   }
   jsiConsolePrintChar(62);
   jsiConsolePrintStringVarWithNewLineChar(HEAP32[46763], 0, 58);
   jsiMoveCursorChar(HEAP32[46763], jsvGetStringLength(HEAP32[46763]), HEAP32[46765]);
  }
 }
}

function jsvStringIteratorSetChar($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 if (jsvStringIteratorHasChar_2(HEAP32[$2 + 12 >> 2]) & 1) {
  HEAP8[HEAP32[HEAP32[$2 + 12 >> 2] + 16 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0] = HEAPU8[$2 + 11 | 0];
 }
 __stack_pointer = $2 + 16 | 0;
}

function jslKill() {
 HEAP16[HEAP32[38615] + 2 >> 1] = 0;
 if (HEAP32[HEAP32[38615] + 100 >> 2]) {
  jsvLockAgain(HEAP32[HEAP32[38615] + 100 >> 2]);
 }
 jsvStringIteratorFree(HEAP32[38615] + 88 | 0);
 if (HEAP32[HEAP32[38615] + 76 >> 2]) {
  jsvUnLock(HEAP32[HEAP32[38615] + 76 >> 2]);
  HEAP32[HEAP32[38615] + 76 >> 2] = 0;
 }
 jsvUnLock(HEAP32[HEAP32[38615] + 84 >> 2]);
}

function gen_jswrap_E_showPrompt($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 >> 2] = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
 $0 = jspExecuteJSFunction(119785, 0, 2, $2);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function tflite__ParseQuantize_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 return 0;
}

function gen_jswrap_E_showAlert($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 >> 2] = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
 $0 = jspExecuteJSFunction(121227, 0, 2, $2);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function TfLiteReshapeParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLiteReshapeParams__28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, 36, 4);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function unsigned_20short_20flatbuffers__ReadScalar_unsigned_20short__28void_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20short_20flatbuffers__EndianScalar_unsigned_20short__28unsigned_20short_29(HEAPU16[HEAP32[$1 + 12 >> 2] >> 1]);
 __stack_pointer = $1 + 16 | 0;
 return $0 & 65535;
}

function tflite__FullyConnectedOptions__weights_format_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = signed_20char_20flatbuffers__Table__GetField_signed_20char__28unsigned_20short_2c_20signed_20char_29_20const(HEAP32[$1 + 12 >> 2], 6, 0) << 24;
 __stack_pointer = $1 + 16 | 0;
 return $0 >> 24;
}

function TfLiteSoftmaxParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLiteSoftmaxParams__28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, 4, 4);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function memcmp($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 label$1: {
  if (!$2) {
   break label$1;
  }
  while (1) {
   $3 = HEAPU8[$0 | 0];
   $4 = HEAPU8[$1 | 0];
   if (($3 | 0) == ($4 | 0)) {
    $1 = $1 + 1 | 0;
    $0 = $0 + 1 | 0;
    $2 = $2 - 1 | 0;
    if ($2) {
     continue;
    }
    break label$1;
   }
   break;
  }
  $5 = $3 - $4 | 0;
 }
 return $5;
}

function int_20gemmlowp__AddSaturatingIf16Bit_int__28int_2c_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = gemmlowp__AddSaturatingIf16BitImpl_int_2c_20false___Run_28int_2c_20int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function std____2____compressed_pair_elem_TfLiteSoftmaxParams__2c_200_2c_20false_____compressed_pair_elem_TfLiteSoftmaxParams___2c_20void__28TfLiteSoftmaxParams___29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
 return $0;
}

function std____2____compressed_pair_elem_TfLiteReshapeParams__2c_200_2c_20false_____compressed_pair_elem_TfLiteReshapeParams___2c_20void__28TfLiteReshapeParams___29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
 return $0;
}

function tflite__ReshapeOptions__new_shape_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_int__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_int__20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 4);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jshInit() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 12 >> 2] = 0;
 while (1) {
  if (HEAP32[$0 + 12 >> 2] < 16) {
   HEAP8[HEAP32[$0 + 12 >> 2] + 343168 | 0] = 255;
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 jshInitDevices();
 HEAP8[153836] = 1;
 __stack_pointer = $0 + 16 | 0;
}

function strncat($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = strlen($0) + $0 | 0;
 label$1: {
  if (!$2) {
   break label$1;
  }
  while (1) {
   $4 = HEAPU8[$1 | 0];
   if (!$4) {
    break label$1;
   }
   HEAP8[$3 | 0] = $4;
   $3 = $3 + 1 | 0;
   $1 = $1 + 1 | 0;
   $2 = $2 - 1 | 0;
   if ($2) {
    continue;
   }
   break;
  }
 }
 HEAP8[$3 | 0] = 0;
 return $0;
}

function jsvGetFlatStringPointer($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!(jsvIsFlatString(HEAP32[$1 + 8 >> 2]) & 1)) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2] + 13;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jspeStatementThrow() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 12 >> 2] = 0;
 jslGetNextToken();
 HEAP32[$0 + 12 >> 2] = jsvSkipNameAndUnLock(jspeExpression());
 if ((HEAP32[46755] & 63) == 1) {
  jspSetException(HEAP32[$0 + 12 >> 2]);
 }
 jsvUnLock(HEAP32[$0 + 12 >> 2]);
 __stack_pointer = $0 + 16 | 0;
 return 0;
}

function TfLitePoolParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLitePoolParams__28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, 40, 4);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function TfLiteConvParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLiteConvParams__28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, 24, 4);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function tflite__Tensor__is_variable_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20char_20flatbuffers__Table__GetField_unsigned_20char__28unsigned_20short_2c_20unsigned_20char_29_20const(HEAP32[$1 + 12 >> 2], 14, 0) & 255;
 __stack_pointer = $1 + 16 | 0;
 return ($0 | 0) != 0;
}

function tflite__Operator__builtin_options_type_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20char_20flatbuffers__Table__GetField_unsigned_20char__28unsigned_20short_2c_20unsigned_20char_29_20const(HEAP32[$1 + 12 >> 2], 10, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 & 255;
}

function tflite__DepthwiseConv2DOptions__padding_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = signed_20char_20flatbuffers__Table__GetField_signed_20char__28unsigned_20short_2c_20signed_20char_29_20const(HEAP32[$1 + 12 >> 2], 4, 0) << 24;
 __stack_pointer = $1 + 16 | 0;
 return $0 >> 24;
}

function lcdSetCallbacks_JS($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP8[$0 + 52 | 0] = 64;
 HEAP8[$0 + 53 | 0] = 2;
 HEAP8[$0 + 54 | 0] = 0;
 HEAP8[$0 + 55 | 0] = 0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP8[$0 + 56 | 0] = 65;
 HEAP8[$0 + 57 | 0] = 2;
 HEAP8[$0 + 58 | 0] = 0;
 HEAP8[$0 + 59 | 0] = 0;
}

function jswrap_object_prependListener($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 jswrap_object_on_X(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 1);
 __stack_pointer = $3 + 16 | 0;
}

function jsvObjectIteratorClone($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
 if (HEAP32[HEAP32[$2 + 12 >> 2] >> 2]) {
  jsvLockAgain(HEAP32[HEAP32[$2 + 12 >> 2] >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
}

function gen_jswrap_E_showMessage($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 >> 2] = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
 jsvUnLock(jspExecuteJSFunction(121549, 0, 2, $2));
 __stack_pointer = $2 + 16 | 0;
}

function _jswrap_graphics_stringWidth($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 _jswrap_graphics_stringMetrics(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], $3);
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 >> 2];
}

function jsvStringIteratorGetChar_6($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  HEAP8[$1 + 15 | 0] = HEAPU8[HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2] + HEAP32[HEAP32[$1 + 8 >> 2] >> 2] | 0];
 }
 return HEAP8[$1 + 15 | 0];
}

function jsvStringIteratorGetChar_5($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  HEAP8[$1 + 15 | 0] = HEAPU8[HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2] + HEAP32[HEAP32[$1 + 8 >> 2] >> 2] | 0];
 }
 return HEAP8[$1 + 15 | 0];
}

function jsvStringIteratorGetChar_4($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  HEAP8[$1 + 15 | 0] = HEAPU8[HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2] + HEAP32[HEAP32[$1 + 8 >> 2] >> 2] | 0];
 }
 return HEAP8[$1 + 15 | 0];
}

function jsvStringIteratorGetChar_3($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  HEAP8[$1 + 15 | 0] = HEAPU8[HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2] + HEAP32[HEAP32[$1 + 8 >> 2] >> 2] | 0];
 }
 return HEAP8[$1 + 15 | 0];
}

function jsvStringIteratorGetChar_2($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  HEAP8[$1 + 15 | 0] = HEAPU8[HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2] + HEAP32[HEAP32[$1 + 8 >> 2] >> 2] | 0];
 }
 return HEAP8[$1 + 15 | 0];
}

function jsvStringIteratorGetChar_1($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  HEAP8[$1 + 15 | 0] = HEAPU8[HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2] + HEAP32[HEAP32[$1 + 8 >> 2] >> 2] | 0];
 }
 return HEAP8[$1 + 15 | 0];
}

function gen_jswrap_Bangle_setUI($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 >> 2] = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
 jsvUnLock(jspExecuteJSFunction(113730, 0, 2, $2));
 __stack_pointer = $2 + 16 | 0;
}

function tflite___28anonymous_20namespace_29__MicroBuiltinDataAllocator___MicroBuiltinDataAllocator_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 tflite__BuiltinDataAllocator___BuiltinDataAllocator_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jsvIsStringEqualOrStartsWith($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = jsvIsStringEqualOrStartsWithOffset(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1, 0, 0);
 __stack_pointer = $3 + 16 | 0;
 return $0 & 1;
}

function AccelFilter_init($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = 0;
 while (1) {
  if (HEAP32[$1 + 8 >> 2] < 7) {
   HEAP8[HEAP32[$1 + 12 >> 2] + HEAP32[$1 + 8 >> 2] | 0] = 0;
   HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] = 0;
}

function lcdST7789_setYOffset($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$1 + 12 >> 2] < -80) {
  HEAP32[$1 + 12 >> 2] = -80;
 }
 if (HEAP32[$1 + 12 >> 2] > 80) {
  HEAP32[$1 + 12 >> 2] = 80;
 }
 HEAP32[85781] = HEAP32[$1 + 12 >> 2];
 lcdST7789_scrollCmd();
 __stack_pointer = $1 + 16 | 0;
}

function jsvStringIteratorGetChar($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  HEAP8[$1 + 15 | 0] = HEAPU8[HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2] + HEAP32[HEAP32[$1 + 8 >> 2] >> 2] | 0];
 }
 return HEAP8[$1 + 15 | 0];
}

function tflite__OperatorCode__builtin_code_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = signed_20char_20flatbuffers__Table__GetField_signed_20char__28unsigned_20short_2c_20signed_20char_29_20const(HEAP32[$1 + 12 >> 2], 4, 0) << 24;
 __stack_pointer = $1 + 16 | 0;
 return $0 >> 24;
}

function std____2____compressed_pair_elem_TfLitePoolParams__2c_200_2c_20false_____compressed_pair_elem_TfLitePoolParams___2c_20void__28TfLitePoolParams___29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
 return $0;
}

function std____2____compressed_pair_elem_TfLiteConvParams__2c_200_2c_20false_____compressed_pair_elem_TfLiteConvParams___2c_20void__28TfLiteConvParams___29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
 return $0;
}

function jswrap_object_clone($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvCopy(HEAP32[$1 + 8 >> 2], 1);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function __cos($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = $0 * $0;
 $3 = $2 * .5;
 $4 = 1 - $3;
 $5 = 1 - $4 - $3;
 $3 = $2 * $2;
 return $4 + ($5 + ($2 * ($2 * ($2 * ($2 * 2480158728947673e-20 + -.001388888888887411) + .0416666666666666) + $3 * $3 * ($2 * ($2 * -11359647557788195e-27 + 2.087572321298175e-9) + -2.7557314351390663e-7)) - $0 * $1));
}

function tflite__SubGraph__outputs_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_int__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_int__20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 8);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__Operator__outputs_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_int__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_int__20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 8);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function graphicsFallbackGetPixel($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 return HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24);
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__OperatorCode____size_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20int_20flatbuffers__EndianScalar_unsigned_20int__28unsigned_20int_29(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function unsigned_20char_20flatbuffers__ReadScalar_unsigned_20char__28void_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20char_20flatbuffers__EndianScalar_unsigned_20char__28unsigned_20char_29(HEAPU8[HEAP32[$1 + 12 >> 2]]);
 __stack_pointer = $1 + 16 | 0;
 return $0 & 255;
}

function tflite__SubGraph__inputs_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_int__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_int__20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 6);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__Operator__inputs_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_int__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_int__20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 6);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__OperatorCode__custom_code_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__String_20const__20flatbuffers__Table__GetPointer_flatbuffers__String_20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 6);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__AlignPointerDown_28unsigned_20char__2c_20unsigned_20long_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 >> 2] = Math_imul(HEAP32[$2 + 8 >> 2], HEAPU32[$2 + 4 >> 2] / HEAPU32[$2 + 8 >> 2] | 0);
 return HEAP32[$2 >> 2];
}

function jsvMathsOpError($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer + -64 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 60 >> 2] = $0;
 HEAP32[$2 + 56 >> 2] = $1;
 jslTokenAsString(HEAP32[$2 + 60 >> 2], $2 + 16 | 0, 32);
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 56 >> 2];
 HEAP32[$2 >> 2] = $2 + 16;
 jsError(104804, $2);
 __stack_pointer = $2 - -64 | 0;
 return 0;
}

function graphicsGetMemoryRequired($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $2 = HEAP32[$1 + 12 >> 2];
 return Math_imul(HEAPU8[HEAP32[$1 + 12 >> 2] + 16 | 0], Math_imul(HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8, HEAPU8[$2 + 14 | 0] | HEAPU8[$2 + 15 | 0] << 8)) + 7 >>> 3 | 0;
}

function tflite__Pool2DOptions__padding_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = signed_20char_20flatbuffers__Table__GetField_signed_20char__28unsigned_20short_2c_20signed_20char_29_20const(HEAP32[$1 + 12 >> 2], 4, 0) << 24;
 __stack_pointer = $1 + 16 | 0;
 return $0 >> 24;
}

function tflite__Conv2DOptions__padding_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = signed_20char_20flatbuffers__Table__GetField_signed_20char__28unsigned_20short_2c_20signed_20char_29_20const(HEAP32[$1 + 12 >> 2], 4, 0) << 24;
 __stack_pointer = $1 + 16 | 0;
 return $0 >> 24;
}

function std____2____less_unsigned_20char_2c_20unsigned_20char___operator_28_29_28unsigned_20char_20const__2c_20unsigned_20char_20const__29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 return HEAPU8[HEAP32[$3 + 8 >> 2]] < HEAPU8[HEAP32[$3 + 4 >> 2]];
}

function jsiTimerAdd($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvLock(HEAPU16[93522]);
 HEAP32[$1 + 4 >> 2] = jsvArrayAddToEnd(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2], 1) - 1;
 jsvUnLock(HEAP32[$1 + 8 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 4 >> 2];
}

function tflite__Tensor__shape_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_int__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_int__20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 4);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function setCorrectTimeZone($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[HEAP32[$1 + 12 >> 2] + 20 >> 2] = 0;
 $0 = jsdGetEffectiveTimeZone(fromTimeInDay(HEAP32[$1 + 12 >> 2]), 1, HEAP32[$1 + 12 >> 2] + 24 | 0);
 HEAP32[HEAP32[$1 + 12 >> 2] + 20 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph____size_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20int_20flatbuffers__EndianScalar_unsigned_20int__28unsigned_20int_29(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__Operator____size_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20int_20flatbuffers__EndianScalar_unsigned_20int__28unsigned_20int_29(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__Metadata____size_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20int_20flatbuffers__EndianScalar_unsigned_20int__28unsigned_20int_29(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__AlignSizeUp_28unsigned_20long_2c_20unsigned_20long_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = Math_imul(HEAP32[$2 + 8 >> 2], (HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 8 >> 2] - 1 | 0) >>> 0) / HEAPU32[$2 + 8 >> 2] | 0);
 return HEAP32[$2 + 4 >> 2];
}

function jspCheckStackPosition() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 label$1: {
  if (jsuGetFreeStack() >>> 0 < 512) {
   jsExceptionHere(1, 96781, 0);
   jspSetInterrupted(1);
   HEAP8[$0 + 15 | 0] = 0;
   break label$1;
  }
  HEAP8[$0 + 15 | 0] = 1;
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP8[$0 + 15 | 0] & 1;
}

function jsiGetPreferredConsoleDevice() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP8[$0 + 15 | 0] = 21;
 if (!(jshIsDeviceInitialised(HEAPU8[$0 + 15 | 0]) & 1)) {
  HEAP8[$0 + 15 | 0] = 20;
 }
 if (jshIsUSBSERIALConnected() & 1) {
  HEAP8[$0 + 15 | 0] = 21;
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAPU8[$0 + 15 | 0];
}

function signed_20char_20flatbuffers__ReadScalar_signed_20char__28void_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = signed_20char_20flatbuffers__EndianScalar_signed_20char__28signed_20char_29(HEAP8[HEAP32[$1 + 12 >> 2]]) << 24;
 __stack_pointer = $1 + 16 | 0;
 return $0 >> 24;
}

function jswrap_espruino_setPassword($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$1 + 12 >> 2]) {
  HEAP32[$1 + 12 >> 2] = jsvAsString(HEAP32[$1 + 12 >> 2]);
 }
 jsvUnLock(jsvObjectSetChild(HEAP32[46748], 105507, HEAP32[$1 + 12 >> 2]));
 __stack_pointer = $1 + 16 | 0;
}

function gemmlowp__AddSaturatingIf16BitImpl_int_2c_20false___Run_28int_2c_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = int_20gemmlowp__Add_int__28int_2c_20int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__Tensor____size_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20int_20flatbuffers__EndianScalar_unsigned_20int__28unsigned_20int_29(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function unsigned_20int_20flatbuffers__ReadScalar_unsigned_20int__28void_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20int_20flatbuffers__EndianScalar_unsigned_20int__28unsigned_20int_29(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__SoftmaxOptions__beta_28_29_20const($0) {
 var $1 = 0, $2 = Math_fround(0);
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = float_20flatbuffers__Table__GetField_float__28unsigned_20short_2c_20float_29_20const(HEAP32[$1 + 12 >> 2], 4, Math_fround(0));
 __stack_pointer = $1 + 16 | 0;
 return $2;
}

function jswrap_object_on($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 jswrap_object_on_X(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 0);
 __stack_pointer = $3 + 16 | 0;
}

function _jswrap_serial_inject_cb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP8[$2 + 7 | 0] = HEAPU8[HEAP32[$2 + 8 >> 2]];
 jshPushIOCharEvent(HEAPU8[$2 + 7 | 0], HEAP32[$2 + 12 >> 2] << 24 >> 24);
 __stack_pointer = $2 + 16 | 0;
}

function _jswrap_drawImageLayerNextX($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 + 180 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 164 >> 2] + HEAP32[$0 + 180 >> 2];
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 + 184 >> 2] = HEAP32[$0 + 184 >> 2] - HEAP32[HEAP32[$1 + 12 >> 2] + 168 >> 2];
}

function jsvObjectSetChildAndUnLock($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 jsvObjectSetChild(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 jsvUnLock(HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function int_20gemmlowp__MaskIfZero_int_2c_205__28gemmlowp__FixedPoint_int_2c_205__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = int_20gemmlowp__MaskIfZero_int__28int_29(HEAP32[gemmlowp__FixedPoint_int_2c_205___raw_28_29($1 + 8 | 0) >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__Operator__opcode_index_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20int_20flatbuffers__Table__GetField_unsigned_20int__28unsigned_20short_2c_20unsigned_20int_29_20const(HEAP32[$1 + 12 >> 2], 4, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jsvAddNamedChildAndUnLock($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 jsvUnLock2(jsvAddNamedChild(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]), HEAP32[$3 + 8 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function tflite__Tensor__type_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = signed_20char_20flatbuffers__Table__GetField_signed_20char__28unsigned_20short_2c_20signed_20char_29_20const(HEAP32[$1 + 12 >> 2], 6, 0) << 24;
 __stack_pointer = $1 + 16 | 0;
 return $0 >> 24;
}

function tflite__Metadata__name_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__String_20const__20flatbuffers__Table__GetPointer_flatbuffers__String_20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 4);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____less_signed_20char_2c_20signed_20char___operator_28_29_28signed_20char_20const__2c_20signed_20char_20const__29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 return HEAP8[HEAP32[$3 + 8 >> 2]] < HEAP8[HEAP32[$3 + 4 >> 2]];
}

function tflite__MicroInterpreter__outputs_size_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_int___Length_28_29_20const(tflite__SubGraph__outputs_28_29_20const(HEAP32[HEAP32[$1 + 12 >> 2] + 116 >> 2]));
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function push_byte($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $1 = HEAPU8[$3 + 7 | 0];
 $0 = HEAP32[HEAP32[$3 + 8 >> 2] >> 2];
 $3 = HEAP32[HEAP32[$3 + 8 >> 2] + 8 >> 2];
 $2 = HEAP32[$3 >> 2];
 HEAP32[$3 >> 2] = $2 + 1;
 HEAP8[$2 + $0 | 0] = $1;
}

function heatshrink_var_output_cb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
 jsvStringIteratorSetCharAndNext(HEAP32[$2 + 4 >> 2], HEAP8[$2 + 15 | 0]);
 __stack_pointer = $2 + 16 | 0;
}

function tflite__SimpleMemoryAllocator___SimpleMemoryAllocator_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 FUNCTION_TABLE[636]($0) | 0;
 tflite__SimpleMemoryAllocator__operator_20delete_28void__29($0);
 __stack_pointer = $1 + 16 | 0;
}

function tflite__MicroInterpreter__inputs_size_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_int___Length_28_29_20const(tflite__SubGraph__inputs_28_29_20const(HEAP32[HEAP32[$1 + 12 >> 2] + 116 >> 2]));
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jshIsTopEvent($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 14 | 0] = $0;
 label$1: {
  if (HEAPU8[187124] == HEAPU8[187125]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  HEAP8[$1 + 15 | 0] = HEAPU8[$1 + 14 | 0] == (HEAPU8[Math_imul(HEAPU8[187125], 5) + 187712 | 0] & 31);
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function tflite__Metadata__buffer_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20int_20flatbuffers__Table__GetField_unsigned_20int__28unsigned_20short_2c_20unsigned_20int_29_20const(HEAP32[$1 + 12 >> 2], 6, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_pin_write($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 HEAP8[$2 + 10 | 0] = jshGetPinFromVar(HEAP32[$2 + 12 >> 2]);
 jshPinOutput(HEAPU8[$2 + 10 | 0], HEAP8[$2 + 11 | 0] & 1);
 __stack_pointer = $2 + 16 | 0;
}

function jsvLockSafe($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP16[$1 + 10 >> 1] = $0;
 label$1: {
  if (!HEAPU16[$1 + 10 >> 1]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvLock(HEAPU16[$1 + 10 >> 1]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function tflite__Tensor__buffer_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20int_20flatbuffers__Table__GetField_unsigned_20int__28unsigned_20short_2c_20unsigned_20int_29_20const(HEAP32[$1 + 12 >> 2], 8, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__Model__version_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20int_20flatbuffers__Table__GetField_unsigned_20int__28unsigned_20short_2c_20unsigned_20int_29_20const(HEAP32[$1 + 12 >> 2], 4, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswGetBuiltInJSLibrary($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!strcmp(HEAP32[$1 + 8 >> 2], 105276)) {
   HEAP32[$1 + 12 >> 2] = 95016;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvIterateCallbackCountCb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[$3 >> 2] = HEAP32[$3 + 4 >> 2];
 $0 = HEAP32[$3 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$3 + 8 >> 2] + HEAP32[$0 >> 2];
}

function jsvArrayBufferIteratorSetByteValue($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 if ((HEAPU8[HEAP32[$2 + 12 >> 2] + 36 | 0] & 15) == 1) {
  jsvStringIteratorSetChar(HEAP32[$2 + 12 >> 2], HEAP8[$2 + 11 | 0]);
 }
 __stack_pointer = $2 + 16 | 0;
}

function heatshrink_ptr_output_cb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
 $0 = HEAPU8[$2 + 15 | 0];
 $2 = HEAP32[$2 + 4 >> 2];
 $1 = HEAP32[$2 >> 2];
 HEAP32[$2 >> 2] = $1 + 1;
 HEAP8[$1 | 0] = $0;
}

function jsvRef($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if ((jsvGetRefs(HEAP32[$1 + 12 >> 2]) & 65535) >>> 0 < 255) {
  jsvSetRefs(HEAP32[$1 + 12 >> 2], (jsvGetRefs(HEAP32[$1 + 12 >> 2]) & 65535) + 1 & 65535);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvArrayPushAndUnLock($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = jsvArrayPush(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 jsvUnLock(HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 4 >> 2];
}

function jstGetLastBufferTimerTask($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP16[$2 + 6 >> 1] = jsvGetRef(HEAP32[$2 + 12 >> 2]);
 $0 = utilTimerGetLastTask(550, $2 + 6 | 0, HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 & 1;
}

function jshGetDeviceToTransmit() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 label$1: {
  if (!(jshHasTransmitData() & 1)) {
   HEAP8[$0 + 15 | 0] = 0;
   break label$1;
  }
  HEAP8[$0 + 15 | 0] = HEAPU8[(HEAPU8[187123] << 1) + 187200 | 0] & 31;
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAPU8[$0 + 15 | 0];
}

function int_20gemmlowp__SaturatingRoundingMultiplyByPOT__12_2c_20int__28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = gemmlowp__ImplSaturatingRoundingMultiplyByPOT__12_2c_20int_2c_20_1___eval_28int_29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function int_20gemmlowp__MaskIfGreaterThan_int__28int_2c_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = int_20gemmlowp__MaskIfNonZero_int__28int_29(HEAP32[$2 + 12 >> 2] > HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function __lseek($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 $3 = __wasi_syscall_ret(legalfunc$__wasi_fd_seek($0, $1, $2, $3 & 255, $4 + 8 | 0));
 __stack_pointer = $4 + 16 | 0;
 $2 = HEAP32[$4 + 12 >> 2];
 i64toi32_i32$HIGH_BITS = $3 ? -1 : $2;
 $1 = HEAP32[$4 + 8 >> 2];
 return $3 ? -1 : $1;
}

function tflite__GreedyMemoryPlanner___GreedyMemoryPlanner_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 FUNCTION_TABLE[695]($0) | 0;
 tflite__GreedyMemoryPlanner__operator_20delete_28void__29($0);
 __stack_pointer = $1 + 16 | 0;
}

function jsError($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 jsiConsoleRemoveInputLine();
 jsiConsolePrintString(127692);
 HEAP32[$2 + 8 >> 2] = $1;
 vcbprintf(7, 0, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 jsiConsolePrintString(129587);
 __stack_pointer = $2 + 16 | 0;
}

function tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__BuiltinDataDeleter_28tflite__BuiltinDataAllocator__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$2 + 8 >> 2];
 return $0;
}

function tflite__QuantizationParameters__quantized_dimension_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20flatbuffers__Table__GetField_int__28unsigned_20short_2c_20int_29_20const(HEAP32[$1 + 12 >> 2], 16, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jsWarn($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 jsiConsoleRemoveInputLine();
 jsiConsolePrintString(127700);
 HEAP32[$2 + 8 >> 2] = $1;
 vcbprintf(7, 0, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 jsiConsolePrintString(129587);
 __stack_pointer = $2 + 16 | 0;
}

function int_20gemmlowp__SaturatingRoundingMultiplyByPOT__2_2c_20int__28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = gemmlowp__ImplSaturatingRoundingMultiplyByPOT__2_2c_20int_2c_20_1___eval_28int_29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function int_20gemmlowp__SaturatingRoundingMultiplyByPOT__1_2c_20int__28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = gemmlowp__ImplSaturatingRoundingMultiplyByPOT__1_2c_20int_2c_20_1___eval_28int_29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__Model_20const__20flatbuffers__GetRoot_tflite__Model__28void_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = tflite__Model__20flatbuffers__GetMutableRoot_tflite__Model__28void__29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_onewire_skip($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP8[$1 + 11 | 0] = onewire_getpin(HEAP32[$1 + 12 >> 2]);
 if (jshIsPinValid(HEAPU8[$1 + 11 | 0]) & 1) {
  OneWireWrite(HEAPU8[$1 + 11 | 0], 8, 204, 0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function jsserialHardwareFunc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP8[$2 + 7 | 0] = HEAPU8[HEAP32[$2 + 8 >> 2]];
 jshTransmit(HEAPU8[$2 + 7 | 0], HEAP32[$2 + 12 >> 2] & 255);
 __stack_pointer = $2 + 16 | 0;
}

function jshFlashGetMemMapAddress($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!(HEAPU32[$1 + 8 >> 2] < 134217728 | HEAPU32[$1 + 8 >> 2] >= 138412032)) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2];
 }
 return HEAP32[$1 + 12 >> 2];
}

function int_20gemmlowp__MaskIfLessThan_int__28int_2c_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = int_20gemmlowp__MaskIfNonZero_int__28int_29(HEAP32[$2 + 12 >> 2] < HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function tflite__DepthwiseConv2DOptions__dilation_w_factor_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20flatbuffers__Table__GetField_int__28unsigned_20short_2c_20int_29_20const(HEAP32[$1 + 12 >> 2], 14, 1);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__DepthwiseConv2DOptions__dilation_h_factor_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20flatbuffers__Table__GetField_int__28unsigned_20short_2c_20int_29_20const(HEAP32[$1 + 12 >> 2], 16, 1);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_array_find($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = _jswrap_array_iterate_with_callback(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 0, 2, 1, 1);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function jsvUnLock3($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 jsvUnLockInline(HEAP32[$3 + 12 >> 2]);
 jsvUnLockInline(HEAP32[$3 + 8 >> 2]);
 jsvUnLockInline(HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function gen_jswrap_Graphics_setFontVector($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = jswrap_graphics_setFontSizeX(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 1);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function cbprintf($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 vcbprintf(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 __stack_pointer = $4 + 16 | 0;
}

function tflite__DepthwiseConv2DOptions__depth_multiplier_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20flatbuffers__Table__GetField_int__28unsigned_20short_2c_20int_29_20const(HEAP32[$1 + 12 >> 2], 10, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function int_20gemmlowp__SaturatingRoundingMultiplyByPOT_5_2c_20int__28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = gemmlowp__ImplSaturatingRoundingMultiplyByPOT_5_2c_20int_2c_201___eval_28int_29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function int_20gemmlowp__SaturatingRoundingMultiplyByPOT_2_2c_20int__28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = gemmlowp__ImplSaturatingRoundingMultiplyByPOT_2_2c_20int_2c_201___eval_28int_29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function int_20gemmlowp__SaturatingRoundingMultiplyByPOT_1_2c_20int__28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = gemmlowp__ImplSaturatingRoundingMultiplyByPOT_1_2c_20int_2c_201___eval_28int_29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function flatbuffers__Vector_unsigned_20char___size_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20int_20flatbuffers__EndianScalar_unsigned_20int__28unsigned_20int_29(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____less_double_2c_20double___operator_28_29_28double_20const__2c_20double_20const__29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 return HEAPF64[HEAP32[$3 + 8 >> 2] >> 3] < HEAPF64[HEAP32[$3 + 4 >> 2] >> 3];
}

function gemmlowp__ImplSaturatingRoundingMultiplyByPOT__12_2c_20int_2c_20_1___eval_28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20gemmlowp__RoundingDivideByPOT_int__28int_2c_20int_29(HEAP32[$1 + 12 >> 2], 12);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function gen_jswrap_Graphics_fillPolyAA($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = jswrap_graphics_fillPoly_X(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 1);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function float_20flatbuffers__ReadScalar_float__28void_20const__29($0) {
 var $1 = 0, $2 = Math_fround(0);
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = float_20flatbuffers__EndianScalar_float__28float_29(HEAPF32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $2;
}

function flatbuffers__Vector_long_20long___size_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20int_20flatbuffers__EndianScalar_unsigned_20int__28unsigned_20int_29(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__Operator__builtin_options_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = void_20const__20flatbuffers__Table__GetPointer_void_20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 12);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____less_float_2c_20float___operator_28_29_28float_20const__2c_20float_20const__29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 return HEAPF32[HEAP32[$3 + 8 >> 2] >> 2] < HEAPF32[HEAP32[$3 + 4 >> 2] >> 2];
}

function jspeBlockEnd($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[46751]) {
  jspeiRemoveScope();
  jsvUnLock(HEAP32[46751]);
  HEAP32[46751] = 0;
 }
 HEAP32[46751] = HEAP32[$1 + 12 >> 2];
 HEAP8[187008] = HEAPU8[187008] - 1;
 __stack_pointer = $1 + 16 | 0;
}

function gemmlowp__ImplSaturatingRoundingMultiplyByPOT__2_2c_20int_2c_20_1___eval_28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20gemmlowp__RoundingDivideByPOT_int__28int_2c_20int_29(HEAP32[$1 + 12 >> 2], 2);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function gemmlowp__ImplSaturatingRoundingMultiplyByPOT__1_2c_20int_2c_20_1___eval_28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20gemmlowp__RoundingDivideByPOT_int__28int_2c_20int_29(HEAP32[$1 + 12 >> 2], 1);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function memmove($0, $1, $2) {
 var $3 = 0;
 if ($0 >>> 0 < $1 >>> 0) {
  return __memcpy($0, $1, $2);
 }
 if ($2) {
  $3 = $0 + $2 | 0;
  $1 = $1 + $2 | 0;
  while (1) {
   $3 = $3 - 1 | 0;
   $1 = $1 - 1 | 0;
   HEAP8[$3 | 0] = HEAPU8[$1 | 0];
   $2 = $2 - 1 | 0;
   if ($2) {
    continue;
   }
   break;
  }
 }
 return $0;
}

function jsvStringIteratorGetCharAndNext($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP8[$1 + 11 | 0] = jsvStringIteratorGetChar_2(HEAP32[$1 + 12 >> 2]);
 jsvStringIteratorNextInline(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP8[$1 + 11 | 0];
}

function gen_jswrap_Graphics_fillPoly($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = jswrap_graphics_fillPoly_X(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function gemmlowp__FixedPoint_int_2c_2012___FromRaw_28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 4 >> 2] = $0;
 $0 = HEAP32[$1 + 4 >> 2];
 HEAP32[gemmlowp__FixedPoint_int_2c_2012___raw_28_29($1 + 8 | 0) >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jsvGetIndexOf($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = jsvGetIndexOfFull(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1, 0, 0);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function jsSendPinWatchEvent($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP8[$1 + 11 | 0] = jshGetEventFlagsForPin(HEAP32[$1 + 12 >> 2] & 255);
 if (HEAPU8[$1 + 11 | 0]) {
  jshPushIOWatchEvent(HEAPU8[$1 + 11 | 0]);
 }
 __stack_pointer = $1 + 16 | 0;
}

function getCalendarDateFromDateVar($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 44 >> 2] = $1;
 HEAP8[$3 + 43 | 0] = $2;
 getTimeFromDateVar($3 + 8 | 0, HEAP32[$3 + 44 >> 2], HEAP8[$3 + 43 | 0] & 1);
 getCalendarDate($0, HEAP32[$3 + 8 >> 2]);
 __stack_pointer = $3 + 48 | 0;
}

function tflite__Conv2DOptions__dilation_w_factor_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20flatbuffers__Table__GetField_int__28unsigned_20short_2c_20int_29_20const(HEAP32[$1 + 12 >> 2], 12, 1);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__Conv2DOptions__dilation_h_factor_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20flatbuffers__Table__GetField_int__28unsigned_20short_2c_20int_29_20const(HEAP32[$1 + 12 >> 2], 14, 1);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_trace($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1: {
  if (jsvIsUndefined(HEAP32[$1 + 12 >> 2]) & 1) {
   jsvTrace(HEAP32[46747], 0);
   break label$1;
  }
  jsvTrace(HEAP32[$1 + 12 >> 2], 0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function int_20gemmlowp__MaskIfNonZero_int__28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1: {
  if (HEAP32[$1 + 12 >> 2]) {
   $0 = int_20gemmlowp__BitNot_int__28int_29(0);
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function gemmlowp__FixedPoint_int_2c_205___FromRaw_28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 4 >> 2] = $0;
 $0 = HEAP32[$1 + 4 >> 2];
 HEAP32[gemmlowp__FixedPoint_int_2c_205___raw_28_29($1 + 8 | 0) >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function gemmlowp__FixedPoint_int_2c_202___FromRaw_28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 4 >> 2] = $0;
 $0 = HEAP32[$1 + 4 >> 2];
 HEAP32[gemmlowp__FixedPoint_int_2c_202___raw_28_29($1 + 8 | 0) >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function gemmlowp__FixedPoint_int_2c_200___FromRaw_28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 4 >> 2] = $0;
 $0 = HEAP32[$1 + 4 >> 2];
 HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($1 + 8 | 0) >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function gemmlowp__FixedPoint_int_2c_200__20gemmlowp__FixedPoint_int_2c_200___ConstantPOT__3__28_29() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 8 >> 2] = gemmlowp__FixedPoint_int_2c_200___FromScalarRaw_28int_29(268435456);
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 8 >> 2];
}

function tflite__ops__micro__Register_RESHAPE_28_29($0) {
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 691;
 HEAP32[$0 + 12 >> 2] = 692;
}

function tflite__DepthwiseConv2DOptions__stride_w_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20flatbuffers__Table__GetField_int__28unsigned_20short_2c_20int_29_20const(HEAP32[$1 + 12 >> 2], 6, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__DepthwiseConv2DOptions__stride_h_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20flatbuffers__Table__GetField_int__28unsigned_20short_2c_20int_29_20const(HEAP32[$1 + 12 >> 2], 8, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function gemmlowp__FixedPoint_int_2c_205__20gemmlowp__FixedPoint_int_2c_205___ConstantPOT__2__28_29() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 8 >> 2] = gemmlowp__FixedPoint_int_2c_205___FromScalarRaw_28int_29(16777216);
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 8 >> 2];
}

function jshGetSystemTime() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 12 >> 2] = 154313;
 $1 = HEAP32[$0 + 12 >> 2];
 HEAP8[$0 + 11 | 0] = 0;
 $1 = jshGetTimeFromMilliseconds(+emscripten_asm_const_double($1 | 0, $0 + 11 | 0, 0));
 __stack_pointer = $0 + 16 | 0;
 return $1;
}

function gemmlowp__FixedPoint_int_2c_200___One_28_29() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 8 >> 2] = gemmlowp__FixedPoint_int_2c_200___FromScalarRaw_28int_29(gemmlowp__FixedPoint_int_2c_200___ScalarRawMax_28_29());
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 8 >> 2];
}

function flatbuffers__Vector_float___size_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20int_20flatbuffers__EndianScalar_unsigned_20int__28unsigned_20int_29(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__SafeBuiltinDataAllocator_28tflite__BuiltinDataAllocator__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$2 + 8 >> 2];
 return $0;
}

function tflite__MicroAllocator___MicroAllocator_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 FUNCTION_TABLE[649]($0) | 0;
 tflite__MicroAllocator__operator_20delete_28void__29($0);
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_serial_flush($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP8[$1 + 11 | 0] = jsiGetDeviceFromClass(HEAP32[$1 + 12 >> 2]);
 if (HEAPU8[$1 + 11 | 0]) {
  jshTransmitFlushDevice(HEAPU8[$1 + 11 | 0]);
 }
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_espruino_lockConsole() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[46748], 105507);
 if (HEAP32[$0 + 12 >> 2]) {
  HEAP16[93524] = HEAPU16[93524] | 1024;
 }
 jsvUnLock(HEAP32[$0 + 12 >> 2]);
 __stack_pointer = $0 + 16 | 0;
}

function jsvObjectIteratorSetValue($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 if (HEAP32[HEAP32[$2 + 12 >> 2] >> 2]) {
  jsvSetValueOfName(HEAP32[HEAP32[$2 + 12 >> 2] >> 2], HEAP32[$2 + 8 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
}

function integerDivideFloor($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 if (HEAP32[$2 + 12 >> 2] < 0) {
  $0 = (HEAP32[$2 + 12 >> 2] - HEAP32[$2 + 8 >> 2] | 0) + 1 | 0;
 } else {
  $0 = HEAP32[$2 + 12 >> 2];
 }
 return ($0 | 0) / HEAP32[$2 + 8 >> 2] | 0;
}

function _jswrap_espruino_toString_char($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 jsvStringIteratorSetCharAndNext(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2] << 24 >> 24);
 __stack_pointer = $2 + 16 | 0;
}

function tflite__Pool2DOptions__filter_height_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20flatbuffers__Table__GetField_int__28unsigned_20short_2c_20int_29_20const(HEAP32[$1 + 12 >> 2], 12, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__MicroMutableOpResolver_9u____MicroMutableOpResolver_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 tflite__MicroOpResolver___MicroOpResolver_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function flatbuffers__Vector_int___size_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20int_20flatbuffers__EndianScalar_unsigned_20int__28unsigned_20int_29(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__Pool2DOptions__filter_width_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20flatbuffers__Table__GetField_int__28unsigned_20short_2c_20int_29_20const(HEAP32[$1 + 12 >> 2], 10, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function _jswrap_graphics_freeFontInfo($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[HEAP32[$1 + 12 >> 2] >> 2] & 32768) {
  jsvUnLock2(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2], HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
}

function jsvStringIteratorGotoUTF8($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 jsvStringIteratorGoto(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function tflite__EspruinoErrorReporter__EspruinoErrorReporter_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 tflite__ErrorReporter__ErrorReporter_28_29($0);
 HEAP32[$0 >> 2] = 148192;
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____less_int_2c_20int___operator_28_29_28int_20const__2c_20int_20const__29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 return HEAP32[HEAP32[$3 + 8 >> 2] >> 2] < HEAP32[HEAP32[$3 + 4 >> 2] >> 2];
}

function jshIsEventForPin($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 $0 = HEAPU8[HEAP32[$2 + 12 >> 2]] & 31;
 $1 = jshGetEventFlagsForPin(HEAPU8[$2 + 11 | 0]) & 255;
 __stack_pointer = $2 + 16 | 0;
 return ($0 | 0) == ($1 | 0);
}

function _jswrap_prombox_queueresolve($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 _jswrap_prombox_queueresolve_or_reject(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 1);
 __stack_pointer = $2 + 16 | 0;
}

function jswrap_graphics_setFontPBF($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 jsExceptionHere(1, 105897, 0);
 __stack_pointer = $3 + 16 | 0;
 return 0;
}

function jsvStringIteratorNewUTF8($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 jsvStringIteratorNew(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function jspeiRemoveScope() {
 label$1: {
  if (!HEAP32[46749]) {
   break label$1;
  }
  if (!jsvGetArrayLength(HEAP32[46749])) {
   break label$1;
  }
  jsvUnLock(jsvArrayPop(HEAP32[46749]));
  if (jsvGetFirstChild(HEAP32[46749]) & 65535) {
   break label$1;
  }
  jsvUnLock(HEAP32[46749]);
  HEAP32[46749] = 0;
 }
}

function jsfResetStorage() {
 jsiConsolePrintf(129217, 0);
 jsfEraseAll();
 jsiConsolePrintf(129056, 0);
 label$1: {
  if (HEAP32[256] < 4194304) {
   jsiConsolePrintf(127722, 0);
   jsfResetStorage_progress(1040, 134217728, HEAP32[256]);
   jsiConsolePrintf(129038, 0);
   break label$1;
  }
  jsWarn(129518, 0);
 }
}

function _jswrap_prombox_queuereject($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 _jswrap_prombox_queueresolve_or_reject(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 0);
 __stack_pointer = $2 + 16 | 0;
}

function jswrap_espruino_reverseByte($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 12 >> 2] & 255;
 return Math_imul(Math_imul(HEAP32[$1 + 8 >> 2], 2050) & 139536 | Math_imul(HEAP32[$1 + 8 >> 2], 32800) & 558144, 65793) >>> 16 & 255;
}

function jstRestartUtilTimer() {
 var $0 = 0;
 $0 = Math_imul(HEAPU8[188994], 25) + 189008 | 0;
 HEAP32[47250] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
 if (HEAP32[47250] < 0) {
  HEAP32[47250] = 0;
 }
 $0 = HEAP32[47250];
 jshUtilTimerStart($0, $0 >> 31);
}

function jsfSetFlag($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 label$1: {
  if (HEAP8[$2 + 14 | 0] & 1) {
   HEAP8[154464] = HEAPU8[$2 + 15 | 0] | HEAPU8[154464];
   break label$1;
  }
  HEAP8[154464] = HEAPU8[154464] & (HEAPU8[$2 + 15 | 0] ^ -1);
 }
}

function tflite__Pool2DOptions__stride_w_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20flatbuffers__Table__GetField_int__28unsigned_20short_2c_20int_29_20const(HEAP32[$1 + 12 >> 2], 6, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__Pool2DOptions__stride_h_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20flatbuffers__Table__GetField_int__28unsigned_20short_2c_20int_29_20const(HEAP32[$1 + 12 >> 2], 8, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__Conv2DOptions__stride_w_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20flatbuffers__Table__GetField_int__28unsigned_20short_2c_20int_29_20const(HEAP32[$1 + 12 >> 2], 6, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__Conv2DOptions__stride_h_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20flatbuffers__Table__GetField_int__28unsigned_20short_2c_20int_29_20const(HEAP32[$1 + 12 >> 2], 8, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_date_from_milliseconds($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAPF64[$1 + 8 >> 3] = $0;
 HEAP32[$1 + 4 >> 2] = jspNewObject(0, 104701);
 jswrap_date_setTime(HEAP32[$1 + 4 >> 2], HEAPF64[$1 + 8 >> 3]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 4 >> 2];
}

function jsvObjectGetFloatChild($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = jsvGetFloatAndUnLock(jsvObjectGetChildIfExists(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]));
 __stack_pointer = $2 + 16 | 0;
 return $3;
}

function btn5Handler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 if (!(btnTouchHandler() & 1)) {
  btnHandlerCommon(5, HEAP8[$2 + 15 | 0] & 1, HEAPU8[$2 + 14 | 0]);
 }
 __stack_pointer = $2 + 16 | 0;
}

function btn4Handler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 if (!(btnTouchHandler() & 1)) {
  btnHandlerCommon(4, HEAP8[$2 + 15 | 0] & 1, HEAPU8[$2 + 14 | 0]);
 }
 __stack_pointer = $2 + 16 | 0;
}

function tflite__OperatorCode__version_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20flatbuffers__Table__GetField_int__28unsigned_20short_2c_20int_29_20const(HEAP32[$1 + 12 >> 2], 8, 1);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_modules_removeAllCached() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 12 >> 2] = jswrap_modules_getModuleList();
 if (HEAP32[$0 + 12 >> 2]) {
  jsvRemoveAllChildren(HEAP32[$0 + 12 >> 2]);
  jsvUnLock(HEAP32[$0 + 12 >> 2]);
 }
 __stack_pointer = $0 + 16 | 0;
}

function jswrap_math_sqrt($0) {
 $0 = +$0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAPF64[$1 + 8 >> 3] = $0;
 label$1: {
  if (HEAPF64[$1 + 8 >> 3] >= 0) {
   $0 = exp(log(HEAPF64[$1 + 8 >> 3]) * .5);
   break label$1;
  }
  $0 = nan;
 }
 __stack_pointer = $1 + 16 | 0;
 return +$0;
}

function jsiHandleHome() {
 var $0 = 0;
 while (1) {
  $0 = 0;
  if (HEAP32[46765]) {
   $0 = (jsvGetCharInString(HEAP32[46763], HEAP32[46765] - 1 | 0) | 0) != 10;
  }
  if ($0) {
   if (jsiShowInputLine() & 1) {
    jsiConsolePrintChar(8);
   }
   HEAP32[46765] = HEAP32[46765] - 1;
   continue;
  }
  break;
 }
}

function gen_jswrap_Math_tan($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAPF64[$1 + 8 >> 3] = $0;
 $0 = jswrap_math_sin(HEAPF64[$1 + 8 >> 3]);
 $2 = jswrap_math_sin(HEAPF64[$1 + 8 >> 3] + 1.5707963267948966);
 __stack_pointer = $1 + 16 | 0;
 return +($0 / $2);
}

function jswrap_promise_catch($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = jswrap_promise_then(HEAP32[$2 + 12 >> 2], 0, HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function jswrap_banglejs_setTheme() {
 HEAP8[189412] = 255;
 HEAP8[189413] = 255;
 HEAP8[189414] = 0;
 HEAP8[189415] = 0;
 HEAP8[189416] = 255;
 HEAP8[189417] = 255;
 HEAP8[189418] = 7;
 HEAP8[189419] = 0;
 HEAP8[189420] = 255;
 HEAP8[189421] = 255;
 HEAP8[189422] = 247;
 HEAP8[189423] = 2;
 HEAP8[189424] = 1;
}

function tflite__EspruinoErrorReporter___EspruinoErrorReporter_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 tflite__ErrorReporter___ErrorReporter_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jsvLockAgainSafe($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1: {
  if (HEAP32[$1 + 12 >> 2]) {
   $0 = jsvLockAgain(HEAP32[$1 + 12 >> 2]);
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function tflite__MicroAllocator__ResetTempAllocations_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0);
 __stack_pointer = $1 + 16 | 0;
}

function gen_jswrap_ArrayBufferView_byteLength($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 return Math_imul(HEAPU8[HEAP32[$1 + 12 >> 2] + 5 | 0] & 15, HEAPU8[$0 + 4 | 0] << 16 | (HEAPU8[$0 + 2 | 0] | HEAPU8[$0 + 3 | 0] << 8)) | 0;
}

function flatbuffers__Table__GetVTable_28_29_20const($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $2 = int_20flatbuffers__ReadScalar_int__28void_20const__29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0 - $2 | 0;
}

function jswrap_pin_mode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 jswrap_io_pinMode(jshGetPinFromVar(HEAP32[$2 + 12 >> 2]) & 255, HEAP32[$2 + 8 >> 2], 0);
 __stack_pointer = $2 + 16 | 0;
}

function _jswrap_prombox_resolve($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 _jswrap_prombox_resolve_or_reject(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 1);
 __stack_pointer = $2 + 16 | 0;
}

function tflite__GreedyMemoryPlanner___GreedyMemoryPlanner_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 tflite__MemoryPlanner___MemoryPlanner_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jslTokenAppendChar($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 if (HEAPU8[HEAP32[38615] + 80 | 0] < 63) {
  $2 = HEAPU8[$1 + 15 | 0];
  $0 = HEAP32[38615];
  $1 = HEAPU8[$0 + 80 | 0];
  HEAP8[$0 + 80 | 0] = $1 + 1;
  HEAP8[($0 + 12 | 0) + $1 | 0] = $2;
 }
}

function _jswrap_prombox_reject($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 _jswrap_prombox_resolve_or_reject(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 0);
 __stack_pointer = $2 + 16 | 0;
}

function jswrap_graphics_init() {
 HEAP8[189412] = 255;
 HEAP8[189413] = 255;
 HEAP8[189414] = 0;
 HEAP8[189415] = 0;
 HEAP8[189416] = 255;
 HEAP8[189417] = 255;
 HEAP8[189418] = 0;
 HEAP8[189419] = 0;
 HEAP8[189420] = 255;
 HEAP8[189421] = 255;
 HEAP8[189422] = 0;
 HEAP8[189423] = 0;
 HEAP8[189424] = 1;
}

function jsiLoop() {
 jshIdle();
 jsiIdle();
 jsiCheckErrors();
 if (HEAP32[46755] & 6144) {
  HEAP32[46755] = HEAP32[46755] & -6145;
  label$2: {
   if (!(jsvIsEmptyString(HEAP32[46763]) & 1)) {
    break label$2;
   }
  }
  jsiClearInputLine(1);
 }
 jsiConsoleReturnInputLine();
 return !HEAPU8[187066];
}

function jsfGetJSON($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 jsfGetJSONWhitespace(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 0);
 __stack_pointer = $3 + 16 | 0;
}

function jsvSetInteger($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 $1 = HEAP32[$2 + 8 >> 2];
 HEAP8[$0 | 0] = $1;
 HEAP8[$0 + 1 | 0] = $1 >>> 8;
 HEAP8[$0 + 2 | 0] = $1 >>> 16;
 HEAP8[$0 + 3 | 0] = $1 >>> 24;
}

function gen_jswrap_peek32($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = jswrap_io_peek(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 4);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function gen_jswrap_peek16($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = jswrap_io_peek(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 2);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function unsigned_20char_20const__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 12 >> 2]) {
   break label$1;
  }
 }
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
}

function gen_jswrap_peek8($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = jswrap_io_peek(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 1);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function ftoa_bounded($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAPF64[$3 + 8 >> 3] = $0;
 HEAP32[$3 + 4 >> 2] = $1;
 HEAP32[$3 >> 2] = $2;
 ftoa_bounded_extra(HEAPF64[$3 + 8 >> 3], HEAP32[$3 + 4 >> 2], HEAP32[$3 >> 2], 10, -1);
 __stack_pointer = $3 + 16 | 0;
}

function jsvRefRef($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP16[$1 + 14 >> 1] = $0;
 HEAP32[$1 + 8 >> 2] = jsvLock(HEAPU16[$1 + 14 >> 1]);
 jsvRef(HEAP32[$1 + 8 >> 2]);
 jsvUnLock(HEAP32[$1 + 8 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAPU16[$1 + 14 >> 1];
}

function jsvObjectIteratorNew($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = jsvLockSafe(jsvGetFirstChild(HEAP32[$2 + 8 >> 2]) & 65535);
 HEAP32[HEAP32[$2 + 12 >> 2] >> 2] = $0;
 __stack_pointer = $2 + 16 | 0;
}

function tflite__MicroOpResolver__MicroOpResolver_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 tflite__OpResolver__OpResolver_28_29($0);
 HEAP32[$0 >> 2] = 148272;
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__GetModel_28void_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = tflite__Model_20const__20flatbuffers__GetRoot_tflite__Model__28void_20const__29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jsvGetRef($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP16[$1 + 14 >> 1] = 0;
   break label$1;
  }
  HEAP16[$1 + 14 >> 1] = ((HEAP32[$1 + 8 >> 2] - 154472 | 0) / 13 | 0) + 1;
 }
 return HEAPU16[$1 + 14 >> 1];
}

function signed_20char_20const__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 12 >> 2]) {
   break label$1;
  }
 }
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
}

function jswrap_math_asin($0) {
 $0 = +$0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAPF64[$1 + 8 >> 3] = $0;
 $0 = jswrap_math_atan(HEAPF64[$1 + 8 >> 3] / jswrap_math_sqrt(-HEAPF64[$1 + 8 >> 3] * HEAPF64[$1 + 8 >> 3] + 1));
 __stack_pointer = $1 + 16 | 0;
 return +$0;
}

function _jswrap_onewire_write_cb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 OneWireWrite(HEAPU8[HEAP32[$2 + 8 >> 2]], 8, HEAP32[$2 + 12 >> 2], 0);
 __stack_pointer = $2 + 16 | 0;
}

function tflite__NumElements_28TfLiteTensor_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = tflite__NumElements_28TfLiteIntArray_20const__29(HEAP32[HEAP32[$1 + 12 >> 2] + 20 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function gen_jswrap_E_showScroller($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 12 >> 2];
 $0 = jspExecuteJSFunction(116755, 0, 1, $1 + 8 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function flatbuffers__Vector_unsigned_20char___data_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_unsigned_20char___Data_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function int_20flatbuffers__ReadScalar_int__28void_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20flatbuffers__EndianScalar_int__28int_29(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_serial_println($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 _jswrap_serial_print(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 1, 1);
 __stack_pointer = $2 + 16 | 0;
}

function jsvIsUTF8String($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 if (HEAP32[$1 + 8 >> 2]) {
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63;
 }
 HEAP8[$1 + 15 | 0] = 0;
 return HEAP8[$1 + 15 | 0] & 1;
}

function itostr_4($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 itostr_extra(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], 1, HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function itostr_3($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 itostr_extra(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], 1, HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function itostr_2($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 itostr_extra(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], 1, HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function itostr_1($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 itostr_extra(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], 1, HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function jsvArrayPushString($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = jsvArrayPushAndUnLock(HEAP32[$2 + 12 >> 2], jsvNewFromString(HEAP32[$2 + 8 >> 2]));
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function jslCharPosFromLex($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvStringIteratorClone(HEAP32[$1 + 12 >> 2], HEAP32[38615] + 88 | 0);
 HEAP8[HEAP32[$1 + 12 >> 2] + 36 | 0] = HEAPU8[HEAP32[38615]];
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_serial_write($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 _jswrap_serial_print(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 0, 0);
 __stack_pointer = $2 + 16 | 0;
}

function jswrap_serial_print($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 _jswrap_serial_print(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 1, 0);
 __stack_pointer = $2 + 16 | 0;
}

function jsvObjectGetBoolChild($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = jsvObjectGetIntegerChild(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return ($0 | 0) != 0;
}

function jshGetPinFromVarAndUnLock($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP8[$1 + 11 | 0] = jshGetPinFromVar(HEAP32[$1 + 12 >> 2]);
 jsvUnLock(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAPU8[$1 + 11 | 0];
}

function jshGetEventsUsed() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 16 | 0;
 if (HEAPU8[187124] >= HEAPU8[187125]) {
  $1 = HEAPU8[187124] - HEAPU8[187125] | 0;
 } else {
  $1 = (HEAPU8[187124] + 256 | 0) - HEAPU8[187125] | 0;
 }
 HEAP32[$0 + 12 >> 2] = $1;
 return HEAP32[$0 + 12 >> 2];
}
function itostr($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 itostr_extra(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], 1, HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function gen_jswrap_E_showMenu($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 12 >> 2];
 $0 = jspExecuteJSFunction(122304, 0, 1, $1 + 8 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function tflite__MicroOpResolver___MicroOpResolver_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 tflite__OpResolver___OpResolver_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jswrap_storage_getFree($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 47 | 0] = $0;
 HEAP32[$1 + 40 >> 2] = 0;
 jsfGetStorageStats($1 + 8 | 0, HEAP32[$1 + 40 >> 2], 1);
 __stack_pointer = $1 + 48 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function jsvGetLastChild($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $1 = HEAP32[$1 + 12 >> 2];
 $0 = $1;
 $0 = HEAPU8[$0 + 10 | 0];
 $2 = HEAPU8[$1 + 8 | 0] | HEAPU8[$1 + 9 | 0] << 8;
 $1 = $0 << 16;
 $0 = $2 | $1;
 $1 = $0;
 return $1 >>> 12 | 0;
}

function jsvAsArrayIndexAndUnLock($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvAsArrayIndex(HEAP32[$1 + 12 >> 2]);
 jsvUnLock(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jsfIsRealFile($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2]) {
  $2 = (jsfGetFileFlags(HEAP32[$1 + 12 >> 2]) & 32) != 0 ^ -1;
 }
 __stack_pointer = $1 + 16 | 0;
 return $2 & 1;
}

function getTimeFromDateVar($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAP8[$3 + 11 | 0] = $2;
 getTimeFromMilliSeconds($0, jswrap_date_getTime(HEAP32[$3 + 12 >> 2]), HEAP8[$3 + 11 | 0] & 1);
 __stack_pointer = $3 + 16 | 0;
}

function dtohex($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 12 >> 2] & 15;
 if (HEAP32[$1 + 12 >> 2] < 10) {
  $0 = HEAP32[$1 + 12 >> 2] + 48 | 0;
 } else {
  $0 = HEAP32[$1 + 12 >> 2] + 55 | 0;
 }
 return $0 << 24 >> 24;
}

function add_tag_bit($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 push_bits(HEAP32[$3 + 12 >> 2], 1, HEAPU8[$3 + 7 | 0], HEAP32[$3 + 8 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function jsvLockAgain($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $2 = (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) + 1024 | 0;
 HEAP8[$0 + 11 | 0] = $2;
 HEAP8[$0 + 12 | 0] = $2 >>> 8;
 return HEAP32[$1 + 12 >> 2];
}

function tflite__MicroInterpreter__outputs_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = tflite__SubGraph__outputs_28_29_20const(HEAP32[HEAP32[$1 + 12 >> 2] + 116 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_pin_read($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP8[$1 + 11 | 0] = jshGetPinFromVar(HEAP32[$1 + 12 >> 2]);
 $0 = jshPinInput(HEAPU8[$1 + 11 | 0]);
 __stack_pointer = $1 + 16 | 0;
 return $0 & 1;
}

function jsvSkipOneNameAndUnLock($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvSkipOneName(HEAP32[$1 + 12 >> 2]);
 jsvUnLock(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jsvRemoveChildAndUnLock($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 jsvRemoveChild(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 jsvUnLock(HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function jsvGetArrayItem($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = jsvSkipNameAndUnLock(jsvGetArrayIndex(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]));
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function itoch($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (HEAP32[$1 + 8 >> 2] < 10) {
   HEAP8[$1 + 15 | 0] = HEAP32[$1 + 8 >> 2] + 48;
   break label$1;
  }
  HEAP8[$1 + 15 | 0] = HEAP32[$1 + 8 >> 2] + 87;
 }
 return HEAP8[$1 + 15 | 0];
}

function _jsvGetIntegerAndUnLock($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvGetInteger(HEAP32[$1 + 12 >> 2]);
 jsvUnLock(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function _jsvGetBoolAndUnLock($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP8[$1 + 11 | 0] = jsvGetBool(HEAP32[$1 + 12 >> 2]) & 1;
 jsvUnLock(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP8[$1 + 11 | 0] & 1;
}

function vcbprintf_callback_jsiConsolePrintString($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 jsiConsolePrintString(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function tflite__MicroInterpreter__inputs_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = tflite__SubGraph__inputs_28_29_20const(HEAP32[HEAP32[$1 + 12 >> 2] + 116 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jsvIsStringEqual($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = jsvIsStringEqualOrStartsWith(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 & 1;
}

function tflite__RuntimeShape__DimsData_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1: {
  if (HEAP32[$0 >> 2] > 5) {
   $0 = HEAP32[$0 + 4 >> 2];
   break label$1;
  }
  $0 = $0 + 4 | 0;
 }
 return $0;
}

function jswrap_tfmicrointerpreter_getOutput($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_tfmicrointerpreter_tensorToArrayBuffer(HEAP32[$1 + 12 >> 2], 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jswrap_espruino_getErrorFlags() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP8[$0 + 15 | 0] = HEAPU8[186986];
 HEAP8[186986] = 0;
 $1 = jswrap_espruino_getErrorFlagArray(HEAPU8[$0 + 15 | 0]);
 __stack_pointer = $0 + 16 | 0;
 return $1 | 0;
}

function long_20long_20flatbuffers__EndianScalar_long_20long__28long_20long_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $1;
 $1 = HEAP32[$2 + 8 >> 2];
 $2 = HEAP32[$2 + 12 >> 2];
 i64toi32_i32$HIGH_BITS = $2;
 return $1;
}

function jswrap_tfmicrointerpreter_getInput($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_tfmicrointerpreter_tensorToArrayBuffer(HEAP32[$1 + 12 >> 2], 1);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jsvUnRefRef($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP16[$1 + 14 >> 1] = $0;
 HEAP32[$1 + 8 >> 2] = jsvLock(HEAPU16[$1 + 14 >> 1]);
 jsvUnRef(HEAP32[$1 + 8 >> 2]);
 jsvUnLock(HEAP32[$1 + 8 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return 0;
}

function jsvIterateCallbackCount($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = 0;
 jsvIterateBufferCallback(HEAP32[$1 + 12 >> 2], 5, $1 + 8 | 0);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jswrap_flash_getFree() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 12 >> 2] = jshFlashGetFree();
 if (!HEAP32[$0 + 12 >> 2]) {
  HEAP32[$0 + 12 >> 2] = jsvNewEmptyArray();
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function jsvSkipNameAndUnLock($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvSkipName(HEAP32[$1 + 12 >> 2]);
 jsvUnLock(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jsvAsStringAndUnLock($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvAsString(HEAP32[$1 + 12 >> 2]);
 jsvUnLock(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jsvAsNumberAndUnLock($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvAsNumber(HEAP32[$1 + 12 >> 2]);
 jsvUnLock(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function int_20gemmlowp__MaskIfZero_int__28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20gemmlowp__MaskIfNonZero_int__28int_29((HEAP32[$1 + 12 >> 2] != 0 ^ -1) & 1);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function gen_jswrap_Bangle_load($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 12 >> 2];
 jsvUnLock(jspExecuteJSFunction(122152, 0, 1, $1 + 8 | 0));
 __stack_pointer = $1 + 16 | 0;
}

function _jswrap_drawImageLayerStartX($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[HEAP32[$1 + 12 >> 2] + 180 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 172 >> 2];
 HEAP32[HEAP32[$1 + 12 >> 2] + 184 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 176 >> 2];
}

function jswrap_pipe_kill() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 12 >> 2] = pipeGetArray(0);
 if (HEAP32[$0 + 12 >> 2]) {
  jsvRemoveAllChildren(HEAP32[$0 + 12 >> 2]);
  jsvUnLock(HEAP32[$0 + 12 >> 2]);
 }
 __stack_pointer = $0 + 16 | 0;
}

function jstStopBufferTimerTask($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP16[$1 + 10 >> 1] = jsvGetRef(HEAP32[$1 + 12 >> 2]);
 $0 = utilTimerRemoveTask(550, $1 + 10 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 & 1;
}

function tflite__ops__micro__Register_DEPTHWISE_CONV_2D_28_29($0) {
 HEAP32[$0 >> 2] = 669;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 670;
 HEAP32[$0 + 12 >> 2] = 671;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
}

function short_20const__20tflite__micro__GetTensorData_short__28TfLiteEvalTensor_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 12 >> 2]) {
   break label$1;
  }
 }
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
}

function gen_jswrap_poke32($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 jswrap_io_poke(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 4);
 __stack_pointer = $2 + 16 | 0;
}

function gen_jswrap_poke16($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 jswrap_io_poke(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 2);
 __stack_pointer = $2 + 16 | 0;
}

function float_20const__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 12 >> 2]) {
   break label$1;
  }
 }
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
}

function unsigned_20char__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$1 + 12 >> 2]) {
  $0 = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 } else {
  $0 = 0;
 }
 return $0;
}

function jswrap_interface_load($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP16[93524] = HEAPU16[93524] | 64;
 jsvObjectSetChild(HEAP32[46748], 106898, HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function gen_jswrap_poke8($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 jswrap_io_poke(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 1);
 __stack_pointer = $2 + 16 | 0;
}

function tflite__ops__micro__Register_FULLY_CONNECTED_28_29($0) {
 HEAP32[$0 >> 2] = 682;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 683;
 HEAP32[$0 + 12 >> 2] = 684;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
}

function tflite__ops__micro__Register_AVERAGE_POOL_2D_28_29($0) {
 HEAP32[$0 >> 2] = 675;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 676;
 HEAP32[$0 + 12 >> 2] = 677;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
}

function jswrap_banglejs_factoryReset($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 jsfResetStorage();
 if (!(HEAP8[$1 + 15 | 0] & 1)) {
  HEAP16[93524] = HEAPU16[93524] | 64;
 }
 __stack_pointer = $1 + 16 | 0;
}

function jsvAppendStringVarComplete($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 jsvAppendStringVar(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 0, 2147483647);
 __stack_pointer = $2 + 16 | 0;
}

function gen_jswrap_Object_getOwnPropertyNames($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_object_keys_or_property_names(HEAP32[$1 + 12 >> 2], 1);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function _jsvGetFloatAndUnLock($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAPF64[$1 >> 3] = jsvGetFloat(HEAP32[$1 + 12 >> 2]);
 jsvUnLock(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAPF64[$1 >> 3];
}

function tflite__SizeOfDimension_28TfLiteTensor_20const__2c_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[(HEAP32[HEAP32[$2 + 12 >> 2] + 20 >> 2] + 4 | 0) + (HEAP32[$2 + 8 >> 2] << 2) >> 2];
}

function tflite__RuntimeShape__DimsData_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1: {
  if (HEAP32[$0 >> 2] > 5) {
   $0 = HEAP32[$0 + 4 >> 2];
   break label$1;
  }
  $0 = $0 + 4 | 0;
 }
 return $0;
}

function std____2____non_trivial_if_true_2c_20std____2__allocator_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29_______non_trivial_if_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function jswrap_interface_reset($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 HEAP16[93524] = HEAPU16[93524] | 128;
 if (HEAP8[$1 + 15 | 0] & 1) {
  jsfRemoveCodeFromFlash();
 }
 __stack_pointer = $1 + 16 | 0;
}

function int_20const__20tflite__micro__GetTensorData_int__28TfLiteEvalTensor_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 12 >> 2]) {
   break label$1;
  }
 }
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
}

function tflite__RuntimeShape___RuntimeShape_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if (HEAP32[$0 >> 2] > 5) {
  abort();
  abort();
 }
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function signed_20char__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$1 + 12 >> 2]) {
  $0 = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 } else {
  $0 = 0;
 }
 return $0;
}

function jstGetLastPinTimerTask($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = utilTimerGetLastTask(549, $2 + 15 | 0, HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 & 1;
}

function gemmlowp__FixedPoint_int_2c_202___One_28_29() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 8 >> 2] = gemmlowp__FixedPoint_int_2c_202___FromScalarRaw_28int_29(536870912);
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 8 >> 2];
}

function btn3Handler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 btnHandlerCommon(3, HEAP8[$2 + 15 | 0] & 1, HEAPU8[$2 + 14 | 0]);
 __stack_pointer = $2 + 16 | 0;
}

function btn2Handler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 btnHandlerCommon(2, HEAP8[$2 + 15 | 0] & 1, HEAPU8[$2 + 14 | 0]);
 __stack_pointer = $2 + 16 | 0;
}

function btn1Handler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 btnHandlerCommon(1, HEAP8[$2 + 15 | 0] & 1, HEAPU8[$2 + 14 | 0]);
 __stack_pointer = $2 + 16 | 0;
}

function tflite__ops__micro__Register_MAX_POOL_2D_28_29($0) {
 HEAP32[$0 >> 2] = 675;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 676;
 HEAP32[$0 + 12 >> 2] = 678;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
}

function jswrap_math_atan2($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAPF64[$2 + 8 >> 3] = $0;
 HEAPF64[$2 >> 3] = $1;
 $0 = atan2(HEAPF64[$2 + 8 >> 3], HEAPF64[$2 >> 3]);
 __stack_pointer = $2 + 16 | 0;
 return +$0;
}

function jswrap_date_getFullYear($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 getCalendarDateFromDateVar($1 + 8 | 0, HEAP32[$1 + 28 >> 2], 0);
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 20 >> 2];
}

function tflite__ops__micro__Register_DEQUANTIZE_28_29($0) {
 HEAP32[$0 >> 2] = 688;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 689;
 HEAP32[$0 + 12 >> 2] = 690;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
}

function i2c_pin_wr1($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 jshPinSetValue(HEAPU8[$1 + 15 | 0], 1);
 jshPinSetState(HEAPU8[$1 + 15 | 0], 1);
 jshPinSetState(HEAPU8[$1 + 15 | 0], 5);
 __stack_pointer = $1 + 16 | 0;
}

function flatbuffers__Vector_int___Length_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_int___size_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_pin_reset($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP8[$1 + 11 | 0] = jshGetPinFromVar(HEAP32[$1 + 12 >> 2]);
 jshPinOutput(HEAPU8[$1 + 11 | 0], 0);
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_date_getTimezoneOffset($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 getTimeFromDateVar($1, HEAP32[$1 + 28 >> 2], 0);
 __stack_pointer = $1 + 32 | 0;
 return 0 - HEAP32[$1 + 20 >> 2] | 0;
}

function tflite__ops__micro__Register_QUANTIZE_28_29($0) {
 HEAP32[$0 >> 2] = 685;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 686;
 HEAP32[$0 + 12 >> 2] = 687;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
}

function jswrap_date_getMonth($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 getCalendarDateFromDateVar($1 + 8 | 0, HEAP32[$1 + 28 >> 2], 0);
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 16 >> 2];
}

function gen_jswrap_Graphics_setFontBitmap($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_graphics_setFontSizeX(HEAP32[$1 + 12 >> 2], 8193, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function tflite__ops__micro__Register_SOFTMAX_28_29($0) {
 HEAP32[$0 >> 2] = 679;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 680;
 HEAP32[$0 + 12 >> 2] = 681;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
}

function tflite__ops__micro__Register_CONV_2D_28_29($0) {
 HEAP32[$0 >> 2] = 672;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 673;
 HEAP32[$0 + 12 >> 2] = 674;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
}

function jswrap_pin_set($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP8[$1 + 11 | 0] = jshGetPinFromVar(HEAP32[$1 + 12 >> 2]);
 jshPinOutput(HEAPU8[$1 + 11 | 0], 1);
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_date_getDate($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 getCalendarDateFromDateVar($1 + 8 | 0, HEAP32[$1 + 28 >> 2], 0);
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jshBusyIdle() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 12 >> 2] = 154241;
 $1 = HEAP32[$0 + 12 >> 2];
 HEAP8[$0 + 11 | 0] = 0;
 emscripten_asm_const_int($1 | 0, $0 + 11 | 0, 0) | 0;
 __stack_pointer = $0 + 16 | 0;
}

function gemmlowp__FixedPoint_int_2c_2012___Zero_28_29() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 8 >> 2] = gemmlowp__FixedPoint_int_2c_2012___FromScalarRaw_28int_29(0);
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 8 >> 2];
}

function jswrap_date_getDay($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 getCalendarDateFromDateVar($1 + 8 | 0, HEAP32[$1 + 28 >> 2], 0);
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 24 >> 2];
}

function flatbuffers__String__c_str_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_char___Data_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_referenceerror_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = _jswrap_error_constructor(HEAP32[$1 + 12 >> 2], 101091);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jswrap_graphics_dump($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsiConsolePrintf(112627, 0);
 jsvUnLock(jswrap_graphics_asBMP_X(HEAP32[$1 + 12 >> 2], 1));
 __stack_pointer = $1 + 16 | 0;
}

function gen_jswrap_ArrayBufferView_buffer($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jsvLock(jsvGetFirstChild(HEAP32[$1 + 12 >> 2]) & 65535);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jswrap_internalerror_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = _jswrap_error_constructor(HEAP32[$1 + 12 >> 2], 101067);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jswrap_interface_echo($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 label$1: {
  if (HEAP8[$1 + 15 | 0] & 1) {
   HEAP16[93524] = HEAPU16[93524] & -2;
   break label$1;
  }
  HEAP16[93524] = HEAPU16[93524] | 1;
 }
}

function jsvGetFlatStringBlocks($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 return ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) + 12 >>> 0) / 13 | 0;
}

function jsvArrayBufferIteratorFree($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAPU8[HEAP32[$1 + 12 >> 2] + 36 | 0]) {
  jsvStringIteratorFree_2(HEAP32[$1 + 12 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
}

function jspromise_resolve($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 jspromise_resolve_or_reject(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 1);
 __stack_pointer = $2 + 16 | 0;
}

function jshTransmitClearDevice($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 while (1) {
  if ((jshGetCharToTransmit(HEAPU8[$1 + 15 | 0]) | 0) >= 0) {
   continue;
  }
  break;
 }
 __stack_pointer = $1 + 16 | 0;
}

function gen_jswrap_Graphics_getHeight($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_graphics_getWidthOrHeight(HEAP32[$1 + 12 >> 2], 1);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jswrap_syntaxerror_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = _jswrap_error_constructor(HEAP32[$1 + 12 >> 2], 101055);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jswrap_storagefile_readLine($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_storagefile_read_internal(HEAP32[$1 + 12 >> 2], -1);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jsfPrintJSON($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 jsfGetJSONWithCallback(HEAP32[$2 + 12 >> 2], 0, HEAP32[$2 + 8 >> 2], 0, 7, 0);
 __stack_pointer = $2 + 16 | 0;
}

function gen_jswrap_Graphics_getWidth($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_graphics_getWidthOrHeight(HEAP32[$1 + 12 >> 2], 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function onewire_getpin($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jshGetPinFromVarAndUnLock(jsvObjectGetChildIfExists(HEAP32[$1 + 12 >> 2], 102482));
 __stack_pointer = $1 + 16 | 0;
 return $0 & 255;
}

function jswrap_pin_getMode($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_io_getPinMode(jshGetPinFromVar(HEAP32[$1 + 12 >> 2]) & 255);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function gen_jswrap_String_toUpperCase($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_string_toUpperLowerCase(HEAP32[$1 + 12 >> 2], 1);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function gen_jswrap_String_toLowerCase($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_string_toUpperLowerCase(HEAP32[$1 + 12 >> 2], 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function std____2____compressed_pair_elem_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_2c_201_2c_20false_____get_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function jswrap_typeerror_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = _jswrap_error_constructor(HEAP32[$1 + 12 >> 2], 101081);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jsserialGetSerialList($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 $0 = jsvObjectGetChild(HEAP32[46748], 103058, (HEAP8[$1 + 15 | 0] & 1 ? 3 : 0) & 65535);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jsfGetDriveBankAddress($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP8[$3 + 15 | 0] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[HEAP32[$3 + 8 >> 2] >> 2] = 134217728;
 HEAP32[HEAP32[$3 + 4 >> 2] >> 2] = 138412032;
}

function gen_jswrap_Object_keys($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_object_keys_or_property_names(HEAP32[$1 + 12 >> 2], 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jswrap_date_getMilliseconds($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 getTimeFromDateVar($1, HEAP32[$1 + 28 >> 2], 0);
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 4 >> 2];
}

function jsvUnLock2($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 jsvUnLockInline(HEAP32[$2 + 12 >> 2]);
 jsvUnLockInline(HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function gen_jswrap_Object_entries($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_object_values_or_entries(HEAP32[$1 + 12 >> 2], 1);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function srand($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[38454] = HEAP32[$1 + 12 >> 2] & 65535 | HEAP32[$1 + 12 >> 2] << 16;
 HEAP32[38455] = HEAP32[$1 + 12 >> 2] & -65536 | HEAP32[$1 + 12 >> 2] >>> 16;
}

function short__20tflite__micro__GetTensorData_short__28TfLiteEvalTensor__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$1 + 12 >> 2]) {
  $0 = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 } else {
  $0 = 0;
 }
 return $0;
}

function jswrap_pin_analog($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = jshPinAnalog(jshGetPinFromVar(HEAP32[$1 + 12 >> 2]) & 255);
 __stack_pointer = $1 + 16 | 0;
 return +$2;
}

function int_20tflite__CountLeadingZeros_unsigned_20int__28unsigned_20int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$1 + 12 >> 2]) {
  $0 = Math_clz32(HEAP32[$1 + 12 >> 2]);
 } else {
  $0 = 32;
 }
 return $0;
}

function gen_jswrap_String_removeAccents($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_string_removeAccents(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function gen_jswrap_Object_values($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_object_values_or_entries(HEAP32[$1 + 12 >> 2], 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function gen_jswrap_Graphics_getBgColor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_graphics_getColorX(HEAP32[$1 + 12 >> 2], 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function float__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$1 + 12 >> 2]) {
  $0 = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 } else {
  $0 = 0;
 }
 return $0;
}

function jswrap_error_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = _jswrap_error_constructor(HEAP32[$1 + 12 >> 2], 101100);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jsvNewFromStringVarComplete($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jsvNewWritableStringFromStringVar(HEAP32[$1 + 12 >> 2], 0, 2147483647);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_espruino_toFlatString($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_espruino_toStringX(HEAP32[$1 + 12 >> 2], 1);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jswrap_date_getMinutes($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 getTimeFromDateVar($1, HEAP32[$1 + 28 >> 2], 0);
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jswrap_date_getIsDST($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 getTimeFromDateVar($1, HEAP32[$1 + 28 >> 2], 0);
 __stack_pointer = $1 + 32 | 0;
 return HEAP8[$1 + 24 | 0] & 1;
}

function jsvIsArrayBufferName($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$1 + 12 >> 2]) {
  $0 = HEAP32[$1 + 12 >> 2];
  $2 = ((HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63) == 14;
 }
 return $2;
}

function jsvGetPrevSibling($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 return (HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24)) >>> 12 & 4095;
}

function gen_jswrap_Graphics_getColor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_graphics_getColorX(HEAP32[$1 + 12 >> 2], 1);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function tflite__internal__ContextHelper__SetTfLiteEvalTensors_28TfLiteEvalTensor__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2] = HEAP32[$2 + 8 >> 2];
}

function jswrap_object_getPrototypeOf($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jspGetNamedField(HEAP32[$1 + 12 >> 2], 107914, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jswrap_date_getSeconds($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 getTimeFromDateVar($1, HEAP32[$1 + 28 >> 2], 0);
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jsiOneSecondAfterStartup() {
 label$1: {
  if (HEAPU8[153824] == 19) {
   HEAP8[153824] = jsiGetPreferredConsoleDevice();
   jshTransmitMove(19, HEAPU8[153824]);
   jshUSARTKick(HEAPU8[153824]);
   break label$1;
  }
  jshTransmitClearDevice(19);
 }
}

function dly($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2]) {
  jshDelayMicroseconds(HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_date_getTime($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = jsvObjectGetFloatChild(HEAP32[$1 + 12 >> 2], 100278);
 __stack_pointer = $1 + 16 | 0;
 return +$2;
}

function jswrap_date_getHours($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 getTimeFromDateVar($1, HEAP32[$1 + 28 >> 2], 0);
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 16 >> 2];
}

function jsvIsNativeFunction($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$1 + 12 >> 2]) {
  $0 = HEAP32[$1 + 12 >> 2];
  $2 = ((HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63) == 8;
 }
 return $2;
}

function jsvIsFunctionReturn($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$1 + 12 >> 2]) {
  $0 = HEAP32[$1 + 12 >> 2];
  $2 = ((HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63) == 9;
 }
 return $2;
}

function jsiConsoleRemoveInputLine() {
 if (!(HEAP8[187056] & 1)) {
  HEAP8[187056] = 1;
  if (!(!(jsiEcho() & 1) | !HEAP32[46763])) {
   jsiMoveCursorChar(HEAP32[46763], HEAP32[46765], 0);
   jsiConsolePrintChar(13);
   jsiConsoleEraseAfterCursor();
  }
 }
}

function int__20tflite__micro__GetTensorData_int__28TfLiteEvalTensor__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$1 + 12 >> 2]) {
  $0 = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 } else {
  $0 = 0;
 }
 return $0;
}

function graphicsFallbackSetPixel($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
}

function gen_jswrap_Math_acos($0) {
 $0 = +$0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAPF64[$1 + 8 >> 3] = $0;
 $0 = jswrap_math_asin(HEAPF64[$1 + 8 >> 3]);
 __stack_pointer = $1 + 16 | 0;
 return +(1.5707963267948966 - $0);
}

function gen_jswrap_Array_pop($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jsvSkipNameAndUnLock(jsvArrayPop(HEAP32[$1 + 12 >> 2]));
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function pipeGetArray($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 $0 = jsvObjectGetChild(HEAP32[46748], 100365, (HEAP8[$1 + 15 | 0] & 1 ? 3 : 0) & 65535);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_interface_clearInterval($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 _jswrap_interface_clearTimeoutOrInterval(HEAP32[$1 + 12 >> 2], 0);
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_espruino_toString($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_espruino_toStringX(HEAP32[$1 + 12 >> 2], 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jsvIsNameIntBool($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$1 + 12 >> 2]) {
  $0 = HEAP32[$1 + 12 >> 2];
  $2 = ((HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63) == 17;
 }
 return $2;
}

function jshGetMillisecondsFromTime($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $1;
 $3 = +HEAPU32[$2 + 8 >> 2];
 $2 = HEAP32[$2 + 12 >> 2];
 return ($3 + +($2 | 0) * 4294967296) / 1e3;
}

function jswrap_interface_clearTimeout($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 _jswrap_interface_clearTimeoutOrInterval(HEAP32[$1 + 12 >> 2], 1);
 __stack_pointer = $1 + 16 | 0;
}

function jsvIsArrayBuffer($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$1 + 12 >> 2]) {
  $0 = HEAP32[$1 + 12 >> 2];
  $2 = ((HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63) == 4;
 }
 return $2;
}

function jswrap_espruino_asm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 jsExceptionHere(1, 106745, 0);
 __stack_pointer = $2 + 16 | 0;
}

function jsvIsSimpleInt($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$1 + 12 >> 2]) {
  $0 = HEAP32[$1 + 12 >> 2];
  $2 = ((HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63) == 10;
 }
 return $2;
}

function jsiConsolePrintf($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 vcbprintf(546, 0, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function gen_jswrap_Serial_find($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 $0 = jshGetDeviceObjectFor(768, 848, HEAPU8[$1 + 15 | 0]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jsvIsConstant($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$1 + 12 >> 2]) {
  $0 = HEAP32[$1 + 12 >> 2];
  $2 = ((HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 64) == 64;
 }
 return $2;
}

function jsvGetNextSibling($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 return (HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24)) & 4095;
}

function jsvGetFirstChild($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 return (HEAPU8[$0 + 7 | 0] | HEAPU8[$0 + 8 | 0] << 8 | (HEAPU8[$0 + 9 | 0] << 16 | HEAPU8[$0 + 10 | 0] << 24)) & 4095;
}

function jsvAppendCharacter_2($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 jsvAppendStringBuf(HEAP32[$2 + 12 >> 2], $2 + 11 | 0, 1);
 __stack_pointer = $2 + 16 | 0;
}

function jsvAppendCharacter_1($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 jsvAppendStringBuf(HEAP32[$2 + 12 >> 2], $2 + 11 | 0, 1);
 __stack_pointer = $2 + 16 | 0;
}

function jsiInit($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 HEAP16[93524] = 6144;
 HEAP8[153824] = 19;
 jsiSemiInit(HEAP8[$1 + 15 | 0] & 1, 0);
 jsiSetBusy(1, 0);
 __stack_pointer = $1 + 16 | 0;
}

function jshGetWatchedPinState($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 $0 = jshPinGetValue(HEAPU8[(HEAPU8[$1 + 15 | 0] - 1 | 0) + 343168 | 0]);
 __stack_pointer = $1 + 16 | 0;
 return $0 & 1;
}

function jsvIsNullish($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = 1;
 if (HEAP32[$1 + 12 >> 2]) {
  $0 = HEAP32[$1 + 12 >> 2];
  $0 = ((HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63) == 2;
 }
 return $0;
}

function tflite___28anonymous_20namespace_29__AllocationInfoBuilder__Size_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 return HEAP32[$0 + 8 >> 2] + HEAP32[$0 + 12 >> 2] | 0;
}

function rand() {
 HEAP32[38455] = Math_imul(HEAP32[38455] & 65535, 36969) + (HEAP32[38455] >>> 16 | 0);
 HEAP32[38454] = Math_imul(HEAP32[38454] & 65535, 18e3) + (HEAP32[38454] >>> 16 | 0);
 return HEAP32[38454] + (HEAP32[38455] << 16) & 2147483647;
}

function jswrap_graphics_asBMP($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_graphics_asBMP_X(HEAP32[$1 + 12 >> 2], 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jsvArrayBufferIteratorGetIndex($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jsvNewFromInteger(HEAP32[HEAP32[$1 + 12 >> 2] + 48 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jsvAppendCharacter($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 jsvAppendStringBuf(HEAP32[$2 + 12 >> 2], $2 + 11 | 0, 1);
 __stack_pointer = $2 + 16 | 0;
}

function jspSetInterrupted($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 label$1: {
  if (HEAP8[$1 + 15 | 0] & 1) {
   HEAP32[46755] = HEAP32[46755] | 16;
   break label$1;
  }
  HEAP32[46755] = HEAP32[46755] & -17;
 }
}

function jspKill() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 jspSoftKill();
 HEAP32[$0 + 12 >> 2] = jsvFindOrCreateRoot();
 jsvUnRef(HEAP32[$0 + 12 >> 2]);
 jsvUnLock(HEAP32[$0 + 12 >> 2]);
 __stack_pointer = $0 + 16 | 0;
}

function gen_jswrap_SPI_find($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 $0 = jshGetDeviceObjectFor(512, 544, HEAPU8[$1 + 15 | 0]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function gen_jswrap_I2C_find($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 $0 = jshGetDeviceObjectFor(640, 688, HEAPU8[$1 + 15 | 0]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jsvIsFloat($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$1 + 12 >> 2]) {
  $0 = HEAP32[$1 + 12 >> 2];
  $2 = ((HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63) == 11;
 }
 return $2;
}

function jsSendTouchEvent($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
}

function jswrap_math_cos($0) {
 $0 = +$0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAPF64[$1 + 8 >> 3] = $0;
 $0 = jswrap_math_sin(HEAPF64[$1 + 8 >> 3] + 1.5707963267948966);
 __stack_pointer = $1 + 16 | 0;
 return +$0;
}

function jsvIsArray($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$1 + 12 >> 2]) {
  $0 = HEAP32[$1 + 12 >> 2];
  $2 = ((HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63) == 3;
 }
 return $2;
}

function gen_jswrap_Math_min($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = jswrap_math_minmax(HEAP32[$1 + 12 >> 2], 0);
 __stack_pointer = $1 + 16 | 0;
 return +$2;
}

function gen_jswrap_Math_max($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = jswrap_math_minmax(HEAP32[$1 + 12 >> 2], 1);
 __stack_pointer = $1 + 16 | 0;
 return +$2;
}

function float_20tflite__TfLiteRound_float__28float_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAPF32[$1 + 12 >> 2] = $0;
 $0 = round_28float_29(HEAPF32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jsvIsNull($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$1 + 12 >> 2]) {
  $0 = HEAP32[$1 + 12 >> 2];
  $2 = ((HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) & 63) == 2;
 }
 return $2;
}

function jsfNameFromVarAndUnLock($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 jsfNameFromVar($0, HEAP32[$2 + 12 >> 2]);
 jsvUnLock(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function jswrap_pipe_src_close_listener($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jswrap_pipe_close_listener(HEAP32[$1 + 12 >> 2], 105447);
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_pipe_dst_close_listener($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jswrap_pipe_close_listener(HEAP32[$1 + 12 >> 2], 102458);
 __stack_pointer = $1 + 16 | 0;
}

function gen_jswrap_ArrayBuffer_byteLength($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 return HEAPU8[$0 + 4 | 0] << 16 | (HEAPU8[$0 + 2 | 0] | HEAPU8[$0 + 3 | 0] << 8);
}

function jswrap_json_parse($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_json_parse_ext(HEAP32[$1 + 12 >> 2], 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jswrap_espruino_setClock($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jshSetSystemClock(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jswrap_storage_hash($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jsfHashFiles(HEAP32[$1 + 12 >> 2], 0, 64);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jswrap_banglejs_setLocked($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 _jswrap_banglejs_setLocked(HEAP8[$1 + 15 | 0] & 1, 100294);
 __stack_pointer = $1 + 16 | 0;
}

function jsvSkipName($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jsvSkipNameWithParent(HEAP32[$1 + 12 >> 2], 1, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jsvNewFromString($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jsvNewNameOrString(HEAP32[$1 + 12 >> 2], 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jsvArrayIsEmpty($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = (jsvGetFirstChild(HEAP32[$1 + 12 >> 2]) & 65535) != 0 ^ -1;
 __stack_pointer = $1 + 16 | 0;
 return $0 & 1;
}

function jswrap_boolean_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jsvGetBool(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 & 1;
}

function jswrap_banglejs_setOptions($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 _jswrap_banglejs_setOptions(HEAP32[$1 + 12 >> 2], 0);
 __stack_pointer = $1 + 16 | 0;
}

function double_20tflite__TfLiteRound_double__28double_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAPF64[$1 + 8 >> 3] = $0;
 $0 = round(HEAPF64[$1 + 8 >> 3]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jspSoftInit() {
 HEAP32[46747] = jsvFindOrCreateRoot();
 HEAP32[46748] = jsvObjectGetChild(HEAP32[46747], 95006, 5);
 HEAP32[46755] = 1;
 HEAP32[46749] = 0;
 HEAP32[46750] = HEAP32[46747];
 HEAP32[46751] = 0;
 HEAP8[187008] = 0;
}

function jsiConsolePrintStringVar($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsiConsolePrintStringVarWithNewLineChar(HEAP32[$1 + 12 >> 2], 0, 0);
 __stack_pointer = $1 + 16 | 0;
}

function gen_jswrap_Array_isArray($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jsvIsArray(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 & 1;
}

function tflite__internal__ContextHelper__SetNodeIndex_28int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] + 16 >> 2] = HEAP32[$2 + 8 >> 2];
}

function __memcpy($0, $1, $2) {
 var $3 = 0;
 if ($2) {
  $3 = $0;
  while (1) {
   HEAP8[$3 | 0] = HEAPU8[$1 | 0];
   $3 = $3 + 1 | 0;
   $1 = $1 + 1 | 0;
   $2 = $2 - 1 | 0;
   if ($2) {
    continue;
   }
   break;
  }
 }
 return $0;
}

function _jswrap_arraybufferview_sort_int($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[$2 + 12 >> 2] - HEAP32[$2 + 8 >> 2] | 0;
}

function stringToFloat($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = stringToFloatWithRadix(HEAP32[$1 + 12 >> 2], 0, 0);
 __stack_pointer = $1 + 16 | 0;
 return $2;
}

function jsvGetFloatAndUnLock($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = _jsvGetFloatAndUnLock(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $2;
}

function i2c_pin_wr0($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 jshPinSetValue(HEAPU8[$1 + 15 | 0], 0);
 jshPinSetState(HEAPU8[$1 + 15 | 0], 1);
 __stack_pointer = $1 + 16 | 0;
}

function tflite__SimpleMemoryAllocator__ResetTempAllocations_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 16 >> 2];
}

function healthStateClear($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
}

function tflite___28anonymous_20namespace_29__MicroBuiltinDataAllocator__Deallocate_28void__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
}

function legalstub$dynCall_jiji($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $0 = dynCall_jiji($0, $1, $2, $3, $4);
 $2 = i64toi32_i32$HIGH_BITS;
 setTempRet0($2 | 0);
 return $0 | 0;
}

function jslIsIDOrReservedWord() {
 var $0 = 0, $1 = 0;
 $0 = 1;
 if (HEAP16[HEAP32[38615] + 2 >> 1] != 128) {
  $1 = HEAP16[HEAP32[38615] + 2 >> 1] >= 163 ? HEAP16[HEAP32[38615] + 2 >> 1] <= 198 : $1;
  $0 = $1;
 }
 return $0 & 1;
}

function round_28float_29($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAPF32[$1 + 12 >> 2] = $0;
 $2 = round(+HEAPF32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return Math_fround($2);
}

function jswrap_banglejs_setLCDOffset($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 lcdST7789_setYOffset(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvGetIntegerAndUnLock($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = _jsvGetIntegerAndUnLock(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function get_input_offset($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = get_input_buffer_size(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 & 65535;
}

function jsvGetBoolAndUnLock($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = _jsvGetBoolAndUnLock(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 & 1;
}

function jsvSkipOneName($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jsvSkipNameWithParent(HEAP32[$1 + 12 >> 2], 0, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jsvNewNameFromString($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jsvNewNameOrString(HEAP32[$1 + 12 >> 2], 1);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function stringToInt($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = stringToIntWithRadix(HEAP32[$1 + 12 >> 2], 0, 0, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jsiShowInputLine() {
 var $0 = 0;
 $0 = 0;
 label$1: {
  if (!(jsiEcho() & 1)) {
   break label$1;
  }
  $0 = 0;
  if (HEAP8[187056] & 1) {
   break label$1;
  }
  $0 = jsiPasswordProtected() ^ -1;
 }
 return $0 & 1;
}

function jshIsPinValid($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 $2 = HEAPU8[$1 + 15 | 0] < 32 ? (HEAPU8[Math_imul(HEAPU8[$1 + 15 | 0], 3) + 145056 | 0] & 15) != 0 : $2;
 return $2;
}

function _jswrap_graphics_freeImageInfo($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 20 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function _jswrap_arraybufferview_sort_float($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAPF64[$2 + 8 >> 3] = $0;
 HEAPF64[$2 >> 3] = $1;
 return +(HEAPF64[$2 + 8 >> 3] - HEAPF64[$2 >> 3]);
}

function terminalSetGFX($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 __memcpy(189428, HEAP32[$1 + 12 >> 2], 72);
 HEAP8[343499] = 1;
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_espruino_asUTF8($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsExceptionHere(1, 105861, 0);
 __stack_pointer = $1 + 16 | 0;
 return 0;
}

function jsvGetArrayBufferLength($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 return HEAPU8[$0 + 4 | 0] << 16 | (HEAPU8[$0 + 2 | 0] | HEAPU8[$0 + 3 | 0] << 8);
}

function jshIsPinStateDefault($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 $0 = 1;
 $0 = HEAPU8[$2 + 14 | 0] != 4 ? HEAPU8[$2 + 14 | 0] == 7 : $0;
 return $0;
}

function int_20gemmlowp__ShiftRight_int__28int_2c_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[$2 + 12 >> 2] >> HEAP32[$2 + 8 >> 2];
}

function ruy__profiler__ScopeLabel__ScopeLabel_char_20const___28char_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[$2 + 12 >> 2];
}

function err($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 >> 2] = HEAP32[$1 + 12 >> 2];
 jsExceptionHere(1, 100822, $1);
 __stack_pointer = $1 + 16 | 0;
}

function jsvStringIteratorFree_16($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvStringIteratorFree_15($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvStringIteratorFree_14($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvStringIteratorFree_13($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvStringIteratorFree_12($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvStringIteratorFree_11($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvStringIteratorFree_10($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function std____2____compressed_pair_elem_TfLiteFullyConnectedParams__2c_200_2c_20false_____get_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvStringIteratorFree_9($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvStringIteratorFree_8($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvStringIteratorFree_7($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvStringIteratorFree_6($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvStringIteratorFree_5($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvStringIteratorFree_4($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvStringIteratorFree_3($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvStringIteratorFree_2($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvStringIteratorFree_1($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jshI2CWrite($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 16 | 0;
 HEAP8[$5 + 15 | 0] = $0;
 HEAP8[$5 + 14 | 0] = $1;
 HEAP32[$5 + 8 >> 2] = $2;
 HEAP32[$5 + 4 >> 2] = $3;
 HEAP8[$5 + 3 | 0] = $4;
}

function __DOUBLE_BITS_11($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAPF64[$1 + 8 >> 3] = $0;
 HEAPF64[$1 >> 3] = HEAPF64[$1 + 8 >> 3];
 i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
 return HEAP32[$1 >> 2];
}

function __DOUBLE_BITS_10($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAPF64[$1 + 8 >> 3] = $0;
 HEAPF64[$1 >> 3] = HEAPF64[$1 + 8 >> 3];
 i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
 return HEAP32[$1 >> 2];
}

function std____2____compressed_pair_elem_TfLiteDepthwiseConvParams__2c_200_2c_20false_____get_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function jswrap_math_atan($0) {
 $0 = +$0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAPF64[$1 + 8 >> 3] = $0;
 $0 = atan(HEAPF64[$1 + 8 >> 3]);
 __stack_pointer = $1 + 16 | 0;
 return +$0;
}

function jsvHasRef($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jsvIsStringExt(HEAP32[$1 + 12 >> 2]) ^ -1;
 __stack_pointer = $1 + 16 | 0;
 return $0 & 1;
}

function jshI2CRead($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 16 | 0;
 HEAP8[$5 + 15 | 0] = $0;
 HEAP8[$5 + 14 | 0] = $1;
 HEAP32[$5 + 8 >> 2] = $2;
 HEAP32[$5 + 4 >> 2] = $3;
 HEAP8[$5 + 3 | 0] = $4;
}

function isWhitespace($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 $0 = isWhitespaceInline_1(HEAP8[$1 + 15 | 0]);
 __stack_pointer = $1 + 16 | 0;
 return $0 & 1;
}

function int_20gemmlowp__Sub_int__28int_2c_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[$2 + 12 >> 2] - HEAP32[$2 + 8 >> 2] | 0;
}

function int_20gemmlowp__Add_int__28int_2c_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[$2 + 12 >> 2] + HEAP32[$2 + 8 >> 2] | 0;
}

function gen_jswrap_ArrayBufferView_byteOffset($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 return HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8;
}

function _jsvGetAddressOf($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP16[$1 + 14 >> 1] = $0;
 $0 = jsvGetAddressOf(HEAPU16[$1 + 14 >> 1]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function __DOUBLE_BITS_9($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAPF64[$1 + 8 >> 3] = $0;
 HEAPF64[$1 >> 3] = HEAPF64[$1 + 8 >> 3];
 i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
 return HEAP32[$1 >> 2];
}

function __DOUBLE_BITS_8($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAPF64[$1 + 8 >> 3] = $0;
 HEAPF64[$1 >> 3] = HEAPF64[$1 + 8 >> 3];
 i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
 return HEAP32[$1 >> 2];
}

function __DOUBLE_BITS_7($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAPF64[$1 + 8 >> 3] = $0;
 HEAPF64[$1 >> 3] = HEAPF64[$1 + 8 >> 3];
 i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
 return HEAP32[$1 >> 2];
}

function __DOUBLE_BITS_6($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAPF64[$1 + 8 >> 3] = $0;
 HEAPF64[$1 >> 3] = HEAPF64[$1 + 8 >> 3];
 i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
 return HEAP32[$1 >> 2];
}

function __DOUBLE_BITS_5($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAPF64[$1 + 8 >> 3] = $0;
 HEAPF64[$1 >> 3] = HEAPF64[$1 + 8 >> 3];
 i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
 return HEAP32[$1 >> 2];
}

function __DOUBLE_BITS_4($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAPF64[$1 + 8 >> 3] = $0;
 HEAPF64[$1 >> 3] = HEAPF64[$1 + 8 >> 3];
 i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
 return HEAP32[$1 >> 2];
}

function __DOUBLE_BITS_3($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAPF64[$1 + 8 >> 3] = $0;
 HEAPF64[$1 >> 3] = HEAPF64[$1 + 8 >> 3];
 i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
 return HEAP32[$1 >> 2];
}

function __DOUBLE_BITS_2($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAPF64[$1 + 8 >> 3] = $0;
 HEAPF64[$1 >> 3] = HEAPF64[$1 + 8 >> 3];
 i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
 return HEAP32[$1 >> 2];
}

function __DOUBLE_BITS_1($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAPF64[$1 + 8 >> 3] = $0;
 HEAPF64[$1 >> 3] = HEAPF64[$1 + 8 >> 3];
 i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
 return HEAP32[$1 >> 2];
}

function tflite___28anonymous_20namespace_29__AllocationInfoBuilder__Finish_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2];
}

function jsvStringIteratorNext($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvStringIteratorNextInline(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvStringIteratorFree($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function int_20gemmlowp__BitXor_int__28int_2c_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[$2 + 12 >> 2] ^ HEAP32[$2 + 8 >> 2];
}

function int_20gemmlowp__BitAnd_int__28int_2c_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[$2 + 12 >> 2] & HEAP32[$2 + 8 >> 2];
}

function jswrap_math_sin($0) {
 $0 = +$0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAPF64[$1 + 8 >> 3] = $0;
 $0 = sin(HEAPF64[$1 + 8 >> 3]);
 __stack_pointer = $1 + 16 | 0;
 return +$0;
}

function __DOUBLE_BITS($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAPF64[$1 + 8 >> 3] = $0;
 HEAPF64[$1 >> 3] = HEAPF64[$1 + 8 >> 3];
 i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
 return HEAP32[$1 >> 2];
}

function jswrap_storage_compact($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 jsfCompact(HEAP8[$1 + 15 | 0] & 1);
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_espruino_compiledC($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsExceptionHere(1, 106821, 0);
 __stack_pointer = $1 + 16 | 0;
}

function jsvStringIteratorNextUTF8($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvStringIteratorNext(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvObjectIteratorFree_18($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvObjectIteratorFree_17($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvObjectIteratorFree_16($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvObjectIteratorFree_15($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvObjectIteratorFree_14($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvObjectIteratorFree_13($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvObjectIteratorFree_12($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvObjectIteratorFree_11($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvObjectIteratorFree_10($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jshSetEventDataPin($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 HEAP32[(HEAPU8[$2 + 15 | 0] << 2) + 187132 >> 2] = HEAPU8[$2 + 14 | 0] | -256;
}

function jswrap_date_now() {
 return +((+(jshGetSystemTime() >>> 0) + +(i64toi32_i32$HIGH_BITS | 0) * 4294967296) * (1e3 / (+(jshGetTimeFromMilliseconds(1e3) >>> 0) + +(i64toi32_i32$HIGH_BITS | 0) * 4294967296)));
}

function jsvObjectIteratorFree_9($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvObjectIteratorFree_8($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvObjectIteratorFree_7($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvObjectIteratorFree_6($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvObjectIteratorFree_5($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvObjectIteratorFree_4($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvObjectIteratorFree_3($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvObjectIteratorFree_2($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvObjectIteratorFree_1($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jspSetError($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 HEAP32[46755] = HEAP32[46755] & -2 | 64;
 if (HEAP8[$1 + 15 | 0] & 1) {
  HEAP32[46755] = HEAP32[46755] | 128;
 }
}

function tflite__BuiltinDataAllocator__BuiltinDataAllocator_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = 148012;
 return $0;
}

function std____2____compressed_pair_elem_TfLiteSoftmaxParams__2c_200_2c_20false_____get_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function std____2____compressed_pair_elem_TfLiteReshapeParams__2c_200_2c_20false_____get_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorFree($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsiConsolePrintChar($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 jshTransmit(HEAPU8[153824], HEAPU8[$1 + 15 | 0]);
 __stack_pointer = $1 + 16 | 0;
}

function jshPinAnalogOutput($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 HEAP8[$4 + 31 | 0] = $0;
 HEAPF64[$4 + 16 >> 3] = $1;
 HEAPF64[$4 + 8 >> 3] = $2;
 HEAP32[$4 + 4 >> 2] = $3;
 return 0;
}

function isNumeric($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 $0 = isNumericInline_1(HEAP8[$1 + 15 | 0]);
 __stack_pointer = $1 + 16 | 0;
 return $0 & 1;
}

function std____2____compressed_pair_elem_TfLiteFullyConnectedParams__2c_200_2c_20false_____get_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function jswGetPowerUsage($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jswrap_banglejs_powerusage(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jslNextCh() {
 var $0 = 0;
 if (HEAP32[HEAP32[38615] + 104 >> 2]) {
  $0 = HEAPU8[HEAP32[HEAP32[38615] + 104 >> 2] + HEAP32[HEAP32[38615] + 88 >> 2] | 0];
 } else {
  $0 = 0;
 }
 return $0 << 24 >> 24;
}

function std____2____compressed_pair_elem_TfLiteDepthwiseConvParams__2c_200_2c_20false_____get_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function jshSetEventCallback($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[(HEAPU8[$2 + 15 | 0] << 2) + 187132 >> 2] = HEAP32[$2 + 8 >> 2];
}

function std____2____compressed_pair_elem_TfLitePoolParams__2c_200_2c_20false_____get_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function std____2____compressed_pair_elem_TfLiteConvParams__2c_200_2c_20false_____get_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function gen_jswrap_getTime() {
 return +((+(jshGetSystemTime() >>> 0) + +(i64toi32_i32$HIGH_BITS | 0) * 4294967296) / (+(jshGetTimeFromMilliseconds(1e3) >>> 0) + +(i64toi32_i32$HIGH_BITS | 0) * 4294967296));
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__OperatorCode____Data_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 4 | 0;
}

function isAlpha($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 $0 = isAlphaInline_1(HEAP8[$1 + 15 | 0]);
 __stack_pointer = $1 + 16 | 0;
 return $0 & 1;
}

function st_save_backlog($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 save_backlog(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return 0;
}

function jsvUnLock($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLockInline(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function exp_28float_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAPF32[$1 + 12 >> 2] = $0;
 $0 = expf(HEAPF32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function __DOUBLE_BITS_13($0) {
 var $1 = 0, $2 = 0;
 wasm2js_scratch_store_f64(+$0);
 $1 = wasm2js_scratch_load_i32(1) | 0;
 $2 = wasm2js_scratch_load_i32(0) | 0;
 i64toi32_i32$HIGH_BITS = $1;
 return $2;
}

function __DOUBLE_BITS_12($0) {
 var $1 = 0, $2 = 0;
 wasm2js_scratch_store_f64(+$0);
 $1 = wasm2js_scratch_load_i32(1) | 0;
 $2 = wasm2js_scratch_load_i32(0) | 0;
 i64toi32_i32$HIGH_BITS = $1;
 return $2;
}

function jshGetPinShouldStayWatched($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 return HEAP32[(HEAPU8[$1 + 15 | 0] >>> 5 << 2) + 187036 >> 2] >>> HEAPU8[$1 + 15 | 0] & 1;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph____Data_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 4 | 0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__Operator____Data_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 4 | 0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__Metadata____Data_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 4 | 0;
}

function unsigned_20short_20flatbuffers__EndianScalar_unsigned_20short__28unsigned_20short_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP16[$1 + 14 >> 1] = $0;
 return HEAPU16[$1 + 14 >> 1];
}

function std____2____compressed_pair_elem_TfLiteSoftmaxParams__2c_200_2c_20false_____get_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function std____2____compressed_pair_elem_TfLiteReshapeParams__2c_200_2c_20false_____get_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function jslSetLex($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = HEAP32[38615];
 HEAP32[38615] = HEAP32[$1 + 12 >> 2];
 return HEAP32[$1 + 8 >> 2];
}

function jslCharPosFree($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvStringIteratorFree(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function can_take_byte($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPU32[HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}

function memset($0, $1, $2) {
 var $3 = 0;
 if ($2) {
  $3 = $0;
  while (1) {
   HEAP8[$3 | 0] = $1;
   $3 = $3 + 1 | 0;
   $2 = $2 - 1 | 0;
   if ($2) {
    continue;
   }
   break;
  }
 }
 return $0;
}

function jsvStringIteratorGetIndex_6($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] + HEAP32[HEAP32[$1 + 12 >> 2] >> 2] | 0;
}

function jsvStringIteratorGetIndex_5($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] + HEAP32[HEAP32[$1 + 12 >> 2] >> 2] | 0;
}

function jsvStringIteratorGetIndex_4($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] + HEAP32[HEAP32[$1 + 12 >> 2] >> 2] | 0;
}

function jsvStringIteratorGetIndex_3($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] + HEAP32[HEAP32[$1 + 12 >> 2] >> 2] | 0;
}

function jsvStringIteratorGetIndex_2($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] + HEAP32[HEAP32[$1 + 12 >> 2] >> 2] | 0;
}

function jsvStringIteratorGetIndex_1($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] + HEAP32[HEAP32[$1 + 12 >> 2] >> 2] | 0;
}

function jshFlashGetFree() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 12 >> 2] = jsvNewEmptyArray();
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__Tensor____Data_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 4 | 0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer____Data_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 4 | 0;
}

function int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function std____2____compressed_pair_elem_TfLitePoolParams__2c_200_2c_20false_____get_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function std____2____compressed_pair_elem_TfLiteConvParams__2c_200_2c_20false_____get_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvStringIteratorHasChar_12($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}

function jsvStringIteratorHasChar_11($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}

function jsvStringIteratorHasChar_10($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}

function jsvStringIteratorGetIndex($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] + HEAP32[HEAP32[$1 + 12 >> 2] >> 2] | 0;
}

function jshGetPinStateIsManual($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 return HEAP32[(HEAPU8[$1 + 15 | 0] >>> 5 << 2) + 187032 >> 2] >>> HEAPU8[$1 + 15 | 0] & 1;
}

function jsInit() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[85791] = $0 + 12;
 jshInit();
 jswHWInit();
 jsvInit(2500);
 jsiInit(1);
 __stack_pointer = $0 + 16 | 0;
}

function jsvStringIteratorHasChar_9($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}

function jsvStringIteratorHasChar_8($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}

function jsvStringIteratorHasChar_7($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}

function jsvStringIteratorHasChar_6($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}

function jsvStringIteratorHasChar_5($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}

function jsvStringIteratorHasChar_4($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}

function jsvStringIteratorHasChar_3($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}

function jsvStringIteratorHasChar_2($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}

function jsvStringIteratorHasChar_1($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}

function tflite__GreedyMemoryPlanner__GetBufferCount_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2];
}

function stepcount_init() {
 AccelFilter_init(154432);
 HEAP32[38452] = 98304;
 HEAP16[77222] = 0;
 HEAP16[77223] = 0;
 HEAP16[77224] = 0;
 HEAP32[38613] = 0;
 HEAP8[154456] = 0;
 HEAP8[154457] = 0;
}

function jspeBlockStart() {
 var $0 = 0;
 HEAP8[187008] = HEAPU8[187008] + 1;
 $0 = __stack_pointer - 16 | 0;
 HEAP32[$0 + 12 >> 2] = HEAP32[46751];
 HEAP32[46751] = 0;
 return HEAP32[$0 + 12 >> 2];
}

function tflite__NumDimensions_28TfLiteTensor_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[HEAP32[$1 + 12 >> 2] + 20 >> 2] >> 2];
}

function tflite__MemoryPlanner__MemoryPlanner_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = 148128;
 return $0;
}

function tflite__ErrorReporter__ErrorReporter_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = 148212;
 return $0;
}

function jsvStringIteratorHasChar($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}

function jsvGetLocks($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 return (HEAPU8[$0 + 11 | 0] | HEAPU8[$0 + 12 | 0] << 8) >>> 10 & 15;
}

function unsigned_20int_20flatbuffers__EndianScalar_unsigned_20int__28unsigned_20int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function unsigned_20char_20flatbuffers__EndianScalar_unsigned_20char__28unsigned_20char_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 return HEAPU8[$1 + 15 | 0];
}

function jsvGetRefs($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 return (HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8) >>> 4 & 255;
}

function tflite__SimpleMemoryAllocator__GetBufferHead_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2];
}

function jswrap_espruino_stopEventPropagation() {
 label$1: {
  if (HEAPU16[93524] & 8192) {
   HEAP16[93524] = HEAPU16[93524] | 16384;
   break label$1;
  }
  jsExceptionHere(1, 99732, 0);
 }
}

function tflite__SimpleMemoryAllocator___SimpleMemoryAllocator_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function tflite__OpResolver__OpResolver_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = 148312;
 return $0;
}

function tflite__NumOutputs_28TfLiteNode_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] >> 2];
}

function tflite__RuntimeShape__RuntimeShape_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = 0;
 return $0;
}

function jswrap_banglejs_beep_callback() {
 HEAP16[171661] = 0;
 label$1: {
  if (HEAP32[85796] & 128) {
   _jswrap_banglejs_setVibration();
   break label$1;
  }
  jshPinSetState(18, 4);
 }
}

function tflite__BuiltinDataAllocator___BuiltinDataAllocator_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function signed_20char_20flatbuffers__EndianScalar_signed_20char__28signed_20char_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 return HEAP8[$1 + 15 | 0];
}

function tflite__SimpleMemoryAllocator__GetTail_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 20 >> 2];
}

function jswrap_banglejs_setCompassPower($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return 0;
}

function isNumericInline_1($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 $2 = HEAP8[$1 + 15 | 0] >= 48 ? HEAP8[$1 + 15 | 0] <= 57 : $2;
 return $2;
}

function tflite__NumInputs_28TfLiteNode_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[HEAP32[$1 + 12 >> 2] >> 2] >> 2];
}

function jspeBlock() {
 if (jslMatch(123) & 1) {
  jspeBlockNoBrackets();
  if (!(HEAP32[46755] & 80)) {
   label$3: {
    if (jslMatch(125) & 1) {
     break label$3;
    }
   }
  }
 }
}

function isNumericInline($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 $2 = HEAP8[$1 + 15 | 0] >= 48 ? HEAP8[$1 + 15 | 0] <= 57 : $2;
 return $2;
}

function lcdST7789_init($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 HEAP32[85784] = -1;
 HEAP32[85783] = -1;
 HEAP32[85780] = 0;
 HEAP32[85781] = 0;
 HEAP32[85782] = 1;
}

function jswrap_banglejs_setHRMPower($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return 0;
}

function jswrap_banglejs_setGPSPower($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return 0;
}

function jswrap_banglejs_compassRd($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return 0;
}

function tflite__RuntimeShape__DimensionsCount_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
}

function flatbuffers__Vector_unsigned_20char___Data_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 4 | 0;
}

function jswrap_banglejs_accelRd($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return 0;
}

function jswrap_banglejs_hrmRd($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return 0;
}

function std____2____libcpp_numeric_limits_signed_20char_2c_20true___lowest_28_29() {
 return std____2____libcpp_numeric_limits_signed_20char_2c_20true___min_28_29() << 24 >> 24;
}

function flatbuffers__Vector_long_20long___Data_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 4 | 0;
}

function tflite__MicroAllocator___MicroAllocator_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function tflite__RuntimeShape__DimsDataUpTo5D_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 4 | 0;
}

function gen_jswrap_NRF_setAdvertising($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
}

function tflite__MemoryPlanner___MemoryPlanner_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function tflite__ErrorReporter___ErrorReporter_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function gen_jswrap_NRF_setServices($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
}

function jswrap_banglejs_compassWr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
}

function flatbuffers__Vector_float___Data_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 4 | 0;
}

function jsvConvertFromUTF8Index($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[$2 + 8 >> 2];
}

function float_20flatbuffers__EndianScalar_float__28float_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAPF32[$1 + 12 >> 2] = $0;
 return HEAPF32[$1 + 12 >> 2];
}

function flatbuffers__Vector_char___Data_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 4 | 0;
}

function tf_get_size($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[$2 + 12 >> 2] + 560 | 0;
}

function jswrap_banglejs_touchWr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
}

function flatbuffers__Vector_int___Data_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 4 | 0;
}

function tflite__OpResolver___OpResolver_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function jswrap_banglejs_setStepCount($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[85813] = HEAP32[$1 + 12 >> 2];
}

function jswrap_banglejs_setPollInterval_internal($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP16[$1 + 14 >> 1] = $0;
 HEAP16[171605] = HEAPU16[$1 + 14 >> 1];
}

function jsvConvertToUTF8Index($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[$2 + 8 >> 2];
}

function utilTimerIsFull() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 HEAP8[$0 + 15 | 0] = HEAPU8[188993] + 1 & 15;
 return HEAPU8[$0 + 15 | 0] == HEAPU8[188994];
}

function jswrap_banglejs_ioWr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
}

function jspSoftKill() {
 jsvUnLock(HEAP32[46749]);
 HEAP32[46749] = 0;
 jsvUnLock(HEAP32[46748]);
 HEAP32[46748] = 0;
 jsvUnLock(HEAP32[46747]);
 HEAP32[46747] = 0;
}

function std____2____libcpp_numeric_limits_float_2c_20true___lowest_28_29() {
 return Math_fround(-std____2____libcpp_numeric_limits_float_2c_20true___max_28_29());
}

function jsvObjectIteratorHasValue_18($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
}

function jsvObjectIteratorHasValue_17($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
}

function jsvObjectIteratorHasValue_16($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
}

function jsvObjectIteratorHasValue_15($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
}

function jsvObjectIteratorHasValue_14($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
}

function jsvObjectIteratorHasValue_13($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
}

function jsvObjectIteratorHasValue_12($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
}

function jsvObjectIteratorHasValue_11($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
}

function jsvObjectIteratorHasValue_10($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
}

function jsvObjectIteratorHasValue_9($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
}

function jsvObjectIteratorHasValue_8($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
}

function jsvObjectIteratorHasValue_7($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
}

function jsvObjectIteratorHasValue_6($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
}

function jsvObjectIteratorHasValue_5($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
}

function jsvObjectIteratorHasValue_4($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
}

function jsvObjectIteratorHasValue_3($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
}

function jsvObjectIteratorHasValue_2($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
}

function jsvObjectIteratorHasValue_1($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
}

function jsvInit($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvReset();
 __stack_pointer = $1 + 16 | 0;
}

function jsGfxChanged() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 HEAP8[$0 + 15 | 0] = HEAP8[189505] & 1;
 HEAP8[189505] = 0;
 return HEAP8[$0 + 15 | 0] & 1;
}

function int_20flatbuffers__EndianScalar_int__28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function std____2__numeric_limits_signed_20char___lowest_28_29() {
 return std____2____libcpp_numeric_limits_signed_20char_2c_20true___lowest_28_29() << 24 >> 24;
}

function ruy__profiler__ScopeLabel___ScopeLabel_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvGetAddressOf($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP16[$1 + 14 >> 1] = $0;
 return Math_imul(HEAPU16[$1 + 14 >> 1], 13) + 154459 | 0;
}

function jshPinAnalog($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 HEAPF64[$1 >> 3] = 0;
 return +HEAPF64[$1 >> 3];
}

function gemmlowp__FixedPoint_int_2c_2012___raw_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorHasValue($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
}

function gemmlowp__FixedPoint_int_2c_205___raw_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function gemmlowp__FixedPoint_int_2c_204___raw_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function gemmlowp__FixedPoint_int_2c_202___raw_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function gemmlowp__FixedPoint_int_2c_201___raw_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function gemmlowp__FixedPoint_int_2c_200___raw_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function TfLiteIntArrayGetSizeInBytes($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return (HEAP32[$1 + 12 >> 2] << 2) + 4 | 0;
}

function __stdio_seek($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $2 = __lseek(HEAP32[$0 + 60 >> 2], $1, $2, $3);
 return $2 | 0;
}

function tflite___28anonymous_20namespace_29__MicroBuiltinDataAllocator__operator_20delete_28void__29($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function int_20gemmlowp__BitNot_int__28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] ^ -1;
}

function jshSPISend($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP8[$2 + 11 | 0] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 return HEAP32[$2 + 12 >> 2];
}

function jsfGetFileFlags($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] >>> 24 | 0;
}

function std____2__numeric_limits_signed_20char___min_28_29() {
 return std____2____libcpp_numeric_limits_signed_20char_2c_20true___min_28_29() << 24 >> 24;
}

function std____2__numeric_limits_signed_20char___max_28_29() {
 return std____2____libcpp_numeric_limits_signed_20char_2c_20true___max_28_29() << 24 >> 24;
}

function jsfGetFileSize($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] & 16777215;
}

function std____2__numeric_limits_unsigned_20char___min_28_29() {
 return std____2____libcpp_numeric_limits_unsigned_20char_2c_20true___min_28_29() & 255;
}

function std____2__numeric_limits_unsigned_20char___max_28_29() {
 return std____2____libcpp_numeric_limits_unsigned_20char_2c_20true___max_28_29() & 255;
}

function tflite__BuiltinDataAllocator___BuiltinDataAllocator_28_29_1($0) {
 $0 = $0 | 0;
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 abort();
}

function is_finishing($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP8[HEAP32[$1 + 12 >> 2] + 11 | 0] & 1;
}

function jshKickSoftWatchDog() {
 jswrap_banglejs_kickPollWatchdog();
 if (HEAP32[46755] & 4096) {
  HEAP32[46755] = HEAP32[46755] & -4097 | 2048;
 }
}

function jsfGetFlag($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 return (HEAPU8[154464] & HEAPU8[$1 + 15 | 0]) != 0;
}

function jstReset() {
 jshUtilTimerDisable();
 HEAP8[188995] = 0;
 HEAP8[188993] = 0;
 HEAP8[188994] = 0;
 HEAP32[47352] = 0;
 HEAP32[47250] = 0;
}

function abs_28double_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAPF64[$1 + 8 >> 3] = $0;
 return Math_abs(HEAPF64[$1 + 8 >> 3]);
}

function jsfAlignAddress($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 3 & -4;
}

function __wasm_i64_udiv($0, $1, $2, $3) {
 $3 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($0, $1, $2, $3);
 return $3;
}

function tflite__MicroOpResolver___MicroOpResolver_28_29_1($0) {
 $0 = $0 | 0;
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 abort();
}

function std____2__numeric_limits_short___min_28_29() {
 return std____2____libcpp_numeric_limits_short_2c_20true___min_28_29() << 16 >> 16;
}

function std____2__numeric_limits_short___max_28_29() {
 return std____2____libcpp_numeric_limits_short_2c_20true___max_28_29() << 16 >> 16;
}

function jstSystemTimeChanged($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $1;
}

function jsiInputLineCursorMoved() {
 if (HEAP32[46772]) {
  jsvStringIteratorFree_5(187076);
  HEAP32[46772] = 0;
 }
 HEAP32[38457] = -1;
}

function __wasm_rotl_i32($0, $1) {
 var $2 = 0;
 $2 = $1 & 31;
 $1 = 0 - $1 & 31;
 return (-1 >>> $2 & $0) << $2 | (-1 << $1 & $0) >>> $1;
}

function __wasm_i64_sdiv($0, $1, $2, $3) {
 $3 = _ZN17compiler_builtins3int4sdiv3Div3div17he78fc483e41d7ec7E($0, $1, $2, $3);
 return $3;
}

function tflite__MemoryPlanner___MemoryPlanner_28_29_1($0) {
 $0 = $0 | 0;
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 abort();
}

function tflite__ErrorReporter___ErrorReporter_28_29_1($0) {
 $0 = $0 | 0;
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 abort();
}

function jshUtilTimerStart($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $1;
}

function legalfunc$__wasi_fd_seek($0, $1, $2, $3, $4) {
 return legalimport$__wasi_fd_seek($0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0) | 0;
}

function jshSetSystemTime($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $1;
}

function __wasm_i64_mul($0, $1, $2, $3) {
 $3 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE($0, $1, $2, $3);
 return $3;
}

function std____2__numeric_limits_float___lowest_28_29() {
 return std____2____libcpp_numeric_limits_float_2c_20true___lowest_28_29();
}

function jsfEraseAll() {
 jsfCacheClear();
 HEAP32[46756] = 0;
 HEAP32[46757] = 0;
 return jshFlashErasePages(134217728, 4194304) & 1;
}

function jsvIsUndefined($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return !HEAP32[$1 + 12 >> 2];
}

function jshSPISetReceive($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
}

function tflite__MicroMutableOpResolver_9u___operator_20delete_28void__29($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function fp_barrierf($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAPF32[$1 + 12 >> 2] = $0;
 return HEAPF32[$1 + 12 >> 2];
}

function tflite__OpResolver___OpResolver_28_29_1($0) {
 $0 = $0 | 0;
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 abort();
}

function jshUSARTSetup($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
}

function jshPinSetState($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
}

function jsfCachePut($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
}

function jshSPISend16($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
}

function std____2__numeric_limits_float___max_28_29() {
 return std____2____libcpp_numeric_limits_float_2c_20true___max_28_29();
}

function jshSPISetup($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
}

function jshI2CSetup($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
}

function fp_barrier($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAPF64[$1 + 8 >> 3] = $0;
 return HEAPF64[$1 + 8 >> 3];
}

function tflite__GreedyMemoryPlanner__per_buffer_size_28_29() {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = 40;
 return 40;
}

function jshSPISet16($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
}

function tflite__SimpleMemoryAllocator__operator_20delete_28void__29($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function tflite__EspruinoErrorReporter__operator_20delete_28void__29($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function tflite__GreedyMemoryPlanner__operator_20delete_28void__29($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function std____2__numeric_limits_int___min_28_29() {
 return std____2____libcpp_numeric_limits_int_2c_20true___min_28_29();
}

function std____2__numeric_limits_int___max_28_29() {
 return std____2____libcpp_numeric_limits_int_2c_20true___max_28_29();
}

function jswrap_terminal_idle() {
 if (HEAP8[343499] & 1) {
  graphicsInternalFlip();
  HEAP8[343499] = 0;
 }
 return 0;
}

function tflite__MicroAllocator__operator_20delete_28void__29($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function terminalControlCharsReset() {
 HEAP8[343500] = 0;
 HEAP8[343501] = 0;
 HEAP8[343502] = 0;
 HEAP8[343503] = 0;
}

function std____2____libcpp_numeric_limits_float_2c_20true___max_28_29() {
 return Math_fround(34028234663852886e22);
}

function gemmlowp__FixedPoint_int_2c_200___ScalarRawMax_28_29() {
 return std____2__numeric_limits_int___max_28_29();
}

function jswrap_espruino_fromUTF8($0) {
 $0 = $0 | 0;
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 0;
}

function jswrap_espruino_isUTF8($0) {
 $0 = $0 | 0;
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 0;
}

function stackAlloc($0) {
 $0 = $0 | 0;
 $0 = __stack_pointer - $0 & -16;
 __stack_pointer = $0;
 return $0 | 0;
}

function __wasi_syscall_ret($0) {
 if (!$0) {
  return 0;
 }
 HEAP32[__errno_location() >> 2] = $0;
 return -1;
}

function jsfGetBankEndAddress($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 138412032;
}

function jswrap_banglejs_gps_character($0) {
 HEAP8[(__stack_pointer - 16 | 0) + 15 | 0] = $0;
 return 1;
}

function dynCall_jiji($0, $1, $2, $3, $4) {
 $3 = FUNCTION_TABLE[$0 | 0]($1, $2, $3, $4) | 0;
 return $3;
}

function jswrap_terminal_init() {
 terminalControlCharsReset();
 HEAP8[343498] = 0;
 HEAP8[153876] = 29;
}

function __stdio_close($0) {
 $0 = $0 | 0;
 return __wasi_fd_close(dummy(HEAP32[$0 + 60 >> 2]) | 0) | 0;
}

function jspeAssignmentExpression() {
 return __jspeAssignmentExpression(jspeConditionalExpression());
}

function jsiCtrlC() {
 if (!(jsiPasswordProtected() & 1)) {
  HEAP32[46755] = HEAP32[46755] | 2048;
 }
}

function top12($0) {
 return (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2)) >>> 20 | 0;
}

function jswrap_graphics_getInstance() {
 return jsvObjectGetChildIfExists(HEAP32[46748], 96685) | 0;
}

function get_input_buffer_size($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 256;
}

function jslSingleChar() {
 HEAP16[HEAP32[38615] + 2 >> 1] = HEAPU8[HEAP32[38615]];
 jslGetNextCh();
}

function jshGetCurrentPinFunction($0) {
 HEAP8[(__stack_pointer - 16 | 0) + 15 | 0] = $0;
 return 0;
}

function jshIdle() {
 if (HEAP8[153836] & 1) {
  jsiOneSecondAfterStartup();
 }
 HEAP8[153836] = 0;
}

function __math_xflowf($0, $1) {
 return Math_fround(fp_barrierf($0 ? Math_fround(-$1) : $1) * $1);
}

function jspeConditionalExpression() {
 return __jspeConditionalExpression(jspeBinaryExpression());
}
function jshIsDeviceInitialised($0) {
 HEAP8[(__stack_pointer - 16 | 0) + 15 | 0] = $0;
 return 1;
}

function gen_jswrap_Bangle_showRecoveryMenu() {
 jsvUnLock(jspExecuteJSFunction(118791, 0, 0, 0));
}

function std____2____libcpp_numeric_limits_unsigned_20char_2c_20true___max_28_29() {
 return 255;
}

function get_lookahead_size($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 64;
}

function __wasm_ctz_i32($0) {
 if ($0) {
  return 31 - Math_clz32($0 - 1 ^ $0) | 0;
 }
 return 32;
}
function std____2____libcpp_numeric_limits_signed_20char_2c_20true___min_28_29() {
 return -128;
}

function jswrap_banglejs_buzz_callback() {
 HEAP8[343320] = 0;
 _jswrap_banglejs_setVibration();
}

function std____2____libcpp_numeric_limits_unsigned_20char_2c_20true___min_28_29() {
 return 0;
}

function std____2____libcpp_numeric_limits_signed_20char_2c_20true___max_28_29() {
 return 127;
}

function jswInit() {
 jswrap_graphics_init();
 jswrap_banglejs_init();
 jswrap_terminal_init();
}

function jshSetSystemClock($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 0;
}

function jsfCacheFind($0, $1) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $1;
 return -1;
}

function jswrap_modules_getModuleList() {
 return jsvObjectGetChild(HEAP32[46748], 100378, 5);
}

function gen_jswrap_Bangle_showLauncher() {
 jsvUnLock(jspExecuteJSFunction(117886, 0, 0, 0));
}

function flatbuffers__EndianCheck_28_29() {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = 1;
}

function std____2____libcpp_numeric_limits_int_2c_20true___min_28_29() {
 return -2147483648;
}

function gen_jswrap_Bangle_loadWidgets() {
 jsvUnLock(jspExecuteJSFunction(116473, 0, 0, 0));
}

function gen_jswrap_Bangle_drawWidgets() {
 jsvUnLock(jspExecuteJSFunction(113304, 0, 0, 0));
}

function std____2____libcpp_numeric_limits_int_2c_20true___max_28_29() {
 return 2147483647;
}

function jsvGetProcessorPowerUsage($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function jswKill() {
 jswrap_banglejs_kill();
 jswrap_pipe_kill();
 jswrap_waveform_kill();
}

function jspeBinaryExpression() {
 return __jspeBinaryExpression(jspeUnaryExpression(), 0);
}

function gen_jswrap_Bangle_showClock() {
 jsvUnLock(jspExecuteJSFunction(125898, 0, 0, 0));
}

function _parse_int() {
 return stringToIntWithRadix(jslGetTokenValueAsString(), 10, 0, 0);
}

function std____2____libcpp_numeric_limits_short_2c_20true___min_28_29() {
 return -32768;
}

function jshPinGetState($0) {
 HEAP8[(__stack_pointer - 16 | 0) + 15 | 0] = $0;
 return 0;
}

function __math_uflowf($0) {
 return __math_xflowf($0, Math_fround(2524354896707238e-44));
}

function __math_oflowf($0) {
 return __math_xflowf($0, Math_fround(15845632502852868e13));
}

function std____2____libcpp_numeric_limits_short_2c_20true___max_28_29() {
 return 32767;
}

function jshDelayMicroseconds($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function jshCanWatch($0) {
 HEAP8[(__stack_pointer - 16 | 0) + 15 | 0] = $0;
 return 1;
}

function jswrap_banglejs_getOptions() {
 return _jswrap_banglejs_setOptions(0, 1) | 0;
}

function jswrap_banglejs_isBacklightOn() {
 return (HEAP32[85796] & 131072) != 0 | 0;
}

function jsvReset() {
 HEAP16[77234] = 0;
 memset(154472, 0, 32500);
 jsvSoftInit();
}

function jshEnableWatchDog($0) {
 HEAPF64[(__stack_pointer - 16 | 0) + 8 >> 3] = $0;
}

function jswrap_banglejs_isCompassOn() {
 return (HEAP32[85796] & 16384) != 0 | 0;
}

function emscripten_stack_init() {
 __stack_base = 5586416;
 __stack_end = 343536;
}

function emscripten_stack_get_free() {
 return __stack_pointer - __stack_end | 0;
}

function jswrap_banglejs_isLocked() {
 return (HEAP32[85796] & 262144) != 0 | 0;
}

function jswrap_banglejs_isBarometerOn() {
 return (HEAP32[85796] & 32768) != 0;
}

function jshUSARTUnSetup($0) {
 HEAP8[(__stack_pointer - 16 | 0) + 15 | 0] = $0;
}

function gen_jswrap_LED2() {
 return jspExecuteJSFunction(113021, 0, 0, 0) | 0;
}

function gen_jswrap_LED1() {
 return jspExecuteJSFunction(112738, 0, 0, 0) | 0;
}

function jswrap_banglejs_isLCDOn() {
 return (HEAP32[85796] & 65536) != 0 | 0;
}

function jswrap_banglejs_isCharging() {
 return (jshPinGetValue(12) ^ -1) & 1;
}

function jsiGetHistory() {
 return jsvObjectGetChild(HEAP32[46748], 96428, 3);
}

function do_indexing($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function jswrap_banglejs_isHRMOn() {
 return (HEAP32[85796] & 4096) != 0 | 0;
}

function jswrap_banglejs_isGPSOn() {
 return (HEAP32[85796] & 8192) != 0 | 0;
}

function jshUSARTKick($0) {
 HEAP8[(__stack_pointer - 16 | 0) + 15 | 0] = $0;
}

function jshResetPinStateIsManual() {
 HEAP32[46758] = 0;
 HEAP32[46759] = 0;
}

function gen_jswrap_process_version() {
 return jsvNewFromString(110812) | 0;
}

function __math_uflow($0) {
 return __math_xflow($0, 12882297539194267e-247);
}

function jspeiClearScopes() {
 jsvUnLock(HEAP32[46749]);
 HEAP32[46749] = 0;
}

function gen_jswrap_NRF_getAddress() {
 return jsvNewFromString(107794) | 0;
}

function jswrap_serial_constructor() {
 return jspNewObject(0, 103067) | 0;
}

function jshSPIWait($0) {
 HEAP8[(__stack_pointer - 16 | 0) + 15 | 0] = $0;
}

function jsIdle() {
 HEAP32[38458] = -1;
 jsiLoop();
 return HEAP32[38458];
}

function gen_jswrap_LoopbackB() {
 return jspNewObject(110131, 103067) | 0;
}

function gen_jswrap_LoopbackA() {
 return jspNewObject(110153, 103067) | 0;
}

function abs($0) {
 var $1 = 0;
 $1 = $0 >> 31;
 return ($1 ^ $0) - $1 | 0;
}

function __math_oflow($0) {
 return __math_xflow($0, 3105036184601418e216);
}

function jswrap_espruino_getTemperature() {
 return +jshReadTemperature();
}

function gen_jswrap_Terminal() {
 return jspNewObject(103049, 103067) | 0;
}

function gen_jswrap_Math_random() {
 return +(+(rand() | 0) / 2147483647);
}

function jshHasTransmitData() {
 return HEAPU8[187122] != HEAPU8[187123];
}

function gen_jswrap_Serial1() {
 return jspNewObject(111166, 103067) | 0;
}

function gen_jswrap_NRF_getSecurityStatus() {
 return jsvNewObject() | 0;
}

function jswrap_spi_constructor() {
 return jspNewObject(0, 109547) | 0;
}

function jswrap_serial_idle() {
 return jsserialEventCallbackIdle() & 1;
}

function jswrap_i2c_constructor() {
 return jspNewObject(0, 110122) | 0;
}

function gen_jswrap_TFMicroInterpreter_TFMicroInterpreter() {
 return 0;
}

function gen_jswrap_Number_MIN_VALUE() {
 return 22250738585072014e-324;
}

function jsiPasswordProtected() {
 return (HEAPU16[93524] & 1024) != 0;
}

function jsiConsoleEraseAfterCursor() {
 jsiConsolePrintString(109450);
}

function gen_jswrap_Number_MAX_VALUE() {
 return 17976931348623157e292;
}

function __math_xflow($0, $1) {
 return fp_barrier($0 ? -$1 : $1) * $1;
}

function jshIOEventOverflowed() {
 HEAP8[186986] = HEAPU8[186986] | 1;
}

function gen_jswrap_SPI1() {
 return jspNewObject(111198, 109547) | 0;
}

function gen_jswrap_I2C1() {
 return jspNewObject(111207, 110122) | 0;
}

function gen_jswrap_USB() {
 return jspNewObject(110149, 103067) | 0;
}

function jswrap_banglejs_softOff() {
 jsExceptionHere(1, 101001, 0);
}

function jsvIsMemoryFull() {
 return (HEAPU16[77234] != 0 ^ -1) & 1;
}

function __cxa_pure_virtual() {
 abort_message(127243, 0);
 abort();
}

function tflite__EnumNamesBuiltinOperator_28_29() {
 return 147408;
}

function jswrap_global() {
 return jsvLockAgain(HEAP32[46747]) | 0;
}

function jshInitDevices() {
 HEAP8[187126] = 8;
 jshResetDevices();
}

function jshHasEvents() {
 return HEAPU8[187124] != HEAPU8[187125];
}

function jsfCreateFileTable() {
 jsfBankCreateFileTable(134217728);
}

function gen_jswrap_Number_NEGATIVE_INFINITY() {
 return -infinity;
}

function jswrap_banglejs_kickPollWatchdog() {
 HEAP16[171606] = 0;
}

function jsvNewFromEmptyString_14() {
 return jsvNewWithFlags(28);
}

function jsvNewFromEmptyString_13() {
 return jsvNewWithFlags(28);
}

function jsvNewFromEmptyString_12() {
 return jsvNewWithFlags(28);
}

function jsvNewFromEmptyString_11() {
 return jsvNewWithFlags(28);
}

function jsvNewFromEmptyString_10() {
 return jsvNewWithFlags(28);
}

function jspSetNoExecute() {
 HEAP32[46755] = HEAP32[46755] & -64;
}

function jsiTimersChanged() {
 HEAP16[93524] = HEAPU16[93524] | 4;
}

function gen_jswrap_Number_POSITIVE_INFINITY() {
 return infinity;
}

function gen_jswrap_ArrayBufferView_ArrayBufferView() {
 return 0;
}

function jsvNewFromEmptyString_9() {
 return jsvNewWithFlags(28);
}

function jsvNewFromEmptyString_8() {
 return jsvNewWithFlags(28);
}

function jsvNewFromEmptyString_7() {
 return jsvNewWithFlags(28);
}

function jsvNewFromEmptyString_6() {
 return jsvNewWithFlags(28);
}

function jsvNewFromEmptyString_5() {
 return jsvNewWithFlags(28);
}

function jsvNewFromEmptyString_4() {
 return jsvNewWithFlags(28);
}

function jsvNewFromEmptyString_3() {
 return jsvNewWithFlags(28);
}

function jsvNewFromEmptyString_2() {
 return jsvNewWithFlags(28);
}

function jsvNewFromEmptyString_1() {
 return jsvNewWithFlags(28);
}

function stackRestore($0) {
 $0 = $0 | 0;
 __stack_pointer = $0;
}

function jswrap_espruino_dumpTimers() {
 jstDumpUtilityTimers();
}

function jswrap_banglejs_off() {
 jsExceptionHere(1, 101001, 0);
}

function jswrap_banglejs_getStepCount() {
 return HEAP32[85813];
}

function jspIsInterrupted() {
 return (HEAP32[46755] & 16) != 0;
}

function emscripten_stack_get_base() {
 return __stack_base | 0;
}

function jswrap_espruino_reboot() {
 jswrap_interface_reset(0);
}

function jsvNewFromEmptyString() {
 return jsvNewWithFlags(28);
}

function gen_jswrap_Math_SQRT1_2() {
 return .7071067811865476;
}

function gen_jswrap_E_getAnalogVRef() {
 return +jshReadVRef();
}

function jspromise_create() {
 return jspNewObject(0, 104726);
}

function jsfIsNameEqual($0, $1) {
 return !memcmp($0, $1, 28);
}

function gen_jswrap_Math_SQRT2() {
 return 1.4142135623730951;
}

function gen_jswrap_Math_LOG2E() {
 return 1.4426950408889634;
}

function gen_jswrap_Math_LOG10E() {
 return .4342944819032518;
}

function emscripten_stack_get_end() {
 return __stack_end | 0;
}

function jswrap_graphics_idle() {
 graphicsIdle();
 return 0;
}

function jswrap_espruino_kickWatchdog() {
 jshKickWatchDog();
}

function jstUtilTimerIsRunning() {
 return HEAP8[188995] & 1;
}

function jspHasError() {
 return (HEAP32[46755] & 112) != 0;
}

function jslPreload() {
 jslGetNextCh();
 jslGetNextToken();
}

function gen_jswrap_Math_LN10() {
 return 2.302585092994046;
}

function jswrap_storage_optimise() {
 jsfCreateFileTable();
}

function jsfSaveToFlash() {
 jsiConsolePrintString(128328);
}

function gen_jswrap_Math_LN2() {
 return .6931471805599453;
}

function graphicsInternalFlip() {
 lcdST7789_flip(189428);
}

function gen_jswrap_StorageFile_StorageFile() {
 return 0;
}

function gen_jswrap_Math_PI() {
 return 3.141592653589793;
}

function jsvNewEmptyArray() {
 return jsvNewWithFlags(3);
}

function jstGetUtilTimerOffset() {
 return HEAP32[47352];
}

function gen_jswrap_Math_E() {
 return 2.718281828459045;
}

function strcpy($0, $1) {
 __stpcpy($0, $1);
 return $0;
}

function jsiGetConsoleDevice() {
 return HEAPU8[153824];
}

function gen_jswrap_tensorflow_tensorflow() {
 return 0;
}

function gen_jswrap_heatshrink_heatshrink() {
 return 0;
}

function floor($0) {
 $0 = +$0;
 return +Math_floor($0);
}

function __wasm_call_ctors() {
 emscripten_stack_init();
}

function __ofl_lock() {
 __lock(343512);
 return 343516;
}

function jsKill() {
 jsiKill();
 jsvKill();
 jshKill();
}

function jswGetBuiltInLibraryNames() {
 return 105240;
}

function gen_jswrap_Bluetooth_Bluetooth() {
 return 0;
}

function ceil($0) {
 $0 = +$0;
 return +Math_ceil($0);
}

function lcdST7789_getMode() {
 return HEAP32[85782];
}

function jsvNewObject() {
 return jsvNewWithFlags(5);
}

function jsvNewNull_1() {
 return jsvNewWithFlags(2);
}

function fabs($0) {
 $0 = +$0;
 return +Math_abs($0);
}

function jswrap_storage_eraseAll() {
 jsfEraseAll();
}

function gen_jswrap_Graphics_Graphics() {
 return 0;
}

function abort_message($0, $1) {
 abort();
 abort();
}

function stackSave() {
 return __stack_pointer | 0;
}

function jswrap_banglejs_getBattery() {
 return 50;
}

function jsvNewNull() {
 return jsvNewWithFlags(2);
}

function jsiEcho() {
 return !(HEAPU16[93524] & 3);
}

function jshGetRandomNumber() {
 return rand() | 0;
}

function jswrap_espruino_getBattery() {
 return 0;
}

function jswrap_banglejs_getCompass() {
 return 0;
}

function jsvSoftInit() {
 jsvCreateEmptyVarList();
}

function gen_jswrap_process_process() {
 return 0;
}

function gen_jswrap_console_console() {
 return 0;
}

function gen_jswrap_Storage_Storage() {
 return 0;
}

function gen_jswrap_Modules_Modules() {
 return 0;
}

function gen_jswrap_Infinity() {
 return infinity;
}

function jswrap_banglejs_getGPSFix() {
 return 0;
}

function jswHWInit() {
 jswrap_banglejs_hwinit();
}

function jsvSoftKill() {
 jsvClearEmptyVarList();
}

function gen_jswrap_dump() {
 jsiDumpState(7, 0);
}

function jsiKill() {
 jsiSoftKill();
 jspKill();
}

function gen_jswrap_Bangle_Bangle() {
 return 0;
}

function jshIsUSBSERIALConnected() {
 return 1;
}

function gen_jswrap_Number_NaN() {
 return nan;
}

function gen_jswrap_Flash_Flash() {
 return 0;
}

function __errno_location() {
 return 343524;
}

function jsvGetMemoryTotal() {
 return 2500;
}

function jshReadTemperature() {
 return nan;
}

function gen_jswrap_Math_Math() {
 return 0;
}

function gen_jswrap_JSON_JSON() {
 return 0;
}

function __ofl_unlock() {
 __unlock(343512);
}

function gen_jswrap_VIBRATE() {
 return 13;
}

function gen_jswrap_Bluetooth_setConsole() {}

function gen_jswrap_NRF_NRF() {
 return 0;
}

function jsuGetFreeStack() {
 return 1e6;
}

function jshReset() {
 jshResetDevices();
}

function jswrap_banglejs_resetCompass() {}

function jshIsInInterrupt() {
 return 0;
}

function gen_jswrap_fs_fs() {
 return 0;
}

function gen_jswrap_NaN() {
 return nan;
}

function gen_jswrap_BTN5() {
 return 16;
}

function gen_jswrap_BTN4() {
 return 11;
}

function gen_jswrap_BTN3() {
 return 23;
}

function gen_jswrap_BTN2() {
 return 22;
}

function gen_jswrap_BTN1() {
 return 24;
}

function gen_jswrap_HIGH() {
 return 1;
}

function gen_jswrap_BTN() {
 return 24;
}

function gen_jswrap_LOW() {
 return 0;
}

function gen_jswrap_E_E() {
 return 0;
}

function jshReadVRef() {
 return nan;
}

function jswrap_banglejs_postInit() {}

function jspInit() {
 jspSoftInit();
}

function __lockfile($0) {
 return 1;
}

function jspDebuggerLoopIfCtrlC() {}

function jsfLoadStateFromFlash() {}

function dummy($0) {
 return $0;
}

function jshUtilTimerDisable() {}

function jsfCacheClearFile($0) {}

function lcdST7789_blitEnd() {}

function jshKickWatchDog() {}

function jshInterruptOff() {}

function jshInterruptOn() {}

function __unlockfile($0) {}

function jsfCacheClear() {}

function graphicsIdle() {}

function __unlock($0) {}

function __lock($0) {}

function jsvKill() {}

function jshKill() {}


// EMSCRIPTEN_END_FUNCS

;
 bufferView = HEAPU8;
 initActiveSegments(env);
 var FUNCTION_TABLE = Table([null, jswrap_object_toString, jsvStringIteratorPrintfCallback, jsvIsInternalFunctionKey, jsvIsInternalObjectKey, jsvIterateCallbackCountCb, jsvIterateCallbackToBytesCb, vcbprintf_callback_jsiConsolePrintString, espruino_snprintf_cb, jswrap_eval, jswrap_dataview_constructor, jswrap_date_constructor, jswrap_error_constructor, jswrap_syntaxerror_constructor, jswrap_typeerror_constructor, jswrap_internalerror_constructor, jswrap_referenceerror_constructor, jswrap_regexp_constructor, jswrap_onewire_constructor, jswrap_promise_constructor, jswrap_serial_constructor, gen_jswrap_StorageFile_StorageFile, jswrap_spi_constructor, jswrap_i2c_constructor, jswrap_waveform_constructor, gen_jswrap_Graphics_Graphics, gen_jswrap_TFMicroInterpreter_TFMicroInterpreter, jswrap_pin_constructor, gen_jswrap_Bangle_Bangle, gen_jswrap_E_E, gen_jswrap_NRF_NRF, gen_jswrap_Bluetooth_Bluetooth, jswrap_array_constructor, gen_jswrap_console_console, gen_jswrap_JSON_JSON, jswrap_number_constructor, jswrap_object_constructor, jswrap_string_constructor, gen_jswrap_Modules_Modules, gen_jswrap_Math_Math, gen_jswrap_Flash_Flash, gen_jswrap_fs_fs, gen_jswrap_process_process, gen_jswrap_Storage_Storage, gen_jswrap_heatshrink_heatshrink, gen_jswrap_tensorflow_tensorflow, jswrap_arraybuffer_constructor, gen_jswrap_ArrayBufferView_ArrayBufferView, jswrap_function_constructor, jswrap_pin_analog, jswrap_pin_getInfo, jswrap_pin_getMode, jswrap_pin_mode, jswrap_pin_pulse, jswrap_pin_pwm, jswrap_pin_read, jswrap_pin_reset, jswrap_pin_set, jswrap_pin_toggle, jswrap_pin_write, jswrap_pin_writeAtTime, gen_jswrap_BTN, gen_jswrap_BTN1, gen_jswrap_BTN2, gen_jswrap_BTN3, gen_jswrap_BTN4, gen_jswrap_BTN5, jswrap_boolean_constructor, gen_jswrap_Float32Array_Float32Array, gen_jswrap_Float64Array_Float64Array, gen_jswrap_HIGH, gen_jswrap_I2C1, gen_jswrap_Infinity, gen_jswrap_Int16Array_Int16Array, gen_jswrap_Int32Array_Int32Array, gen_jswrap_Int8Array_Int8Array, gen_jswrap_LED1, gen_jswrap_LED2, gen_jswrap_LOW, gen_jswrap_LoopbackA, gen_jswrap_LoopbackB, gen_jswrap_NaN, gen_jswrap_SPI1, gen_jswrap_Serial1, gen_jswrap_Terminal, gen_jswrap_USB, gen_jswrap_Uint16Array_Uint16Array, gen_jswrap_Uint24Array_Uint24Array, gen_jswrap_Uint32Array_Uint32Array, gen_jswrap_Uint8Array_Uint8Array, gen_jswrap_Uint8ClampedArray_Uint8ClampedArray, gen_jswrap_VIBRATE, jshPinAnalog, jswrap_io_analogWrite, jswrap_arguments, jswrap_atob, jswrap_btoa, jswrap_interface_changeInterval, jswrap_interface_clearInterval, jswrap_interface_clearTimeout, jswrap_interface_clearWatch, jswrap_decodeURIComponent, jswrap_io_digitalPulse, jswrap_io_digitalRead, jswrap_io_digitalWrite, gen_jswrap_dump, jswrap_interface_echo, jswrap_interface_edit, jswrap_encodeURIComponent, jswrap_io_getPinMode, jswrap_interface_getSerial, gen_jswrap_getTime, jswrap_global, jswrap_isFinite, jswrap_isNaN, jswrap_interface_load, jswrap_parseFloat, jswrap_parseInt, gen_jswrap_peek16, gen_jswrap_peek32, gen_jswrap_peek8, jswrap_io_pinMode, gen_jswrap_poke16, gen_jswrap_poke32, gen_jswrap_poke8, jswrap_print, jswrap_require, jswrap_interface_reset, jswrap_interface_setBusyIndicator, jswrap_interface_setInterval, jswrap_interface_setSleepIndicator, jswrap_interactive_setTime, jswrap_interface_setTimeout, jswrap_interface_setWatch, jswrap_io_shiftOut, jswrap_trace, jswrap_banglejs_accelRd, jswrap_banglejs_appRect, jswrap_banglejs_beep, jswrap_banglejs_buzz, jswrap_banglejs_compassRd, jswrap_banglejs_compassWr, jswrap_banglejs_dbg, gen_jswrap_Bangle_drawWidgets, jswrap_banglejs_factoryReset, jswrap_banglejs_getAccel, jswrap_banglejs_getCompass, jswrap_banglejs_getGPSFix, jswrap_banglejs_getHealthStatus, jswrap_banglejs_getLCDMode, jswrap_banglejs_getLogo, jswrap_banglejs_getOptions, jswrap_banglejs_getStepCount, jswrap_banglejs_hrmRd, jswrap_banglejs_ioWr, jswrap_banglejs_isBacklightOn, jswrap_banglejs_isCharging, jswrap_banglejs_isCompassOn, jswrap_banglejs_isGPSOn, jswrap_banglejs_isHRMOn, jswrap_banglejs_isLCDOn, jswrap_banglejs_isLocked, jswrap_banglejs_lcdWr, gen_jswrap_Bangle_load, gen_jswrap_Bangle_loadWidgets, jswrap_banglejs_off, jswrap_banglejs_project, jswrap_banglejs_resetCompass, jswrap_banglejs_setLCDPowerBacklight, jswrap_banglejs_setCompassPower, jswrap_banglejs_setGPSPower, jswrap_banglejs_setHRMPower, jswrap_banglejs_setLCDBrightness, jswrap_banglejs_setLCDMode, jswrap_banglejs_setLCDOffset, jswrap_banglejs_setLCDPower, jswrap_banglejs_setLCDTimeout, jswrap_banglejs_setLocked, jswrap_banglejs_setOptions, jswrap_banglejs_setPollInterval, jswrap_banglejs_setStepCount, gen_jswrap_Bangle_setUI, gen_jswrap_Bangle_showClock, gen_jswrap_Bangle_showLauncher, gen_jswrap_Bangle_showRecoveryMenu, jswrap_banglejs_softOff, jswrap_banglejs_touchWr, jswrap_espruino_CRC32, jswrap_espruino_FFT, jswrap_espruino_HSBtoRGB, jswrap_espruino_asUTF8, jswrap_espruino_asm, jswrap_espruino_clip, jswrap_espruino_compiledC, jswrap_espruino_convolve, jswrap_espruino_decodeUTF8, jsvDefragment, jswrap_e_dumpFragmentation, jswrap_e_dumpStr, jswrap_espruino_dumpTimers, jswrap_e_dumpVariables, jswrap_espruino_enableWatchdog, jswrap_espruino_fromUTF8, jswrap_espruino_getAddressOf, gen_jswrap_E_getAnalogVRef, jswrap_espruino_getBattery, jswrap_espruino_getConsole, jswrap_espruino_getErrorFlags, jsfGetFlags, jswrap_espruino_getPowerUsage, jswrap_espruino_getSizeOf, jswrap_espruino_getTemperature, jshGetRandomNumber, jswrap_espruino_isUTF8, jswrap_espruino_kickWatchdog, jswrap_espruino_lockConsole, jswrap_espruino_lookupNoCase, jswrap_espruino_mapInPlace, jswrap_espruino_memoryArea, jswrap_espruino_memoryMap, jswrap_espruino_nativeCall, jswrap_pipe, jswrap_espruino_reboot, jswrap_espruino_reverseByte, jswrap_espruino_setBootCode, jswrap_espruino_setClock, jswrap_espruino_setConsole, jswrap_espruino_setDST, jsfSetFlags, jswrap_espruino_setPassword, jswrap_espruino_setTimeZone, gen_jswrap_E_showAlert, gen_jswrap_E_showMenu, gen_jswrap_E_showMessage, gen_jswrap_E_showPrompt, gen_jswrap_E_showScroller, srand, jswrap_espruino_stopEventPropagation, jswrap_espruino_sum, jswrap_espruino_toArrayBuffer, jswrap_espruino_toFlatString, jswrap_espruino_toJS, jswrap_espruino_toString, jswrap_espruino_toUint8Array, jswrap_espruino_variance, gen_jswrap_NRF_getAddress, gen_jswrap_NRF_getSecurityStatus, gen_jswrap_NRF_setAdvertising, gen_jswrap_NRF_setServices, gen_jswrap_Bluetooth_setConsole, jswrap_array_concat, jswrap_array_every, jswrap_array_fill, jswrap_array_filter, jswrap_array_find, jswrap_array_findIndex, jswrap_array_forEach, jswrap_array_includes, jswrap_array_indexOf, jswrap_array_join, jswrap_object_length, jswrap_array_map, gen_jswrap_Array_pop, jswrap_array_push, jswrap_array_reduce, jswrap_array_reverse, jswrap_array_shift, jswrap_array_slice, jswrap_array_some, jswrap_array_sort, jswrap_array_splice, jswrap_array_unshift, gen_jswrap_Array_isArray, gen_jswrap_ArrayBuffer_byteLength, gen_jswrap_ArrayBufferView_buffer, gen_jswrap_ArrayBufferView_byteLength, gen_jswrap_ArrayBufferView_byteOffset, jswrap_arraybufferview_map, jswrap_arraybufferview_set, jswrap_arraybufferview_sort, jswrap_arraybufferview_subarray, gen_jswrap_DataView_getFloat32, gen_jswrap_DataView_getFloat64, gen_jswrap_DataView_getInt16, gen_jswrap_DataView_getInt32, gen_jswrap_DataView_getInt8, gen_jswrap_DataView_getUint16, gen_jswrap_DataView_getUint32, gen_jswrap_DataView_getUint8, gen_jswrap_DataView_setFloat32, gen_jswrap_DataView_setFloat64, gen_jswrap_DataView_setInt16, gen_jswrap_DataView_setInt32, gen_jswrap_DataView_setInt8, gen_jswrap_DataView_setUint16, gen_jswrap_DataView_setUint32, gen_jswrap_DataView_setUint8, jswrap_date_now, jswrap_date_parse, jswrap_date_getDate, jswrap_date_getDay, jswrap_date_getFullYear, jswrap_date_getHours, jswrap_date_getIsDST, jswrap_date_getMilliseconds, jswrap_date_getMinutes, jswrap_date_getMonth, jswrap_date_getSeconds, jswrap_date_getTime, jswrap_date_getTimezoneOffset, jswrap_date_setDate, jswrap_date_setFullYear, jswrap_date_setHours, jswrap_date_setMilliseconds, jswrap_date_setMinutes, jswrap_date_setMonth, jswrap_date_setSeconds, jswrap_date_setTime, jswrap_date_toISOString, jswrap_date_toLocalISOString, jswrap_date_toString, jswrap_date_toUTCString, jswrap_error_toString, jswrap_json_parse, jswrap_json_stringify, gen_jswrap_Number_MAX_VALUE, gen_jswrap_Number_MIN_VALUE, gen_jswrap_Number_NEGATIVE_INFINITY, gen_jswrap_Number_NaN, gen_jswrap_Number_POSITIVE_INFINITY, jswrap_number_toFixed, jswrap_object_on, jswrap_object_clone, jswrap_object_emit, jswrap_object_hasOwnProperty, jswrap_object_prependListener, jswrap_object_removeAllListeners, jswrap_object_removeListener, jswrap_object_valueOf, jswrap_object_assign, jswrap_object_create, jswrap_object_defineProperties, jswrap_object_defineProperty, gen_jswrap_Object_entries, jswrap_object_fromEntries, jswrap_object_getOwnPropertyDescriptor, jswrap_object_getOwnPropertyDescriptors, gen_jswrap_Object_getOwnPropertyNames, jswrap_object_getPrototypeOf, gen_jswrap_Object_keys, jswrap_object_setPrototypeOf, gen_jswrap_Object_values, jswrap_function_apply_or_call, jswrap_function_bind, jswrap_function_replaceWith, jswrap_regexp_exec, jswrap_regexp_test, jswrap_string_charAt, jswrap_string_charCodeAt, jswrap_string_concat, jswrap_string_endsWith, gen_jswrap_String_includes, gen_jswrap_String_indexOf, gen_jswrap_String_lastIndexOf, jswrap_string_match, gen_jswrap_String_padEnd, gen_jswrap_String_padStart, gen_jswrap_String_removeAccents, jswrap_string_repeat, jswrap_string_replace, jswrap_string_replaceAll, jswrap_string_slice, jswrap_string_split, jswrap_string_startsWith, jswrap_string_substr, jswrap_string_substring, gen_jswrap_String_toLowerCase, gen_jswrap_String_toUpperCase, jswrap_string_trim, jswrap_string_fromCharCode, jswrap_modules_addCached, jswrap_modules_getCached, jswrap_modules_removeAllCached, jswrap_modules_removeCached, gen_jswrap_Math_E, gen_jswrap_Math_LN10, gen_jswrap_Math_LN2, gen_jswrap_Math_LOG10E, gen_jswrap_Math_LOG2E, gen_jswrap_Math_PI, gen_jswrap_Math_SQRT1_2, gen_jswrap_Math_SQRT2, fabs, gen_jswrap_Math_acos, jswrap_math_asin, jswrap_math_atan, jswrap_math_atan2, ceil, jswrap_math_clip, jswrap_math_cos, exp, floor, log, gen_jswrap_Math_max, gen_jswrap_Math_min, jswrap_math_pow, gen_jswrap_Math_random, jswrap_math_round, jswrap_math_sign, jswrap_math_sin, jswrap_math_sqrt, gen_jswrap_Math_tan, wrapAround, jswrap_flash_erasePage, jswrap_flash_getFree, jswrap_flash_getPage, jswrap_flash_read, jswrap_flash_write, jswrap_process_env, jswrap_process_memory, gen_jswrap_process_version, jswrap_onewire_read, jswrap_onewire_reset, jswrap_onewire_search, jswrap_onewire_select, jswrap_onewire_skip, jswrap_onewire_write, jswrap_promise_all, jswrap_promise_reject, jswrap_promise_resolve, jswrap_promise_catch, jswrap_promise_then, gen_jswrap_Serial_find, jswrap_stream_available, jswrap_serial_flush, jswrap_serial_inject, jswrap_serial_print, jswrap_serial_println, jswrap_stream_read, jswrap_serial_setConsole, jswrap_serial_setup, jswrap_serial_unsetup, jswrap_serial_write, jswrap_storage_compact, jswrap_storage_erase, jswrap_storage_eraseAll, jswrap_storage_getFree, jswrap_storage_getStats, jswrap_storage_hash, jswrap_storage_list, jswrap_storage_open, jswrap_storage_optimise, jswrap_storage_read, jswrap_storage_readArrayBuffer, jswrap_storage_readJSON, jswrap_storage_write, jswrap_storage_writeJSON, jswrap_storagefile_erase, jswrap_storagefile_getLength, jswrap_storagefile_read, jswrap_storagefile_readLine, jswrap_storagefile_write, gen_jswrap_SPI_find, jswrap_spi_send, jswrap_spi_send4bit, jswrap_spi_send8bit, jswrap_spi_setup, jswrap_spi_write, gen_jswrap_I2C_find, jswrap_i2c_readFrom, jswrap_i2c_readReg, jswrap_i2c_setup, jswrap_i2c_writeTo, jswrap_waveform_startInput, jswrap_waveform_startOutput, jswrap_waveform_stop, jswrap_heatshrink_compress, jswrap_heatshrink_decompress, jswrap_graphics_asBMP, jswrap_graphics_asImage, jswrap_graphics_asURL, jswrap_graphics_blendColor, jswrap_graphics_blit, jswrap_graphics_clear, jswrap_graphics_clearRect, jswrap_graphics_drawCircle, jswrap_graphics_drawCircleAA, jswrap_graphics_drawEllipse, jswrap_graphics_drawImage, jswrap_graphics_drawImages, jswrap_graphics_drawLine, jswrap_graphics_drawLineAA, gen_jswrap_Graphics_drawPoly, gen_jswrap_Graphics_drawPolyAA, jswrap_graphics_drawRect, jswrap_graphics_drawString, jswrap_graphics_dump, jswrap_graphics_fillCircle, jswrap_graphics_fillEllipse, gen_jswrap_Graphics_fillPoly, gen_jswrap_Graphics_fillPolyAA, jswrap_graphics_fillRect, jswrap_graphics_floodFill, jswrap_graphics_getBPP, gen_jswrap_Graphics_getBgColor, gen_jswrap_Graphics_getColor, jswrap_graphics_getFont, jswrap_graphics_getFontHeight, jswrap_graphics_getFonts, gen_jswrap_Graphics_getHeight, jswrap_graphics_getModified, jswrap_graphics_getPixel, jswrap_graphics_getVectorFontPolys, gen_jswrap_Graphics_getWidth, jswrap_graphics_imageMetrics, jswrap_graphics_lineTo, jswrap_graphics_moveTo, jswrap_graphics_quadraticBezier, jswrap_graphics_reset, jswrap_graphics_scroll, gen_jswrap_Graphics_setBgColor, jswrap_graphics_setClipRect, gen_jswrap_Graphics_setColor, jswrap_graphics_setFont, jswrap_graphics_setFontAlign, gen_jswrap_Graphics_setFontBitmap, jswrap_graphics_setFontCustom, jswrap_graphics_setFontPBF, gen_jswrap_Graphics_setFontVector, jswrap_graphics_setPixel, jswrap_graphics_setRotation, jswrap_graphics_setTheme, jswrap_graphics_stringMetrics, jswrap_graphics_stringWidth, jswrap_graphics_theme, jswrap_graphics_toColor, jswrap_graphics_transformVertices, jswrap_graphics_wrapString, jswrap_graphics_createArrayBuffer, jswrap_graphics_createCallback, jswrap_graphics_createImage, jswrap_graphics_getInstance, jswrap_tensorflow_create, jswrap_tfmicrointerpreter_getInput, jswrap_tfmicrointerpreter_getOutput, jswrap_tfmicrointerpreter_invoke, jsiConsolePrintString, jsiTabComplete_findCommon, jsiTabComplete_printCommon, jstPinTaskChecker, jstBufferTaskChecker, jsserialHardwareFunc, jsserialSoftwareFunc, jsserialEventCallback, jsspiHardwareFunc, jsspiFastSoftwareFunc, jsspiSoftwareFunc, heatshrink_ptr_output_cb, graphicsFallbackSetPixel, graphicsFallbackGetPixel, graphicsFallbackFillRect, graphicsFallbackBlit, graphicsFallbackScroll, graphicsSetPixel, lcdSetPixel_ArrayBuffer_flat1, lcdGetPixel_ArrayBuffer_flat, lcdFillRect_ArrayBuffer_flat1, lcdSetPixel_ArrayBuffer_flat8, lcdGetPixel_ArrayBuffer_flat8, lcdFillRect_ArrayBuffer_flat8, lcdScroll_ArrayBuffer_flat8, lcdSetPixel_ArrayBuffer_flat, lcdFillRect_ArrayBuffer_flat, lcdSetPixel_ArrayBuffer, lcdGetPixel_ArrayBuffer, lcdFillRect_ArrayBuffer, lcdSetPixel_JS, lcdFillRect_JS, lcdST7789_setPixel, lcdST7789_scroll, lcd_flip, btn1Handler, btn2Handler, btn3Handler, btn4Handler, btn5Handler, jswrap_banglejs_postInit, jswrap_banglejs_beep_callback, jswrap_banglejs_buzz_callback, _jswrap_arraybufferview_sort_float, _jswrap_arraybufferview_sort_int, jsvArrayAddUnique, _jswrap_object_entries_cb, _jswrap_object_values_cb, _jswrap_espruino_toString_char, _jswrap_espruino_toUint8Array_char, jswrap_io_shiftOutCallback, jswrap_pipe_src_close_listener, jswrap_pipe_drain_listener, jswrap_pipe_dst_close_listener, jsvLockAgainSafe, jsvUnLock, jsvSkipName, jsvMathsOp, jsvNewWithFlags, jsvNewFromFloat, jsvNewFromInteger, jsvNewFromString, jsvNewFromBool, jsvGetFloat, jsvGetInteger, jsvGetBool, jsvReplaceWith, jspeFunctionCall, jspGetNamedVariable, jspGetNamedField, jspGetVarNamedField, _jswrap_onewire_write_cb, _jswrap_prombox_resolve, _jswrap_prombox_reject, _jswrap_prombox_queueresolve, _jswrap_prombox_queuereject, _jswrap_prombox_all_reject, _jswrap_prombox_all_resolve, _jswrap_promise_reaction_call, _jswrap_serial_inject_cb, jswrap_spi_send_cb, jswrap_spi_write_cb, heatshrink_var_input_cb, heatshrink_var_output_cb, jswrap_graphics_getFonts_callback, graphicsFillPoly, _jswrap_graphics_getVectorFontPolys_cb, graphicsDrawLineAA, graphicsDrawLine, tflite__SimpleMemoryAllocator__SimpleMemoryAllocator_28tflite__ErrorReporter__2c_20unsigned_20char__2c_20unsigned_20long_29, tflite__SimpleMemoryAllocator___SimpleMemoryAllocator_28_29, tflite__SimpleMemoryAllocator___SimpleMemoryAllocator_28_29_1, tflite__SimpleMemoryAllocator__EnsureHeadSize_28unsigned_20long_2c_20unsigned_20long_29, tflite__SimpleMemoryAllocator__AllocateFromTail_28unsigned_20long_2c_20unsigned_20long_29, tflite__SimpleMemoryAllocator__AllocateTemp_28unsigned_20long_2c_20unsigned_20long_29, tflite__SimpleMemoryAllocator__ResetTempAllocations_28_29, tflite__internal__ContextHelper__ContextHelper_28tflite__ErrorReporter__2c_20tflite__MicroAllocator__2c_20tflite__Model_20const__29, tflite__internal__ContextHelper__ReportOpError_28TfLiteContext__2c_20char_20const__2c_20____29, tflite__internal__ContextHelper__GetTensor_28TfLiteContext_20const__2c_20int_29, tflite__internal__ContextHelper__GetEvalTensor_28TfLiteContext_20const__2c_20int_29, tflite__internal__ContextHelper__AllocatePersistentBuffer_28TfLiteContext__2c_20unsigned_20long_29, tflite__internal__ContextHelper__RequestScratchBufferInArena_28TfLiteContext__2c_20unsigned_20long_2c_20int__29, tflite__internal__ContextHelper__GetScratchBuffer_28TfLiteContext__2c_20int_29, tflite__MicroAllocator___MicroAllocator_28_29, tflite__MicroAllocator__MicroAllocator_28tflite__SimpleMemoryAllocator__2c_20tflite__ErrorReporter__29, tflite__MicroAllocator__AllocatePersistentTfLiteTensor_28tflite__Model_20const__2c_20TfLiteEvalTensor__2c_20int_29, tflite__MicroAllocator__AllocateTempTfLiteTensor_28tflite__Model_20const__2c_20TfLiteEvalTensor__2c_20int_29, tflite__MicroAllocator__ResetTempAllocations_28_29, tflite__MicroAllocator___MicroAllocator_28_29_1, tflite__MicroAllocator__AllocateNodeAndRegistrations_28tflite__Model_20const__2c_20tflite__NodeAndRegistration___29, tflite__MicroAllocator__PrepareNodeAndRegistrationDataFromFlatbuffer_28tflite__Model_20const__2c_20tflite__MicroOpResolver_20const__2c_20tflite__NodeAndRegistration__29, tflite__MicroAllocator__AllocateTfLiteEvalTensors_28tflite__Model_20const__2c_20TfLiteEvalTensor___29, tflite__MicroAllocator__AllocateVariables_28tflite__SubGraph_20const__2c_20TfLiteEvalTensor__29, tflite__MicroAllocator__AllocatePersistentTfLiteTensorInternal_28tflite__Model_20const__2c_20TfLiteEvalTensor__2c_20int_29, tflite__MicroAllocator__PopulateTfLiteTensorFromFlatbuffer_28tflite__Model_20const__2c_20tflite__SubGraph_20const__2c_20TfLiteTensor__2c_20int_2c_20bool_29, tflite__MicroAllocator__CommitStaticMemoryPlan_28tflite__Model_20const__2c_20tflite__SubGraph_20const__2c_20TfLiteEvalTensor__29, tflite___28anonymous_20namespace_29__MicroBuiltinDataAllocator__Allocate_28unsigned_20long_2c_20unsigned_20long_29, tflite___28anonymous_20namespace_29__MicroBuiltinDataAllocator__Deallocate_28void__29, tflite___28anonymous_20namespace_29__MicroBuiltinDataAllocator___MicroBuiltinDataAllocator_28_29, tflite___28anonymous_20namespace_29__MicroBuiltinDataAllocator___MicroBuiltinDataAllocator_28_29_1, __cxa_pure_virtual, tflite__BuiltinDataAllocator___BuiltinDataAllocator_28_29, tflite__BuiltinDataAllocator___BuiltinDataAllocator_28_29_1, tflite__ops__micro__depthwise_conv__Init_28TfLiteContext__2c_20char_20const__2c_20unsigned_20long_29, tflite__ops__micro__depthwise_conv__Prepare_28TfLiteContext__2c_20TfLiteNode__29, tflite__ops__micro__depthwise_conv__Eval_28TfLiteContext__2c_20TfLiteNode__29, tflite__ops__micro__conv__Init_28TfLiteContext__2c_20char_20const__2c_20unsigned_20long_29, tflite__ops__micro__conv__Prepare_28TfLiteContext__2c_20TfLiteNode__29, tflite__ops__micro__conv__Eval_28TfLiteContext__2c_20TfLiteNode__29, tflite__ops__micro__pooling__Init_28TfLiteContext__2c_20char_20const__2c_20unsigned_20long_29, tflite__ops__micro__pooling__Prepare_28TfLiteContext__2c_20TfLiteNode__29, tflite__ops__micro__pooling__AverageEval_28TfLiteContext__2c_20TfLiteNode__29, tflite__ops__micro__pooling__MaxEval_28TfLiteContext__2c_20TfLiteNode__29, tflite__ops__micro__activations__SoftmaxInit_28TfLiteContext__2c_20char_20const__2c_20unsigned_20long_29, tflite__ops__micro__activations__SoftmaxPrepare_28TfLiteContext__2c_20TfLiteNode__29, tflite__ops__micro__activations__SoftmaxEval_28TfLiteContext__2c_20TfLiteNode__29, tflite__ops__micro__fully_connected__Init_28TfLiteContext__2c_20char_20const__2c_20unsigned_20long_29, tflite__ops__micro__fully_connected__Prepare_28TfLiteContext__2c_20TfLiteNode__29, tflite__ops__micro__fully_connected__Eval_28TfLiteContext__2c_20TfLiteNode__29, tflite__ops__micro__quantize__Init_28TfLiteContext__2c_20char_20const__2c_20unsigned_20long_29, tflite__ops__micro__quantize__Prepare_28TfLiteContext__2c_20TfLiteNode__29, tflite__ops__micro__quantize__Eval_28TfLiteContext__2c_20TfLiteNode__29, tflite__ops__micro__dequantize__Init_28TfLiteContext__2c_20char_20const__2c_20unsigned_20long_29, tflite__ops__micro__dequantize__Prepare_28TfLiteContext__2c_20TfLiteNode__29, tflite__ops__micro__dequantize__Eval_28TfLiteContext__2c_20TfLiteNode__29, tflite__ops__micro__reshape__Prepare_28TfLiteContext__2c_20TfLiteNode__29, tflite__ops__micro__reshape__Eval_28TfLiteContext__2c_20TfLiteNode__29, tflite__MemoryPlanner___MemoryPlanner_28_29, tflite__MemoryPlanner___MemoryPlanner_28_29_1, tflite__GreedyMemoryPlanner___GreedyMemoryPlanner_28_29, tflite__GreedyMemoryPlanner___GreedyMemoryPlanner_28_29_1, tflite__GreedyMemoryPlanner__AddBuffer_28tflite__ErrorReporter__2c_20int_2c_20int_2c_20int_29, tflite__GreedyMemoryPlanner__GetMaximumMemorySize_28_29, tflite__GreedyMemoryPlanner__GetBufferCount_28_29, tflite__GreedyMemoryPlanner__GetOffsetForBuffer_28tflite__ErrorReporter__2c_20int_2c_20int__29, tflite__ParseDepthwiseConv2D_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29, tflite__ParseConv2D_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29, tflite__ParsePool_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29, tflite__ParseFullyConnected_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29, tflite__ParseSoftmax_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29, tflite__ParseQuantize_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29, tflite__ParseDequantize_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29, tflite__ParseReshape_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29, tflite__EspruinoErrorReporter___EspruinoErrorReporter_28_29, tflite__EspruinoErrorReporter___EspruinoErrorReporter_28_29_1, tflite__EspruinoErrorReporter__Report_28char_20const__2c_20void__29, tflite__ErrorReporter___ErrorReporter_28_29, tflite__ErrorReporter___ErrorReporter_28_29_1, tflite__MicroOpResolver__FindOp_28tflite__BuiltinOperator_2c_20int_29_20const, tflite__MicroOpResolver__FindOp_28char_20const__2c_20int_29_20const, tflite__OpResolver__GetDelegates_28int_29_20const, tflite__MicroMutableOpResolver_9u____MicroMutableOpResolver_28_29, tflite__MicroMutableOpResolver_9u____MicroMutableOpResolver_28_29_1, tflite__MicroMutableOpResolver_9u___FindOp_28tflite__BuiltinOperator_29_20const, tflite__MicroMutableOpResolver_9u___FindOp_28char_20const__29_20const, tflite__MicroMutableOpResolver_9u___GetOpDataParser_28tflite__BuiltinOperator_29_20const, tflite__MicroOpResolver___MicroOpResolver_28_29, tflite__MicroOpResolver___MicroOpResolver_28_29_1, tflite__OpResolver___OpResolver_28_29, tflite__OpResolver___OpResolver_28_29_1, __stdio_close, __stdio_write, __stdio_seek]);
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
}
 
 return {
  "__wasm_call_ctors": __wasm_call_ctors, 
  "__indirect_function_table": FUNCTION_TABLE, 
  "jshPushIOCharEvent": jshPushIOCharEvent, 
  "jshGetCharToTransmit": jshGetCharToTransmit, 
  "jshGetDeviceToTransmit": jshGetDeviceToTransmit, 
  "jsGfxChanged": jsGfxChanged, 
  "jsGfxGetPtr": jsGfxGetPtr, 
  "jsInit": jsInit, 
  "jsIdle": jsIdle, 
  "jsSendPinWatchEvent": jsSendPinWatchEvent, 
  "jsSendTouchEvent": jsSendTouchEvent, 
  "jsKill": jsKill, 
  "__errno_location": __errno_location, 
  "fflush": fflush, 
  "emscripten_stack_init": emscripten_stack_init, 
  "emscripten_stack_get_free": emscripten_stack_get_free, 
  "emscripten_stack_get_base": emscripten_stack_get_base, 
  "emscripten_stack_get_end": emscripten_stack_get_end, 
  "stackSave": stackSave, 
  "stackRestore": stackRestore, 
  "stackAlloc": stackAlloc, 
  "dynCall_jiji": legalstub$dynCall_jiji
};
}

  return asmFunc(asmLibraryArg);
}
// EMSCRIPTEN_END_ASM




)(asmLibraryArg);
  },

  instantiate: /** @suppress{checkTypes} */ function(binary, info) {
    return {
      then: function(ok) {
        var module = new WebAssembly.Module(binary);
        ok({
          'instance': new WebAssembly.Instance(module)
        });
        // Emulate a simple WebAssembly.instantiate(..).then(()=>{}).catch(()=>{}) syntax.
        return { catch: function() {} };
      }
    };
  },

  RuntimeError: Error
};

// We don't need to actually download a wasm binary, mark it as present but empty.
wasmBinary = [];

// end include: wasm2js.js
if (typeof WebAssembly != 'object') {
  abort('no native wasm support detected');
}

// Wasm globals

var wasmMemory;

//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed' + (text ? ': ' + text : ''));
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
/** @param {string|null=} returnType
    @param {Array=} argTypes
    @param {Arguments|Array=} args
    @param {Object=} opts */
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') {
      
      return UTF8ToString(ret);
    }
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  function onDone(ret) {
    if (stack !== 0) stackRestore(stack);
    return convertReturnValue(ret);
  }

  ret = onDone(ret);
  return ret;
}

/** @param {string=} returnType
    @param {Array=} argTypes
    @param {Object=} opts */
function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

// We used to include malloc/free by default in the past. Show a helpful error in
// builds with assertions.
function _malloc() {
  abort("malloc() called but not included in the build - add '_malloc' to EXPORTED_FUNCTIONS");
}
function _free() {
  // Show a helpful error since we used to include free by default in the past.
  abort("free() called but not included in the build - add '_free' to EXPORTED_FUNCTIONS");
}

// include: runtime_legacy.js


var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call

/**
 * allocate(): This function is no longer used by emscripten but is kept around to avoid
 *             breaking external users.
 *             You should normally not use allocate(), and instead allocate
 *             memory using _malloc()/stackAlloc(), initialize it with
 *             setValue(), and so forth.
 * @param {(Uint8Array|Array<number>)} slab: An array of data.
 * @param {number=} allocator : How to allocate memory, see ALLOC_*
 */
function allocate(slab, allocator) {
  var ret;
  assert(typeof allocator == 'number', 'allocate no longer takes a type argument')
  assert(typeof slab != 'number', 'allocate no longer takes a number as arg0')

  if (allocator == ALLOC_STACK) {
    ret = stackAlloc(slab.length);
  } else {
    ret = abort('malloc was not included, but is needed in allocate. Adding "_malloc" to EXPORTED_FUNCTIONS should fix that. This may be a bug in the compiler, please file an issue.');;
  }

  if (!slab.subarray && !slab.slice) {
    slab = new Uint8Array(slab);
  }
  HEAPU8.set(slab, ret);
  return ret;
}

// end include: runtime_legacy.js
// include: runtime_strings.js


// runtime_strings.js: Strings related runtime functions that are part of both MINIMAL_RUNTIME and regular runtime.

var UTF8Decoder = typeof TextDecoder != 'undefined' ? new TextDecoder('utf8') : undefined;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.
/**
 * heapOrArray is either a regular array, or a JavaScript typed array view.
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(heapOrArray, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {
    return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = heapOrArray[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = heapOrArray[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = heapOrArray[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string in wasm memory to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heapOrArray[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   heap: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      heap[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      heap[outIdx++] = 0xC0 | (u >> 6);
      heap[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      heap[outIdx++] = 0xE0 | (u >> 12);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u > 0x10FFFF) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF).');
      heap[outIdx++] = 0xF0 | (u >> 18);
      heap[outIdx++] = 0x80 | ((u >> 12) & 63);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  heap[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}

// end include: runtime_strings.js
// include: runtime_strings_extra.js


// runtime_strings_extra.js: Strings related runtime functions that are available only in regular runtime.

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder != 'undefined' ? new TextDecoder('utf-16le') : undefined;

function UTF16ToString(ptr, maxBytesToRead) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  var maxIdx = idx + maxBytesToRead / 2;
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var str = '';

    // If maxBytesToRead is not passed explicitly, it will be undefined, and the for-loop's condition
    // will always evaluate to true. The loop is then terminated on the first null char.
    for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) break;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }

    return str;
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)] = codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)] = 0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr, maxBytesToRead) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(i >= maxBytesToRead / 4)) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0) break;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
  return str;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)] = codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)] = 0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = abort('malloc was not included, but is needed in allocateUTF8. Adding "_malloc" to EXPORTED_FUNCTIONS should fix that. This may be a bug in the compiler, please file an issue.');;
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated
    @param {boolean=} dontAddNull */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

/** @param {boolean=} dontAddNull */
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === (str.charCodeAt(i) & 0xff));
    HEAP8[((buffer++)>>0)] = str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)] = 0;
}

// end include: runtime_strings_extra.js
// Memory management

var HEAP,
/** @type {!ArrayBuffer} */
  buffer,
/** @type {!Int8Array} */
  HEAP8,
/** @type {!Uint8Array} */
  HEAPU8,
/** @type {!Int16Array} */
  HEAP16,
/** @type {!Uint16Array} */
  HEAPU16,
/** @type {!Int32Array} */
  HEAP32,
/** @type {!Uint32Array} */
  HEAPU32,
/** @type {!Float32Array} */
  HEAPF32,
/** @type {!Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 16777216;legacyModuleProp('INITIAL_MEMORY', 'INITIAL_MEMORY');

assert(INITIAL_MEMORY >= TOTAL_STACK, 'INITIAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array != 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray != undefined && Int32Array.prototype.set != undefined,
       'JS engine does not provide full typed array support');

// In non-standalone/normal mode, we create the memory here.
// include: runtime_init_memory.js


// Create the wasm memory. (Note: this only applies if IMPORTED_MEMORY is defined)

  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else
  {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_MEMORY / 65536,
      'maximum': INITIAL_MEMORY / 65536
    });
  }

if (wasmMemory) {
  buffer = wasmMemory.buffer;
}

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['INITIAL_MEMORY'].
INITIAL_MEMORY = buffer.byteLength;
assert(INITIAL_MEMORY % 65536 === 0);
updateGlobalBufferAndViews(buffer);

// end include: runtime_init_memory.js

// include: runtime_init_table.js
// In regular non-RELOCATABLE mode the table is exported
// from the wasm module and this will be assigned once
// the exports are available.
var wasmTable;

// end include: runtime_init_table.js
// include: runtime_stack_check.js


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  var max = _emscripten_stack_get_end();
  assert((max & 3) == 0);
  // The stack grow downwards towards _emscripten_stack_get_end.
  // We write cookies to the final two words in the stack and detect if they are
  // ever overwritten.
  HEAP32[((max)>>2)] = 0x2135467;
  HEAP32[(((max)+(4))>>2)] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  HEAPU32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  if (ABORT) return;
  var max = _emscripten_stack_get_end();
  var cookie1 = HEAPU32[((max)>>2)];
  var cookie2 = HEAPU32[(((max)+(4))>>2)];
  if (cookie1 != 0x2135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x' + cookie2.toString(16) + ' 0x' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  if (HEAPU32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

// end include: runtime_stack_check.js
// include: runtime_assertions.js


// Endianness check
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian! (Run with -sSUPPORT_BIG_ENDIAN to bypass)';
})();

// end include: runtime_assertions.js
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;

function keepRuntimeAlive() {
  return noExitRuntime;
}

function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  assert(!runtimeInitialized);
  runtimeInitialized = true;

  checkStackCookie();

  
  callRuntimeCallbacks(__ATINIT__);
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// include: runtime_math.js


// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

// end include: runtime_math.js
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval != 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

/** @param {string|number=} what */
function abort(what) {
  {
    if (Module['onAbort']) {
      Module['onAbort'](what);
    }
  }

  what = 'Aborted(' + what + ')';
  // TODO(sbc): Should we remove printing and leave it up to whoever
  // catches the exception?
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  // Use a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  // FIXME This approach does not work in Wasm EH because it currently does not assume
  // all RuntimeErrors are from traps; it decides whether a RuntimeError is from
  // a trap or not based on a hidden field within the object. So at the moment
  // we don't have a way of throwing a wasm trap from JS. TODO Make a JS API that
  // allows this in the wasm spec.

  // Suppress closure compiler warning here. Closure compiler's builtin extern
  // defintion for WebAssembly.RuntimeError claims it takes no arguments even
  // though it can.
  // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure gets fixed.
  /** @suppress {checkTypes} */
  var e = new WebAssembly.RuntimeError(what);

  // Throw the error whether or not MODULARIZE is set because abort is used
  // in code paths apart from instantiation where an exception is expected
  // to be thrown when abort is called.
  throw e;
}

// {{MEM_INITIALIZER}}

// include: memoryprofiler.js


// end include: memoryprofiler.js
// show errors on likely calls to FS when it was not included
var FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with -sFORCE_FILESYSTEM');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;

// include: URIUtils.js


// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  // Prefix of data URIs emitted by SINGLE_FILE and related options.
  return filename.startsWith(dataURIPrefix);
}

// Indicates whether filename is delivered via file protocol (as opposed to http/https)
function isFileURI(filename) {
  return filename.startsWith('file://');
}

// end include: URIUtils.js
/** @param {boolean=} fixedasm */
function createExportWrapper(name, fixedasm) {
  return function() {
    var displayName = name;
    var asm = fixedasm;
    if (!fixedasm) {
      asm = Module['asm'];
    }
    assert(runtimeInitialized, 'native function `' + displayName + '` called before runtime initialization');
    if (!asm[name]) {
      assert(asm[name], 'exported native function `' + displayName + '` not found');
    }
    return asm[name].apply(null, arguments);
  };
}

var wasmBinaryFile;
  wasmBinaryFile = 'emulator_banglejs1.wasm';
  if (!isDataURI(wasmBinaryFile)) {
    wasmBinaryFile = locateFile(wasmBinaryFile);
  }

function getBinary(file) {
  try {
    if (file == wasmBinaryFile && wasmBinary) {
      return new Uint8Array(wasmBinary);
    }
    var binary = tryParseAsDataURI(file);
    if (binary) {
      return binary;
    }
    if (readBinary) {
      return readBinary(file);
    } else {
      throw "both async and sync fetching of the wasm failed";
    }
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // If we don't have the binary yet, try to to load it asynchronously.
  // Fetch has some additional restrictions over XHR, like it can't be used on a file:// url.
  // See https://github.com/github/fetch/pull/92#issuecomment-140665932
  // Cordova or Electron apps are typically loaded from a file:// url.
  // So use fetch if it is available and the url is not a file, otherwise fall back to XHR.
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
    if (typeof fetch == 'function'
      && !isFileURI(wasmBinaryFile)
    ) {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
        if (!response['ok']) {
          throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
        }
        return response['arrayBuffer']();
      }).catch(function () {
          return getBinary(wasmBinaryFile);
      });
    }
    else {
      if (readAsync) {
        // fetch is not available or url is file => try XHR (readAsync uses XHR internally)
        return new Promise(function(resolve, reject) {
          readAsync(wasmBinaryFile, function(response) { resolve(new Uint8Array(/** @type{!ArrayBuffer} */(response))) }, reject)
        });
      }
    }
  }

  // Otherwise, getBinary should be able to get it synchronously
  return Promise.resolve().then(function() { return getBinary(wasmBinaryFile); });
}

// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': asmLibraryArg,
    'wasi_snapshot_preview1': asmLibraryArg,
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    var exports = instance.exports;

    Module['asm'] = exports;

    wasmTable = Module['asm']['__indirect_function_table'];
    assert(wasmTable, "table not found in wasm exports");

    addOnInit(Module['asm']['__wasm_call_ctors']);

    removeRunDependency('wasm-instantiate');

  }
  // we can't run yet (except in a pthread, where we have a custom sync instantiator)
  addRunDependency('wasm-instantiate');

  // Prefer streaming instantiation if available.
  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiationResult(result) {
    // 'result' is a ResultObject object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
    // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(result['instance']);
  }

  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      return WebAssembly.instantiate(binary, info);
    }).then(function (instance) {
      return instance;
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);

      // Warn on some common problems.
      if (isFileURI(wasmBinaryFile)) {
        err('warning: Loading from a file URI (' + wasmBinaryFile + ') is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing');
      }
      abort(reason);
    });
  }

  function instantiateAsync() {
    if (!wasmBinary &&
        typeof WebAssembly.instantiateStreaming == 'function' &&
        !isDataURI(wasmBinaryFile) &&
        // Don't use streaming for file:// delivered objects in a webview, fetch them synchronously.
        !isFileURI(wasmBinaryFile) &&
        // Avoid instantiateStreaming() on Node.js environment for now, as while
        // Node.js v18.1.0 implements it, it does not have a full fetch()
        // implementation yet.
        //
        // Reference:
        //   https://github.com/emscripten-core/emscripten/pull/16917
        !ENVIRONMENT_IS_NODE &&
        typeof fetch == 'function') {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
        // Suppress closure warning here since the upstream definition for
        // instantiateStreaming only allows Promise<Repsponse> rather than
        // an actual Response.
        // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure is fixed.
        /** @suppress {checkTypes} */
        var result = WebAssembly.instantiateStreaming(response, info);

        return result.then(
          receiveInstantiationResult,
          function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err('wasm streaming compile failed: ' + reason);
            err('falling back to ArrayBuffer instantiation');
            return instantiateArrayBuffer(receiveInstantiationResult);
          });
      });
    } else {
      return instantiateArrayBuffer(receiveInstantiationResult);
    }
  }

  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  // Also pthreads and wasm workers initialize the wasm instance through this path.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  instantiateAsync();
  return {}; // no exports yet; we'll fill them in later
}

// Globals used by JS i64 conversions (see makeSetValue)
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = {
  154241: () => { jsHandleIO(); },  
 154259: ($0, $1) => { hwSetPinValue($0,$1) },  
 154284: ($0) => { return hwGetPinValue($0) },  
 154313: () => { return Date.now(); },  
 154336: ($0, $1, $2) => { hwFlashWritePtr($0,$1,$2); },  
 154367: ($0) => { return hwFlashRead($0) },  
 154394: ($0, $1, $2) => { hwFlashWritePtr($0,$1,$2); }
};
function emscripten_memcpy_js(dest,src,numBytes) { var destHeap = new Uint8Array(Module.HEAPU8.buffer, dest, numBytes); var srcHeap = new Uint8Array(Module.HEAPU8.buffer, src, numBytes); destHeap.set(srcHeap); }





  function callRuntimeCallbacks(callbacks) {
      while (callbacks.length > 0) {
        var callback = callbacks.shift();
        if (typeof callback == 'function') {
          callback(Module); // Pass the module as the first argument.
          continue;
        }
        var func = callback.func;
        if (typeof func == 'number') {
          if (callback.arg === undefined) {
            // Run the wasm function ptr with signature 'v'. If no function
            // with such signature was exported, this call does not need
            // to be emitted (and would confuse Closure)
            getWasmTableEntry(func)();
          } else {
            // If any function with signature 'vi' was exported, run
            // the callback with that signature.
            getWasmTableEntry(func)(callback.arg);
          }
        } else {
          func(callback.arg === undefined ? null : callback.arg);
        }
      }
    }

  function withStackSave(f) {
      var stack = stackSave();
      var ret = f();
      stackRestore(stack);
      return ret;
    }
  function demangle(func) {
      warnOnce('warning: build with -sDEMANGLE_SUPPORT to link in libcxxabi demangling');
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b_Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  
    /**
     * @param {number} ptr
     * @param {string} type
     */
  function getValue(ptr, type = 'i8') {
      if (type.endsWith('*')) type = 'i32';
      switch (type) {
        case 'i1': return HEAP8[((ptr)>>0)];
        case 'i8': return HEAP8[((ptr)>>0)];
        case 'i16': return HEAP16[((ptr)>>1)];
        case 'i32': return HEAP32[((ptr)>>2)];
        case 'i64': return HEAP32[((ptr)>>2)];
        case 'float': return HEAPF32[((ptr)>>2)];
        case 'double': return Number(HEAPF64[((ptr)>>3)]);
        default: abort('invalid type for getValue: ' + type);
      }
      return null;
    }

  function getWasmTableEntry(funcPtr) {
      // In -Os and -Oz builds, do not implement a JS side wasm table mirror for small
      // code size, but directly access wasmTable, which is a bit slower as uncached.
      return wasmTable.get(funcPtr);
    }

  function handleException(e) {
      // Certain exception types we do not treat as errors since they are used for
      // internal control flow.
      // 1. ExitStatus, which is thrown by exit()
      // 2. "unwind", which is thrown by emscripten_unwind_to_js_event_loop() and others
      //    that wish to return to JS event loop.
      if (e instanceof ExitStatus || e == 'unwind') {
        return EXITSTATUS;
      }
      quit_(1, e);
    }

  function jsStackTrace() {
      var error = new Error();
      if (!error.stack) {
        // IE10+ special cases: It does have callstack info, but it is only
        // populated if an Error object is thrown, so try that as a special-case.
        try {
          throw new Error();
        } catch(e) {
          error = e;
        }
        if (!error.stack) {
          return '(no stack trace available)';
        }
      }
      return error.stack.toString();
    }

  
    /**
     * @param {number} ptr
     * @param {number} value
     * @param {string} type
     */
  function setValue(ptr, value, type = 'i8') {
      if (type.endsWith('*')) type = 'i32';
      switch (type) {
        case 'i1': HEAP8[((ptr)>>0)] = value; break;
        case 'i8': HEAP8[((ptr)>>0)] = value; break;
        case 'i16': HEAP16[((ptr)>>1)] = value; break;
        case 'i32': HEAP32[((ptr)>>2)] = value; break;
        case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)] = tempI64[0],HEAP32[(((ptr)+(4))>>2)] = tempI64[1]); break;
        case 'float': HEAPF32[((ptr)>>2)] = value; break;
        case 'double': HEAPF64[((ptr)>>3)] = value; break;
        default: abort('invalid type for setValue: ' + type);
      }
    }

  function setWasmTableEntry(idx, func) {
      wasmTable.set(idx, func);
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  function _abort() {
      abort('native code called abort()');
    }

  var readAsmConstArgsArray = [];
  function readAsmConstArgs(sigPtr, buf) {
      // Nobody should have mutated _readAsmConstArgsArray underneath us to be something else than an array.
      assert(Array.isArray(readAsmConstArgsArray));
      // The input buffer is allocated on the stack, so it must be stack-aligned.
      assert(buf % 16 == 0);
      readAsmConstArgsArray.length = 0;
      var ch;
      // Most arguments are i32s, so shift the buffer pointer so it is a plain
      // index into HEAP32.
      buf >>= 2;
      while (ch = HEAPU8[sigPtr++]) {
        var chr = String.fromCharCode(ch);
        var validChars = ['d', 'f', 'i'];
        assert(validChars.includes(chr), 'Invalid character ' + ch + '("' + chr + '") in readAsmConstArgs! Use only [' + validChars + '], and do not specify "v" for void return argument.');
        // Floats are always passed as doubles, and doubles and int64s take up 8
        // bytes (two 32-bit slots) in memory, align reads to these:
        buf += (ch != 105/*i*/) & buf;
        readAsmConstArgsArray.push(
          ch == 105/*i*/ ? HEAP32[buf] :
         HEAPF64[buf++ >> 1]
        );
        ++buf;
      }
      return readAsmConstArgsArray;
    }
  function _emscripten_asm_const_int(code, sigPtr, argbuf) {
      var args = readAsmConstArgs(sigPtr, argbuf);
      if (!ASM_CONSTS.hasOwnProperty(code)) abort('No EM_ASM constant found at address ' + code);
      return ASM_CONSTS[code].apply(null, args);
    }
  function _emscripten_asm_const_double(a0,a1,a2
  ) {
  return _emscripten_asm_const_int(a0,a1,a2);
  }


  var SYSCALLS = {varargs:undefined,get:function() {
        assert(SYSCALLS.varargs != undefined);
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      }};
  function _fd_close(fd) {
      abort('fd_close called without SYSCALLS_REQUIRE_FILESYSTEM');
    }

  function convertI32PairToI53Checked(lo, hi) {
      assert(lo == (lo >>> 0) || lo == (lo|0)); // lo should either be a i32 or a u32
      assert(hi === (hi|0));                    // hi should be a i32
      return ((hi + 0x200000) >>> 0 < 0x400001 - !!lo) ? (lo >>> 0) + hi * 4294967296 : NaN;
    }
  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {
      return 70;
    }

  var printCharBuffers = [null,[],[]];
  function printChar(stream, curr) {
      var buffer = printCharBuffers[stream];
      assert(buffer);
      if (curr === 0 || curr === 10) {
        (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));
        buffer.length = 0;
      } else {
        buffer.push(curr);
      }
    }
  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      _fflush(0);
      if (printCharBuffers[1].length) printChar(1, 10);
      if (printCharBuffers[2].length) printChar(2, 10);
    }
  function _fd_write(fd, iov, iovcnt, pnum) {
      // hack to support printf in SYSCALLS_REQUIRE_FILESYSTEM=0
      var num = 0;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAPU32[((iov)>>2)];
        var len = HEAPU32[(((iov)+(4))>>2)];
        iov += 8;
        for (var j = 0; j < len; j++) {
          printChar(fd, HEAPU8[ptr+j]);
        }
        num += len;
      }
      HEAPU32[((pnum)>>2)] = num;
      return 0;
    }

  function _setTempRet0(val) {
      setTempRet0(val);
    }
var ASSERTIONS = true;



/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {string} input The string to decode.
 */
var decodeBase64 = typeof atob == 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE == 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf = Buffer.from(s, 'base64');
    return new Uint8Array(buf['buffer'], buf['byteOffset'], buf['byteLength']);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


function checkIncomingModuleAPI() {
  ignoredModuleProp('fetchSettings');
}
var asmLibraryArg = {
  "abort": _abort,
  "emscripten_asm_const_double": _emscripten_asm_const_double,
  "emscripten_asm_const_int": _emscripten_asm_const_int,
  "emscripten_memcpy_js": emscripten_memcpy_js,
  "fd_close": _fd_close,
  "fd_seek": _fd_seek,
  "fd_write": _fd_write,
  "getTempRet0": getTempRet0,
  "memory": wasmMemory,
  "setTempRet0": setTempRet0
};
var asm = createWasm();
/** @type {function(...*):?} */
var ___wasm_call_ctors = Module["___wasm_call_ctors"] = createExportWrapper("__wasm_call_ctors");

/** @type {function(...*):?} */
var _jshPushIOCharEvent = Module["_jshPushIOCharEvent"] = createExportWrapper("jshPushIOCharEvent");

/** @type {function(...*):?} */
var _jshGetCharToTransmit = Module["_jshGetCharToTransmit"] = createExportWrapper("jshGetCharToTransmit");

/** @type {function(...*):?} */
var _jshGetDeviceToTransmit = Module["_jshGetDeviceToTransmit"] = createExportWrapper("jshGetDeviceToTransmit");

/** @type {function(...*):?} */
var _jsGfxChanged = Module["_jsGfxChanged"] = createExportWrapper("jsGfxChanged");

/** @type {function(...*):?} */
var _jsGfxGetPtr = Module["_jsGfxGetPtr"] = createExportWrapper("jsGfxGetPtr");

/** @type {function(...*):?} */
var _jsInit = Module["_jsInit"] = createExportWrapper("jsInit");

/** @type {function(...*):?} */
var _jsIdle = Module["_jsIdle"] = createExportWrapper("jsIdle");

/** @type {function(...*):?} */
var _jsSendPinWatchEvent = Module["_jsSendPinWatchEvent"] = createExportWrapper("jsSendPinWatchEvent");

/** @type {function(...*):?} */
var _jsSendTouchEvent = Module["_jsSendTouchEvent"] = createExportWrapper("jsSendTouchEvent");

/** @type {function(...*):?} */
var _jsKill = Module["_jsKill"] = createExportWrapper("jsKill");

/** @type {function(...*):?} */
var ___errno_location = Module["___errno_location"] = createExportWrapper("__errno_location");

/** @type {function(...*):?} */
var _fflush = Module["_fflush"] = createExportWrapper("fflush");

/** @type {function(...*):?} */
var _emscripten_stack_init = Module["_emscripten_stack_init"] = function() {
  return (_emscripten_stack_init = Module["_emscripten_stack_init"] = Module["asm"]["emscripten_stack_init"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = function() {
  return (_emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = Module["asm"]["emscripten_stack_get_free"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_get_base = Module["_emscripten_stack_get_base"] = function() {
  return (_emscripten_stack_get_base = Module["_emscripten_stack_get_base"] = Module["asm"]["emscripten_stack_get_base"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = function() {
  return (_emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = Module["asm"]["emscripten_stack_get_end"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var stackSave = Module["stackSave"] = createExportWrapper("stackSave");

/** @type {function(...*):?} */
var stackRestore = Module["stackRestore"] = createExportWrapper("stackRestore");

/** @type {function(...*):?} */
var stackAlloc = Module["stackAlloc"] = createExportWrapper("stackAlloc");

/** @type {function(...*):?} */
var dynCall_jiji = Module["dynCall_jiji"] = createExportWrapper("dynCall_jiji");





// === Auto-generated postamble setup entry stuff ===

Module["ccall"] = ccall;
unexportedRuntimeFunction('cwrap', false);
unexportedRuntimeFunction('allocate', false);
unexportedRuntimeFunction('UTF8ArrayToString', false);
unexportedRuntimeFunction('UTF8ToString', false);
unexportedRuntimeFunction('stringToUTF8Array', false);
unexportedRuntimeFunction('stringToUTF8', false);
unexportedRuntimeFunction('lengthBytesUTF8', false);
unexportedRuntimeFunction('addOnPreRun', false);
unexportedRuntimeFunction('addOnInit', false);
unexportedRuntimeFunction('addOnPreMain', false);
unexportedRuntimeFunction('addOnExit', false);
unexportedRuntimeFunction('addOnPostRun', false);
unexportedRuntimeFunction('addRunDependency', true);
unexportedRuntimeFunction('removeRunDependency', true);
unexportedRuntimeFunction('FS_createFolder', false);
unexportedRuntimeFunction('FS_createPath', true);
unexportedRuntimeFunction('FS_createDataFile', true);
unexportedRuntimeFunction('FS_createPreloadedFile', true);
unexportedRuntimeFunction('FS_createLazyFile', true);
unexportedRuntimeFunction('FS_createLink', false);
unexportedRuntimeFunction('FS_createDevice', true);
unexportedRuntimeFunction('FS_unlink', true);
unexportedRuntimeFunction('getLEB', false);
unexportedRuntimeFunction('getFunctionTables', false);
unexportedRuntimeFunction('alignFunctionTables', false);
unexportedRuntimeFunction('registerFunctions', false);
unexportedRuntimeFunction('addFunction', false);
unexportedRuntimeFunction('removeFunction', false);
unexportedRuntimeFunction('prettyPrint', false);
unexportedRuntimeFunction('getCompilerSetting', false);
unexportedRuntimeFunction('print', false);
unexportedRuntimeFunction('printErr', false);
unexportedRuntimeFunction('getTempRet0', false);
unexportedRuntimeFunction('setTempRet0', false);
unexportedRuntimeFunction('callMain', false);
unexportedRuntimeFunction('abort', false);
unexportedRuntimeFunction('keepRuntimeAlive', false);
unexportedRuntimeFunction('wasmMemory', false);
unexportedRuntimeFunction('warnOnce', false);
unexportedRuntimeFunction('stackSave', false);
unexportedRuntimeFunction('stackRestore', false);
unexportedRuntimeFunction('stackAlloc', false);
unexportedRuntimeFunction('AsciiToString', false);
unexportedRuntimeFunction('stringToAscii', false);
unexportedRuntimeFunction('UTF16ToString', false);
unexportedRuntimeFunction('stringToUTF16', false);
unexportedRuntimeFunction('lengthBytesUTF16', false);
unexportedRuntimeFunction('UTF32ToString', false);
unexportedRuntimeFunction('stringToUTF32', false);
unexportedRuntimeFunction('lengthBytesUTF32', false);
unexportedRuntimeFunction('allocateUTF8', false);
unexportedRuntimeFunction('allocateUTF8OnStack', false);
unexportedRuntimeFunction('ExitStatus', false);
unexportedRuntimeFunction('intArrayFromString', false);
unexportedRuntimeFunction('intArrayToString', false);
unexportedRuntimeFunction('writeStringToMemory', false);
unexportedRuntimeFunction('writeArrayToMemory', false);
unexportedRuntimeFunction('writeAsciiToMemory', false);
Module["writeStackCookie"] = writeStackCookie;
Module["checkStackCookie"] = checkStackCookie;
unexportedRuntimeFunction('intArrayFromBase64', false);
unexportedRuntimeFunction('tryParseAsDataURI', false);
unexportedRuntimeFunction('ptrToString', false);
unexportedRuntimeFunction('zeroMemory', false);
unexportedRuntimeFunction('stringToNewUTF8', false);
unexportedRuntimeFunction('getHeapMax', false);
unexportedRuntimeFunction('abortOnCannotGrowMemory', false);
unexportedRuntimeFunction('emscripten_realloc_buffer', false);
unexportedRuntimeFunction('ENV', false);
unexportedRuntimeFunction('ERRNO_CODES', false);
unexportedRuntimeFunction('ERRNO_MESSAGES', false);
unexportedRuntimeFunction('setErrNo', false);
unexportedRuntimeFunction('inetPton4', false);
unexportedRuntimeFunction('inetNtop4', false);
unexportedRuntimeFunction('inetPton6', false);
unexportedRuntimeFunction('inetNtop6', false);
unexportedRuntimeFunction('readSockaddr', false);
unexportedRuntimeFunction('writeSockaddr', false);
unexportedRuntimeFunction('DNS', false);
unexportedRuntimeFunction('getHostByName', false);
unexportedRuntimeFunction('Protocols', false);
unexportedRuntimeFunction('Sockets', false);
unexportedRuntimeFunction('getRandomDevice', false);
unexportedRuntimeFunction('traverseStack', false);
unexportedRuntimeFunction('UNWIND_CACHE', false);
unexportedRuntimeFunction('convertPCtoSourceLocation', false);
unexportedRuntimeFunction('readAsmConstArgsArray', false);
unexportedRuntimeFunction('readAsmConstArgs', false);
unexportedRuntimeFunction('mainThreadEM_ASM', false);
unexportedRuntimeFunction('jstoi_q', false);
unexportedRuntimeFunction('jstoi_s', false);
unexportedRuntimeFunction('getExecutableName', false);
unexportedRuntimeFunction('listenOnce', false);
unexportedRuntimeFunction('autoResumeAudioContext', false);
unexportedRuntimeFunction('dynCallLegacy', false);
unexportedRuntimeFunction('getDynCaller', false);
unexportedRuntimeFunction('dynCall', false);
unexportedRuntimeFunction('setWasmTableEntry', false);
unexportedRuntimeFunction('getWasmTableEntry', false);
unexportedRuntimeFunction('handleException', false);
unexportedRuntimeFunction('runtimeKeepalivePush', false);
unexportedRuntimeFunction('runtimeKeepalivePop', false);
unexportedRuntimeFunction('callUserCallback', false);
unexportedRuntimeFunction('maybeExit', false);
unexportedRuntimeFunction('safeSetTimeout', false);
unexportedRuntimeFunction('asmjsMangle', false);
unexportedRuntimeFunction('asyncLoad', false);
unexportedRuntimeFunction('alignMemory', false);
unexportedRuntimeFunction('mmapAlloc', false);
unexportedRuntimeFunction('writeI53ToI64', false);
unexportedRuntimeFunction('writeI53ToI64Clamped', false);
unexportedRuntimeFunction('writeI53ToI64Signaling', false);
unexportedRuntimeFunction('writeI53ToU64Clamped', false);
unexportedRuntimeFunction('writeI53ToU64Signaling', false);
unexportedRuntimeFunction('readI53FromI64', false);
unexportedRuntimeFunction('readI53FromU64', false);
unexportedRuntimeFunction('convertI32PairToI53', false);
unexportedRuntimeFunction('convertI32PairToI53Checked', false);
unexportedRuntimeFunction('convertU32PairToI53', false);
unexportedRuntimeFunction('reallyNegative', false);
unexportedRuntimeFunction('unSign', false);
unexportedRuntimeFunction('strLen', false);
unexportedRuntimeFunction('reSign', false);
unexportedRuntimeFunction('formatString', false);
unexportedRuntimeFunction('setValue', false);
unexportedRuntimeFunction('getValue', false);
unexportedRuntimeFunction('PATH', false);
unexportedRuntimeFunction('PATH_FS', false);
unexportedRuntimeFunction('SYSCALLS', false);
unexportedRuntimeFunction('getSocketFromFD', false);
unexportedRuntimeFunction('getSocketAddress', false);
unexportedRuntimeFunction('JSEvents', false);
unexportedRuntimeFunction('registerKeyEventCallback', false);
unexportedRuntimeFunction('specialHTMLTargets', false);
unexportedRuntimeFunction('maybeCStringToJsString', false);
unexportedRuntimeFunction('findEventTarget', false);
unexportedRuntimeFunction('findCanvasEventTarget', false);
unexportedRuntimeFunction('getBoundingClientRect', false);
unexportedRuntimeFunction('fillMouseEventData', false);
unexportedRuntimeFunction('registerMouseEventCallback', false);
unexportedRuntimeFunction('registerWheelEventCallback', false);
unexportedRuntimeFunction('registerUiEventCallback', false);
unexportedRuntimeFunction('registerFocusEventCallback', false);
unexportedRuntimeFunction('fillDeviceOrientationEventData', false);
unexportedRuntimeFunction('registerDeviceOrientationEventCallback', false);
unexportedRuntimeFunction('fillDeviceMotionEventData', false);
unexportedRuntimeFunction('registerDeviceMotionEventCallback', false);
unexportedRuntimeFunction('screenOrientation', false);
unexportedRuntimeFunction('fillOrientationChangeEventData', false);
unexportedRuntimeFunction('registerOrientationChangeEventCallback', false);
unexportedRuntimeFunction('fillFullscreenChangeEventData', false);
unexportedRuntimeFunction('registerFullscreenChangeEventCallback', false);
unexportedRuntimeFunction('JSEvents_requestFullscreen', false);
unexportedRuntimeFunction('JSEvents_resizeCanvasForFullscreen', false);
unexportedRuntimeFunction('registerRestoreOldStyle', false);
unexportedRuntimeFunction('hideEverythingExceptGivenElement', false);
unexportedRuntimeFunction('restoreHiddenElements', false);
unexportedRuntimeFunction('setLetterbox', false);
unexportedRuntimeFunction('currentFullscreenStrategy', false);
unexportedRuntimeFunction('restoreOldWindowedStyle', false);
unexportedRuntimeFunction('softFullscreenResizeWebGLRenderTarget', false);
unexportedRuntimeFunction('doRequestFullscreen', false);
unexportedRuntimeFunction('fillPointerlockChangeEventData', false);
unexportedRuntimeFunction('registerPointerlockChangeEventCallback', false);
unexportedRuntimeFunction('registerPointerlockErrorEventCallback', false);
unexportedRuntimeFunction('requestPointerLock', false);
unexportedRuntimeFunction('fillVisibilityChangeEventData', false);
unexportedRuntimeFunction('registerVisibilityChangeEventCallback', false);
unexportedRuntimeFunction('registerTouchEventCallback', false);
unexportedRuntimeFunction('fillGamepadEventData', false);
unexportedRuntimeFunction('registerGamepadEventCallback', false);
unexportedRuntimeFunction('registerBeforeUnloadEventCallback', false);
unexportedRuntimeFunction('fillBatteryEventData', false);
unexportedRuntimeFunction('battery', false);
unexportedRuntimeFunction('registerBatteryEventCallback', false);
unexportedRuntimeFunction('setCanvasElementSize', false);
unexportedRuntimeFunction('getCanvasElementSize', false);
unexportedRuntimeFunction('demangle', false);
unexportedRuntimeFunction('demangleAll', false);
unexportedRuntimeFunction('jsStackTrace', false);
unexportedRuntimeFunction('stackTrace', false);
unexportedRuntimeFunction('getEnvStrings', false);
unexportedRuntimeFunction('checkWasiClock', false);
unexportedRuntimeFunction('flush_NO_FILESYSTEM', false);
unexportedRuntimeFunction('dlopenMissingError', false);
unexportedRuntimeFunction('setImmediateWrapped', false);
unexportedRuntimeFunction('clearImmediateWrapped', false);
unexportedRuntimeFunction('polyfillSetImmediate', false);
unexportedRuntimeFunction('uncaughtExceptionCount', false);
unexportedRuntimeFunction('exceptionLast', false);
unexportedRuntimeFunction('exceptionCaught', false);
unexportedRuntimeFunction('ExceptionInfo', false);
unexportedRuntimeFunction('exception_addRef', false);
unexportedRuntimeFunction('exception_decRef', false);
unexportedRuntimeFunction('Browser', false);
unexportedRuntimeFunction('setMainLoop', false);
unexportedRuntimeFunction('wget', false);
unexportedRuntimeFunction('FS', false);
unexportedRuntimeFunction('MEMFS', false);
unexportedRuntimeFunction('TTY', false);
unexportedRuntimeFunction('PIPEFS', false);
unexportedRuntimeFunction('SOCKFS', false);
unexportedRuntimeFunction('_setNetworkCallback', false);
unexportedRuntimeFunction('tempFixedLengthArray', false);
unexportedRuntimeFunction('miniTempWebGLFloatBuffers', false);
unexportedRuntimeFunction('heapObjectForWebGLType', false);
unexportedRuntimeFunction('heapAccessShiftForWebGLHeap', false);
unexportedRuntimeFunction('GL', false);
unexportedRuntimeFunction('emscriptenWebGLGet', false);
unexportedRuntimeFunction('computeUnpackAlignedImageSize', false);
unexportedRuntimeFunction('emscriptenWebGLGetTexPixelData', false);
unexportedRuntimeFunction('emscriptenWebGLGetUniform', false);
unexportedRuntimeFunction('webglGetUniformLocation', false);
unexportedRuntimeFunction('webglPrepareUniformLocationsBeforeFirstUse', false);
unexportedRuntimeFunction('webglGetLeftBracePos', false);
unexportedRuntimeFunction('emscriptenWebGLGetVertexAttrib', false);
unexportedRuntimeFunction('writeGLArray', false);
unexportedRuntimeFunction('AL', false);
unexportedRuntimeFunction('SDL_unicode', false);
unexportedRuntimeFunction('SDL_ttfContext', false);
unexportedRuntimeFunction('SDL_audio', false);
unexportedRuntimeFunction('SDL', false);
unexportedRuntimeFunction('SDL_gfx', false);
unexportedRuntimeFunction('GLUT', false);
unexportedRuntimeFunction('EGL', false);
unexportedRuntimeFunction('GLFW_Window', false);
unexportedRuntimeFunction('GLFW', false);
unexportedRuntimeFunction('GLEW', false);
unexportedRuntimeFunction('IDBStore', false);
unexportedRuntimeFunction('runAndAbortIfError', false);
unexportedRuntimeSymbol('ALLOC_NORMAL', false);
unexportedRuntimeSymbol('ALLOC_STACK', false);

var calledRun;

/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

function stackCheckInit() {
  // This is normally called automatically during __wasm_call_ctors but need to
  // get these values before even running any of the ctors so we call it redundantly
  // here.
  _emscripten_stack_init();
  // TODO(sbc): Move writeStackCookie to native to to avoid this.
  writeStackCookie();
}

/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

    stackCheckInit();

  preRun();

  // a preRun added a dependency, run will be called later
  if (runDependencies > 0) {
    return;
  }

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var oldOut = out;
  var oldErr = err;
  var has = false;
  out = err = (x) => {
    has = true;
  }
  try { // it doesn't matter if it fails
    flush_NO_FILESYSTEM();
  } catch(e) {}
  out = oldOut;
  err = oldErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
    warnOnce('(this may also be due to not including full filesystem support - try building with -sFORCE_FILESYSTEM)');
  }
}

/** @param {boolean|number=} implicit */
function exit(status, implicit) {
  EXITSTATUS = status;

  checkUnflushedContent();

  // if exit() was called explicitly, warn the user if the runtime isn't actually being shut down
  if (keepRuntimeAlive() && !implicit) {
    var msg = 'program exited (with status: ' + status + '), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)';
    err(msg);
  }

  procExit(status);
}

function procExit(code) {
  EXITSTATUS = code;
  if (!keepRuntimeAlive()) {
    if (Module['onExit']) Module['onExit'](code);
    ABORT = true;
  }
  quit_(code, new ExitStatus(code));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

run();





